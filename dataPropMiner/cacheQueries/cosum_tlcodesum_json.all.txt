{'realIdstext': ['private List<Activity> findBestInsertion(List<Activity> partialRoute,boolean allowAsMajor){ _EL_   int startIndex=1; _EL_   int endIndex=partialRoute.size() - 1; _EL_   if (allowAsMajor) { _EL_     startIndex=0; _EL_     endIndex=partialRoute.size(); _EL_   } _EL_   List<Activity> newList=partialRoute; _EL_   double best=Double.POSITIVE_INFINITY; _EL_   List<Activity> bestList=null; _EL_   for (int i=startIndex; i <= endIndex; i++) { _EL_     List<Activity> tmpList=new ArrayList<>(newList); _EL_     Activity tmpActivity=getRelocationActivity(); _EL_     tmpList.add(i,tmpActivity); _EL_     double tmp=evaluateList(tmpList); _EL_     if (tmp < best) { _EL_       if (i == 0) { _EL_         tmpActivity.setType("major"); _EL_         tmpActivity.setEndTime(Time.parseTime("08:00:00")); _EL_       } _EL_  else       if (i == partialRoute.size()) { _EL_         tmpActivity.setType("major"); _EL_       } _EL_  else { _EL_         tmpActivity.setType("minor"); _EL_         tmpActivity.setMaximumDuration(Time.parseTime("00:20:00")); _EL_       } _EL_       best=tmp; _EL_       bestList=tmpList; _EL_     } _EL_   } _EL_   return bestList; _EL_ } _EL_ ', 'protected Tuple<BlobStoreIndexShardSnapshots,Integer> buildBlobStoreIndexShardSnapshots(Map<String,BlobMetaData> blobs){ _EL_   int latest=-1; _EL_   for (  String name : blobs.keySet()) { _EL_     if (name.startsWith(SNAPSHOT_INDEX_PREFIX)) { _EL_       try { _EL_         int gen=Integer.parseInt(name.substring(SNAPSHOT_INDEX_PREFIX.length())); _EL_         if (gen > latest) { _EL_           latest=gen; _EL_         } _EL_       } _EL_  catch (      NumberFormatException ex) { _EL_         logger.warn("failed to parse index file name [{}]",name); _EL_       } _EL_     } _EL_   } _EL_   if (latest >= 0) { _EL_     try { _EL_       return new Tuple<>(indexShardSnapshotsFormat.read(blobContainer,Integer.toString(latest)),latest); _EL_     } _EL_  catch (    IOException e) { _EL_       logger.warn("failed to read index file  [{}]",e,SNAPSHOT_INDEX_PREFIX + latest); _EL_     } _EL_   } _EL_   List<SnapshotFiles> snapshots=new ArrayList<>(); _EL_   for (  String name : blobs.keySet()) { _EL_     try { _EL_       BlobStoreIndexShardSnapshot snapshot=null; _EL_       if (name.startsWith(SNAPSHOT_PREFIX)) { _EL_         snapshot=indexShardSnapshotFormat.readBlob(blobContainer,name); _EL_       } _EL_  else       if (name.startsWith(LEGACY_SNAPSHOT_PREFIX)) { _EL_         snapshot=indexShardSnapshotLegacyFormat.readBlob(blobContainer,name); _EL_       } _EL_       if (snapshot != null) { _EL_         snapshots.add(new SnapshotFiles(snapshot.snapshot(),snapshot.indexFiles())); _EL_       } _EL_     } _EL_  catch (    IOException e) { _EL_       logger.warn("failed to read commit point [{}]",e,name); _EL_     } _EL_   } _EL_   return new Tuple<>(new BlobStoreIndexShardSnapshots(snapshots),-1); _EL_ } _EL_ ', 'public static Map<String,Object> convertDocumentFileToFile(DispatchContext dctx,Map<String,? extends Object> context){ _EL_   XMultiComponentFactory xmulticomponentfactory=null; _EL_   String stringUrl=(String)context.get("filenameFrom"); _EL_   String stringConvertedFile=(String)context.get("filenameTo"); _EL_   String inputMimeType=(String)context.get("inputMimeType"); _EL_   String outputMimeType=(String)context.get("outputMimeType"); _EL_   String oooHost=(String)context.get("oooHost"); _EL_   String oooPort=(String)context.get("oooPort"); _EL_   try { _EL_     xmulticomponentfactory=OpenOfficeWorker.getRemoteServer(oooHost,oooPort); _EL_     File inputFile=new File(stringUrl); _EL_     long fileSize=inputFile.length(); _EL_     FileInputStream fis=new FileInputStream(inputFile); _EL_     ByteArrayOutputStream baos=new ByteArrayOutputStream((int)fileSize); _EL_     int c; _EL_     while ((c=fis.read()) != -1) { _EL_       baos.write(c); _EL_     } _EL_     OpenOfficeByteArrayInputStream oobais=new OpenOfficeByteArrayInputStream(baos.toByteArray()); _EL_     OpenOfficeByteArrayOutputStream oobaos=OpenOfficeWorker.convertOODocByteStreamToByteStream(xmulticomponentfactory,oobais,inputMimeType,outputMimeType); _EL_     FileOutputStream fos=new FileOutputStream(stringConvertedFile); _EL_     fos.write(oobaos.toByteArray()); _EL_     fos.close(); _EL_     fis.close(); _EL_     oobais.close(); _EL_     oobaos.close(); _EL_     Map results=ServiceUtil.returnSuccess(); _EL_     return results; _EL_   } _EL_  catch (  IOException e) { _EL_     Debug.logError(e,"Error in OpenOffice operation: ",module); _EL_     return ServiceUtil.returnError(e.toString()); _EL_   } _EL_ catch (  Exception e) { _EL_     Debug.logError(e,"Error in OpenOffice operation: ",module); _EL_     return ServiceUtil.returnError(e.toString()); _EL_   } _EL_ } _EL_ ', 'private long acquireWrite(boolean interruptible,long deadline){ _EL_   WNode node=null, p; _EL_   for (int spins=-1; ; ) { _EL_     long m, s, ns; _EL_     if ((m=(s=state) & ABITS) == 0L) { _EL_       if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT))       return ns; _EL_     } _EL_  else     if (spins < 0)     spins=(m == WBIT && wtail == whead) ? SPINS : 0; _EL_  else     if (spins > 0) { _EL_       if (LockSupport.nextSecondarySeed() >= 0)       --spins; _EL_     } _EL_  else     if ((p=wtail) == null) { _EL_       WNode hd=new WNode(WMODE,null); _EL_       if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd; _EL_     } _EL_  else     if (node == null)     node=new WNode(WMODE,p); _EL_  else     if (node.prev != p)     node.prev=p; _EL_  else     if (U.compareAndSwapObject(this,WTAIL,p,node)) { _EL_       p.next=node; _EL_       break; _EL_     } _EL_   } _EL_   for (int spins=-1; ; ) { _EL_     WNode h, np, pp; _EL_     int ps; _EL_     if ((h=whead) == p) { _EL_       if (spins < 0)       spins=HEAD_SPINS; _EL_  else       if (spins < MAX_HEAD_SPINS)       spins<<=1; _EL_       for (int k=spins; ; ) { _EL_         long s, ns; _EL_         if (((s=state) & ABITS) == 0L) { _EL_           if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT)) { _EL_             whead=node; _EL_             node.prev=null; _EL_             return ns; _EL_           } _EL_         } _EL_  else         if (LockSupport.nextSecondarySeed() >= 0 && --k <= 0)         break; _EL_       } _EL_     } _EL_  else     if (h != null) { _EL_       WNode c; _EL_       Thread w; _EL_       while ((c=h.cowait) != null) { _EL_         if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w); _EL_       } _EL_     } _EL_     if (whead == h) { _EL_       if ((np=node.prev) != p) { _EL_         if (np != null)         (p=np).next=node; _EL_       } _EL_  else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING); _EL_  else       if (ps == CANCELLED) { _EL_         if ((pp=p.prev) != null) { _EL_           node.prev=pp; _EL_           pp.next=node; _EL_         } _EL_       } _EL_  else { _EL_         long time; _EL_         if (deadline == 0L)         time=0L; _EL_  else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false); _EL_         Thread wt=Thread.currentThread(); _EL_         U.putObject(wt,PARKBLOCKER,this); _EL_         node.thread=wt; _EL_         if (p.status < 0 && (p != h || (state & ABITS) != 0L) && whead == h && node.prev == p)         U.park(false,time); _EL_         node.thread=null; _EL_         U.putObject(wt,PARKBLOCKER,null); _EL_         if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean next() throws EOFException { _EL_   if (limit >= fileSize) { _EL_     throw new EOFException("End of file was reached"); _EL_   } _EL_   if (mem.getLongVolatile(Structure.Limit) <= limit) { _EL_     return false; _EL_   } _EL_   byte commit=mem.getByteVolatile(limit); _EL_   byte rollback=mem.getByteVolatile(limit + Length.Commit); _EL_   if (rollback == Rollback.Set) { _EL_     limit+=Length.RecordHeader + recordSize; _EL_     timeoutCounter=0; _EL_     timerStart=0; _EL_     return false; _EL_   } _EL_   if (commit == Commit.Set) { _EL_     timeoutCounter=0; _EL_     timerStart=0; _EL_     return true; _EL_   } _EL_   timeoutCounter++; _EL_   if (timeoutCounter >= MAX_TIMEOUT_COUNT) { _EL_     if (timerStart == 0) { _EL_       timerStart=System.currentTimeMillis(); _EL_     } _EL_  else { _EL_       if (System.currentTimeMillis() - timerStart >= maxTimeout) { _EL_         mem.putByteVolatile(limit + Length.Commit,Rollback.Set); _EL_         limit+=Length.RecordHeader + recordSize; _EL_         timeoutCounter=0; _EL_         timerStart=0; _EL_         return false; _EL_       } _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static void keytool(String cmd){ _EL_   log.info("keytool " + cmd); _EL_   ArrayList<String> list=new ArrayList<String>(); _EL_   StringTokenizer st=new StringTokenizer(cmd," "); _EL_   String quoteBuffer=null; _EL_   while (st.hasMoreTokens()) { _EL_     String token=st.nextToken(); _EL_     if (quoteBuffer == null) { _EL_       if (token.startsWith("\\""))       quoteBuffer=token.substring(1); _EL_  else       list.add(token); _EL_     } _EL_  else     quoteBuffer+=" " + token; _EL_     if (token.endsWith("\\"")) { _EL_       String str=quoteBuffer.substring(0,quoteBuffer.length() - 1); _EL_       list.add(str); _EL_       quoteBuffer=null; _EL_     } _EL_   } _EL_   String[] args=new String[list.size()]; _EL_   list.toArray(args); _EL_   try { _EL_     KeyTool.main(args); _EL_   } _EL_  catch (  Exception e) { _EL_   } _EL_ } _EL_ ', 'private void parseStartTag(boolean xmldecl,boolean throwOnResolveFailure) throws IOException, XmlPullParserException { _EL_   if (!xmldecl) { _EL_     read(\'<\'); _EL_   } _EL_   name=readName(); _EL_   attributeCount=0; _EL_   while (true) { _EL_     skip(); _EL_     if (position >= limit && !fillBuffer(1)) { _EL_       checkRelaxed(UNEXPECTED_EOF); _EL_       return; _EL_     } _EL_     int c=buffer[position]; _EL_     if (xmldecl) { _EL_       if (c == \'?\') { _EL_         position++; _EL_         read(\'>\'); _EL_         return; _EL_       } _EL_     } _EL_  else { _EL_       if (c == \'/\') { _EL_         degenerated=true; _EL_         position++; _EL_         skip(); _EL_         read(\'>\'); _EL_         break; _EL_       } _EL_  else       if (c == \'>\') { _EL_         position++; _EL_         break; _EL_       } _EL_     } _EL_     String attrName=readName(); _EL_     int i=(attributeCount++) * 4; _EL_     attributes=ensureCapacity(attributes,i + 4); _EL_     attributes[i]=""; _EL_     attributes[i + 1]=null; _EL_     attributes[i + 2]=attrName; _EL_     skip(); _EL_     if (position >= limit && !fillBuffer(1)) { _EL_       checkRelaxed(UNEXPECTED_EOF); _EL_       return; _EL_     } _EL_     if (buffer[position] == \'=\') { _EL_       position++; _EL_       skip(); _EL_       if (position >= limit && !fillBuffer(1)) { _EL_         checkRelaxed(UNEXPECTED_EOF); _EL_         return; _EL_       } _EL_       char delimiter=buffer[position]; _EL_       if (delimiter == \'\\\'\' || delimiter == \'"\') { _EL_         position++; _EL_       } _EL_  else       if (relaxed) { _EL_         delimiter=\' \'; _EL_       } _EL_  else { _EL_         throw new XmlPullParserException("attr value delimiter missing!",this,null); _EL_       } _EL_       attributes[i + 3]=readValue(delimiter,true,throwOnResolveFailure,ValueContext.ATTRIBUTE); _EL_       if (delimiter != \' \' && peekCharacter() == delimiter) { _EL_         position++; _EL_       } _EL_     } _EL_  else     if (relaxed) { _EL_       attributes[i + 3]=attrName; _EL_     } _EL_  else { _EL_       checkRelaxed("Attr.value missing f. " + attrName); _EL_       attributes[i + 3]=attrName; _EL_     } _EL_   } _EL_   int sp=depth++ * 4; _EL_   elementStack=ensureCapacity(elementStack,sp + 4); _EL_   elementStack[sp + 3]=name; _EL_   if (depth >= nspCounts.length) { _EL_     int[] bigger=new int[depth + 4]; _EL_     System.arraycopy(nspCounts,0,bigger,0,nspCounts.length); _EL_     nspCounts=bigger; _EL_   } _EL_   nspCounts[depth]=nspCounts[depth - 1]; _EL_   if (processNsp) { _EL_     adjustNsp(); _EL_   } _EL_  else { _EL_     namespace=""; _EL_   } _EL_   if (defaultAttributes != null) { _EL_     Map<String,String> elementDefaultAttributes=defaultAttributes.get(name); _EL_     if (elementDefaultAttributes != null) { _EL_       for (      Map.Entry<String,String> entry : elementDefaultAttributes.entrySet()) { _EL_         if (getAttributeValue(null,entry.getKey()) != null) { _EL_           continue; _EL_         } _EL_         int i=(attributeCount++) * 4; _EL_         attributes=ensureCapacity(attributes,i + 4); _EL_         attributes[i]=""; _EL_         attributes[i + 1]=null; _EL_         attributes[i + 2]=entry.getKey(); _EL_         attributes[i + 3]=entry.getValue(); _EL_       } _EL_     } _EL_   } _EL_   elementStack[sp]=namespace; _EL_   elementStack[sp + 1]=prefix; _EL_   elementStack[sp + 2]=name; _EL_ } _EL_ ', 'public LibVLC(ArrayList<String> options){ _EL_   boolean setAout=true, setChroma=true; _EL_   if (options != null) { _EL_     for (    String option : options) { _EL_       if (option.startsWith("--aout="))       setAout=false; _EL_       if (option.startsWith("--androidwindow-chroma"))       setChroma=false; _EL_       if (!setAout && !setChroma)       break; _EL_     } _EL_   } _EL_   if (setAout || setChroma) { _EL_     if (options == null)     options=new ArrayList<String>(); _EL_     if (setAout) { _EL_       final HWDecoderUtil.AudioOutput hwAout=HWDecoderUtil.getAudioOutputFromDevice(); _EL_       if (hwAout == HWDecoderUtil.AudioOutput.OPENSLES)       options.add("--aout=opensles"); _EL_  else       options.add("--aout=android_audiotrack"); _EL_     } _EL_     if (setChroma) { _EL_       options.add("--androidwindow-chroma"); _EL_       options.add("RV32"); _EL_     } _EL_   } _EL_   nativeNew(options.toArray(new String[options.size()])); _EL_ } _EL_ ', 'private void loadProfile(String userId,String name){ _EL_   final Intent userProfileIntent=new Intent(getActivity(),UserProfileActivity.class); _EL_   userProfileIntent.putExtra(AppConstants.Keys.USER_ID,userId); _EL_   userProfileIntent.putExtra(AppConstants.Keys.USER_NAME,name); _EL_   userProfileIntent.putExtra(AppConstants.Keys.SERVICE_SCREEN_TYPE,AppConstants.ServiceScreenType.PROFILE); _EL_   startActivity(userProfileIntent); _EL_ } _EL_ ', 'public static String decodeCharset(String s,String charset){ _EL_   if (s == null) { _EL_     return null; _EL_   } _EL_   try { _EL_     byte buf[]=s.getBytes(ASCII_CHARSET); _EL_     return (new String(buf,0,buf.length,charset)); _EL_   } _EL_  catch (  UnsupportedEncodingException uee) { _EL_     return s; _EL_   } _EL_ } _EL_ ', 'private <T>UnaryOperator<T> compose(UnaryOperator<T> before,UnaryOperator<T> after){ _EL_   return null; _EL_ } _EL_ ', '@Override public void addRelations(Task task,Iterable<ObjectId> projectIds,String fieldName){ _EL_   List<Project> newProjectList=new LinkedList<>(); _EL_   Iterable<Project> projectsToAdd=projectRepository.findAll(projectIds,null); _EL_   for (  Project project : projectsToAdd) { _EL_     newProjectList.add(project); _EL_   } _EL_   try { _EL_     if (PropertyUtils.getProperty(task,fieldName) != null) { _EL_       Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(task,fieldName); _EL_       for (      Project project : projects) { _EL_         newProjectList.add(project); _EL_       } _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_   try { _EL_     PropertyUtils.setProperty(task,fieldName,newProjectList); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_   taskRepository.save(task); _EL_ } _EL_ ', 'protected void performDefaults(){ _EL_   super.performDefaults(); _EL_   initializeValues(); _EL_   verifyValidation(); _EL_ } _EL_ ', 'public Hashtable<IPoint,List<ILineSegment>> intersections(Iterator<ILineSegment> it){ _EL_   Collection<ILineSegment> c=new ArrayList<ILineSegment>(); _EL_   while (it.hasNext()) { _EL_     c.add(it.next()); _EL_   } _EL_   return intersections(c.toArray(new ILineSegment[]{})); _EL_ } _EL_ ', 'protected void findCandidateCrossings(S2Point a,S2Point b,List<Integer> candidateCrossings){ _EL_   Preconditions.checkState(indexComputed); _EL_   ArrayList<S2CellId> cover=Lists.newArrayList(); _EL_   getCovering(a,b,false,cover); _EL_   Set<Integer> uniqueSet=new HashSet<Integer>(); _EL_   getEdgesInParentCells(cover,uniqueSet); _EL_   getEdgesInChildrenCells(a,b,cover,uniqueSet); _EL_   candidateCrossings.clear(); _EL_   candidateCrossings.addAll(uniqueSet); _EL_ } _EL_ ', 'public final void log(String filename,int lineNumber,String method,String tag,int level,String message){ _EL_   final LogMessage lm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement()); _EL_   lm.addInt16(level,LogMessage.PART_KEY_LEVEL); _EL_   if (filename != null) { _EL_     lm.addString(filename,LogMessage.PART_KEY_FILENAME); _EL_     if (lineNumber != 0)     lm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER); _EL_   } _EL_   if (method != null)   lm.addString(method,LogMessage.PART_KEY_FUNCTIONNAME); _EL_   if (tag != null && !tag.isEmpty())   lm.addString(tag,LogMessage.PART_KEY_TAG); _EL_   lm.addString(message,LogMessage.PART_KEY_MESSAGE); _EL_   log(lm); _EL_ } _EL_ ', 'private static void lookForChanges(DataObject left,DataObject right,HashMap<String,Change> changes,Set<String> included,Set<String> excluded,Set<String> contained){ _EL_   Class refClass=left.getClass(); _EL_   Method[] methods=refClass.getMethods(); _EL_   for (  Method method : methods) { _EL_     boolean contain=false; _EL_     Name nameAnn=method.getAnnotation(Name.class); _EL_     if (nameAnn == null) { _EL_       continue; _EL_     } _EL_     String key=nameAnn.value(); _EL_     if (contained != null && contained.contains(key)) { _EL_       contain=true; _EL_     } _EL_  else     if (included != null && !included.contains(key)) { _EL_       continue; _EL_     } _EL_     if (excluded.contains(key)) { _EL_       continue; _EL_     } _EL_     Class type=method.getReturnType(); _EL_     try { _EL_       Object obja=method.invoke(left); _EL_       Object objb=method.invoke(right); _EL_       if (type == StringSet.class) { _EL_         if (contain) { _EL_           analyzeNewStringSetContainsOldStringSetValues((StringSet)obja,(StringSet)objb,key,changes); _EL_         } _EL_  else { _EL_           analyzeStringSets((StringSet)obja,(StringSet)objb,key,changes); _EL_         } _EL_       } _EL_  else       if (type == StringMap.class) { _EL_         analyzeStringMaps((StringMap)obja,(StringMap)objb,key,changes); _EL_       } _EL_  else       if (type == StringSetMap.class) { _EL_         analyzeStringSetMaps((StringSetMap)obja,(StringSetMap)objb,key,changes); _EL_       } _EL_  else { _EL_         if (!isEqual(obja,objb)) { _EL_           Change change=new Change(key,obja,objb,nameAnn.value()); _EL_           changes.put(key,change); _EL_         } _EL_       } _EL_     } _EL_  catch (    IllegalAccessException ex) { _EL_       throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{}); _EL_     } _EL_ catch (    InvocationTargetException ex) { _EL_       throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{}); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static String replace(String str,char oldChar,String newStr){ _EL_   StringBuffer buf=new StringBuffer(); _EL_   for (int i=0; i < str.length(); i++) { _EL_     char ch=str.charAt(i); _EL_     if (ch == oldChar) { _EL_       buf.append(newStr); _EL_     } _EL_  else { _EL_       buf.append(ch); _EL_     } _EL_   } _EL_   return buf.toString(); _EL_ } _EL_ ', 'public String parseFile(File file){ _EL_   log.config(file.getAbsolutePath()); _EL_   String line=null; _EL_   try { _EL_     BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(file),Ini.getCharset()),10240); _EL_     String errMsg=""; _EL_     int lineNo=1; _EL_     while ((line=in.readLine()) != null && errMsg.length() == 0) { _EL_       errMsg=parseLine(line,lineNo); _EL_       lineNo++; _EL_     } _EL_     line=null; _EL_     in.close(); _EL_     if (errMsg.length() != 0)     return errMsg; _EL_   } _EL_  catch (  Exception ioe) { _EL_     String s=ioe.getLocalizedMessage(); _EL_     if (s == null || s.length() == 0)     s=ioe.toString(); _EL_     return "Parse Error: Line=" + line + " - "+ s; _EL_   } _EL_   return ""; _EL_ } _EL_ ', 'public static String decode(String encoded,AMEncryption encr){ _EL_   if (checkCaller()) { _EL_     try { _EL_       ISSecurityPermission isp=new ISSecurityPermission("access","adminpassword"); _EL_       if (securityManager != null) { _EL_         securityManager.checkPermission(isp); _EL_       } _EL_     } _EL_  catch (    SecurityException e) { _EL_       Debug debug=Debug.getInstance("amSDK"); _EL_       debug.error("Security Alert: Unauthorized access to " + "Encoding/Decoding password utility: Returning NULL",e); _EL_       return null; _EL_     } _EL_   } _EL_   if (encoded == null || encoded.length() == 0) { _EL_     return (null); _EL_   } _EL_   byte[] encData=null; _EL_   encData=Base64.decode(encoded.trim()); _EL_   if (encData == null) { _EL_     return null; _EL_   } _EL_   byte[] rawData=encr.decrypt(encData); _EL_   if (rawData == null) { _EL_     return (null); _EL_   } _EL_   String answer=null; _EL_   try { _EL_     answer=new String(rawData,"utf-8"); _EL_   } _EL_  catch (  UnsupportedEncodingException uue) { _EL_     Debug debug=Debug.getInstance("amSDK"); _EL_     debug.error("Crypt:: Unsupported encoding UTF-8",uue); _EL_     answer=new String(rawData); _EL_   } _EL_   return (answer); _EL_ } _EL_ ', 'public void closeFile(){ _EL_   closeFile(true); _EL_ } _EL_ ', 'public void waitForOperations(){ _EL_   operator.waitForOperations(); _EL_ } _EL_ ', 'private void unifyUsernameByName(Map<String,List<LogCommitInfo>> devNameMap){ _EL_   for (  Entry<String,List<LogCommitInfo>> entry : devNameMap.entrySet()) { _EL_     List<String> userNames=getUserNamesList(entry.getValue()); _EL_     if (userNames.size() > 1) { _EL_       String newUserName=getNewUserName(userNames); _EL_       for (      LogCommitInfo commit : entry.getValue()) { _EL_         commit.setUserName(newUserName); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public static Table createPartitionedTable(Configuration conf,HiveMetastoreClient ms,HiveObjectSpec tableSpec,TableType tableType,Path warehouseRoot) throws IOException, HiveMetastoreException { _EL_   Path tableLocation=getPathForHiveObject(warehouseRoot,tableSpec); _EL_   Table table=new Table(); _EL_   table.setDbName(tableSpec.getDbName()); _EL_   table.setTableName(tableSpec.getTableName()); _EL_   Map<String,String> parameters=new HashMap<>(); _EL_   parameters.put(HiveParameterKeys.TLDT,Long.toString(System.currentTimeMillis())); _EL_   table.setParameters(parameters); _EL_   table.setTableType(tableType.toString()); _EL_   List<FieldSchema> partitionCols=new ArrayList<>(); _EL_   partitionCols.add(new FieldSchema("ds","string","my ds comment")); _EL_   partitionCols.add(new FieldSchema("hr","string","my hr comment")); _EL_   table.setPartitionKeys(partitionCols); _EL_   StorageDescriptor sd=new StorageDescriptor(); _EL_   List<FieldSchema> columns=new ArrayList<>(); _EL_   columns.add(new FieldSchema("key","string","my comment")); _EL_   sd.setCols(columns); _EL_   if (tableType == TableType.MANAGED_TABLE || tableType == TableType.EXTERNAL_TABLE) { _EL_     sd.setLocation(tableLocation.toString()); _EL_   } _EL_   sd.setSerdeInfo(new SerDeInfo("LazySimpleSerde","org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",new HashMap<>())); _EL_   table.setSd(sd); _EL_   if (!ms.existsDb(table.getDbName())) { _EL_     ms.createDatabase(new Database(table.getDbName(),null,null,null)); _EL_   } _EL_   ms.createTable(table); _EL_   return table; _EL_ } _EL_ ', 'private void tabCreatedInForeground(int id,int sourceId,boolean newIsIncognito,float originX,float originY){ _EL_   LayoutTab newLayoutTab=createLayoutTab(id,newIsIncognito,NO_CLOSE_BUTTON,NO_TITLE); _EL_   if (mLayoutTabs == null || mLayoutTabs.length == 0) { _EL_     mLayoutTabs=new LayoutTab[]{newLayoutTab}; _EL_   } _EL_  else { _EL_     mLayoutTabs=new LayoutTab[]{mLayoutTabs[0],newLayoutTab}; _EL_   } _EL_   updateCacheVisibleIds(new LinkedList<Integer>(Arrays.asList(id,sourceId))); _EL_   newLayoutTab.setBorderAlpha(0.0f); _EL_   newLayoutTab.setStaticToViewBlend(1.f); _EL_   forceAnimationToFinish(); _EL_   Interpolator interpolator=BakedBezierInterpolator.TRANSFORM_CURVE; _EL_   addToAnimation(newLayoutTab,LayoutTab.Property.SCALE,0.f,1.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator); _EL_   addToAnimation(newLayoutTab,LayoutTab.Property.ALPHA,0.f,1.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator); _EL_   addToAnimation(newLayoutTab,LayoutTab.Property.X,originX,0.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator); _EL_   addToAnimation(newLayoutTab,LayoutTab.Property.Y,originY,0.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator); _EL_   mTabModelSelector.selectModel(newIsIncognito); _EL_   startHiding(id,false); _EL_ } _EL_ ', 'protected Map<TargetClass,List<Attribute.TypeCompound>> sift(final Iterable<Attribute.TypeCompound> typeCompounds){ _EL_   final Map<TargetClass,List<Attribute.TypeCompound>> targetClassToCompound=new EnumMap<>(TargetClass.class); _EL_   for (  TargetClass targetClass : TargetClass.values()) { _EL_     targetClassToCompound.put(targetClass,new ArrayList<TypeCompound>()); _EL_   } _EL_   for (  final Attribute.TypeCompound typeCompound : typeCompounds) { _EL_     final TargetType typeCompoundTarget=typeCompound.position.type; _EL_     final List<Attribute.TypeCompound> destList; _EL_     if (ElementAnnotationUtil.contains(typeCompoundTarget,annotatedTargets())) { _EL_       destList=targetClassToCompound.get(TargetClass.TARGETED); _EL_     } _EL_  else     if (ElementAnnotationUtil.contains(typeCompoundTarget,validTargets())) { _EL_       destList=targetClassToCompound.get(TargetClass.VALID); _EL_     } _EL_  else { _EL_       destList=targetClassToCompound.get(TargetClass.INVALID); _EL_     } _EL_     destList.add(typeCompound); _EL_   } _EL_   return targetClassToCompound; _EL_ } _EL_ ', 'public static boolean isNormal(GeoTimeSerie gts,int buckets,double pcterror,boolean bessel){ _EL_   if (0 == gts.values) { _EL_     return true; _EL_   } _EL_   if (TYPE.DOUBLE != gts.type && TYPE.LONG != gts.type) { _EL_     return false; _EL_   } _EL_   double[] musigma=musigma(gts,bessel); _EL_   double mu=musigma[0]; _EL_   double sigma=musigma[1]; _EL_   if (0.0D == sigma) { _EL_     return false; _EL_   } _EL_   double[] bounds=SAXUtils.getBounds(buckets); _EL_   int[] counts=new int[bounds.length + 1]; _EL_   for (int i=0; i < gts.values; i++) { _EL_     double v=((double)GTSHelper.valueAtIndex(gts,i) - mu) / sigma; _EL_     int insertion=Arrays.binarySearch(bounds,v); _EL_     if (insertion >= 0) { _EL_       counts[insertion]++; _EL_     } _EL_  else { _EL_       counts[-(1 + insertion)]++; _EL_     } _EL_   } _EL_   double mean=gts.values / counts.length; _EL_   for (int i=0; i < counts.length; i++) { _EL_     if (Math.abs(1.0D - (counts[i] / mean)) > pcterror) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public <T extends DataObject>void insertInBatches(List<T> records,int partitionSize,DbClient dbClient,String type){ _EL_   List<List<T>> volume_partitions=Lists.partition(records,partitionSize); _EL_   for (  List<T> partition : volume_partitions) { _EL_     try { _EL_       dbClient.createObject(partition); _EL_       _log.info("{} {} Records inserted to DB",partition.size(),type); _EL_     } _EL_  catch (    DatabaseException e) { _EL_       _log.error("Error inserting {} records into the database:",type,e); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static String[] parseDelimitedList(String list,char delimiter){ _EL_   String delim="" + delimiter; _EL_   StringTokenizer st=new StringTokenizer(list + delim + " ",delim,true); _EL_   ArrayList<String> v=new ArrayList<String>(); _EL_   String lastToken=""; _EL_   String word=""; _EL_   while (st.hasMoreTokens()) { _EL_     String tok=st.nextToken(); _EL_     if (lastToken != null) { _EL_       if (tok.equals(delim)) { _EL_         word=word + lastToken; _EL_         if (lastToken.equals(delim))         tok=null; _EL_       } _EL_  else { _EL_         if (!word.equals(""))         v.add(word); _EL_         word=""; _EL_       } _EL_     } _EL_     lastToken=tok; _EL_   } _EL_   return v.toArray(new String[0]); _EL_ } _EL_ ', 'private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException { _EL_   if (namespace.equals("")) { _EL_     xmlWriter.writeAttribute(attName,attValue); _EL_   } _EL_  else { _EL_     registerPrefix(xmlWriter,namespace); _EL_     xmlWriter.writeAttribute(namespace,attName,attValue); _EL_   } _EL_ } _EL_ ', 'private void updateUiFromCommand(Command command){ _EL_   if (command == null) { _EL_     return; _EL_   } _EL_   actionsComboBox.setText(command.getAction()); _EL_   dataTextField.setText(command.getData()); _EL_   categoryTextField.setText(command.getCategory()); _EL_   mimeTextField.setText(command.getMimeType()); _EL_   componentTextField.setText(command.getComponent()); _EL_   userTextField.setText(command.getUser()); _EL_   flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount()); _EL_   List<IntentFlags> flags=command.getFlags(); _EL_   if (flags != null && flags.size() > 0) { _EL_     for (    IntentFlags flag : command.getFlags()) { _EL_       flagsList_.setSelectedValue(flag,false); _EL_     } _EL_   } _EL_  else { _EL_     flagsList_.setSelectedIndex(0); _EL_   } _EL_   updateFlagsTextField(); _EL_   tableModel_.removeAllRows(); _EL_   List<ExtraField> extras=command.getExtras(); _EL_   if (extras != null && extras.size() > 0) { _EL_     for (    ExtraField extra : extras) { _EL_       tableModel_.addRow(extra); _EL_     } _EL_   } _EL_   updateTableVisibility(); _EL_ } _EL_ ', 'public Enumeration<String> enumerateMeasures(){ _EL_   Vector<String> newVector=new Vector<String>(1); _EL_   newVector.addElement("measureNumIterations"); _EL_   return newVector.elements(); _EL_ } _EL_ ', 'private char readEscapeCharacter() throws IOException { _EL_   if (pos == limit && !fillBuffer(1)) { _EL_     throw syntaxError("Unterminated escape sequence"); _EL_   } _EL_   char escaped=buffer[pos++]; _EL_ switch (escaped) { _EL_ case \'u\': _EL_     if (pos + 4 > limit && !fillBuffer(4)) { _EL_       throw syntaxError("Unterminated escape sequence"); _EL_     } _EL_   char result=0; _EL_ for (int i=pos, end=i + 4; i < end; i++) { _EL_   char c=buffer[i]; _EL_   result<<=4; _EL_   if (c >= \'0\' && c <= \'9\') { _EL_     result+=(c - \'0\'); _EL_   } _EL_  else   if (c >= \'a\' && c <= \'f\') { _EL_     result+=(c - \'a\' + 10); _EL_   } _EL_  else   if (c >= \'A\' && c <= \'F\') { _EL_     result+=(c - \'A\' + 10); _EL_   } _EL_  else { _EL_     throw new NumberFormatException("\\\\u" + new String(buffer,pos,4)); _EL_   } _EL_ } _EL_ pos+=4; _EL_ return result; _EL_ case \'t\': _EL_ return \'\\t\'; _EL_ case \'b\': _EL_ return \'\\b\'; _EL_ case \'n\': _EL_ return \'\\n\'; _EL_ case \'r\': _EL_ return \'\\r\'; _EL_ case \'f\': _EL_ return \'\\f\'; _EL_ case \'\\n\': _EL_ lineNumber++; _EL_ lineStart=pos; _EL_ case \'\\\'\': _EL_ case \'"\': _EL_ case \'\\\\\': _EL_ case \'/\': _EL_ return escaped; _EL_ default : _EL_ throw syntaxError("Invalid escape sequence"); _EL_ } _EL_ } _EL_ ', 'private static Platform findPlatform(){ _EL_   try { _EL_     try { _EL_       Class.forName("com.android.org.conscrypt.OpenSSLSocketImpl"); _EL_     } _EL_  catch (    ClassNotFoundException e) { _EL_       Class.forName("org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl"); _EL_     } _EL_     OptionalMethod<Socket> setUseSessionTickets=new OptionalMethod<>(null,"setUseSessionTickets",boolean.class); _EL_     OptionalMethod<Socket> setHostname=new OptionalMethod<>(null,"setHostname",String.class); _EL_     Method trafficStatsTagSocket=null; _EL_     Method trafficStatsUntagSocket=null; _EL_     OptionalMethod<Socket> getAlpnSelectedProtocol=null; _EL_     OptionalMethod<Socket> setAlpnProtocols=null; _EL_     try { _EL_       Class<?> trafficStats=Class.forName("android.net.TrafficStats"); _EL_       trafficStatsTagSocket=trafficStats.getMethod("tagSocket",Socket.class); _EL_       trafficStatsUntagSocket=trafficStats.getMethod("untagSocket",Socket.class); _EL_       try { _EL_         Class.forName("android.net.Network"); _EL_         getAlpnSelectedProtocol=new OptionalMethod<>(byte[].class,"getAlpnSelectedProtocol"); _EL_         setAlpnProtocols=new OptionalMethod<>(null,"setAlpnProtocols",byte[].class); _EL_       } _EL_  catch (      ClassNotFoundException ignored) { _EL_       } _EL_     } _EL_  catch (    ClassNotFoundException|NoSuchMethodException ignored) { _EL_     } _EL_     return new Android(setUseSessionTickets,setHostname,trafficStatsTagSocket,trafficStatsUntagSocket,getAlpnSelectedProtocol,setAlpnProtocols); _EL_   } _EL_  catch (  ClassNotFoundException ignored) { _EL_   } _EL_   try { _EL_     String negoClassName="org.eclipse.jetty.alpn.ALPN"; _EL_     Class<?> negoClass=Class.forName(negoClassName); _EL_     Class<?> providerClass=Class.forName(negoClassName + "$Provider"); _EL_     Class<?> clientProviderClass=Class.forName(negoClassName + "$ClientProvider"); _EL_     Class<?> serverProviderClass=Class.forName(negoClassName + "$ServerProvider"); _EL_     Method putMethod=negoClass.getMethod("put",SSLSocket.class,providerClass); _EL_     Method getMethod=negoClass.getMethod("get",SSLSocket.class); _EL_     Method removeMethod=negoClass.getMethod("remove",SSLSocket.class); _EL_     return new JdkWithJettyBootPlatform(putMethod,getMethod,removeMethod,clientProviderClass,serverProviderClass); _EL_   } _EL_  catch (  ClassNotFoundException|NoSuchMethodException ignored) { _EL_   } _EL_   return new Platform(); _EL_ } _EL_ ', 'private void initializeLocalAndTargetInfo() throws Exception { _EL_   targetSiteInfo=coordinator.getTargetInfo(SiteInfo.class); _EL_   if (targetSiteInfo == null) { _EL_     targetSiteInfo=new SiteInfo(); _EL_     try { _EL_       coordinator.setTargetInfo(targetSiteInfo,false); _EL_       log.info("Step1b: Target site info set to: {}",targetSiteInfo); _EL_     } _EL_  catch (    CoordinatorClientException e) { _EL_       log.info("Step1b: Wait another control node to set target"); _EL_       retrySleep(); _EL_       throw e; _EL_     } _EL_   } _EL_   localVdcPropInfo=localRepository.getVdcPropertyInfo(); _EL_   String localConfigVersion=localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION); _EL_   coordinator.setNodeSessionScopeInfo(new VdcConfigVersion(localConfigVersion)); _EL_   targetVdcPropInfo=loadVdcConfig(); _EL_   if (isGeoUpgradeFromPreYoda()) { _EL_     log.info("Detect vdc properties from preyoda. Keep local vdc config properties unchanged until all vdc configs are migrated to zk"); _EL_     localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion())); _EL_     localRepository.setVdcPropertyInfo(localVdcPropInfo); _EL_   } _EL_  else { _EL_     if (localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION) == null) { _EL_       localVdcPropInfo=new PropertyInfoExt(targetVdcPropInfo.getAllProperties()); _EL_       localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion())); _EL_       localRepository.setVdcPropertyInfo(localVdcPropInfo); _EL_       String vdc_ids=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS); _EL_       String[] vdcIds=vdc_ids.split(","); _EL_       if (vdcIds.length > 1) { _EL_         log.info("More than one Vdc, rebooting"); _EL_         reboot(); _EL_       } _EL_     } _EL_   } _EL_   targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class); _EL_   if (targetPowerOffState == null) { _EL_     try { _EL_       coordinator.setTargetInfo(new PowerOffState(PowerOffState.State.NONE)); _EL_       targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class); _EL_       log.info("Step1b: Target poweroff state set to: {}",PowerOffState.State.NONE); _EL_     } _EL_  catch (    CoordinatorClientException e) { _EL_       log.info("Step1b: Wait another control node to set target"); _EL_       retrySleep(); _EL_       throw e; _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public Enumeration<Option> listOptions(){ _EL_   Vector<Option> newVector=new Vector<Option>(4); _EL_   newVector.addElement(new Option("\\tTabu list length","L",1,"-L <integer>")); _EL_   newVector.addElement(new Option("\\tNumber of runs","U",1,"-U <integer>")); _EL_   newVector.addElement(new Option("\\tMaximum number of parents","P",1,"-P <nr of parents>")); _EL_   newVector.addElement(new Option("\\tUse arc reversal operation.\\n\\t(default false)","R",0,"-R")); _EL_   newVector.addAll(Collections.list(super.listOptions())); _EL_   return newVector.elements(); _EL_ } _EL_ ', 'private Map<UUID,int[]> reducers(Collection<ClusterNode> top,Map<UUID,Collection<HadoopInputSplit>> mappers,int reducerCnt){ _EL_   int totalWeight=0; _EL_   List<WeightedNode> nodes=new ArrayList<>(top.size()); _EL_   for (  ClusterNode node : top) { _EL_     Collection<HadoopInputSplit> split=mappers.get(node.id()); _EL_     int weight=reducerNodeWeight(node,split != null ? split.size() : 0); _EL_     nodes.add(new WeightedNode(node.id(),weight,weight)); _EL_     totalWeight+=weight; _EL_   } _EL_   int totalAdjustedWeight=0; _EL_   for (  WeightedNode node : nodes) { _EL_     node.floatWeight=((float)node.weight * reducerCnt) / totalWeight; _EL_     node.weight=Math.round(node.floatWeight); _EL_     totalAdjustedWeight+=node.weight; _EL_   } _EL_   Collections.sort(nodes); _EL_   if (totalAdjustedWeight > reducerCnt) { _EL_     ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1); _EL_     while (totalAdjustedWeight != reducerCnt) { _EL_       if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1); _EL_       WeightedNode node=iter.previous(); _EL_       if (node.weight > 0) { _EL_         node.weight-=1; _EL_         totalAdjustedWeight--; _EL_       } _EL_     } _EL_   } _EL_  else   if (totalAdjustedWeight < reducerCnt) { _EL_     ListIterator<WeightedNode> iter=nodes.listIterator(0); _EL_     while (totalAdjustedWeight != reducerCnt) { _EL_       if (!iter.hasNext())       iter=nodes.listIterator(0); _EL_       WeightedNode node=iter.next(); _EL_       if (node.floatWeight > 0.0f) { _EL_         node.weight+=1; _EL_         totalAdjustedWeight++; _EL_       } _EL_     } _EL_   } _EL_   int idx=0; _EL_   Map<UUID,int[]> reducers=new HashMap<>(nodes.size(),1.0f); _EL_   for (  WeightedNode node : nodes) { _EL_     if (node.weight > 0) { _EL_       int[] arr=new int[node.weight]; _EL_       for (int i=0; i < arr.length; i++)       arr[i]=idx++; _EL_       reducers.put(node.nodeId,arr); _EL_     } _EL_   } _EL_   return reducers; _EL_ } _EL_ ', 'public Collection<Node> matchingScenariosAndExamples(final Feature feature){ _EL_   final List<ScenarioDefinition> allScenarios=feature.getScenarioDefinitions(); _EL_   final List<Node> matchingScenariosAndExamples=new LinkedList<Node>(); _EL_   for (  final ScenarioDefinition scenario : allScenarios) { _EL_     final Set<Tag> allTagsForScenario=new HashSet<Tag>(scenario.getTags()); _EL_     allTagsForScenario.addAll(feature.getTags()); _EL_     if (scenario instanceof ScenarioOutline) { _EL_       matchingScenariosAndExamples.addAll(matchingExamples((ScenarioOutline)scenario,allTagsForScenario)); _EL_     } _EL_  else { _EL_       if (matches(allTagsForScenario)) { _EL_         matchingScenariosAndExamples.add(scenario); _EL_       } _EL_     } _EL_   } _EL_   return matchingScenariosAndExamples; _EL_ } _EL_ ', 'public static String runCmd(File directory,List<String> cmd,String errorMessage) throws Exception { _EL_   ProcessBuilder pb=new ProcessBuilder(cmd); _EL_   pb.directory(directory); _EL_   pb.redirectErrorStream(true); _EL_   Process p=pb.start(); _EL_   String s; _EL_   StringBuilder sb=new StringBuilder(); _EL_   BufferedReader stdout=new BufferedReader(new InputStreamReader(p.getInputStream())); _EL_   while ((s=stdout.readLine()) != null) { _EL_     logger.info(s); _EL_     sb.append(s); _EL_     sb.append(\'\\n\'); _EL_   } _EL_   String sbs=sb.toString(); _EL_   int exitValue=p.waitFor(); _EL_   if (exitValue != 0)   throw new Exception(errorMessage + " exit value " + exitValue+ "  "+ sbs); _EL_   return sbs; _EL_ } _EL_ ', 'public T findByCommitCounter(final long commitCounter){ _EL_   if (commitCounter < 0L)   throw new IllegalArgumentException(); _EL_   final Lock lock=readLock(); _EL_   lock.lock(); _EL_   try { _EL_     @SuppressWarnings("unchecked") final ITupleIterator<T> itr=rangeIterator(null,null,0,IRangeQuery.DEFAULT | IRangeQuery.REVERSE,null); _EL_     while (itr.hasNext()) { _EL_       final ITuple<T> t=itr.next(); _EL_       final T r=t.getObject(); _EL_       final IRootBlockView rb=r.getRootBlock(); _EL_       if (rb.getCommitCounter() <= commitCounter) { _EL_         return r; _EL_       } _EL_     } _EL_     return null; _EL_   } _EL_   finally { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', 'public boolean similarTo(Object o){ _EL_   if (o == null) { _EL_     return false; _EL_   } _EL_   if (!(o instanceof SemanticConcept)) { _EL_     return false; _EL_   } _EL_   SemanticConcept otherConcept=(SemanticConcept)o; _EL_   HashSet<Integer> synset_intersection=new HashSet<Integer>(this.synsets); _EL_   synset_intersection.retainAll(otherConcept.synsets); _EL_   if (!synset_intersection.isEmpty()) { _EL_     return true; _EL_   } _EL_   HashSet<String> concept_intersection=new HashSet<String>(this.concepts); _EL_   concept_intersection.retainAll(otherConcept.concepts); _EL_   return !concept_intersection.isEmpty(); _EL_ } _EL_ ', '@Override public Enumeration<Option> listOptions(){ _EL_   Vector<Option> newVector=new Vector<Option>(3); _EL_   newVector.addElement(new Option("\\tSize of each bag, as a percentage of the\\n" + "\\ttraining set size. (default 100)","P",1,"-P")); _EL_   newVector.addElement(new Option("\\tCalculate the out of bag error.","O",0,"-O")); _EL_   newVector.addElement(new Option("\\tRepresent copies of instances using weights rather than explicitly.","-represent-copies-using-weights",0,"-represent-copies-using-weights")); _EL_   newVector.addAll(Collections.list(super.listOptions())); _EL_   return newVector.elements(); _EL_ } _EL_ ', 'public void treeExpanded(TreeExpansionEvent event){ _EL_   inspectorWindow.updateView(Director.ALL); _EL_ } _EL_ ', 'public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){ _EL_   ContentValues values=new ContentValues(7); _EL_   values.put(Sms.ADDRESS,address); _EL_   if (date != null) { _EL_     values.put(Sms.DATE,date); _EL_   } _EL_   values.put(Sms.READ,read ? Integer.valueOf(1) : Integer.valueOf(0)); _EL_   values.put(Sms.SUBJECT,subject); _EL_   values.put(Sms.BODY,body); _EL_   if (deliveryReport) { _EL_     values.put(Sms.STATUS,Sms.STATUS_PENDING); _EL_   } _EL_   if (threadId != -1L) { _EL_     values.put(Sms.THREAD_ID,threadId); _EL_   } _EL_   return resolver.insert(uri,values); _EL_ } _EL_ ', 'public void addLifecycleListener(LifecycleListener lifecycleListener){ _EL_   if (!lifecycleListeners.contains(lifecycleListener)) { _EL_     lifecycleListeners.add(lifecycleListener); _EL_   } _EL_ } _EL_ ', 'public void waitForDecodingToFinish(){ _EL_   while (isDecoding) { _EL_     try { _EL_       Thread.sleep(100); _EL_     } _EL_  catch (    final InterruptedException e) { _EL_       LogWriter.writeLog("Exception: " + e.getMessage()); _EL_       isDecoding=false; _EL_     } _EL_   } _EL_ } _EL_ ', '@RequestMapping(value="/container/{containerId}/application/{applicationName}",method=RequestMethod.POST) @ResponseBody public JsonResponse createDirectory(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam("path") String path) throws ServiceException, CheckException, IOException { _EL_   if (logger.isDebugEnabled()) { _EL_     logger.debug("containerId:" + containerId); _EL_     logger.debug("applicationName:" + applicationName); _EL_     logger.debug("path:" + path); _EL_   } _EL_   fileService.createDirectory(applicationName,containerId,path); _EL_   return new HttpOk(); _EL_ } _EL_ ', '@SuppressLint("NewApi") @TargetApi(Build.VERSION_CODES.KITKAT) private static Platform findPlatform(){ _EL_   try { _EL_     try { _EL_       Class.forName("com.android.org.conscrypt.OpenSSLSocketImpl"); _EL_     } _EL_  catch (    ClassNotFoundException e) { _EL_       Class.forName("org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl"); _EL_     } _EL_     OptionalMethod<Socket> setUseSessionTickets=new OptionalMethod<>(null,"setUseSessionTickets",boolean.class); _EL_     OptionalMethod<Socket> setHostname=new OptionalMethod<>(null,"setHostname",String.class); _EL_     Method trafficStatsTagSocket=null; _EL_     Method trafficStatsUntagSocket=null; _EL_     OptionalMethod<Socket> getAlpnSelectedProtocol=null; _EL_     OptionalMethod<Socket> setAlpnProtocols=null; _EL_     try { _EL_       Class<?> trafficStats=Class.forName("android.net.TrafficStats"); _EL_       trafficStatsTagSocket=trafficStats.getMethod("tagSocket",Socket.class); _EL_       trafficStatsUntagSocket=trafficStats.getMethod("untagSocket",Socket.class); _EL_       try { _EL_         Class.forName("android.net.Network"); _EL_         getAlpnSelectedProtocol=new OptionalMethod<>(byte[].class,"getAlpnSelectedProtocol"); _EL_         setAlpnProtocols=new OptionalMethod<>(null,"setAlpnProtocols",byte[].class); _EL_       } _EL_  catch (      ClassNotFoundException ignored) { _EL_       } _EL_     } _EL_  catch (    ClassNotFoundException|NoSuchMethodException ignored) { _EL_     } _EL_     return new Android(setUseSessionTickets,setHostname,trafficStatsTagSocket,trafficStatsUntagSocket,getAlpnSelectedProtocol,setAlpnProtocols); _EL_   } _EL_  catch (  ClassNotFoundException ignored) { _EL_   } _EL_   try { _EL_     String negoClassName="org.eclipse.jetty.alpn.ALPN"; _EL_     Class<?> negoClass=Class.forName(negoClassName); _EL_     Class<?> providerClass=Class.forName(negoClassName + "$Provider"); _EL_     Class<?> clientProviderClass=Class.forName(negoClassName + "$ClientProvider"); _EL_     Class<?> serverProviderClass=Class.forName(negoClassName + "$ServerProvider"); _EL_     Method putMethod=negoClass.getMethod("put",SSLSocket.class,providerClass); _EL_     Method getMethod=negoClass.getMethod("get",SSLSocket.class); _EL_     Method removeMethod=negoClass.getMethod("remove",SSLSocket.class); _EL_     return new JdkWithJettyBootPlatform(putMethod,getMethod,removeMethod,clientProviderClass,serverProviderClass); _EL_   } _EL_  catch (  ClassNotFoundException|NoSuchMethodException ignored) { _EL_   } _EL_   return new Platform(); _EL_ } _EL_ ', '@NotNull public static String parseRelativeDirectory(@NotNull String s) throws SvnBindException { _EL_   s=s.trim(); _EL_   int length=s.length(); _EL_   String result; _EL_   if (isUnescapedQuote(s,length - 1)) { _EL_     int index=lastUnescapedIndexOf(s,length - 1,\'"\'); _EL_     assertIndex(s,index,"Could not find start quote"); _EL_     result=s.substring(index + 1,length - 1); _EL_   } _EL_  else { _EL_     int index=lastUnescapedIndexOf(s,length,\' \'); _EL_     assertIndex(s,index,"Could not find separating space"); _EL_     result=s.substring(index + 1); _EL_   } _EL_   return unescape(result); _EL_ } _EL_ ', 'public static boolean hasNoPrefix(final AnnotatedTypeMirror annoType){ _EL_   if (annoType == null) { _EL_     return true; _EL_   } _EL_   for (  AnnotationMirror mirror : annoType.getAnnotations()) { _EL_     if (!hasNoPrefix(mirror)) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'protected static Pair<String,String> lsrImmediate(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue,final String immediateNodeValue){ _EL_   final String shifterOperand=environment.getNextVariableString(); _EL_   final String shifterCarryOut=environment.getNextVariableString(); _EL_   long baseOffset=offset; _EL_   if (immediateNodeValue.equals("0")) { _EL_     final String tmpVar1=environment.getNextVariableString(); _EL_     instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,minusThirtyOneSet,wordSize,tmpVar1)); _EL_     instructions.add(ReilHelpers.createAnd(baseOffset++,wordSize,tmpVar1,byteSize,oneSet,byteSize,shifterCarryOut)); _EL_     return new Pair<String,String>(String.valueOf(0),shifterCarryOut); _EL_   } _EL_  else { _EL_     final String tmpVar1=environment.getNextVariableString(); _EL_     final String tmpVar2=environment.getNextVariableString(); _EL_     instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,"-" + immediateNodeValue,qWordSize,tmpVar1)); _EL_     instructions.add(ReilHelpers.createAnd(baseOffset++,qWordSize,tmpVar1,dWordSize,bitMaskAllBitsSet,dWordSize,shifterOperand)); _EL_     instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,String.valueOf(-(Integer.decode(immediateNodeValue) - 1)),dWordSize,tmpVar2)); _EL_     instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar2,byteSize,oneSet,byteSize,shifterCarryOut)); _EL_     return new Pair<String,String>(shifterOperand,shifterCarryOut); _EL_   } _EL_ } _EL_ ', '@Override public Enumeration<Option> listOptions(){ _EL_   Vector<Option> newVector=new Vector<Option>(2); _EL_   newVector.addElement(new Option("\\tIf set, classifier is run in debug mode and\\n" + "\\tmay output additional info to the console","output-debug-info",0,"-output-debug-info")); _EL_   newVector.addElement(new Option("\\tIf set, classifier capabilities are not checked before classifier is built\\n" + "\\t(use with caution).","-do-not-check-capabilities",0,"-do-not-check-capabilities")); _EL_   return newVector.elements(); _EL_ } _EL_ ', 'public static <T>T min(Collection<? extends T> collection,Comparator<? super T> comparator){ _EL_   if (comparator == null) { _EL_     @SuppressWarnings("unchecked") T result=(T)min((Collection<java.lang.Comparable>)collection); _EL_     return result; _EL_   } _EL_   Iterator<? extends T> it=collection.iterator(); _EL_   T min=it.next(); _EL_   while (it.hasNext()) { _EL_     T next=it.next(); _EL_     if (comparator.compare(min,next) > 0) { _EL_       min=next; _EL_     } _EL_   } _EL_   return min; _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends T> list,T object,Comparator<? super T> comparator){ _EL_   if (comparator == null) { _EL_     return Collections.binarySearch((List<? extends java.lang.Comparable<? super T>>)list,object); _EL_   } _EL_   if (!(list instanceof RandomAccess)) { _EL_     ListIterator<? extends T> it=list.listIterator(); _EL_     while (it.hasNext()) { _EL_       int result; _EL_       if ((result=-comparator.compare(it.next(),object)) <= 0) { _EL_         if (result == 0) { _EL_           return it.previousIndex(); _EL_         } _EL_         return -it.previousIndex() - 1; _EL_       } _EL_     } _EL_     return -list.size() - 1; _EL_   } _EL_   int low=0, mid=list.size(), high=mid - 1, result=-1; _EL_   while (low <= high) { _EL_     mid=(low + high) >> 1; _EL_     if ((result=-comparator.compare(list.get(mid),object)) > 0) { _EL_       low=mid + 1; _EL_     } _EL_  else     if (result == 0) { _EL_       return mid; _EL_     } _EL_  else { _EL_       high=mid - 1; _EL_     } _EL_   } _EL_   return -mid - (result < 0 ? 1 : 2); _EL_ } _EL_ ', 'private boolean step1(){ _EL_   if (CT == null)   return false; _EL_   if (suffix(CT,"uciones") && suffix(R2,"uciones")) { _EL_     CT=replaceSuffix(CT,"uciones","u"); _EL_     return true; _EL_   } _EL_   if (CT.length() >= 6) { _EL_     if (suffix(CT,"imentos") && suffix(R2,"imentos")) { _EL_       CT=removeSuffix(CT,"imentos"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"amentos") && suffix(R2,"amentos")) { _EL_       CT=removeSuffix(CT,"amentos"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"adores") && suffix(R2,"adores")) { _EL_       CT=removeSuffix(CT,"adores"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"adoras") && suffix(R2,"adoras")) { _EL_       CT=removeSuffix(CT,"adoras"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"logias") && suffix(R2,"logias")) { _EL_       replaceSuffix(CT,"logias","log"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"encias") && suffix(R2,"encias")) { _EL_       CT=replaceSuffix(CT,"encias","ente"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"amente") && suffix(R1,"amente")) { _EL_       CT=removeSuffix(CT,"amente"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"idades") && suffix(R2,"idades")) { _EL_       CT=removeSuffix(CT,"idades"); _EL_       return true; _EL_     } _EL_   } _EL_   if (CT.length() >= 5) { _EL_     if (suffix(CT,"acoes") && suffix(R2,"acoes")) { _EL_       CT=removeSuffix(CT,"acoes"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"imento") && suffix(R2,"imento")) { _EL_       CT=removeSuffix(CT,"imento"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"amento") && suffix(R2,"amento")) { _EL_       CT=removeSuffix(CT,"amento"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"adora") && suffix(R2,"adora")) { _EL_       CT=removeSuffix(CT,"adora"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"ismos") && suffix(R2,"ismos")) { _EL_       CT=removeSuffix(CT,"ismos"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"istas") && suffix(R2,"istas")) { _EL_       CT=removeSuffix(CT,"istas"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"logia") && suffix(R2,"logia")) { _EL_       CT=replaceSuffix(CT,"logia","log"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"ucion") && suffix(R2,"ucion")) { _EL_       CT=replaceSuffix(CT,"ucion","u"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"encia") && suffix(R2,"encia")) { _EL_       CT=replaceSuffix(CT,"encia","ente"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"mente") && suffix(R2,"mente")) { _EL_       CT=removeSuffix(CT,"mente"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"idade") && suffix(R2,"idade")) { _EL_       CT=removeSuffix(CT,"idade"); _EL_       return true; _EL_     } _EL_   } _EL_   if (CT.length() >= 4) { _EL_     if (suffix(CT,"acao") && suffix(R2,"acao")) { _EL_       CT=removeSuffix(CT,"acao"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"ezas") && suffix(R2,"ezas")) { _EL_       CT=removeSuffix(CT,"ezas"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"icos") && suffix(R2,"icos")) { _EL_       CT=removeSuffix(CT,"icos"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"icas") && suffix(R2,"icas")) { _EL_       CT=removeSuffix(CT,"icas"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"ismo") && suffix(R2,"ismo")) { _EL_       CT=removeSuffix(CT,"ismo"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"avel") && suffix(R2,"avel")) { _EL_       CT=removeSuffix(CT,"avel"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"ivel") && suffix(R2,"ivel")) { _EL_       CT=removeSuffix(CT,"ivel"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"ista") && suffix(R2,"ista")) { _EL_       CT=removeSuffix(CT,"ista"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"osos") && suffix(R2,"osos")) { _EL_       CT=removeSuffix(CT,"osos"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"osas") && suffix(R2,"osas")) { _EL_       CT=removeSuffix(CT,"osas"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"ador") && suffix(R2,"ador")) { _EL_       CT=removeSuffix(CT,"ador"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"ivas") && suffix(R2,"ivas")) { _EL_       CT=removeSuffix(CT,"ivas"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"ivos") && suffix(R2,"ivos")) { _EL_       CT=removeSuffix(CT,"ivos"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"iras") && suffix(RV,"iras") && suffixPreceded(CT,"iras","e")) { _EL_       CT=replaceSuffix(CT,"iras","ir"); _EL_       return true; _EL_     } _EL_   } _EL_   if (CT.length() >= 3) { _EL_     if (suffix(CT,"eza") && suffix(R2,"eza")) { _EL_       CT=removeSuffix(CT,"eza"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"ico") && suffix(R2,"ico")) { _EL_       CT=removeSuffix(CT,"ico"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"ica") && suffix(R2,"ica")) { _EL_       CT=removeSuffix(CT,"ica"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"oso") && suffix(R2,"oso")) { _EL_       CT=removeSuffix(CT,"oso"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"osa") && suffix(R2,"osa")) { _EL_       CT=removeSuffix(CT,"osa"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"iva") && suffix(R2,"iva")) { _EL_       CT=removeSuffix(CT,"iva"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"ivo") && suffix(R2,"ivo")) { _EL_       CT=removeSuffix(CT,"ivo"); _EL_       return true; _EL_     } _EL_     if (suffix(CT,"ira") && suffix(RV,"ira") && suffixPreceded(CT,"ira","e")) { _EL_       CT=replaceSuffix(CT,"ira","ir"); _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'void sync(int sourceRepoIndex,int destRepoIndex,AuthenticationInfo subject) throws IOException { _EL_   LOG.info("Sync started"); _EL_   NotebookAuthorization auth=NotebookAuthorization.getInstance(); _EL_   NotebookRepo srcRepo=getRepo(sourceRepoIndex); _EL_   NotebookRepo dstRepo=getRepo(destRepoIndex); _EL_   List<NoteInfo> allSrcNotes=srcRepo.list(subject); _EL_   List<NoteInfo> srcNotes=auth.filterByUser(allSrcNotes,subject); _EL_   List<NoteInfo> dstNotes=dstRepo.list(subject); _EL_   Map<String,List<String>> noteIds=notesCheckDiff(srcNotes,srcRepo,dstNotes,dstRepo,subject); _EL_   List<String> pushNoteIds=noteIds.get(pushKey); _EL_   List<String> pullNoteIds=noteIds.get(pullKey); _EL_   List<String> delDstNoteIds=noteIds.get(delDstKey); _EL_   if (!pushNoteIds.isEmpty()) { _EL_     LOG.info("Notes with the following IDs will be pushed"); _EL_     for (    String id : pushNoteIds) { _EL_       LOG.info("ID : " + id); _EL_     } _EL_     pushNotes(subject,pushNoteIds,srcRepo,dstRepo,false); _EL_   } _EL_  else { _EL_     LOG.info("Nothing to push"); _EL_   } _EL_   if (!pullNoteIds.isEmpty()) { _EL_     LOG.info("Notes with the following IDs will be pulled"); _EL_     for (    String id : pullNoteIds) { _EL_       LOG.info("ID : " + id); _EL_     } _EL_     pushNotes(subject,pullNoteIds,dstRepo,srcRepo,true); _EL_   } _EL_  else { _EL_     LOG.info("Nothing to pull"); _EL_   } _EL_   if (!delDstNoteIds.isEmpty()) { _EL_     LOG.info("Notes with the following IDs will be deleted from dest"); _EL_     for (    String id : delDstNoteIds) { _EL_       LOG.info("ID : " + id); _EL_     } _EL_     deleteNotes(subject,delDstNoteIds,dstRepo); _EL_   } _EL_  else { _EL_     LOG.info("Nothing to delete from dest"); _EL_   } _EL_   LOG.info("Sync ended"); _EL_ } _EL_ ', 'private static Class<?>[] classesForParams(List<String> params){ _EL_   Class<?>[] result=new Class<?>[params.size()]; _EL_   for (int i=0; i < params.size(); i++) { _EL_     result[i]=classForParam(params.get(i)); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private boolean validateAuthSchemes(Set authSchemeSet) throws PolicyException { _EL_   if (authSchemeSet.isEmpty()) { _EL_     String args[]={AUTH_SCHEME}; _EL_     throw new PolicyException(ResBundleUtils.rbName,"property_does_not_allow_empty_values",args,null); _EL_   } _EL_   Iterator authSchemeSetIter=authSchemeSet.iterator(); _EL_   authSchemes.clear(); _EL_   while (authSchemeSetIter.hasNext()) { _EL_     try { _EL_       String authScheme=(String)authSchemeSetIter.next(); _EL_       authSchemes.add(authScheme); _EL_     } _EL_  catch (    ClassCastException e) { _EL_       String args[]={AUTH_SCHEME}; _EL_       throw new PolicyException(ResBundleUtils.rbName,"property_is_not_a_String",args,null); _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static UUID fromUUIDAsURNStringToUUID(String UUIDasURN){ _EL_   if (!UUIDasURN.startsWith(UUIDHelper.UUID_as_a_URN_PREFIX)) { _EL_     IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl(); _EL_     imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.UUID_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,String.format("Input UUID %s " + "does not start with %s",UUIDasURN,UUIDHelper.UUID_as_a_URN_PREFIX)); _EL_     throw new IMFException(String.format("Input UUID %s does not start with %s",UUIDasURN,UUIDHelper.UUID_as_a_URN_PREFIX),imfErrorLogger); _EL_   } _EL_   return UUID.fromString(UUIDasURN.split(UUIDHelper.UUID_as_a_URN_PREFIX)[1]); _EL_ } _EL_ ', 'public boolean equals(String str){ _EL_   if (str == null)   return false; _EL_   if (_length != str.length())   return false; _EL_   for (int i=_length, j=_offset + _length; --i >= 0; ) { _EL_     if (_array[--j] != str.charAt(i))     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public Enumeration listOptions(){ _EL_   Vector newVector=new Vector(2); _EL_   newVector.addElement(new Option("\\tChange generalization parameter Rho\\n","P",0,"-P")); _EL_   newVector.addElement(new Option("\\tUse ranking to class function special dev. for ARAM.\\n","K",0,"-K")); _EL_   return newVector.elements(); _EL_ } _EL_ ', 'private void applyJMSObjects(HashMap<String,String> filters){ _EL_   StringWriter writer=new StringWriter(); _EL_   PrintWriter printWriter=new PrintWriter(writer); _EL_   printWriter.println(); _EL_   for (  String str : getQueueList()) { _EL_     printWriter.println("      <queue name=\\"" + str + "\\"/>"); _EL_   } _EL_   for (  String str : getTopicList()) { _EL_     printWriter.println("      <topic name=\\"" + str + "\\"/>"); _EL_   } _EL_   filters.put("${jms-list.settings}",writer.toString()); _EL_ } _EL_ ', 'private Pair<DBIDVar,Double> singleIteration(Relation<V> relationx,Relation<? extends NumberVector> relationy){ _EL_   final int dim=RelationUtil.dimensionality(relationx); _EL_   final int dimy=RelationUtil.dimensionality(relationy); _EL_   assert (dim == 2); _EL_   KNNQuery<V> knnQuery=QueryUtil.getKNNQuery(relationx,getDistanceFunction(),k + 1); _EL_   ArrayModifiableDBIDs ids=DBIDUtil.newArray(relationx.getDBIDs()); _EL_   ids.sort(); _EL_   double[][] X=new double[ids.size()][6]; _EL_   double[][] F=new double[ids.size()][ids.size()]; _EL_   double[][] Y=new double[ids.size()][dimy]; _EL_ { _EL_     int i=0; _EL_     for (DBIDIter id=ids.iter(); id.valid(); id.advance(), i++) { _EL_ { _EL_         V vec=relationx.get(id); _EL_         double la=vec.doubleValue(0); _EL_         double lo=vec.doubleValue(1); _EL_         X[i][0]=1.0; _EL_         X[i][1]=la; _EL_         X[i][2]=lo; _EL_         X[i][3]=la * lo; _EL_         X[i][4]=la * la; _EL_         X[i][5]=lo * lo; _EL_       } _EL_ { _EL_         final NumberVector vecy=relationy.get(id); _EL_         for (int d=0; d < dimy; d++) { _EL_           double idy=vecy.doubleValue(d); _EL_           Y[i][d]=idy; _EL_         } _EL_       } _EL_ { _EL_         KNNList neighbors=knnQuery.getKNNForDBID(id,k + 1); _EL_         ModifiableDBIDs neighborhood=DBIDUtil.newArray(neighbors.size()); _EL_         for (DBIDIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) { _EL_           if (DBIDUtil.equal(id,neighbor)) { _EL_             continue; _EL_           } _EL_           neighborhood.add(neighbor); _EL_         } _EL_         F[i][i]=1.0; _EL_         final int nweight=-1 / neighborhood.size(); _EL_         for (DBIDIter iter=neighborhood.iter(); iter.valid(); iter.advance()) { _EL_           int pos=ids.binarySearch(iter); _EL_           assert (pos >= 0); _EL_           F[pos][i]=nweight; _EL_         } _EL_       } _EL_     } _EL_   } _EL_   double[][] common=times(transposeTimesTranspose(X,F),F); _EL_   double[][] b=times(inverse(times(common,X)),times(common,Y)); _EL_   double[][] sigmaMat=times(F,minusEquals(times(X,b),times(F,Y))); _EL_   final double sigma_sum_square=normF(sigmaMat) / (relationx.size() - 6 - 1); _EL_   final double norm=1 / Math.sqrt(sigma_sum_square); _EL_   double[][] E=timesEquals(times(F,minus(Y,times(X,b))),norm); _EL_   DBIDVar worstid=DBIDUtil.newVar(); _EL_   double worstscore=Double.NEGATIVE_INFINITY; _EL_   int i=0; _EL_   for (DBIDIter id=ids.iter(); id.valid(); id.advance(), i++) { _EL_     double err=squareSum(getRow(E,i)); _EL_     if (err > worstscore) { _EL_       worstscore=err; _EL_       worstid.set(id); _EL_     } _EL_   } _EL_   return new Pair<>(worstid,Math.sqrt(worstscore)); _EL_ } _EL_ ', 'private static boolean isGMTish(String name){ _EL_   if (name.length() < 3) { _EL_     return false; _EL_   } _EL_   char c1=name.charAt(0); _EL_   char c2=name.charAt(1); _EL_   char c3=name.charAt(2); _EL_   if (!((c1 == \'G\' || c1 == \'g\') && (c2 == \'M\' || c2 == \'m\') && (c3 == \'T\' || c3 == \'t\')) && !((c1 == \'U\' || c1 == \'u\') && (c2 == \'T\' || c2 == \'t\') && (c3 == \'C\' || c3 == \'c\')) && !((c1 == \'U\' || c1 == \'u\') && (c2 == \'T\' || c2 == \'t\') && (c3 == \'1\'))) { _EL_     return false; _EL_   } _EL_   if (name.length() == 3) { _EL_     return true; _EL_   } _EL_   String offset=name.substring(3); _EL_   if (offset.startsWith("+")) { _EL_     return offset.equals("+0") || offset.equals("+00") || offset.equals("+00:00"); _EL_   } _EL_  else { _EL_     return offset.equals("-0") || offset.equals("-00") || offset.equals("-00:00"); _EL_   } _EL_ } _EL_ ', 'public void expandToObjectAndSelect(Object elementOrTreePath,int level){ _EL_   if (checkBusy()) { _EL_     return; _EL_   } _EL_   Object parent=getParentElement(elementOrTreePath); _EL_   if (((parent != null) && getExpandedState(parent)) || isRootElement(elementOrTreePath)) { _EL_     Widget w=internalGetWidgetToSelect(elementOrTreePath); _EL_     if (null != w) { _EL_       List<Object> selectionList=new ArrayList<>(); _EL_       selectionList.add(w); _EL_       setSelection(selectionList); _EL_       objectToSelect.set(null); _EL_     } _EL_  else { _EL_       objectToSelect.set(elementOrTreePath); _EL_     } _EL_   } _EL_  else { _EL_     objectToSelect.set(elementOrTreePath); _EL_     List<Object> objectsToExpand=createObjectList(parent,new ArrayList<>()); _EL_     if (!objectsToExpand.isEmpty()) { _EL_       objectsToBeExpanded.addAll(objectsToExpand); _EL_       Widget w=internalExpand(elementOrTreePath,true); _EL_       if (w != null) { _EL_         internalExpandToLevel(w,level); _EL_       } _EL_     } _EL_  else { _EL_       Widget w=internalGetWidgetToSelect(elementOrTreePath); _EL_       if (null != w) { _EL_         List<Object> selectionList=new ArrayList<>(); _EL_         selectionList.add(w); _EL_         setSelection(selectionList); _EL_         objectToSelect.set(null); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public static boolean isValidNCName(String ncName){ _EL_   if (ncName.length() == 0)   return false; _EL_   char ch=ncName.charAt(0); _EL_   if (isNCNameStart(ch) == false)   return false; _EL_   for (int i=1; i < ncName.length(); i++) { _EL_     ch=ncName.charAt(i); _EL_     if (isNCName(ch) == false) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', '@Override public Enumeration<Option> listOptions(){ _EL_   Vector<Option> result=new Vector<Option>(); _EL_   result.addElement(new Option("\\tUse double precision format.\\n" + "\\t(default: single precision)","double",0,"-double")); _EL_   result.addElement(new Option("\\tUse tabs as separator.\\n" + "\\t(default: blanks)","tabs",0,"-tabs")); _EL_   result.addAll(Collections.list(super.listOptions())); _EL_   return result.elements(); _EL_ } _EL_ ', 'protected void ensurePathExists(String path){ _EL_   String[] paths=path.split("/"); _EL_   StringBuffer spath=new StringBuffer("/"); _EL_   for (  String temp : paths) { _EL_     if (StringUtils.isBlank(temp)) { _EL_       continue; _EL_     } _EL_     spath.append(temp); _EL_     ensureExists(spath.toString(),null,acl,CreateMode.PERSISTENT); _EL_     spath.append("/"); _EL_   } _EL_ } _EL_ ', 'private static String[] scanForSources(final File sourceDir,final Set<String> sourceIncludes,final Set<String> sourceExcludes){ _EL_   final DirectoryScanner ds=new DirectoryScanner(); _EL_   ds.setFollowSymlinks(true); _EL_   ds.setBasedir(sourceDir); _EL_   ds.setIncludes(sourceIncludes.toArray(new String[sourceIncludes.size()])); _EL_   ds.setExcludes(sourceExcludes.toArray(new String[sourceExcludes.size()])); _EL_   ds.addDefaultExcludes(); _EL_   try { _EL_     ds.scan(); _EL_   } _EL_  catch (  IllegalStateException e) { _EL_     return new String[0]; _EL_   } _EL_   return ds.getIncludedFiles(); _EL_ } _EL_ ', 'protected boolean isCorrectMethod(Method method,Object[] args){ _EL_   return (proxySignature.equals(method.getName()) && args.length == 1); _EL_ } _EL_ ', 'private ResultPointsAndTransitions transitionsBetween(ResultPoint from,ResultPoint to){ _EL_   int fromX=(int)from.getX(); _EL_   int fromY=(int)from.getY(); _EL_   int toX=(int)to.getX(); _EL_   int toY=(int)to.getY(); _EL_   boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX); _EL_   if (steep) { _EL_     int temp=fromX; _EL_     fromX=fromY; _EL_     fromY=temp; _EL_     temp=toX; _EL_     toX=toY; _EL_     toY=temp; _EL_   } _EL_   int dx=Math.abs(toX - fromX); _EL_   int dy=Math.abs(toY - fromY); _EL_   int error=-dx >> 1; _EL_   int ystep=fromY < toY ? 1 : -1; _EL_   int xstep=fromX < toX ? 1 : -1; _EL_   int transitions=0; _EL_   boolean inBlack=image.get(steep ? fromY : fromX,steep ? fromX : fromY); _EL_   for (int x=fromX, y=fromY; x != toX; x+=xstep) { _EL_     boolean isBlack=image.get(steep ? y : x,steep ? x : y); _EL_     if (isBlack != inBlack) { _EL_       transitions++; _EL_       inBlack=isBlack; _EL_     } _EL_     error+=dy; _EL_     if (error > 0) { _EL_       if (y == toY) { _EL_         break; _EL_       } _EL_       y+=ystep; _EL_       error-=dx; _EL_     } _EL_   } _EL_   return new ResultPointsAndTransitions(from,to,transitions); _EL_ } _EL_ ', 'public void limit(double x1,double y1,double x2,double y2){ _EL_   clip[0]=Math.max(clip[0],x1); _EL_   clip[1]=Math.max(clip[1],y1); _EL_   clip[6]=Math.min(clip[6],x2); _EL_   clip[7]=Math.min(clip[7],y2); _EL_ } _EL_ ', '@Override public void evict(String key){ _EL_   key=safetyKey(key); _EL_   final File file=new File(cacheDirectory,key); _EL_   file.delete(); _EL_ } _EL_ ', 'public static void write(int x1,int y1,Image image,int image_width,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException { _EL_   int[] pixels=new int[image_width * image_height]; _EL_   PixelGrabber pixelgrabber=new PixelGrabber(image,0,0,image_width,image_height,pixels,0,image_width); _EL_   pixelgrabber.grabPixels(); _EL_   LinkRaster.write(x1,y1,image_width,image_height,pixels,properties,dos); _EL_ } _EL_ ', '@Override public void onCreate(Bundle savedInstanceState){ _EL_   super.onCreate(savedInstanceState); _EL_   mHandler=new Handler(); _EL_   setContentView(R.layout.voice_recognition); _EL_   Button speakButton=(Button)findViewById(R.id.btn_speak); _EL_   mList=(ListView)findViewById(R.id.list); _EL_   mSupportedLanguageView=(Spinner)findViewById(R.id.supported_languages); _EL_   PackageManager pm=getPackageManager(); _EL_   List<ResolveInfo> activities=pm.queryIntentActivities(new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH),0); _EL_   if (activities.size() != 0) { _EL_     speakButton.setOnClickListener(this); _EL_   } _EL_  else { _EL_     speakButton.setEnabled(false); _EL_     speakButton.setText("Recognizer not present"); _EL_   } _EL_   refreshVoiceSettings(); _EL_ } _EL_ ', 'public boolean canInvoke(MDepreciationWorkfile assetwk,MAssetAcct assetAcct,int A_Current_Period,BigDecimal Accum_Dep){ _EL_   if (assetwk == null) { _EL_     log.warning("@NotFound@ @A_Depreciation_Workfile_ID@"); _EL_     return false; _EL_   } _EL_   int offset=0; _EL_   int lifePeriods=assetwk.getUseLifeMonths(assetwk.isFiscal()); _EL_   boolean ok=(offset <= A_Current_Period); _EL_   if (CLogMgt.isLevelFinest())   log.finest("A_Current_Period=" + A_Current_Period + ", lifePeriods="+ lifePeriods+ " (offset="+ offset+ ") ==> OK="+ ok); _EL_   return ok; _EL_ } _EL_ ', 'private Boolean processYESNO(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException { _EL_   if (!(value.equals("yes") || value.equals("no"))) { _EL_     handleError(handler,XSLTErrorResources.INVALID_BOOLEAN,new Object[]{name,value},null); _EL_     return null; _EL_   } _EL_   return new Boolean(value.equals("yes") ? true : false); _EL_ } _EL_ ', 'protected boolean checkProsodicPosition(Element currentRulePart,String prosodicPositionType){ _EL_   NamedNodeMap attNodes=currentRulePart.getAttributes(); _EL_   for (int z=0; z < attNodes.getLength(); z++) { _EL_     Node el=attNodes.item(z); _EL_     String currentAtt=el.getNodeName(); _EL_     String currentVal=el.getNodeValue(); _EL_     if (currentAtt.equals("type")) { _EL_       if (!currentVal.startsWith("!")) { _EL_         if (!prosodicPositionType.equals(currentVal))         return false; _EL_       } _EL_  else { _EL_         currentVal=currentVal.substring(1,currentVal.length()); _EL_         if (prosodicPositionType.equals(currentVal))         return false; _EL_       } _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public void registerDefaultDeviceTypes(){ _EL_   final HashMap<String,String> devicesList=DefaultPlatform.getDeviceServiceMap(); _EL_   for (  HashMap.Entry<String,String> entry : devicesList.entrySet()) { _EL_     String key=entry.getKey(); _EL_     String value=entry.getValue(); _EL_     try { _EL_       registerDeviceService((Class<DeviceService>)Class.forName(key),(Class<DiscoveryProvider>)Class.forName(value)); _EL_     } _EL_  catch (    ClassNotFoundException e) { _EL_       e.printStackTrace(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void splitNode(KDTreeNode node,int numNodesCreated,double[][] nodeRanges,double[][] universe) throws Exception { _EL_   correctlyInitialized(); _EL_   if (node.m_NodesRectBounds == null) { _EL_     node.m_NodesRectBounds=new double[2][node.m_NodeRanges.length]; _EL_     for (int i=0; i < node.m_NodeRanges.length; i++) { _EL_       node.m_NodesRectBounds[MIN][i]=node.m_NodeRanges[i][MIN]; _EL_       node.m_NodesRectBounds[MAX][i]=node.m_NodeRanges[i][MAX]; _EL_     } _EL_   } _EL_   double maxRectWidth=Double.NEGATIVE_INFINITY, maxPtWidth=Double.NEGATIVE_INFINITY, tempval; _EL_   int splitDim=-1, classIdx=m_Instances.classIndex(); _EL_   for (int i=0; i < node.m_NodesRectBounds[0].length; i++) { _EL_     if (i == classIdx)     continue; _EL_     tempval=node.m_NodesRectBounds[MAX][i] - node.m_NodesRectBounds[MIN][i]; _EL_     if (m_NormalizeNodeWidth) { _EL_       tempval=tempval / universe[i][WIDTH]; _EL_     } _EL_     if (tempval > maxRectWidth && node.m_NodeRanges[i][WIDTH] > 0.0)     maxRectWidth=tempval; _EL_   } _EL_   for (int i=0; i < node.m_NodesRectBounds[0].length; i++) { _EL_     if (i == classIdx)     continue; _EL_     tempval=node.m_NodesRectBounds[MAX][i] - node.m_NodesRectBounds[MIN][i]; _EL_     if (m_NormalizeNodeWidth) { _EL_       tempval=tempval / universe[i][WIDTH]; _EL_     } _EL_     if (tempval >= maxRectWidth * (1 - ERR) && node.m_NodeRanges[i][WIDTH] > 0.0) { _EL_       if (node.m_NodeRanges[i][WIDTH] > maxPtWidth) { _EL_         maxPtWidth=node.m_NodeRanges[i][WIDTH]; _EL_         if (m_NormalizeNodeWidth)         maxPtWidth=maxPtWidth / universe[i][WIDTH]; _EL_         splitDim=i; _EL_       } _EL_     } _EL_   } _EL_   double splitVal=node.m_NodesRectBounds[MIN][splitDim] + (node.m_NodesRectBounds[MAX][splitDim] - node.m_NodesRectBounds[MIN][splitDim]) * 0.5; _EL_   if (splitVal < node.m_NodeRanges[splitDim][MIN])   splitVal=node.m_NodeRanges[splitDim][MIN]; _EL_  else   if (splitVal >= node.m_NodeRanges[splitDim][MAX])   splitVal=node.m_NodeRanges[splitDim][MAX] - node.m_NodeRanges[splitDim][WIDTH] * 0.001; _EL_   int rightStart=rearrangePoints(m_InstList,node.m_Start,node.m_End,splitDim,splitVal); _EL_   if (rightStart == node.m_Start || rightStart > node.m_End) { _EL_     if (rightStart == node.m_Start)     throw new Exception("Left child is empty in node " + node.m_NodeNumber + ". Not possible with "+ "SlidingMidPointofWidestSide splitting method. Please "+ "check code."); _EL_  else     throw new Exception("Right child is empty in node " + node.m_NodeNumber + ". Not possible with "+ "SlidingMidPointofWidestSide splitting method. Please "+ "check code."); _EL_   } _EL_   node.m_SplitDim=splitDim; _EL_   node.m_SplitValue=splitVal; _EL_   double[][] widths=new double[2][node.m_NodesRectBounds[0].length]; _EL_   System.arraycopy(node.m_NodesRectBounds[MIN],0,widths[MIN],0,node.m_NodesRectBounds[MIN].length); _EL_   System.arraycopy(node.m_NodesRectBounds[MAX],0,widths[MAX],0,node.m_NodesRectBounds[MAX].length); _EL_   widths[MAX][splitDim]=splitVal; _EL_   node.m_Left=new KDTreeNode(numNodesCreated + 1,node.m_Start,rightStart - 1,m_EuclideanDistance.initializeRanges(m_InstList,node.m_Start,rightStart - 1),widths); _EL_   widths=new double[2][node.m_NodesRectBounds[0].length]; _EL_   System.arraycopy(node.m_NodesRectBounds[MIN],0,widths[MIN],0,node.m_NodesRectBounds[MIN].length); _EL_   System.arraycopy(node.m_NodesRectBounds[MAX],0,widths[MAX],0,node.m_NodesRectBounds[MAX].length); _EL_   widths[MIN][splitDim]=splitVal; _EL_   node.m_Right=new KDTreeNode(numNodesCreated + 2,rightStart,node.m_End,m_EuclideanDistance.initializeRanges(m_InstList,rightStart,node.m_End),widths); _EL_ } _EL_ ', 'private void interpolateResultList(ArrayList<PathParser.PathDataNode> list){ _EL_   if (list == null || list.size() <= 2)   return; _EL_   float[][] listPenPos=PathNodeUtils.calculatePenPosition(list); _EL_   ArrayList<PathParser.PathDataNode> subList=new ArrayList<>(); _EL_   int size=list.size(); _EL_   PathParser.PathDataNode currentNode=null; _EL_   int i=0; _EL_   while (i < size - 1) { _EL_     currentNode=list.get(i); _EL_     if (!isInterpolatableCommand(currentNode.mType)) { _EL_       i++; _EL_       continue; _EL_     } _EL_     boolean validSequence=true; _EL_     int k=i; _EL_     for (int j=i; j < size && validSequence; j++) { _EL_       if (currentNode.mType == list.get(j).mType) { _EL_         k=j; _EL_         if (!Arrays.equals(currentNode.mParams,list.get(j).mParams))         break; _EL_       } _EL_  else       validSequence=false; _EL_     } _EL_     if (k - i > 2) { _EL_       interpolateSubList(list.subList(i,k + 1)); _EL_     } _EL_     i++; _EL_   } _EL_ } _EL_ ', 'public static String constructNTPtime(long date){ _EL_   long ntpTime=2208988800L; _EL_   long startTime=(date / SECONDS_TO_MILLISECONDS_CONVERSION_RATE) + ntpTime; _EL_   return String.valueOf(startTime); _EL_ } _EL_ ', 'public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){ _EL_   if (!(c instanceof JPopupMenu)) { _EL_     return; _EL_   } _EL_   Font origFont=g.getFont(); _EL_   Color origColor=g.getColor(); _EL_   JPopupMenu popup=(JPopupMenu)c; _EL_   String title=popup.getLabel(); _EL_   if (title == null) { _EL_     return; _EL_   } _EL_   g.setFont(font); _EL_   FontMetrics fm=SwingUtilities2.getFontMetrics(popup,g,font); _EL_   int fontHeight=fm.getHeight(); _EL_   int descent=fm.getDescent(); _EL_   int ascent=fm.getAscent(); _EL_   Point textLoc=new Point(); _EL_   int stringWidth=SwingUtilities2.stringWidth(popup,fm,title); _EL_   textLoc.y=y + ascent + TEXT_SPACING; _EL_   textLoc.x=x + ((width - stringWidth) / 2); _EL_   g.setColor(background); _EL_   g.fillRect(textLoc.x - TEXT_SPACING,textLoc.y - (fontHeight - descent),stringWidth + (2 * TEXT_SPACING),fontHeight - descent); _EL_   g.setColor(foreground); _EL_   SwingUtilities2.drawString(popup,g,title,textLoc.x,textLoc.y); _EL_   MotifGraphicsUtils.drawGroove(g,x,textLoc.y + TEXT_SPACING,width,GROOVE_HEIGHT,shadowColor,highlightColor); _EL_   g.setFont(origFont); _EL_   g.setColor(origColor); _EL_ } _EL_ ', 'private void checkPermission(Object object,NamespacePermissionEnum[] permissions,List<AccessDeniedException> accessDeniedExceptions){ _EL_   if (object != null) { _EL_     if (object instanceof Collection) { _EL_       Collection<?> collection=(Collection<?>)object; _EL_       for (      Object element : collection) { _EL_         checkPermission(element,permissions,accessDeniedExceptions); _EL_       } _EL_     } _EL_  else     if (object instanceof String) { _EL_       try { _EL_         checkPermission((String)object,permissions); _EL_       } _EL_  catch (      AccessDeniedException accessDeniedException) { _EL_         accessDeniedExceptions.add(accessDeniedException); _EL_       } _EL_     } _EL_  else { _EL_       throw new IllegalStateException(String.format("Object must be of type %s or %s. Actual object.class = %s",String.class,Collection.class,object.getClass())); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void removeAttribute(int index){ _EL_   if (index >= 0 && index < length) { _EL_     if (index < length - 1) { _EL_       System.arraycopy(data,(index + 1) * 5,data,index * 5,(length - index - 1) * 5); _EL_     } _EL_     index=(length - 1) * 5; _EL_     data[index++]=null; _EL_     data[index++]=null; _EL_     data[index++]=null; _EL_     data[index++]=null; _EL_     data[index]=null; _EL_     length--; _EL_   } _EL_  else { _EL_     badIndex(index); _EL_   } _EL_ } _EL_ ', 'private Set<String> returnRemotePoolsAssociatedWithRemoteCopySettings(Map<String,List<String>> remoteCopySettings,Set<String> poolUris){ _EL_   Set<String> remotePoolUris=new HashSet<String>(); _EL_   for (  Entry<String,List<String>> entry : remoteCopySettings.entrySet()) { _EL_     VirtualPool vPool=_objectCache.queryObject(VirtualPool.class,URI.create(entry.getKey())); _EL_     if (null == vPool) { _EL_       remotePoolUris.addAll(poolUris); _EL_     } _EL_  else     if (null != vPool.getUseMatchedPools() && vPool.getUseMatchedPools()) { _EL_       if (null != vPool.getMatchedStoragePools()) { _EL_         remotePoolUris.addAll(vPool.getMatchedStoragePools()); _EL_       } _EL_     } _EL_  else     if (null != vPool.getAssignedStoragePools()) { _EL_       remotePoolUris.addAll(vPool.getAssignedStoragePools()); _EL_     } _EL_   } _EL_   return remotePoolUris; _EL_ } _EL_ ', 'public void balanceSegments(){ _EL_   MAcctSchemaElement[] elements=m_acctSchema.getAcctSchemaElements(); _EL_   for (int i=0; i < elements.length; i++) { _EL_     MAcctSchemaElement ase=elements[i]; _EL_     if (ase.isBalanced())     balanceSegment(ase.getElementType()); _EL_   } _EL_ } _EL_ ', 'public void recordBeginning(){ _EL_   final String msg="Usage beginning module=" + mModuleName + " runId="+ mRunId; _EL_   mUsageMessages.add(msg); _EL_   Diagnostic.developerLog(msg); _EL_   mClient.recordBeginning(mModuleName,mRunId); _EL_ } _EL_ ', 'public void write(PrintStream out){ _EL_   write(out,table); _EL_ } _EL_ ', 'void flush(){ _EL_   printStream.flush(); _EL_ } _EL_ ', 'Node<K,V> findNear(K kkey,int rel){ _EL_   Comparable<? super K> key=comparable(kkey); _EL_   for (; ; ) { _EL_     Node<K,V> b=findPredecessor(key); _EL_     Node<K,V> n=b.next; _EL_     for (; ; ) { _EL_       if (n == null)       return ((rel & LT) == 0 || b.isBaseHeader()) ? null : b; _EL_       Node<K,V> f=n.next; _EL_       if (n != b.next)       break; _EL_       Object v=n.value; _EL_       if (v == null) { _EL_         n.helpDelete(b,f); _EL_         break; _EL_       } _EL_       if (v == n || b.value == null)       break; _EL_       int c=key.compareTo(n.key); _EL_       if ((c == 0 && (rel & EQ) != 0) || (c < 0 && (rel & LT) == 0))       return n; _EL_       if (c <= 0 && (rel & LT) != 0)       return b.isBaseHeader() ? null : b; _EL_       b=n; _EL_       n=f; _EL_     } _EL_   } _EL_ } _EL_ ', 'public void close() throws IOException { _EL_   if (writer != null)   writer.flushBuffer(); _EL_ } _EL_ ', 'private void addLimitedMitreJoin(LineSegment offset0,LineSegment offset1,double distance,double mitreLimit){ _EL_   Coordinate basePt=seg0.p1; _EL_   double ang0=Angle.angle(basePt,seg0.p0); _EL_   double ang1=Angle.angle(basePt,seg1.p1); _EL_   double angDiff=Angle.angleBetweenOriented(seg0.p0,basePt,seg1.p1); _EL_   double angDiffHalf=angDiff / 2; _EL_   double midAng=Angle.normalize(ang0 + angDiffHalf); _EL_   double mitreMidAng=Angle.normalize(midAng + Math.PI); _EL_   double mitreDist=mitreLimit * distance; _EL_   double bevelDelta=mitreDist * Math.abs(Math.sin(angDiffHalf)); _EL_   double bevelHalfLen=distance - bevelDelta; _EL_   double bevelMidX=basePt.x + mitreDist * Math.cos(mitreMidAng); _EL_   double bevelMidY=basePt.y + mitreDist * Math.sin(mitreMidAng); _EL_   Coordinate bevelMidPt=new Coordinate(bevelMidX,bevelMidY); _EL_   LineSegment mitreMidLine=new LineSegment(basePt,bevelMidPt); _EL_   Coordinate bevelEndLeft=mitreMidLine.pointAlongOffset(1.0,bevelHalfLen); _EL_   Coordinate bevelEndRight=mitreMidLine.pointAlongOffset(1.0,-bevelHalfLen); _EL_   if (side == Position.LEFT) { _EL_     segList.addPt(bevelEndLeft); _EL_     segList.addPt(bevelEndRight); _EL_   } _EL_  else { _EL_     segList.addPt(bevelEndRight); _EL_     segList.addPt(bevelEndLeft); _EL_   } _EL_ } _EL_ ', 'protected Size2D drawVertical(Graphics2D g2,Rectangle2D chartArea){ _EL_   double startX; _EL_   double topSpace=0.0; _EL_   double bottomSpace=0.0; _EL_   double leftSpace=0.0; _EL_   double rightSpace=0.0; _EL_   double w=getWidth(); _EL_   double h=getHeight(); _EL_   RectangleInsets padding=getPadding(); _EL_   if (padding != null) { _EL_     topSpace=padding.calculateTopOutset(h); _EL_     bottomSpace=padding.calculateBottomOutset(h); _EL_     leftSpace=padding.calculateLeftOutset(w); _EL_     rightSpace=padding.calculateRightOutset(w); _EL_   } _EL_   if (getPosition() == RectangleEdge.LEFT) { _EL_     startX=chartArea.getX() + leftSpace; _EL_   } _EL_  else { _EL_     startX=chartArea.getMaxX() - rightSpace - w; _EL_   } _EL_   VerticalAlignment alignment=getVerticalAlignment(); _EL_   double startY=0.0; _EL_   if (alignment == VerticalAlignment.CENTER) { _EL_     startY=chartArea.getMinY() + topSpace + chartArea.getHeight() / 2.0 - h / 2.0; _EL_   } _EL_  else   if (alignment == VerticalAlignment.TOP) { _EL_     startY=chartArea.getMinY() + topSpace; _EL_   } _EL_  else   if (alignment == VerticalAlignment.BOTTOM) { _EL_     startY=chartArea.getMaxY() - bottomSpace - h; _EL_   } _EL_   g2.drawImage(this.image,(int)startX,(int)startY,(int)w,(int)h,null); _EL_   return new Size2D(chartArea.getWidth() + leftSpace + rightSpace,h + topSpace + bottomSpace); _EL_ } _EL_ ', 'public synchronized void commit(){ _EL_ synchronized (mutex) { _EL_     Map<Column,Set<Interval>> temp=workingIntervals; _EL_     workingIntervals=Collections.synchronizedMap(new LinkedHashMap<>()); _EL_     availableIntervalsRef.set(Collections.unmodifiableMap(new LinkedHashMap<>(temp))); _EL_     super.columns=new LinkedHashSet<>(temp.keySet()); _EL_   } _EL_ } _EL_ ', 'public synchronized void show(Bundle options){ _EL_   if (DEBUG)   Log.d(TAG,"show(); mKeyguardView==" + mKeyguardView); _EL_   boolean enableScreenRotation=shouldEnableScreenRotation(); _EL_   maybeCreateKeyguardLocked(enableScreenRotation,false,options); _EL_   maybeEnableScreenRotation(enableScreenRotation); _EL_   final int visFlags=View.STATUS_BAR_DISABLE_HOME; _EL_   if (DEBUG)   Log.v(TAG,"show:setSystemUiVisibility(" + Integer.toHexString(visFlags) + ")"); _EL_   mKeyguardHost.setSystemUiVisibility(visFlags); _EL_   mViewManager.updateViewLayout(mKeyguardHost,mWindowLayoutParams); _EL_   mKeyguardHost.setVisibility(View.VISIBLE); _EL_   mKeyguardView.show(); _EL_   mKeyguardView.requestFocus(); _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public static <K,V>void transformStringMap(Map<String,String> original,Map<K,V> map,Class<K> keyClass,Class<V> valueClass) throws PreferenceException { _EL_   Method parseKeyMethod=findParseMethod(keyClass); _EL_   Method parseValueMethod=findParseMethod(valueClass); _EL_   if ((null != parseKeyMethod) && (null != parseValueMethod)) { _EL_     for (    Map.Entry<String,String> toTransformEntry : original.entrySet()) { _EL_       try { _EL_         Object transformedKey=parseKeyMethod.invoke(null,toTransformEntry.getKey()); _EL_         Object transformedValue=parseValueMethod.invoke(null,toTransformEntry.getValue()); _EL_         if (keyClass.isAssignableFrom(transformedKey.getClass()) && valueClass.isAssignableFrom(transformedValue.getClass())) { _EL_           map.put((K)transformedKey,(V)transformedValue); _EL_         } _EL_       } _EL_  catch (      Exception e) { _EL_         throw new PreferenceException("Error transforming Map<java.lang.String, java.lang.String> to Map<" + keyClass.getName() + ", "+ valueClass.getName()+ ">.",e); _EL_       } _EL_     } _EL_   } _EL_  else   if (null == parseKeyMethod) { _EL_     throw new PreferenceException("Error transforming Map<java.lang.String, java.lang.String> to Map<" + keyClass.getName() + ", "+ valueClass.getName()+ ">."+ "Parsing method can not be found in class "+ keyClass.getName()+ "."); _EL_   } _EL_  else { _EL_     throw new PreferenceException("Error transforming Map<java.lang.String, java.lang.String> to Map<" + keyClass.getName() + ", "+ valueClass.getName()+ ">."+ "Parsing method can not be found in class "+ valueClass.getName()+ "."); _EL_   } _EL_ } _EL_ ', 'public void flush(){ _EL_   final BigdataSailRepositoryConnection cxn=tlTx.get(); _EL_   if (cxn != null) { _EL_     Code.wrapThrow(null); _EL_   } _EL_ } _EL_ ', 'public static String decode(String s,Type t){ _EL_   if (s == null) { _EL_     throw new IllegalArgumentException(); _EL_   } _EL_   final int n=s.length(); _EL_   if (n == 0) { _EL_     return s; _EL_   } _EL_   if (s.indexOf(\'%\') < 0) { _EL_     if (t == Type.QUERY_PARAM) { _EL_       if (s.indexOf(\'+\') < 0) { _EL_         return s; _EL_       } _EL_     } _EL_  else { _EL_       return s; _EL_     } _EL_   } _EL_  else { _EL_     if (n < 2) { _EL_       throw new IllegalArgumentException("Malformed percent-encoded octet at index 1"); _EL_     } _EL_     if (s.charAt(n - 2) == \'%\') { _EL_       throw new IllegalArgumentException("Malformed percent-encoded octet at index " + (n - 2)); _EL_     } _EL_   } _EL_   if (t == null) { _EL_     return decode(s,n); _EL_   } _EL_ switch (t) { _EL_ case HOST: _EL_     return decodeHost(s,n); _EL_ case QUERY_PARAM: _EL_   return decodeQueryParam(s,n); _EL_ default : _EL_ return decode(s,n); _EL_ } _EL_ } _EL_ ', 'public void drawLinesAndPoints(Graphics2D g2d,ArrayList<ComparableLabel> orderedDateSet,HashMap<ComparableLabel,Integer> dataPoints,long yMaxMark){ _EL_   int sectionWidth=this.graphWidth / orderedDateSet.size(); _EL_   int xOffset=sectionWidth / 2; _EL_   int yPrevValue; _EL_   int yCurrentValue; _EL_   float prevOffsetPerc; _EL_   float currentOffsetPerc; _EL_   g2d.setColor(this.lineColor); _EL_   for (int i=0; i < orderedDateSet.size(); i++) { _EL_     if (i != 0) { _EL_       yPrevValue=dataPoints.get(orderedDateSet.get(i - 1)); _EL_       yCurrentValue=dataPoints.get(orderedDateSet.get(i)); _EL_       prevOffsetPerc=yPrevValue / (float)yMaxMark; _EL_       currentOffsetPerc=yCurrentValue / (float)yMaxMark; _EL_       g2d.drawLine(this.graphLeft + (i - 1) * sectionWidth + xOffset,this.graphBottom - Math.round(prevOffsetPerc * this.graphHeight),this.graphLeft + i * sectionWidth + xOffset,Math.round(this.graphBottom - currentOffsetPerc * this.graphHeight)); _EL_     } _EL_  else { _EL_       yCurrentValue=dataPoints.get(orderedDateSet.get(i)); _EL_       currentOffsetPerc=yCurrentValue / (float)yMaxMark; _EL_       g2d.fillOval(this.graphLeft + (i) * sectionWidth + xOffset - this.pointRadius,this.graphBottom - Math.round(currentOffsetPerc * this.graphHeight) - this.pointRadius,this.pointRadius * 2,this.pointRadius * 2); _EL_     } _EL_   } _EL_ } _EL_ ', 'private static NSObject parseObject(Node n) throws ParseException, IOException { _EL_   String type=n.getNodeName(); _EL_   if (type.equals("dict")) { _EL_     NSDictionary dict=new NSDictionary(); _EL_     List<Node> children=filterElementNodes(n.getChildNodes()); _EL_     for (int i=0; i < children.size(); i+=2) { _EL_       Node key=children.get(i); _EL_       Node val=children.get(i + 1); _EL_       String keyString=getNodeTextContents(key); _EL_       dict.put(keyString,parseObject(val)); _EL_     } _EL_     return dict; _EL_   } _EL_  else   if (type.equals("array")) { _EL_     List<Node> children=filterElementNodes(n.getChildNodes()); _EL_     NSArray array=new NSArray(children.size()); _EL_     for (int i=0; i < children.size(); i++) { _EL_       array.setValue(i,parseObject(children.get(i))); _EL_     } _EL_     return array; _EL_   } _EL_  else   if (type.equals("true")) { _EL_     return new NSNumber(true); _EL_   } _EL_  else   if (type.equals("false")) { _EL_     return new NSNumber(false); _EL_   } _EL_  else   if (type.equals("integer")) { _EL_     return new NSNumber(getNodeTextContents(n)); _EL_   } _EL_  else   if (type.equals("real")) { _EL_     return new NSNumber(getNodeTextContents(n)); _EL_   } _EL_  else   if (type.equals("string")) { _EL_     return new NSString(getNodeTextContents(n)); _EL_   } _EL_  else   if (type.equals("data")) { _EL_     return new NSData(getNodeTextContents(n)); _EL_   } _EL_  else   if (type.equals("date")) { _EL_     return new NSDate(getNodeTextContents(n)); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static boolean isZoningRequired(DbClient dbClient,VirtualArray nh){ _EL_   if (nh.getAutoSanZoning() == false) { _EL_     _log.info("SAN Zoning is not enabled for Neighborhood: " + nh.getLabel()); _EL_     return false; _EL_   } _EL_   return NetworkUtil.areNetworkSystemDiscovered(dbClient); _EL_ } _EL_ ', 'public boolean toFail(){ _EL_   LifecycleState state; _EL_ synchronized (this) { _EL_     state=_state; _EL_     if (state.isAfterDestroying()) { _EL_       return false; _EL_     } _EL_     _state=FAILED; _EL_     _lastChangeTime=CurrentTime.currentTime(); _EL_   } _EL_   if (_log != null && _log.isLoggable(_level))   _log.log(_level,"fail " + _name); _EL_   notifyListeners(state,FAILED); _EL_   _failCount++; _EL_   return true; _EL_ } _EL_ ', 'public static String convertBooleanArrToString(Boolean[] noDictionaryDimsMapping){ _EL_   StringBuilder builder=new StringBuilder(); _EL_   int index=0; _EL_   for (; index < noDictionaryDimsMapping.length; index++) { _EL_     builder.append(noDictionaryDimsMapping[index]); _EL_     builder.append(CarbonCommonConstants.COMA_SPC_CHARACTER); _EL_   } _EL_   int lastIndex=builder.lastIndexOf(CarbonCommonConstants.COMA_SPC_CHARACTER); _EL_   String str=-1 != lastIndex ? builder.substring(0,lastIndex) : builder.toString(); _EL_   return str; _EL_ } _EL_ ', 'void putChannel(final StoredClientChannel channel){ _EL_   putChannel(channel,true); _EL_ } _EL_ ', '@Deprecated public static String encodePostBody(Bundle parameters,String boundary){ _EL_   if (parameters == null)   return ""; _EL_   StringBuilder sb=new StringBuilder(); _EL_   for (  String key : parameters.keySet()) { _EL_     Object parameter=parameters.get(key); _EL_     if (!(parameter instanceof String)) { _EL_       continue; _EL_     } _EL_     sb.append("Content-Disposition: form-data; name=\\"" + key + "\\"\\r\\n\\r\\n"+ (String)parameter); _EL_     sb.append("\\r\\n" + "--" + boundary + "\\r\\n"); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'public static Object extractTypeChecked(List<Object> args,int i,Class clazz,Function<List<Object>,Object> extractFunc){ _EL_   if (args.size() < i + 1) { _EL_     return null; _EL_   } _EL_  else   if (clazz.isInstance(args.get(i))) { _EL_     return extractFunc.apply(args); _EL_   } _EL_  else { _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public static List<String> splitPath(File file){ _EL_   List<String> output=new ArrayList<>(); _EL_   File current=file; _EL_   while (current != null) { _EL_     output.add(current.getName()); _EL_     current=current.getParentFile(); _EL_   } _EL_   Collections.reverse(output); _EL_   return output; _EL_ } _EL_ ', 'protected static void processGenericPropertiesCreatorProps(File propsFile){ _EL_   try { _EL_     Properties expProps=new Properties(); _EL_     BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile)); _EL_     expProps.load(bi); _EL_     bi.close(); _EL_     bi=null; _EL_     Properties GPCInputProps=GenericPropertiesCreator.getGlobalInputProperties(); _EL_     Set<Object> keys=expProps.keySet(); _EL_     Iterator<Object> keysI=keys.iterator(); _EL_     while (keysI.hasNext()) { _EL_       String key=(String)keysI.next(); _EL_       String existingVal=GPCInputProps.getProperty(key,""); _EL_       if (existingVal.length() > 0) { _EL_         String newVal=expProps.getProperty(key); _EL_         if (existingVal.indexOf(newVal) < 0) { _EL_           newVal=existingVal + "," + newVal; _EL_           GPCInputProps.put(key,newVal); _EL_         } _EL_       } _EL_  else { _EL_         String newVal=expProps.getProperty(key); _EL_         GPCInputProps.put(key,newVal); _EL_       } _EL_     } _EL_   } _EL_  catch (  Exception ex) { _EL_   } _EL_ } _EL_ ', '@Override public Enumeration<Option> listOptions(){ _EL_   Vector<Option> result=enumToVector(super.listOptions()); _EL_   result.addElement(new Option("\\tThe number of clusters (default " + defaultNumClusters() + ")","k",1,"-k <num>")); _EL_   result.addElement(new Option("\\tSet pattern to grid (default is random).\\n" + "\\tThis flag cannot be used at the same time as flag I.\\n" + "\\tThe pattern is random, if neither flag G nor flag I is set.","G",0,"-G")); _EL_   result.addElement(new Option("\\tSet pattern to sine (default is random).\\n" + "\\tThis flag cannot be used at the same time as flag I.\\n" + "\\tThe pattern is random, if neither flag G nor flag I is set.","I",0,"-I")); _EL_   result.addElement(new Option("\\tThe range of number of instances per cluster (default " + defaultMinInstNum() + ".."+ defaultMaxInstNum()+ ").\\n"+ "\\tLower number must be between 0 and 2500,\\n"+ "\\tupper number must be between 50 and 2500.","N",1,"-N <num>..<num>")); _EL_   result.addElement(new Option("\\tThe range of radius per cluster (default " + defaultMinRadius() + ".."+ defaultMaxRadius()+ ").\\n"+ "\\tLower number must be between 0 and SQRT(2), \\n"+ "\\tupper number must be between SQRT(2) and SQRT(32).","R",1,"-R <num>..<num>")); _EL_   result.addElement(new Option("\\tThe distance multiplier (default " + defaultDistMult() + ").","M",1,"-M <num>")); _EL_   result.addElement(new Option("\\tThe number of cycles (default " + defaultNumCycles() + ").","C",1,"-C <num>")); _EL_   result.addElement(new Option("\\tFlag for input order is ORDERED. If flag is not set then \\n" + "\\tinput order is RANDOMIZED. RANDOMIZED is currently not \\n" + "\\timplemented, therefore is the input order always ORDERED.","O",0,"-O")); _EL_   result.addElement(new Option("\\tThe noise rate in percent (default " + defaultNoiseRate() + ").\\n"+ "\\tCan be between 0% and 30%. (Remark: The original \\n"+ "\\talgorithm only allows noise up to 10%.)","P",1,"-P <num>")); _EL_   return result.elements(); _EL_ } _EL_ ', 'public int compare(String s1,String s2){ _EL_   final Matcher match1=MATCH_ID_PATTERN.matcher(s1); _EL_   final Matcher match2=MATCH_ID_PATTERN.matcher(s2); _EL_   final boolean match1matches=match1.matches(); _EL_   final boolean match2matches=match2.matches(); _EL_   if (match1matches ^ match2matches) { _EL_     return (match1matches) ? 1 : -1; _EL_   } _EL_  else   if (match1matches && match2matches) { _EL_     int signature1=Integer.parseInt(match1.group(1)); _EL_     int signature2=Integer.parseInt(match2.group(1)); _EL_     int comparison=(signature1 < signature2) ? -1 : (signature1 > signature2) ? 1 : 0; _EL_     if (comparison == 0) { _EL_       int start1=Integer.parseInt(match1.group(2)); _EL_       int start2=Integer.parseInt(match2.group(2)); _EL_       comparison=(start1 < start2) ? -1 : (start1 > start2) ? 1 : 0; _EL_     } _EL_     if (comparison == 0) { _EL_       int end1=Integer.parseInt(match1.group(3)); _EL_       int end2=Integer.parseInt(match2.group(3)); _EL_       comparison=(end1 < end2) ? -1 : (end1 > end2) ? 1 : 0; _EL_     } _EL_     return comparison; _EL_   } _EL_  else { _EL_     int seqLength1=s1.length(), n2=s2.length(); _EL_     for (int i1=0, i2=0; i1 < seqLength1 && i2 < n2; i1++, i2++) { _EL_       char c1=s1.charAt(i1); _EL_       char c2=s2.charAt(i2); _EL_       if (c1 != c2) { _EL_         c1=Character.toUpperCase(c1); _EL_         c2=Character.toUpperCase(c2); _EL_         if (c1 != c2) { _EL_           c1=Character.toLowerCase(c1); _EL_           c2=Character.toLowerCase(c2); _EL_           if (c1 != c2) { _EL_             return c1 - c2; _EL_           } _EL_         } _EL_       } _EL_     } _EL_     return seqLength1 - n2; _EL_   } _EL_ } _EL_ ', 'static public void process(String input,String output,String packFileName){ _EL_   process(new Settings(),input,output,packFileName); _EL_ } _EL_ ', 'private void startHideAnimations(){ _EL_   animationPlaying=true; _EL_   lightAnimationLayout(); _EL_   if (buttonType.equals(ButtonType.CIRCLE)) { _EL_     if (hideOrderType.equals(OrderType.DEFAULT)) { _EL_       for (int i=0; i < buttonNum; i++) { _EL_         setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],i); _EL_       } _EL_     } _EL_  else     if (hideOrderType.equals(OrderType.REVERSE)) { _EL_       for (int i=0; i < buttonNum; i++) { _EL_         setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1); _EL_       } _EL_     } _EL_  else     if (hideOrderType.equals(OrderType.RANDOM)) { _EL_       Random random=new Random(); _EL_       boolean[] used=new boolean[buttonNum]; _EL_       for (int i=0; i < buttonNum; i++)       used[i]=false; _EL_       int count=0; _EL_       while (true) { _EL_         int i=random.nextInt(buttonNum); _EL_         if (!used[i]) { _EL_           used[i]=true; _EL_           setHideAnimation(dots[count],circleButtons[count],endLocations[count],startLocations[count],i); _EL_           count++; _EL_           if (count == buttonNum)           break; _EL_         } _EL_       } _EL_     } _EL_   } _EL_  else   if (buttonType.equals(ButtonType.HAM)) { _EL_     if (hideOrderType.equals(OrderType.DEFAULT)) { _EL_       for (int i=0; i < buttonNum; i++) { _EL_         setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],i); _EL_       } _EL_     } _EL_  else     if (hideOrderType.equals(OrderType.REVERSE)) { _EL_       for (int i=0; i < buttonNum; i++) { _EL_         setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1); _EL_       } _EL_     } _EL_  else     if (hideOrderType.equals(OrderType.RANDOM)) { _EL_       Random random=new Random(); _EL_       boolean[] used=new boolean[buttonNum]; _EL_       for (int i=0; i < buttonNum; i++)       used[i]=false; _EL_       int count=0; _EL_       while (true) { _EL_         int i=random.nextInt(buttonNum); _EL_         if (!used[i]) { _EL_           used[i]=true; _EL_           setHideAnimation(bars[count],hamButtons[count],endLocations[count],startLocations[count],i); _EL_           count++; _EL_           if (count == buttonNum)           break; _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public void append(byte[] bytes){ _EL_   append(bytes,0,bytes.length); _EL_ } _EL_ ', 'public static double L_RankLoss(int y[],int r[]){ _EL_   int L=y.length; _EL_   ArrayList<Integer> tI=new ArrayList<Integer>(); _EL_   ArrayList<Integer> fI=new ArrayList<Integer>(); _EL_   for (int j=0; j < L; j++) { _EL_     if (y[j] == 1) { _EL_       tI.add(j); _EL_     } _EL_  else { _EL_       fI.add(j); _EL_     } _EL_   } _EL_   if (!tI.isEmpty() && !fI.isEmpty()) { _EL_     int c=0; _EL_     for (    int k : tI) { _EL_       for (      int l : fI) { _EL_         if (position(k,r) < position(l,r)) { _EL_           c++; _EL_         } _EL_       } _EL_     } _EL_     return (double)c / (double)(tI.size() * fI.size()); _EL_   } _EL_  else { _EL_     return 0.0; _EL_   } _EL_ } _EL_ ', 'public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){ _EL_   JComponent comp=(c instanceof JComponent) ? (JComponent)c : null; _EL_   if (g instanceof Graphics2D) { _EL_     Graphics2D g2=(Graphics2D)g; _EL_     g2.translate(x,y); _EL_     paint(g2,comp,width,height); _EL_     g2.translate(-x,-y); _EL_   } _EL_  else { _EL_     BufferedImage img=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB); _EL_     Graphics2D g2=(Graphics2D)img.getGraphics(); _EL_     paint(g2,comp,width,height); _EL_     g2.dispose(); _EL_     ImageScalingHelper.paint(g,x,y,width,height,img,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL); _EL_   } _EL_ } _EL_ ', 'private static String convertActionTypeToIntent(RamlActionType actionType,boolean isTargetCollection){ _EL_ switch (actionType) { _EL_ case DELETE: _EL_     return "delete"; _EL_ case GET: _EL_   return "get"; _EL_ case POST: _EL_ if (isTargetCollection) { _EL_   return "create"; _EL_ } _EL_ case PUT: _EL_ return "update"; _EL_ case PATCH: _EL_ return "modify"; _EL_ default : _EL_ return "do"; _EL_ } _EL_ } _EL_ ', 'public ConstraintMap createAssignmentConstraints(final AnnotatedTypeMirror assignedTo,final AnnotatedTypeMirror boxedReturnType,final AnnotatedExecutableType methodType,final Set<AFConstraint> afArgumentConstraints,final Map<TypeVariable,AnnotatedTypeMirror> inferredArgs,final Set<TypeVariable> targets,final AnnotatedTypeFactory typeFactory){ _EL_   final LinkedList<AFConstraint> assignmentAfs=new LinkedList<>(); _EL_   for (  AnnotatedTypeVariable typeParam : methodType.getTypeVariables()) { _EL_     final TypeVariable target=typeParam.getUnderlyingType(); _EL_     final AnnotatedTypeMirror inferredType=inferredArgs.get(target); _EL_     if (inferredType != null) { _EL_       assignmentAfs.add(new A2F(inferredType,typeParam.getUpperBound())); _EL_       assignmentAfs.add(new F2A(typeParam.getLowerBound(),inferredType)); _EL_     } _EL_  else { _EL_       assignmentAfs.add(new F2A(typeParam,typeParam.getUpperBound())); _EL_       assignmentAfs.add(new A2F(typeParam.getLowerBound(),typeParam)); _EL_     } _EL_   } _EL_   for (  AFConstraint argConstraint : afArgumentConstraints) { _EL_     if (argConstraint instanceof F2A) { _EL_       assignmentAfs.add(argConstraint); _EL_     } _EL_   } _EL_   LinkedList<AFConstraint> substitutedAssignmentConstraints=new LinkedList<>(); _EL_   for (  AFConstraint afConstraint : assignmentAfs) { _EL_     substitutedAssignmentConstraints.add(afConstraint.substitute(inferredArgs)); _EL_   } _EL_   final AnnotatedTypeMirror substitutedReturnType=TypeArgInferenceUtil.substitute(inferredArgs,boxedReturnType); _EL_   substitutedAssignmentConstraints.add(new F2A(substitutedReturnType,assignedTo)); _EL_   final Set<AFConstraint> reducedConstraints=new LinkedHashSet<>(); _EL_   reduceAfConstraints(typeFactory,reducedConstraints,substitutedAssignmentConstraints,targets); _EL_   final Set<TUConstraint> tuAssignmentConstraints=afToTuConstraints(reducedConstraints,targets); _EL_   addConstraintsBetweenTargets(tuAssignmentConstraints,targets,true,typeFactory); _EL_   return constraintMapBuilder.build(targets,tuAssignmentConstraints,typeFactory); _EL_ } _EL_ ', 'private int convertLocationToColumn(int x,int y){ _EL_   if (cellWidth > 0) { _EL_     if (layoutOrientation == JList.VERTICAL) { _EL_       return 0; _EL_     } _EL_     Insets insets=list.getInsets(); _EL_     int col; _EL_     if (isLeftToRight) { _EL_       col=(x - insets.left) / cellWidth; _EL_     } _EL_  else { _EL_       col=(list.getWidth() - x - insets.right- 1) / cellWidth; _EL_     } _EL_     if (col < 0) { _EL_       return 0; _EL_     } _EL_  else     if (col >= columnCount) { _EL_       return columnCount - 1; _EL_     } _EL_     return col; _EL_   } _EL_   return 0; _EL_ } _EL_ ', 'public static String generateNativeGuidForStoragePortFromIndication(String sourceInstanceSystemName,String portNetworkId){ _EL_   String[] splitedString=sourceInstanceSystemName.split(Constants.PATH_DELIMITER_REGEX); _EL_   return String.format("%s+%s+PORT+%s",splitedString[0],splitedString[1],portNetworkId); _EL_ } _EL_ ', 'private String applyReplacement(final BidiMap replacement,String contents){ _EL_   for (  Object key : replacement.keySet()) { _EL_     String attributeName=(String)key; _EL_     String attributeInitials=(String)replacement.get(key); _EL_     contents=contents.replaceAll(JSONSerialisation.jsonAttributeName(attributeName),JSONSerialisation.jsonAttributeName(attributeInitials)); _EL_   } _EL_   return contents; _EL_ } _EL_ ', 'public static byte[] decode(String encoded){ _EL_   if (encoded == null) { _EL_     return null; _EL_   } _EL_   char[] base64Data=encoded.toCharArray(); _EL_   int len=removeWhiteSpace(base64Data); _EL_   if (len % FOURBYTE != 0) { _EL_     return null; _EL_   } _EL_   int numberQuadruple=(len / FOURBYTE); _EL_   if (numberQuadruple == 0) { _EL_     return new byte[0]; _EL_   } _EL_   byte decodedData[]=null; _EL_   byte b1=0, b2=0, b3=0, b4=0; _EL_   char d1=0, d2=0, d3=0, d4=0; _EL_   int i=0; _EL_   int encodedIndex=0; _EL_   int dataIndex=0; _EL_   decodedData=new byte[(numberQuadruple) * 3]; _EL_   for (; i < numberQuadruple - 1; i++) { _EL_     if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) { _EL_       return null; _EL_     } _EL_     b1=base64Alphabet[d1]; _EL_     b2=base64Alphabet[d2]; _EL_     b3=base64Alphabet[d3]; _EL_     b4=base64Alphabet[d4]; _EL_     decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4); _EL_     decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf)); _EL_     decodedData[encodedIndex++]=(byte)(b3 << 6 | b4); _EL_   } _EL_   if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) { _EL_     return null; _EL_   } _EL_   b1=base64Alphabet[d1]; _EL_   b2=base64Alphabet[d2]; _EL_   d3=base64Data[dataIndex++]; _EL_   d4=base64Data[dataIndex++]; _EL_   if (!isData((d3)) || !isData((d4))) { _EL_     if (isPad(d3) && isPad(d4)) { _EL_       if ((b2 & 0xf) != 0) { _EL_         return null; _EL_       } _EL_       byte[] tmp=new byte[i * 3 + 1]; _EL_       System.arraycopy(decodedData,0,tmp,0,i * 3); _EL_       tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4); _EL_       return tmp; _EL_     } _EL_  else     if (!isPad(d3) && isPad(d4)) { _EL_       b3=base64Alphabet[d3]; _EL_       if ((b3 & 0x3) != 0) { _EL_         return null; _EL_       } _EL_       byte[] tmp=new byte[i * 3 + 2]; _EL_       System.arraycopy(decodedData,0,tmp,0,i * 3); _EL_       tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4); _EL_       tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf)); _EL_       return tmp; _EL_     } _EL_  else { _EL_       return null; _EL_     } _EL_   } _EL_  else { _EL_     b3=base64Alphabet[d3]; _EL_     b4=base64Alphabet[d4]; _EL_     decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4); _EL_     decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf)); _EL_     decodedData[encodedIndex++]=(byte)(b3 << 6 | b4); _EL_   } _EL_   return decodedData; _EL_ } _EL_ ', 'public static ArrayList<Page> pageCreatorButtons(ArrayList<Page> pages,Item manualType){ _EL_   ArrayList<Page> newPages=new ArrayList<>(); _EL_   int pageAmount=pages.size(); _EL_   int times=0; _EL_   while (pageAmount > 0) { _EL_     ArrayList<Page> pagesTemp=new ArrayList<>(); _EL_     pagesTemp.addAll(pages.subList(7 * times,(pageAmount > 7 ? 7 + 7 * times : 7 * times + pageAmount))); _EL_     int height=0; _EL_     ArrayList<ManualWidgetBase> widgets=new ArrayList<>(); _EL_     for (    Page page : pagesTemp) { _EL_       widgets.add(new ButtonWidget(15,10 + height,page)); _EL_       height+=20; _EL_     } _EL_     newPages.add(new Page("index" + times,(ArrayList<ManualWidgetBase>)widgets.clone(),false,manualType)); _EL_     widgets.clear(); _EL_     pagesTemp.clear(); _EL_     pageAmount-=7; _EL_     times++; _EL_   } _EL_   return newPages; _EL_ } _EL_ ', '@Override public void onEvent(ProjectEvent event){ _EL_   if (event.getType() == ProjectEvent.EventType.UPDATED || event.getType() == ProjectEvent.EventType.CREATED) { _EL_     update(event); _EL_   } _EL_ } _EL_ ', 'public ArrayList<MechSummary> generateUnits(int num,UnitFilter filter){ _EL_   ArrayList<MechSummary> retVal=new ArrayList<>(); _EL_   for (int i=0; i < num; i++) { _EL_     MechSummary ms=generateUnit(filter); _EL_     if (ms != null) { _EL_       retVal.add(ms); _EL_     } _EL_   } _EL_   return retVal; _EL_ } _EL_ ', 'Object processCHAR(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException { _EL_   if (getSupportsAVT()) { _EL_     try { _EL_       AVT avt=new AVT(handler,uri,name,rawName,value,owner); _EL_       if ((avt.isSimple()) && (value.length() != 1)) { _EL_         handleError(handler,XSLTErrorResources.INVALID_TCHAR,new Object[]{name,value},null); _EL_         return null; _EL_       } _EL_       return avt; _EL_     } _EL_  catch (    TransformerException te) { _EL_       throw new org.xml.sax.SAXException(te); _EL_     } _EL_   } _EL_  else { _EL_     if (value.length() != 1) { _EL_       handleError(handler,XSLTErrorResources.INVALID_TCHAR,new Object[]{name,value},null); _EL_       return null; _EL_     } _EL_     return new Character(value.charAt(0)); _EL_   } _EL_ } _EL_ ', 'public StringBuffer format(Object pat,StringBuffer result,FieldPosition fpos){ _EL_   String pattern=processPattern((String)pat); _EL_   int lastOffset=0; _EL_   for (int i=0; i <= maxOffset; ++i) { _EL_     int offidx=offsets[i]; _EL_     result.append(pattern.substring(lastOffset,offsets[i])); _EL_     lastOffset=offidx; _EL_     String key=arguments[i]; _EL_     String obj; _EL_     if (key.length() > 0) { _EL_       obj=formatObject(processKey(key)); _EL_     } _EL_  else { _EL_       result.append(this.ldel); _EL_       result.append(this.rdel); _EL_       continue; _EL_     } _EL_     if (obj == null) { _EL_       String lessgreedy=ldel + key; _EL_       int fromright=lessgreedy.lastIndexOf(ldel); _EL_       if (fromright > 0) { _EL_         String newkey=lessgreedy.substring(fromright + ldel.length()); _EL_         String newsubst=formatObject(processKey(newkey)); _EL_         if (newsubst != null) { _EL_           obj=lessgreedy.substring(0,fromright) + newsubst; _EL_         } _EL_       } _EL_     } _EL_     if (obj == null) { _EL_       if (throwex) { _EL_         throw new IllegalArgumentException("ObjectForKey"); _EL_       } _EL_  else { _EL_         obj=ldel + key + rdel; _EL_       } _EL_     } _EL_     result.append(obj); _EL_   } _EL_   result.append(pattern.substring(lastOffset,pattern.length())); _EL_   return result; _EL_ } _EL_ ', 'private Map<String,String> attributesToLowerCase(){ _EL_   Map<String,String> lowerCaseAttributes=new LinkedHashMap<String,String>(); _EL_   for (  String key : attributes.keySet()) { _EL_     lowerCaseAttributes.put(key.toLowerCase(),attributes.get(key)); _EL_   } _EL_   return lowerCaseAttributes; _EL_ } _EL_ ', '@Override public void onAction(){ _EL_   onAction(ActionType.PICK); _EL_ } _EL_ ', 'public void createCalibrationCharts(String colorScheme,SortedMap<Integer,Integer[]> distanceTripMap,SortedMap<Integer,Integer[]> travelTimeTripMap,SortedMap<Integer,Integer[]> numberTripsPerMode,String path,String surveyName) throws IOException { _EL_   path=path.substring(0,path.lastIndexOf("/")) + "/calibration" + path.substring(path.lastIndexOf("/"),path.length()); _EL_   getSimulationData(distanceTripMap,travelTimeTripMap,numberTripsPerMode); _EL_   simulationDistDataset.calculateSharesAndTotals(); _EL_   simulationTTDataset.calculateSharesAndTotals(); _EL_   commonColorScheme=colorScheme; _EL_   createModeShareStackedBarChart(surveyName + " Mode Share per Distance Class",path + fileTripDistanceByModeBenchmark,surveyDistDataset,"Distance [km]","Mode share [%]"); _EL_   createModeShareStackedBarChart("Simulation Mode Share per Distance Class",path + fileTripDistanceByModeSimulation,simulationDistDataset,"Distance [km]","Mode share [%]"); _EL_   createModeShareComparisonChart("Modeshare per Distance Class - " + surveyName + " vs. Simulation",path + fileTripDistanceByModeComparison,simulationDistDataset,surveyDistDataset,"Distance [km]","Bias mode share [%]"); _EL_   createCummulativeModeShareChart(surveyName + " Cumulative Mode Share per Distance Class",path + fileCumulativeTripDistanceByModeBenchmark,surveyDistDataset,"Distance [km]","Cumulative mode share [%]"); _EL_   createCummulativeModeShareChart("Simulation Cumulative Mode Share per Distance Class",path + fileCumulativeTripDistanceByModeSimulation,simulationDistDataset,"Distance [km]","Cumulative mode share [%]"); _EL_   createCummulativeModeShareComparisonChart("Cummulative Modeshare per Distance Class - " + surveyName + " vs. Simulation",path + fileCumulativeTripDistanceByModeComparison,simulationDistDataset,surveyDistDataset,"Distance [km]","Bias cumulative mode share (%)"); _EL_   createModeShareStackedBarChart(surveyName + " Mode Share per Travel Time Class",path + fileTripTTByModeBenchmark,surveyTTDataset,"Travel Time [min]","Mode share [%]"); _EL_   createModeShareStackedBarChart("Simulation Mode Share per Travel Time Class",path + fileTripTTByModeSimulation,simulationTTDataset,"Travel Time [min]","Mode share [%]"); _EL_   createModeShareComparisonChart("Modeshare per Travel Time - " + surveyName + " vs. Simulation",path + fileTripTTByModeComparison,simulationTTDataset,surveyTTDataset,"Travel Time [min]","Bias mode share [%]"); _EL_   createCummulativeModeShareChart(surveyName + " Cumulative Mode Share per Travel Time Class",path + fileCumulativeTripTTByModeBenchmark,surveyTTDataset,"Travel Time [min]","Cumulative mode share [%]"); _EL_   createCummulativeModeShareChart("Simulation Cumulative Mode Share per Travel Time Class",path + fileCumModeshareTTSimulation,simulationTTDataset,"Travel Time [min]","Cumulative mode share [%]"); _EL_   createCummulativeModeShareComparisonChart("Cummulative Modeshare per Travel Time Class - " + surveyName + " vs. Simulation",path + fileCumModeshareTTComparison,simulationTTDataset,surveyTTDataset,"Travel Time [min]","Bias cumulative mode share (%)"); _EL_   createModeShareHistoryChart("Simulation Modeshare",path.substring(0,path.indexOf("ITERS")) + fileModeshareHistory,modeShareHistoryDataset,"Iteration","Mode share [%]",surveyTTDataset); _EL_ } _EL_ ', 'private static boolean intersectsLatEdge(S2Point a,S2Point b,double lat,S1Interval lng){ _EL_   S2Point z=S2Point.normalize(S2.robustCrossProd(a,b)); _EL_   if (z.z < 0) { _EL_     z=S2Point.neg(z); _EL_   } _EL_   S2Point y=S2Point.normalize(S2.robustCrossProd(z,new S2Point(0,0,1))); _EL_   S2Point x=S2Point.crossProd(y,z); _EL_   double sinLat=Math.sin(lat); _EL_   if (Math.abs(sinLat) >= x.z) { _EL_     return false; _EL_   } _EL_   double cosTheta=sinLat / x.z; _EL_   double sinTheta=Math.sqrt(1 - cosTheta * cosTheta); _EL_   double theta=Math.atan2(sinTheta,cosTheta); _EL_   S1Interval abTheta=S1Interval.fromPointPair(Math.atan2(a.dotProd(y),a.dotProd(x)),Math.atan2(b.dotProd(y),b.dotProd(x))); _EL_   if (abTheta.contains(theta)) { _EL_     S2Point isect=S2Point.add(S2Point.mul(x,cosTheta),S2Point.mul(y,sinTheta)); _EL_     if (lng.contains(Math.atan2(isect.y,isect.x))) { _EL_       return true; _EL_     } _EL_   } _EL_   if (abTheta.contains(-theta)) { _EL_     S2Point intersection=S2Point.sub(S2Point.mul(x,cosTheta),S2Point.mul(y,sinTheta)); _EL_     if (lng.contains(Math.atan2(intersection.y,intersection.x))) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public boolean isCancelled(){ _EL_   return mState.get() == STATE_CANCELLED; _EL_ } _EL_ ', 'public ReplicationJob createJobForCopyPartition(long auditLogId,long auditLogEntryCreateTime,HiveObjectSpec spec) throws StateUpdateException { _EL_   Map<String,String> extras=new HashMap<>(); _EL_   extras.put(PersistedJobInfo.AUDIT_LOG_ID_EXTRAS_KEY,Long.toString(auditLogId)); _EL_   extras.put(PersistedJobInfo.AUDIT_LOG_ENTRY_CREATE_TIME_KEY,Long.toString(auditLogEntryCreateTime)); _EL_   List<String> partitionNames=new ArrayList<>(); _EL_   partitionNames.add(spec.getPartitionName()); _EL_   ReplicationOperation replicationOperation=ReplicationOperation.COPY_PARTITION; _EL_   PersistedJobInfo persistedJobInfo=jobInfoStore.resilientCreate(replicationOperation,ReplicationStatus.PENDING,Optional.empty(),srcCluster.getName(),spec,partitionNames,Optional.empty(),Optional.empty(),Optional.empty(),extras); _EL_   ReplicationTask replicationTask=new CopyPartitionTask(conf,destinationObjectFactory,objectConflictHandler,srcCluster,destCluster,spec,Optional.<Path>empty(),Optional.<Path>empty(),directoryCopier,true); _EL_   return new ReplicationJob(conf,replicationTask,onStateChangeHandler,persistedJobInfo); _EL_ } _EL_ ', 'private void parseParameter(String token,String value){ _EL_   if (token != null && value != null) { _EL_     if (token.equalsIgnoreCase(NONCE_TOKEN)) { _EL_       mNonce=value; _EL_       return; _EL_     } _EL_     if (token.equalsIgnoreCase(STALE_TOKEN)) { _EL_       parseStale(value); _EL_       return; _EL_     } _EL_     if (token.equalsIgnoreCase(OPAQUE_TOKEN)) { _EL_       mOpaque=value; _EL_       return; _EL_     } _EL_     if (token.equalsIgnoreCase(QOP_TOKEN)) { _EL_       mQop=value.toLowerCase(); _EL_       return; _EL_     } _EL_     if (token.equalsIgnoreCase(ALGORITHM_TOKEN)) { _EL_       mAlgorithm=value.toLowerCase(); _EL_       return; _EL_     } _EL_   } _EL_ } _EL_ ', 'private ApplicationEnvironment(){ _EL_   try { _EL_     if (System.getProperty(BootstrapProperties.IS_UBERJAR) != null) { _EL_       this.mode=Mode.UBERJAR; _EL_       if (!loadWildFlySwarmApplicationManifestFromClasspath()) { _EL_         loadWildFlySwarmApplicationManifestFromTCCL(); _EL_       } _EL_     } _EL_  else { _EL_       this.mode=Mode.CLASSPATH; _EL_       loadFractionManifestsFromClasspath(); _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ } _EL_ ', 'public static String[] makeStrings(Collection<InetAddress> addrs){ _EL_   String[] result=new String[addrs.size()]; _EL_   int i=0; _EL_   for (  InetAddress addr : addrs) { _EL_     result[i++]=addr.getHostAddress(); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public void removeAttribute(String attrName) throws SMSException { _EL_   Set attribute=(Set)attrSet.get(attrName); _EL_   if (attribute == null) { _EL_     throw (new SMSException(LdapException.newLdapException(ResultCode.ATTRIBUTE_OR_VALUE_EXISTS,getBundleString(IUMSConstants.SMS_ATTR_OR_VAL_EXISTS)),"sms-ATTR_OR_VAL_EXISTS")); _EL_   } _EL_   attrSet.remove(attrName); _EL_   if (modSet == null) { _EL_     modSet=new HashSet(); _EL_   } _EL_   BasicAttribute ba=new BasicAttribute(attrName,attribute); _EL_   for (Iterator items=attribute.iterator(); items.hasNext(); )   ba.add(items.next()); _EL_   modSet.add(new ModificationItem(DirContext.REMOVE_ATTRIBUTE,ba)); _EL_ } _EL_ ', 'private static By byFromLocator(String locator){ _EL_   if (locator.startsWith("//")) { _EL_     return By.xpath(locator); _EL_   } _EL_   if (locator.startsWith("id=")) { _EL_     return By.id(locator.replaceFirst("id=","")); _EL_   } _EL_   if (locator.startsWith("css=")) { _EL_     return By.cssSelector(locator.replaceFirst("css=","")); _EL_   } _EL_   if (locator.startsWith("xpath=")) { _EL_     return By.xpath(locator.replaceFirst("xpath=","")); _EL_   } _EL_   if (locator.startsWith("name=")) { _EL_     return By.name(locator.replaceFirst("name=","")); _EL_   } _EL_   if (locator.startsWith("link=")) { _EL_     return By.linkText(locator.replaceFirst("link=","")); _EL_   } _EL_   if (locator.startsWith("linkpartial=")) { _EL_     return By.partialLinkText(locator.replaceFirst("linkpartial=","")); _EL_   } _EL_   throw new IllegalArgumentException("Locator not supported: " + locator); _EL_ } _EL_ ', 'public void printStackTrace(java.io.PrintWriter pw){ _EL_   if (rootCause != null) { _EL_     String superString=super.toString(); _EL_ synchronized (pw) { _EL_       pw.print(superString + (superString.endsWith(".") ? "" : ".") + "  Root exception is "); _EL_       rootCause.printStackTrace(pw); _EL_     } _EL_   } _EL_  else { _EL_     super.printStackTrace(pw); _EL_   } _EL_ } _EL_ ', 'public static Object invokeCompiledCommand(Class commandClass,Object[] args,Interpreter interpreter,CallStack callstack) throws UtilEvalError { _EL_   Object[] invokeArgs=new Object[args.length + 2]; _EL_   invokeArgs[0]=interpreter; _EL_   invokeArgs[1]=callstack; _EL_   System.arraycopy(args,0,invokeArgs,2,args.length); _EL_   BshClassManager bcm=interpreter.getClassManager(); _EL_   try { _EL_     return Reflect.invokeStaticMethod(bcm,commandClass,"invoke",invokeArgs); _EL_   } _EL_  catch (  InvocationTargetException e) { _EL_     throw new UtilEvalError("Error in compiled command: " + e.getTargetException()); _EL_   } _EL_ catch (  ReflectError e) { _EL_     throw new UtilEvalError("Error invoking compiled command: " + e); _EL_   } _EL_ } _EL_ ', 'public void putAll(Map<? extends K,? extends V> m){ _EL_   for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue()); _EL_ } _EL_ ', 'public Tree<String> extractBestMaxRuleParse1(int start,int end,int state,List<String> sentence){ _EL_   int cState=maxcChild[start][end][state]; _EL_   if (cState == -1) { _EL_     return extractBestMaxRuleParse2(start,end,state,sentence); _EL_   } _EL_  else { _EL_     List<Tree<String>> child=new ArrayList<Tree<String>>(); _EL_     child.add(extractBestMaxRuleParse2(start,end,cState,sentence)); _EL_     String stateStr=(String)tagNumberer.object(state); _EL_     if (stateStr.endsWith("^g"))     stateStr=stateStr.substring(0,stateStr.length() - 2); _EL_     int intermediateNode=grammar.getUnaryIntermediate((short)state,(short)cState); _EL_     if (intermediateNode == 0) { _EL_     } _EL_     if (intermediateNode > 0) { _EL_       List<Tree<String>> restoredChild=new ArrayList<Tree<String>>(); _EL_       String stateStr2=(String)tagNumberer.object(intermediateNode); _EL_       if (stateStr2.endsWith("^g"))       stateStr2=stateStr2.substring(0,stateStr2.length() - 2); _EL_       restoredChild.add(new Tree<String>(stateStr2,child)); _EL_       return new Tree<String>(stateStr,restoredChild); _EL_     } _EL_     return new Tree<String>(stateStr,child); _EL_   } _EL_ } _EL_ ', 'public synchronized int read(byte b[],int off,int len) throws IOException { _EL_   if (len <= 0)   return 0; _EL_   int moreSpace; _EL_ synchronized (lock) { _EL_     if (pos >= present)     pos=present=0; _EL_  else     if (pos >= waterMark) { _EL_       System.arraycopy(buffer,pos,buffer,0,present - pos); _EL_       present-=pos; _EL_       pos=0; _EL_     } _EL_     int freeSpace=buffer.length - present; _EL_     moreSpace=Math.max(freeSpace - requested,0); _EL_   } _EL_   if (moreSpace > 0)   manager.sendRequest(info,moreSpace); _EL_ synchronized (lock) { _EL_     requested+=moreSpace; _EL_     while ((pos >= present) && !disconnected) { _EL_       try { _EL_         lock.wait(); _EL_       } _EL_  catch (      InterruptedException e) { _EL_       } _EL_     } _EL_     if (disconnected && pos >= present)     return -1; _EL_     int available=present - pos; _EL_     if (len < available) { _EL_       System.arraycopy(buffer,pos,b,off,len); _EL_       pos+=len; _EL_       return len; _EL_     } _EL_  else { _EL_       System.arraycopy(buffer,pos,b,off,available); _EL_       pos=present=0; _EL_       return available; _EL_     } _EL_   } _EL_ } _EL_ ', 'public static Set<String> nonMonogamousSamples(Collection<Family> families){ _EL_   final LinkedHashSet<String> ret=new LinkedHashSet<>(); _EL_   final HashSet<String> parents=new HashSet<>(); _EL_   for (  Family f : families) { _EL_     if (!parents.add(f.getFather())) { _EL_       ret.add(f.getFather()); _EL_     } _EL_     if (!parents.add(f.getMother())) { _EL_       ret.add(f.getMother()); _EL_     } _EL_   } _EL_   return ret; _EL_ } _EL_ ', 'public void write(byte[] vector){ _EL_   check(vector.length); _EL_   System.arraycopy(vector,0,buffer,write_pos,vector.length); _EL_   write_pos+=vector.length; _EL_ } _EL_ ', 'public void replaceCreationTemplate(Guid guid,String templateName,AttrSet attrSet) throws ConfigManagerException { _EL_   if (guid == null) { _EL_     guid=new Guid(_rootDN); _EL_   } _EL_   DN dn=DN.valueOf(guid.getDn()); _EL_   String org=""; _EL_   List<RDN> rdns=new ArrayList<>(); _EL_   for (  RDN rdn : dn) { _EL_     rdns.add(0,rdn); _EL_   } _EL_   for (  RDN rdn : rdns) { _EL_     org=org + "/" + LDAPUtils.rdnValue(rdn); _EL_   } _EL_   String service=CREATIONPATH + "/" + templateName; _EL_   Map map=convertToMap(attrSet); _EL_   try { _EL_     replaceServiceAttributes(org,service,map); _EL_   } _EL_  catch (  SMSException e) { _EL_     String args[]=new String[1]; _EL_     args[0]=e.toString(); _EL_     throw new ConfigManagerException(i18n.getString(IUMSConstants.ERROR_CM,args)); _EL_   } _EL_ catch (  SSOException se) { _EL_     String args[]=new String[1]; _EL_     args[0]=se.toString(); _EL_     throw new ConfigManagerException(i18n.getString(IUMSConstants.ERROR_CM,args)); _EL_   } _EL_ } _EL_ ', 'public static String queueNameFromDBName(String dbName){ _EL_   String[] tokens=dbName.split("_",3); _EL_   return tokens[2]; _EL_ } _EL_ ', 'public String UseThis(int type,String id,String context){ _EL_   int i=FindSym(type,id,context); _EL_   if (i == symtab.size())   return id; _EL_  else   return ((SymTabEntry)symtab.elementAt(i)).useThis; _EL_ } _EL_ ', 'public void run(){ _EL_   Log.d(LOG,"run(): sampleRate=" + sampleRate + ", channels="+ channels+ ", bufferSizeInBytes="+ bufferSizeInBytes+ " ("+ bufferSizeInMs+ " ms)"); _EL_   isPlaying=false; _EL_   AudioTrack atrack=null; _EL_   try { _EL_     atrack=new AudioTrack(AudioManager.STREAM_MUSIC,sampleRate,channels == 1 ? AudioFormat.CHANNEL_CONFIGURATION_MONO : AudioFormat.CHANNEL_CONFIGURATION_STEREO,AudioFormat.ENCODING_PCM_16BIT,bufferSizeInBytes,AudioTrack.MODE_STREAM); _EL_     atrack.setPlaybackPositionUpdateListener(this); _EL_     atrack.setPositionNotificationPeriod(msToSamples(200,sampleRate,channels)); _EL_     if (playerCallback != null)     playerCallback.playerAudioTrackCreated(atrack); _EL_     this.audioTrack=atrack; _EL_   } _EL_  catch (  Throwable t) { _EL_     Log.e(LOG,"Cannot create AudioTrack: " + t); _EL_     stop(); _EL_     if (playerCallback != null)     playerCallback.playerException(t); _EL_   } _EL_   while (!stopped) { _EL_     int ln=acquireSamples(); _EL_     if (stopped || ln == 0) { _EL_       releaseSamples(); _EL_       break; _EL_     } _EL_     int writtenNow=0; _EL_     do { _EL_       if (writtenNow != 0) { _EL_         Log.d(LOG,"too fast for playback, sleeping..."); _EL_         try { _EL_           Thread.sleep(50); _EL_         } _EL_  catch (        InterruptedException e) { _EL_         } _EL_       } _EL_       int written=atrack.write(lsamples,writtenNow,ln); _EL_       if (written < 0) { _EL_         Log.e(LOG,"error in playback feed: " + written); _EL_         stopped=true; _EL_         break; _EL_       } _EL_       writtenTotal+=written; _EL_       int buffered=writtenTotal - atrack.getPlaybackHeadPosition() * channels; _EL_       if (!stopped && !isPlaying) { _EL_         if (buffered * 2 >= bufferSizeInBytes) { _EL_           Log.d(LOG,"start of AudioTrack - buffered " + buffered + " samples"); _EL_           atrack.play(); _EL_           isPlaying=true; _EL_         } _EL_  else { _EL_           Log.d(LOG,"start buffer not filled enough - AudioTrack not started yet"); _EL_         } _EL_       } _EL_       writtenNow+=written; _EL_       ln-=written; _EL_     } _EL_  while (ln > 0 && !stopped); _EL_     releaseSamples(); _EL_   } _EL_   if (!stopped && stoppedByEOF)   waitForLastTone(); _EL_   if (isPlaying)   atrack.pause(); _EL_   atrack.flush(); _EL_   atrack.release(); _EL_   stopped=true; _EL_   Log.d(LOG,"run() stopped."); _EL_ } _EL_ ', 'public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){ _EL_   ContentValues values=new ContentValues(7); _EL_   values.put(ADDRESS,address); _EL_   if (date != null) { _EL_     values.put(DATE,date); _EL_   } _EL_   values.put(READ,read ? Integer.valueOf(1) : Integer.valueOf(0)); _EL_   values.put(SUBJECT,subject); _EL_   values.put(BODY,body); _EL_   if (deliveryReport) { _EL_     values.put(STATUS,STATUS_PENDING); _EL_   } _EL_   if (threadId != -1L) { _EL_     values.put(THREAD_ID,threadId); _EL_   } _EL_   return resolver.insert(uri,values); _EL_ } _EL_ ', 'public Builder measurementMappings(Map<String,String> measurementMappings){ _EL_   Map<String,Pattern> mappingsByPattern=new HashMap<String,Pattern>(); _EL_   for (  Map.Entry<String,String> entry : measurementMappings.entrySet()) { _EL_     try { _EL_       final Pattern pattern=Pattern.compile(entry.getValue()); _EL_       mappingsByPattern.put(entry.getKey(),pattern); _EL_     } _EL_  catch (    PatternSyntaxException e) { _EL_       throw new RuntimeException("Could not compile regex: " + entry.getValue(),e); _EL_     } _EL_   } _EL_   this.measurementMappings=mappingsByPattern; _EL_   return this; _EL_ } _EL_ ', 'public static ConnectivityGrid ConnectivityGridFactory(int key,double maxRange){ _EL_   if (gridobjects.containsKey((Integer)key)) { _EL_     return (ConnectivityGrid)gridobjects.get((Integer)key); _EL_   } _EL_  else { _EL_     ConnectivityGrid newgrid=new ConnectivityGrid((int)Math.ceil(maxRange * cellSizeMultiplier)); _EL_     gridobjects.put((Integer)key,newgrid); _EL_     return newgrid; _EL_   } _EL_ } _EL_ ', 'public void addNodesInDocOrder(DTMIterator iterator,XPathContext support){ _EL_   if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null)); _EL_   int node; _EL_   while (DTM.NULL != (node=iterator.nextNode())) { _EL_     addNodeInDocOrder(node,support); _EL_   } _EL_ } _EL_ ', 'public void handleRequest(RequestContext rc) throws CLIException { _EL_   super.handleRequest(rc); _EL_   ldapLogin(); _EL_   SSOToken adminSSOToken=getAdminSSOToken(); _EL_   IOutput outputWriter=getOutputWriter(); _EL_   String realm=getStringOptionValue(IArgument.REALM_NAME); _EL_   String patternType=getStringOptionValue(IArgument.AGENT_TYPE); _EL_   String filter=getStringOptionValue(IArgument.FILTER); _EL_   if (patternType == null) { _EL_     patternType=""; _EL_   } _EL_   if ((filter == null) || (filter.length() == 0)) { _EL_     filter="*"; _EL_   } _EL_   String[] params={realm,patternType,filter}; _EL_   writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_AGENTS",params); _EL_   try { _EL_     AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm); _EL_     IdSearchResults isr=amir.searchIdentities(IdType.AGENTONLY,filter,new IdSearchControl()); _EL_     Set results=isr.getSearchResults(); _EL_     if ((results != null) && !results.isEmpty()) { _EL_       for (Iterator i=results.iterator(); i.hasNext(); ) { _EL_         AMIdentity amid=(AMIdentity)i.next(); _EL_         if (!matchType(amid,patternType)) { _EL_           i.remove(); _EL_         } _EL_       } _EL_     } _EL_     if ((results != null) && !results.isEmpty()) { _EL_       for (Iterator i=results.iterator(); i.hasNext(); ) { _EL_         AMIdentity amid=(AMIdentity)i.next(); _EL_         Object[] args={amid.getName(),amid.getUniversalId()}; _EL_         outputWriter.printlnMessage(MessageFormat.format(getResourceString("format-search-agent-results"),args)); _EL_       } _EL_     } _EL_  else { _EL_       outputWriter.printlnMessage(getResourceString("search-agent-no-entries")); _EL_     } _EL_     writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_LIST_AGENTS",params); _EL_   } _EL_  catch (  IdRepoException e) { _EL_     String[] args={realm,patternType,filter,e.getMessage()}; _EL_     debugError("ListAgents.handleRequest",e); _EL_     writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_AGENTS",args); _EL_     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED); _EL_   } _EL_ catch (  SSOException e) { _EL_     String[] args={realm,patternType,filter,e.getMessage()}; _EL_     debugError("ListAgents.handleRequest",e); _EL_     writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_AGENTS",args); _EL_     throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED); _EL_   } _EL_ } _EL_ ', 'public static void slideInFromTopAnimator(@NonNull List<Animator> animators,@NonNull View view,RecyclerView recyclerView){ _EL_   alphaAnimator(animators,view,0f); _EL_   animators.add(ObjectAnimator.ofFloat(view,"translationY",-recyclerView.getMeasuredHeight() >> 1,0)); _EL_   if (FlexibleAdapter.DEBUG)   Log.v(TAG,"Added TOP Animator"); _EL_ } _EL_ ', 'protected void closeCallbacksExceptListener(){ _EL_   closeCacheCallback(getCacheLoader()); _EL_   closeCacheCallback(getCacheWriter()); _EL_   closeCacheCallback(getEvictionController()); _EL_ } _EL_ ', 'public synchronized boolean removeElement(Object object){ _EL_   int index; _EL_   if ((index=indexOf(object,0)) == -1) { _EL_     return false; _EL_   } _EL_   removeElementAt(index); _EL_   return true; _EL_ } _EL_ ', 'public boolean isPronoun(){ _EL_   return typeString.contains(SUFFIX_PRONOUN); _EL_ } _EL_ ', 'public static boolean verify(byte[] data,byte[] signature,byte[] pub){ _EL_   Preconditions.checkArgument(data.length == 32 && signature.length <= 520 && pub.length <= 520); _EL_   ByteBuffer byteBuff=nativeECDSABuffer.get(); _EL_   if (byteBuff == null) { _EL_     byteBuff=ByteBuffer.allocateDirect(32 + 8 + 520+ 520); _EL_     byteBuff.order(ByteOrder.nativeOrder()); _EL_     nativeECDSABuffer.set(byteBuff); _EL_   } _EL_   byteBuff.rewind(); _EL_   byteBuff.put(data); _EL_   byteBuff.putInt(signature.length); _EL_   byteBuff.putInt(pub.length); _EL_   byteBuff.put(signature); _EL_   byteBuff.put(pub); _EL_   return secp256k1_ecdsa_verify(byteBuff) == 1; _EL_ } _EL_ ', 'protected void transferFromFile(File idFile) throws IOException { _EL_   try (BufferedReader br=new BufferedReader(new FileReader(idFile))){ _EL_     String line; _EL_     while ((line=br.readLine()) != null) { _EL_       line=line.trim(); _EL_       if (line.length() > 0) { _EL_         transfer(line); _EL_       } _EL_     } _EL_   } _EL_  } _EL_ ', 'public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){ _EL_   final int deltaValue, currentScrollValue, scrollValue; _EL_ switch (view.getPullToRefreshScrollDirection()) { _EL_ case HORIZONTAL: _EL_     deltaValue=deltaX; _EL_   scrollValue=scrollX; _EL_ currentScrollValue=view.getScrollX(); _EL_ break; _EL_ case VERTICAL: _EL_ default : _EL_ deltaValue=deltaY; _EL_ scrollValue=scrollY; _EL_ currentScrollValue=view.getScrollY(); _EL_ break; _EL_ } _EL_ if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) { _EL_ final Mode mode=view.getMode(); _EL_ if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) { _EL_ final int newScrollValue=(deltaValue + scrollValue); _EL_ if (PullToRefreshBase.DEBUG) { _EL_ Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue); _EL_ } _EL_ if (newScrollValue < (0 - fuzzyThreshold)) { _EL_ if (mode.showHeaderLoadingLayout()) { _EL_ if (currentScrollValue == 0) { _EL_ view.setState(State.OVERSCROLLING); _EL_ } _EL_ view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue))); _EL_ } _EL_ } _EL_  else if (newScrollValue > (scrollRange + fuzzyThreshold)) { _EL_ if (mode.showFooterLoadingLayout()) { _EL_ if (currentScrollValue == 0) { _EL_ view.setState(State.OVERSCROLLING); _EL_ } _EL_ view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange))); _EL_ } _EL_ } _EL_  else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) { _EL_ view.setState(State.RESET); _EL_ } _EL_ } _EL_  else if (isTouchEvent && State.OVERSCROLLING == view.getState()) { _EL_ view.setState(State.RESET); _EL_ } _EL_ } _EL_ } _EL_ ', 'public NavMouseMode(boolean shouldConsumeEvents){ _EL_   super(modeID,shouldConsumeEvents); _EL_   setModeCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR)); _EL_   rectAttributes.setLinePaint(Color.GRAY); _EL_   rectAttributes.setMattingPaint(Color.LIGHT_GRAY); _EL_   rectAttributes.setMatted(true); _EL_ } _EL_ ', 'public void hspan(double start,double end,Paint color,String legend){ _EL_   LegendText legendText=new LegendText(color,legend); _EL_   comments.add(legendText); _EL_   plotElements.add(new HSpan(start,end,color,legendText)); _EL_ } _EL_ ', 'public static boolean isValidNmtoken(String nmtoken){ _EL_   if (nmtoken.length() == 0)   return false; _EL_   for (int i=0; i < nmtoken.length(); i++) { _EL_     char ch=nmtoken.charAt(i); _EL_     if (!isName(ch)) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private static double parseDoubleValue(String parseString,String openTag,String closeTag,DataTypeValidationException exception) throws DataTypeValidationException { _EL_   String tagValue; _EL_   tagValue=parseStringValue(parseString,openTag,closeTag,exception); _EL_   double doubleValue; _EL_   try { _EL_     doubleValue=Double.parseDouble(tagValue); _EL_   } _EL_  catch (  NumberFormatException e) { _EL_     throw e; _EL_   } _EL_   return doubleValue; _EL_ } _EL_ ', 'public void clearAll(){ _EL_   final List<EncodedImage> old; _EL_ synchronized (this) { _EL_     old=new ArrayList<>(mMap.values()); _EL_     mMap.clear(); _EL_   } _EL_   for (int i=0; i < old.size(); i++) { _EL_     EncodedImage encodedImage=old.get(i); _EL_     if (encodedImage != null) { _EL_       encodedImage.close(); _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public void writeExternal(ObjectOutput out) throws IOException { _EL_   super.writeExternal(out); _EL_   out.writeDouble(knnDistance); _EL_ } _EL_ ', '@Override public void clearRouteSensors(){ _EL_   _controlSensorList=new ArrayList<>(); _EL_ } _EL_ ', 'public JValueSlider(String title,int min,int max,int value){ _EL_   this(title,new Integer(min),new Integer(max),new Integer(value)); _EL_   m_smin=min; _EL_   m_srange=max - min; _EL_   m_slider.setMinimum(min); _EL_   m_slider.setMaximum(max); _EL_   setValue(new Integer(value)); _EL_ } _EL_ ', 'public RemoteServiceDescriptor(String baseUrl,HttpJsonRequestFactory requestFactory) throws IllegalArgumentException { _EL_   this.baseUrl=baseUrl; _EL_   this.requestFactory=requestFactory; _EL_   try { _EL_     final URL baseUrlURL=new URL(baseUrl); _EL_     final String protocol=baseUrlURL.getProtocol(); _EL_     if (!(protocol.equals("http") || protocol.equals("https"))) { _EL_       throw new IllegalArgumentException(String.format("Invalid URL: %s",baseUrl)); _EL_     } _EL_   } _EL_  catch (  MalformedURLException e) { _EL_     throw new IllegalArgumentException(String.format("Invalid URL: %s",baseUrl)); _EL_   } _EL_ } _EL_ ', 'public ByteMatrix encode(String contents,int width,int height,Map<EncodeHintType,Object> hints) throws WriterException { _EL_   if (contents == null || contents.length() == 0) { _EL_     throw new IllegalArgumentException("Found empty contents"); _EL_   } _EL_   if (width < 0 || height < 0) { _EL_     throw new IllegalArgumentException("Requested dimensions are too small: " + width + \'x\'+ height); _EL_   } _EL_   ErrorCorrectionLevel errorCorrectionLevel=ErrorCorrectionLevel.L; _EL_   if (hints != null) { _EL_     ErrorCorrectionLevel requestedECLevel=(ErrorCorrectionLevel)hints.get(EncodeHintType.ERROR_CORRECTION); _EL_     if (requestedECLevel != null) { _EL_       errorCorrectionLevel=requestedECLevel; _EL_     } _EL_   } _EL_   QRCode code=new QRCode(); _EL_   Encoder.encode(contents,errorCorrectionLevel,hints,code); _EL_   return renderResult(code,width,height); _EL_ } _EL_ ', 'private HashMap addAttr(SvcReg reg,EntryClass eclass,int fldidx,Object value){ _EL_   HashMap[] attrMaps=serviceByAttr.get(eclass); _EL_   if (attrMaps == null) { _EL_     attrMaps=new HashMap[eclass.getNumFields()]; _EL_     serviceByAttr.put(eclass,attrMaps); _EL_   } _EL_   HashMap map=attrMaps[fldidx]; _EL_   if (map == null) { _EL_     map=new HashMap(11); _EL_     attrMaps[fldidx]=map; _EL_   } _EL_   ArrayList regs=(ArrayList)map.get(value); _EL_   if (regs == null) { _EL_     regs=new ArrayList(3); _EL_     map.put(value,regs); _EL_   } _EL_  else   if (regs.contains(reg))   return map; _EL_   regs.add(reg); _EL_   return map; _EL_ } _EL_ ', '@SlashedClassName @SuppressFBWarnings("TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK") public static String toSlashedClassName(@SlashedClassName(when=When.UNKNOWN) String className){ _EL_   if (className.indexOf(\'.\') >= 0) { _EL_     return DescriptorFactory.canonicalizeString(className.replace(\'.\',\'/\')); _EL_   } _EL_   return className; _EL_ } _EL_ ', 'public static double P_AveragePrecision(int y[],int r[]){ _EL_   double avg_prec=0; _EL_   int L=y.length; _EL_   List<Integer> ones=new ArrayList<Integer>(); _EL_   for (int j=0; j < L; j++) { _EL_     if (y[j] == 1) { _EL_       ones.add(j); _EL_     } _EL_   } _EL_   if (ones.size() <= 0)   return 1.0; _EL_   for (  int j : ones) { _EL_     double s=0.0; _EL_     for (    int k : ones) { _EL_       if (r[k] <= r[j]) { _EL_         s++; _EL_       } _EL_     } _EL_     avg_prec+=(s / (1. + r[j])); _EL_   } _EL_   avg_prec/=ones.size(); _EL_   return avg_prec; _EL_ } _EL_ ', 'public void resetPolicy(){ _EL_   mPreferences.putString(PREF_LAST_RESPONSE,Integer.toString(Policy.RETRY)); _EL_   setRetryUntil(DEFAULT_RETRY_UNTIL); _EL_   setMaxRetries(DEFAULT_MAX_RETRIES); _EL_   setRetryCount(Long.parseLong(DEFAULT_RETRY_COUNT)); _EL_   setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP); _EL_   mPreferences.commit(); _EL_ } _EL_ ', 'public static String[] split(String original,String separator){ _EL_   Vector nodes=new Vector(); _EL_   int index=original.indexOf(separator); _EL_   while (index >= 0) { _EL_     nodes.addElement(original.substring(0,index)); _EL_     original=original.substring(index + separator.length()); _EL_     index=original.indexOf(separator); _EL_   } _EL_   nodes.addElement(original); _EL_   String[] ret=new String[nodes.size()]; _EL_   for (int i=0; i < nodes.size(); i++) { _EL_     ret[i]=(String)nodes.elementAt(i); _EL_   } _EL_   return ret; _EL_ } _EL_ ', 'public int checkBookiesUp(int count,int timeout) throws Exception { _EL_   ZooKeeper zkc=connectZooKeeper(zkHost,zkPort,zkTimeoutSec); _EL_   try { _EL_     int mostRecentSize=0; _EL_     for (int i=0; i < timeout; i++) { _EL_       try { _EL_         List<String> children=zkc.getChildren("/ledgers/available",false); _EL_         children.remove("readonly"); _EL_         mostRecentSize=children.size(); _EL_         if ((mostRecentSize > count) || LOG.isDebugEnabled()) { _EL_           LOG.info("Found " + mostRecentSize + " bookies up, "+ "waiting for "+ count); _EL_           if ((mostRecentSize > count) || LOG.isTraceEnabled()) { _EL_             for (            String child : children) { _EL_               LOG.info(" server: " + child); _EL_             } _EL_           } _EL_         } _EL_         if (mostRecentSize == count) { _EL_           break; _EL_         } _EL_       } _EL_  catch (      KeeperException e) { _EL_       } _EL_       Thread.sleep(1000); _EL_     } _EL_     return mostRecentSize; _EL_   } _EL_   finally { _EL_     zkc.close(); _EL_   } _EL_ } _EL_ ', '@Override public List<WorkOrder> searchWOForBilling(final Map<String,Object> criteriaMap){ _EL_   logger.debug("-------------------------Inside searchWOForBilling-----------------------"); _EL_   final List<WorkOrder> filteredList=new ArrayList<WorkOrder>(); _EL_   criteriaMap.put(ACTION_FLAG,"searchWOForBilling"); _EL_   for (  final WorkOrder workorder : searchWO(criteriaMap))   if (!isWOValidforBill(workorder.getId()))   filteredList.add(workorder); _EL_   return filteredList; _EL_ } _EL_ ', 'protected boolean matchesFilter(final String input,final String[] filter){ _EL_   for (  final String match : filter) { _EL_     if (!input.contains(match))     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static String expandHiddenDir(final String filename){ _EL_   final int macro=filename.indexOf(hiddenDirMacro,0); _EL_   String expandedFilter; _EL_   if (macro == -1) { _EL_     return filename; _EL_   } _EL_   if (Cfg.DEBUG) { _EL_     Check.log(TAG + " expanding macro"); _EL_   } _EL_   expandedFilter=filename.replaceFirst("\\\\$dir\\\\$",StringUtils.chomp(Path.hidden(),"/")); _EL_   if (Cfg.DEBUG) { _EL_     Check.log(TAG + " expandedFilter: " + expandedFilter); _EL_   } _EL_   return expandedFilter; _EL_ } _EL_ ', 'public static void copyToClipboard(Transferable t){ _EL_   ClipboardHelper.copyToClipboard(t); _EL_ } _EL_ ', 'public static double[] lsf2lpc(double[] lsf){ _EL_   MathUtils.quickSort(lsf); _EL_   int P=lsf.length; _EL_   int half_order=P / 2; _EL_   int i, j; _EL_   double xf, xx; _EL_   double[] a=new double[P / 2 + 1]; _EL_   double[] a1=new double[P / 2 + 1]; _EL_   double[] a2=new double[P / 2 + 1]; _EL_   double[] b=new double[P / 2 + 1]; _EL_   double[] b1=new double[P / 2 + 1]; _EL_   double[] b2=new double[P / 2 + 1]; _EL_   double[] p=new double[P / 2]; _EL_   double[] q=new double[P / 2]; _EL_   double[] oneMinusA=new double[P + 1]; _EL_   oneMinusA[0]=1.; _EL_   if ((lsf[0] <= 0.0) || (lsf[0] >= 0.5)) { _EL_     throw new IllegalArgumentException("LSFs out of bounds; lsf[0] = " + lsf[0]); _EL_   } _EL_   for (i=1; i < P; i++) { _EL_     if (lsf[i] <= lsf[i - 1])     throw new IllegalArgumentException("nonmonotonic LSFs"); _EL_     if ((lsf[i] <= 0.0) || (lsf[i] >= 0.5))     throw new IllegalArgumentException("LSFs out of bounds; lsf[" + i + "] = "+ lsf[i]); _EL_   } _EL_   for (i=0; i < half_order; i++) { _EL_     p[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i]); _EL_     q[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i + 1]); _EL_   } _EL_   xf=0.0; _EL_   for (i=0; i <= P; i++) { _EL_     if (i == 0)     xx=1.0; _EL_  else     xx=0.0; _EL_     a[0]=xx + xf; _EL_     b[0]=xx - xf; _EL_     xf=xx; _EL_     for (j=0; j < half_order; j++) { _EL_       a[j + 1]=a[j] + p[j] * a1[j] + a2[j]; _EL_       b[j + 1]=b[j] + q[j] * b1[j] + b2[j]; _EL_       a2[j]=a1[j]; _EL_       a1[j]=a[j]; _EL_       b2[j]=b1[j]; _EL_       b1[j]=b[j]; _EL_     } _EL_     if (i > 0)     oneMinusA[i]=0.5 * (a[half_order] + b[half_order]); _EL_   } _EL_   return oneMinusA; _EL_ } _EL_ ', 'public String encode(final String pString,final String charset) throws EncoderException { _EL_   if (pString == null) { _EL_     return null; _EL_   } _EL_   try { _EL_     return encodeText(pString,charset); _EL_   } _EL_  catch (  UnsupportedEncodingException e) { _EL_     throw new EncoderException(e.getMessage()); _EL_   } _EL_ } _EL_ ', 'public boolean incrementReceived(){ _EL_   Long diff=System.currentTimeMillis() - startTime; _EL_   if (diff >= 1000) { _EL_     packetsPerSecond=intervalPackets; _EL_     startTime=System.currentTimeMillis(); _EL_     intervalPackets=1; _EL_     return true; _EL_   } _EL_  else { _EL_     intervalPackets++; _EL_   } _EL_   this.receivedPackets++; _EL_   return false; _EL_ } _EL_ ', 'public static BigDecimal parseBigDecimalForEntity(String bigDecimalString) throws NumberFormatException { _EL_   if (bigDecimalString == null) { _EL_     return null; _EL_   } _EL_   bigDecimalString=bigDecimalString.trim(); _EL_   bigDecimalString=bigDecimalString.replaceAll(",",""); _EL_   if (bigDecimalString.length() < 1) { _EL_     return null; _EL_   } _EL_   return new BigDecimal(bigDecimalString); _EL_ } _EL_ ', 'private boolean loadUnpackedUMD(String filename) throws IOException, GeneralJpcspException { _EL_   if (doUmdBuffering) { _EL_     return false; _EL_   } _EL_   File file=new File(filename); _EL_   if (file.exists()) { _EL_     RandomAccessFile raf=new RandomAccessFile(file,"r"); _EL_     FileChannel roChannel=raf.getChannel(); _EL_     ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size()); _EL_     emulator.load("disc0:/PSP_GAME/SYSDIR/EBOOT.BIN",readbuffer); _EL_     raf.close(); _EL_     log.info("Using unpacked UMD EBOOT.BIN image"); _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public CustomEditor(){ _EL_   setLayout(new BorderLayout()); _EL_   add(m_Label,BorderLayout.CENTER); _EL_   m_DeleteBut.addActionListener(m_InnerActionListener); _EL_   m_EditBut.addActionListener(m_InnerActionListener); _EL_   m_UpBut.addActionListener(m_InnerActionListener); _EL_   m_DownBut.addActionListener(m_InnerActionListener); _EL_   m_AddBut.addActionListener(m_InnerActionListener); _EL_   m_ElementList.addListSelectionListener(m_InnerSelectionListener); _EL_   m_ElementList.addMouseListener(m_InnerMouseListener); _EL_   m_AddBut.setToolTipText("Add the current item to the list"); _EL_   m_DeleteBut.setToolTipText("Delete the selected list item"); _EL_   m_EditBut.setToolTipText("Edit the selected list item"); _EL_   m_UpBut.setToolTipText("Move the selected item(s) one up"); _EL_   m_DownBut.setToolTipText("Move the selected item(s) one down"); _EL_ } _EL_ ', 'void addXMLElementAfterTokenIndex(int lastTokenIndex,XMLElement element,boolean addAfterNewLine) throws Exception { _EL_   addXMLElementAfterTokenIndex(lastTokenIndex,element,addAfterNewLine,true); _EL_ } _EL_ ', 'public String substring(String subject,int start,int stop){ _EL_   if (stop == -1 || stop >= subject.length()) { _EL_     return subject.substring(start); _EL_   } _EL_   return subject.substring(start,stop); _EL_ } _EL_ ', '@Deprecated public boolean isValid(String regex){ _EL_   if (regex == null) { _EL_     return false; _EL_   } _EL_   Pattern pattern=Pattern.compile(regex); _EL_   Matcher matcher=pattern.matcher(getText()); _EL_   return matcher.matches(); _EL_ } _EL_ ', 'public void applyCamera(GL2 gl){ _EL_   gl.glMatrixMode(GL2.GL_PROJECTION); _EL_   gl.glLoadIdentity(); _EL_   glu.gluPerspective(45f,width / (float)height,0.f,10.f); _EL_   eye[0]=(float)Math.sin(theta) * 2.f; _EL_   eye[1]=.5f; _EL_   eye[2]=(float)Math.cos(theta) * 2.f; _EL_   glu.gluLookAt(eye[0],eye[1],eye[2],.0f,.0f,0.f,0.f,1.f,0.f); _EL_   gl.glMatrixMode(GL2.GL_MODELVIEW); _EL_   gl.glLoadIdentity(); _EL_   gl.glViewport(0,0,width,height); _EL_ } _EL_ ', '@Override public synchronized Object[] toArray(){ _EL_   Object[] result=new Object[elementCount]; _EL_   System.arraycopy(elementData,0,result,0,elementCount); _EL_   return result; _EL_ } _EL_ ', 'public static String right(String s,int width,char fillChar){ _EL_   if (s.length() >= width) { _EL_     return s; _EL_   } _EL_   StringBuffer sb=new StringBuffer(width); _EL_   for (int i=width - s.length(); --i >= 0; ) { _EL_     sb.append(fillChar); _EL_   } _EL_   sb.append(s); _EL_   return sb.toString(); _EL_ } _EL_ ', 'public boolean next() throws GenericDataSourceException { _EL_   try { _EL_     return _rs.next(); _EL_   } _EL_  catch (  SQLException sqle) { _EL_     throw new GenericDataSourceException("SQL Exception while executing the following:" + _sql,sqle); _EL_   } _EL_ } _EL_ ', 'protected synchronized void notifyVersion(SprogVersion v){ _EL_   ver=v; _EL_   for (  SprogVersionListener listener : getCopyOfListeners()) { _EL_     try { _EL_       listener.notifyVersion(ver); _EL_       versionListeners.remove(listener); _EL_     } _EL_  catch (    Exception e) { _EL_       log.warn("notify: During dispatch to " + listener + "\\nException "+ e); _EL_     } _EL_   } _EL_ } _EL_ ', 'public Map<String,Map<String,String>> list(String serviceName){ _EL_   Map<String,Map<String,String>> results=new HashMap<String,Map<String,String>>(); _EL_   ServiceInfo[] infos=jmdns.list("_" + serviceName + "._tcp.local."); _EL_   for (  ServiceInfo info : infos) { _EL_     _log.info("ServiceInfo:{}",info); _EL_     final String[] hostAddrs=info.getHostAddresses(); _EL_     final StringBuffer buf=new StringBuffer(); _EL_     for (    String hostAddr : hostAddrs) { _EL_       buf.append(hostAddr); _EL_       buf.append(\';\'); _EL_     } _EL_     final String key=buf.toString(); _EL_     _log.info("\\tkey:{}",key); _EL_     final Map<String,String> values=new HashMap<String,String>(); _EL_     for (Enumeration<String> e=info.getPropertyNames(); e.hasMoreElements(); ) { _EL_       final String prop=e.nextElement(); _EL_       final String value=new String(info.getPropertyBytes(prop)); _EL_       _log.info("\\tprop:{}, value:{}",prop,value); _EL_       values.put(prop,value); _EL_     } _EL_     if (values.isEmpty()) { _EL_       _log.warn("values are empty for key: {}",key); _EL_     } _EL_     results.put(key,values.isEmpty() ? null : values); _EL_   } _EL_   return results; _EL_ } _EL_ ', 'private int moveComponents(Container target,int x,int y,int width,int height,int rowStart,int rowEnd,boolean ltr,boolean useBaseline,int[] ascent,int[] descent){ _EL_ switch (newAlign) { _EL_ case LEFT: _EL_     x+=ltr ? 0 : width; _EL_   break; _EL_ case CENTER: _EL_ x+=width / 2; _EL_ break; _EL_ case RIGHT: _EL_ x+=ltr ? width : 0; _EL_ break; _EL_ case LEADING: _EL_ break; _EL_ case TRAILING: _EL_ x+=width; _EL_ break; _EL_ } _EL_ int maxAscent=0; _EL_ int nonbaselineHeight=0; _EL_ int baselineOffset=0; _EL_ if (useBaseline) { _EL_ int maxDescent=0; _EL_ for (int i=rowStart; i < rowEnd; i++) { _EL_ Component m=target.getComponent(i); _EL_ if (m.visible) { _EL_ if (ascent[i] >= 0) { _EL_ maxAscent=Math.max(maxAscent,ascent[i]); _EL_ maxDescent=Math.max(maxDescent,descent[i]); _EL_ } _EL_  else { _EL_ nonbaselineHeight=Math.max(m.getHeight(),nonbaselineHeight); _EL_ } _EL_ } _EL_ } _EL_ height=Math.max(maxAscent + maxDescent,nonbaselineHeight); _EL_ baselineOffset=(height - maxAscent - maxDescent) / 2; _EL_ } _EL_ for (int i=rowStart; i < rowEnd; i++) { _EL_ Component m=target.getComponent(i); _EL_ if (m.isVisible()) { _EL_ int cy; _EL_ if (useBaseline && ascent[i] >= 0) { _EL_ cy=y + baselineOffset + maxAscent - ascent[i]; _EL_ } _EL_  else { _EL_ cy=y + (height - m.height) / 2; _EL_ } _EL_ if (ltr) { _EL_ m.setLocation(x,cy); _EL_ } _EL_  else { _EL_ m.setLocation(target.width - x - m.width,cy); _EL_ } _EL_ x+=m.width + hgap; _EL_ } _EL_ } _EL_ return height; _EL_ } _EL_ ', 'public void add(final SAMRecord read,final int position){ _EL_   recordAndOffsets.add(new RecordAndOffset(read,position)); _EL_ } _EL_ ', 'protected void run_ThreadSizeLoop() throws Exception { _EL_   for (int i=25; i <= 100; i+=25) { _EL_     setNumWorkers(i); _EL_     try { _EL_       Thread.sleep(60 * 1000); _EL_     } _EL_  catch (    InterruptedException e) { _EL_     } _EL_   } _EL_ } _EL_ ', 'protected boolean read(){ _EL_   if (!nReuseHeader) { _EL_     Debug.message("iso8211","DDFRecord reusing header, calling readHeader()"); _EL_     return readHeader(); _EL_   } _EL_   byte[] tempData=new byte[nDataSize - nFieldOffset]; _EL_   int nReadBytes=poModule.read(tempData,0,tempData.length); _EL_   System.arraycopy(pachData,nFieldOffset,tempData,0,tempData.length); _EL_   if (nReadBytes != (int)(nDataSize - nFieldOffset) && nReadBytes == -1) { _EL_     return false; _EL_   } _EL_  else   if (nReadBytes != (int)(nDataSize - nFieldOffset)) { _EL_     Debug.error("DDFRecord: Data record is short on DDF file."); _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public void removeEventListener(ZWaveEventListener eventListener){ _EL_ synchronized (zwaveEventListeners) { _EL_     zwaveEventListeners.remove(eventListener); _EL_   } _EL_ } _EL_ ', 'private void parseSwitch(int indent,boolean firstContent,String header,Layout layout,List<Elem> elems){ _EL_   TokenStream tokens=new TokenStream(header); _EL_   Elem selector=parseExpr(tokens); _EL_   tokens.checkAtEnd(); _EL_   ImmutableList.Builder<Case> cases=ImmutableList.builder(); _EL_   List<Elem> defaultElems=null; _EL_   boolean done; _EL_   String line=getNextLine(); _EL_   Matcher matcher=COMMAND_LINE.matcher(line); _EL_   String command; _EL_   String rest; _EL_   if (matcher.find()) { _EL_     command=matcher.group(COMMAND_NAME_GROUP); _EL_     rest=line.substring(matcher.end()); _EL_     done=false; _EL_   } _EL_  else { _EL_     error("expected \'@end\', \'@case\' or \'@default\' command after \'switch\'"); _EL_     done=true; _EL_     command=null; _EL_     rest=null; _EL_   } _EL_   while (!done) { _EL_ switch (command) { _EL_ case END_COMMAND: _EL_       checkHeaderEmpty(command,rest); _EL_     done=true; _EL_   break; _EL_ case DEFAULT_COMMAND: _EL_ checkHeaderEmpty(command,rest); _EL_ if (defaultElems != null) { _EL_ error("duplicate \'@default\' in @switch"); _EL_ } _EL_ defaultElems=parseUntil(indent,layout,END_COMMAND); _EL_ command=lastTerminator; _EL_ rest=lastTerminatorHeader; _EL_ done=lastTerminator == null; _EL_ break; _EL_ case CASE_COMMAND: _EL_ tokens=new TokenStream(rest); _EL_ Elem value=parseExpr(tokens); _EL_ tokens.checkAtEnd(); _EL_ List<Elem> caseElems=parseUntil(indent,layout,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND); _EL_ if (value != null) { _EL_ cases.add(Case.create(value,caseElems)); _EL_ } _EL_ command=lastTerminator; _EL_ rest=lastTerminatorHeader; _EL_ done=lastTerminator == null; _EL_ break; _EL_ default : _EL_ unexpectedCommandError(command); _EL_ done=true; _EL_ break; _EL_ } _EL_ } _EL_ if (selector != null) { _EL_ elems.add(Block.create(!firstContent,Switch.create(input.location(),selector,cases.build(),defaultElems))); _EL_ } _EL_ } _EL_ ', 'public void clear(FacesContext facesContext,Map<String,Object> viewMap){ _EL_   if (LOGGER.isLoggable(Level.FINEST)) { _EL_     LOGGER.log(Level.FINEST,"Clearing @ViewScoped CDI beans for given view map: {0}"); _EL_   } _EL_   Map<String,ViewScopeContextObject> contextMap=getContextMap(facesContext,viewMap); _EL_   if (contextMap != null) { _EL_     destroyBeans(viewMap,contextMap); _EL_   } _EL_ } _EL_ ', 'public int availableInProcess(){ _EL_   return Math.max(0,maxInProcess - pending.size()); _EL_ } _EL_ ', 'public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException { _EL_   submitCycle=true; _EL_   EntitiesModel model=(EntitiesModel)getModel(); _EL_   AMPropertySheet prop=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE); _EL_   String universalId=(String)getPageSessionAttribute(UNIVERSAL_ID); _EL_   try { _EL_     Map oldValues=model.getAttributeValues(universalId,false); _EL_     Map values=prop.getAttributeValues(oldValues,true,model); _EL_     String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM); _EL_     model.modifyEntity(curRealm,universalId,values); _EL_     setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","message.updated"); _EL_   } _EL_  catch (  AMConsoleException e) { _EL_     setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage()); _EL_   } _EL_   forwardTo(); _EL_ } _EL_ ', 'private void fixSpannedWithSpaces(SpannableStringBuilder builder,int widthMeasureSpec,int heightMeasureSpec){ _EL_   long startFix=System.currentTimeMillis(); _EL_   FixingResult result=addSpacesAroundSpansUntilFixed(builder,widthMeasureSpec,heightMeasureSpec); _EL_   if (result.fixed) { _EL_     removeUnneededSpaces(widthMeasureSpec,heightMeasureSpec,builder,result); _EL_   } _EL_  else { _EL_     fallbackToString(widthMeasureSpec,heightMeasureSpec); _EL_   } _EL_   long fixDuration=System.currentTimeMillis() - startFix; _EL_   Logger.d(TAG,"fixSpannedWithSpaces() duration in ms: " + fixDuration); _EL_ } _EL_ ', 'public void addChannelMap(ChannelMap channelMap){ _EL_   if (!mChannelMaps.contains(channelMap)) { _EL_     mChannelMaps.add(channelMap); _EL_     int index=mChannelMaps.indexOf(channelMap); _EL_     fireIntervalAdded(this,index,index); _EL_     broadcast(new ChannelMapEvent(channelMap,Event.ADD)); _EL_   } _EL_ } _EL_ ', 'public void read(ByteCodeParser in) throws IOException { _EL_   int length=in.readInt(); _EL_   _maxStack=in.readShort(); _EL_   _maxLocals=in.readShort(); _EL_   int codeLength=in.readInt(); _EL_   _code=new byte[codeLength]; _EL_   in.read(_code,0,codeLength); _EL_   int exnCount=in.readShort(); _EL_   for (int i=0; i < exnCount; i++) { _EL_     ExceptionItem exn=new ExceptionItem(); _EL_     exn.setStart(in.readShort() & 0xffff); _EL_     exn.setEnd(in.readShort() & 0xffff); _EL_     exn.setHandler(in.readShort() & 0xffff); _EL_     exn.setType(in.readShort() & 0xffff); _EL_     _exceptions.add(exn); _EL_   } _EL_   int attrCount=in.readShort(); _EL_   for (int i=0; i < attrCount; i++) { _EL_     Attribute attr=in.parseAttribute(); _EL_     _attributes.add(attr); _EL_   } _EL_ } _EL_ ', 'private MethodDescriptor[] sortMethodDescriptors(MethodDescriptor[] methodDescriptors){ _EL_   return methodSorter != null ? methodSorter.sortMethodDescriptors(methodDescriptors) : methodDescriptors; _EL_ } _EL_ ', 'public ISO9796d2PSSSigner(AsymmetricBlockCipher cipher,Digest digest,int saltLength,boolean implicit){ _EL_   this.cipher=cipher; _EL_   this.digest=digest; _EL_   this.hLen=digest.getDigestSize(); _EL_   this.saltLength=saltLength; _EL_   if (implicit) { _EL_     trailer=TRAILER_IMPLICIT; _EL_   } _EL_  else { _EL_     Integer trailerObj=(Integer)trailerMap.get(digest.getAlgorithmName()); _EL_     if (trailerObj != null) { _EL_       trailer=trailerObj.intValue(); _EL_     } _EL_  else { _EL_       throw new IllegalArgumentException("no valid trailer for digest"); _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public void applyInline(double[] data,int pos,int len){ _EL_   int i; _EL_   double[] dataOut=new double[len]; _EL_   if (len > real.length) { _EL_     throw new IllegalArgumentException("Length must not be larger than FFT size"); _EL_   } _EL_   int middle=len / 2 + len % 2; _EL_   System.arraycopy(data,0,dataOut,0,len); _EL_   System.arraycopy(dataOut,pos + middle,real,0,len - middle); _EL_   System.arraycopy(dataOut,pos,real,real.length - middle,middle); _EL_   if (real.length > len)   Arrays.fill(real,len - middle,real.length - middle,0); _EL_   Arrays.fill(imag,0,imag.length,0.); _EL_   FFT.transform(real,imag,false); _EL_   process(real,imag); _EL_   FFT.transform(real,imag,true); _EL_   System.arraycopy(real,0,dataOut,pos + middle,len - middle); _EL_   System.arraycopy(real,real.length - middle,dataOut,pos,middle); _EL_   double origAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len); _EL_   for (i=0; i < len; i++)   data[i]=amount * dataOut[i] + oneMinusAmount * data[i]; _EL_   double newAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len); _EL_   double scale=origAvgEnergy / newAvgEnergy; _EL_   for (i=0; i < len; i++)   data[i]*=0.8 * scale; _EL_ } _EL_ ', 'public boolean registerUser(String username,String password,String uri) throws DataAccessException { _EL_   if (checkUsernameExists(username)) { _EL_     return false; _EL_   } _EL_   storeUser(username,password,uri); _EL_   return true; _EL_ } _EL_ ', 'public final V extractFirst(){ _EL_   if (size() > 0) { _EL_     if (GWT.isScript()) { _EL_       V ret=jsArray.get(0); _EL_       jsArray.remove(0); _EL_       return ret; _EL_     } _EL_  else { _EL_       return javaArray.remove(0); _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public final void quietlyJoin(){ _EL_   doJoin(); _EL_ } _EL_ ', 'private void scheduledEnqueueSend(){ _EL_   schedulerQueueSize.decrementAndGet(); _EL_   scheduled.set(false); _EL_   enqueueSendWithErrorLogging(); _EL_ } _EL_ ', 'private void loadConfigurationFromJvmParameters(){ _EL_   String repositoryProperty=System.getProperty(REPOSITORY_PROPERTY); _EL_   if (null != repositoryProperty) { _EL_     String[] repositoryIpHost=repositoryProperty.split(":"); _EL_     if (repositoryIpHost.length == 2) { _EL_       String repositoryIp=repositoryIpHost[0]; _EL_       String repositoryPort=repositoryIpHost[1]; _EL_       if (StringUtils.isNotBlank(repositoryIp) && StringUtils.isNotBlank(repositoryPort)) { _EL_         log.info("Repository information found in the JVM parameters: IP=" + repositoryIp + " Port="+ repositoryPort); _EL_         try { _EL_           int port=Integer.parseInt(repositoryPort); _EL_           setRepository(repositoryIp,port); _EL_         } _EL_  catch (        Exception e) { _EL_           log.warn("Repository could not be defined from the data in the JVM parameters",e); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   String agentName=System.getProperty(AGENT_NAME_PROPERTY); _EL_   if (StringUtils.isNotBlank(agentName)) { _EL_     try { _EL_       log.info("Agent name found in the JVM parameters: AgentName=" + agentName); _EL_       setAgentName(agentName); _EL_     } _EL_  catch (    Exception e) { _EL_       log.warn("Agent name could not be defined from the data in the JVM parameters",e); _EL_     } _EL_   } _EL_  else { _EL_     try { _EL_       setAgentName(DEFAULT_AGENT_NAME); _EL_     } _EL_  catch (    StorageException e) { _EL_       log.warn("Agent name could not be defined from default agent name",e); _EL_     } _EL_   } _EL_ } _EL_ ', 'public SiteStatusCheckThreadImpl(){ _EL_   super(); _EL_   urlCheckers=new HashMap(); _EL_ } _EL_ ', 'private void parseFirstConsonant(){ _EL_   Iterator iter=alFirstConsonants.iterator(); _EL_   while (iter.hasNext()) { _EL_     String strFirstCon=(String)iter.next(); _EL_     if (strSyllable.startsWith(strFirstCon,iCurPos)) { _EL_       strFirstConsonant=strFirstCon; _EL_       iCurPos+=strFirstCon.length(); _EL_       return; _EL_     } _EL_   } _EL_   strFirstConsonant=ZERO; _EL_ } _EL_ ', 'protected void paintContentBorderTopEdge(Graphics g,int x,int y,int w,int h,boolean drawBroken,Rectangle selRect,boolean isContentBorderPainted){ _EL_   if (isContentBorderPainted) { _EL_     g.setColor(selectHighlight); _EL_     g.fillRect(x,y,w - 1,1); _EL_   } _EL_ } _EL_ ', 'private boolean decodeHandshake(ByteBuffer socketBufferNew){ _EL_   ByteBuffer socketBuffer; _EL_   if (tmpHandshakeBytes.capacity() == 0) { _EL_     socketBuffer=socketBufferNew; _EL_   } _EL_  else { _EL_     if (tmpHandshakeBytes.remaining() < socketBufferNew.remaining()) { _EL_       ByteBuffer buf=ByteBuffer.allocate(tmpHandshakeBytes.capacity() + socketBufferNew.remaining()); _EL_       tmpHandshakeBytes.flip(); _EL_       buf.put(tmpHandshakeBytes); _EL_       tmpHandshakeBytes=buf; _EL_     } _EL_     tmpHandshakeBytes.put(socketBufferNew); _EL_     tmpHandshakeBytes.flip(); _EL_     socketBuffer=tmpHandshakeBytes; _EL_   } _EL_   socketBuffer.mark(); _EL_   try { _EL_     if (draft == null) { _EL_       HandshakeState isflashedgecase=isFlashEdgeCase(socketBuffer); _EL_       if (isflashedgecase == HandshakeState.MATCHED) { _EL_         try { _EL_           write(ByteBuffer.wrap(Charsetfunctions.utf8Bytes(wsl.getFlashPolicy(this)))); _EL_           close(CloseFrame.FLASHPOLICY,""); _EL_         } _EL_  catch (        InvalidDataException e) { _EL_           close(CloseFrame.ABNORMAL_CLOSE,"remote peer closed connection before flashpolicy could be transmitted",true); _EL_         } _EL_         return false; _EL_       } _EL_     } _EL_     HandshakeState handshakestate=null; _EL_     try { _EL_       if (role == Role.SERVER) { _EL_         if (draft == null) { _EL_           for (          Draft d : knownDrafts) { _EL_             d=d.copyInstance(); _EL_             try { _EL_               d.setParseMode(role); _EL_               socketBuffer.reset(); _EL_               Handshakedata tmphandshake=d.translateHandshake(socketBuffer); _EL_               if (tmphandshake instanceof ClientHandshake == false) { _EL_                 flushAndClose(CloseFrame.PROTOCOL_ERROR,"wrong http function",false); _EL_                 return false; _EL_               } _EL_               ClientHandshake handshake=(ClientHandshake)tmphandshake; _EL_               handshakestate=d.acceptHandshakeAsServer(handshake); _EL_               if (handshakestate == HandshakeState.MATCHED) { _EL_                 resourceDescriptor=handshake.getResourceDescriptor(); _EL_                 ServerHandshakeBuilder response; _EL_                 try { _EL_                   response=wsl.onWebsocketHandshakeReceivedAsServer(this,d,handshake); _EL_                 } _EL_  catch (                InvalidDataException e) { _EL_                   flushAndClose(e.getCloseCode(),e.getMessage(),false); _EL_                   return false; _EL_                 } _EL_ catch (                RuntimeException e) { _EL_                   wsl.onWebsocketError(this,e); _EL_                   flushAndClose(CloseFrame.NEVER_CONNECTED,e.getMessage(),false); _EL_                   return false; _EL_                 } _EL_                 write(d.createHandshake(d.postProcessHandshakeResponseAsServer(handshake,response),role)); _EL_                 draft=d; _EL_                 open(handshake); _EL_                 return true; _EL_               } _EL_             } _EL_  catch (            InvalidHandshakeException e) { _EL_             } _EL_           } _EL_           if (draft == null) { _EL_             close(CloseFrame.PROTOCOL_ERROR,"no draft matches"); _EL_           } _EL_           return false; _EL_         } _EL_  else { _EL_           Handshakedata tmphandshake=draft.translateHandshake(socketBuffer); _EL_           if (tmphandshake instanceof ClientHandshake == false) { _EL_             flushAndClose(CloseFrame.PROTOCOL_ERROR,"wrong http function",false); _EL_             return false; _EL_           } _EL_           ClientHandshake handshake=(ClientHandshake)tmphandshake; _EL_           handshakestate=draft.acceptHandshakeAsServer(handshake); _EL_           if (handshakestate == HandshakeState.MATCHED) { _EL_             open(handshake); _EL_             return true; _EL_           } _EL_  else { _EL_             close(CloseFrame.PROTOCOL_ERROR,"the handshake did finaly not match"); _EL_           } _EL_           return false; _EL_         } _EL_       } _EL_  else       if (role == Role.CLIENT) { _EL_         draft.setParseMode(role); _EL_         Handshakedata tmphandshake=draft.translateHandshake(socketBuffer); _EL_         if (tmphandshake instanceof ServerHandshake == false) { _EL_           flushAndClose(CloseFrame.PROTOCOL_ERROR,"wrong http function",false); _EL_           return false; _EL_         } _EL_         ServerHandshake handshake=(ServerHandshake)tmphandshake; _EL_         handshakestate=draft.acceptHandshakeAsClient(handshakerequest,handshake); _EL_         if (handshakestate == HandshakeState.MATCHED) { _EL_           try { _EL_             wsl.onWebsocketHandshakeReceivedAsClient(this,handshakerequest,handshake); _EL_           } _EL_  catch (          InvalidDataException e) { _EL_             flushAndClose(e.getCloseCode(),e.getMessage(),false); _EL_             return false; _EL_           } _EL_ catch (          RuntimeException e) { _EL_             wsl.onWebsocketError(this,e); _EL_             flushAndClose(CloseFrame.NEVER_CONNECTED,e.getMessage(),false); _EL_             return false; _EL_           } _EL_           open(handshake); _EL_           return true; _EL_         } _EL_  else { _EL_           close(CloseFrame.PROTOCOL_ERROR,"draft " + draft + " refuses handshake"); _EL_         } _EL_       } _EL_     } _EL_  catch (    InvalidHandshakeException e) { _EL_       close(e); _EL_     } _EL_   } _EL_  catch (  IncompleteHandshakeException e) { _EL_     if (tmpHandshakeBytes.capacity() == 0) { _EL_       socketBuffer.reset(); _EL_       int newsize=e.getPreferedSize(); _EL_       if (newsize == 0) { _EL_         newsize=socketBuffer.capacity() + 16; _EL_       } _EL_  else { _EL_         assert (e.getPreferedSize() >= socketBuffer.remaining()); _EL_       } _EL_       tmpHandshakeBytes=ByteBuffer.allocate(newsize); _EL_       tmpHandshakeBytes.put(socketBufferNew); _EL_     } _EL_  else { _EL_       tmpHandshakeBytes.position(tmpHandshakeBytes.limit()); _EL_       tmpHandshakeBytes.limit(tmpHandshakeBytes.capacity()); _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static Map<String,String> allNamespaces(SOAPElement ele){ _EL_   Map<String,String> nsList=new TreeMap<String,String>(); _EL_   log.trace("Starting Namespace Lookup in " + ele.getNodeName()); _EL_   allNamespaces(ele,nsList); _EL_   log.trace("Namespace Lookup done: " + nsList); _EL_   return nsList; _EL_ } _EL_ ', '@Override public int length(){ _EL_   return set.size(); _EL_ } _EL_ ', 'final void copyIntoLocalState(Operand[] _localState){ _EL_   localState=new Operand[_localState.length]; _EL_   System.arraycopy(_localState,0,localState,0,_localState.length); _EL_   setLocalKnown(); _EL_ } _EL_ ', 'protected Object attemptReadResponse(Connection cnx) throws Exception { _EL_   Message msg=createResponseMessage(); _EL_   if (msg != null) { _EL_     msg.setComms(cnx.getSocket(),cnx.getInputStream(),cnx.getOutputStream(),cnx.getCommBuffer(),cnx.getStats()); _EL_     if (msg instanceof ChunkedMessage) { _EL_       try { _EL_         return processResponse(msg,cnx); _EL_       } _EL_   finally { _EL_         msg.unsetComms(); _EL_         processSecureBytes(cnx,msg); _EL_       } _EL_     } _EL_  else { _EL_       try { _EL_         msg.recv(); _EL_       } _EL_   finally { _EL_         msg.unsetComms(); _EL_         processSecureBytes(cnx,msg); _EL_       } _EL_       return processResponse(msg,cnx); _EL_     } _EL_   } _EL_  else { _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public static TDoubleDoubleHashMap createCumulativeHistogram(TDoubleDoubleHashMap histogram){ _EL_   double[] keys=histogram.keys(); _EL_   Arrays.sort(keys); _EL_   double sum=0; _EL_   for (  double key : keys) { _EL_     double val=histogram.get(key); _EL_     sum+=val; _EL_     histogram.put(key,sum); _EL_   } _EL_   return histogram; _EL_ } _EL_ ', 'public boolean isSetQueueSize(){ _EL_   return __isset_bit_vector.get(__QUEUESIZE_ISSET_ID); _EL_ } _EL_ ', 'protected final void drawArrowHead(Graphics2D g,int x,int y,int sgn){ _EL_   g.setStroke(Strokes.getStroke(StrokeType.SOLID,1)); _EL_   int size=diagram().arrowSize; _EL_ switch (headType) { _EL_ case CLOSED: _EL_     Polygon p=new Polygon(new int[]{x,x + sgn * size,x + sgn * size,x},new int[]{y,y - size,y + size,y},4); _EL_   g.fillPolygon(p); _EL_ break; _EL_ case OPEN: _EL_ g.drawLine(x,y,x + sgn * size,y - size); _EL_ g.drawLine(x,y,x + sgn * size,y + size); _EL_ break; _EL_ case ROUNDED: _EL_ int left=sgn == -1 ? x - 2 * size : x; _EL_ int top=y - size; _EL_ g.fillArc(left,top,size * 2,size * 2,90,sgn * 180); _EL_ } _EL_ } _EL_ ', 'static public URL findContainerXML(String _containerName){ _EL_   URL _containerNameURL=null; _EL_   String _containerNameFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + _containerName+ ".xml"; _EL_   _containerNameURL=getResourceURL(_containerNameFilePath); _EL_   if (_containerNameURL != null) { _EL_     if (_logger.isLoggable(Level.INFO)) { _EL_       _logger.info("Loaded the container xml file < " + _containerNameURL + " >."); _EL_     } _EL_   } _EL_   return _containerNameURL; _EL_ } _EL_ ', 'public static List<String> expandWildcards(Iterable<File> dirs,List<String> names,Backend forBackend){ _EL_   List<String> result=new ArrayList<String>(names.size()); _EL_   for (  String name : names) { _EL_     expandWildcard(result,dirs,name,forBackend); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private void createNewReviewTask(TaskRepository repository,TaskData taskData) throws CoreException { _EL_   Repository repo=AppraisePluginUtils.getGitRepoForRepository(repository); _EL_   AppraisePluginReviewClient client; _EL_   try { _EL_     client=new AppraisePluginReviewClient(repository); _EL_   } _EL_  catch (  GitClientException e1) { _EL_     throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Failed to initialize git client")); _EL_   } _EL_   String currentBranch; _EL_   try { _EL_     currentBranch=repo.getFullBranch(); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Error retrieving current branch",e)); _EL_   } _EL_   if (MASTER_REF.equals(currentBranch)) { _EL_     throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Cannot create review on master branch")); _EL_   } _EL_   setAttributeValue(taskData,schema.REQUESTER,repository.getUserName()); _EL_   setAttributeValue(taskData,schema.TARGET_REF,MASTER_REF); _EL_   setAttributeValue(taskData,schema.REVIEW_REF,currentBranch); _EL_   RevCommit reviewCommit; _EL_   try { _EL_     reviewCommit=client.getReviewCommit(currentBranch,MASTER_REF); _EL_   } _EL_  catch (  GitClientException e) { _EL_     throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Cannot find a merge base",e)); _EL_   } _EL_   if (reviewCommit == null) { _EL_     throw new CoreException(new Status(IStatus.INFO,AppraiseConnectorPlugin.PLUGIN_ID,"No commits to review on " + currentBranch)); _EL_   } _EL_   setAttributeValue(taskData,schema.DESCRIPTION,reviewCommit.getFullMessage()); _EL_   setAttributeValue(taskData,schema.REVIEW_COMMIT,reviewCommit.getName()); _EL_   try { _EL_     List<DiffEntry> diffs=client.getReviewDiffs(currentBranch,MASTER_REF); _EL_     populateDiffs(repository,diffs,taskData); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Failed to load review diffs",e)); _EL_   } _EL_ } _EL_ ', 'public static LinkedList<MaryModule> modulesRequiredForProcessing(MaryDataType sourceType,MaryDataType targetType,Locale locale,Voice voice){ _EL_   if (!registrationComplete)   throw new IllegalStateException("Cannot inquire about modules while registration is ongoing"); _EL_   if (sourceType == null)   throw new NullPointerException("Received null source type"); _EL_   if (targetType == null)   throw new NullPointerException("Received null target type"); _EL_   LinkedList<MaryDataType> seenTypes=new LinkedList<MaryDataType>(); _EL_   seenTypes.add(sourceType); _EL_   return modulesRequiredForProcessing(sourceType,targetType,locale,voice,seenTypes); _EL_ } _EL_ ', 'private T[] ensureCapacity(int minCapacity){ _EL_   if (tmp.length < minCapacity) { _EL_     int newSize=minCapacity; _EL_     newSize|=newSize >> 1; _EL_     newSize|=newSize >> 2; _EL_     newSize|=newSize >> 4; _EL_     newSize|=newSize >> 8; _EL_     newSize|=newSize >> 16; _EL_     newSize++; _EL_     if (newSize < 0)     newSize=minCapacity; _EL_  else     newSize=Math.min(newSize,a.length >>> 1); _EL_     T[] newArray=(T[])new Object[newSize]; _EL_     tmp=newArray; _EL_   } _EL_   return tmp; _EL_ } _EL_ ', 'private void queueUpSyncs(final Cursor contactsCursor){ _EL_   ContactSyncEntry syncEntry=null; _EL_   while (contactsCursor.moveToNext()) { _EL_     if (syncEntry == null) { _EL_       syncEntry=new ContactSyncEntry(UPLOAD_BATCH_SIZE); _EL_     } _EL_     final String number=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER)); _EL_     final String name=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME)); _EL_     if (!TextUtils.isEmpty(number)) { _EL_       syncEntry.addNumber(numberToNational(number)); _EL_       syncEntry.addName(name); _EL_       if (syncEntry.isFull()) { _EL_         Logger.d(TAG,"Adding sync entry to queue"); _EL_         mSyncQueue.add(syncEntry); _EL_         syncEntry=null; _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public static boolean stringToBooleanValue(String str) throws ExpressionException { _EL_   str=StringUtil.toLowerCase(str.trim()); _EL_   if (str.equals("yes") || str.equals("true"))   return true; _EL_  else   if (str.equals("no") || str.equals("false"))   return false; _EL_   throw new CasterException("Can\'t cast String [" + str + "] to boolean"); _EL_ } _EL_ ', 'private void updateLtp(SingleChannelElement sce){ _EL_   IndividualChannelStream ics=sce.ics; _EL_   float saved[]=sce.saved; _EL_   float savedLtp[]=sce.coeffs; _EL_   final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024; _EL_   final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128; _EL_   if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) { _EL_     System.arraycopy(saved,0,savedLtp,0,512); _EL_     Arrays.fill(savedLtp,576,576 + 448,0f); _EL_     FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64); _EL_     for (int i=0; i < 64; i++) { _EL_       savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i]; _EL_     } _EL_   } _EL_  else   if (ics.windowSequence[0] == LONG_START_SEQUENCE) { _EL_     System.arraycopy(ac.bufMdct,512,savedLtp,0,448); _EL_     Arrays.fill(savedLtp,576,576 + 448,0f); _EL_     FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64); _EL_     for (int i=0; i < 64; i++) { _EL_       savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i]; _EL_     } _EL_   } _EL_  else { _EL_     FloatDSP.vectorFmulReverse(savedLtp,0,ac.bufMdct,512,lwindow,512,512); _EL_     for (int i=0; i < 512; i++) { _EL_       savedLtp[i + 512]=ac.bufMdct[1023 - i] * lwindow[511 - i]; _EL_     } _EL_   } _EL_   System.arraycopy(sce.ltpState,1024,sce.ltpState,0,1024); _EL_   System.arraycopy(sce.ret,0,sce.ltpState,1024,1024); _EL_   System.arraycopy(savedLtp,0,sce.ltpState,2048,1024); _EL_ } _EL_ ', 'private void growSpine(){ _EL_   spine=new int[(spine.length << 1) + 1]; _EL_   threshold=(int)(spine.length * loadFactor); _EL_   Arrays.fill(spine,-1); _EL_   for (int i=0; i < size; i++) { _EL_     insert(objs[i],i); _EL_   } _EL_ } _EL_ ', 'public void reconnect(){ _EL_   if (opened && !allowConnectionRecovery) { _EL_     return; _EL_   } _EL_   reconnectwait thread=new reconnectwait(); _EL_   thread.start(); _EL_   try { _EL_     thread.join(); _EL_   } _EL_  catch (  InterruptedException e) { _EL_     log.error("Unable to join to the reconnection thread " + e.getMessage()); _EL_   } _EL_   if (!opened) { _EL_     log.error("Failed to re-establish connectivity"); _EL_   } _EL_  else { _EL_     log.info("Reconnected to " + getCurrentPortName()); _EL_     resetupConnection(); _EL_   } _EL_ } _EL_ ', 'private void storeLastUsed(){ _EL_   put(LAST_USE,(int)(System.currentTimeMillis() / 1000)); _EL_ } _EL_ ', 'private int readSourceToLog(Settings settings){ _EL_   String sourceToLog=settings.get(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG,"1000"); _EL_   try { _EL_     return Integer.parseInt(sourceToLog,10); _EL_   } _EL_  catch (  NumberFormatException e) { _EL_     return Booleans.parseBoolean(sourceToLog,true) ? Integer.MAX_VALUE : 0; _EL_   } _EL_ } _EL_ ', 'public static boolean isZoningRequired(DbClient dbClient,URI varrayUri){ _EL_   if (varrayUri != null) { _EL_     VirtualArray nh=dbClient.queryObject(VirtualArray.class,varrayUri); _EL_     if (nh != null) { _EL_       return isZoningRequired(dbClient,nh); _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', '@Override public Set<K> keySet(){ _EL_   HashSet<K> set=new HashSet<K>(); _EL_   for (  Segment<K,V> s : segments) { _EL_     set.addAll(s.keySet()); _EL_   } _EL_   return set; _EL_ } _EL_ ', 'private String printDFormat(String sx){ _EL_   int nLeadingZeros=0; _EL_   int nBlanks=0, n=0; _EL_   int i=0; _EL_   final int jFirst; _EL_   final boolean neg=sx.charAt(0) == \'-\'; _EL_   if (sx.equals("0") && precisionSet && precision == 0) { _EL_     sx=""; _EL_   } _EL_   if (!neg) { _EL_     if (precisionSet && sx.length() < precision) { _EL_       nLeadingZeros=precision - sx.length(); _EL_     } _EL_   } _EL_  else { _EL_     if (precisionSet && (sx.length() - 1) < precision) { _EL_       nLeadingZeros=precision - sx.length() + 1; _EL_     } _EL_   } _EL_   if (nLeadingZeros < 0) { _EL_     nLeadingZeros=0; _EL_   } _EL_   if (fieldWidthSet) { _EL_     nBlanks=fieldWidth - nLeadingZeros - sx.length(); _EL_     if (!neg && (leadingSign || leadingSpace)) { _EL_       nBlanks--; _EL_     } _EL_   } _EL_   if (nBlanks < 0) { _EL_     nBlanks=0; _EL_   } _EL_   if (leadingSign) { _EL_     n++; _EL_   } _EL_  else   if (leadingSpace) { _EL_     n++; _EL_   } _EL_   n+=nBlanks; _EL_   n+=nLeadingZeros; _EL_   n+=sx.length(); _EL_   final char[] ca=new char[n]; _EL_   if (leftJustify) { _EL_     if (neg) { _EL_       ca[i++]=\'-\'; _EL_     } _EL_  else     if (leadingSign) { _EL_       ca[i++]=\'+\'; _EL_     } _EL_  else     if (leadingSpace) { _EL_       ca[i++]=\' \'; _EL_     } _EL_     final char[] csx=sx.toCharArray(); _EL_     jFirst=neg ? 1 : 0; _EL_     for (int j=0; j < nLeadingZeros; i++, j++) { _EL_       ca[i]=\'0\'; _EL_     } _EL_     for (int j=jFirst; j < csx.length; j++, i++) { _EL_       ca[i]=csx[j]; _EL_     } _EL_     for (int j=0; j < nBlanks; i++, j++) { _EL_       ca[i]=\' \'; _EL_     } _EL_   } _EL_  else { _EL_     if (!leadingZeros) { _EL_       for (i=0; i < nBlanks; i++) { _EL_         ca[i]=\' \'; _EL_       } _EL_       if (neg) { _EL_         ca[i++]=\'-\'; _EL_       } _EL_  else       if (leadingSign) { _EL_         ca[i++]=\'+\'; _EL_       } _EL_  else       if (leadingSpace) { _EL_         ca[i++]=\' \'; _EL_       } _EL_     } _EL_  else { _EL_       if (neg) { _EL_         ca[i++]=\'-\'; _EL_       } _EL_  else       if (leadingSign) { _EL_         ca[i++]=\'+\'; _EL_       } _EL_  else       if (leadingSpace) { _EL_         ca[i++]=\' \'; _EL_       } _EL_       for (int j=0; j < nBlanks; j++, i++) { _EL_         ca[i]=\'0\'; _EL_       } _EL_     } _EL_     for (int j=0; j < nLeadingZeros; j++, i++) { _EL_       ca[i]=\'0\'; _EL_     } _EL_     final char[] csx=sx.toCharArray(); _EL_     jFirst=neg ? 1 : 0; _EL_     for (int j=jFirst; j < csx.length; j++, i++) { _EL_       ca[i]=csx[j]; _EL_     } _EL_   } _EL_   return new String(ca); _EL_ } _EL_ ', 'protected static final String addEscapes(String str){ _EL_   StringBuffer retval=new StringBuffer(); _EL_   char ch; _EL_   for (int i=0; i < str.length(); i++) { _EL_ switch (str.charAt(i)) { _EL_ case 0: _EL_       continue; _EL_ case \'\\b\': _EL_     retval.append("\\\\b"); _EL_   continue; _EL_ case \'\\t\': _EL_ retval.append("\\\\t"); _EL_ continue; _EL_ case \'\\n\': _EL_ retval.append("\\\\n"); _EL_ continue; _EL_ case \'\\f\': _EL_ retval.append("\\\\f"); _EL_ continue; _EL_ case \'\\r\': _EL_ retval.append("\\\\r"); _EL_ continue; _EL_ case \'\\"\': _EL_ retval.append("\\\\\\""); _EL_ continue; _EL_ case \'\\\'\': _EL_ retval.append("\\\\\\\'"); _EL_ continue; _EL_ case \'\\\\\': _EL_ retval.append("\\\\\\\\"); _EL_ continue; _EL_ default : _EL_ if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) { _EL_ String s="0000" + Integer.toString(ch,16); _EL_ retval.append("\\\\u" + s.substring(s.length() - 4,s.length())); _EL_ } _EL_  else { _EL_ retval.append(ch); _EL_ } _EL_ continue; _EL_ } _EL_ } _EL_ return retval.toString(); _EL_ } _EL_ ', 'public List<LocalTime> bottom(int n){ _EL_   List<LocalTime> bottom=new ArrayList<>(); _EL_   int[] values=data.toIntArray(); _EL_   IntArrays.parallelQuickSort(values); _EL_   for (int i=0; i < n && i < values.length; i++) { _EL_     bottom.add(PackedLocalTime.asLocalTime(values[i])); _EL_   } _EL_   return bottom; _EL_ } _EL_ ', 'protected void paintContentBorderBottomEdge(Graphics g,int x,int y,int w,int h,boolean drawBroken,Rectangle selRect,boolean isContentBorderPainted){ _EL_   if (isContentBorderPainted) { _EL_     g.setColor(darkShadow); _EL_     g.fillRect(x,y + h - 1,w - 1,1); _EL_   } _EL_ } _EL_ ', 'private Sprite(float xPos,float yPos,float xVel,float yVel,Image... sprites){ _EL_   if (sprites != null)   spriteFrame=new ImageView(sprites[0]); _EL_   playerStates.addAll(Arrays.asList(sprites)); _EL_   spriteFrame.setTranslateX(xPos); _EL_   spriteFrame.setTranslateY(yPos); _EL_   this.xPos=xPos; _EL_   this.yPos=yPos; _EL_   this.xVel=xVel; _EL_   this.yVel=yVel; _EL_ } _EL_ ', "public static Pair<String,String> split(String varName){ _EL_   int splitIndex=varName.indexOf('.'); _EL_   if (splitIndex < 0) { _EL_     return null; _EL_   } _EL_   String left=varName.substring(0,splitIndex); _EL_   String right=varName.substring(splitIndex + 1); _EL_   if (left == null || left.length() == 0 || right == null || right.length() == 0) { _EL_     return null; _EL_   } _EL_   return Pair.of(left,right); _EL_ } _EL_ ", 'private static int loadBuildNumber(Context context,PackageManager packageManager){ _EL_   try { _EL_     ApplicationInfo appInfo=packageManager.getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA); _EL_     Bundle metaData=appInfo.metaData; _EL_     if (metaData != null) { _EL_       return metaData.getInt(BUNDLE_BUILD_NUMBER,0); _EL_     } _EL_   } _EL_  catch (  PackageManager.NameNotFoundException e) { _EL_     L.e("Exception thrown when accessing the application info:"); _EL_     e.printStackTrace(); _EL_   } _EL_   return 0; _EL_ } _EL_ ', 'public String buildUri(String representationId,int segmentNumber,int bandwidth,long time){ _EL_   StringBuilder builder=new StringBuilder(); _EL_   for (int i=0; i < identifierCount; i++) { _EL_     builder.append(urlPieces[i]); _EL_     if (identifiers[i] == REPRESENTATION_ID) { _EL_       builder.append(representationId); _EL_     } _EL_  else     if (identifiers[i] == NUMBER_ID) { _EL_       builder.append(String.format(Locale.US,identifierFormatTags[i],segmentNumber)); _EL_     } _EL_  else     if (identifiers[i] == BANDWIDTH_ID) { _EL_       builder.append(String.format(Locale.US,identifierFormatTags[i],bandwidth)); _EL_     } _EL_  else     if (identifiers[i] == TIME_ID) { _EL_       builder.append(String.format(Locale.US,identifierFormatTags[i],time)); _EL_     } _EL_   } _EL_   builder.append(urlPieces[identifierCount]); _EL_   return builder.toString(); _EL_ } _EL_ ', 'private <T extends CWLResource>List<T> lookForResources(CWLResourceType type,Class<T> clazz){ _EL_   List<T> resources=getRequirements(type,clazz); _EL_   if (resources == null || resources.size() == 0) { _EL_     resources=getHints(type,clazz); _EL_   } _EL_   return resources; _EL_ } _EL_ ', 'private void addLinks(final SpannableString string,final long accountId,final long extraId,final int type,final boolean sensitive,final OnLinkClickListener listener,final int highlightOption){ _EL_ switch (type) { _EL_ case LINK_TYPE_MENTION: _EL_ { _EL_       addMentionOrListLinks(string,accountId,extraId,highlightOption,listener); _EL_       break; _EL_     } _EL_ case LINK_TYPE_HASHTAG: _EL_ { _EL_     addHashtagLinks(string,accountId,extraId,listener,highlightOption); _EL_     break; _EL_   } _EL_ case LINK_TYPE_LINK: _EL_ { _EL_   final URLSpan[] spans=string.getSpans(0,string.length(),URLSpan.class); _EL_   for (  final URLSpan span : spans) { _EL_     final int start=string.getSpanStart(span); _EL_     final int end=string.getSpanEnd(span); _EL_     if (start < 0 || end > string.length() || start > end) { _EL_       continue; _EL_     } _EL_     string.removeSpan(span); _EL_     applyLink(span.getURL(),start,end,string,accountId,extraId,LINK_TYPE_LINK,sensitive,highlightOption,listener); _EL_   } _EL_   final List<Extractor.Entity> urls=mExtractor.extractURLsWithIndices(ParseUtils.parseString(string)); _EL_   for (  final Extractor.Entity entity : urls) { _EL_     final int start=entity.getStart(), end=entity.getEnd(); _EL_     if (entity.getType() != Extractor.Entity.Type.URL || string.getSpans(start,end,URLSpan.class).length > 0) { _EL_       continue; _EL_     } _EL_     applyLink(entity.getValue(),start,end,string,accountId,extraId,LINK_TYPE_LINK,sensitive,highlightOption,listener); _EL_   } _EL_   break; _EL_ } _EL_ case LINK_TYPE_STATUS: _EL_ { _EL_ final URLSpan[] spans=string.getSpans(0,string.length(),URLSpan.class); _EL_ for (final URLSpan span : spans) { _EL_   final Matcher matcher=PATTERN_TWITTER_STATUS.matcher(span.getURL()); _EL_   if (matcher.matches()) { _EL_     final int start=string.getSpanStart(span); _EL_     final int end=string.getSpanEnd(span); _EL_     final String url=matcherGroup(matcher,GROUP_ID_TWITTER_STATUS_STATUS_ID); _EL_     string.removeSpan(span); _EL_     applyLink(url,start,end,string,accountId,extraId,LINK_TYPE_STATUS,sensitive,highlightOption,listener); _EL_   } _EL_ } _EL_ break; _EL_ } _EL_ case LINK_TYPE_CASHTAG: _EL_ { _EL_ addCashtagLinks(string,accountId,extraId,listener,highlightOption); _EL_ break; _EL_ } _EL_ default : _EL_ { _EL_ return; _EL_ } _EL_ } _EL_ } _EL_ ', 'public void postProcess(){ _EL_   if (foreignColumnName != null) { _EL_     foreignAutoRefresh=true; _EL_   } _EL_   if (foreignAutoRefresh && maxForeignAutoRefreshLevel == DatabaseField.NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED) { _EL_     maxForeignAutoRefreshLevel=DatabaseField.DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL; _EL_   } _EL_ } _EL_ ', 'static void policyChanged(String serviceTypeName,PolicyEvent pe){ _EL_   if (DEBUG.messageEnabled()) { _EL_     DEBUG.message("PolicyEvaulator.policyChanged():serviceTypeName=" + serviceTypeName); _EL_   } _EL_   resourceNamesMap.remove(serviceTypeName); _EL_   Cache resourceNamesCache=(Cache)resourceNamesMap.get(serviceTypeName); _EL_   if ((resourceNamesCache == null) || (resourceNamesCache.isEmpty())) { _EL_     return; _EL_   } _EL_   try { _EL_     DEBUG.error("PolicyEvaluator.policyChanged: enterred try block"); _EL_     ServiceTypeManager stm=ServiceTypeManager.getServiceTypeManager(); _EL_     ServiceType serviceType=stm.getServiceType(serviceTypeName); _EL_     Set resourceNamesToRemove=new HashSet(); _EL_ synchronized (resourceNamesCache) { _EL_       Enumeration resourceNames=resourceNamesCache.keys(); _EL_       while (resourceNames.hasMoreElements()) { _EL_         String resourceName=(String)resourceNames.nextElement(); _EL_         if (resourceNamesToRemove.contains(resourceName)) { _EL_           continue; _EL_         } _EL_         Set affectedResourceNames=pe.getResourceNames(); _EL_         Iterator iter=affectedResourceNames.iterator(); _EL_         while (iter.hasNext()) { _EL_           String affectedResourceName=(String)iter.next(); _EL_           if (serviceType.compare(resourceName,affectedResourceName) != ResourceMatch.NO_MATCH) { _EL_             resourceNamesToRemove.add(resourceName); _EL_           } _EL_         } _EL_       } _EL_       Iterator iter1=resourceNamesToRemove.iterator(); _EL_       while (iter1.hasNext()) { _EL_         String resourceNameToRemove=(String)iter1.next(); _EL_         resourceNamesCache.remove(resourceNameToRemove); _EL_       } _EL_     } _EL_   } _EL_  catch (  SSOException e) { _EL_     DEBUG.error("PolicyEvaluator.policyChanged:",e); _EL_   } _EL_ catch (  PolicyException pex) { _EL_     DEBUG.error("PolicyEvaluator.policyChanged:",pex); _EL_   } _EL_   if (DEBUG.messageEnabled()) { _EL_     DEBUG.message("PolicyEvaulator.policyChanged():serviceTypeName=" + serviceTypeName + ", new cached resoruceNames="+ resourceNamesMap.get(serviceTypeName)); _EL_   } _EL_ } _EL_ ', 'public double nextDouble(double alpha,double lambda){ _EL_   double a=alpha; _EL_   double aa=-1.0, aaa=-1.0, b=0.0, c=0.0, d=0.0, e, r, s=0.0, si=0.0, ss=0.0, q0=0.0, q1=0.0416666664, q2=0.0208333723, q3=0.0079849875, q4=0.0015746717, q5=-0.0003349403, q6=0.0003340332, q7=0.0006053049, q8=-0.0004701849, q9=0.0001710320, a1=0.333333333, a2=-0.249999949, a3=0.199999867, a4=-0.166677482, a5=0.142873973, a6=-0.124385581, a7=0.110368310, a8=-0.112750886, a9=0.104089866, e1=1.000000000, e2=0.499999994, e3=0.166666848, e4=0.041664508, e5=0.008345522, e6=0.001353826, e7=0.000247453; _EL_   double gds, p, q, t, sign_u, u, v, w, x; _EL_   double v1, v2, v12; _EL_   if (a <= 0.0)   throw new IllegalArgumentException(); _EL_   if (lambda <= 0.0)   new IllegalArgumentException(); _EL_   if (a < 1.0) { _EL_     b=1.0 + 0.36788794412 * a; _EL_     for (; ; ) { _EL_       p=b * randomGenerator.raw(); _EL_       if (p <= 1.0) { _EL_         gds=Math.exp(Math.log(p) / a); _EL_         if (Math.log(randomGenerator.raw()) <= -gds)         return (gds / lambda); _EL_       } _EL_  else { _EL_         gds=-Math.log((b - p) / a); _EL_         if (Math.log(randomGenerator.raw()) <= ((a - 1.0) * Math.log(gds)))         return (gds / lambda); _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     if (a != aa) { _EL_       aa=a; _EL_       ss=a - 0.5; _EL_       s=Math.sqrt(ss); _EL_       d=5.656854249 - 12.0 * s; _EL_     } _EL_     do { _EL_       v1=2.0 * randomGenerator.raw() - 1.0; _EL_       v2=2.0 * randomGenerator.raw() - 1.0; _EL_       v12=v1 * v1 + v2 * v2; _EL_     } _EL_  while (v12 > 1.0); _EL_     t=v1 * Math.sqrt(-2.0 * Math.log(v12) / v12); _EL_     x=s + 0.5 * t; _EL_     gds=x * x; _EL_     if (t >= 0.0)     return (gds / lambda); _EL_     u=randomGenerator.raw(); _EL_     if (d * u <= t * t * t)     return (gds / lambda); _EL_     if (a != aaa) { _EL_       aaa=a; _EL_       r=1.0 / a; _EL_       q0=((((((((q9 * r + q8) * r + q7) * r + q6) * r + q5) * r + q4) * r + q3) * r + q2) * r + q1) * r; _EL_       if (a > 3.686) { _EL_         if (a > 13.022) { _EL_           b=1.77; _EL_           si=0.75; _EL_           c=0.1515 / s; _EL_         } _EL_  else { _EL_           b=1.654 + 0.0076 * ss; _EL_           si=1.68 / s + 0.275; _EL_           c=0.062 / s + 0.024; _EL_         } _EL_       } _EL_  else { _EL_         b=0.463 + s - 0.178 * ss; _EL_         si=1.235; _EL_         c=0.195 / s - 0.079 + 0.016 * s; _EL_       } _EL_     } _EL_     if (x > 0.0) { _EL_       v=t / (s + s); _EL_       if (Math.abs(v) > 0.25) { _EL_         q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v); _EL_       } _EL_  else { _EL_         q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v; _EL_       } _EL_       if (Math.log(1.0 - u) <= q)       return (gds / lambda); _EL_     } _EL_     for (; ; ) { _EL_       do { _EL_         e=-Math.log(randomGenerator.raw()); _EL_         u=randomGenerator.raw(); _EL_         u=u + u - 1.0; _EL_         sign_u=(u > 0) ? 1.0 : -1.0; _EL_         t=b + (e * si) * sign_u; _EL_       } _EL_  while (t <= -0.71874483771719); _EL_       v=t / (s + s); _EL_       if (Math.abs(v) > 0.25) { _EL_         q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v); _EL_       } _EL_  else { _EL_         q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v; _EL_       } _EL_       if (q <= 0.0)       continue; _EL_       if (q > 0.5) { _EL_         w=Math.exp(q) - 1.0; _EL_       } _EL_  else { _EL_         w=((((((e7 * q + e6) * q + e5) * q + e4) * q + e3) * q + e2) * q + e1) * q; _EL_       } _EL_       if (c * u * sign_u <= w * Math.exp(e - 0.5 * t * t)) { _EL_         x=s + 0.5 * t; _EL_         return (x * x / lambda); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public int writeUTF8(final CharSequence chars,int off,int len){ _EL_   if (len > remaining()) { _EL_     return writeUTF8Slow(chars,off,len); _EL_   } _EL_   final Block block=current; _EL_   int limit=block.limit; _EL_   char ch=\'\\0\'; _EL_   int octets=0; _EL_   while (len > 0) { _EL_     ch=chars.charAt(off); _EL_     if (ch >= UTF8_2_OCTET_MIN_VALUE) { _EL_       break; _EL_     } _EL_     block.data[limit++]=(byte)ch; _EL_     octets++; _EL_     off++; _EL_     len--; _EL_   } _EL_   block.limit=limit; _EL_   if (len > 0) { _EL_     if (ch < UTF8_3_OCTET_MIN_VALUE) { _EL_       return octets + writeUTF8UpTo2Byte(chars,off,len); _EL_     } _EL_     if (ch >= LOW_SURROGATE_FIRST && ch <= LOW_SURROGATE_LAST) { _EL_       throw new IllegalArgumentException("Unpaired low surrogate: " + ch); _EL_     } _EL_     if (ch >= HIGH_SURROGATE_FIRST && ch <= HIGH_SURROGATE_LAST) { _EL_       return octets + writeUTF8Slow(chars,off,len); _EL_     } _EL_     return octets + writeUTF8UpTo3Byte(chars,off,len); _EL_   } _EL_   return octets; _EL_ } _EL_ ', 'public Object clone() throws CloneNotSupportedException { _EL_   PredicatedNodeTest clone=(PredicatedNodeTest)super.clone(); _EL_   if ((null != this.m_proximityPositions) && (this.m_proximityPositions == clone.m_proximityPositions)) { _EL_     clone.m_proximityPositions=new int[this.m_proximityPositions.length]; _EL_     System.arraycopy(this.m_proximityPositions,0,clone.m_proximityPositions,0,this.m_proximityPositions.length); _EL_   } _EL_   if (clone.m_lpi == this)   clone.m_lpi=(LocPathIterator)clone; _EL_   return clone; _EL_ } _EL_ ', 'public void sort(Comparator<? super T> comparator){ _EL_ synchronized (mLock) { _EL_     if (mOriginalValues != null) { _EL_       Collections.sort(mOriginalValues,comparator); _EL_     } _EL_  else { _EL_       Collections.sort(mObjects,comparator); _EL_     } _EL_   } _EL_   if (mNotifyOnChange)   notifyDataSetChanged(); _EL_ } _EL_ ', 'static boolean causedByRDE(DiskAccessException dae){ _EL_   boolean result=false; _EL_   if (dae != null) { _EL_     Throwable cause=dae.getCause(); _EL_     while (cause != null) { _EL_       if (cause instanceof RegionDestroyedException) { _EL_         result=true; _EL_         break; _EL_       } _EL_       cause=cause.getCause(); _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException { _EL_   realm=new byte[length]; _EL_   System.arraycopy(attributeValue,offset,realm,0,length); _EL_ } _EL_ ', 'public boolean is_same(Object obj){ _EL_   if (this == obj)   return true; _EL_   if (obj == null)   return false; _EL_   if (getClass() != obj.getClass())   return false; _EL_   HouseNumber other=(HouseNumber)obj; _EL_   if (number == null) { _EL_     if (name == null) { _EL_       if (other.name != null)       return false; _EL_     } _EL_  else     if (!name.equals(other.name))     return false; _EL_   } _EL_  else   if (!number.equals(other.number))   return false; _EL_   if (street == null) { _EL_     if (other.street != null)     return false; _EL_   } _EL_  else   if (!street.equals(other.street))   return false; _EL_   return true; _EL_ } _EL_ ', 'public void pOln(Object o) throws IOException { _EL_   pO(o.toString()); _EL_   pln(); _EL_ } _EL_ ', 'Callbacks tryGetCallbacks(Callbacks oldCallbacks){ _EL_ synchronized (mLock) { _EL_     if (mStopped) { _EL_       return null; _EL_     } _EL_     if (mCallbacks == null) { _EL_       return null; _EL_     } _EL_     final Callbacks callbacks=mCallbacks.get(); _EL_     if (callbacks != oldCallbacks) { _EL_       return null; _EL_     } _EL_     if (callbacks == null) { _EL_       Log.w(TAG,"no mCallbacks"); _EL_       return null; _EL_     } _EL_     return callbacks; _EL_   } _EL_ } _EL_ ', 'public Set<WordToken> nearestWords(final int distance,final WordToken... start){ _EL_   return nearestWords(distance,null,Arrays.asList(start)); _EL_ } _EL_ ', 'protected int encode(double value,double lower,double upper,int nbits){ _EL_   if (value < lower)   return 0; _EL_   int maxval=(int)(Math.pow(2,nbits) - 1); _EL_   if (value >= upper)   return maxval; _EL_   return (int)((value - lower) * ((maxval - 0) / (upper - lower))); _EL_ } _EL_ ', 'public Key(byte[] hash){ _EL_   if (hash.length != SHA1_HASH_LENGTH) { _EL_     throw new IllegalArgumentException("Invalid Hash must be 20bytes, was: " + hash.length); _EL_   } _EL_   System.arraycopy(hash,0,this.hash,0,SHA1_HASH_LENGTH); _EL_ } _EL_ ', 'public byte[] readBytes() throws IOException { _EL_   int len=readInt(); _EL_   if (len == -1) { _EL_     return null; _EL_   } _EL_   byte[] b=DataUtils.newBytes(len); _EL_   in.readFully(b); _EL_   return b; _EL_ } _EL_ ', 'public boolean isValidAttachmentPoint(DatapathId switchDPID,OFPort switchPort){ _EL_   if (topology.isAttachmentPointPort(switchDPID,switchPort) == false)   return false; _EL_   if (suppressAPs.contains(new SwitchPort(switchDPID,switchPort)))   return false; _EL_   return true; _EL_ } _EL_ ', '@Override public void sendLocationList(){ _EL_   List<Location> locationList=lm.getLocationsByNameList(); _EL_   ArrayList<Attribute> location; _EL_   for (  Location loc : locationList) { _EL_     location=new ArrayList<Attribute>(1); _EL_     location.add(new Attribute(LOCATIONS,loc)); _EL_     try { _EL_       sendMessage(location); _EL_     } _EL_  catch (    IOException ioe) { _EL_       log.debug("could not send train " + loc.getName()); _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public byte[] read(int length) throws IOException { _EL_   if (length > available()) { _EL_     throw new EndOfBufferException(); _EL_   } _EL_   byte[] res=new byte[length]; _EL_   System.arraycopy(buffer,read_pos,res,0,length); _EL_   read_pos=read_pos + length; _EL_   return res; _EL_ } _EL_ ', 'public static String addCvDescription(String toolTip,String cvDescription,String mask){ _EL_   String descString=cvDescription; _EL_   String temp=getMaskDescription(mask); _EL_   if (temp.length() > 0) { _EL_     descString=descString + " " + temp; _EL_   } _EL_   if (PaneProgFrame.getShowCvNumbers() && (descString != null)) { _EL_     if (toolTip == null) { _EL_       toolTip=descString; _EL_     } _EL_  else { _EL_       toolTip=addTextHTMLaware(toolTip," (" + descString + ")"); _EL_     } _EL_   } _EL_  else   if (toolTip == null) { _EL_     toolTip=""; _EL_   } _EL_   return toolTip; _EL_ } _EL_ ', 'public static Object[] putAll(){ _EL_   Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME); _EL_   assertNotNull(region); _EL_   try { _EL_     Map map=new LinkedHashMap(); _EL_     map.put(PUTALL_KEY1,PUTALL_VALUE1); _EL_     map.put(PUTALL_KEY2,PUTALL_VALUE2); _EL_     map.put(PUTALL_KEY3,PUTALL_VALUE3); _EL_     map.put(PUTALL_KEY4,PUTALL_VALUE4); _EL_     map.put(PUTALL_KEY5,PUTALL_VALUE5); _EL_     region.putAll(map,"putAllCallbackArg"); _EL_     EventID[] evids=new EventID[5]; _EL_     evids[0]=putAlleventId1; _EL_     evids[1]=putAlleventId2; _EL_     evids[2]=putAlleventId3; _EL_     evids[3]=putAlleventId4; _EL_     evids[4]=putAlleventId5; _EL_     assertNotNull(evids[0]); _EL_     assertNotNull(evids[1]); _EL_     assertNotNull(evids[2]); _EL_     assertNotNull(evids[3]); _EL_     assertNotNull(evids[4]); _EL_     return evids; _EL_   } _EL_  catch (  Exception e) { _EL_     fail("put failed due to " + e); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'private static String escapeJSON(String text){ _EL_   StringBuilder builder=new StringBuilder(); _EL_   builder.append(\'"\'); _EL_   for (int index=0; index < text.length(); index++) { _EL_     char chr=text.charAt(index); _EL_ switch (chr) { _EL_ case \'"\': _EL_ case \'\\\\\': _EL_       builder.append(\'\\\\\'); _EL_     builder.append(chr); _EL_   break; _EL_ case \'\\b\': _EL_ builder.append("\\\\b"); _EL_ break; _EL_ case \'\\t\': _EL_ builder.append("\\\\t"); _EL_ break; _EL_ case \'\\n\': _EL_ builder.append("\\\\n"); _EL_ break; _EL_ case \'\\r\': _EL_ builder.append("\\\\r"); _EL_ break; _EL_ default : _EL_ if (chr < \' \') { _EL_ String t="000" + Integer.toHexString(chr); _EL_ builder.append("\\\\u" + t.substring(t.length() - 4)); _EL_ } _EL_  else { _EL_ builder.append(chr); _EL_ } _EL_ break; _EL_ } _EL_ } _EL_ builder.append(\'"\'); _EL_ return builder.toString(); _EL_ } _EL_ ', 'private boolean renderOutput(Node node,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException { _EL_   String arg=""; _EL_   if (node == null) { _EL_     rsvc.error("#include() error :  null argument"); _EL_     return false; _EL_   } _EL_   Object value=node.value(context); _EL_   if (value == null) { _EL_     rsvc.error("#include() error :  null argument"); _EL_     return false; _EL_   } _EL_   arg=value.toString(); _EL_   Resource resource=null; _EL_   try { _EL_     resource=rsvc.getContent(arg,getInputEncoding(context)); _EL_   } _EL_  catch (  ResourceNotFoundException rnfe) { _EL_     rsvc.error("#include(): cannot find resource \'" + arg + "\', called from template "+ context.getCurrentTemplateName()+ " at ("+ getLine()+ ", "+ getColumn()+ ")"); _EL_     throw rnfe; _EL_   } _EL_ catch (  Exception e) { _EL_     rsvc.error("#include(): arg = \'" + arg + "\', called from template "+ context.getCurrentTemplateName()+ " at ("+ getLine()+ ", "+ getColumn()+ ") : "+ e); _EL_   } _EL_   if (resource == null)   return false; _EL_   writer.write((String)resource.getData()); _EL_   return true; _EL_ } _EL_ ', 'public ExtendedTextLabel createExtended(Font font,CoreMetrics lm,Decoration decorator,int start,int limit){ _EL_   if (start >= limit || start < lineStart || limit > lineLimit) { _EL_     throw new IllegalArgumentException("bad start: " + start + " or limit: "+ limit); _EL_   } _EL_   int level=lineBidi == null ? 0 : lineBidi.getLevelAt(start - lineStart); _EL_   int linedir=(lineBidi == null || lineBidi.baseIsLeftToRight()) ? 0 : 1; _EL_   int layoutFlags=flags & ~0x9; _EL_   if ((level & 0x1) != 0)   layoutFlags|=1; _EL_   if ((linedir & 0x1) != 0)   layoutFlags|=8; _EL_   TextSource source=new StandardTextSource(text,start,limit - start,lineStart,lineLimit - lineStart,level,layoutFlags,font,frc,lm); _EL_   return new ExtendedTextSourceLabel(source,decorator); _EL_ } _EL_ ', 'protected void startRecoarding(){ _EL_   coordinates.clear(); _EL_   enabled=true; _EL_ } _EL_ ', 'public String[] showVersion() throws NetworkDeviceControllerException { _EL_   String[] returnVal=new String[2]; _EL_   SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN}; _EL_   StringBuilder buf=new StringBuilder(); _EL_   SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString("MDSDialog.showVersion.cmd"),10000,prompts,buf); _EL_   String[] lines=getLines(buf); _EL_   String[] regex={MDSDialogProperties.getString("MDSDialog.showVersion.version.match"),MDSDialogProperties.getString("MDSDialog.showVersion.MDS.match"),MDSDialogProperties.getString("MDSDialog.showVersion.Nexus.match")}; _EL_   String[] groups=new String[2]; _EL_   for (  String line : lines) { _EL_     int index=match(line,regex,groups); _EL_ switch (index) { _EL_ case 0: _EL_       returnVal[1]=groups[0]; _EL_     break; _EL_ case 1: _EL_   returnVal[0]=groups[0]; _EL_ break; _EL_ case 2: _EL_ returnVal[0]=groups[0]; _EL_ break; _EL_ } _EL_ } _EL_ return returnVal; _EL_ } _EL_ ', 'protected void publish() throws MqttException, IOException { _EL_   sampleClientPub=new SampleAsyncCallback(url,clientIdPub,cleanSession,quietMode,userName,password); _EL_   if (sampleClientPub != null) { _EL_     String topic="Sample/Java/v3"; _EL_     int qos=2; _EL_     String message="Message from async calback MQTTv3 Java client sample"; _EL_     try { _EL_       sampleClientPub.publish(topic,qos,message.getBytes()); _EL_     } _EL_  catch (    Throwable e) { _EL_       e.printStackTrace(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static AnnotationBinding[] addStandardAnnotations(AnnotationBinding[] recordedAnnotations,long annotationTagBits,LookupEnvironment env){ _EL_   int count=0; _EL_   if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   count++; _EL_   if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   count++; _EL_   if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   count++; _EL_   if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   count++; _EL_   if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   count++; _EL_   if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   count++; _EL_   if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   count++; _EL_   if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   count++; _EL_   if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   count++; _EL_   if (count == 0)   return recordedAnnotations; _EL_   int index=recordedAnnotations.length; _EL_   AnnotationBinding[] result=new AnnotationBinding[index + count]; _EL_   System.arraycopy(recordedAnnotations,0,result,0,index); _EL_   if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   result[index++]=buildTargetAnnotation(annotationTagBits,env); _EL_   if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   result[index++]=buildRetentionAnnotation(annotationTagBits,env); _EL_   if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_DEPRECATED,env); _EL_   if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED,env); _EL_   if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED,env); _EL_   if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,env); _EL_   if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SUPPRESSWARNINGS,env); _EL_   if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   result[index++]=buildMarkerAnnotationForMemberType(TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE,env); _EL_   if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SAFEVARARGS,env); _EL_   return result; _EL_ } _EL_ ', 'public void dispose(){ _EL_   clearListeners(); _EL_   if (attributes != null) { _EL_     attributes.clear(); _EL_   } _EL_   removed(null); _EL_ } _EL_ ', 'private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { _EL_   in.defaultReadObject(); _EL_   registrarID=new ServiceID(in); _EL_   if (server == null) { _EL_     throw new InvalidObjectException("null server"); _EL_   } _EL_ } _EL_ ', 'public void addPropertyChangeListener(PropertyChangeListener pcl){ _EL_   m_pcSupport.addPropertyChangeListener(pcl); _EL_ } _EL_ ', '@Override public void clear(){ _EL_   if (elementCount > 0) { _EL_     elementCount=0; _EL_     Arrays.fill(elementData,null); _EL_     modCount++; _EL_     while (referenceQueue.poll() != null) { _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public Enumeration<Option> listOptions(){ _EL_   Vector<Option> newVector=new Vector<Option>(); _EL_   newVector.addElement(new Option("\\tNumber of trees to build.\\n\\t(default 100)","I",1,"-I <number of trees>")); _EL_   newVector.addElement(new Option("\\tNumber of features to consider (<1=int(log_2(#predictors)+1)).\\n\\t(default 0)","K",1,"-K <number of features>")); _EL_   newVector.addElement(new Option("\\tSeed for random number generator.\\n" + "\\t(default 1)","S",1,"-S")); _EL_   newVector.addElement(new Option("\\tThe maximum depth of the trees, 0 for unlimited.\\n" + "\\t(default 0)","depth",1,"-depth <num>")); _EL_   newVector.addElement(new Option("\\tDon\'t calculate the out of bag error.","O",0,"-O")); _EL_   newVector.addElement(new Option("\\tPrint the individual trees in the output","print",0,"-print")); _EL_   newVector.addElement(new Option("\\tNumber of execution slots.\\n" + "\\t(default 1 - i.e. no parallelism)","num-slots",1,"-num-slots <num>")); _EL_   newVector.addAll(Collections.list(super.listOptions())); _EL_   return newVector.elements(); _EL_ } _EL_ ', 'protected void paintRangeRings(Point2D originPnt,Point2D dest,Graphics graphics,MapBean theMap){ _EL_   Geo originGeo=new Geo(originPnt.getY(),originPnt.getX(),true); _EL_   Geo destGeo=new Geo(dest.getY(),dest.getX(),true); _EL_   double distance=originGeo.distance(destGeo); _EL_   for (int i=1; i <= Math.max(1,numRings); i++) { _EL_     double ringDist=distance * (double)i; _EL_     paintCircle(originGeo,ringDist,graphics,theMap); _EL_     paintLabel(originGeo,ringDist,graphics,theMap); _EL_   } _EL_ } _EL_ ', 'public boolean canSpawnWorkers(){ _EL_   boolean canSpawnWorker=false; _EL_   if (verboseLogLevel > 5) { _EL_     Utilities.verboseLog("canSpawnWorkers - gridName: " + gridName + " tier : "+ tier+ " maxTierDepth: "+ maxTierDepth+ " lifeRemaing: "+ lifeRemaining()+ " maximumLifeMillis: "+ maximumLifeMillis); _EL_   } _EL_   if (!gridName.equals("lsf")) { _EL_     return false; _EL_   } _EL_   if (clusterState != null) { _EL_     Long timeSinceClusterLastUpdatedClusterState=System.currentTimeMillis() - clusterState.getLastUpdated(); _EL_     Utilities.verboseLog("timeSinceClusterLastUpdatedClusterState: " + timeSinceClusterLastUpdatedClusterState); _EL_     if (timeSinceClusterLastUpdatedClusterState > 2 * gridCheckInterval * 1000) { _EL_       Utilities.verboseLog("ClusterState is not uptodate:" + clusterState.toString()); _EL_       return false; _EL_     } _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_   if (tier == maxTierDepth) { _EL_     return false; _EL_   } _EL_   if (lifeRemaining() < (maximumLifeMillis * 0.25)) { _EL_     return false; _EL_   } _EL_ switch (tier) { _EL_ case 1: _EL_     canSpawnWorker=true; _EL_   break; _EL_ case 2: _EL_ canSpawnWorker=true; _EL_ break; _EL_ case 3: _EL_ canSpawnWorker=true; _EL_ break; _EL_ case 4: _EL_ canSpawnWorker=true; _EL_ break; _EL_ default : _EL_ if (gridThrottle) { _EL_ canSpawnWorker=false; _EL_ } _EL_  else { _EL_ canSpawnWorker=true; _EL_ } _EL_ } _EL_ return canSpawnWorker; _EL_ } _EL_ ', 'public static X509Certificate createCertificateFromBytes(byte[] certBytes){ _EL_   X509Certificate cert=null; _EL_   CertificateFactory certFactory; _EL_   try { _EL_     certFactory=CertificateFactory.getInstance("X.509"); _EL_     InputStream in=new ByteArrayInputStream(certBytes); _EL_     cert=(X509Certificate)certFactory.generateCertificate(in); _EL_   } _EL_  catch (  CertificateException e) { _EL_     logger.warn("Excpetion caught in CryptCore." + "createCertificateFromBytes, returning null",e); _EL_   } _EL_   return cert; _EL_ } _EL_ ', 'private void breakBarrier(){ _EL_   generation.broken=true; _EL_   count=parties; _EL_   trip.signalAll(); _EL_ } _EL_ ', '@Override public Enumeration<Option> listOptions(){ _EL_   Vector<Option> newVector=new Vector<Option>(2); _EL_   newVector.addElement(new Option("\\tSpecify list of columns to copy. First and last are valid\\n" + "\\tindexes. (default none)","R",1,"-R <index1,index2-index4,...>")); _EL_   newVector.addElement(new Option("\\tInvert matching sense (i.e. copy all non-specified columns)","V",0,"-V")); _EL_   return newVector.elements(); _EL_ } _EL_ ', 'public void deleteResourceConfig(String clusterName,ResourceType resourceType,String dsName) throws ConfigurationException { _EL_   if (getClusterHome() == null) { _EL_     throw new ConfigurationException("No home directory found from which to configure resources."); _EL_   } _EL_   File resources=getDir(getResourceConfigDirName(getClusterHome(),clusterName,resourceType)); _EL_   String delFileName=resources.getAbsolutePath() + File.separator + dsName+ ".properties"; _EL_   delFile(delFileName); _EL_ } _EL_ ', 'private void kdRangeSearch(int left,int right,int axis,O query,ModifiableDoubleDBIDList res,DBIDArrayIter iter,double radius){ _EL_   if (right - left <= leafsize) { _EL_     for (iter.seek(left); iter.getOffset() < right; iter.advance()) { _EL_       double dist=norm.distance(query,relation.get(iter)); _EL_       countObjectAccess(); _EL_       countDistanceComputation(); _EL_       if (dist <= radius) { _EL_         res.add(dist,iter); _EL_       } _EL_     } _EL_     return; _EL_   } _EL_   final int middle=(left + right) >>> 1; _EL_   O split=relation.get(iter.seek(middle)); _EL_   countObjectAccess(); _EL_   final double delta=split.doubleValue(axis) - query.doubleValue(axis); _EL_   final boolean onleft=(delta >= 0); _EL_   final boolean onright=(delta <= 0); _EL_   final boolean close=(Math.abs(delta) <= radius); _EL_   final int next=(axis + 1) % dims; _EL_   if (close) { _EL_     double dist=norm.distance(query,split); _EL_     countDistanceComputation(); _EL_     if (dist <= radius) { _EL_       assert (iter.getOffset() == middle); _EL_       res.add(dist,iter); _EL_     } _EL_   } _EL_   if (left < middle && (onleft || close)) { _EL_     kdRangeSearch(left,middle,next,query,res,iter,radius); _EL_   } _EL_   if (middle + 1 < right && (onright || close)) { _EL_     kdRangeSearch(middle + 1,right,next,query,res,iter,radius); _EL_   } _EL_ } _EL_ ', 'public void acquireProbabilities(final String string){ _EL_   if (string.length() < 2) { _EL_     return; _EL_   } _EL_   for (int i=2; i < string.length(); ++i) { _EL_     final char previousChar=string.charAt(i - 2); _EL_     final char currentChar=string.charAt(i - 1); _EL_     final char nextChar=string.charAt(i); _EL_     final String key=previousChar + "" + currentChar; _EL_     if (!sequences.contains(key)) { _EL_       sequences.add(key); _EL_     } _EL_     HashMap<Character,Integer> probabilities=sequenceProbabilities.get(key); _EL_     if (probabilities == null) { _EL_       probabilities=new HashMap<>(); _EL_       sequenceProbabilities.put(key,probabilities); _EL_     } _EL_     int existingValue=probabilities.getOrDefault(nextChar,0); _EL_     ++existingValue; _EL_     probabilities.put(nextChar,existingValue); _EL_   } _EL_ } _EL_ ', 'public void putStringNoNull(String s){ _EL_   ensureCapacity(s.length() * 2); _EL_   System.arraycopy(s.getBytes(),0,this.byteBuffer,this.position,s.length()); _EL_   this.position+=s.length(); _EL_ } _EL_ ', 'public static String generateNativeGuid(String deviceType,String serialNumber){ _EL_   return String.format("%s+%s",_deviceTypeMap.get(deviceType),serialNumber); _EL_ } _EL_ ', 'private void drawArc(Canvas canvas){ _EL_   if (mCurrentDashMode.equals(DASH_MODE.DOWNLOAD)) { _EL_     mnIndeterminateStartPosition+=(1 - mnProgress) * mnStartSpeed; _EL_     if ((mnIndeterminateStartPosition > CIRCULAR_FACTOR) || (mnIndeterminateStartPosition < 0)) { _EL_       mnIndeterminateStartPosition=0; _EL_     } _EL_     Rect currRect=new Rect(); _EL_     getLocalVisibleRect(currRect); _EL_     float nRingBoundaryInner=mnRingRadius - (mnRingWidth / 2) - (mnArcWidth / 2); _EL_     mArcRect.set(mnViewCenter - nRingBoundaryInner,mnViewCenter - nRingBoundaryInner,mnViewCenter + nRingBoundaryInner,mnViewCenter + nRingBoundaryInner); _EL_     mPaint.setColor(mArcColor); _EL_     mPaint.setStyle(Paint.Style.STROKE); _EL_     mPaint.setStrokeWidth(mnArcWidth); _EL_     mPaint.setStrokeCap(Paint.Cap.ROUND); _EL_     canvas.drawArc(mArcRect,mnIndeterminateStartPosition,mnArcLength,false,mPaint); _EL_   } _EL_ } _EL_ ', 'public static void storeLocation(Context context,LatLng location){ _EL_   SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context); _EL_   SharedPreferences.Editor editor=prefs.edit(); _EL_   editor.putLong(PREFERENCES_LAT,Double.doubleToRawLongBits(location.latitude)); _EL_   editor.putLong(PREFERENCES_LNG,Double.doubleToRawLongBits(location.longitude)); _EL_   editor.apply(); _EL_ } _EL_ ', '@Override public boolean equals(Object object){ _EL_   if (this == object) { _EL_     return true; _EL_   } _EL_   if (object instanceof List) { _EL_     List<?> list=(List<?>)object; _EL_     if (list.size() != size()) { _EL_       return false; _EL_     } _EL_     Iterator<?> it1=iterator(), it2=list.iterator(); _EL_     while (it1.hasNext()) { _EL_       Object e1=it1.next(), e2=it2.next(); _EL_       if (!(e1 == null ? e2 == null : e1.equals(e2))) { _EL_         return false; _EL_       } _EL_     } _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void modify(SSOToken token,String objName,ModificationItem[] mods) throws SMSException, SSOException { _EL_   if ((objName == null) || (objName.length() == 0) || (mods == null)|| (mods.length == 0)) { _EL_     throw new IllegalArgumentException("SMSFlatFileObject.modify: " + "One or more arguments is null or empty"); _EL_   } _EL_   String objKey=objName.toLowerCase(); _EL_   String filepath=null; _EL_   mRWLock.readRequest(); _EL_   try { _EL_     filepath=mNameMap.getProperty(objKey); _EL_     if (filepath == null) { _EL_       String errmsg="SMSFlatFileObject.modify: object " + objName + " not found."; _EL_       mDebug.error(errmsg); _EL_       throw new ServiceNotFoundException(errmsg); _EL_     } _EL_   } _EL_   finally { _EL_     mRWLock.readDone(); _EL_   } _EL_   mRWLock.writeRequest(); _EL_   try { _EL_     filepath=mNameMap.getProperty(objKey); _EL_     if (filepath == null) { _EL_       String errmsg="SMSFlatFileObject.modify: object " + objName + " not found."; _EL_       mDebug.error(errmsg); _EL_       throw new ServiceNotFoundException(errmsg); _EL_     } _EL_     File filehandle=new File(filepath); _EL_     if (!filehandle.isFile()) { _EL_       String errmsg="SMSFlatFileObject.modify: Attributes file for object " + objName + " not found."; _EL_       mDebug.error(errmsg); _EL_       throw new ServiceNotFoundException(errmsg); _EL_     } _EL_     Properties props=loadProperties(filehandle,objName); _EL_     boolean hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true; _EL_     for (int i=0; i < mods.length; i++) { _EL_       modifyValues(objName,mods[i],props); _EL_     } _EL_     saveProperties(props,filehandle,objName); _EL_     if (!hasSunXmlKeyValue) { _EL_       hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true; _EL_     } _EL_     if (hasSunXmlKeyValue) { _EL_       deleteSunXmlKeyValFiles(filehandle.getParentFile()); _EL_       Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,props.getProperty(SMSEntry.ATTR_XML_KEYVAL)); _EL_       createSunXmlKeyValFiles(filehandle.getParentFile(),xmlKeyVals); _EL_     } _EL_   } _EL_   finally { _EL_     mRWLock.writeDone(); _EL_   } _EL_ } _EL_ ', 'public static boolean deleteDirectorySubdirectories(String rootDirectory){ _EL_   if ((rootDirectory == null)) { _EL_     return false; _EL_   } _EL_   boolean didSuccessfullyDeleteAllDirectories=true; _EL_   try { _EL_     List<File> files=getListOfFilesInADirectory(rootDirectory); _EL_     for (    File file : files) { _EL_       if (file.isDirectory()) { _EL_         boolean deleteSuccess=deleteDirectoryAndContents(file); _EL_         if (!deleteSuccess) { _EL_           logger.debug("Warning - failed to delete " + file.getAbsolutePath()); _EL_           didSuccessfullyDeleteAllDirectories=false; _EL_         } _EL_       } _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e)); _EL_     return false; _EL_   } _EL_   return didSuccessfullyDeleteAllDirectories; _EL_ } _EL_ ', 'private List<String> fetchFileCosIdList() throws SOSFailure { _EL_   final String methodName="fetchFileCosIdList(): "; _EL_   log.trace(methodName + "Entry"); _EL_   final String FILE_COS_URI="/file/vpools"; _EL_   List<String> fileCosIdList=new ArrayList<String>(); _EL_   try { _EL_     CoSList cosElemList=_client.queryObject(FILE_COS_URI,CoSList.class); _EL_     if (cosElemList != null && cosElemList.getCosElements() != null) { _EL_       for (      CoSElement elem : cosElemList.getCosElements()) { _EL_         if (elem != null) { _EL_           fileCosIdList.add(elem.getId()); _EL_         } _EL_       } _EL_     } _EL_     log.trace(methodName + "File CoS Ids: " + fileCosIdList); _EL_     if (cosElemList != null && fileCosIdList != null) { _EL_       log.trace(methodName + "Exit returning cos list of size[" + fileCosIdList.size()+ "]"); _EL_       return fileCosIdList; _EL_     } _EL_     log.trace(methodName + "Exit returning cos list of size[0]"); _EL_     return new ArrayList<String>(); _EL_   } _EL_  catch (  NoSuchAlgorithmException e) { _EL_     log.error(methodName + "NoSuchAlgorithmException occured",e); _EL_     throw new SOSFailure(e); _EL_   } _EL_ catch (  UniformInterfaceException e) { _EL_     log.error(methodName + "UniformInterfaceException occured",e); _EL_     throw new SOSFailure(e); _EL_   } _EL_ } _EL_ ', '@Override public void onReset(){ _EL_   closeDialog(); _EL_ } _EL_ ', 'private String processLogoutRequest(LogoutState t,LogoutRequest logoutRequest,SessionManager sessionManager) throws SamlServiceException { _EL_   String sessionId=null; _EL_   List<SessionIndex> sessionList=logoutRequest.getSessionIndexes(); _EL_   Validate.notNull(sessionList,"sessionList"); _EL_   Validate.isTrue(sessionList.size() > 0); _EL_   for (  SessionIndex sessionIndex : sessionList) { _EL_     Validate.notNull(sessionIndex); _EL_     String participantSession=sessionIndex.getSessionIndex(); _EL_     Validate.notNull(participantSession,"participantSession"); _EL_     Session session=sessionManager.getByParticipant(participantSession); _EL_     if (session == null) { _EL_       throw new SamlServiceException("Server session not found"); _EL_     } _EL_     if (!session.containsSessionParticipantUrl(t.getIssuerValue())) { _EL_       throw new SamlServiceException("Issuer URL does not match session participant URL"); _EL_     } _EL_     if (sessionId == null) { _EL_       sessionId=session.getId(); _EL_     } _EL_  else { _EL_       if (!sessionId.equals(session.getId())) { _EL_         throw new SamlServiceException("Participant requested multiple server sessions to be terminated"); _EL_       } _EL_     } _EL_   } _EL_   return sessionId; _EL_ } _EL_ ', 'private void sign(final byte[] contentBytes,final ByteArrayOutputStream mimeContent) throws Exception { _EL_   String algId=conf.getSignatureAlgorithmId(); _EL_   String keyId=conf.getActiveSigningKey(); _EL_   log.debug("Signing directory with signing key \'{}\' " + "and signing algorithm \'{}\'",keyId,algId); _EL_   String signature=signHelper(keyId,algId,contentBytes); _EL_   mimeContent.write(envelopeHeader.getBytes()); _EL_   try (MultipartEncoder encoder=new MultipartEncoder(mimeContent,envelopeBoundary)){ _EL_     encoder.startPart(mpMixedContentType(dataBoundary)); _EL_     encoder.write(contentBytes); _EL_     String algURI=CryptoUtils.getSignatureAlgorithmURI(algId); _EL_     String hashURI=hashCalculator.getAlgoURI(); _EL_     Path verificatioCertPath=conf.getCertPath(keyId); _EL_     encoder.startPart(MimeTypes.BINARY,new String[]{HEADER_CONTENT_TRANSFER_ENCODING + ": base64",HEADER_SIG_ALGO_ID + ": " + algURI,HEADER_VERIFICATION_CERT_HASH + ": " + getVerificationCertHash(verificatioCertPath)+ "; "+ HEADER_HASH_ALGORITHM_ID+ "="+ hashURI}); _EL_     encoder.write(signature.getBytes()); _EL_   } _EL_    log.debug("Generated signed directory:\\n{}\\n",mimeContent.toString()); _EL_   Files.write(tempConfPath,mimeContent.toByteArray()); _EL_   log.debug("Written signed directory to \'{}\'",tempConfPath); _EL_ } _EL_ ', 'private String extractSpan(String spans,int start,int end) throws IndexOutOfBoundsException { _EL_   int offset=getFirstSpanOffset(spans); _EL_   assert (start >= offset); _EL_   assert (end >= offset); _EL_   spans+=HTML_OPEN_SPAN; _EL_   int substart=getSpanPos(spans,start - offset); _EL_   int subend=getSpanPos(spans,end - offset + 1); _EL_   return spans.substring(substart,subend); _EL_ } _EL_ ', 'public SafeAsyncTask(){ _EL_   this.executor=DEFAULT_EXECUTOR; _EL_ } _EL_ ', 'public List<LocalTime> top(int n){ _EL_   List<LocalTime> top=new ArrayList<>(); _EL_   int[] values=data.toIntArray(); _EL_   IntArrays.parallelQuickSort(values,ReverseIntComparator.instance()); _EL_   for (int i=0; i < n && i < values.length; i++) { _EL_     top.add(PackedLocalTime.asLocalTime(values[i])); _EL_   } _EL_   return top; _EL_ } _EL_ ', 'public TimeSeriesMetricDeltaSet(Stream<Entry<Tags,MetricValue>> td){ _EL_   values_=Any2.right(td.collect(Collectors.toMap(null,null,null,null))); _EL_ } _EL_ ', 'public boolean areAllPermissionsGranted(){ _EL_   return deniedPermissionResponses.isEmpty(); _EL_ } _EL_ ', 'public boolean retainAll(AbstractFloatList other){ _EL_   if (other.size() == 0) { _EL_     if (size == 0)     return false; _EL_     setSize(0); _EL_     return true; _EL_   } _EL_   int limit=other.size() - 1; _EL_   int j=0; _EL_   for (int i=0; i < size; i++) { _EL_     if (other.indexOfFromTo(getQuick(i),0,limit) >= 0)     setQuick(j++,getQuick(i)); _EL_   } _EL_   boolean modified=(j != size); _EL_   setSize(j); _EL_   return modified; _EL_ } _EL_ ', 'public static float between(float val,float min,float max){ _EL_   return Math.max(Math.min(val,max),min); _EL_ } _EL_ ', 'public static StringBuffer replaceString(StringBuffer buffer,String[] parameters){ _EL_   int placeHolderPosition=-1; _EL_   String placeHolder=null; _EL_   for (int i=0; i < parameters.length; i++) { _EL_     if (parameters[i] == null) { _EL_       break; _EL_     } _EL_     placeHolder="%" + (i + 1) + "%"; _EL_     placeHolderPosition=buffer.indexOf(placeHolder); _EL_     if (placeHolderPosition != -1) { _EL_       buffer.replace(placeHolderPosition,placeHolderPosition + placeHolder.length(),parameters[i]); _EL_     } _EL_  else { _EL_       break; _EL_     } _EL_   } _EL_   return buffer; _EL_ } _EL_ ', "private int calculatePreferredWrapPosition(@NotNull Editor editor,@NotNull CharSequence text,int tabSize,int spaceSize,int startLineOffset,int endLineOffset,int targetRangeEndOffset){ _EL_   boolean hasTabs=false; _EL_   boolean canOptimize=true; _EL_   boolean hasNonSpaceSymbols=false; _EL_   loop:   for (int i=startLineOffset; i < Math.min(endLineOffset,targetRangeEndOffset); i++) { _EL_     char c=text.charAt(i); _EL_ switch (c) { _EL_ case '\\t': _EL_ { _EL_         hasTabs=true; _EL_         if (hasNonSpaceSymbols) { _EL_           canOptimize=false; _EL_           break loop; _EL_         } _EL_       } _EL_ case ' ': _EL_     break; _EL_ default : _EL_   hasNonSpaceSymbols=true; _EL_ } _EL_ } _EL_ if (!hasTabs) { _EL_ return wrapPositionForTextWithoutTabs(startLineOffset,endLineOffset,targetRangeEndOffset); _EL_ } _EL_  else if (canOptimize) { _EL_ return wrapPositionForTabbedTextWithOptimization(text,tabSize,startLineOffset,endLineOffset,targetRangeEndOffset); _EL_ } _EL_  else { _EL_ return wrapPositionForTabbedTextWithoutOptimization(editor,text,spaceSize,startLineOffset,endLineOffset,targetRangeEndOffset); _EL_ } _EL_ } _EL_ ", 'public Collection<T> asCollection(){ _EL_   return this.list; _EL_ } _EL_ ', 'public Cuboid(World world,int x1,int y1,int z1,int x2,int y2,int z2){ _EL_   this.worldName=world.getName(); _EL_   this.x1=Math.min(x1,x2); _EL_   this.x2=Math.max(x1,x2); _EL_   this.y1=Math.min(y1,y2); _EL_   this.y2=Math.max(y1,y2); _EL_   this.z1=Math.min(z1,z2); _EL_   this.z2=Math.max(z1,z2); _EL_ } _EL_ ', '@SuppressWarnings({"SuspiciousNameCombination"}) public double logMarginalLikelihoodSmoothed(List<Double> v,double delta,double Pdata){ _EL_   final double logDelta=StrictMath.log(delta); _EL_   final double logInvDelta=StrictMath.log(1.0 - delta); _EL_   final int n=v.size(); _EL_   final double logN=StrictMath.log(n); _EL_   final double offset=logInvDelta - Pdata; _EL_   double bottom=logN + logDelta - logInvDelta; _EL_   double top=bottom + Pdata; _EL_   for (int i=0; i < n; i++) { _EL_     double weight=-LogTricks.logSum(logDelta,offset + v.get(i)); _EL_     top=LogTricks.logSum(top,weight + v.get(i)); _EL_     bottom=LogTricks.logSum(bottom,weight); _EL_   } _EL_   return top - bottom; _EL_ } _EL_ ', 'private Integer parseInt(String s,int flags){ _EL_   if (convertColorNames(flags)) { _EL_     String c=Descriptor.convertColorName(s); _EL_     if (c != null) { _EL_       s=c; _EL_     } _EL_   } _EL_   try { _EL_     if (hasLeadingZeros(s)) { _EL_       return null; _EL_     } _EL_  else { _EL_       return Integer.decode(s); _EL_     } _EL_   } _EL_  catch (  NumberFormatException e) { _EL_     return null; _EL_   } _EL_ } _EL_ ', '@SuppressWarnings("unused") public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException { _EL_   submitCycle=true; _EL_   AbstractAuditModel model=(AbstractAuditModel)getModel(); _EL_   AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE); _EL_   String subConfigName=(String)getPageSessionAttribute(AUDIT_HANDLER_NAME); _EL_   try { _EL_     Map orig=model.getEventHandlerAttributeValues(subConfigName); _EL_     Map values=ps.getAttributeValues(orig,true,true,model); _EL_     model.setEventHandlerAttributeValues(subConfigName,values); _EL_     backToProfileViewBean(); _EL_   } _EL_  catch (  AMConsoleException e) { _EL_     setInlineAlertMessage(TYPE_ERROR,ERROR_MESSAGE,e.getMessage()); _EL_     forwardTo(); _EL_   } _EL_ } _EL_ ', 'Type renameTypeAsType(Type type){ _EL_   if (type == null) { _EL_     return null; _EL_   } _EL_   if (type.getSort() == Type.OBJECT) { _EL_     String in=type.getInternalName(); _EL_     String newIn=renameInternalType(in); _EL_     if (newIn != in) { _EL_       return Type.getType("L" + newIn + ";"); _EL_     } _EL_   } _EL_  else   if (type.getSort() == Type.ARRAY) { _EL_     StringBuilder sb=new StringBuilder(); _EL_     for (int n=type.getDimensions(); n > 0; n--) { _EL_       sb.append(\'[\'); _EL_     } _EL_     sb.append(renameType(type.getElementType())); _EL_     return Type.getType(sb.toString()); _EL_   } _EL_   return type; _EL_ } _EL_ ', 'public static List<String> findMainClasses(File rootDir) throws IOException { _EL_   List<String> ret=new ArrayList<>(); _EL_   if (!rootDir.exists()) { _EL_     return ret; _EL_   } _EL_   if (!rootDir.isDirectory()) { _EL_     throw new IllegalArgumentException(String.format("Path %s is not a directory",rootDir.getPath())); _EL_   } _EL_   findClasses(ret,rootDir,rootDir.getAbsolutePath() + "/"); _EL_   return ret; _EL_ } _EL_ ', 'private Response<Bitmap> doParse(NetworkResponse response){ _EL_   byte[] data=response.data; _EL_   BitmapFactory.Options decodeOptions=new BitmapFactory.Options(); _EL_   Bitmap bitmap=null; _EL_   if (mMaxWidth == 0 && mMaxHeight == 0) { _EL_     decodeOptions.inPreferredConfig=mDecodeConfig; _EL_     bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions); _EL_   } _EL_  else { _EL_     decodeOptions.inJustDecodeBounds=true; _EL_     BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions); _EL_     int actualWidth=decodeOptions.outWidth; _EL_     int actualHeight=decodeOptions.outHeight; _EL_     int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType); _EL_     int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType); _EL_     decodeOptions.inJustDecodeBounds=false; _EL_     decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight); _EL_     Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions); _EL_     if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) { _EL_       bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true); _EL_       tempBitmap.recycle(); _EL_     } _EL_  else { _EL_       bitmap=tempBitmap; _EL_     } _EL_   } _EL_   if (bitmap == null) { _EL_     return Response.error(new ParseError(response)); _EL_   } _EL_  else { _EL_     return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response)); _EL_   } _EL_ } _EL_ ', 'public static void execAndCheckOutput(ProcessBuilder builder,String expectedOut,String expectedErr) throws Exception { _EL_   Process process=builder.start(); _EL_   ExecutorService executorService=Executors.newFixedThreadPool(2); _EL_   try { _EL_     Future<String> errFuture=executorService.submit(streamToStringCallable(process.getErrorStream())); _EL_     Future<String> outFuture=executorService.submit(streamToStringCallable(process.getInputStream())); _EL_     assertEquals(expectedOut,outFuture.get(10,TimeUnit.SECONDS)); _EL_     assertEquals(expectedErr,errFuture.get(10,TimeUnit.SECONDS)); _EL_   } _EL_   finally { _EL_     executorService.shutdown(); _EL_     process.waitFor(); _EL_   } _EL_ } _EL_ ', 'protected void sprint(double doubleField){ _EL_   sprint(String.valueOf(doubleField)); _EL_ } _EL_ ', 'public long skip(long bytes) throws IOException { _EL_   if (closed) { _EL_     throw new IOException("The stream is closed."); _EL_   } _EL_   int av=available(); _EL_   if (av == 0) { _EL_     av=makeAvailable(); _EL_     if (av == 0) { _EL_       return 0; _EL_     } _EL_   } _EL_   long res=Math.min(av,bytes); _EL_   head+=res; _EL_   return res; _EL_ } _EL_ ', 'public void dumpOptions(){ _EL_   logger.info(""); _EL_   for (  Method getter : GetConfigurationInterface.class.getMethods()) { _EL_     String getterName=getter.getName(); _EL_     try { _EL_       Object result=getter.invoke(ConfigurationManager.getCurrentProfile()); _EL_       if (result instanceof Boolean) { _EL_         result=LocalizationHelper.getYesOrNo((Boolean)result); _EL_       } _EL_       if (result instanceof List) { _EL_         for (int i=0; i < ((List)result).size(); i++) { _EL_           assert ((List)result).get(i) instanceof CustomCatalogEntry; _EL_           CustomCatalogEntry c=((List<CustomCatalogEntry>)result).get(i); _EL_           String OptionName=Helper.pad(Localization.Main.getText("gui.tab6.label") + " [" + (i + 1)+ "], "+ c.getAtTop().toString(),\' \',50) + " : "; _EL_           logger.info(OptionName + c.getLabel() + " ("+ c.getValue().toString()+ "), "+ c.getAtTop().toString()); _EL_         } _EL_       } _EL_  else { _EL_         String optionName=getterName.substring(3); _EL_         dumpOption(optionName,result); _EL_       } _EL_     } _EL_  catch (    IllegalAccessException e) { _EL_       logger.warn("",e); _EL_     } _EL_ catch (    InvocationTargetException e) { _EL_       logger.warn("",e); _EL_     } _EL_   } _EL_   logger.info(""); _EL_ } _EL_ ', 'public boolean bool(){ _EL_   return (Double.isNaN(m_val) || (m_val == 0.0)) ? false : true; _EL_ } _EL_ ', 'public void make() throws Exception { _EL_   for (int i=0; i < _makeList.size(); i++) { _EL_     Make make=_makeList.get(i); _EL_     make.make(); _EL_   } _EL_ } _EL_ ', 'private static Pair<DiagnosticKind,Boolean> parseCategoryString(String category){ _EL_   final String fixable="fixable-"; _EL_   final boolean isFixable=category.startsWith(fixable); _EL_   if (isFixable) { _EL_     category=category.substring(fixable.length()); _EL_   } _EL_   DiagnosticKind categoryEnum=DiagnosticKind.fromParseString(category); _EL_   return Pair.of(categoryEnum,isFixable); _EL_ } _EL_ ', 'public void updateDeltas(int deltaX,int deltaY){ _EL_   if (mLeftBorderActive) { _EL_     mDeltaX=Math.max(-mBaselineX,deltaX); _EL_     mDeltaX=Math.min(mBaselineWidth - 2 * mTouchTargetWidth,mDeltaX); _EL_   } _EL_  else   if (mRightBorderActive) { _EL_     mDeltaX=Math.min(mDragLayer.getWidth() - (mBaselineX + mBaselineWidth),deltaX); _EL_     mDeltaX=Math.max(-mBaselineWidth + 2 * mTouchTargetWidth,mDeltaX); _EL_   } _EL_   if (mTopBorderActive) { _EL_     mDeltaY=Math.max(-mBaselineY,deltaY); _EL_     mDeltaY=Math.min(mBaselineHeight - 2 * mTouchTargetWidth,mDeltaY); _EL_   } _EL_  else   if (mBottomBorderActive) { _EL_     mDeltaY=Math.min(mDragLayer.getHeight() - (mBaselineY + mBaselineHeight),deltaY); _EL_     mDeltaY=Math.max(-mBaselineHeight + 2 * mTouchTargetWidth,mDeltaY); _EL_   } _EL_ } _EL_ ', 'public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException { _EL_   if (len < 0) { _EL_     throw new IllegalArgumentException("Can\'t have a negative input length!"); _EL_   } _EL_   int blockSize=getBlockSize(); _EL_   int length=getUpdateOutputSize(len); _EL_   if (length > 0) { _EL_     if ((outOff + length) > out.length) { _EL_       throw new OutputLengthException("output buffer too short"); _EL_     } _EL_   } _EL_   int resultLen=0; _EL_   int gapLen=buf.length - bufOff; _EL_   if (len > gapLen) { _EL_     System.arraycopy(in,inOff,buf,bufOff,gapLen); _EL_     resultLen+=cipher.processBlock(buf,0,out,outOff); _EL_     bufOff=0; _EL_     len-=gapLen; _EL_     inOff+=gapLen; _EL_     while (len > buf.length) { _EL_       resultLen+=cipher.processBlock(in,inOff,out,outOff + resultLen); _EL_       len-=blockSize; _EL_       inOff+=blockSize; _EL_     } _EL_   } _EL_   System.arraycopy(in,inOff,buf,bufOff,len); _EL_   bufOff+=len; _EL_   return resultLen; _EL_ } _EL_ ', 'public String numArcsTipText(){ _EL_   return "The number of arcs in the bayesian net, at most: n * (n - 1) / 2 and at least: (n - 1); with n = numAttributes"; _EL_ } _EL_ ', 'private static char[] zzUnpackCMap(String packed){ _EL_   char[] map=new char[0x10000]; _EL_   int i=0; _EL_   int j=0; _EL_   while (i < 168) { _EL_     int count=packed.charAt(i++); _EL_     char value=packed.charAt(i++); _EL_     do     map[j++]=value; _EL_  while (--count > 0); _EL_   } _EL_   return map; _EL_ } _EL_ ', 'protected static boolean match(Object ref,Object test){ _EL_   if (ref == null) { _EL_     return false; _EL_   } _EL_   if (ref == test) { _EL_     return true; _EL_   } _EL_   if (ref instanceof LabelList && test instanceof LabelList) { _EL_     final LabelList lref=(LabelList)ref; _EL_     final LabelList ltest=(LabelList)test; _EL_     final int s1=lref.size(), s2=ltest.size(); _EL_     if (s1 == 0 || s2 == 0) { _EL_       return false; _EL_     } _EL_     for (int i=0; i < s1; i++) { _EL_       String l1=lref.get(i); _EL_       if (l1 == null) { _EL_         continue; _EL_       } _EL_       for (int j=0; j < s2; j++) { _EL_         if (l1.equals(ltest.get(j))) { _EL_           return true; _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return ref.equals(test); _EL_ } _EL_ ', 'public static final boolean givesCheck(Position pos,Move m){ _EL_   boolean wtm=pos.whiteMove; _EL_   int oKingSq=pos.getKingSq(!wtm); _EL_   int oKing=wtm ? Piece.BKING : Piece.WKING; _EL_   int p=Piece.makeWhite(m.promoteTo == Piece.EMPTY ? pos.getPiece(m.from) : m.promoteTo); _EL_   int d1=BitBoard.getDirection(m.to,oKingSq); _EL_ switch (d1) { _EL_ case 8: _EL_ case -8: _EL_ case 1: _EL_ case -1: _EL_     if ((p == Piece.WQUEEN) || (p == Piece.WROOK))     if ((d1 != 0) && (MoveGen.nextPiece(pos,m.to,d1) == oKing))     return true; _EL_   break; _EL_ case 9: _EL_ case 7: _EL_ case -9: _EL_ case -7: _EL_ if ((p == Piece.WQUEEN) || (p == Piece.WBISHOP)) { _EL_   if ((d1 != 0) && (MoveGen.nextPiece(pos,m.to,d1) == oKing))   return true; _EL_ } _EL_  else if (p == Piece.WPAWN) { _EL_   if (((d1 > 0) == wtm) && (pos.getPiece(m.to + d1) == oKing))   return true; _EL_ } _EL_ break; _EL_ default : _EL_ if (d1 != 0) { _EL_ if (p == Piece.WKNIGHT) return true; _EL_ } _EL_ } _EL_ int d2=BitBoard.getDirection(m.from,oKingSq); _EL_ if ((d2 != 0) && (d2 != d1) && (MoveGen.nextPiece(pos,m.from,d2) == oKing)) { _EL_ int p2=MoveGen.nextPieceSafe(pos,m.from,-d2); _EL_ switch (d2) { _EL_ case 8: _EL_ case -8: _EL_ case 1: _EL_ case -1: _EL_ if ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WROOK : Piece.BROOK))) return true; _EL_ break; _EL_ case 9: _EL_ case 7: _EL_ case -9: _EL_ case -7: _EL_ if ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WBISHOP : Piece.BBISHOP))) return true; _EL_ break; _EL_ } _EL_ } _EL_ if ((m.promoteTo != Piece.EMPTY) && (d1 != 0) && (d1 == d2)) { _EL_ switch (d1) { _EL_ case 8: _EL_ case -8: _EL_ case 1: _EL_ case -1: _EL_ if ((p == Piece.WQUEEN) || (p == Piece.WROOK)) if ((d1 != 0) && (MoveGen.nextPiece(pos,m.from,d1) == oKing)) return true; _EL_ break; _EL_ case 9: _EL_ case 7: _EL_ case -9: _EL_ case -7: _EL_ if ((p == Piece.WQUEEN) || (p == Piece.WBISHOP)) { _EL_ if ((d1 != 0) && (MoveGen.nextPiece(pos,m.from,d1) == oKing)) return true; _EL_ } _EL_ break; _EL_ } _EL_ } _EL_ if (p == Piece.WKING) { _EL_ if (m.to - m.from == 2) { _EL_ if (MoveGen.nextPieceSafe(pos,m.from,-1) == oKing) return true; _EL_ if (MoveGen.nextPieceSafe(pos,m.from + 1,wtm ? 8 : -8) == oKing) return true; _EL_ } _EL_  else if (m.to - m.from == -2) { _EL_ if (MoveGen.nextPieceSafe(pos,m.from,1) == oKing) return true; _EL_ if (MoveGen.nextPieceSafe(pos,m.from - 1,wtm ? 8 : -8) == oKing) return true; _EL_ } _EL_ } _EL_  else if (p == Piece.WPAWN) { _EL_ if (pos.getPiece(m.to) == Piece.EMPTY) { _EL_ int dx=Position.getX(m.to) - Position.getX(m.from); _EL_ if (dx != 0) { _EL_ int epSq=m.from + dx; _EL_ int d3=BitBoard.getDirection(epSq,oKingSq); _EL_ switch (d3) { _EL_ case 9: _EL_ case 7: _EL_ case -9: _EL_ case -7: _EL_ if (MoveGen.nextPiece(pos,epSq,d3) == oKing) { _EL_ int p2=MoveGen.nextPieceSafe(pos,epSq,-d3); _EL_ if ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WBISHOP : Piece.BBISHOP))) return true; _EL_ } _EL_ break; _EL_ case 1: _EL_ if (MoveGen.nextPiece(pos,Math.max(epSq,m.from),d3) == oKing) { _EL_ int p2=MoveGen.nextPieceSafe(pos,Math.min(epSq,m.from),-d3); _EL_ if ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WROOK : Piece.BROOK))) return true; _EL_ } _EL_ break; _EL_ case -1: _EL_ if (MoveGen.nextPiece(pos,Math.min(epSq,m.from),d3) == oKing) { _EL_ int p2=MoveGen.nextPieceSafe(pos,Math.max(epSq,m.from),-d3); _EL_ if ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WROOK : Piece.BROOK))) return true; _EL_ } _EL_ break; _EL_ } _EL_ } _EL_ } _EL_ } _EL_ return false; _EL_ } _EL_ ', 'protected final boolean tryAcquire(int acquires){ _EL_   final Thread current=Thread.currentThread(); _EL_   int c=getState(); _EL_   if (c == 0) { _EL_     if (!hasQueuedPredecessors() && compareAndSetState(0,acquires)) { _EL_       setExclusiveOwnerThread(current); _EL_       return true; _EL_     } _EL_   } _EL_  else   if (current == getExclusiveOwnerThread()) { _EL_     int nextc=c + acquires; _EL_     if (nextc < 0)     throw new Error("Maximum lock count exceeded"); _EL_     setState(nextc); _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'protected void fireChangeEvent(){ _EL_   Iterator iter=m_listeners.iterator(); _EL_   ChangeEvent evt=new ChangeEvent(this); _EL_   while (iter.hasNext()) { _EL_     ChangeListener cl=(ChangeListener)iter.next(); _EL_     cl.stateChanged(evt); _EL_   } _EL_ } _EL_ ', 'private String printOFormat(final long x){ _EL_   String sx=null; _EL_   if (x == Long.MIN_VALUE) { _EL_     sx="1000000000000000000000"; _EL_   } _EL_  else   if (x < 0) { _EL_     final String t=Long.toString((~(-x - 1)) ^ Long.MIN_VALUE,8); _EL_ switch (t.length()) { _EL_ case 1: _EL_       sx="100000000000000000000" + t; _EL_     break; _EL_ case 2: _EL_   sx="10000000000000000000" + t; _EL_ break; _EL_ case 3: _EL_ sx="1000000000000000000" + t; _EL_ break; _EL_ case 4: _EL_ sx="100000000000000000" + t; _EL_ break; _EL_ case 5: _EL_ sx="10000000000000000" + t; _EL_ break; _EL_ case 6: _EL_ sx="1000000000000000" + t; _EL_ break; _EL_ case 7: _EL_ sx="100000000000000" + t; _EL_ break; _EL_ case 8: _EL_ sx="10000000000000" + t; _EL_ break; _EL_ case 9: _EL_ sx="1000000000000" + t; _EL_ break; _EL_ case 10: _EL_ sx="100000000000" + t; _EL_ break; _EL_ case 11: _EL_ sx="10000000000" + t; _EL_ break; _EL_ case 12: _EL_ sx="1000000000" + t; _EL_ break; _EL_ case 13: _EL_ sx="100000000" + t; _EL_ break; _EL_ case 14: _EL_ sx="10000000" + t; _EL_ break; _EL_ case 15: _EL_ sx="1000000" + t; _EL_ break; _EL_ case 16: _EL_ sx="100000" + t; _EL_ break; _EL_ case 17: _EL_ sx="10000" + t; _EL_ break; _EL_ case 18: _EL_ sx="1000" + t; _EL_ break; _EL_ case 19: _EL_ sx="100" + t; _EL_ break; _EL_ case 20: _EL_ sx="10" + t; _EL_ break; _EL_ case 21: _EL_ sx=\'1\' + t; _EL_ break; _EL_ } _EL_ } _EL_  else { _EL_ sx=Long.toString(x,8); _EL_ } _EL_ return printOFormat(sx); _EL_ } _EL_ ', 'private void fetchSearchServiceCardsFromServer(String keyword,String categoryId){ _EL_   final Map<String,String> params=new HashMap<String,String>(5); _EL_   params.put(HttpConstants.LATITUDE,SharedPreferenceHelper.getString(R.string.pref_latitude)); _EL_   params.put(HttpConstants.LONGITUDE,SharedPreferenceHelper.getString(R.string.pref_longitude)); _EL_   params.put(HttpConstants.TYPE,HttpConstants.SearchType.SERVICE_CARD); _EL_   params.put(HttpConstants.GROUP_ID,categoryId); _EL_   params.put(HttpConstants.PER,"20"); _EL_   params.put(HttpConstants.RADIUS,"50"); _EL_   params.put(HttpConstants.TITLE,keyword); _EL_   RetroCallback retroCallback; _EL_   retroCallback=new RetroCallback(this); _EL_   retroCallback.setRequestId(HttpConstants.ApiResponseCodes.SEARCH_SERVICES); _EL_   retroCallbackList.add(retroCallback); _EL_   params.put(HttpConstants.PAGE,"1"); _EL_   mYeloApi.getServiceCards(params,retroCallback); _EL_   mSwipeRefreshLayout.setRefreshing(true); _EL_ } _EL_ ', 'protected boolean[] datasetIntegrity(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing){ _EL_   print("associator doesn\'t alter original datasets"); _EL_   printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType); _EL_   print("..."); _EL_   int numTrain=getNumInstances(), numClasses=2, missingLevel=20; _EL_   boolean[] result=new boolean[2]; _EL_   Instances train=null; _EL_   Associator associator=null; _EL_   try { _EL_     train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance); _EL_     if (missingLevel > 0) { _EL_       addMissing(train,missingLevel,predictorMissing,classMissing); _EL_     } _EL_     associator=AbstractAssociator.makeCopies(getAssociator(),1)[0]; _EL_   } _EL_  catch (  Exception ex) { _EL_     throw new Error("Error setting up for tests: " + ex.getMessage()); _EL_   } _EL_   try { _EL_     Instances trainCopy=new Instances(train); _EL_     associator.buildAssociations(trainCopy); _EL_     compareDatasets(train,trainCopy); _EL_     println("yes"); _EL_     result[0]=true; _EL_   } _EL_  catch (  Exception ex) { _EL_     println("no"); _EL_     result[0]=false; _EL_     if (m_Debug) { _EL_       println("\\n=== Full Report ==="); _EL_       print("Problem during building"); _EL_       println(": " + ex.getMessage() + "\\n"); _EL_       println("Here is the dataset:\\n"); _EL_       println("=== Train Dataset ===\\n" + train.toString() + "\\n"); _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public boolean retainAll(AbstractIntList other){ _EL_   if (other.size() == 0) { _EL_     if (size == 0)     return false; _EL_     setSize(0); _EL_     return true; _EL_   } _EL_   int limit=other.size() - 1; _EL_   int j=0; _EL_   for (int i=0; i < size; i++) { _EL_     if (other.indexOfFromTo(getQuick(i),0,limit) >= 0)     setQuick(j++,getQuick(i)); _EL_   } _EL_   boolean modified=(j != size); _EL_   setSize(j); _EL_   return modified; _EL_ } _EL_ ', 'public static long now(){ _EL_   return System.currentTimeMillis(); _EL_ } _EL_ ', 'public boolean isPartitionTag(String field){ _EL_   if (partitions == null || (!isTag(field))) { _EL_     return false; _EL_   } _EL_   for (  String partition : partitions) { _EL_     if (partition.equals(field)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', '@Override @SuppressWarnings("unchecked") public void keyTyped(KeyEvent evt){ _EL_   int modifiers=evt.getModifiers(); _EL_   char c=evt.getKeyChar(); _EL_   if (c != KeyEvent.CHAR_UNDEFINED && (modifiers & InputEvent.ALT_MASK) == 0) { _EL_     if (c >= 0x20 && c != 0x7f) { _EL_       KeyStroke keyStroke=KeyStroke.getKeyStroke(Character.toUpperCase(c)); _EL_       Object o=currentBindings.get(keyStroke); _EL_       if (o instanceof Hashtable) { _EL_         currentBindings=(Hashtable)o; _EL_         return; _EL_       } _EL_  else       if (o instanceof ActionListener) { _EL_         currentBindings=bindings; _EL_         executeAction((ActionListener)o,evt.getSource(),String.valueOf(c)); _EL_         return; _EL_       } _EL_       currentBindings=bindings; _EL_       if (grabAction != null) { _EL_         handleGrabAction(evt); _EL_         return; _EL_       } _EL_       if (repeat && Character.isDigit(c)) { _EL_         repeatCount*=10; _EL_         repeatCount+=(c - \'0\'); _EL_         return; _EL_       } _EL_       executeAction(INSERT_CHAR,evt.getSource(),String.valueOf(evt.getKeyChar())); _EL_       repeatCount=0; _EL_       repeat=false; _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public Enumeration<Option> listOptions(){ _EL_   Vector<Option> result; _EL_   result=new Vector<Option>(); _EL_   result.addElement(new Option("\\tThe range of attributes to print in addition to the classification.\\n" + "\\t(default: none)","p",1,"-p <range>")); _EL_   result.addElement(new Option("\\tWhether to turn on the output of the class distribution.\\n" + "\\tOnly for nominal class attributes.\\n" + "\\t(default: off)","distribution",0,"-distribution")); _EL_   result.addElement(new Option("\\tThe number of digits after the decimal point.\\n" + "\\t(default: " + getDefaultNumDecimals() + ")","decimals",1,"-decimals <num>")); _EL_   result.addElement(new Option("\\tThe file to store the output in, instead of outputting it on stdout.\\n" + "\\tGets ignored if the supplied path is a directory.\\n" + "\\t(default: .)","file",1,"-file <path>")); _EL_   result.addElement(new Option("\\tIn case the data gets stored in a file, then this flag can be used\\n" + "\\tto suppress the regular output.\\n" + "\\t(default: not suppressed)","suppress",0,"-suppress")); _EL_   return result.elements(); _EL_ } _EL_ ', '@Override public void accept(final MethodVisitor mv){ _EL_ switch (type) { _EL_ case Opcodes.F_NEW: _EL_ case Opcodes.F_FULL: _EL_     mv.visitFrame(type,local.size(),asArray(local),stack.size(),asArray(stack)); _EL_   break; _EL_ case Opcodes.F_APPEND: _EL_ mv.visitFrame(type,local.size(),asArray(local),0,null); _EL_ break; _EL_ case Opcodes.F_CHOP: _EL_ mv.visitFrame(type,local.size(),null,0,null); _EL_ break; _EL_ case Opcodes.F_SAME: _EL_ mv.visitFrame(type,0,null,0,null); _EL_ break; _EL_ case Opcodes.F_SAME1: _EL_ mv.visitFrame(type,0,null,1,asArray(stack)); _EL_ break; _EL_ } _EL_ } _EL_ ', 'private static void computeProbabilitiesMultinomialLogistic(double[] responses){ _EL_   double[] r=responses.clone(); _EL_   for (int j=0; j < r.length; j++) { _EL_     double sum=0; _EL_     boolean overflow=false; _EL_     for (int k=0; k < r.length; k++) { _EL_       if (r[k] - r[j] > 700) { _EL_         overflow=true; _EL_         break; _EL_       } _EL_       sum+=Math.exp(r[k] - r[j]); _EL_     } _EL_     if (overflow) { _EL_       responses[j]=0.0; _EL_     } _EL_  else { _EL_       responses[j]=1.0 / sum; _EL_     } _EL_   } _EL_ } _EL_ ', 'private void addExportRemoveVolumeSteps(Workflow workflow,ProtectionSystem rpSystem,URI exportGroupID,List<URI> boIDs) throws InternalException { _EL_   ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupID); _EL_   String exportStep=workflow.createStepId(); _EL_   initTaskStatus(exportGroup,exportStep,Operation.Status.pending,"export remove volumes (that contain RP snapshots)"); _EL_   Map<URI,List<URI>> deviceToBlockObjects=new HashMap<URI,List<URI>>(); _EL_   for (  URI snapshotID : boIDs) { _EL_     BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotID); _EL_     List<BlockObject> objectsToRemove=getExportObjectsForBookmark(snapshot); _EL_     for (    BlockObject blockObject : objectsToRemove) { _EL_       List<URI> blockObjects=deviceToBlockObjects.get(blockObject.getStorageController()); _EL_       if (blockObjects == null) { _EL_         blockObjects=new ArrayList<URI>(); _EL_         deviceToBlockObjects.put(blockObject.getStorageController(),blockObjects); _EL_       } _EL_       blockObjects.add(blockObject.getId()); _EL_     } _EL_   } _EL_   for (  Map.Entry<URI,List<URI>> deviceEntry : deviceToBlockObjects.entrySet()) { _EL_     _log.info(String.format("Adding workflow step to remove RP bookmarks and associated target volumes from export.  ExportGroup: %s, Storage System: %s, BlockObjects: %s",exportGroup.getId(),deviceEntry.getKey(),deviceEntry.getValue())); _EL_     _exportWfUtils.generateExportGroupRemoveVolumes(workflow,STEP_EXPORT_REMOVE_SNAPSHOT,STEP_EXPORT_GROUP_DISABLE,deviceEntry.getKey(),exportGroupID,deviceEntry.getValue()); _EL_   } _EL_   _log.info(String.format("Created export group remove snapshot steps in workflow: %s",exportGroup.getId())); _EL_ } _EL_ ', 'void clearResourceIndex(String resourceTypeName){ _EL_   Set resourceTypes=new HashSet(); _EL_   resourceTypes.addAll(resourceIndices.keySet()); _EL_   Iterator iter=resourceTypes.iterator(); _EL_   while (iter.hasNext()) { _EL_     String resourceType=(String)iter.next(); _EL_     if (resourceType.equalsIgnoreCase(resourceTypeName)) { _EL_       resourceIndices.remove(resourceType); _EL_       break; _EL_     } _EL_   } _EL_ } _EL_ ', 'public Optional<Histogram> histogram(){ _EL_   return Optional.empty(); _EL_ } _EL_ ', 'long freeSpaceWindows(String path,long timeout) throws IOException { _EL_   path=FilenameUtils.normalize(path,false); _EL_   if (path.length() > 0 && path.charAt(0) != \'"\') { _EL_     path="\\"" + path + "\\""; _EL_   } _EL_   String[] cmdAttribs=new String[]{"cmd.exe","/C","dir /a /-c " + path}; _EL_   List<String> lines=performCommand(cmdAttribs,Integer.MAX_VALUE,timeout); _EL_   for (int i=lines.size() - 1; i >= 0; i--) { _EL_     String line=lines.get(i); _EL_     if (line.length() > 0) { _EL_       return parseDir(line,path); _EL_     } _EL_   } _EL_   throw new IOException("Command line \'dir /-c\' did not return any info " + "for path \'" + path + "\'"); _EL_ } _EL_ ', '@Inject public ProjectTypeRegistry(Set<ProjectTypeDef> types){ _EL_   projectTypes=new HashMap<>(); _EL_   validatedData=new HashMap<>(); _EL_   validate(types); _EL_   for (  ProjectTypeDef type : validatedData.values()) { _EL_     try { _EL_       init(type); _EL_     } _EL_  catch (    ProjectTypeConstraintException e) { _EL_       LOG.error(e.getMessage()); _EL_     } _EL_   } _EL_ } _EL_ ', '@Override default CompletableFuture<Integer> sumInt(final ToIntFunction<? super T> fn){ _EL_   return CompletableFuture.supplyAsync(null,getExec()); _EL_ } _EL_ ', 'protected void addMissing(Instances data,int level,boolean predictorMissing,boolean classMissing){ _EL_   int classIndex=data.classIndex(); _EL_   Random random=new Random(1); _EL_   for (int i=0; i < data.numInstances(); i++) { _EL_     Instance current=data.instance(i); _EL_     for (int j=0; j < data.numAttributes(); j++) { _EL_       if (((j == classIndex) && classMissing) || ((j != classIndex) && predictorMissing)) { _EL_         if (Math.abs(random.nextInt()) % 100 < level)         current.setMissing(j); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public static void deleteUserFromAuthenticationInfo(AuthenticationInfo authenticationInfo) throws ServerRuntimeException { _EL_   String username=authenticationInfo.getUsername(); _EL_   String passwordFileLocation=authenticationInfo.getPasswordFileLocation(); _EL_   try { _EL_     PropertiesConfiguration props=new PropertiesConfiguration(passwordFileLocation); _EL_     String usernameInFile=props.getString(username); _EL_     if (usernameInFile == null) { _EL_       throw new ServerRuntimeException(MessageFormat.format("Username does not exist: {0}",username)); _EL_     } _EL_     props.clearProperty(username); _EL_     props.save(); _EL_   } _EL_  catch (  org.apache.commons.configuration.ConfigurationException ce) { _EL_     logger.error("Error while saving properties for file:" + authenticationInfo.getPasswordFileLocation(),ce); _EL_     throw new ServerRuntimeException("Error while saving Credentials: " + ce.getMessage()); _EL_   } _EL_ } _EL_ ', 'public void endElement(String elementName) throws SAXException { _EL_   if (m_firstTagNotEmitted) { _EL_     flush(); _EL_   } _EL_   m_handler.endElement(elementName); _EL_ } _EL_ ', '@Override public boolean equals(Object o){ _EL_   if (this == o)   return true; _EL_   if (o == null || getClass() != o.getClass())   return false; _EL_   AbstractItem<?,?> that=(AbstractItem<?,?>)o; _EL_   return mIdentifier == that.mIdentifier; _EL_ } _EL_ ', 'private static List<String> splitCamelCase(String className){ _EL_   String remaining=className; _EL_   List<String> result=new ArrayList<String>(); _EL_   while (!remaining.isEmpty()) { _EL_     boolean found=false; _EL_     for (int i=1; i < remaining.length(); i++) { _EL_       if (Character.isUpperCase(remaining.charAt(i))) { _EL_         result.add(remaining.substring(0,i)); _EL_         remaining=remaining.substring(i); _EL_         found=true; _EL_         break; _EL_       } _EL_     } _EL_     if (!found) { _EL_       result.add(remaining); _EL_       remaining=""; _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public void addSelectionColumn(GridField mField){ _EL_   log.config(mField.getHeader()); _EL_   int displayLength=mField.getDisplayLength(); _EL_   if (displayLength <= 0 || displayLength > FIELDLENGTH)   mField.setDisplayLength(FIELDLENGTH); _EL_  else   displayLength=0; _EL_   WEditor editor=null; _EL_   Label label=null; _EL_   Row panel=new Row(); _EL_   contentSimpleRows.appendChild(panel); _EL_   if (mField.isRange()) { _EL_     Hbox box=new Hbox(); _EL_     editor=WebEditorFactory.getEditor(mField,false); _EL_     label=editor.getLabel(); _EL_     editor.setMandatory(false); _EL_     editor.setReadWrite(true); _EL_     editor.dynamicDisplay(); _EL_     Component fieldLabel=editor.getComponent(); _EL_     box.appendChild(editor.getComponent()); _EL_     rangeFirstEditor.add(mField.getColumnName()); _EL_     WEditor toRangeEditor=WebEditorFactory.getEditor(mField,false); _EL_     toRangeEditor.setMandatory(false); _EL_     toRangeEditor.setReadWrite(true); _EL_     toRangeEditor.dynamicDisplay(); _EL_     m_sEditors2.add(toRangeEditor); _EL_     Label separator=new Label(" - "); _EL_     box.appendChild(separator); _EL_     Component fieldLabel1=toRangeEditor.getComponent(); _EL_     box.appendChild(toRangeEditor.getComponent()); _EL_     if (displayLength > 0)     mField.setDisplayLength(displayLength); _EL_     if (isTwoColumns) { _EL_       if (!isPair)       panel=new Row(); _EL_     } _EL_  else     panel=new Row(); _EL_     panel.appendChild(LayoutUtils.makeRightAlign(label)); _EL_     panel.appendChild(box); _EL_     fieldLabel.addEventListener(Events.ON_OK,this); _EL_     fieldLabel1.addEventListener(Events.ON_OK,this); _EL_   } _EL_  else { _EL_     editor=WebEditorFactory.getEditor(mField,false); _EL_     label=editor.getLabel(); _EL_     editor.setMandatory(false); _EL_     editor.setReadWrite(true); _EL_     editor.dynamicDisplay(); _EL_     Component fieldLabel=editor.getComponent(); _EL_     if (displayLength > 0)     mField.setDisplayLength(displayLength); _EL_     panel.appendChild(LayoutUtils.makeRightAlign(label)); _EL_     panel.appendChild(fieldLabel); _EL_     fieldLabel.addEventListener(Events.ON_OK,this); _EL_     m_sEditors2.add(null); _EL_   } _EL_   m_sEditors.add(editor); _EL_ } _EL_ ', 'private void drawTextElements(Canvas canvas,float textSize,Typeface typeface,ColorStateList textColor,String[] texts,float[] textX,float[] textY,Paint paint,int alpha,boolean showActivated,int activatedDegrees,boolean activatedOnly){ _EL_   paint.setTextSize(textSize); _EL_   paint.setTypeface(typeface); _EL_   final float activatedIndex=activatedDegrees / (360.0f / NUM_POSITIONS); _EL_   final int activatedFloor=(int)activatedIndex; _EL_   final int activatedCeil=((int)Math.ceil(activatedIndex)) % NUM_POSITIONS; _EL_   for (int i=0; i < 12; i++) { _EL_     final boolean activated=(activatedFloor == i || activatedCeil == i); _EL_     if (activatedOnly && !activated) { _EL_       continue; _EL_     } _EL_     final int[] stateMask=new int[]{android.R.attr.state_enabled,(showActivated && activated ? android.R.attr.state_selected : 0)}; _EL_     final int color=textColor.getColorForState(stateMask,0); _EL_     paint.setColor(color); _EL_     paint.setAlpha(getMultipliedAlpha(color,alpha)); _EL_     canvas.drawText(texts[i],textX[i],textY[i],paint); _EL_   } _EL_ } _EL_ ', 'void zrot(double theta){ _EL_   theta*=(pi / 180); _EL_   double ct=Math.cos(theta); _EL_   double st=Math.sin(theta); _EL_   float Nyx=(float)(yx * ct + xx * st); _EL_   float Nyy=(float)(yy * ct + xy * st); _EL_   float Nyz=(float)(yz * ct + xz * st); _EL_   float Nyo=(float)(yo * ct + xo * st); _EL_   float Nxx=(float)(xx * ct - yx * st); _EL_   float Nxy=(float)(xy * ct - yy * st); _EL_   float Nxz=(float)(xz * ct - yz * st); _EL_   float Nxo=(float)(xo * ct - yo * st); _EL_   yo=Nyo; _EL_   yx=Nyx; _EL_   yy=Nyy; _EL_   yz=Nyz; _EL_   xo=Nxo; _EL_   xx=Nxx; _EL_   xy=Nxy; _EL_   xz=Nxz; _EL_ } _EL_ ', 'protected BalancedWebResource createHttpsClient(final String username,final String password,List<String> hosts) throws NoSuchAlgorithmException { _EL_   return createHttpsClient(username,password,hosts,true); _EL_ } _EL_ ', '@SuppressWarnings("rawtypes") public DataResponse paginateList(Map<String,String> requestParams,PaginateRequest paginateRequest,Object query,String defaultSort,Map properties){ _EL_   if (paginateRequest == null) { _EL_     paginateRequest=new PaginateRequest(); _EL_   } _EL_   if (paginateRequest.getStart() == null) { _EL_     paginateRequest.setStart(RequestUtil.getInteger(requestParams,"start",0)); _EL_   } _EL_   if (paginateRequest.getSize() == null) { _EL_     paginateRequest.setSize(RequestUtil.getInteger(requestParams,"size",10)); _EL_   } _EL_   if (paginateRequest.getOrder() == null) { _EL_     paginateRequest.setOrder(requestParams.get("order")); _EL_   } _EL_   if (paginateRequest.getSort() == null) { _EL_     paginateRequest.setSort(requestParams.get("sort")); _EL_   } _EL_   Integer start=paginateRequest.getStart(); _EL_   if (start == null || start < 0) { _EL_     start=0; _EL_   } _EL_   Integer size=paginateRequest.getSize(); _EL_   if (size == null || size < 0) { _EL_     size=10; _EL_   } _EL_   String sort=paginateRequest.getSort(); _EL_   if (sort == null) { _EL_     sort=defaultSort; _EL_   } _EL_   String order=paginateRequest.getOrder(); _EL_   if (order == null) { _EL_     order="asc"; _EL_   } _EL_   if (sort != null && !properties.isEmpty()) { _EL_     Object qp=properties.get(sort); _EL_     if (qp == null) { _EL_       throw new ActivitiIllegalArgumentException("Value for param \'sort\' is not valid, \'" + sort + "\' is not a valid property"); _EL_     } _EL_     if (query instanceof AbstractQuery) { _EL_       AbstractQuery queryObject=(AbstractQuery)query; _EL_       QueryProperty queryProperty=(QueryProperty)qp; _EL_       queryObject.orderBy(queryProperty); _EL_       if (order.equals("asc")) { _EL_         queryObject.asc(); _EL_       } _EL_  else       if (order.equals("desc")) { _EL_         queryObject.desc(); _EL_       } _EL_  else { _EL_         throw new ActivitiIllegalArgumentException("Value for param \'order\' is not valid : \'" + order + "\', must be \'asc\' or \'desc\'"); _EL_       } _EL_     } _EL_  else     if (query instanceof org.activiti.idm.engine.impl.AbstractQuery) { _EL_       org.activiti.idm.engine.impl.AbstractQuery queryObject=(org.activiti.idm.engine.impl.AbstractQuery)query; _EL_       org.activiti.idm.api.QueryProperty queryProperty=(org.activiti.idm.api.QueryProperty)qp; _EL_       queryObject.orderBy(queryProperty); _EL_       if (order.equals("asc")) { _EL_         queryObject.asc(); _EL_       } _EL_  else       if (order.equals("desc")) { _EL_         queryObject.desc(); _EL_       } _EL_  else { _EL_         throw new ActivitiIllegalArgumentException("Value for param \'order\' is not valid : \'" + order + "\', must be \'asc\' or \'desc\'"); _EL_       } _EL_     } _EL_   } _EL_   DataResponse response=new DataResponse(); _EL_   response.setStart(start); _EL_   response.setSort(sort); _EL_   response.setOrder(order); _EL_   if (query instanceof AbstractQuery) { _EL_     AbstractQuery queryObject=(AbstractQuery)query; _EL_     List list=processList(queryObject.listPage(start,size)); _EL_     response.setTotal(queryObject.count()); _EL_     response.setSize(list.size()); _EL_     response.setData(list); _EL_   } _EL_  else   if (query instanceof org.activiti.idm.engine.impl.AbstractQuery) { _EL_     org.activiti.idm.engine.impl.AbstractQuery queryObject=(org.activiti.idm.engine.impl.AbstractQuery)query; _EL_     List list=processList(queryObject.listPage(start,size)); _EL_     response.setTotal(queryObject.count()); _EL_     response.setSize(list.size()); _EL_     response.setData(list); _EL_   } _EL_   return response; _EL_ } _EL_ ', 'public void checkAndSetupStreamsDrawer(){ _EL_   setupListViewAdapter(); _EL_ } _EL_ ', 'public void finished() throws IOException { _EL_   outputStream.close(); _EL_ } _EL_ ', 'private int uint16FromData(int offset){ _EL_   return twoBytesToInt(Arrays.copyOfRange(data(),offset,offset + 2),Constants.CC2540_BYTE_ORDER); _EL_ } _EL_ ', 'public void addActionListener(ActionListener newListener){ _EL_   m_listeners.add(newListener); _EL_ } _EL_ ', '@Deprecated public JavaPluginLoader(Server instance){ _EL_   Validate.notNull(instance,"Server cannot be null"); _EL_   server=instance; _EL_ } _EL_ ', 'private void handleStaticSiteRequest(StaticSiteRequest.PointRequest request,TransportNetwork transportNetwork,TaskStatistics ts){ _EL_   StaticComputer computer=new StaticComputer(request,transportNetwork,ts); _EL_   if (request.request.bucket != null)   computer.run(); _EL_  else { _EL_     try { _EL_       PipedInputStream pis=new PipedInputStream(); _EL_       PipedOutputStream pos=new PipedOutputStream(pis); _EL_       finishPriorityTask(request,pis); _EL_       computer.write(pos); _EL_       pos.close(); _EL_     } _EL_  catch (    IOException e) { _EL_       LOG.error("Could not write static output to broker",e); _EL_     } _EL_   } _EL_   deleteRequest(request); _EL_ } _EL_ ', 'public void clearOnPageChangeListeners(){ _EL_   if (mOnPageChangeListeners != null) { _EL_     mOnPageChangeListeners.clear(); _EL_   } _EL_ } _EL_ ', '@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="FE_FLOATING_POINT_EQUALITY",justification="OK to compare floating point") protected void newInternalMinute(){ _EL_   double origCurrent=mCurrentIntensity; _EL_   int origState=mState; _EL_   int steps=getNumberOfSteps(); _EL_   if ((mTransitionDuration > 0) && (steps > 0)) { _EL_     double stepsPerMinute=steps / mTransitionDuration; _EL_     double stepSize=1 / (double)steps; _EL_     double intensityDiffPerMinute=stepSize * stepsPerMinute; _EL_     if (Math.abs(mCurrentIntensity - mTransitionTargetIntensity) != 0) { _EL_       if (log.isDebugEnabled()) { _EL_         log.debug("before Target: " + mTransitionTargetIntensity + " Current: "+ mCurrentIntensity); _EL_       } _EL_       if (mTransitionTargetIntensity > mCurrentIntensity) { _EL_         mCurrentIntensity=mCurrentIntensity + intensityDiffPerMinute; _EL_         if (mCurrentIntensity >= mTransitionTargetIntensity) { _EL_           mCurrentIntensity=mTransitionTargetIntensity; _EL_           if (mCurrentIntensity >= getMaxIntensity()) { _EL_             mState=ON; _EL_           } _EL_  else { _EL_             mState=INTERMEDIATE; _EL_           } _EL_         } _EL_       } _EL_  else { _EL_         mCurrentIntensity=mCurrentIntensity - intensityDiffPerMinute; _EL_         if (mCurrentIntensity <= mTransitionTargetIntensity) { _EL_           mCurrentIntensity=mTransitionTargetIntensity; _EL_           if (mCurrentIntensity <= getMinIntensity()) { _EL_             mState=OFF; _EL_           } _EL_  else { _EL_             mState=INTERMEDIATE; _EL_           } _EL_         } _EL_       } _EL_       sendIntensity(mCurrentIntensity); _EL_       if (log.isDebugEnabled()) { _EL_         log.debug("after Target: " + mTransitionTargetIntensity + " Current: "+ mCurrentIntensity); _EL_       } _EL_     } _EL_   } _EL_   if (origCurrent != mCurrentIntensity) { _EL_     firePropertyChange("CurrentIntensity",Double.valueOf(origCurrent),Double.valueOf(mCurrentIntensity)); _EL_     if (log.isDebugEnabled()) { _EL_       log.debug("firePropertyChange intensity " + origCurrent + " -> "+ mCurrentIntensity); _EL_     } _EL_   } _EL_   if (origState != mState) { _EL_     firePropertyChange("KnownState",Integer.valueOf(origState),Integer.valueOf(mState)); _EL_     if (log.isDebugEnabled()) { _EL_       log.debug("firePropertyChange intensity " + origCurrent + " -> "+ mCurrentIntensity); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void resetOutputBuilders(){ _EL_   ansi=Ansi.ansi(); _EL_   stringBuilder=new StringBuilder(); _EL_ } _EL_ ', 'protected void drawNormalMessage(DrawHandler drawHandler,PointDouble send,PointDouble receive,RelationDrawer.ArrowEndType arrowEndType,boolean fillArrow,DrawingInfo drawingInfo){ _EL_   Line line=new Line(send,receive); _EL_   drawHandler.drawLine(line); _EL_   drawHandler.setLineType(LineType.SOLID); _EL_   RelationDrawer.drawArrowToLine(receive,drawHandler,line,false,arrowEndType,fillArrow,false); _EL_   double height=send.y - drawingInfo.getVerticalStart(sendTick); _EL_   double topLeftX; _EL_   AlignHorizontal hAlignment; _EL_   if (from == getFirstLifeline()) { _EL_     topLeftX=send.x; _EL_     hAlignment=AlignHorizontal.LEFT; _EL_   } _EL_  else { _EL_     topLeftX=receive.x; _EL_     hAlignment=AlignHorizontal.RIGHT; _EL_   } _EL_   if (duration == 0) { _EL_     hAlignment=AlignHorizontal.CENTER; _EL_   } _EL_   topLeftX+=LIFELINE_TEXT_PADDING; _EL_   TextSplitter.drawText(drawHandler,textLines,topLeftX,send.y - height,Math.abs(send.x - receive.x) - LIFELINE_TEXT_PADDING * 2,height,hAlignment,AlignVertical.BOTTOM); _EL_ } _EL_ ', 'public static String format(Money money){ _EL_   long microAmount=0; _EL_   if (money != null) { _EL_     microAmount=money.getMicroAmount(); _EL_   } _EL_  else { _EL_     return PLACEHOLDER_NULL; _EL_   } _EL_   double amount=(double)microAmount / MICRO_UNITS; _EL_   return String.format(FORMAT_MONEY,amount); _EL_ } _EL_ ', 'protected void angularObjectClientBind(NotebookSocket conn,HashSet<String> userAndRoles,Notebook notebook,Message fromMessage) throws Exception { _EL_   String noteId=fromMessage.getType("noteId"); _EL_   String varName=fromMessage.getType("name"); _EL_   Object varValue=fromMessage.get("value"); _EL_   String paragraphId=fromMessage.getType("paragraphId"); _EL_   Note note=notebook.getNote(noteId); _EL_   if (paragraphId == null) { _EL_     throw new IllegalArgumentException("target paragraph not specified for " + "angular value bind"); _EL_   } _EL_   if (note != null) { _EL_     final InterpreterGroup interpreterGroup=findInterpreterGroupForParagraph(note,paragraphId); _EL_     final AngularObjectRegistry registry=interpreterGroup.getAngularObjectRegistry(); _EL_     if (registry instanceof RemoteAngularObjectRegistry) { _EL_       RemoteAngularObjectRegistry remoteRegistry=(RemoteAngularObjectRegistry)registry; _EL_       pushAngularObjectToRemoteRegistry(noteId,paragraphId,varName,varValue,remoteRegistry,interpreterGroup.getId(),conn); _EL_     } _EL_  else { _EL_       pushAngularObjectToLocalRepo(noteId,paragraphId,varName,varValue,registry,interpreterGroup.getId(),conn); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void buildDepreciation(){ _EL_   if (!isDepreciated()) { _EL_     return; _EL_   } _EL_   StringBuffer sb=new StringBuffer(); _EL_   load(get_TrxName()); _EL_   MAssetAcct assetacct=getA_AssetAcct(null,get_TrxName()); _EL_   MDepreciation depreciation_C=MDepreciation.get(getCtx(),assetacct.getA_Depreciation_ID()); _EL_   MDepreciation depreciation_F=MDepreciation.get(getCtx(),assetacct.getA_Depreciation_F_ID()); _EL_   int offset_C=0, offset_F=0; _EL_   BigDecimal assetCost=getActualCost(); _EL_   BigDecimal accumDep_C=getA_Accumulated_Depr(false); _EL_   BigDecimal accumDep_F=getA_Accumulated_Depr(true); _EL_   int lifePeriods_C=getUseLifeMonths(false) + offset_C; _EL_   int lifePeriods_F=getUseLifeMonths(true) + offset_F; _EL_   int lifePeriods=(lifePeriods_C > lifePeriods_F ? lifePeriods_C : lifePeriods_F); _EL_   BigDecimal exp_C=Env.ZERO; _EL_   BigDecimal exp_F=Env.ZERO; _EL_   if (CLogMgt.isLevelFine()) { _EL_     sb.append("currentPeriod=" + getA_Current_Period() + ", AssetServiceDate="+ getAssetDepreciationDate()+ "\\n"); _EL_     sb.append("offset: C|F=" + offset_C + "|"+ offset_F+ "\\n"); _EL_     sb.append("life: C|F=" + lifePeriods_C + "|"+ lifePeriods_F+ " + offset ="+ lifePeriods+ "\\n"); _EL_   } _EL_   truncDepreciation(); _EL_   int A_Current_Period=getA_Current_Period(); _EL_   for (int currentPeriod=A_Current_Period, cnt=1; currentPeriod <= lifePeriods; currentPeriod++, cnt++) { _EL_     exp_C=Env.ZERO; _EL_     exp_F=Env.ZERO; _EL_     String help="" + accumDep_C + "|"+ accumDep_F+ " + "; _EL_     if (lifePeriods_C > currentPeriod || !depreciation_C.requireLastPeriodAdjustment()) { _EL_       setFiscal(false); _EL_       exp_C=depreciation_C.invoke(this,assetacct,currentPeriod,accumDep_C); _EL_       accumDep_C=accumDep_C.add(exp_C); _EL_     } _EL_  else     if (lifePeriods_C == currentPeriod) { _EL_       exp_C=assetCost.subtract(accumDep_C); _EL_       accumDep_C=assetCost; _EL_     } _EL_     if (lifePeriods_F > currentPeriod || !depreciation_F.requireLastPeriodAdjustment()) { _EL_       setFiscal(true); _EL_       exp_F=depreciation_F.invoke(this,assetacct,currentPeriod,accumDep_F); _EL_       accumDep_F=accumDep_F.add(exp_F); _EL_     } _EL_  else     if (lifePeriods_F == currentPeriod) { _EL_       exp_F=assetCost.subtract(accumDep_F); _EL_       accumDep_F=assetCost; _EL_     } _EL_     help+="" + exp_C + "|"+ exp_F+ " = "+ accumDep_C+ "|"+ accumDep_F; _EL_     int months=0; _EL_     months=months + (currentPeriod - A_Current_Period); _EL_     Timestamp dateAcct=TimeUtil.getMonthLastDay(TimeUtil.addMonths(getDateAcct(),months)); _EL_     MDepreciationExp.createDepreciation(this,currentPeriod,dateAcct,exp_C,exp_F,accumDep_C,accumDep_F,help,get_TrxName()); _EL_     if (CLogMgt.isLevelFine()) { _EL_       String info="" + cnt + ": period="+ currentPeriod+ "/"+ lifePeriods_C+ "|"+ lifePeriods_F+ ", exp="+ exp_C+ "|"+ exp_F+ ", accumDep="+ accumDep_C+ "|"+ accumDep_F+ ", DateAcct="+ dateAcct; _EL_       log.fine("=> " + info + Env.NL+ Env.NL); _EL_       sb.append(info + Env.NL); _EL_     } _EL_   } _EL_   log.fine(sb.toString()); _EL_   m_buildDepreciation=false; _EL_ } _EL_ ', '@Override public boolean contains(Object value){ _EL_   final Iterator<Comparable> iter=new StepIterator(this,1); _EL_   if (value == null) { _EL_     return false; _EL_   } _EL_   while (iter.hasNext()) { _EL_     if (DefaultTypeTransformation.compareEqual(value,iter.next()))     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', '@Override public void acceptDataPoint(ChartEvent e){ _EL_   if (e.getReset()) { _EL_     m_xCount=0; _EL_     m_max=1; _EL_     m_min=0; _EL_   } _EL_   if (m_outputFrame != null) { _EL_     boolean refresh=false; _EL_     if (e.getLegendText() != null & e.getLegendText() != m_legendText) { _EL_       m_legendText=e.getLegendText(); _EL_       refresh=true; _EL_     } _EL_     if (e.getMin() != m_min || e.getMax() != m_max) { _EL_       m_oldMax=m_max; _EL_       m_oldMin=m_min; _EL_       m_max=e.getMax(); _EL_       m_min=e.getMin(); _EL_       refresh=true; _EL_       m_yScaleUpdate=true; _EL_     } _EL_     if (refresh) { _EL_       m_legendPanel.repaint(); _EL_       m_scalePanel.repaint(); _EL_     } _EL_     acceptDataPoint(e.getDataPoint()); _EL_   } _EL_   m_xCount++; _EL_ } _EL_ ', 'private int currentDepth(){ _EL_   try { _EL_     Integer oneBased=((Integer)DEPTH_FIELD.get(this)); _EL_     return oneBased - 1; _EL_   } _EL_  catch (  IllegalAccessException e) { _EL_     throw new AssertionError(e); _EL_   } _EL_ } _EL_ ', '@Override public void closingOK(){ _EL_   List<AddUserFields.AttributeSpec> specs=new ArrayList<AddUserFields.AttributeSpec>(); _EL_   for (int i=0; i < m_listModel.size(); i++) { _EL_     AddUserFields.AttributeSpec a=(AddUserFields.AttributeSpec)m_listModel.elementAt(i); _EL_     specs.add(a); _EL_   } _EL_   if (m_modifyL != null) { _EL_     m_modifyL.setModifiedStatus(AddUserFieldsCustomizer.this,true); _EL_   } _EL_   m_filter.setAttributeSpecs(specs); _EL_ } _EL_ ', 'public boolean isEmpty(){ _EL_   return items.isEmpty(); _EL_ } _EL_ ', "private static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){ _EL_   StringBuilder tmp=new StringBuilder(count); _EL_   int submode=initialSubmode; _EL_   int idx=0; _EL_   while (true) { _EL_     char ch=msg.charAt(startpos + idx); _EL_ switch (submode) { _EL_ case SUBMODE_ALPHA: _EL_       if (isAlphaUpper(ch)) { _EL_         if (ch == ' ') { _EL_           tmp.append((char)26); _EL_         } _EL_  else { _EL_           tmp.append((char)(ch - 65)); _EL_         } _EL_       } _EL_  else { _EL_         if (isAlphaLower(ch)) { _EL_           submode=SUBMODE_LOWER; _EL_           tmp.append((char)27); _EL_           continue; _EL_         } _EL_  else         if (isMixed(ch)) { _EL_           submode=SUBMODE_MIXED; _EL_           tmp.append((char)28); _EL_           continue; _EL_         } _EL_  else { _EL_           tmp.append((char)29); _EL_           tmp.append((char)PUNCTUATION[ch]); _EL_           break; _EL_         } _EL_       } _EL_     break; _EL_ case SUBMODE_LOWER: _EL_   if (isAlphaLower(ch)) { _EL_     if (ch == ' ') { _EL_       tmp.append((char)26); _EL_     } _EL_  else { _EL_       tmp.append((char)(ch - 97)); _EL_     } _EL_   } _EL_  else { _EL_     if (isAlphaUpper(ch)) { _EL_       tmp.append((char)27); _EL_       tmp.append((char)(ch - 65)); _EL_       break; _EL_     } _EL_  else     if (isMixed(ch)) { _EL_       submode=SUBMODE_MIXED; _EL_       tmp.append((char)28); _EL_       continue; _EL_     } _EL_  else { _EL_       tmp.append((char)29); _EL_       tmp.append((char)PUNCTUATION[ch]); _EL_       break; _EL_     } _EL_   } _EL_ break; _EL_ case SUBMODE_MIXED: _EL_ if (isMixed(ch)) { _EL_ tmp.append((char)MIXED[ch]); _EL_ } _EL_  else { _EL_ if (isAlphaUpper(ch)) { _EL_   submode=SUBMODE_ALPHA; _EL_   tmp.append((char)28); _EL_   continue; _EL_ } _EL_  else if (isAlphaLower(ch)) { _EL_   submode=SUBMODE_LOWER; _EL_   tmp.append((char)27); _EL_   continue; _EL_ } _EL_  else { _EL_   if (startpos + idx + 1 < count) { _EL_     char next=msg.charAt(startpos + idx + 1); _EL_     if (isPunctuation(next)) { _EL_       submode=SUBMODE_PUNCTUATION; _EL_       tmp.append((char)25); _EL_       continue; _EL_     } _EL_   } _EL_   tmp.append((char)29); _EL_   tmp.append((char)PUNCTUATION[ch]); _EL_ } _EL_ } _EL_ break; _EL_ default : _EL_ if (isPunctuation(ch)) { _EL_ tmp.append((char)PUNCTUATION[ch]); _EL_ } _EL_  else { _EL_ submode=SUBMODE_ALPHA; _EL_ tmp.append((char)29); _EL_ continue; _EL_ } _EL_ } _EL_ idx++; _EL_ if (idx >= count) { _EL_ break; _EL_ } _EL_ } _EL_ char h=0; _EL_ int len=tmp.length(); _EL_ for (int i=0; i < len; i++) { _EL_ boolean odd=(i % 2) != 0; _EL_ if (odd) { _EL_ h=(char)((h * 30) + tmp.charAt(i)); _EL_ sb.append(h); _EL_ } _EL_  else { _EL_ h=tmp.charAt(i); _EL_ } _EL_ } _EL_ if ((len % 2) != 0) { _EL_ sb.append((char)((h * 30) + 29)); _EL_ } _EL_ return submode; _EL_ } _EL_ ", 'public byte[] toBytes(){ _EL_   try { _EL_     ByteArrayOutputStream out=new ByteArrayOutputStream(); _EL_     _field.store(out,null); _EL_     return out.toByteArray(); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new IllegalStateException(e); _EL_   } _EL_ } _EL_ ', '@HLEUnimplemented @HLEFunction(nid=0x3C37A7A6,version=150,checkInsideInterrupt=true) public int sceMpegNextAvcRpAu(@CheckArgument("checkMpegHandle") int mpeg,int streamUid){ _EL_   if (!streamMap.containsKey(streamUid)) { _EL_     log.warn(String.format("sceMpegNextAvcRpAu bad stream 0x%X",streamUid)); _EL_     return -1; _EL_   } _EL_   int result=hleMpegGetAvcAu(null); _EL_   if (result != 0) { _EL_     if (log.isDebugEnabled()) { _EL_       log.debug(String.format("sceMpegNextAvcRpAu returning 0x%08X",result)); _EL_     } _EL_     return result; _EL_   } _EL_   videoFrameCount++; _EL_   startedMpeg=true; _EL_   return 0; _EL_ } _EL_ ', 'private FileChannel updateCache(String filePath){ _EL_   FileChannel fileChannel=fileNameAndStreamCache.get(filePath); _EL_   try { _EL_     if (null == fileChannel) { _EL_       FileInputStream stream=new FileInputStream(filePath); _EL_       fileChannel=stream.getChannel(); _EL_       fileNameAndStreamCache.put(filePath,fileChannel); _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     LOGGER.error(e,e.getMessage()); _EL_   } _EL_   return fileChannel; _EL_ } _EL_ ', 'public static void checkState(boolean expression,Object errorMessage){ _EL_   if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) { _EL_     throw new IllegalStateException(String.valueOf(errorMessage)); _EL_   } _EL_ } _EL_ ', 'MutableBigInteger(MutableBigInteger val){ _EL_   intLen=val.intLen; _EL_   value=Arrays.copyOfRange(val.value,val.offset,val.offset + intLen); _EL_ } _EL_ ', '@RequestMapping(value="/SAML2/IDPSSO/{tenant:.*}") public void ssoBindingError(Locale locale,@PathVariable(value="tenant") String tenant,HttpServletResponse response) throws IOException { _EL_   logger.info("IDP SSO binding error! The client locale is " + locale.toString() + ", tenant is "+ tenant); _EL_   ssoDefaultTenantError(locale,response); _EL_ } _EL_ ', 'public grammaticalityEstimator(Set FileNames,int iMinChar,int iMaxChar,int iCharWindow,int iMinWord,int iMaxWord,int iWordWindow){ _EL_   iMinCharNGram=iMinChar; _EL_   iMaxCharNGram=iMaxChar; _EL_   iMinWordNGram=iMinWord; _EL_   iMaxWordNGram=iMaxWord; _EL_   iWordDist=iWordWindow; _EL_   iCharDist=iCharWindow; _EL_   DistroDocs=new TreeMap<Integer,DistributionDocument>(); _EL_   DistroWordDocs=new TreeMap<Integer,DistributionWordDocument>(); _EL_   StringBuffer sb=new StringBuffer(); _EL_   Iterator iTexts=FileNames.iterator(); _EL_   while (iTexts.hasNext()) { _EL_     String sFile=(String)iTexts.next(); _EL_     try { _EL_       BufferedReader bf=new BufferedReader(new FileReader(sFile)); _EL_       String sTmp; _EL_       while ((sTmp=bf.readLine()) != null)       sb.append(sTmp); _EL_       bf.close(); _EL_     } _EL_  catch (    FileNotFoundException ex) { _EL_       ex.printStackTrace(System.err); _EL_     } _EL_ catch (    IOException ex) { _EL_       ex.printStackTrace(System.err); _EL_     } _EL_     sb.append((char)0); _EL_   } _EL_   FullTextDataString=sb.toString(); _EL_   for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) { _EL_     DistroDocs.put(iCnt,new DistributionDocument(iCharDist,iCnt)); _EL_   } _EL_   for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) { _EL_     DistroWordDocs.put(iCnt,new DistributionWordDocument(iWordDist,iCnt)); _EL_   } _EL_ } _EL_ ', 'protected void handle(Exception exception,String title,String message){ _EL_   Utils.handleError(getShell(),exception,title,message); _EL_ } _EL_ ', 'public void add(@NonNull T item){ _EL_ synchronized (lock) { _EL_     if (items == null) { _EL_       items=new ArrayList<>(); _EL_     } _EL_     items.add(item); _EL_   } _EL_   if (notifyOnChange) { _EL_     notifyItemInserted(items.size()); _EL_   } _EL_ } _EL_ ', 'protected final void refreshLoadingViewsSize(){ _EL_   final int maximumPullScroll=(int)(getMaximumPullScroll() * 1.2f); _EL_   int pLeft=getPaddingLeft(); _EL_   int pTop=getPaddingTop(); _EL_   int pRight=getPaddingRight(); _EL_   int pBottom=getPaddingBottom(); _EL_ switch (getPullToRefreshScrollDirection()) { _EL_ case HORIZONTAL: _EL_     if (mMode.showHeaderLoadingLayout()) { _EL_       mHeaderLayout.setWidth(maximumPullScroll); _EL_       pLeft=-maximumPullScroll; _EL_     } _EL_  else { _EL_       pLeft=0; _EL_     } _EL_   if (mMode.showFooterLoadingLayout()) { _EL_     mFooterLayout.setWidth(maximumPullScroll); _EL_     pRight=-maximumPullScroll; _EL_   } _EL_  else { _EL_     pRight=0; _EL_   } _EL_ break; _EL_ case VERTICAL: _EL_ if (mMode.showHeaderLoadingLayout()) { _EL_ mHeaderLayout.setHeight(maximumPullScroll); _EL_ pTop=-maximumPullScroll; _EL_ } _EL_  else { _EL_ pTop=0; _EL_ } _EL_ if (mMode.showFooterLoadingLayout()) { _EL_ mFooterLayout.setHeight(maximumPullScroll); _EL_ pBottom=-maximumPullScroll; _EL_ } _EL_  else { _EL_ pBottom=0; _EL_ } _EL_ break; _EL_ } _EL_ if (DEBUG) { _EL_ Log.d(LOG_TAG,String.format("Setting Padding. L: %d, T: %d, R: %d, B: %d",pLeft,pTop,pRight,pBottom)); _EL_ } _EL_ setPadding(pLeft,pTop,pRight,pBottom); _EL_ } _EL_ ', 'public int toInt(Element el,String attributeName){ _EL_   return Caster.toIntValue(el.getAttribute(attributeName),Integer.MIN_VALUE); _EL_ } _EL_ ', 'private void createMigrationTaskPage(){ _EL_   MigrationTaskEditor migrationTaskEditor=new MigrationTaskEditor(migrationTask,getContainer()); _EL_   int index=addPage(migrationTaskEditor.getControl()); _EL_   setPageText(index,"Task"); _EL_   taskListeners.add(migrationTaskEditor); _EL_ } _EL_ ', 'protected boolean checkCoverage(){ _EL_   int i; _EL_   int n; _EL_   int[] count; _EL_   Range r; _EL_   String attrIndex; _EL_   SubspaceClusterDefinition cl; _EL_   count=new int[getNumAttributes()]; _EL_   for (i=0; i < getNumAttributes(); i++) { _EL_     for (n=0; n < getClusters().length; n++) { _EL_       cl=(SubspaceClusterDefinition)getClusters()[n]; _EL_       r=new Range(cl.getAttrIndexRange()); _EL_       r.setUpper(getNumAttributes()); _EL_       if (r.isInRange(i)) { _EL_         count[i]++; _EL_       } _EL_     } _EL_   } _EL_   attrIndex=""; _EL_   for (i=0; i < count.length; i++) { _EL_     if (count[i] == 0) { _EL_       if (attrIndex.length() != 0) { _EL_         attrIndex+=","; _EL_       } _EL_       attrIndex+=(i + 1); _EL_     } _EL_   } _EL_   if (attrIndex.length() != 0) { _EL_     throw new IllegalArgumentException("The following attributes are not covered by a cluster " + "definition: " + attrIndex + "\\n"); _EL_   } _EL_   return true; _EL_ } _EL_ ', 'protected void appendShortType(StringBuilder sb,FieldType fieldType,int fieldWidth){ _EL_   sb.append("SMALLINT"); _EL_ } _EL_ ', 'public void update(){ _EL_   if (lastTime != -1L) { _EL_     long delta=System.nanoTime() - lastTime; _EL_     rollingAverage.addValue(delta); _EL_   } _EL_   lastTime=System.nanoTime(); _EL_ } _EL_ ', 'private void bappend(char ch){ _EL_   try { _EL_     mBuff[++mBuffIdx]=ch; _EL_   } _EL_  catch (  Exception exp) { _EL_     char buff[]=new char[mBuff.length << 1]; _EL_     System.arraycopy(mBuff,0,buff,0,mBuff.length); _EL_     mBuff=buff; _EL_     mBuff[mBuffIdx]=ch; _EL_   } _EL_ } _EL_ ', 'public boolean canRead(){ _EL_   return _is != null; _EL_ } _EL_ ', 'public boolean updateStatsAndReturnIfAllowed(){ _EL_   long now=SystemClock.elapsedRealtime(); _EL_   long deltaMs=now - mLastRequestTimestamp; _EL_   if (deltaMs < mDelayMs)   return false; _EL_   mLastRequestTimestamp=now; _EL_   if (deltaMs < 2 * mDelayMs) { _EL_     mDelayMs=Math.min(MAX_DELAY,mDelayMs * 2); _EL_   } _EL_  else { _EL_     mDelayMs=MIN_DELAY; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'static String toLowerCase(String s){ _EL_   int len=s.length(); _EL_   StringBuilder sb=null; _EL_   for (int i=0; i < len; i++) { _EL_     char c=s.charAt(i); _EL_     if ((c >= \'a\' && c <= \'z\') || (c == \'.\')) { _EL_       if (sb != null)       sb.append(c); _EL_     } _EL_  else     if ((c >= \'0\' && c <= \'9\') || (c == \'-\')) { _EL_       if (sb != null)       sb.append(c); _EL_     } _EL_  else     if (c >= \'A\' && c <= \'Z\') { _EL_       if (sb == null) { _EL_         sb=new StringBuilder(len); _EL_         sb.append(s,0,i); _EL_       } _EL_       sb.append((char)(c - CASE_DIFF)); _EL_     } _EL_  else { _EL_       throw new IllegalArgumentException("Invalid characters in hostname"); _EL_     } _EL_   } _EL_   return sb == null ? s : sb.toString(); _EL_ } _EL_ ', 'public static void assertProps(UniformPair<EventBean> received,String[] propertyNames,Object[] expectedInsert,Object[] expectedRemoved){ _EL_   assertProps(received.getFirst(),propertyNames,expectedInsert); _EL_   assertProps(received.getSecond(),propertyNames,expectedRemoved); _EL_ } _EL_ ', 'private List<Node> possibleParents(Node x,List<Node> nodes,IKnowledge knowledge){ _EL_   List<Node> possibleParents=new LinkedList<>(); _EL_   String _x=x.getName(); _EL_   for (  Node z : nodes) { _EL_     String _z=z.getName(); _EL_     if (possibleParentOf(_z,_x,knowledge)) { _EL_       possibleParents.add(z); _EL_     } _EL_   } _EL_   return possibleParents; _EL_ } _EL_ ', '@Override public void error(String domain,String key,XMLParseException exception) throws XNIException { _EL_   if (fErrorHandler != null) { _EL_     SAXParseException saxException=createSAXParseException(exception); _EL_     try { _EL_       fErrorHandler.error(saxException); _EL_     } _EL_  catch (    SAXParseException e) { _EL_       throw createXMLParseException(e); _EL_     } _EL_ catch (    SAXException e) { _EL_       throw createXNIException(e); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void stretchViewVertically(View view,int crossSize){ _EL_   LayoutParams lp=(LayoutParams)view.getLayoutParams(); _EL_   int newHeight=crossSize - lp.topMargin - lp.bottomMargin; _EL_   newHeight=Math.max(newHeight,0); _EL_   view.measure(MeasureSpec.makeMeasureSpec(view.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY)); _EL_ } _EL_ ', 'public void init(GuiManualHerblore manual){ _EL_   for (  ManualWidgetBase widget : widgets)   widget.init(manual); _EL_ } _EL_ ', 'protected void removeMessageProcessor(MessageProcessor oldMessageProcessor){ _EL_ synchronized (messageProcessors) { _EL_     if (messageProcessors.remove(oldMessageProcessor)) { _EL_       oldMessageProcessor.stop(); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected void appendHTML(final StringBuilder sbuf,final char ch){ _EL_ switch (ch) { _EL_ case \'<\': _EL_     sbuf.append("&lt;"); _EL_   break; _EL_ case \'>\': _EL_ sbuf.append("&gt;"); _EL_ break; _EL_ case \'&\': _EL_ sbuf.append("&amp;"); _EL_ break; _EL_ default : _EL_ sbuf.append(ch); _EL_ break; _EL_ } _EL_ } _EL_ ', 'private Collection<Var> migrateColumns(SQLTable currentTable){ _EL_   List<Var> vars=new ArrayList<>(); _EL_   String tableType=currentTable.getEntityType(); _EL_   Map<String,ResourceType.DataType> columns=currentTable.getColumns(); _EL_   Map<String,String> foreignColumns=currentTable.getForeignKeyColumns(); _EL_   for (  String column : columns.keySet()) { _EL_     ResourceType.DataType columnType=columns.get(column); _EL_     if (foreignColumns.containsKey(column)) { _EL_       vars.addAll(migrateAsRelation(tableType,column,foreignColumns.get(column))); _EL_     } _EL_  else { _EL_       vars.addAll(migrateAsResource(tableType,columnType,column)); _EL_     } _EL_   } _EL_   return vars; _EL_ } _EL_ ', 'public int retrieveRowCount(String tableName) throws SQLException { _EL_   ResultSet rs=null; _EL_   int rowCount=-1; _EL_   try { _EL_     rs=statement.executeQuery("SELECT COUNT(*) FROM " + tableName); _EL_     rs.next(); _EL_     rowCount=rs.getInt(1); _EL_   } _EL_   finally { _EL_     if (rs != null) { _EL_       rs.close(); _EL_     } _EL_   } _EL_   return rowCount; _EL_ } _EL_ ', 'int parseHour(String source,char patternChar,int offset) throws ParseException { _EL_   int min=(patternChar == HOUR_1_LETTER || patternChar == HOUR12_1_LETTER) ? 1 : 0; _EL_   int max=((patternChar == HOUR_LETTER || patternChar == HOUR_1_LETTER) ? 23 : 11) + min; _EL_   return parseNumber(source,offset,"hour",min,max) - min; _EL_ } _EL_ ', '@Override public Enumeration<Option> listOptions(){ _EL_   Vector<Option> newVector=new Vector<Option>(8); _EL_   newVector.addElement(new Option("\\tSet confidence threshold for pruning.\\n" + "\\t(default 0.25)","C",1,"-C <pruning confidence>")); _EL_   newVector.addElement(new Option("\\tSet minimum number of objects per leaf.\\n" + "\\t(default 2)","M",1,"-M <minimum number of objects>")); _EL_   newVector.addElement(new Option("\\tUse reduced error pruning.","R",0,"-R")); _EL_   newVector.addElement(new Option("\\tSet number of folds for reduced error\\n" + "\\tpruning. One fold is used as pruning set.\\n" + "\\t(default 3)","N",1,"-N <number of folds>")); _EL_   newVector.addElement(new Option("\\tUse binary splits only.","B",0,"-B")); _EL_   newVector.addElement(new Option("\\tGenerate unpruned decision list.","U",0,"-U")); _EL_   newVector.addElement(new Option("\\tDo not use MDL correction for info gain on numeric attributes.","J",0,"-J")); _EL_   newVector.addElement(new Option("\\tSeed for random data shuffling (default 1).","Q",1,"-Q <seed>")); _EL_   newVector.addElement(new Option("\\tDo not make split point actual value.","-doNotMakeSplitPointActualValue",0,"-doNotMakeSplitPointActualValue")); _EL_   newVector.addAll(Collections.list(super.listOptions())); _EL_   return newVector.elements(); _EL_ } _EL_ ', "public static ParsedSql parseSqlStatement(String sql){ _EL_   Set<String> namedParameters=new HashSet<String>(); _EL_   ParsedSql parsedSql=new ParsedSql(sql); _EL_   char[] statement=sql.toCharArray(); _EL_   int namedParameterCount=0; _EL_   int unnamedParameterCount=0; _EL_   int totalParameterCount=0; _EL_   int i=0; _EL_   while (i < statement.length) { _EL_     int skipToPosition=skipCommentsAndQuotes(statement,i); _EL_     if (i != skipToPosition) { _EL_       if (skipToPosition >= statement.length) { _EL_         break; _EL_       } _EL_       i=skipToPosition; _EL_     } _EL_     char c=statement[i]; _EL_     if (c == ':' || c == '&') { _EL_       int j=i + 1; _EL_       if (j < statement.length && statement[j] == ':' && c == ':') { _EL_         i=i + 2; _EL_         continue; _EL_       } _EL_       while (j < statement.length && !isParameterSeparator(statement[j])) { _EL_         j++; _EL_       } _EL_       if (j - i > 1) { _EL_         String parameter=sql.substring(i + 1,j); _EL_         if (!namedParameters.contains(parameter)) { _EL_           namedParameters.add(parameter); _EL_           namedParameterCount++; _EL_         } _EL_         parsedSql.addNamedParameter(parameter,i,j); _EL_         totalParameterCount++; _EL_       } _EL_       i=j - 1; _EL_     } _EL_  else { _EL_       if (c == '?') { _EL_         unnamedParameterCount++; _EL_         totalParameterCount++; _EL_       } _EL_     } _EL_     i++; _EL_   } _EL_   parsedSql.setNamedParameterCount(namedParameterCount); _EL_   parsedSql.setUnnamedParameterCount(unnamedParameterCount); _EL_   parsedSql.setTotalParameterCount(totalParameterCount); _EL_   return parsedSql; _EL_ } _EL_ ", 'public int elevationAt(float lat,float lon){ _EL_   if (frame_is_valid == true) { _EL_     if (lat >= dsi.sw_lat && lat <= dsi.ne_lat && lon >= dsi.sw_lon && lon <= dsi.ne_lon) { _EL_       int lat_index=Math.round((lat - dsi.sw_lat) * 36000 / uhl.lat_post_interval); _EL_       int lon_index=Math.round((lon - dsi.sw_lon) * 36000 / uhl.lon_post_interval); _EL_       if (elevations[lon_index] == null)       readDataRecord(lon_index); _EL_       return (int)elevations[lon_index][lat_index]; _EL_     } _EL_   } _EL_   return -32767; _EL_ } _EL_ ', '@Override public Enumeration<String> enumerateMeasures(){ _EL_   Vector<String> newVector=new Vector<String>(1); _EL_   newVector.addElement("measureNumRules"); _EL_   return newVector.elements(); _EL_ } _EL_ ', 'public boolean isStable(){ _EL_   return myFeatures.contains(FEATURE_STABLE); _EL_ } _EL_ ', 'private double[] parseVector(String s){ _EL_   String[] entries=WHITESPACE_PATTERN.split(s); _EL_   double[] d=new double[entries.length]; _EL_   for (int i=0; i < entries.length; i++) { _EL_     try { _EL_       d[i]=ParseUtil.parseDouble(entries[i]); _EL_     } _EL_  catch (    NumberFormatException e) { _EL_       throw new AbortException("Could not parse vector."); _EL_     } _EL_   } _EL_   return d; _EL_ } _EL_ ', '@Override public void removePropertyChangeListener(PropertyChangeListener pcl){ _EL_   m_pcSupport.removePropertyChangeListener(pcl); _EL_ } _EL_ ', 'private int readServerResponse() throws IOException { _EL_   StringBuffer replyBuf=new StringBuffer(32); _EL_   int c; _EL_   int continuingCode=-1; _EL_   int code; _EL_   String response; _EL_   serverResponse.setSize(0); _EL_   while (true) { _EL_     while ((c=in.read()) != -1) { _EL_       if (c == \'\\r\') { _EL_         if ((c=in.read()) != \'\\n\') { _EL_           replyBuf.append(\'\\r\'); _EL_         } _EL_       } _EL_       replyBuf.append((char)c); _EL_       if (c == \'\\n\') { _EL_         break; _EL_       } _EL_     } _EL_     response=replyBuf.toString(); _EL_     replyBuf.setLength(0); _EL_     if (logger.isLoggable(PlatformLogger.Level.FINEST)) { _EL_       logger.finest("Server [" + serverAddr + "] --> "+ response); _EL_     } _EL_     if (response.length() == 0) { _EL_       code=-1; _EL_     } _EL_  else { _EL_       try { _EL_         code=Integer.parseInt(response.substring(0,3)); _EL_       } _EL_  catch (      NumberFormatException e) { _EL_         code=-1; _EL_       } _EL_ catch (      StringIndexOutOfBoundsException e) { _EL_         continue; _EL_       } _EL_     } _EL_     serverResponse.addElement(response); _EL_     if (continuingCode != -1) { _EL_       if (code != continuingCode || (response.length() >= 4 && response.charAt(3) == \'-\')) { _EL_         continue; _EL_       } _EL_  else { _EL_         continuingCode=-1; _EL_         break; _EL_       } _EL_     } _EL_  else     if (response.length() >= 4 && response.charAt(3) == \'-\') { _EL_       continuingCode=code; _EL_       continue; _EL_     } _EL_  else { _EL_       break; _EL_     } _EL_   } _EL_   return code; _EL_ } _EL_ ', 'public FromClause(Stream streamOne,OuterJoinQualifier outerJoinQualifier,Stream streamTwo){ _EL_   this(streamOne); _EL_   add(streamTwo); _EL_   outerJoinQualifiers.add(outerJoinQualifier); _EL_ } _EL_ ', 'protected void processBytes(byte[] buf,int off,int len){ _EL_   nBytesIn+=len; _EL_   if (len < 1 || state.isDone())   return; _EL_   if (state == State.ROW_READY)   throw new PngjInputException("this should only be called if waitingForMoreInput"); _EL_   if (inf.needsDictionary() || !inf.needsInput())   throw new RuntimeException("should not happen"); _EL_   inf.setInput(buf,off,len); _EL_   if (isCallbackMode()) { _EL_     while (inflateData()) { _EL_       int nextRowLen=processRowCallback(); _EL_       prepareForNextRow(nextRowLen); _EL_       if (isDone())       processDoneCallback(); _EL_     } _EL_   } _EL_  else   inflateData(); _EL_ } _EL_ ', 'public void emitRetainedVars(GenerateJsVisitor gen){ _EL_   if (!retainedVars.isEmpty()) { _EL_     gen.out("var "); _EL_     boolean first=true; _EL_     for (    String varName : retainedVars) { _EL_       if (!first) { _EL_         gen.out(","); _EL_       } _EL_       first=false; _EL_       gen.out(varName); _EL_     } _EL_     gen.endLine(true); _EL_     retainedVars.clear(); _EL_   } _EL_ } _EL_ ', '@Override public int read() throws IOException { _EL_ synchronized (lock) { _EL_     checkNotClosed(); _EL_     if (pos != count) { _EL_       return str.charAt(pos++); _EL_     } _EL_     return -1; _EL_   } _EL_ } _EL_ ', 'public static double quantile(double p,double alpha,double beta){ _EL_   if (Double.isNaN(alpha) || Double.isNaN(beta) || Double.isNaN(p)|| alpha < 0. || beta < 0.) { _EL_     return Double.NaN; _EL_   } _EL_   if (p < 0 || p > 1) { _EL_     return Double.NaN; _EL_   } _EL_   if (p == 0) { _EL_     return 0.0; _EL_   } _EL_   if (p == 1) { _EL_     return 1.0; _EL_   } _EL_   if (p > 0.5) { _EL_     return 1 - rawQuantile(1 - p,beta,alpha,logBeta(beta,alpha)); _EL_   } _EL_  else { _EL_     return rawQuantile(p,alpha,beta,logBeta(alpha,beta)); _EL_   } _EL_ } _EL_ ', 'private SharedDeployment createNewDeployment(GridDeploymentMetadata meta,boolean isCache){ _EL_   assert Thread.holdsLock(mux); _EL_   assert meta.parentLoader() == null; _EL_   IgniteUuid ldrId=IgniteUuid.fromUuid(ctx.localNodeId()); _EL_   GridDeploymentClassLoader clsLdr; _EL_   if (meta.deploymentMode() == CONTINUOUS || meta.participants() == null) { _EL_     clsLdr=new GridDeploymentClassLoader(ldrId,meta.userVersion(),meta.deploymentMode(),false,ctx,ctx.config().getClassLoader() != null ? ctx.config().getClassLoader() : U.gridClassLoader(),meta.classLoaderId(),meta.senderNodeId(),comm,ctx.config().getNetworkTimeout(),log,ctx.config().getPeerClassLoadingLocalClassPathExclude(),ctx.config().getPeerClassLoadingMissedResourcesCacheSize(),meta.deploymentMode() == CONTINUOUS,false); _EL_     if (meta.participants() != null)     for (    Map.Entry<UUID,IgniteUuid> e : meta.participants().entrySet())     clsLdr.register(e.getKey(),e.getValue()); _EL_     if (log.isDebugEnabled())     log.debug("Created class loader in CONTINUOUS mode or without participants " + "[ldr=" + clsLdr + ", meta="+ meta+ \']\'); _EL_   } _EL_  else { _EL_     assert meta.deploymentMode() == SHARED; _EL_     clsLdr=new GridDeploymentClassLoader(ldrId,meta.userVersion(),meta.deploymentMode(),false,ctx,U.gridClassLoader(),meta.participants(),comm,ctx.config().getNetworkTimeout(),log,ctx.config().getPeerClassLoadingLocalClassPathExclude(),ctx.config().getPeerClassLoadingMissedResourcesCacheSize(),false,false); _EL_     if (log.isDebugEnabled())     log.debug("Created classloader in SHARED mode with participants " + "[ldr=" + clsLdr + ", meta="+ meta+ \']\'); _EL_   } _EL_   SharedDeployment dep=new SharedDeployment(meta.deploymentMode(),clsLdr,ldrId,meta.userVersion(),meta.alias()); _EL_   if (log.isDebugEnabled())   log.debug("Created new deployment: " + dep); _EL_   if (isCache) { _EL_     List<SharedDeployment> deps=F.addIfAbsent(cache,meta.userVersion(),new LinkedList<SharedDeployment>()); _EL_     assert deps != null; _EL_     deps.add(dep); _EL_     if (log.isDebugEnabled())     log.debug("Added deployment to cache: " + cache); _EL_   } _EL_   return dep; _EL_ } _EL_ ', 'public static DateFormat createUTCDateFormatter(String dateFormat){ _EL_   DateFormat formatter=new SimpleDateFormat(dateFormat); _EL_   formatter.setTimeZone(TimeZone.getTimeZone("UTC")); _EL_   return formatter; _EL_ } _EL_ ', 'public AemParsys clear(){ _EL_   List<WebElement> list=currentScope.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS)); _EL_   list.forEach(null); _EL_   return this; _EL_ } _EL_ ', 'protected RequestHandle sendRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){ _EL_   if (contentType != null) { _EL_     uriRequest.setHeader("Content-Type",contentType); _EL_   } _EL_   responseHandler.setRequestHeaders(uriRequest.getAllHeaders()); _EL_   responseHandler.setRequestURI(uriRequest.getURI()); _EL_   Future<?> request=threadPool.submit(new AsyncHttpRequest(client,httpContext,uriRequest,responseHandler)); _EL_   if (context != null) { _EL_     List<WeakReference<Future<?>>> requestList=requestMap.get(context); _EL_     if (requestList == null) { _EL_       requestList=new LinkedList<WeakReference<Future<?>>>(); _EL_       requestMap.put(context,requestList); _EL_     } _EL_     requestList.add(new WeakReference<Future<?>>(request)); _EL_   } _EL_   return new RequestHandle(request); _EL_ } _EL_ ', 'private void registerNewClient(JsonObject jData){ _EL_   Client newClient=gson.fromJson(jData,Client.class); _EL_   if (newClient.isValid()) { _EL_     addClient(newClient); _EL_     broadcastNewClient(newClient); _EL_     sendClientList(newClient); _EL_   } _EL_  else { _EL_     logger.log(Level.WARNING,"Could not unpack received data into a Client."); _EL_   } _EL_ } _EL_ ', 'public String replace(CharSequence target,CharSequence replacement){ _EL_   if (target == null) { _EL_     throw new NullPointerException("target == null"); _EL_   } _EL_   if (replacement == null) { _EL_     throw new NullPointerException("replacement == null"); _EL_   } _EL_   String targetString=target.toString(); _EL_   int matchStart=indexOf(targetString,0); _EL_   if (matchStart == -1) { _EL_     return this; _EL_   } _EL_   String replacementString=replacement.toString(); _EL_   int targetLength=targetString.length(); _EL_   if (targetLength == 0) { _EL_     int resultLength=count + (count + 1) * replacementString.length(); _EL_     StringBuilder result=new StringBuilder(resultLength); _EL_     result.append(replacementString); _EL_     int end=offset + count; _EL_     for (int i=offset; i != end; ++i) { _EL_       result.append(value[i]); _EL_       result.append(replacementString); _EL_     } _EL_     return result.toString(); _EL_   } _EL_   StringBuilder result=new StringBuilder(count); _EL_   int searchStart=0; _EL_   do { _EL_     result.append(value,offset + searchStart,matchStart - searchStart); _EL_     result.append(replacementString); _EL_     searchStart=matchStart + targetLength; _EL_   } _EL_  while ((matchStart=indexOf(targetString,searchStart)) != -1); _EL_   result.append(value,offset + searchStart,count - searchStart); _EL_   return result.toString(); _EL_ } _EL_ ', 'public boolean addSubAction(final ConfAction actionConf) throws GeneralException, ConfigurationException { _EL_   if (actionConf.getType() != null) { _EL_     final SubAction sub=SubAction.factory(actionConf.getType(),actionConf); _EL_     if (sub == null) { _EL_       if (Cfg.DEBUG) { _EL_         Check.log(TAG + " Error (addSubAction): unknown type: " + actionConf.getType()); _EL_       } _EL_       return false; _EL_     } _EL_     list.add(sub); _EL_     if (sub instanceof SubActionSlow) { _EL_       setQueue(MAIN_QUEUE); _EL_     } _EL_     return true; _EL_   } _EL_  else { _EL_     if (Cfg.DEBUG) { _EL_       Check.log(TAG + " Error (addSubAction): null type "); _EL_     } _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public void logDiff(String id,String field,String db,String hw){ _EL_   StringBuffer diffBuffer=new StringBuffer(String.format("Controller database object ID [%s], field [%s]: ",id,field)); _EL_   if (db == null || db.isEmpty() || db.equalsIgnoreCase(NO_MATCHING_ENTRY)) { _EL_     diffBuffer.append(String.format("The hardware reported entry [%s], whereas the controller is not managing or does not have a reference to the same resource\\n",hw)); _EL_   } _EL_  else   if (hw == null || hw.isEmpty() || hw.equalsIgnoreCase(NO_MATCHING_ENTRY)) { _EL_     diffBuffer.append(String.format("The controller is managing resource [%s], whereas the hardware did not report that resource\\n",db)); _EL_   } _EL_  else { _EL_     diffBuffer.append(String.format("The controller references resource: [%s], whereas the hardware reported the actual resource as: [%s]\\n",db != null ? db : "null",hw != null ? hw : "null")); _EL_   } _EL_   msgs.append(diffBuffer.toString() + "\\n"); _EL_   if (log != null) { _EL_     log.info(diffBuffer.toString()); _EL_   } _EL_ } _EL_ ', 'private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException { _EL_   if (xmlWriter.getPrefix(namespace) == null) { _EL_     xmlWriter.writeNamespace(prefix,namespace); _EL_     xmlWriter.setPrefix(prefix,namespace); _EL_   } _EL_   xmlWriter.writeAttribute(namespace,attName,attValue); _EL_ } _EL_ ', 'public void addTextChangeListener(final FilterQueryChangeListener textChangeListener){ _EL_   listeners.add(textChangeListener); _EL_ } _EL_ ', 'private int keyToLevel(String key){ _EL_   String[] token=key.split("/"); _EL_   return (token.length - 1); _EL_ } _EL_ ', 'SNode awaitFulfill(SNode s,boolean timed,long nanos){ _EL_   final long deadline=timed ? System.nanoTime() + nanos : 0L; _EL_   Thread w=Thread.currentThread(); _EL_   int spins=(shouldSpin(s) ? (timed ? maxTimedSpins : maxUntimedSpins) : 0); _EL_   for (; ; ) { _EL_     if (w.isInterrupted())     s.tryCancel(); _EL_     SNode m=s.match; _EL_     if (m != null)     return m; _EL_     if (timed) { _EL_       nanos=deadline - System.nanoTime(); _EL_       if (nanos <= 0L) { _EL_         s.tryCancel(); _EL_         continue; _EL_       } _EL_     } _EL_     if (spins > 0)     spins=shouldSpin(s) ? (spins - 1) : 0; _EL_  else     if (s.waiter == null)     s.waiter=w; _EL_  else     if (!timed)     LockSupport.park(this); _EL_  else     if (nanos > spinForTimeoutThreshold)     LockSupport.parkNanos(this,nanos); _EL_   } _EL_ } _EL_ ', 'public void showLoading(){ _EL_   switchState(LOADING,null,null,null,null,null,Collections.<Integer>emptyList()); _EL_ } _EL_ ', 'public IntBuffer put(int[] src,int srcOffset,int intCount){ _EL_   if (isReadOnly()) { _EL_     throw new ReadOnlyBufferException(); _EL_   } _EL_   Arrays.checkOffsetAndCount(src.length,srcOffset,intCount); _EL_   if (intCount > remaining()) { _EL_     throw new BufferOverflowException(); _EL_   } _EL_   for (int i=srcOffset; i < srcOffset + intCount; ++i) { _EL_     put(src[i]); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public AmqpMessage receiveNoWait() throws Exception { _EL_   checkClosed(); _EL_   return prefetch.poll(); _EL_ } _EL_ ', 'private ComputeState validateComputeName(String awsId,String vmName) throws Throwable { _EL_   if (this.isAwsClientMock) { _EL_     return null; _EL_   } _EL_   ComputeState computeState=getComputeByAWSId(this.host,awsId); _EL_   String tagNameValue=computeState.name; _EL_   assertNotNull("\'displayName\' property should be present",tagNameValue); _EL_   assertEquals(vmName,tagNameValue); _EL_   return computeState; _EL_ } _EL_ ', 'private void recomputeSeperation(double[][] means,double[][] cdist,LongStatistic diststat){ _EL_   final int k=means.length; _EL_   for (int i=1; i < k; i++) { _EL_     DoubleVector mi=DoubleVector.wrap(means[i]); _EL_     for (int j=0; j < i; j++) { _EL_       cdist[i][j]=cdist[j][i]=distanceFunction.distance(mi,DoubleVector.wrap(means[j])); _EL_     } _EL_   } _EL_   if (diststat != null) { _EL_     diststat.increment((k * (k - 1)) >> 1); _EL_   } _EL_ } _EL_ ', 'private void traverseInternal(Object root,boolean yieldRoot,IdentityHashMap<Object,Object> seen){ _EL_   if (root == null || seen.containsKey(root)) { _EL_     return; _EL_   } _EL_   if (yieldRoot) { _EL_     if (!visit(root)) { _EL_       return; _EL_     } _EL_   } _EL_   seen.put(root,root); _EL_   if (root instanceof JSONObject) { _EL_     JSONObject json=(JSONObject)root; _EL_     Iterator<String> keys=json.keys(); _EL_     while (keys.hasNext()) { _EL_       String key=keys.next(); _EL_       try { _EL_         traverseInternal(json.get(key),true,seen); _EL_       } _EL_  catch (      JSONException e) { _EL_         throw new RuntimeException(e); _EL_       } _EL_     } _EL_   } _EL_  else   if (root instanceof JSONArray) { _EL_     JSONArray array=(JSONArray)root; _EL_     for (int i=0; i < array.length(); ++i) { _EL_       try { _EL_         traverseInternal(array.get(i),true,seen); _EL_       } _EL_  catch (      JSONException e) { _EL_         throw new RuntimeException(e); _EL_       } _EL_     } _EL_   } _EL_  else   if (root instanceof Map) { _EL_     Map<?,?> map=(Map<?,?>)root; _EL_     for (    Object value : map.values()) { _EL_       traverseInternal(value,true,seen); _EL_     } _EL_   } _EL_  else   if (root instanceof List) { _EL_     List<?> list=(List<?>)root; _EL_     for (    Object value : list) { _EL_       traverseInternal(value,true,seen); _EL_     } _EL_   } _EL_  else   if (root instanceof ParseObject) { _EL_     if (traverseParseObjects) { _EL_       ParseObject object=(ParseObject)root; _EL_       for (      String key : object.keySet()) { _EL_         traverseInternal(object.get(key),true,seen); _EL_       } _EL_     } _EL_   } _EL_  else   if (root instanceof ParseACL) { _EL_     ParseACL acl=(ParseACL)root; _EL_     ParseUser user=acl.getUnresolvedUser(); _EL_     if (user != null && user.isCurrentUser()) { _EL_       traverseInternal(user,true,seen); _EL_     } _EL_   } _EL_ } _EL_ ', 'public CommonTurnoutOperationConfig(TurnoutOperation op){ _EL_   super(op); _EL_   myOp=(CommonTurnoutOperation)op; _EL_   maxTriesSpinner=new JSpinner(); _EL_   intervalSpinner=new JSpinner(); _EL_   Box vbox=Box.createVerticalBox(); _EL_   Box hbox1=Box.createHorizontalBox(); _EL_   Box hbox2=Box.createHorizontalBox(); _EL_   vbox.add(hbox2); _EL_   vbox.add(hbox1); _EL_   vbox.add(Box.createVerticalGlue()); _EL_   hbox1.add(new JLabel(Bundle.getMessage("Interval"))); _EL_   hbox1.add(Box.createHorizontalGlue()); _EL_   intervalSpinner.setMinimumSize(new Dimension(100,20)); _EL_   intervalSpinner.setModel(new SpinnerNumberModel(myOp.getInterval(),CommonTurnoutOperation.minInterval,CommonTurnoutOperation.maxInterval,CommonTurnoutOperation.intervalStepSize)); _EL_   hbox1.add(intervalSpinner); _EL_   hbox2.add(new JLabel(Bundle.getMessage("TimesToTry"))); _EL_   hbox2.add(Box.createHorizontalGlue()); _EL_   maxTriesSpinner.setMinimumSize(new Dimension(100,20)); _EL_   maxTriesSpinner.setModel(new SpinnerNumberModel(myOp.getMaxTries(),CommonTurnoutOperation.minMaxTries,CommonTurnoutOperation.maxMaxTries,1)); _EL_   hbox2.add(maxTriesSpinner); _EL_   Box hbox3=Box.createHorizontalBox(); _EL_   hbox3.add(Box.createHorizontalStrut(150)); _EL_   vbox.add(hbox3); _EL_   add(vbox); _EL_ } _EL_ ', 'public static <T>ParallelFlux<T> from(Publisher<? extends T> source,int parallelism){ _EL_   return from(source,parallelism,QueueSupplier.SMALL_BUFFER_SIZE,QueueSupplier.small()); _EL_ } _EL_ ', 'private static void cleanDirectoryOnExit(File directory) throws IOException { _EL_   if (!directory.exists()) { _EL_     String message=directory + " does not exist"; _EL_     throw new IllegalArgumentException(message); _EL_   } _EL_   if (!directory.isDirectory()) { _EL_     String message=directory + " is not a directory"; _EL_     throw new IllegalArgumentException(message); _EL_   } _EL_   File[] files=directory.listFiles(); _EL_   if (files == null) { _EL_     throw new IOException("Failed to list contents of " + directory); _EL_   } _EL_   IOException exception=null; _EL_   for (  File file : files) { _EL_     try { _EL_       forceDeleteOnExit(file); _EL_     } _EL_  catch (    IOException ioe) { _EL_       exception=ioe; _EL_     } _EL_   } _EL_   if (null != exception) { _EL_     throw exception; _EL_   } _EL_ } _EL_ ', 'protected void transfer(String seqRange) throws IOException { _EL_   try { _EL_     final int rangePos=seqRange.indexOf(\'-\'); _EL_     if (rangePos == -1) { _EL_       transfer(Long.parseLong(seqRange)); _EL_     } _EL_  else { _EL_       final String start=seqRange.substring(0,rangePos); _EL_       final String end=seqRange.substring(rangePos + 1); _EL_       final long startIdx; _EL_       if (start.length() == 0) { _EL_         startIdx=0; _EL_       } _EL_  else { _EL_         startIdx=Long.parseLong(start); _EL_       } _EL_       final long endIdx; _EL_       if (end.length() == 0) { _EL_         endIdx=mReader.numberSequences() - 1; _EL_       } _EL_  else { _EL_         endIdx=Long.parseLong(end); _EL_       } _EL_       if (startIdx > endIdx) { _EL_         throw new NumberFormatException("Invalid range: " + seqRange); _EL_       } _EL_       for (long i=startIdx; i <= endIdx; i++) { _EL_         transfer(i); _EL_       } _EL_     } _EL_   } _EL_  catch (  final NumberFormatException e) { _EL_     warnInvalidSequence(seqRange); _EL_   } _EL_ } _EL_ ', 'public String patchFixIds(){ _EL_   return properties.getProperty("patch.fix.ids"); _EL_ } _EL_ ', 'private static boolean isEnabled(){ _EL_   if (SystemUtils.IS_OS_WINDOWS) { _EL_     return false; _EL_   } _EL_   try { _EL_     List<String> lines=CommandUtil.executeCommandAndGetLines(Collections.singletonList("sestatus")); _EL_     for (    String line : lines) { _EL_       if (line.contains("SELinux status")) { _EL_         if (line.contains("enabled")) { _EL_           Logger.info("SELinux is enabled on this system"); _EL_           return true; _EL_         } _EL_         return false; _EL_       } _EL_     } _EL_   } _EL_  catch (  Exception ex) { _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public double calculateLogLikelihood(){ _EL_   double logL=0.0; _EL_   for (  Statistic statistic : dataList) { _EL_     for (int j=0; j < statistic.getDimension(); j++) { _EL_       logL-=Math.log(statistic.getStatisticValue(j)); _EL_     } _EL_   } _EL_   return logL; _EL_ } _EL_ ', 'public ArbitraryLengthPathNode(final TermNode left,final TermNode right,final VarNode tVarLeft,final VarNode tVarRight,final long lowerBound,final long upperBound){ _EL_   this(new BOp[]{new JoinGroupNode()},NV.asMap(new NV(Annotations.LEFT_TERM,left),new NV(Annotations.RIGHT_TERM,right),new NV(Annotations.TRANSITIVITY_VAR_LEFT,tVarLeft),new NV(Annotations.TRANSITIVITY_VAR_RIGHT,tVarRight),new NV(Annotations.DROP_VARS,new ArrayList<VarNode>()),new NV(Annotations.LOWER_BOUND,lowerBound),new NV(Annotations.UPPER_BOUND,upperBound))); _EL_   final Set<VarNode> dropVars=new LinkedHashSet<>(); _EL_   dropVars.add(tVarLeft); _EL_   dropVars.add(tVarRight); _EL_   setProperty(Annotations.DROP_VARS,dropVars); _EL_ } _EL_ ', 'public static ByteBuffer convertToSigned16BitSamples(Buffer buffer){ _EL_   return convertToSigned16BitSamples(buffer.getSamples()); _EL_ } _EL_ ', 'public static String stripCharsInBag(String s,String bag){ _EL_   int i; _EL_   StringBuilder stringBuilder=new StringBuilder(""); _EL_   for (i=0; i < s.length(); i++) { _EL_     char c=s.charAt(i); _EL_     if (bag.indexOf(c) == -1)     stringBuilder.append(c); _EL_   } _EL_   return stringBuilder.toString(); _EL_ } _EL_ ', 'public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){ _EL_   beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl); _EL_ } _EL_ ', '@Override public final char readChar() throws IOException { _EL_   dis.readFully(work,0,2); _EL_   return (char)((work[1] & 0xff) << 8 | (work[0] & 0xff)); _EL_ } _EL_ ', 'protected List<DecompoundedWord> makeSplit(String aWord){ _EL_   List<DecompoundedWord> result=new ArrayList<DecompoundedWord>(); _EL_   for (int i=0; i < aWord.length(); i++) { _EL_     String leftWord=aWord.substring(0,i + 1); _EL_     String rightWord=aWord.substring(i + 1); _EL_     boolean leftGood=dict.contains(leftWord) && leftWord.length() >= minWordLength; _EL_     boolean rightGood=rightWord.length() > minRestLength || rightWord.length() == 0; _EL_     if (leftGood && rightGood) { _EL_       DecompoundedWord split=DecompoundedWord.createFromString(leftWord + "+" + rightWord); _EL_       split.setSplitPos(i); _EL_       result.add(split); _EL_     } _EL_     for (    String morpheme : morphemes.getAll()) { _EL_       try { _EL_         String leftWithoutMorpheme=leftWord.substring(0,leftWord.length() - morpheme.length()); _EL_         if (leftWord.endsWith(morpheme) && dict.contains(leftWithoutMorpheme) && rightGood) { _EL_           DecompoundedWord split=DecompoundedWord.createFromString(leftWithoutMorpheme + "(" + morpheme+ ")+"+ rightWord); _EL_           split.setSplitPos(i); _EL_           result.add(split); _EL_         } _EL_       } _EL_  catch (      StringIndexOutOfBoundsException e) { _EL_         continue; _EL_       } _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public void send(Set recipients,boolean multicast) throws InterruptedException, ReplyException { _EL_   final boolean isDebugEnabled=logger.isDebugEnabled(); _EL_   if (Thread.interrupted())   throw new InterruptedException(); _EL_   recipients=new HashSet(recipients); _EL_   DistributedMember me=originDm.getDistributionManagerId(); _EL_   if (recipients.contains(me)) { _EL_     recipients.remove(me); _EL_   } _EL_   if (isDebugEnabled) { _EL_     logger.debug("Recipients for SerialAckedMessage are {}",recipients); _EL_   } _EL_   rp=new ReplyProcessor21(originDm,recipients); _EL_   processorId=rp.getProcessorId(); _EL_   setRecipients(recipients); _EL_   setMulticast(multicast); _EL_   Set failures=originDm.putOutgoing(this); _EL_   if (failures != null && failures.size() > 0) { _EL_     for (Iterator i=failures.iterator(); i.hasNext(); ) { _EL_       InternalDistributedMember mbr=(InternalDistributedMember)i.next(); _EL_       if (isDebugEnabled) { _EL_         logger.debug("Unable to send serial acked message to {}",mbr); _EL_       } _EL_     } _EL_   } _EL_   rp.waitForReplies(); _EL_ } _EL_ ', 'private static boolean eq(Object o1,Object o2){ _EL_   return o1 == null ? o2 == null : o1.equals(o2); _EL_ } _EL_ ', '@Override public boolean connectionAllowed(String eventName){ _EL_   if (eventName.equals("trainingSet") && m_listenees.containsKey(eventName)) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private void mapRequestToResponses(Matcher<Request> requestMatcher,ResponseSource responses){ _EL_   mappings.add(new MatcherResponseSourcePair(requestMatcher,responses)); _EL_ } _EL_ ', 'public void insertTwin(Instruction inst,Instruction twin){ _EL_   ListIterator<GCIRMapElement> iter=list.listIterator(); _EL_   while (iter.hasNext()) { _EL_     GCIRMapElement newPtr=iter.next(); _EL_     if (newPtr.getInstruction() == inst) { _EL_       iter.add(newPtr.createTwin(twin)); _EL_       return; _EL_     } _EL_   } _EL_   throw new OptimizingCompilerException("GCIRMap.createTwin: " + inst + " not found"); _EL_ } _EL_ ', 'public boolean isFull(){ _EL_   if (maxSize > 0 && notifications.size() >= maxSize) { _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void saveIndexes(){ _EL_   ArrayList toSave=new ArrayList(); _EL_ synchronized (this) { _EL_     Object[] valueTable=this.indexes.valueTable; _EL_     for (int i=0, l=valueTable.length; i < l; i++) { _EL_       Index index=(Index)valueTable[i]; _EL_       if (index != null)       toSave.add(index); _EL_     } _EL_   } _EL_   boolean allSaved=true; _EL_   for (int i=0, length=toSave.size(); i < length; i++) { _EL_     Index index=(Index)toSave.get(i); _EL_     ReadWriteMonitor monitor=index.monitor; _EL_     if (monitor == null)     continue; _EL_     try { _EL_       monitor.enterRead(); _EL_       if (index.hasChanged()) { _EL_         if (monitor.exitReadEnterWrite()) { _EL_           try { _EL_             saveIndex(index); _EL_           } _EL_  catch (          IOException e) { _EL_             if (VERBOSE) { _EL_               Util.verbose("-> got the following exception while saving:",System.err); _EL_               e.printStackTrace(); _EL_             } _EL_             allSaved=false; _EL_           } _EL_  finally { _EL_             monitor.exitWriteEnterRead(); _EL_           } _EL_         } _EL_  else { _EL_           allSaved=false; _EL_         } _EL_       } _EL_     } _EL_   finally { _EL_       monitor.exitRead(); _EL_     } _EL_   } _EL_   if (this.participantsContainers != null && this.participantUpdated) { _EL_     writeParticipantsIndexNamesFile(); _EL_     this.participantUpdated=false; _EL_   } _EL_   this.needToSave=!allSaved; _EL_ } _EL_ ', 'public void putAll(Map<? extends K,? extends V> m){ _EL_   tryPresize(m.size()); _EL_   for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   putVal(e.getKey(),e.getValue(),false); _EL_ } _EL_ ', 'boolean writeData() throws IOException { _EL_   int tosend; _EL_   int sent; _EL_   byte[] block=new byte[kBlockSize]; _EL_   do { _EL_     tosend=Math.min(sendStreamSize - totalSent,block.length); _EL_     System.arraycopy(sendData,totalSent,block,0,tosend); _EL_     if (tosend > 0) { _EL_       sent=localSend(block,tosend); _EL_       updateLocalClock(); _EL_       if (sent != -1) { _EL_         totalSent+=sent; _EL_       } _EL_  else { _EL_         logger.log(Level.FINE,"Flow Controlled"); _EL_       } _EL_     } _EL_  else { _EL_       sent=tosend=0; _EL_     } _EL_   } _EL_  while (sent > 0); _EL_   if (logger.isLoggable(Level.FINER)) { _EL_     logger.log(Level.FINER,"Sent: " + totalSent + " remaining: "+ (sendStreamSize - totalSent)); _EL_   } _EL_   return tosend == 0; _EL_ } _EL_ ', 'public static Throwable shouldFail(Class clazz,Closure code){ _EL_   Throwable th=null; _EL_   try { _EL_     code.call(); _EL_   } _EL_  catch (  GroovyRuntimeException gre) { _EL_     th=ScriptBytecodeAdapter.unwrap(gre); _EL_   } _EL_ catch (  Throwable e) { _EL_     th=e; _EL_   } _EL_   if (th == null) { _EL_     fail("Closure " + code + " should have failed with an exception of type "+ clazz.getName()); _EL_   } _EL_  else   if (!clazz.isInstance(th)) { _EL_     fail("Closure " + code + " should have failed with an exception of type "+ clazz.getName()+ ", instead got Exception "+ th); _EL_   } _EL_   return th; _EL_ } _EL_ ', 'public void encodeAndSign(X500Name subject,Signature signature) throws CertificateException, IOException, SignatureException { _EL_   DerOutputStream out, scratch; _EL_   byte[] certificateRequestInfo; _EL_   byte[] sig; _EL_   if (encoded != null)   throw new SignatureException("request is already signed"); _EL_   this.subject=subject; _EL_   scratch=new DerOutputStream(); _EL_   scratch.putInteger(BigInteger.ZERO); _EL_   subject.encode(scratch); _EL_   scratch.write(subjectPublicKeyInfo.getEncoded()); _EL_   attributeSet.encode(scratch); _EL_   out=new DerOutputStream(); _EL_   out.write(DerValue.tag_Sequence,scratch); _EL_   certificateRequestInfo=out.toByteArray(); _EL_   scratch=out; _EL_   signature.update(certificateRequestInfo,0,certificateRequestInfo.length); _EL_   sig=signature.sign(); _EL_   AlgorithmId algId=null; _EL_   try { _EL_     algId=AlgorithmId.get(signature.getAlgorithm()); _EL_   } _EL_  catch (  NoSuchAlgorithmException nsae) { _EL_     throw new SignatureException(nsae); _EL_   } _EL_   algId.encode(scratch); _EL_   scratch.putBitString(sig); _EL_   out=new DerOutputStream(); _EL_   out.write(DerValue.tag_Sequence,scratch); _EL_   encoded=out.toByteArray(); _EL_ } _EL_ ', '@Override public void addPropertyChangeListener(PropertyChangeListener pcl){ _EL_   m_pcSupport.addPropertyChangeListener(pcl); _EL_ } _EL_ ', 'public void addAssignedVirtualArrays(Set<String> virtualArrayURIs){ _EL_   if ((virtualArrayURIs != null) && (!virtualArrayURIs.isEmpty())) { _EL_     HashSet<String> addVirtualArrays=new HashSet<String>(); _EL_     addVirtualArrays.addAll(virtualArrayURIs); _EL_     if (_assignedVirtualArrays == null) { _EL_       setAssignedVirtualArrays(new StringSet()); _EL_       _assignedVirtualArrays.addAll(addVirtualArrays); _EL_     } _EL_  else { _EL_       _assignedVirtualArrays.addAll(addVirtualArrays); _EL_     } _EL_     updateVirtualArrayTags(); _EL_   } _EL_ } _EL_ ', 'public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q,int poolSize,PoolStatHelper stats,ThreadFactory tf){ _EL_   this(q,poolSize,stats,tf,Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "IDLE_THREAD_TIMEOUT",30000 * 60),false); _EL_ } _EL_ ', 'protected boolean isSSDPDiscovery(String body){ _EL_   if (body != null && body.startsWith("M-SEARCH * HTTP/1.1") && body.contains("MAN: \\"ssdp:discover\\"")) { _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static int parseString(String value){ _EL_   return Integer.parseInt(value); _EL_ } _EL_ ', 'private void clear(){ _EL_   valid=false; _EL_   if ((listenerObjects == null) || listenerObjects.isEmpty()) { _EL_     deregisterListener(); _EL_   } _EL_   ssm=null; _EL_   if (SMSEntry.cacheSMSEntries) { _EL_     orgConfigs.clear(); _EL_     globalConfigs.clear(); _EL_   } _EL_ } _EL_ ', 'String format(Object obj,StringBuffer toAppendTo) throws IllegalArgumentException { _EL_   Date source=null; _EL_   if (obj instanceof Date) { _EL_     source=(Date)obj; _EL_   } _EL_  else   if (obj instanceof String) { _EL_     try { _EL_       source=parse((String)obj); _EL_     } _EL_  catch (    ParseException pe) { _EL_       throw new RuntimeException(pe.toString()); _EL_     } _EL_   } _EL_   if (source == null) { _EL_     throw new IllegalArgumentException((obj == null) ? "null" : obj.toString()); _EL_   } _EL_   return format(source,toAppendTo); _EL_ } _EL_ ', 'public void init() throws Exception { _EL_   loadParameterFromZK(); _EL_   _invalidLoginCleanupExecutor.scheduleWithFixedDelay(new InvalidLoginCleaner(),CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,TimeUnit.MINUTES); _EL_   _log.info("Max invalid login attempts from the same client IP: {}",_maxAuthnLoginAttemtsCount); _EL_   _log.info("Life time in minutes of invalid login records for a client IP: {}",_maxAuthnLoginAttemtsLifeTimeInMins); _EL_   _log.info("Cleanup thread schedule interval: {} minutes",CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS); _EL_ } _EL_ ', 'public void append(String string){ _EL_   for (int i=0; i < string.length(); i++)   append(string.charAt(i)); _EL_ } _EL_ ', 'public static <T>Collection<T> makeImmutable(Collection<T> mutableCollection){ _EL_   Collection<T> newCollection; _EL_   try { _EL_     @SuppressWarnings("unchecked") Class<Collection<T>> cls=(Class<Collection<T>>)mutableCollection.getClass(); _EL_     newCollection=cls.newInstance(); _EL_   } _EL_  catch (  InstantiationException|IllegalAccessException e) { _EL_     throw new IllegalStateException(e); _EL_   } _EL_   for (  T element : mutableCollection) { _EL_     newCollection.add(Utils.makeImmutable(element)); _EL_   } _EL_   return Collections.unmodifiableCollection(newCollection); _EL_ } _EL_ ', 'public String tag(String inner,String c1,String c2){ _EL_   boolean color=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.color; _EL_   String s="["; _EL_   if (color)   s+="<" + c1 + ">"; _EL_   s+=inner; _EL_   if (color)   s+="<" + c2 + ">"; _EL_   s+="] "; _EL_   if (color)   s+="<" + c1 + ">"; _EL_   return color ? Pretty.format(s) : s; _EL_ } _EL_ ', 'private final String loadXmlDefinition(){ _EL_   final Cache cache=CacheFactory.getAnyInstance(); _EL_   final StringWriter stringWriter=new StringWriter(); _EL_   final PrintWriter printWriter=new PrintWriter(stringWriter); _EL_   CacheXmlGenerator.generate(cache,printWriter,true,false,false); _EL_   printWriter.close(); _EL_   return loadXmlDefinition(stringWriter.toString()); _EL_ } _EL_ ', 'public void poll(final TcpSocketStatisticsHandler handler){ _EL_   this.statisticsHandler=handler; _EL_   try { _EL_     fileLoader.load(); _EL_     final ByteBuffer buffer=fileLoader.getBuffer(); _EL_     lineParser.reset(); _EL_     lineParser.handleToken(buffer,buffer.position(),buffer.limit()); _EL_   } _EL_   finally { _EL_     this.statisticsHandler=null; _EL_   } _EL_   monitoredSockets.purgeEntriesOlderThan(updateCount); _EL_   updateCount++; _EL_ } _EL_ ', 'public UrbanSimZoneCSVWriterV2(String matsim4opusTempDirectory,String matsimOutputDirectory){ _EL_   this.matsim4opusTempDirectory=matsim4opusTempDirectory; _EL_   this.matsimOutputDirectory=matsimOutputDirectory; _EL_   try { _EL_     log.info("Initializing UrbanSimZoneCSVWriterV2 ..."); _EL_     zoneWriter=IOUtils.getBufferedWriter(matsim4opusTempDirectory + FILE_NAME); _EL_     log.info("Writing data into " + matsim4opusTempDirectory + FILE_NAME+ " ..."); _EL_     zoneWriter.write(Labels.ZONE_ID + "," + Labels.ACCESSIBILITY_BY_FREESPEED+ ","+ Labels.ACCESSIBILITY_BY_CAR+ ","+ Labels.ACCESSIBILITY_BY_BIKE+ ","+ Labels.ACCESSIBILITY_BY_WALK+ ","+ Labels.ACCESSIBILITY_BY_PT); _EL_     zoneWriter.newLine(); _EL_     log.info("... done!"); _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'public static final void pause(final int milliseconds){ _EL_   if (milliseconds >= 1000 || logger.isDebugEnabled()) { _EL_     logger.info("Pausing for {} ms...",milliseconds); _EL_   } _EL_   final long target=System.currentTimeMillis() + milliseconds; _EL_   try { _EL_     for (; ; ) { _EL_       long msLeft=target - System.currentTimeMillis(); _EL_       if (msLeft <= 0) { _EL_         break; _EL_       } _EL_       Thread.sleep(msLeft); _EL_     } _EL_   } _EL_  catch (  InterruptedException e) { _EL_     Assert.fail("interrupted",e); _EL_   } _EL_ } _EL_ ', 'protected void generateFields(){ _EL_   for (Iterator<Element> iterator=mElements.iterator(); iterator.hasNext(); ) { _EL_     Element element=iterator.next(); _EL_     if (!element.used) { _EL_       iterator.remove(); _EL_       continue; _EL_     } _EL_     PsiField[] fields=mClass.getFields(); _EL_     boolean duplicateField=false; _EL_     for (    PsiField field : fields) { _EL_       String name=field.getName(); _EL_       if (name != null && name.equals(element.getFieldName())) { _EL_         duplicateField=true; _EL_         break; _EL_       } _EL_     } _EL_     if (duplicateField) { _EL_       iterator.remove(); _EL_       continue; _EL_     } _EL_     mClass.add(mFactory.createFieldFromText("private " + element.name + " "+ element.getFieldName()+ ";",mClass)); _EL_   } _EL_ } _EL_ ', 'public int size(){ _EL_   final ReentrantLock lock=this.lock; _EL_   lock.lock(); _EL_   try { _EL_     return count; _EL_   } _EL_   finally { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', 'public boolean verifyXMLSignature(org.w3c.dom.Element element,java.lang.String certAlias) throws XMLSignatureException { _EL_   return verifyXMLSignature(element,DEF_ID_ATTRIBUTE,certAlias); _EL_ } _EL_ ', 'private boolean hasPrefix(byte[] nal){ _EL_   if (nal[0] == 0 && nal[1] == 0 && nal[2] == 0 && nal[3] == 0x01)   return true; _EL_  else   return false; _EL_ } _EL_ ', '@Override public void bookmarksOrHistoryPicker(ComboViews startView){ _EL_   if (mTabControl.getCurrentWebView() == null) { _EL_     return; _EL_   } _EL_   if (isInCustomActionMode()) { _EL_     endActionMode(); _EL_   } _EL_   Bundle extras=new Bundle(); _EL_   extras.putBoolean(BrowserBookmarksPage.EXTRA_DISABLE_WINDOW,!mTabControl.canCreateNewTab()); _EL_   mUi.showComboView(startView,extras); _EL_ } _EL_ ', '@Override public void addPropertyChangeListener(String name,PropertyChangeListener pcl){ _EL_   m_bcSupport.addPropertyChangeListener(name,pcl); _EL_ } _EL_ ', 'public void waitForData(){ _EL_   if (this.initialized) { _EL_     return; _EL_   } _EL_   waitOnInitialization(this.initializationLatchAfterGetInitialImage); _EL_ } _EL_ ', 'public GlowTask(Plugin owner,Runnable task,boolean sync,long delay,long period){ _EL_   super(task,null); _EL_   taskId=nextTaskId.getAndIncrement(); _EL_   description=task.toString(); _EL_   this.owner=owner; _EL_   this.delay=delay; _EL_   this.period=period; _EL_   counter=0; _EL_   this.sync=sync; _EL_ } _EL_ ', 'int sendNextByte(){ _EL_   int result=0; _EL_   try { _EL_     long tDiff=interByteTime - ((System.currentTimeMillis() - lastRxTime) * 1000000000); _EL_     if (tDiff > 0) { _EL_       log.debug("TX: waiting " + tDiff + " ns"); _EL_       Thread.sleep(tDiff / 1000000L,(int)(tDiff % 1000000L)); _EL_     } _EL_   } _EL_  catch (  InterruptedException ex) { _EL_     log.error("wait: " + ex.toString()); _EL_   } _EL_   if (currTxCharPos >= currTxTgm.length) { _EL_     result=dequeueTelegram(); _EL_   } _EL_   if (result == 0) { _EL_     writeChar(currTxTgm[currTxCharPos++],true); _EL_     if (currTxCharPos >= currTxTgm.length) { _EL_       setProtStat(ProtStatus.RECEIVING); _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public double localScore(int i,int... parents){ _EL_   for (  int p : parents)   if (forbidden.contains(p))   return Double.NaN; _EL_   double residualVariance=covariances.get(i,i); _EL_   int n=getSampleSize(); _EL_   int p=parents.length; _EL_   Matrix covxx=getSelection1(covariances,parents); _EL_   try { _EL_     Matrix covxxInv=covxx.inverse(); _EL_     Matrix covxy=getSelection2(covariances,parents,i); _EL_     Matrix b=covxxInv.times(covxy); _EL_     double dot=0.0; _EL_     for (int j=0; j < covxy.getRowDimension(); j++) { _EL_       for (int k=0; k < covxy.getColumnDimension(); k++) { _EL_         dot+=covxy.get(j,k) * b.get(j,k); _EL_       } _EL_     } _EL_     residualVariance-=dot; _EL_     if (residualVariance <= 0) { _EL_       if (isVerbose()) { _EL_         out.println("Nonpositive residual varianceY: resVar / varianceY = " + (residualVariance / covariances.get(i,i))); _EL_       } _EL_       return Double.NaN; _EL_     } _EL_     double c=getPenaltyDiscount(); _EL_     return score(residualVariance,n,logn,p,c); _EL_   } _EL_  catch (  Exception e) { _EL_     boolean removedOne=true; _EL_     while (removedOne) { _EL_       List<Integer> _parents=new ArrayList<>(); _EL_       for (int y=0; y < parents.length; y++)       _parents.add(parents[y]); _EL_       _parents.removeAll(forbidden); _EL_       parents=new int[_parents.size()]; _EL_       for (int y=0; y < _parents.size(); y++)       parents[y]=_parents.get(y); _EL_       removedOne=printMinimalLinearlyDependentSet(parents,covariances); _EL_     } _EL_     return Double.NaN; _EL_   } _EL_ } _EL_ ', 'public static boolean validSkinSpecFile(String fileName){ _EL_   File file=new File(Configuration.skinsDir(),fileName); _EL_   if (!file.exists() || !file.isFile()) { _EL_     return false; _EL_   } _EL_   DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance(); _EL_   try { _EL_     DocumentBuilder builder=dbf.newDocumentBuilder(); _EL_     Document doc=builder.parse(file); _EL_     NodeList listOfComponents=doc.getElementsByTagName(UI_ELEMENT); _EL_     if (listOfComponents.getLength() > 0) { _EL_       return true; _EL_     } _EL_  else { _EL_       return false; _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public static String readStream(InputStream in){ _EL_   BufferedReader reader=new BufferedReader(new InputStreamReader(in)); _EL_   StringBuilder sb=new StringBuilder(); _EL_   String line=null; _EL_   try { _EL_     while ((line=reader.readLine()) != null) { _EL_       sb.append(line + "\\n"); _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     FreshAirLog.e("Error reading stream",e); _EL_   } _EL_  finally { _EL_     try { _EL_       in.close(); _EL_     } _EL_  catch (    IOException e) { _EL_     } _EL_     try { _EL_       reader.close(); _EL_     } _EL_  catch (    IOException e) { _EL_     } _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', '@Override public boolean equals(Object o){ _EL_   if (this == o) { _EL_     return true; _EL_   } _EL_   if (!(o instanceof PrototypeSize)) { _EL_     return false; _EL_   } _EL_   PrototypeSize size=(PrototypeSize)o; _EL_   return prototype.equals(size.prototype); _EL_ } _EL_ ', 'public MemoidOne(Function<? super Input,? extends Output> fn,BiPredicate<Input,Input> equality){ _EL_   fn_=Objects.requireNonNull(fn); _EL_   equality_=Objects.requireNonNull(equality); _EL_ } _EL_ ', 'private void show(boolean show){ _EL_   if (show) { _EL_     if (mXFade != null) { _EL_       mXFade.cancel(); _EL_     } _EL_     mState=STATE_PIE; _EL_     mCurrentItem=null; _EL_     PieItem root=getRoot(); _EL_     for (    PieItem openItem : mOpen) { _EL_       if (openItem.hasItems()) { _EL_         for (        PieItem item : openItem.getItems()) { _EL_           item.setSelected(false); _EL_         } _EL_       } _EL_     } _EL_     mLabel.setText(""); _EL_     mOpen.clear(); _EL_     mOpen.add(root); _EL_     layoutPie(); _EL_     fadeIn(); _EL_   } _EL_  else { _EL_     mState=STATE_IDLE; _EL_     mTapMode=false; _EL_     if (mXFade != null) { _EL_       mXFade.cancel(); _EL_     } _EL_     if (mLabel != null) { _EL_       mLabel.setText(""); _EL_     } _EL_   } _EL_   setVisible(show); _EL_   mHandler.sendEmptyMessage(show ? MSG_OPEN : MSG_CLOSE); _EL_ } _EL_ ', 'private synchronized void persistProfileAndNotifyChange(AuthnProvider modifiedProvider,boolean newObject){ _EL_   modifiedProvider.setLastModified(System.currentTimeMillis()); _EL_   if (newObject) { _EL_     _dbClient.createObject(modifiedProvider); _EL_   } _EL_  else { _EL_     _dbClient.persistObject(modifiedProvider); _EL_   } _EL_   notifyChange(); _EL_ } _EL_ ', 'public boolean controlRunTrain(int idx){ _EL_   if (log.isDebugEnabled()) { _EL_     log.debug("controlRunTrain= " + idx + " runMode= "+ _runMode+ " - warrant= "+ getDisplayName()); _EL_   } _EL_   boolean ret=true; _EL_   int oldIndex=-MODE_MANUAL; _EL_   if (_engineer == null) { _EL_ switch (idx) { _EL_ case HALT: _EL_ case RESUME: _EL_ case RETRY: _EL_       ret=false; _EL_     break; _EL_ case ABORT: _EL_   if (_runMode == Warrant.MODE_LEARN) { _EL_     firePropertyChange("abortLearn",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder)); _EL_   } _EL_  else { _EL_     stopWarrant(true); _EL_   } _EL_ break; _EL_ } _EL_ } _EL_  else { _EL_ synchronized (_engineer) { _EL_ oldIndex=_engineer.getRunState(); _EL_ switch (idx) { _EL_ case HALT: _EL_ _engineer.setHalt(true); _EL_ break; _EL_ case RESUME: _EL_ _engineer.setHalt(false); _EL_ restart(); _EL_ ret=moveIntoNextBlock(MID); _EL_ break; _EL_ case RETRY: _EL_ BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1); _EL_ ret=false; _EL_ if (bo != null) { _EL_ OBlock b=bo.getBlock(); _EL_ if (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) { _EL_ _idxCurrentOrder++; _EL_ if (b.equals(_stoppingBlock)) { _EL_ _stoppingBlock.removePropertyChangeListener(this); _EL_ _stoppingBlock=null; _EL_ } _EL_ bo.setPath(this); _EL_ restart(); _EL_ goingActive(b); _EL_ ret=true; _EL_ } _EL_ } _EL_ break; _EL_ case ABORT: _EL_ stopWarrant(true); _EL_ break; _EL_ } _EL_ } _EL_ } _EL_ if (ret) { _EL_ firePropertyChange("controlChange",Integer.valueOf(oldIndex),Integer.valueOf(idx)); _EL_ } _EL_ return ret; _EL_ } _EL_ ', 'public void addNearKey(KeyCacheObject key,GridCacheSharedContext ctx) throws IgniteCheckedException { _EL_   nearKeys.add(key); _EL_ } _EL_ ', 'public void playMedia(boolean showPlayerWindow){ _EL_   String filename=stopAndPrepareFilename(); _EL_   if (filename.length() > 0) { _EL_     MPlayerMediator mplayerMediator=MPlayerMediator.instance(); _EL_     if (mplayerMediator != null) { _EL_       mplayerMediator.showPlayerWindow(showPlayerWindow); _EL_     } _EL_     mplayer.open(filename,getAdjustedVolume()); _EL_   } _EL_   notifyState(getState()); _EL_ } _EL_ ', 'public void rejectedExecution(Runnable r,ThreadPoolExecutor e){ _EL_   if (!e.isShutdown()) { _EL_     r.run(); _EL_   } _EL_ } _EL_ ', 'public void delete(SSOToken token,String dn) throws SMSException, SSOException { _EL_   for (  String entry : subEntries(token,dn,"*",0,false,false)) { _EL_     debug.message("SMSLdapObject: deleting sub-entry: {}",entry); _EL_     delete(token,getNamingAttribute() + "=" + entry+ ","+ dn); _EL_   } _EL_   for (  String subOrg : searchSubOrgNames(token,dn,"*",0,false,false,false)) { _EL_     debug.message("SMSLdapObject: deleting suborganization: {}",subOrg); _EL_     delete(token,subOrg); _EL_   } _EL_   delete(token.getPrincipal(),dn); _EL_   objectChanged(dn,DELETE); _EL_ } _EL_ ', 'private static <T extends AbstractBlockBase<T>>void enqueueSuccessors(T block,PriorityQueue<T> worklist,BitSet visitedBlocks){ _EL_   for (  T successor : block.getSuccessors()) { _EL_     if (!visitedBlocks.get(successor.getId())) { _EL_       visitedBlocks.set(successor.getId()); _EL_       worklist.add(successor); _EL_     } _EL_   } _EL_ } _EL_ ', 'public synchronized void removeTextListener(TextListener cl){ _EL_   m_textListeners.remove(cl); _EL_ } _EL_ ', 'public void addToExistingVolumesIfAbsent(Map<String,Integer> volumeWWNs){ _EL_   if (_existingVolumes == null) { _EL_     _existingVolumes=new StringMap(); _EL_   } _EL_   for (  String wwn : volumeWWNs.keySet()) { _EL_     String normalizedWWN=BlockObject.normalizeWWN(wwn); _EL_     if (!_existingVolumes.containsKey(normalizedWWN) && (_userAddedVolumes == null || !_userAddedVolumes.containsKey(normalizedWWN))) { _EL_       String hluStr=ExportGroup.LUN_UNASSIGNED_STR; _EL_       Integer hlu=volumeWWNs.get(normalizedWWN); _EL_       if (hlu != null) { _EL_         hluStr=hlu.toString(); _EL_       } _EL_       _existingVolumes.put(normalizedWWN,hluStr); _EL_     } _EL_   } _EL_ } _EL_ ', 'public PathImpl createTempFile(String prefix,String suffix) throws IOException { _EL_   if (prefix == null || prefix.length() == 0)   prefix="t"; _EL_   if (suffix == null)   suffix=".tmp"; _EL_ synchronized (LOCK) { _EL_     for (int i=0; i < 32768; i++) { _EL_       int r=Math.abs((int)RandomUtil.getRandomLong()); _EL_       PathImpl file=lookup(prefix + r + suffix); _EL_       if (file.createNewFile())       return file; _EL_     } _EL_   } _EL_   throw new IOException("cannot create temp file"); _EL_ } _EL_ ', 'public void load(){ _EL_   try { _EL_     if (fileChannel == null) { _EL_       fileChannel=FileChannel.open(path,StandardOpenOption.READ); _EL_     } _EL_     fileChannel.position(0L); _EL_     buffer.clear(); _EL_     tmp.clear(); _EL_     while (fileChannel.read(tmp) > 0) { _EL_       tmp.flip(); _EL_       if (tmp.remaining() > buffer.capacity() - buffer.position()) { _EL_         final ByteBuffer next=ByteBuffer.allocateDirect(Math.max(buffer.capacity() * 2,tmp.remaining())); _EL_         buffer.flip(); _EL_         next.put(buffer); _EL_         buffer=next; _EL_       } _EL_       buffer.put(tmp); _EL_       tmp.clear(); _EL_     } _EL_     buffer.flip(); _EL_   } _EL_  catch (  final IOException e) { _EL_     throw new UncheckedIOException(e); _EL_   } _EL_ } _EL_ ', 'private void onHPChange(final int amount){ _EL_   if (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ) { _EL_     if (amount > 0) { _EL_       addTextIndicator("+" + amount,NotificationType.POSITIVE); _EL_     } _EL_  else { _EL_       addTextIndicator(String.valueOf(amount),NotificationType.NEGATIVE); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void stopSampling(){ _EL_   if (mSamplingCounter.decrementAndGet() == 0) { _EL_     mHandler.stopSamplingThread(); _EL_     addFinalSample(); _EL_   } _EL_ } _EL_ ', 'void postMessage(List<JetstreamMessage> msgs,DispatchQueueStats stats) throws MessageServiceException { _EL_   m_msgRcvCounter.addAndGet(msgs.size()); _EL_   if ((monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL) && (m_paused.get())) { _EL_     if (!m_msgProcessor.hasAvailableCapacity(m_twentyPercentCapacity)) { _EL_       m_totalMsgsDropped.increment(); _EL_       return; _EL_     } _EL_   } _EL_   List<Runnable> requests=new ArrayList<Runnable>(msgs.size()); _EL_   for (int i=0, t=msgs.size(); i < t; i++) { _EL_     JetstreamMessage tm=msgs.get(i); _EL_     if (tm.getTopic() == null) { _EL_       m_totalMsgsDropped.increment(); _EL_       if (LOGGER.isDebugEnabled()) { _EL_         LOGGER.debug("Topic is not present in incoming message"); _EL_       } _EL_       continue; _EL_     } _EL_     MessageServiceRequest msr=new MessageServiceRequest(tm); _EL_     msr.setPriority(tm.getPriority()); _EL_     msr.setSequenceid(tm.getSequenceId()); _EL_     if (msr.getPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) { _EL_       if (!m_internalMsgProcessor.processRequest(msr)) { _EL_         m_totalMsgsDropped.increment(); _EL_         throw new MessageServiceException(MessageServiceException.BUFFER_FULL,"Dispatch Queue Full"); _EL_       } _EL_       if (m_msgsRcvdPerSec.addAndGet(1) < 0)       m_msgsRcvdPerSec.set(0); _EL_       m_totalMsgsRcvd.increment(); _EL_     } _EL_  else { _EL_       requests.add(msr); _EL_     } _EL_   } _EL_   if (!requests.isEmpty()) { _EL_     int batchsize=requests.size(); _EL_     if (!m_msgProcessor.processBatch(requests)) { _EL_       m_totalMsgsDropped.addAndGet(batchsize); _EL_       throw new MessageServiceException(MessageServiceException.BUFFER_FULL,"High Priority Dispatch Queue Full - " + " Requested capacity = " + batchsize + " : available capacity = "+ m_msgProcessor.getAvailableCapacity()); _EL_     } _EL_     m_avgMsgsRcvdPerSec.add(batchsize); _EL_     m_totalMsgsRcvd.addAndGet(batchsize); _EL_   } _EL_   if (stats != null) { _EL_     stats.setHighPriorityQueueDepth((int)m_msgProcessor.getPendingRequests()); _EL_     stats.setLowPriorityQueueDepth((int)m_msgProcessor.getPendingRequests()); _EL_     stats.setMaxQueueDepth((int)m_msgProcessor.getMaxQueueSz()); _EL_   } _EL_ } _EL_ ', 'public String convertSWFToHTML(InputStream in) throws Exception { _EL_   StringWriter out1=new StringWriter(); _EL_   output=new PrintWriter(out1); _EL_   TagParser parser=new TagParser(this); _EL_   SWFReader reader=new SWFReader(parser,in); _EL_   reader.readFile(); _EL_   in.close(); _EL_   sizeCount=reader.size; _EL_   final String ret="<html>" + (headerstr.isEmpty() ? "<body>" : "<header>" + headerstr + "</header><body>") + out1.toString()+ "</body></html>"; _EL_   return ret; _EL_ } _EL_ ', 'protected static Vector convertToVector(final Object[] anArray){ _EL_   if (anArray == null) { _EL_     return null; _EL_   } _EL_   final Vector v=new Vector(anArray.length); _EL_   for (  final Object element : anArray) { _EL_     v.addElement(element); _EL_   } _EL_   return v; _EL_ } _EL_ ', '@Override public void readExternal(ObjectInput in) throws IOException { _EL_   path=IgfsUtils.readPath(in); _EL_   blockSize=in.readInt(); _EL_   grpBlockSize=in.readLong(); _EL_   len=in.readLong(); _EL_   props=U.readStringMap(in); _EL_   accessTime=in.readLong(); _EL_   modificationTime=in.readLong(); _EL_   flags=in.readByte(); _EL_ } _EL_ ', 'public static DereferenceAliasesPolicy valueOf(final int intValue){ _EL_   if (intValue < 0 || intValue >= ELEMENTS.length) { _EL_     return null; _EL_   } _EL_   return ELEMENTS[intValue]; _EL_ } _EL_ ', 'private static double pythonTime(){ _EL_   return System.currentTimeMillis() / 1000; _EL_ } _EL_ ', 'public static String quoteIfJavaKeyword(String name){ _EL_   return JVMModuleUtil.quoteIfJavaKeyword(name); _EL_ } _EL_ ', 'public static void checkState(boolean expression,@Nullable Object errorMessage){ _EL_   if (!expression) { _EL_     throw new IllegalStateException(String.valueOf(errorMessage)); _EL_   } _EL_ } _EL_ ', 'private static <T,ID>void addDropTableStatements(DatabaseType databaseType,TableInfo<T,ID> tableInfo,List<String> statements){ _EL_   List<String> statementsBefore=new ArrayList<String>(); _EL_   List<String> statementsAfter=new ArrayList<String>(); _EL_   for (  FieldType fieldType : tableInfo.getFieldTypes()) { _EL_     databaseType.dropColumnArg(fieldType,statementsBefore,statementsAfter); _EL_   } _EL_   StringBuilder sb=new StringBuilder(64); _EL_   sb.append("DROP TABLE "); _EL_   databaseType.appendEscapedEntityName(sb,tableInfo.getTableName()); _EL_   sb.append(\' \'); _EL_   statements.addAll(statementsBefore); _EL_   statements.add(sb.toString()); _EL_   statements.addAll(statementsAfter); _EL_ } _EL_ ', 'public static void write(File file,CharSequence data,Charset encoding,boolean append) throws IOException { _EL_   String str=data == null ? null : data.toString(); _EL_   writeStringToFile(file,str,encoding,append); _EL_ } _EL_ ', 'public void clearResults(){ _EL_   if (resultList != null) { _EL_     resultList.clear(); _EL_     mAdapter.notifyDataSetChanged(); _EL_   } _EL_   listener.onSearchCleared(); _EL_ } _EL_ ', 'public ArrayList<ConstraintWidget> findWidgets(WidgetContainer container,int x,int y,int width,int height){ _EL_   ArrayList<ConstraintWidget> found=new ArrayList<>(); _EL_   Rectangle area=new Rectangle(x,y,width,height); _EL_   for (  ConstraintWidget widget : container.getChildren()) { _EL_     WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget(); _EL_     WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE); _EL_     if (!decorator.isVisible()) { _EL_       continue; _EL_     } _EL_     Rectangle bounds=new Rectangle(widget.getDrawX(),widget.getDrawY(),widget.getWidth(),widget.getHeight()); _EL_     if (area.intersects(bounds)) { _EL_       found.add(widget); _EL_     } _EL_   } _EL_   return found; _EL_ } _EL_ ', 'boolean suppressedBy(DNSIncoming msg){ _EL_   try { _EL_     for (    DNSRecord answer : msg.getAllAnswers()) { _EL_       if (suppressedBy(answer)) { _EL_         return true; _EL_       } _EL_     } _EL_     return false; _EL_   } _EL_  catch (  ArrayIndexOutOfBoundsException e) { _EL_     logger.log(Level.WARNING,"suppressedBy() message " + msg + " exception ",e); _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public void generate(int x1,int y1,int x2,int y2){ _EL_   Point midPoint=new Point(); _EL_   Point arcCenter=new Point(); _EL_   Point2D peakPoint=new Point2D.Float(); _EL_   double distance=Math.sqrt(Math.pow(Math.abs(y2 - y1),2.0) + Math.pow(Math.abs(x2 - x1),2.0)); _EL_   double straightLineSlope=Math.atan((double)(y2 - y1) / (double)(x2 - x1)); _EL_   double inverseSlope=straightLineSlope - (Math.PI / 2.0); _EL_   if (Debug.debugging("arc")) { _EL_     Debug.output("ArcCalc.generate: Slope is " + Math.toDegrees(straightLineSlope) + " degrees, distance = "+ distance+ " pixels."); _EL_   } _EL_   midPoint.setLocation(x1 + ((x2 - x1) / 2),y1 + ((y2 - y1) / 2)); _EL_   if (Debug.debugging("arc")) { _EL_     Debug.output("ArcCalc.generate: Center point for (" + x1 + ", "+ y1+ ") to ("+ x2+ ", "+ y2+ ") is ("+ midPoint.x+ ", "+ midPoint.y+ ")"); _EL_   } _EL_   double arccos=Math.cos(arcAngle); _EL_   double arcRadius; _EL_   if (arccos != 1.0) { _EL_     arcRadius=distance / Math.sqrt(2.0 * (1.0 - Math.cos(arcAngle))); _EL_   } _EL_  else { _EL_     arcRadius=distance / Math.sqrt(2.0); _EL_   } _EL_   if (Debug.debugging("arc")) { _EL_     Debug.output("ArcCalc.generate: radius of arc = " + arcRadius); _EL_   } _EL_   double x=arcRadius - arcRadius * Math.cos(arcAngle); _EL_   double rPrime=(distance / 2.0) * (Math.sqrt(1.0 - Math.pow(x / distance,2.0))) / Math.sin(arcAngle / 2.0); _EL_   if (Debug.debugging("arc")) { _EL_     Debug.output("ArcCalc.generate: rPrime = " + rPrime); _EL_   } _EL_   int direction=1; _EL_   if (arcUp)   direction=-1; _EL_   arcCenter.x=midPoint.x + (direction * (int)(rPrime * Math.cos(inverseSlope))); _EL_   arcCenter.y=midPoint.y + (direction * (int)(rPrime * Math.sin(inverseSlope))); _EL_   if (Debug.debugging("arc")) { _EL_     Debug.output("ArcCalc.generateArc: creating supplimental graphics list"); _EL_     arcGraphics=new OMGraphicList(); _EL_     double dist1=Math.sqrt(Math.pow((double)(arcCenter.x - x1),2.0) + Math.pow((double)(arcCenter.y - y1),2.0)); _EL_     double dist2=Math.sqrt(Math.pow((double)(arcCenter.x - x2),2.0) + Math.pow((double)(arcCenter.y - y2),2.0)); _EL_     Debug.output("ArcCalc.generate: Center focus for arc is (" + arcCenter.x + ", "+ arcCenter.y+ ") along slope line of "+ Math.toDegrees(inverseSlope)+ " degrees)."); _EL_     Debug.output("ArcCalc.generate: Distance to point 1 from arc focus = " + dist1 + "\\n                    Distance to point 2 from arc focus = "+ dist2); _EL_     OMRect point1=new OMRect(x1 - 1,y1 - 1,x1 + 1,y1 + 1); _EL_     OMRect point2=new OMRect(x2 - 1,y2 - 1,x2 + 1,y2 + 1); _EL_     OMRect arcPoint=new OMRect(arcCenter.x - 1,arcCenter.y - 1,arcCenter.x + 1,arcCenter.y + 1); _EL_     point1.setLinePaint(OMColor.red); _EL_     point2.setLinePaint(OMColor.red); _EL_     arcPoint.setLinePaint(OMColor.blue); _EL_     arcGraphics.add(point1); _EL_     arcGraphics.add(point2); _EL_     arcGraphics.add(arcPoint); _EL_     OMLine line1=new OMLine(x1,y1,x2,y2); _EL_     OMLine line2=new OMLine(midPoint.x,midPoint.y,arcCenter.x,arcCenter.y); _EL_     arcGraphics.add(line1); _EL_     arcGraphics.add(line2); _EL_   } _EL_   int realCount=0; _EL_   double startSlope=getRealAngle((float)arcCenter.getX(),(float)arcCenter.getY(),x1,y1); _EL_   double endSlope=getRealAngle((float)arcCenter.getX(),(float)arcCenter.getY(),x2,y2); _EL_   double smallSlope, largeSlope; _EL_   double angleIncrement; _EL_   smallSlope=(startSlope > endSlope) ? endSlope : startSlope; _EL_   largeSlope=(smallSlope == startSlope) ? endSlope : startSlope; _EL_   while (Math.abs(smallSlope - largeSlope) > Math.PI) { _EL_     if (Math.abs(largeSlope - smallSlope - Math.PI) < .001) { _EL_       break; _EL_     } _EL_     Debug.message("arc","ArcCalc.generate: Modifying the starting slope."); _EL_     double tmpSlope=smallSlope + MoreMath.TWO_PI; _EL_     smallSlope=largeSlope; _EL_     largeSlope=tmpSlope; _EL_   } _EL_   if (MoreMath.approximately_equal(arcAngle,Math.PI) && arcUp) { _EL_     Debug.message("arc","ArcCalc.generate: Modifying 180 angle points."); _EL_     double tmpSlope=smallSlope + MoreMath.TWO_PI; _EL_     smallSlope=largeSlope; _EL_     largeSlope=tmpSlope; _EL_   } _EL_   if (Math.abs(y2 - y1) < Math.abs(x2 - x1)) { _EL_     angleIncrement=Math.PI / Math.abs(x2 - x1); _EL_   } _EL_  else { _EL_     angleIncrement=Math.PI / Math.abs(y2 - y1); _EL_   } _EL_   int numPoints=(int)(Math.abs(smallSlope - largeSlope) / angleIncrement + 2); _EL_   float[] xPoints=new float[numPoints]; _EL_   float[] yPoints=new float[numPoints]; _EL_   if (Debug.debugging("arc")) { _EL_     Debug.output("ArcCalc.generate: angle to x1, y1 is " + startSlope + " ("+ Math.toDegrees(startSlope)+ " degrees), angle to x2, y2 is "+ endSlope+ " ("+ Math.toDegrees(endSlope)+ " degrees)"); _EL_     Debug.output("ArcCalc.generate: Starting angle is " + smallSlope + "("+ Math.toDegrees(smallSlope)+ " degrees), end angle is "+ largeSlope+ " ("+ Math.toDegrees(largeSlope)+ " degrees), incrementing by "+ angleIncrement+ " ("+ Math.toDegrees(angleIncrement)+ " degrees)"); _EL_   } _EL_   reversed=false; _EL_   while (smallSlope < largeSlope && realCount < numPoints) { _EL_     xPoints[realCount]=arcCenter.x + (int)(arcRadius * Math.cos(smallSlope)); _EL_     yPoints[realCount]=arcCenter.y + (int)(arcRadius * Math.sin(smallSlope)); _EL_     if (realCount == 0 && xPoints[realCount] == x2) { _EL_       Debug.message("arc","ArcCalc: line reversed"); _EL_       reversed=true; _EL_     } _EL_     if (Debug.debugging("arc") && realCount == 0) { _EL_       OMLine startLine=new OMLine(arcCenter.x,arcCenter.y,(int)xPoints[0],(int)yPoints[0]); _EL_       startLine.setLinePaint(OMColor.white); _EL_       arcGraphics.add(startLine); _EL_     } _EL_  else     if (Debug.debugging("arcdetail")) { _EL_       Debug.output("  angle " + smallSlope + " ("+ smallSlope * 180 / Math.PI + " degrees)  = " + xPoints[realCount] + ", " + yPoints[realCount]); _EL_     } _EL_     if (Math.abs(largeSlope - smallSlope - (arcAngle / 2.0)) < angleIncrement) { _EL_       peakPoint.setLocation(xPoints[realCount],yPoints[realCount]); _EL_       Debug.message("arc","ArcCalc: Found a midpoint."); _EL_     } _EL_     smallSlope+=angleIncrement; _EL_     realCount++; _EL_   } _EL_   xpoints=new float[realCount]; _EL_   ypoints=new float[realCount]; _EL_   System.arraycopy(xPoints,0,xpoints,0,realCount); _EL_   System.arraycopy(yPoints,0,ypoints,0,realCount); _EL_ } _EL_ ', 'private void doubleCapacity(){ _EL_   int p=head; _EL_   int n=elements.length; _EL_   int r=n - p; _EL_   int newCapacity=n << 1; _EL_   if (newCapacity < 0)   throw new IllegalStateException("Sorry, deque too big"); _EL_   Object[] a=new Object[newCapacity]; _EL_   System.arraycopy(elements,p,a,0,r); _EL_   System.arraycopy(elements,0,a,r,p); _EL_   elements=a; _EL_   head=0; _EL_   tail=n; _EL_ } _EL_ ', 'private void fireEvent(final IRunningQuery q){ _EL_   if (q == null)   throw new IllegalArgumentException(); _EL_   if (listeners.isEmpty()) { _EL_     return; _EL_   } _EL_   final IRunningQueryListener[] a=listeners.toArray(new IRunningQueryListener[0]); _EL_   for (  IRunningQueryListener l : a) { _EL_     final IRunningQueryListener listener=l; _EL_     try { _EL_       listener.notify(q); _EL_     } _EL_  catch (    Throwable t) { _EL_       if (InnerCause.isInnerCause(t,InterruptedException.class)) { _EL_         throw new RuntimeException(t); _EL_       } _EL_       log.error(t,t); _EL_     } _EL_   } _EL_ } _EL_ ', 'void copyNodeStructure(ArrayList<Node> destination){ _EL_   while (destination.size() < nodes.size())   destination.add(new Node()); _EL_   while (destination.size() > nodes.size())   destination.remove(0); _EL_   int n=nodes.size(); _EL_   for (int i=0; i < n; i++) { _EL_     Node node0=nodes.get(i); _EL_     Node node1=destination.get(i); _EL_     node1.heightParameter=node0.heightParameter; _EL_     node1.rateParameter=node0.rateParameter; _EL_     node1.traitParameter=node0.traitParameter; _EL_     node1.partitioning=node0.partitioning; _EL_     node1.taxon=node0.taxon; _EL_     node1.bifurcation=node0.bifurcation; _EL_     node1.number=node0.number; _EL_     node1.myHashCode=node0.myHashCode; _EL_     if (node0.leftParent != null) { _EL_       node1.leftParent=storedNodes.get(nodes.indexOf(node0.leftParent)); _EL_     } _EL_  else { _EL_       node1.leftParent=null; _EL_     } _EL_     if (node0.rightParent != null) { _EL_       node1.rightParent=storedNodes.get(nodes.indexOf(node0.rightParent)); _EL_     } _EL_  else { _EL_       node1.rightParent=null; _EL_     } _EL_     if (node0.leftChild != null) { _EL_       node1.leftChild=storedNodes.get(nodes.indexOf(node0.leftChild)); _EL_     } _EL_  else { _EL_       node1.leftChild=null; _EL_     } _EL_     if (node0.rightChild != null) { _EL_       node1.rightChild=storedNodes.get(nodes.indexOf(node0.rightChild)); _EL_     } _EL_  else { _EL_       node1.rightChild=null; _EL_     } _EL_   } _EL_ } _EL_ ', 'boolean isSystemFont(){ _EL_   return systemFont; _EL_ } _EL_ ', 'public RootBlockView(final boolean rootBlock0,final ByteBuffer buf,final ChecksumUtility checker) throws RootBlockException { _EL_   if (buf == null)   throw new IllegalArgumentException(); _EL_   if (buf.remaining() != SIZEOF_ROOT_BLOCK) { _EL_     throw new IllegalArgumentException("Expecting " + SIZEOF_ROOT_BLOCK + " remaining, actual="+ buf.remaining()); _EL_   } _EL_   this.buf=buf.asReadOnlyBuffer(); _EL_   this.rootBlock0=rootBlock0; _EL_ switch (getStoreType()) { _EL_ case RW: _EL_ { _EL_       am=new RWAddressManager(null); _EL_       break; _EL_     } _EL_ case WORM: _EL_ { _EL_     final int offsetBits=getOffsetBits(); _EL_     am=new WormAddressManager(offsetBits); _EL_     break; _EL_   } _EL_ default : _EL_ throw new RootBlockException("Unknown storeType=" + getStoreType()); _EL_ } _EL_ if (checker == null) { _EL_ log.warn("Checksum will not be validated"); _EL_ } _EL_ this.checker=checker; _EL_ valid(); _EL_ } _EL_ ', '@SuppressWarnings("unchecked") @Test public void innerEnum(){ _EL_   Class<?> pc=PlayingCard.class; _EL_   List<Enum<?>> include=new ArrayList<>(); _EL_   List<Enum<?>> exclude=new ArrayList<>(); _EL_   for (  Class<?> c : pc.getDeclaredClasses()) { _EL_     int mods=c.getModifiers(); _EL_     if (c.isEnum()) { _EL_       if (Modifier.isPublic(mods)) { _EL_         include.addAll(asList(c.getEnumConstants())); _EL_       } _EL_  else { _EL_         exclude.addAll(asList(c.getEnumConstants())); _EL_       } _EL_     } _EL_   } _EL_   Set<TypedOperation> actual=getConcreteOperations(pc); _EL_   assertEquals("number of statements",include.size() + 5,actual.size()); _EL_   for (  Enum<?> e : include) { _EL_     assertTrue("enum constant " + e.name() + " should occur",actual.contains(createEnumOperation(e))); _EL_   } _EL_   for (  Enum<?> e : exclude) { _EL_     assertFalse("enum constant " + e.name() + " should not occur",actual.contains(createEnumOperation(e))); _EL_   } _EL_ } _EL_ ', 'private final boolean compareAndSetTail(Node expect,Node update){ _EL_   return unsafe.compareAndSwapObject(this,tailOffset,expect,update); _EL_ } _EL_ ', 'public static void writeStringToWriter(String string,Writer writer) throws IOException { _EL_   BufferedWriter bw=new BufferedWriter(writer); _EL_   try { _EL_     bw.write(string); _EL_   } _EL_   finally { _EL_     bw.close(); _EL_   } _EL_ } _EL_ ', 'private static void exit(String errMsg,Options options,int exitCode){ _EL_   if (errMsg != null)   echo("ERROR: " + errMsg); _EL_   String runner=System.getProperty(IGNITE_PROG_NAME,"randignite.{sh|bat}"); _EL_   int space=runner.indexOf(\' \'); _EL_   runner=runner.substring(0,space == -1 ? runner.length() : space); _EL_   if (options != null) { _EL_     HelpFormatter formatter=new HelpFormatter(); _EL_     formatter.printHelp(runner,options); _EL_   } _EL_   System.exit(exitCode); _EL_ } _EL_ ', '@Override public void write(byte[] b,int off,int len) throws IOException { _EL_   while (len > 0) { _EL_     int c=Math.min(len,decoderIn.remaining()); _EL_     decoderIn.put(b,off,c); _EL_     processInput(false); _EL_     len-=c; _EL_     off+=c; _EL_   } _EL_   if (writeImmediately) { _EL_     flushOutput(); _EL_   } _EL_ } _EL_ ', 'public void drawContours(Mat img,Color color){ _EL_   Drawing.drawContours(img,contours,color); _EL_ } _EL_ ', 'public void clearOnCentralPositionChangedListener(){ _EL_   mOnCentralPositionChangedListeners.clear(); _EL_ } _EL_ ', '@Override public int execute(final FormObject form,final int type,final String code,final int eventType,final char keyPressed){ _EL_   int messageCode=ActionHandler.NOMESSAGE; _EL_   if (code instanceof String) { _EL_     final String js=code; _EL_     final String[] args=JSFunction.convertToArray(js); _EL_     final String command=args[0]; _EL_     if (command.startsWith("AF")) { _EL_       messageCode=handleAFCommands(form,command,js,args,eventType,keyPressed); _EL_     } _EL_   } _EL_   return messageCode; _EL_ } _EL_ ', 'protected String buildQualifierRegex(String qualifierValue){ _EL_   StringBuilder sb=new StringBuilder(); _EL_   sb.append("^"); _EL_   sb.append(qualifierValue); _EL_   sb.append("$"); _EL_   return sb.toString(); _EL_ } _EL_ ', 'public void write(int c) throws IOException { _EL_   if (_output == null)   throw new IOException("Writer closed"); _EL_   _output.append((char)c); _EL_ } _EL_ ', 'private PDFPage createPage(int pagenum,PDFObject pageObj) throws IOException { _EL_   int rotation=0; _EL_   RectF mediabox=null; _EL_   RectF cropbox=null; _EL_   PDFObject mediaboxObj=getInheritedValue(pageObj,"MediaBox"); _EL_   if (mediaboxObj != null) { _EL_     mediabox=parseRect(mediaboxObj); _EL_   } _EL_   PDFObject cropboxObj=getInheritedValue(pageObj,"CropBox"); _EL_   if (cropboxObj != null) { _EL_     cropbox=parseRect(cropboxObj); _EL_   } _EL_   PDFObject rotateObj=getInheritedValue(pageObj,"Rotate"); _EL_   if (rotateObj != null) { _EL_     rotation=rotateObj.getIntValue(); _EL_   } _EL_   RectF bbox=((cropbox == null) ? mediabox : cropbox); _EL_   return new PDFPage(pagenum,bbox,rotation,cache); _EL_ } _EL_ ', 'protected void cutSelectedBean(){ _EL_   if (Debug.debugging("beanbox"))   Debug.output("Enter> cutSelectedBean"); _EL_   if (selectedBean == null || selectedBeanLocation == null) { _EL_     if (Debug.debugging("beanbox"))     Debug.output("selectedBean=" + selectedBean); _EL_     if (Debug.debugging("beanbox"))     Debug.output("selectedBeanLocation=" + selectedBeanLocation); _EL_     clearSelection(); _EL_     return; _EL_   } _EL_   try { _EL_     serBean=new ByteArrayOutputStream(); _EL_     ObjectOutputStream oos=new ObjectOutputStream(serBean); _EL_     oos.writeObject(selectedBean); _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_     clearSelection(); _EL_     if (Debug.debugging("beanbox"))     Debug.output("Exit> copySelectedBean"); _EL_     return; _EL_   } _EL_   cutBean=selectedBean; _EL_   selectedBeanBox.showCut(selectedBean); _EL_   if (Debug.debugging("beanbox"))   Debug.output("Exit> cutSelectedBean"); _EL_ } _EL_ ', 'private void ensureSize(){ _EL_   if (children == EMPTY_CHILDREN) { _EL_     children=new FPNode[1]; _EL_     return; _EL_   } _EL_   int newsize=children.length == 1 ? INITIAL_SIZE : (children.length << 1); _EL_   children=Arrays.copyOf(children,newsize); _EL_ } _EL_ ', 'private static <T>void assertCollectionEqualsNoOrder(Collection<T> expected,Collection<T> actual){ _EL_   String msg=String.format("expected=%s, actual=%s",expected.toString(),actual.toString()); _EL_   assertEquals(msg,expected.size(),actual.size()); _EL_   for (  T e : expected) { _EL_     if (!actual.contains(e)) { _EL_       msg=String.format("Expected element %s not found in " + "actual. expected=%s, actual=%s",e,expected,actual); _EL_       fail(msg); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void add(double x){ _EL_   Cell[] as; _EL_   long b, v; _EL_   int m; _EL_   Cell a; _EL_   if ((as=cells) != null || !casBase(b=base,Double.doubleToRawLongBits(Double.longBitsToDouble(b) + x))) { _EL_     boolean uncontended=true; _EL_     if (as == null || (m=as.length - 1) < 0 || (a=as[getProbe() & m]) == null || !(uncontended=a.cas(v=a.value,Double.doubleToRawLongBits(Double.longBitsToDouble(v) + x))))     doubleAccumulate(x,null,uncontended); _EL_   } _EL_ } _EL_ ', 'protected void computePDists(Relation<O> relation,KNNQuery<O> knn,WritableDoubleDataStore pdists){ _EL_   FiniteProgress prdsProgress=LOG.isVerbose() ? new FiniteProgress("pdists",relation.size(),LOG) : null; _EL_   for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) { _EL_     final KNNList neighbors=knn.getKNNForDBID(iditer,kreach + 1); _EL_     int ks=0; _EL_     double ssum=0.; _EL_     for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid() && ks < kreach; neighbor.advance()) { _EL_       if (DBIDUtil.equal(neighbor,iditer)) { _EL_         continue; _EL_       } _EL_       final double d=neighbor.doubleValue(); _EL_       ssum+=d * d; _EL_       ks++; _EL_     } _EL_     double pdist=ks > 0 ? Math.sqrt(ssum / ks) : 0.; _EL_     pdists.putDouble(iditer,pdist); _EL_     LOG.incrementProcessed(prdsProgress); _EL_   } _EL_   LOG.ensureCompleted(prdsProgress); _EL_ } _EL_ ', 'public static Tuple max(Iterator tuples,String field,Comparator cmp){ _EL_   Tuple t=null, tmp; _EL_   Object min=null; _EL_   if (tuples.hasNext()) { _EL_     t=(Tuple)tuples.next(); _EL_     min=t.get(field); _EL_   } _EL_   while (tuples.hasNext()) { _EL_     tmp=(Tuple)tuples.next(); _EL_     Object obj=tmp.get(field); _EL_     if (cmp.compare(obj,min) > 0) { _EL_       t=tmp; _EL_       min=obj; _EL_     } _EL_   } _EL_   return t; _EL_ } _EL_ ', 'public String clusterDefinitionsTipText(){ _EL_   return "The clusters to use."; _EL_ } _EL_ ', 'public void addListener(NavigatorListener listener){ _EL_   listeners.add(listener); _EL_ } _EL_ ', 'public boolean equalsIgnoreCase(final StrBuilder other){ _EL_   if (this == other) { _EL_     return true; _EL_   } _EL_   if (this.size != other.size) { _EL_     return false; _EL_   } _EL_   final char thisBuf[]=this.buffer; _EL_   final char otherBuf[]=other.buffer; _EL_   for (int i=size - 1; i >= 0; i--) { _EL_     final char c1=thisBuf[i]; _EL_     final char c2=otherBuf[i]; _EL_     if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private List reverse(List seq){ _EL_   LinkedList newSeq=new LinkedList(); _EL_   for (Iterator i=seq.iterator(); i.hasNext(); ) { _EL_     DirectedEdge de=(DirectedEdge)i.next(); _EL_     newSeq.addFirst(de.getSym()); _EL_   } _EL_   return newSeq; _EL_ } _EL_ ', 'public void removeSelectionListener(final SelectionListener listener){ _EL_   checkWidget(); _EL_   if (listener == null) { _EL_     SWT.error(SWT.ERROR_NULL_ARGUMENT); _EL_   } _EL_   listOfSelectionListeners.remove(listener); _EL_ } _EL_ ', 'public void clear(){ _EL_   final ReentrantLock lock=this.lock; _EL_   lock.lock(); _EL_   try { _EL_     for (Node<E> f=first; f != null; ) { _EL_       f.item=null; _EL_       Node<E> n=f.next; _EL_       f.prev=null; _EL_       f.next=null; _EL_       f=n; _EL_     } _EL_     first=last=null; _EL_     count=0; _EL_     notFull.signalAll(); _EL_   } _EL_   finally { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', 'public static java.sql.Date toSqlDate(String date){ _EL_   java.util.Date newDate=toDate(date,"00:00:00"); _EL_   if (newDate != null) { _EL_     return new java.sql.Date(newDate.getTime()); _EL_   } _EL_  else { _EL_     return null; _EL_   } _EL_ } _EL_ ', 'private static void createOrgAuthConfig(String realmName) throws Exception { _EL_   String classMethod="UpgradeUtils:createOrgAuthConfig: "; _EL_   OrganizationConfigManager org=new OrganizationConfigManager(ssoToken,realmName); _EL_   ServiceConfig orgConfig=org.getServiceConfig(AUTH_SERVICE_NAME); _EL_   if (orgConfig != null) { _EL_     Map aa=orgConfig.getAttributes(); _EL_     if (debug.messageEnabled()) { _EL_       debug.message(classMethod + "Org is :" + realmName); _EL_       debug.message(classMethod + "Attribute Map is :" + aa); _EL_     } _EL_     String orgName=realmName; _EL_     if (LDAPUtils.isDN(realmName)) { _EL_       orgName=LDAPUtils.rdnValueFromDn(realmName); _EL_     } _EL_     String authConfigName=orgName + "-authconfig"; _EL_     String adminAuthConfigName=orgName + "-admin-authconfig"; _EL_     Set authConfigAttrValue=(Set)aa.get(ATTR_ORG_AUTH_MODULE); _EL_     if (debug.messageEnabled()) { _EL_       debug.message(classMethod + "authConfigAttrValue : " + authConfigAttrValue); _EL_     } _EL_     Set newVal=new HashSet(); _EL_     if (authConfigAttrValue.size() != 1 && !authConfigAttrValue.contains(authConfigName)) { _EL_       newVal.add(authConfigName); _EL_       orgConfig.replaceAttributeValues(ATTR_ORG_AUTH_MODULE,authConfigAttrValue,newVal); _EL_     } _EL_     Set adminConfigAttrValue=(Set)aa.get(ATTR_ADMIN_AUTH_MODULE); _EL_     if (debug.messageEnabled()) { _EL_       debug.message("adminauthConfigAttrValue : " + adminConfigAttrValue); _EL_     } _EL_     if (adminConfigAttrValue.size() != 1 && !adminConfigAttrValue.contains(adminAuthConfigName)) { _EL_       newVal.clear(); _EL_       newVal.add(adminAuthConfigName); _EL_       orgConfig.replaceAttributeValues(ATTR_ADMIN_AUTH_MODULE,adminConfigAttrValue,newVal); _EL_     } _EL_     aa=orgConfig.getAttributes(); _EL_     ServiceConfig s=org.getServiceConfig(AUTH_CONFIG_SERVICE); _EL_     ServiceConfig authConfig=s.getSubConfig(NAMED_CONFIG); _EL_     if (authConfig == null) { _EL_       s.addSubConfig(NAMED_CONFIG,null,0,null); _EL_       authConfig=s.getSubConfig(NAMED_CONFIG); _EL_     } _EL_     Map aMap=new HashMap(); _EL_     aMap.put(ATTR_AUTH_CONFIG,authConfigAttrValue); _EL_     authConfig.addSubConfig(authConfigName,SUB_NAMED_CONFIG,0,aMap); _EL_     aMap.clear(); _EL_     aMap.put(ATTR_AUTH_CONFIG,adminConfigAttrValue); _EL_     authConfig.addSubConfig(adminAuthConfigName,SUB_NAMED_CONFIG,0,aMap); _EL_   } _EL_ } _EL_ ', 'public RepositoryLocation(String repositoryName,String[] pathComponents) throws MalformedRepositoryLocationException { _EL_   if (repositoryName == null || repositoryName.isEmpty()) { _EL_     throw new MalformedRepositoryLocationException("repositoryName must not contain null or empty!"); _EL_   } _EL_   if (pathComponents == null) { _EL_     throw new MalformedRepositoryLocationException("pathComponents must not be null!"); _EL_   } _EL_   for (  String pathComp : pathComponents) { _EL_     if (pathComp == null || pathComp.isEmpty()) { _EL_       throw new MalformedRepositoryLocationException("path must not contain null or empty strings!"); _EL_     } _EL_   } _EL_   this.repositoryName=repositoryName; _EL_   this.path=pathComponents; _EL_ } _EL_ ', 'public boolean putProfile(Profile profile){ _EL_   return putProfile(profile,false); _EL_ } _EL_ ', 'public static String normalizeUrl(String requestUrl) throws OAuthException { _EL_   if ((requestUrl == null) || (requestUrl.length() == 0)) { _EL_     throw new OAuthException("Request Url cannot be empty"); _EL_   } _EL_   URI uri; _EL_   try { _EL_     uri=new URI(requestUrl); _EL_   } _EL_  catch (  URISyntaxException e) { _EL_     throw new OAuthException(e); _EL_   } _EL_   String authority=uri.getAuthority(); _EL_   String scheme=uri.getScheme(); _EL_   if (authority == null || scheme == null) { _EL_     throw new OAuthException("Invalid Request Url"); _EL_   } _EL_   authority=authority.toLowerCase(); _EL_   scheme=scheme.toLowerCase(); _EL_   if ((scheme.equals("http") && uri.getPort() == 80) || (scheme.equals("https") && uri.getPort() == 443)) { _EL_     int index=authority.lastIndexOf(":"); _EL_     if (index >= 0) { _EL_       authority=authority.substring(0,index); _EL_     } _EL_   } _EL_   return scheme + "://" + authority+ uri.getRawPath(); _EL_ } _EL_ ', 'private static String readName(DataInputStream dis,byte data[]) throws IOException { _EL_   int c=dis.readUnsignedByte(); _EL_   if ((c & 0xc0) == 0xc0) { _EL_     c=((c & 0x3f) << 8) + dis.readUnsignedByte(); _EL_     HashSet<Integer> jumps=new HashSet<Integer>(); _EL_     jumps.add(c); _EL_     return readName(data,c,jumps); _EL_   } _EL_   if (c == 0) { _EL_     return ""; _EL_   } _EL_   byte b[]=new byte[c]; _EL_   dis.readFully(b); _EL_   String s=IDN.toUnicode(new String(b)); _EL_   String t=readName(dis,data); _EL_   if (t.length() > 0) { _EL_     s=s + "." + t; _EL_   } _EL_   return s; _EL_ } _EL_ ', 'private void writeObject(ObjectOutputStream oos) throws IOException { _EL_   oos.defaultWriteObject(); _EL_   boolean writeFont=(f != OMText.DEFAULT_FONT); _EL_   oos.writeBoolean(writeFont); _EL_   if (writeFont) { _EL_     oos.writeObject(f.getName()); _EL_     oos.writeInt(f.getSize()); _EL_     oos.writeInt(f.getStyle()); _EL_   } _EL_   writeStroke(oos,stroke,OMGraphic.BASIC_STROKE); _EL_   writeStroke(oos,textMatteStroke,DEFAULT_TEXT_MATTE_STROKE); _EL_ } _EL_ ', 'public void makeGraph(File linkGraph) throws Exception { _EL_   String temp212; _EL_   int rowNum=0; _EL_   BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(linkGraph))); _EL_   while ((temp212=br.readLine()) != null) { _EL_     String[] strs=temp212.split(" "); _EL_     for (int i=0; i < strs.length; i++) { _EL_       graph[rowNum][i]=Double.parseDouble(strs[i]); _EL_     } _EL_     rowNum++; _EL_   } _EL_   for (int i=0; i < dataNum; i++) { _EL_     for (int j=0; j < dimension; j++) { _EL_       W[i][j]=r.nextDouble(); _EL_       H[j][i]=r.nextDouble(); _EL_     } _EL_   } _EL_   for (int i=0; i < dataNum; i++) { _EL_     double sumW=0; _EL_     double sumH=0; _EL_     for (int j=0; j < dimension; j++) { _EL_       sumW+=W[i][j] * W[i][j]; _EL_       sumH+=H[j][i] * H[j][i]; _EL_     } _EL_     sumW=Math.sqrt(sumW); _EL_     sumH=Math.sqrt(sumH); _EL_     for (int j=0; j < dimension; j++) { _EL_       W[i][j]/=sumW; _EL_       H[j][i]/=sumH; _EL_     } _EL_   } _EL_   trainW(); _EL_   init=false; _EL_ } _EL_ ', 'private static String descriptorToInternalName(String descriptor){ _EL_ switch (descriptor.charAt(0)) { _EL_ case \'B\': _EL_ case \'C\': _EL_ case \'D\': _EL_ case \'F\': _EL_ case \'I\': _EL_ case \'J\': _EL_ case \'S\': _EL_ case \'Z\': _EL_ case \'V\': _EL_ case \'[\': _EL_     return descriptor; _EL_ case \'L\': _EL_   return classDescriptorToInternalName(descriptor); _EL_ default : _EL_ throw new IllegalArgumentException("bad descriptor:" + descriptor); _EL_ } _EL_ } _EL_ ', 'public void put(int key,E value){ _EL_   int i=ContainerHelpers.binarySearch(mKeys,mSize,key); _EL_   if (i >= 0) { _EL_     mValues[i]=value; _EL_   } _EL_  else { _EL_     i=~i; _EL_     if (i < mSize && mValues[i] == DELETED) { _EL_       mKeys[i]=key; _EL_       mValues[i]=value; _EL_       return; _EL_     } _EL_     if (mGarbage && mSize >= mKeys.length) { _EL_       gc(); _EL_       i=~ContainerHelpers.binarySearch(mKeys,mSize,key); _EL_     } _EL_     if (mSize >= mKeys.length) { _EL_       int n=ContainerHelpers.idealIntArraySize(mSize + 1); _EL_       int[] nkeys=new int[n]; _EL_       Object[] nvalues=new Object[n]; _EL_       System.arraycopy(mKeys,0,nkeys,0,mKeys.length); _EL_       System.arraycopy(mValues,0,nvalues,0,mValues.length); _EL_       mKeys=nkeys; _EL_       mValues=nvalues; _EL_     } _EL_     if (mSize - i != 0) { _EL_       System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i); _EL_       System.arraycopy(mValues,i,mValues,i + 1,mSize - i); _EL_     } _EL_     mKeys[i]=key; _EL_     mValues[i]=value; _EL_     mSize++; _EL_   } _EL_ } _EL_ ', '@Override public <R>CompletableFuture<R> collect(final Supplier<R> supplier,final BiConsumer<R,? super T> accumulator,final BiConsumer<R,R> combiner){ _EL_   return CompletableFuture.supplyAsync(null,exec); _EL_ } _EL_ ', 'private static void applyOverrides(){ _EL_   InputStream stream=getContentTypesPropertiesStream(); _EL_   if (stream == null) { _EL_     return; _EL_   } _EL_   try { _EL_     try { _EL_       Properties overrides=new Properties(); _EL_       overrides.load(stream); _EL_       for (      Map.Entry<Object,Object> entry : overrides.entrySet()) { _EL_         String extension=(String)entry.getKey(); _EL_         String mimeType=(String)entry.getValue(); _EL_         add(mimeType,extension); _EL_       } _EL_     } _EL_   finally { _EL_       stream.close(); _EL_     } _EL_   } _EL_  catch (  IOException ignored) { _EL_   } _EL_ } _EL_ ', 'private static float computeSimilarity(Lane a,Lane b){ _EL_   int same=0; _EL_   int diff=0; _EL_   int firstCoordinate=Math.max(a.getFirstNonGapPosition(),b.getFirstNonGapPosition()); _EL_   int lastCoordinate=Math.min(a.getLastNonGapPosition(),b.getLastNonGapPosition()); _EL_   for (int i=firstCoordinate; i <= lastCoordinate; i++) { _EL_     char cha=a.charAt(i); _EL_     char chb=b.charAt(i); _EL_     if (Character.isLetter(cha) && Character.isLetter(chb)) { _EL_       if (Character.toLowerCase(cha) == Character.toLowerCase((chb)))       same++; _EL_  else       diff++; _EL_     } _EL_   } _EL_   return Math.max(same > 0 ? 1 : 0,same - 3 * diff); _EL_ } _EL_ ', "private boolean matchStrings(String pattern,String str,boolean caseSensitive){ _EL_   char[] patArr=pattern.toCharArray(); _EL_   char[] strArr=str.toCharArray(); _EL_   int patIdxStart=0; _EL_   int patIdxEnd=patArr.length - 1; _EL_   int strIdxStart=0; _EL_   int strIdxEnd=strArr.length - 1; _EL_   char ch; _EL_   boolean containsStar=false; _EL_   for (  char c : patArr) { _EL_     if (c == '*') { _EL_       containsStar=true; _EL_       break; _EL_     } _EL_   } _EL_   if (!containsStar) { _EL_     if (patIdxEnd != strIdxEnd) { _EL_       return false; _EL_     } _EL_     for (int i=0; i <= patIdxEnd; i++) { _EL_       ch=patArr[i]; _EL_       if (ch != '?') { _EL_         if (different(caseSensitive,ch,strArr[i])) { _EL_           return false; _EL_         } _EL_       } _EL_     } _EL_     return true; _EL_   } _EL_   if (patIdxEnd == 0) { _EL_     return true; _EL_   } _EL_   while ((ch=patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) { _EL_     if (ch != '?') { _EL_       if (different(caseSensitive,ch,strArr[strIdxStart])) { _EL_         return false; _EL_       } _EL_     } _EL_     patIdxStart++; _EL_     strIdxStart++; _EL_   } _EL_   if (strIdxStart > strIdxEnd) { _EL_     for (int i=patIdxStart; i <= patIdxEnd; i++) { _EL_       if (patArr[i] != '*') { _EL_         return false; _EL_       } _EL_     } _EL_     return true; _EL_   } _EL_   while ((ch=patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) { _EL_     if (ch != '?') { _EL_       if (different(caseSensitive,ch,strArr[strIdxEnd])) { _EL_         return false; _EL_       } _EL_     } _EL_     patIdxEnd--; _EL_     strIdxEnd--; _EL_   } _EL_   if (strIdxStart > strIdxEnd) { _EL_     for (int i=patIdxStart; i <= patIdxEnd; i++) { _EL_       if (patArr[i] != '*') { _EL_         return false; _EL_       } _EL_     } _EL_     return true; _EL_   } _EL_   while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) { _EL_     int patIdxTmp=-1; _EL_     for (int i=patIdxStart + 1; i <= patIdxEnd; i++) { _EL_       if (patArr[i] == '*') { _EL_         patIdxTmp=i; _EL_         break; _EL_       } _EL_     } _EL_     if (patIdxTmp == patIdxStart + 1) { _EL_       patIdxStart++; _EL_       continue; _EL_     } _EL_     int patLength=patIdxTmp - patIdxStart - 1; _EL_     int strLength=strIdxEnd - strIdxStart + 1; _EL_     int foundIdx=-1; _EL_     strLoop:     for (int i=0; i <= strLength - patLength; i++) { _EL_       for (int j=0; j < patLength; j++) { _EL_         ch=patArr[patIdxStart + j + 1]; _EL_         if (ch != '?') { _EL_           if (different(caseSensitive,ch,strArr[strIdxStart + i + j])) { _EL_             continue strLoop; _EL_           } _EL_         } _EL_       } _EL_       foundIdx=strIdxStart + i; _EL_       break; _EL_     } _EL_     if (foundIdx == -1) { _EL_       return false; _EL_     } _EL_     patIdxStart=patIdxTmp; _EL_     strIdxStart=foundIdx + patLength; _EL_   } _EL_   for (int i=patIdxStart; i <= patIdxEnd; i++) { _EL_     if (patArr[i] != '*') { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ", 'public static List<Double> mergeCoords(List<Double> x,List<Double> y){ _EL_   if (x.size() != y.size())   throw new IllegalArgumentException("Sample sizes must be the same for each data applyTransformToDestination."); _EL_   List<Double> ret=new ArrayList<>(); _EL_   for (int i=0; i < x.size(); i++) { _EL_     ret.add(x.get(i)); _EL_     ret.add(y.get(i)); _EL_   } _EL_   return ret; _EL_ } _EL_ ', 'public int size(){ _EL_   return m_sets.size(); _EL_ } _EL_ ', 'private void validateDynamicAttribute(Set dynamicSet) throws PolicyException { _EL_   if (DEBUG.messageEnabled()) { _EL_     DEBUG.message("IDRepoResponseProvider.validateDynamicAttribute():" + "entering with dynamicSet=" + dynamicSet); _EL_   } _EL_   responseAttrNames=new HashSet(); _EL_   repoAttrNames=new HashSet(); _EL_   responseAttrToRepoAttr=new HashMap(); _EL_   if (DEBUG.messageEnabled()) { _EL_     DEBUG.message("IDRepoResponseProvider.validateDynamicAttribute():" + "valid dynamic attributes:" + validDynamicAttrNames); _EL_   } _EL_   Set dynamicAttrs=((Set)properties.get(DYNAMIC_ATTRIBUTE)); _EL_   if (DEBUG.messageEnabled()) { _EL_     DEBUG.message("IDRepoResponseProvider.validateDynamicAttribute():" + "selected dynamic attributes:" + dynamicAttrs); _EL_   } _EL_   Iterator dynamicAttrsIter=dynamicAttrs.iterator(); _EL_   while (dynamicAttrsIter.hasNext()) { _EL_     String attr=(String)dynamicAttrsIter.next(); _EL_     if (!validDynamicAttrNames.contains(attr)) { _EL_       if (DEBUG.warningEnabled()) { _EL_         DEBUG.warning("IDReporesponseProvider." + "validateDynamicAttribute():Invalid dynamic property " + "encountered:"+ attr); _EL_       } _EL_       continue; _EL_     } _EL_     String[] attrNames=parseDynamicAttrName(attr); _EL_     String responseAttrName=attrNames[0]; _EL_     String repoAttrName=attrNames[1]; _EL_     responseAttrNames.add(responseAttrName); _EL_     repoAttrNames.add(repoAttrName); _EL_     addToResponseAttrToRepoAttrMap(responseAttrName,repoAttrName); _EL_     if (DEBUG.messageEnabled()) { _EL_       DEBUG.message("IDRepoResponseProvider." + "validateDynamicAttribute():" + "responseAttrName=" + responseAttrName + ", repoAttrName="+ repoAttrName); _EL_     } _EL_   } _EL_   if (DEBUG.messageEnabled()) { _EL_     DEBUG.message("IDRepoResponseProvider.validateDynamicAttribute():" + "responseAttrToRepoAttr=" + responseAttrToRepoAttr); _EL_     DEBUG.message("IDRepoResponseProvider.validateDynamicAttribute():" + "returning"); _EL_   } _EL_ } _EL_ ', 'public boolean connect(final String address){ _EL_   if (mBluetoothAdapter == null || address == null) { _EL_     Log.w(TAG,"BluetoothAdapter not initialized or unspecified address."); _EL_     return false; _EL_   } _EL_   if (mBluetoothDeviceAddress != null && address.equals(mBluetoothDeviceAddress) && mBluetoothGatt != null) { _EL_     Log.d(TAG,"Trying to use an existing mBluetoothGatt for connection."); _EL_     if (mBluetoothGatt.connect()) { _EL_       mConnectionState=STATE_CONNECTING; _EL_       return true; _EL_     } _EL_  else { _EL_       return false; _EL_     } _EL_   } _EL_   final BluetoothDevice device=mBluetoothAdapter.getRemoteDevice(address); _EL_   if (device == null) { _EL_     Log.w(TAG,"Device not found.  Unable to connect."); _EL_     return false; _EL_   } _EL_   mBluetoothGatt=device.connectGatt(this,false,mGattCallback); _EL_   Log.d(TAG,"Trying to create a new connection."); _EL_   mBluetoothDeviceAddress=address; _EL_   mConnectionState=STATE_CONNECTING; _EL_   return true; _EL_ } _EL_ ', 'private static List<Object> createEqualityKey(Node node){ _EL_   List<Object> values=new ArrayList<Object>(); _EL_   values.add(node.getNodeType()); _EL_   values.add(node.getNodeName()); _EL_   values.add(node.getLocalName()); _EL_   values.add(node.getNamespaceURI()); _EL_   values.add(node.getPrefix()); _EL_   values.add(node.getNodeValue()); _EL_   for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) { _EL_     values.add(child); _EL_   } _EL_ switch (node.getNodeType()) { _EL_ case DOCUMENT_TYPE_NODE: _EL_     DocumentTypeImpl doctype=(DocumentTypeImpl)node; _EL_   values.add(doctype.getPublicId()); _EL_ values.add(doctype.getSystemId()); _EL_ values.add(doctype.getInternalSubset()); _EL_ values.add(doctype.getEntities()); _EL_ values.add(doctype.getNotations()); _EL_ break; _EL_ case ELEMENT_NODE: _EL_ Element element=(Element)node; _EL_ values.add(element.getAttributes()); _EL_ break; _EL_ } _EL_ return values; _EL_ } _EL_ ', '@Override public Enumeration<Option> listOptions(){ _EL_   Vector<Option> newVector=new Vector<Option>(3); _EL_   newVector.addElement(new Option("\\tSets the attribute index.","C",1,"-C <col>")); _EL_   newVector.addElement(new Option("\\tSpecify the list of values to indicate. First and last are\\n" + "\\tvalid indexes (default last)","V",1,"-V <index1,index2-index4,...>")); _EL_   newVector.addElement(new Option("\\tSet if new boolean attribute nominal.","N",0,"-N <index>")); _EL_   return newVector.elements(); _EL_ } _EL_ ', 'private List<String> split(String prefix){ _EL_   List<String> parts=new ArrayList<String>(); _EL_   int bracketCount=0; _EL_   boolean inquotes=false; _EL_   int lastIndex=0; _EL_   for (int i=0; i < prefix.length(); i++) { _EL_     char c=prefix.charAt(i); _EL_     if (c == \'[\') { _EL_       bracketCount++; _EL_       continue; _EL_     } _EL_  else     if (c == \'"\') { _EL_       inquotes=!inquotes; _EL_       continue; _EL_     } _EL_  else     if (c == \']\') { _EL_       bracketCount--; _EL_       if (bracketCount < 0) { _EL_         throw new RuntimeException("Malformed prefix: " + prefix); _EL_       } _EL_       continue; _EL_     } _EL_     if (c == \':\' && !inquotes && bracketCount == 0) { _EL_       parts.add(prefix.substring(lastIndex,i)); _EL_       lastIndex=i + 1; _EL_     } _EL_   } _EL_   if (lastIndex < prefix.length() - 1 && !inquotes && bracketCount == 0) { _EL_     parts.add(prefix.substring(lastIndex)); _EL_   } _EL_   return parts; _EL_ } _EL_ ', 'default Filterable<T> removeAll(final T... values){ _EL_   return removeAll(Stream.of(values)); _EL_ } _EL_ ', 'private static final boolean copyHeader(String name,String fromReq,StringBuffer buf){ _EL_   int start=fromReq.indexOf(name); _EL_   if (start != -1) { _EL_     int end=fromReq.indexOf("\\r\\n",start); _EL_     if (end != -1) { _EL_       buf.append(fromReq.subSequence(start - 2,end)); _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'default Document putAll(Iterable<Field> fields,Predicate<CharSequence> acceptableFieldNames){ _EL_   for (  Field field : fields) { _EL_     if (acceptableFieldNames.test(field.getName())) { _EL_       setValue(field.getName(),field.getValue()); _EL_     } _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public boolean isSpecified(int index){ _EL_   if ((index < 0) || (index >= mLength)) { _EL_     throw new ArrayIndexOutOfBoundsException(""); _EL_   } _EL_   String str=mItems[(index << 3) + 5]; _EL_   return ((str != null) ? (str.charAt(0) == \'d\') : true); _EL_ } _EL_ ', 'default void shutdown(){ _EL_   Platform.exit(); _EL_ } _EL_ ', 'public boolean required(){ _EL_   return _parameterMetadata.contains(Metadata.REQUIRED); _EL_ } _EL_ ', 'public static <E>Set<E> newSetFromMap(Map<E,Boolean> map){ _EL_   if (map.isEmpty()) { _EL_     return new SetFromMap<E>(map); _EL_   } _EL_   throw new IllegalArgumentException(); _EL_ } _EL_ ', 'public static String dropWhile(GString self,@ClosureParams(value=FromString.class,conflictResolutionStrategy=PickFirstResolver.class,options={"String","Character"}) Closure condition){ _EL_   return dropWhile(self.toString(),condition); _EL_ } _EL_ ', 'public AbstractWorkerManager(String id){ _EL_   _id=id; _EL_   _status=new WorkerManagerStatus(); _EL_   setExecutionMode(EXECUTION_MODE.NON_SERIAL); _EL_   setupExecutor(); _EL_ } _EL_ ', 'public void write(final char chars[],final int start,final int length) throws java.io.IOException { _EL_   if (m_writer != null)   m_writer.write(chars,start,length); _EL_   int lengthx3=(length << 1) + length; _EL_   if (lengthx3 >= buf_length) { _EL_     flushBuffer(); _EL_     setBufferSize(2 * lengthx3); _EL_   } _EL_   if (lengthx3 > buf_length - count) { _EL_     flushBuffer(); _EL_   } _EL_   final int n=length + start; _EL_   for (int i=start; i < n; i++) { _EL_     final char c=chars[i]; _EL_     if (c < 0x80)     buf[count++]=(byte)(c); _EL_  else     if (c < 0x800) { _EL_       buf[count++]=(byte)(0xc0 + (c >> 6)); _EL_       buf[count++]=(byte)(0x80 + (c & 0x3f)); _EL_     } _EL_  else { _EL_       buf[count++]=(byte)(0xe0 + (c >> 12)); _EL_       buf[count++]=(byte)(0x80 + ((c >> 6) & 0x3f)); _EL_       buf[count++]=(byte)(0x80 + (c & 0x3f)); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static Set<String> toStringSet(TemplateSequenceModel seqModel) throws TemplateModelException { _EL_   Set<String> set=new HashSet<String>(); _EL_   for (int i=0; i < seqModel.size(); i++) { _EL_     set.add(getAsStringNonEscaping((TemplateScalarModel)seqModel.get(i))); _EL_   } _EL_   return set; _EL_ } _EL_ ', 'public void invertSelectedRelations(){ _EL_   ISelection selection=viewer.getSelection(); _EL_   if (!(selection instanceof IStructuredSelection)) { _EL_     return; _EL_   } _EL_   IStructuredSelection structuredSelection=(IStructuredSelection)selection; _EL_   Collection<Relation> inverse=computeInverseRelations(getTableRelations(),structuredSelection); _EL_   StructuredSelection nextSelection=new StructuredSelection(inverse.toArray()); _EL_   viewer.setSelection(nextSelection,true); _EL_ } _EL_ ', 'private static boolean isMerge(InstructionHandle handle){ _EL_   if (handle.hasTargeters()) { _EL_     InstructionTargeter[] targeterList=handle.getTargeters(); _EL_     for (    InstructionTargeter targeter : targeterList) { _EL_       if (targeter instanceof BranchInstruction) { _EL_         return true; _EL_       } _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void clear(){ _EL_   this.normal=null; _EL_   this.depth=0; _EL_ } _EL_ ', 'private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException { _EL_   s.defaultReadObject(); _EL_   init(getMask(actions)); _EL_ } _EL_ ', 'private void pushTerm(BytesRef text) throws IOException { _EL_   int limit=Math.min(lastTerm.length(),text.length); _EL_   int pos=0; _EL_   while (pos < limit && lastTerm.byteAt(pos) == text.bytes[text.offset + pos]) { _EL_     pos++; _EL_   } _EL_   for (int i=lastTerm.length() - 1; i >= pos; i--) { _EL_     int prefixTopSize=pending.size() - prefixStarts[i]; _EL_     if (prefixTopSize >= minItemsInBlock) { _EL_       writeBlocks(i + 1,prefixTopSize); _EL_       prefixStarts[i]-=prefixTopSize - 1; _EL_     } _EL_   } _EL_   if (prefixStarts.length < text.length) { _EL_     prefixStarts=ArrayUtil.grow(prefixStarts,text.length); _EL_   } _EL_   for (int i=pos; i < text.length; i++) { _EL_     prefixStarts[i]=pending.size(); _EL_   } _EL_   lastTerm.copyBytes(text); _EL_ } _EL_ ', '@Override public boolean connectionAllowed(String eventName){ _EL_   if (m_listenee != null || !eventName.equals("instance")) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static String denormalize(final CharSequence self){ _EL_   if (lineSeparator == null) { _EL_     final StringWriter sw=new StringWriter(2); _EL_     try { _EL_       final BufferedWriter bw=new BufferedWriter(sw); _EL_       bw.newLine(); _EL_       bw.flush(); _EL_       lineSeparator=sw.toString(); _EL_     } _EL_  catch (    IOException ioe) { _EL_       lineSeparator="\\n"; _EL_     } _EL_   } _EL_   final int len=self.length(); _EL_   if (len < 1) { _EL_     return self.toString(); _EL_   } _EL_   final StringBuilder sb=new StringBuilder((110 * len) / 100); _EL_   int i=0; _EL_   CharSequence cs=(self instanceof GString) ? self.toString() : self; _EL_   while (i < len) { _EL_     final char ch=cs.charAt(i++); _EL_ switch (ch) { _EL_ case \'\\r\': _EL_       sb.append(lineSeparator); _EL_     if ((i < len) && (cs.charAt(i) == \'\\n\')) { _EL_       ++i; _EL_     } _EL_   break; _EL_ case \'\\n\': _EL_ sb.append(lineSeparator); _EL_ break; _EL_ default : _EL_ sb.append(ch); _EL_ break; _EL_ } _EL_ } _EL_ return sb.toString(); _EL_ } _EL_ ', 'public static void unregisterBaggageHandler(BaggageHandler handler){ _EL_   handlers.remove(handler); _EL_ } _EL_ ', 'protected void drawMark(Graphics2D g2,float x,float y,Color color){ _EL_   Rectangle2D bounds=mark.getBounds2D(); _EL_   float w=(float)bounds.getWidth(); _EL_   float h=(float)bounds.getHeight(); _EL_   x=x - (w / 2); _EL_   y=y - (h / 2); _EL_   g2.translate(x,y); _EL_   if (color == null) { _EL_     if (markFillPaint != null) { _EL_       g2.setPaint(markFillPaint); _EL_       g2.fill(mark); _EL_     } _EL_   } _EL_  else { _EL_     g2.setPaint(color); _EL_     g2.fill(mark); _EL_   } _EL_   g2.setPaint(markPaint); _EL_   g2.setStroke(markStroke); _EL_   g2.draw(mark); _EL_   g2.translate(-x,-y); _EL_   Rectangle2D rect=new Rectangle2D.Float(x,y,w,h); _EL_   markBounds.add(rect); _EL_ } _EL_ ', 'public void componentResized(ComponentEvent e){ _EL_   if (logger.isLoggable(Level.FINE)) { _EL_     logger.fine("Size changed: " + getWidth() + " x "+ getHeight()); _EL_   } _EL_   projection.setWidth(getWidth()); _EL_   projection.setHeight(getHeight()); _EL_   fireProjectionChanged(); _EL_ } _EL_ ', 'private Token toPrefixToken(ILeafNode leaf){ _EL_   Lexer lexer=new InternalN4JSLexer(); _EL_   String text=leaf.getText(); _EL_   String prefix=text.substring(0,endOffset - leaf.getTotalOffset()); _EL_   ANTLRStringStream stream=new ANTLRStringStream(prefix); _EL_   lexer.setCharStream(stream); _EL_   Token nextToken=lexer.nextToken(); _EL_   return new CommonToken(nextToken.getType(),nextToken.getText()); _EL_ } _EL_ ', 'public void undo(){ _EL_   if (--m_tempUndoIndex < 0) { _EL_     m_tempUndoIndex=m_tempUndoFiles.length - 1; _EL_   } _EL_   if (m_tempUndoFiles[m_tempUndoIndex] != null) { _EL_     AbstractFileLoader loader=ConverterUtils.getLoaderForFile(m_tempUndoFiles[m_tempUndoIndex]); _EL_     try { _EL_       loader.setFile(m_tempUndoFiles[m_tempUndoIndex]); _EL_       setInstancesFromFile(loader); _EL_     } _EL_  catch (    Exception e) { _EL_       e.printStackTrace(); _EL_       m_Log.logMessage(e.toString()); _EL_       JOptionPane.showMessageDialog(PreprocessPanel.this,"Cannot perform undo operation!\\n" + e.toString(),"Undo",JOptionPane.ERROR_MESSAGE); _EL_     } _EL_     m_tempUndoFiles[m_tempUndoIndex]=null; _EL_   } _EL_   int temp=m_tempUndoIndex - 1; _EL_   if (temp < 0) { _EL_     temp=m_tempUndoFiles.length - 1; _EL_   } _EL_   m_UndoBut.setEnabled(m_tempUndoFiles[temp] != null); _EL_ } _EL_ ', 'public Object[] buildParameters(Object[] firstParameters,Method method,Class<? extends Annotation> annotationType){ _EL_   int parametersLength=method.getParameterTypes().length; _EL_   if (firstParameters.length > 0 && parametersLength < 1) { _EL_     throw new RepositoryMethodException(String.format("Method with %s annotation should have at least one parameter.",annotationType)); _EL_   } _EL_   int parametersToResolve=parametersLength - firstParameters.length; _EL_   Object[] additionalParameters=new Object[parametersToResolve]; _EL_   for (int i=firstParameters.length; i < parametersLength; i++) { _EL_     additionalParameters[i - firstParameters.length]=parameterProvider.provide(method,i); _EL_   } _EL_   return concatenate(firstParameters,additionalParameters); _EL_ } _EL_ ', '@Override public boolean contains(S2Cell cell){ _EL_   return contains(cell.id()); _EL_ } _EL_ ', '@Override public void processNewLines(String[] lines){ _EL_   for (  String line : lines) { _EL_     if (line.startsWith("idx")) { _EL_       continue; _EL_     } _EL_     if (line.contains("No such file")) { _EL_       myIsFileMissing=true; _EL_       return; _EL_     } _EL_     String[] values=line.split(LINE_SPLIT_REGEX); _EL_     if (values.length < INDEX_OF_TX_BYTES) { _EL_       continue; _EL_     } _EL_     try { _EL_       int lineUid=Integer.parseInt(values[INDEX_OF_UID]); _EL_       if (myUid == lineUid) { _EL_         int tempRxBytes=Integer.parseInt(values[INDEX_OF_RX_BYTES]); _EL_         int tempTxBytes=Integer.parseInt(values[INDEX_OF_TX_BYTES]); _EL_         if (tempRxBytes < 0 || tempTxBytes < 0) { _EL_           LOG.warning(String.format("Negative rxBytes %1$d and/or txBytes %2$d in %3$s",tempRxBytes,tempTxBytes,line)); _EL_           continue; _EL_         } _EL_         myRxBytes+=tempRxBytes; _EL_         myTxBytes+=tempTxBytes; _EL_       } _EL_     } _EL_  catch (    NumberFormatException e) { _EL_       LOG.warning(String.format("Expected int value, instead got uid %1$s, rxBytes %2$s, txBytes %3$s in %4$s",values[INDEX_OF_UID],values[INDEX_OF_RX_BYTES],values[INDEX_OF_TX_BYTES],line)); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void state2() throws IOException { _EL_   int[] selectionIds=readList(new File(filePrefix + "sel")); _EL_   int[] archivedIds=readList(new File(filePrefix + "arc")); _EL_   int[] variationIds=new int[lambda]; _EL_   if (selectionIds.length != mu) { _EL_     throw new IOException("invalid selection length"); _EL_   } _EL_   updatePopulation(archivedIds); _EL_   clearFile(new File(filePrefix + "sel")); _EL_   clearFile(new File(filePrefix + "arc")); _EL_   List<Solution> offspring=new ArrayList<Solution>(); _EL_   for (int i=0; i < mu; i+=variation.getArity()) { _EL_     Solution[] parents=new Solution[variation.getArity()]; _EL_     for (int j=0; j < variation.getArity(); j++) { _EL_       parents[j]=solutions.get(selectionIds[i + j]); _EL_     } _EL_     offspring.addAll(Arrays.asList(variation.evolve(parents))); _EL_   } _EL_   if (offspring.size() != lambda) { _EL_     throw new IOException("invalid variation length"); _EL_   } _EL_   evaluateAll(offspring); _EL_   for (int i=0; i < lambda; i++) { _EL_     variationIds[i]=addToPopulation(offspring.get(i)); _EL_   } _EL_   writePopulation(new File(filePrefix + "var"),variationIds); _EL_ } _EL_ ', 'public static Query newPrefixQuery(String field,InetAddress value,int prefixLength){ _EL_   if (value == null) { _EL_     throw new IllegalArgumentException("InetAddress must not be null"); _EL_   } _EL_   if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) { _EL_     throw new IllegalArgumentException("illegal prefixLength \'" + prefixLength + "\'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges"); _EL_   } _EL_   byte lower[]=value.getAddress(); _EL_   byte upper[]=value.getAddress(); _EL_   for (int i=prefixLength; i < 8 * lower.length; i++) { _EL_     int m=1 << (7 - (i & 7)); _EL_     lower[i >> 3]&=~m; _EL_     upper[i >> 3]|=m; _EL_   } _EL_   try { _EL_     return newRangeQuery(field,InetAddress.getByAddress(lower),InetAddress.getByAddress(upper)); _EL_   } _EL_  catch (  UnknownHostException e) { _EL_     throw new AssertionError(e); _EL_   } _EL_ } _EL_ ', 'private String excludeDestinationStatement(String text){ _EL_   int idx=-1; _EL_   if ((idx=text.indexOf("Destination will be")) != -1) { _EL_     text=text.substring(0,idx); _EL_   } _EL_   return text; _EL_ } _EL_ ', 'private void applyL1Reg(final double eta_t,Vec x){ _EL_   if (lambda1 > 0) { _EL_     l1U+=eta_t * lambda1; _EL_     for (int k=0; k < ws.length; k++) { _EL_       final Vec w_k=ws[k]; _EL_       final double[] l1Q_k=l1Q[k]; _EL_       for (      IndexValue iv : x) { _EL_         final int i=iv.getIndex(); _EL_         final double z=w_k.get(i); _EL_         double newW_i=0; _EL_         if (z > 0)         newW_i=Math.max(0,z - (l1U + l1Q_k[i])); _EL_  else         if (z < 0)         newW_i=Math.min(0,z + (l1U - l1Q_k[i])); _EL_         l1Q_k[i]+=(newW_i - z); _EL_         w_k.set(i,newW_i); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'private boolean verifyMigrateFromProductHome(String migrateFromProductHome) throws InstallException { _EL_   if (migrateFromProductHome == null || migrateFromProductHome.length() == 0) { _EL_     Debug.log("MultipleMigrateDriver.verifyMigrateFromProductHome() :" + "empty product home by the user"); _EL_     Console.println(LocalizedMessage.get(LOC_HR_MSG_MIGRATE_NONE_FOUND)); _EL_     return false; _EL_   } _EL_   if (!migrateFromProductHome.equals(ConfigUtil.getHomePath())) { _EL_     Debug.log("MultipleMigrateDriver.verifyMigrateFromProductHome() : " + "Migrate from product home: " + migrateFromProductHome + ", New product home: "+ ConfigUtil.getHomePath()); _EL_     String translateFile=migrateFromProductHome + MigrateFromInstFinderStore.getRelativeTranslateFile(); _EL_     if (!FileUtils.isFileValid(translateFile)) { _EL_       Console.println(LocalizedMessage.get(LOC_HR_MSG_MIGRATE_NONE_FOUND)); _EL_       return false; _EL_     } _EL_   } _EL_  else { _EL_     Debug.log("MultipleMigrateDriver - Error:" + "This product has been already migrated!"); _EL_     throw new InstallException(LocalizedMessage.get(LOC_DR_ERR_PRODUCT_ALREADY_MIGRATED)); _EL_   } _EL_   return true; _EL_ } _EL_ ', '@Override public CompletableFuture<Optional<T>> max(final Comparator<? super T> comparator){ _EL_   return CompletableFuture.supplyAsync(null,exec); _EL_ } _EL_ ', 'private static String doGetFullPath(String filename,boolean includeSeparator){ _EL_   if (filename == null) { _EL_     return null; _EL_   } _EL_   int prefix=getPrefixLength(filename); _EL_   if (prefix < 0) { _EL_     return null; _EL_   } _EL_   if (prefix >= filename.length()) { _EL_     if (includeSeparator) { _EL_       return getPrefix(filename); _EL_     } _EL_  else { _EL_       return filename; _EL_     } _EL_   } _EL_   int index=indexOfLastSeparator(filename); _EL_   if (index < 0) { _EL_     return filename.substring(0,prefix); _EL_   } _EL_   int end=index + (includeSeparator ? 1 : 0); _EL_   if (end == 0) { _EL_     end++; _EL_   } _EL_   return filename.substring(0,end); _EL_ } _EL_ ', 'public boolean isDebuggingFinest(){ _EL_   return logger.isLoggable(Level.FINEST); _EL_ } _EL_ ', 'private static void sort1(int[] x,int off,int len){ _EL_   if (len < 7) { _EL_     for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1); _EL_     return; _EL_   } _EL_   int m=off + (len >> 1); _EL_   if (len > 7) { _EL_     int l=off; _EL_     int n=off + len - 1; _EL_     if (len > 40) { _EL_       int s=len / 8; _EL_       l=med3(x,l,l + s,l + 2 * s); _EL_       m=med3(x,m - s,m,m + s); _EL_       n=med3(x,n - 2 * s,n - s,n); _EL_     } _EL_     m=med3(x,l,m,n); _EL_   } _EL_   int v=x[m]; _EL_   int a=off, b=a, c=off + len - 1, d=c; _EL_   while (true) { _EL_     while (b <= c && x[b] <= v) { _EL_       if (x[b] == v)       swap(x,a++,b); _EL_       b++; _EL_     } _EL_     while (c >= b && x[c] >= v) { _EL_       if (x[c] == v)       swap(x,c,d--); _EL_       c--; _EL_     } _EL_     if (b > c)     break; _EL_     swap(x,b++,c--); _EL_   } _EL_   int s, n=off + len; _EL_   s=Math.min(a - off,b - a); _EL_   vecswap(x,off,b - s,s); _EL_   s=Math.min(d - c,n - d - 1); _EL_   vecswap(x,b,n - s,s); _EL_   if ((s=b - a) > 1)   sort1(x,off,s); _EL_   if ((s=d - c) > 1)   sort1(x,n - s,s); _EL_ } _EL_ ', 'private boolean passesSanityCheck(AccessibilityEvent event){ _EL_   final CharSequence afterText=getEventText(event); _EL_   final CharSequence beforeText=event.getBeforeText(); _EL_   if ((event.getAddedCount() == 0) && (event.getRemovedCount() == beforeText.length())) { _EL_     return true; _EL_   } _EL_   if (afterText == null || beforeText == null) { _EL_     return false; _EL_   } _EL_   final int diff=(event.getAddedCount() - event.getRemovedCount()); _EL_   return ((beforeText.length() + diff) == afterText.length()); _EL_ } _EL_ ', 'public static String relativeToAbsolute(String baseURL,String relativeURL){ _EL_   if (relativeURL.startsWith("/")) { _EL_     return getURLProtocol(baseURL) + "://" + getURLHost(baseURL)+ relativeURL; _EL_   } _EL_  else { _EL_     return getURLProtocol(baseURL) + "://" + getURLHost(baseURL)+ getURLBasePath(baseURL)+ relativeURL; _EL_   } _EL_ } _EL_ ', 'private static boolean isSubFormat(String filename){ _EL_   for (  String ext : SUB_EXTENSIONS) { _EL_     if (filename.contains("." + ext)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private static List<String> computeDynamicVMArgs(IJavaProject javaProject){ _EL_   ArrayList<String> out=new ArrayList<String>(); _EL_   String devJarPath=maybeGetDevJarPath(javaProject); _EL_   if (devJarPath.length() > 0) { _EL_     out.add("-Dgwt.devjar=\\"" + devJarPath + \'"\'); _EL_   } _EL_   return out; _EL_ } _EL_ ', 'public ComponentManager(Collection<Sequence> generalSeeds){ _EL_   Set<Sequence> seedSet=new LinkedHashSet<>(generalSeeds.size()); _EL_   seedSet.addAll(generalSeeds); _EL_   this.gralSeeds=Collections.unmodifiableSet(seedSet); _EL_   gralComponents=new SequenceCollection(seedSet); _EL_ } _EL_ ', 'public static final byte[] unzip(byte[] in) throws IOException { _EL_   ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length); _EL_   GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in)); _EL_   byte[] buf=new byte[BUF_SIZE]; _EL_   while (true) { _EL_     int size=inStream.read(buf); _EL_     if (size <= 0)     break; _EL_     outStream.write(buf,0,size); _EL_   } _EL_   outStream.close(); _EL_   return outStream.toByteArray(); _EL_ } _EL_ ', 'public synchronized Object co_entry_pause(int thisCoroutine) throws java.lang.NoSuchMethodException { _EL_   if (!m_activeIDs.get(thisCoroutine))   throw new java.lang.NoSuchMethodException(); _EL_   while (m_nextCoroutine != thisCoroutine) { _EL_     try { _EL_       wait(); _EL_     } _EL_  catch (    java.lang.InterruptedException e) { _EL_     } _EL_   } _EL_   return m_yield; _EL_ } _EL_ ', 'public static Map<String,String> strToMap(String str,String delim,boolean trim,String pairsSeparator){ _EL_   if (str == null)   return null; _EL_   Map<String,String> decodedMap=new HashMap<String,String>(); _EL_   List<String> elements=split(str,delim); _EL_   pairsSeparator=pairsSeparator == null ? "=" : pairsSeparator; _EL_   for (  String s : elements) { _EL_     List<String> e=split(s,pairsSeparator); _EL_     if (e.size() != 2) { _EL_       continue; _EL_     } _EL_     String name=e.get(0); _EL_     String value=e.get(1); _EL_     if (trim) { _EL_       if (name != null) { _EL_         name=name.trim(); _EL_       } _EL_       if (value != null) { _EL_         value=value.trim(); _EL_       } _EL_     } _EL_     try { _EL_       decodedMap.put(URLDecoder.decode(name,"UTF-8"),URLDecoder.decode(value,"UTF-8")); _EL_     } _EL_  catch (    UnsupportedEncodingException e1) { _EL_       Debug.logError(e1,module); _EL_     } _EL_   } _EL_   return decodedMap; _EL_ } _EL_ ', 'public void onStart(){ _EL_   if (mAudioMirrorBuffer == null) { _EL_     mAudioMirrorBuffer=new byte[262144]; _EL_   } _EL_   if (mStreamer != null) { _EL_     mStreamer.start(); _EL_   } _EL_   if (mInsecureStreamer != null) { _EL_     mInsecureStreamer.start(); _EL_   } _EL_ } _EL_ ', 'public NativeRunner(File eclipsec){ _EL_   this.eclipsec=Objects.requireNonNull(eclipsec); _EL_ } _EL_ ', 'public static Calendar reduceCalendar(Calendar calendar){ _EL_   calendar.set(Calendar.MILLISECOND,0); _EL_   calendar.set(Calendar.SECOND,0); _EL_   calendar.set(Calendar.MINUTE,0); _EL_   calendar.set(Calendar.HOUR,0); _EL_   calendar.set(Calendar.HOUR_OF_DAY,0); _EL_   return calendar; _EL_ } _EL_ ', 'private boolean isAnnotation(){ _EL_   return implInterfaces.contains("java.lang.annotation.Annotation"); _EL_ } _EL_ ', 'public boolean longLabel(){ _EL_   return fState.longLabel; _EL_ } _EL_ ', 'public SecretBlock(Mario player,Group parent,int stageZone,float xPos,float yPos,float yoloWidth,Image... hitState){ _EL_   super(BLOCK_COLLISION_DATA,xPos,yPos,0,0,(Image)null); _EL_   this.hitState=hitState[0]; _EL_   yoloView=new ImageView(hitState[1]); _EL_   yoloView.setFitWidth(yoloWidth); _EL_   this.parent=parent; _EL_   zone=stageZone; _EL_ } _EL_ ', 'private Socket openDataConnection(String cmd) throws sun.net.ftp.FtpProtocolException, IOException { _EL_   Socket clientSocket; _EL_   if (passiveMode) { _EL_     try { _EL_       return openPassiveDataConnection(cmd); _EL_     } _EL_  catch (    sun.net.ftp.FtpProtocolException e) { _EL_       String errmsg=e.getMessage(); _EL_       if (!errmsg.startsWith("PASV") && !errmsg.startsWith("EPSV")) { _EL_         throw e; _EL_       } _EL_     } _EL_   } _EL_   ServerSocket portSocket; _EL_   InetAddress myAddress; _EL_   String portCmd; _EL_   if (proxy != null && proxy.type() == Proxy.Type.SOCKS) { _EL_     throw new sun.net.ftp.FtpProtocolException("Passive mode failed"); _EL_   } _EL_   portSocket=new ServerSocket(0,1,server.getLocalAddress()); _EL_   try { _EL_     myAddress=portSocket.getInetAddress(); _EL_     if (myAddress.isAnyLocalAddress()) { _EL_       myAddress=server.getLocalAddress(); _EL_     } _EL_     portCmd="EPRT |" + ((myAddress instanceof Inet6Address) ? "2" : "1") + "|"+ myAddress.getHostAddress()+ "|"+ portSocket.getLocalPort()+ "|"; _EL_     if (!issueCommand(portCmd) || !issueCommand(cmd)) { _EL_       portCmd="PORT "; _EL_       byte[] addr=myAddress.getAddress(); _EL_       for (int i=0; i < addr.length; i++) { _EL_         portCmd=portCmd + (addr[i] & 0xFF) + ","; _EL_       } _EL_       portCmd=portCmd + ((portSocket.getLocalPort() >>> 8) & 0xff) + ","+ (portSocket.getLocalPort() & 0xff); _EL_       issueCommandCheck(portCmd); _EL_       issueCommandCheck(cmd); _EL_     } _EL_     if (connectTimeout >= 0) { _EL_       portSocket.setSoTimeout(connectTimeout); _EL_     } _EL_  else { _EL_       if (defaultConnectTimeout > 0) { _EL_         portSocket.setSoTimeout(defaultConnectTimeout); _EL_       } _EL_     } _EL_     clientSocket=portSocket.accept(); _EL_     if (readTimeout >= 0) { _EL_       clientSocket.setSoTimeout(readTimeout); _EL_     } _EL_  else { _EL_       if (defaultSoTimeout > 0) { _EL_         clientSocket.setSoTimeout(defaultSoTimeout); _EL_       } _EL_     } _EL_   } _EL_   finally { _EL_     portSocket.close(); _EL_   } _EL_   if (useCrypto) { _EL_     try { _EL_       clientSocket=sslFact.createSocket(clientSocket,serverAddr.getHostName(),serverAddr.getPort(),true); _EL_     } _EL_  catch (    Exception ex) { _EL_       throw new IOException(ex.getLocalizedMessage()); _EL_     } _EL_   } _EL_   return clientSocket; _EL_ } _EL_ ', 'public static RevocationHash bruteForceHash(byte[] seed,byte[] target,int maxChildTries,int maxSiblingTries){ _EL_   for (int i=0; i < maxChildTries; i++) { _EL_     for (int j=0; j < maxSiblingTries; j++) { _EL_       RevocationHash test=HashDerivation.calculateRevocationHash(seed,0,j); _EL_       if (Arrays.equals(test.getSecretHash(),target)) { _EL_         return new RevocationHash(i,j,test.getSecret(),test.getSecretHash()); _EL_       } _EL_     } _EL_     seed=Tools.hashSecret(seed); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'protected void flip(BufferCapabilities.FlipContents flipAction){ _EL_   if (peer != null) { _EL_     Image backBuffer=getBackBuffer(); _EL_     if (backBuffer != null) { _EL_       peer.flip(0,0,backBuffer.getWidth(null),backBuffer.getHeight(null),flipAction); _EL_     } _EL_   } _EL_  else { _EL_     throw new IllegalStateException("Component must have a valid peer"); _EL_   } _EL_ } _EL_ ', 'private void drawHook(Canvas canvas){ _EL_   Path hookPath=new Path(); _EL_   double sweepAngle=Math.PI / 180 * 180; _EL_   float y=(float)Math.sin(sweepAngle) * (getBigCircleRadius()) + rectF.height() / 2; _EL_   float x=(float)Math.cos(sweepAngle) * (getBigCircleRadius()) + rectF.width() / 2; _EL_   float i=getBigCircleRadius() / 2; _EL_   hookPath.addRoundRect(new RectF(i + i / 2,i + i / 2,i + i / 2 + 6,i + i + i / 2),3f,3f,Path.Direction.CCW); _EL_   hookPath.addRoundRect(new RectF(i + i / 2,(i + i + i / 2) - 3f,i + i / 2 + i + i,i + i + i / 2 + 3f),3f,3f,Path.Direction.CCW); _EL_   Matrix matrix=new Matrix(); _EL_   matrix.reset(); _EL_   int restoreCount=canvas.getSaveCount(); _EL_   hookPath.close(); _EL_   canvas.rotate(-45,rectF.centerX(),rectF.centerY()); _EL_   canvas.drawPath(hookPath,mHookPaint); _EL_   canvas.restoreToCount(restoreCount); _EL_ } _EL_ ', 'public void removePositions(Collection<Integer> positions){ _EL_   ArrayList<Integer> positionsList=new ArrayList<Integer>(positions); _EL_   Collections.sort(positionsList); _EL_   Collections.reverse(positionsList); _EL_   for (  int position : positionsList) { _EL_     mItems.remove(position); _EL_   } _EL_   notifyDataSetChanged(); _EL_ } _EL_ ', 'private void resetShapeBounds(){ _EL_   RoundRectangle2D.Double rrect=(RoundRectangle2D.Double)shape; _EL_   rrect.setRoundRect(0,0,getBounds().width - 1,getBounds().height - 1,10,10); _EL_ } _EL_ ', '@CallerSensitive public Class<?> forClass(){ _EL_   if (cl == null) { _EL_     return null; _EL_   } _EL_   requireInitialized(); _EL_   if (System.getSecurityManager() != null) { _EL_     Class<?> caller=Reflection.getCallerClass(); _EL_     if (ReflectUtil.needsPackageAccessCheck(caller.getClassLoader(),cl.getClassLoader())) { _EL_       ReflectUtil.checkPackageAccess(cl); _EL_     } _EL_   } _EL_   return cl; _EL_ } _EL_ ', 'private void pathStyleHelper(String style,String offset){ _EL_   if (style == null) { _EL_     return; _EL_   } _EL_   if (style.equals("none")) { _EL_     strokePaint.setPathEffect(null); _EL_     return; _EL_   } _EL_   StringTokenizer st=new StringTokenizer(style," ,"); _EL_   int count=st.countTokens(); _EL_   float[] intervals=new float[(count & 1) == 1 ? count * 2 : count]; _EL_   float max=0; _EL_   float current=1f; _EL_   int i=0; _EL_   while (st.hasMoreTokens()) { _EL_     intervals[i++]=current=toFloat(st.nextToken(),current); _EL_     max+=current; _EL_   } _EL_   for (int start=0; i < intervals.length; i++, start++) { _EL_     max+=intervals[i]=intervals[start]; _EL_   } _EL_   float off=0f; _EL_   if (offset != null) { _EL_     try { _EL_       off=Float.parseFloat(offset) % max; _EL_     } _EL_  catch (    NumberFormatException e) { _EL_     } _EL_   } _EL_   strokePaint.setPathEffect(new DashPathEffect(intervals,off)); _EL_ } _EL_ ', 'Builder addEncodedQueryParameter(String encodedName,String encodedValue){ _EL_   if (encodedName == null)   throw new IllegalArgumentException("encodedName == null"); _EL_   if (encodedQueryNamesAndValues == null)   encodedQueryNamesAndValues=new ArrayList<>(); _EL_   encodedQueryNamesAndValues.add(canonicalize(encodedName,QUERY_COMPONENT_ENCODE_SET,true,true)); _EL_   encodedQueryNamesAndValues.add(encodedValue != null ? canonicalize(encodedValue,QUERY_COMPONENT_ENCODE_SET,true,true) : null); _EL_   return this; _EL_ } _EL_ ', 'public final void clear(){ _EL_   if (GWT.isScript()) { _EL_     jsArray.clear(); _EL_   } _EL_  else { _EL_     javaArray.clear(); _EL_   } _EL_ } _EL_ ', 'public void next(){ _EL_   if (iterator.hasNext()) { _EL_     View currentView=iterator.next(); _EL_     if (isUsingDefaultListener())     currentView.setOnClickListener(null); _EL_     if (iterator.nextIndex() < mViews.size()) { _EL_       View nextView=mViews.get(iterator.nextIndex()); _EL_       if (isUsingDefaultListener())       nextView.setOnClickListener(listener); _EL_       ControllerAnimator animator=getDefaultForwardAnimation(); _EL_       animator.setOldView(currentView); _EL_       animator.setNewView(nextView); _EL_       currentView.startAnimation(animator); _EL_       if (iterator.nextIndex() == mViews.size() - 1)       if (hasControllerListener())       mListener.onEndReached(); _EL_     } _EL_  else { _EL_       if (mLoop) { _EL_         iterator=mViews.listIterator(); _EL_         View nextView=mViews.get(0); _EL_         if (mUseDefaultListener)         nextView.setOnClickListener(listener); _EL_         ControllerAnimator animator=getDefaultForwardAnimation(); _EL_         animator.setOldView(currentView); _EL_         animator.setNewView(nextView); _EL_         currentView.startAnimation(animator); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'private void destroyBeans(Map<String,Object> viewMap,Map<String,ViewScopeContextObject> contextMap){ _EL_   ArrayList<String> removalNameList=new ArrayList<>(); _EL_   if (contextMap != null) { _EL_     for (    Map.Entry<String,ViewScopeContextObject> entry : contextMap.entrySet()) { _EL_       String passivationCapableId=entry.getKey(); _EL_       Contextual contextual=beanManager.getPassivationCapableBean(passivationCapableId); _EL_       ViewScopeContextObject contextObject=entry.getValue(); _EL_       CreationalContext creationalContext=beanManager.createCreationalContext(contextual); _EL_       contextual.destroy(viewMap.get(contextObject.getName()),creationalContext); _EL_       removalNameList.add(contextObject.getName()); _EL_     } _EL_     Iterator<String> removalNames=removalNameList.iterator(); _EL_     while (removalNames.hasNext()) { _EL_       String name=removalNames.next(); _EL_       viewMap.remove(name); _EL_     } _EL_     contextMap.clear(); _EL_   } _EL_ } _EL_ ', '@Override public void close(){ _EL_   try { _EL_     flush(); _EL_   } _EL_  catch (  AMLogException ale) { _EL_     Debug.error(tableName + ":DBHandler:close/flush error: " + ale.getMessage()); _EL_   } _EL_   if (conn != null) { _EL_     try { _EL_       conn.close(); _EL_     } _EL_  catch (    SQLException ce) { _EL_       Debug.error(tableName + ":DBHandler: Unable To Close Connection",ce); _EL_     } _EL_   } _EL_   stopBufferTimer(); _EL_ } _EL_ ', 'private void ensureCapacity(int additionalData){ _EL_   if ((this.position + additionalData) > this.byteBuffer.length) { _EL_     int newLength=(int)(this.byteBuffer.length * 1.25); _EL_     if (newLength < (this.byteBuffer.length + additionalData)) { _EL_       newLength=this.byteBuffer.length + (int)(additionalData * 1.25); _EL_     } _EL_     if (newLength < this.byteBuffer.length) { _EL_       newLength=this.byteBuffer.length + additionalData; _EL_     } _EL_     byte[] newBytes=new byte[newLength]; _EL_     System.arraycopy(this.byteBuffer,0,newBytes,0,this.byteBuffer.length); _EL_     this.byteBuffer=newBytes; _EL_   } _EL_ } _EL_ ', 'public void stop(){ _EL_   server.stop(0); _EL_ } _EL_ ', "protected DateTimeData parse(String str,int durationType) throws SchemaDateTimeException { _EL_   int len=str.length(); _EL_   DateTimeData date=new DateTimeData(str,this); _EL_   int start=0; _EL_   char c=str.charAt(start++); _EL_   if (c != 'P' && c != '-') { _EL_     throw new SchemaDateTimeException(); _EL_   } _EL_  else { _EL_     date.utc=(c == '-') ? '-' : 0; _EL_     if (c == '-' && str.charAt(start++) != 'P') { _EL_       throw new SchemaDateTimeException(); _EL_     } _EL_   } _EL_   int negate=1; _EL_   if (date.utc == '-') { _EL_     negate=-1; _EL_   } _EL_   boolean designator=false; _EL_   int endDate=indexOf(str,start,len,'T'); _EL_   if (endDate == -1) { _EL_     endDate=len; _EL_   } _EL_  else   if (durationType == YEARMONTHDURATION_TYPE) { _EL_     throw new SchemaDateTimeException(); _EL_   } _EL_   int end=indexOf(str,start,endDate,'Y'); _EL_   if (end != -1) { _EL_     if (durationType == DAYTIMEDURATION_TYPE) { _EL_       throw new SchemaDateTimeException(); _EL_     } _EL_     date.year=negate * parseInt(str,start,end); _EL_     start=end + 1; _EL_     designator=true; _EL_   } _EL_   end=indexOf(str,start,endDate,'M'); _EL_   if (end != -1) { _EL_     if (durationType == DAYTIMEDURATION_TYPE) { _EL_       throw new SchemaDateTimeException(); _EL_     } _EL_     date.month=negate * parseInt(str,start,end); _EL_     start=end + 1; _EL_     designator=true; _EL_   } _EL_   end=indexOf(str,start,endDate,'D'); _EL_   if (end != -1) { _EL_     if (durationType == YEARMONTHDURATION_TYPE) { _EL_       throw new SchemaDateTimeException(); _EL_     } _EL_     date.day=negate * parseInt(str,start,end); _EL_     start=end + 1; _EL_     designator=true; _EL_   } _EL_   if (len == endDate && start != len) { _EL_     throw new SchemaDateTimeException(); _EL_   } _EL_   if (len != endDate) { _EL_     end=indexOf(str,++start,len,'H'); _EL_     if (end != -1) { _EL_       date.hour=negate * parseInt(str,start,end); _EL_       start=end + 1; _EL_       designator=true; _EL_     } _EL_     end=indexOf(str,start,len,'M'); _EL_     if (end != -1) { _EL_       date.minute=negate * parseInt(str,start,end); _EL_       start=end + 1; _EL_       designator=true; _EL_     } _EL_     end=indexOf(str,start,len,'S'); _EL_     if (end != -1) { _EL_       date.second=negate * parseSecond(str,start,end); _EL_       start=end + 1; _EL_       designator=true; _EL_     } _EL_     if (start != len || str.charAt(--start) == 'T') { _EL_       throw new SchemaDateTimeException(); _EL_     } _EL_   } _EL_   if (!designator) { _EL_     throw new SchemaDateTimeException(); _EL_   } _EL_   return date; _EL_ } _EL_ ", '@SuppressWarnings("unchecked") private HashMap<String,DBObject> loadDBObjects(Class objectClass){ _EL_   HashMap<String,DBObject> objectMap=new HashMap<String,DBObject>(); _EL_   DBObject dbObject=new DBObject(this,objectClass); _EL_   String objectToLoad=s_logger.localizeMessage("object"); _EL_   String objectsToLoad=s_logger.localizeMessage("objects"); _EL_   String sqlLoadHeaders=null; _EL_   String sqlLoadContents=null; _EL_   if (dbObject != null) { _EL_     objectToLoad=dbObject.getObjectType(); _EL_     objectsToLoad=dbObject.getObjectTypes(); _EL_     sqlLoadHeaders=dbObject.getLoadHeaderSQL(); _EL_     sqlLoadContents=dbObject.getLoadContentSQL(); _EL_   } _EL_   s_logger.log(Level.FINE,"loadDBObjects",new Object[]{objectsToLoad,getDirection()}); _EL_   PreparedStatementWrapper stmtLoadHeaders=setPreparedStatement(sqlLoadHeaders); _EL_   PreparedStatementWrapper stmtLoadContents=setPreparedStatement(sqlLoadContents); _EL_   int counter=0; _EL_   if (dbObject != null) { _EL_     String sql=dbObject.getLoadObjectSQL(); _EL_     Statement stmt=setStatement(); _EL_     ResultSet rs=executeQuery(stmt,sql); _EL_     while (getResultSetNext(rs)) { _EL_       String s=getResultSetString(rs,"OBJECT_NAME"); _EL_       if (!objectMap.containsKey(s)) { _EL_         DBObject obj=new DBObject(this,objectClass,s); _EL_         obj.populate(stmtLoadHeaders,stmtLoadContents); _EL_         if (obj.isPopulated()) { _EL_           objectMap.put(s.toUpperCase(),obj); _EL_           counter++; _EL_         } _EL_       } _EL_     } _EL_     releaseResultSet(rs); _EL_     releaseStatement(stmt); _EL_   } _EL_   releasePreparedStatement(stmtLoadHeaders); _EL_   releasePreparedStatement(stmtLoadContents); _EL_   if (counter == 1)   s_logger.log(Level.FINE,"dbObjectsLoaded",new Object[]{Integer.toString(counter),objectToLoad}); _EL_  else   s_logger.log(Level.FINE,"dbObjectsLoaded",new Object[]{Integer.toString(counter),objectsToLoad}); _EL_   s_logger.flush(); _EL_   return objectMap; _EL_ } _EL_ ', 'public static double max(final double a,final double b){ _EL_   if (a > b) { _EL_     return a; _EL_   } _EL_   if (a < b) { _EL_     return b; _EL_   } _EL_   if (a != b) { _EL_     return Double.NaN; _EL_   } _EL_   long bits=Double.doubleToRawLongBits(a); _EL_   if (bits == 0x8000000000000000L) { _EL_     return b; _EL_   } _EL_   return a; _EL_ } _EL_ ', 'private void scheduleCommercial(int length){ _EL_   Long delay=commercialDelay.getSettingValue(); _EL_   if (delay == null) { _EL_     setCommercialResult("Invalid delay specified."); _EL_     clearCommercialButtonsSelection(); _EL_   } _EL_  else { _EL_     scheduledCommercialTime=System.currentTimeMillis() + delay * 1000; _EL_     scheduledCommercialLength=length; _EL_     update(); _EL_   } _EL_ } _EL_ ', '@SuppressWarnings("purity") private static boolean isRegex(String s){ _EL_   try { _EL_     Pattern.compile(s); _EL_   } _EL_  catch (  PatternSyntaxException e) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static void flush(){ _EL_   clearBuffer(); _EL_   try { _EL_     out.flush(); _EL_   } _EL_  catch (  IOException e) { _EL_     e.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'private String attachFooterToText(String content) throws MessagingException, IOException { _EL_   StringBuilder builder=new StringBuilder(content); _EL_   ensureTrailingCarriageReturn(content,builder); _EL_   builder.append(getFooterText()); _EL_   return builder.toString(); _EL_ } _EL_ ', 'SegmentManager commitIndex(long commitIndex){ _EL_   this.commitIndex=Math.max(this.commitIndex,commitIndex); _EL_   return this; _EL_ } _EL_ ', 'public static String createResourceName(String resource,Locale locale,boolean removeExtension){ _EL_   String resourceName=resource; _EL_   if (removeExtension) { _EL_     if (resourceName.endsWith(".xml")) { _EL_       resourceName=resourceName.replace(".xml",""); _EL_     } _EL_  else     if (resourceName.endsWith(".properties")) { _EL_       resourceName=resourceName.replace(".properties",""); _EL_     } _EL_   } _EL_   if (locale != null) { _EL_     if (UtilValidate.isNotEmpty(locale.toString())) { _EL_       resourceName=resourceName + "_" + locale; _EL_     } _EL_   } _EL_   return resourceName; _EL_ } _EL_ ', 'void drawIcon(Graphics g,int ax,int ay,int aw,int ah,float align,Component c){ _EL_   int gap=isLeftToRight ? -(img.getIconWidth() + bulletgap) : (aw + bulletgap); _EL_   int x=ax + gap; _EL_   int y=Math.max(ay,ay + (int)(align * ah) - img.getIconHeight()); _EL_   img.paintIcon(c,g,x,y); _EL_ } _EL_ ', 'public void remove(DirectedEdge de){ _EL_   outEdges.remove(de); _EL_ } _EL_ ', '@Override public boolean eventGeneratable(String eventName){ _EL_   if (m_listenee == null) { _EL_     return false; _EL_   } _EL_   if (!eventName.equals("instance") && !eventName.equals("dataSet")) { _EL_     return false; _EL_   } _EL_   if (m_listenee instanceof DataSource) { _EL_     if (m_listenee instanceof EventConstraints) { _EL_       EventConstraints ec=(EventConstraints)m_listenee; _EL_       return ec.eventGeneratable(eventName); _EL_     } _EL_   } _EL_   if (m_listenee instanceof TrainingSetProducer) { _EL_     if (m_listenee instanceof EventConstraints) { _EL_       EventConstraints ec=(EventConstraints)m_listenee; _EL_       if (!eventName.equals("dataSet")) { _EL_         return false; _EL_       } _EL_       if (!ec.eventGeneratable("trainingSet")) { _EL_         return false; _EL_       } _EL_     } _EL_   } _EL_   if (m_listenee instanceof TestSetProducer) { _EL_     if (m_listenee instanceof EventConstraints) { _EL_       EventConstraints ec=(EventConstraints)m_listenee; _EL_       if (!eventName.equals("dataSet")) { _EL_         return false; _EL_       } _EL_       if (!ec.eventGeneratable("testSet")) { _EL_         return false; _EL_       } _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static void cleanupAllFiles(FileSystem fileSystem,String BaseUri) throws IOException { _EL_   try { _EL_     if (fileSystem != null) { _EL_       Path rootDir=new Path(BaseUri); _EL_       FileStatus[] files=fileSystem.listStatus(rootDir); _EL_       for (      FileStatus file : files) { _EL_         fileSystem.delete(file.getPath(),false); _EL_       } _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     LOG.error("Error in deleting all files."); _EL_   } _EL_ } _EL_ ', 'public void submit(String queueName,DispatcherTask dispatcherTask){ _EL_ synchronized (syncRoot) { _EL_     DispatcherTaskRunner currentTaskRunner=currentTasksMap.get(queueName); _EL_     if (currentTaskRunner == null) { _EL_       currentTaskRunner=new DispatcherTaskRunner(queueName,dispatcherTask); _EL_       currentTasksMap.put(queueName,currentTaskRunner); _EL_       executorService.execute(currentTaskRunner); _EL_     } _EL_  else { _EL_       enqueueNextTask(queueName,dispatcherTask); _EL_     } _EL_   } _EL_ } _EL_ ', 'private double[] max(double[] distances1,double[] distances2){ _EL_   if (distances1.length != distances2.length) { _EL_     throw new RuntimeException("different lengths!"); _EL_   } _EL_   double[] result=new double[distances1.length]; _EL_   for (int i=0; i < distances1.length; i++) { _EL_     result[i]=Math.max(distances1[i],distances2[i]); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public void goToCurrentDay(){ _EL_   int monthDifference=FlexibleCalendarHelper.getMonthDifference(displayYear,displayMonth); _EL_   Calendar cal=Calendar.getInstance(); _EL_   selectedDateItem.setDay(cal.get(Calendar.DAY_OF_MONTH)); _EL_   selectedDateItem.setMonth(cal.get(Calendar.MONTH)); _EL_   selectedDateItem.setYear(cal.get(Calendar.YEAR)); _EL_   if (disableAutoDateSelection) { _EL_     this.userSelectedItem=selectedDateItem.clone(); _EL_   } _EL_   if (monthDifference != 0) { _EL_     resetAdapters=true; _EL_     if (monthDifference < 0) { _EL_       monthInfPagerAdapter.setFakeCount(lastPosition); _EL_       monthInfPagerAdapter.notifyDataSetChanged(); _EL_     } _EL_     shouldOverrideComputedDate=true; _EL_     moveToPosition(monthDifference); _EL_   } _EL_  else { _EL_     FlexibleCalendarGridAdapter currentlyVisibleAdapter=monthViewPagerAdapter.getMonthAdapterAtPosition(lastPosition % MonthViewPagerAdapter.VIEWS_IN_PAGER); _EL_     currentlyVisibleAdapter.notifyDataSetChanged(); _EL_   } _EL_ } _EL_ ', "private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){ _EL_   int i; _EL_   if (av == null) { _EL_ switch (b[v] & 0xFF) { _EL_ case 'e': _EL_       return v + 5; _EL_ case '@': _EL_     return readAnnotationValues(v + 3,buf,true,null); _EL_ case '[': _EL_   return readAnnotationValues(v + 1,buf,false,null); _EL_ default : _EL_ return v + 3; _EL_ } _EL_ } _EL_ switch (b[v++] & 0xFF) { _EL_ case 'I': _EL_ case 'J': _EL_ case 'F': _EL_ case 'D': _EL_ av.visit(name,readConst(readUnsignedShort(v),buf)); _EL_ v+=2; _EL_ break; _EL_ case 'B': _EL_ av.visit(name,(byte)readInt(items[readUnsignedShort(v)])); _EL_ v+=2; _EL_ break; _EL_ case 'Z': _EL_ av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE); _EL_ v+=2; _EL_ break; _EL_ case 'S': _EL_ av.visit(name,(short)readInt(items[readUnsignedShort(v)])); _EL_ v+=2; _EL_ break; _EL_ case 'C': _EL_ av.visit(name,(char)readInt(items[readUnsignedShort(v)])); _EL_ v+=2; _EL_ break; _EL_ case 's': _EL_ av.visit(name,readUTF8(v,buf)); _EL_ v+=2; _EL_ break; _EL_ case 'e': _EL_ av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf)); _EL_ v+=4; _EL_ break; _EL_ case 'c': _EL_ av.visit(name,Type.getType(readUTF8(v,buf))); _EL_ v+=2; _EL_ break; _EL_ case '@': _EL_ v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf))); _EL_ break; _EL_ case '[': _EL_ int size=readUnsignedShort(v); _EL_ v+=2; _EL_ if (size == 0) { _EL_ return readAnnotationValues(v - 2,buf,false,av.visitArray(name)); _EL_ } _EL_ switch (this.b[v++] & 0xFF) { _EL_ case 'B': _EL_ byte[] bv=new byte[size]; _EL_ for (i=0; i < size; i++) { _EL_ bv[i]=(byte)readInt(items[readUnsignedShort(v)]); _EL_ v+=3; _EL_ } _EL_ av.visit(name,bv); _EL_ --v; _EL_ break; _EL_ case 'Z': _EL_ boolean[] zv=new boolean[size]; _EL_ for (i=0; i < size; i++) { _EL_ zv[i]=readInt(items[readUnsignedShort(v)]) != 0; _EL_ v+=3; _EL_ } _EL_ av.visit(name,zv); _EL_ --v; _EL_ break; _EL_ case 'S': _EL_ short[] sv=new short[size]; _EL_ for (i=0; i < size; i++) { _EL_ sv[i]=(short)readInt(items[readUnsignedShort(v)]); _EL_ v+=3; _EL_ } _EL_ av.visit(name,sv); _EL_ --v; _EL_ break; _EL_ case 'C': _EL_ char[] cv=new char[size]; _EL_ for (i=0; i < size; i++) { _EL_ cv[i]=(char)readInt(items[readUnsignedShort(v)]); _EL_ v+=3; _EL_ } _EL_ av.visit(name,cv); _EL_ --v; _EL_ break; _EL_ case 'I': _EL_ int[] iv=new int[size]; _EL_ for (i=0; i < size; i++) { _EL_ iv[i]=readInt(items[readUnsignedShort(v)]); _EL_ v+=3; _EL_ } _EL_ av.visit(name,iv); _EL_ --v; _EL_ break; _EL_ case 'J': _EL_ long[] lv=new long[size]; _EL_ for (i=0; i < size; i++) { _EL_ lv[i]=readLong(items[readUnsignedShort(v)]); _EL_ v+=3; _EL_ } _EL_ av.visit(name,lv); _EL_ --v; _EL_ break; _EL_ case 'F': _EL_ float[] fv=new float[size]; _EL_ for (i=0; i < size; i++) { _EL_ fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)])); _EL_ v+=3; _EL_ } _EL_ av.visit(name,fv); _EL_ --v; _EL_ break; _EL_ case 'D': _EL_ double[] dv=new double[size]; _EL_ for (i=0; i < size; i++) { _EL_ dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)])); _EL_ v+=3; _EL_ } _EL_ av.visit(name,dv); _EL_ --v; _EL_ break; _EL_ default : _EL_ v=readAnnotationValues(v - 3,buf,false,av.visitArray(name)); _EL_ } _EL_ } _EL_ return v; _EL_ } _EL_ ", 'public boolean matchChomp(String seq){ _EL_   if (matches(seq)) { _EL_     pos+=seq.length(); _EL_     return true; _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public boolean containsWindow(Class<?> windowClass){ _EL_   return (getWindow(windowClass) != null); _EL_ } _EL_ ', 'public void CONT(int sessionNumber) throws Exception { _EL_   this.maxSessionNumber=Math.max(this.maxSessionNumber,sessionNumber); _EL_   testElements.add(new ContinuationElement(sessionNumber)); _EL_ } _EL_ ', 'static private double calcLogProb(int numAppear,double mu){ _EL_   final double sigma=calcSigmaFromMu(mu); _EL_   final double logNumAppear=Math.log(numAppear); _EL_   final double overMu=Math.max(logNumAppear - mu,0.0); _EL_   final double res=-(1.0 / 2) * (overMu * overMu) / (sigma * sigma) - s_logSqrtTwoPi - Math.log(sigma); _EL_   assert (res <= 0); _EL_   return res; _EL_ } _EL_ ', 'protected static String extractSecretAccessKey(String s3uri){ _EL_   return s3uri.substring(s3uri.indexOf(\':\',s3uri.indexOf("://") + 1) + 1,s3uri.indexOf(\'@\')); _EL_ } _EL_ ', 'private void dial(String contactInformation,boolean makeTheCall,boolean usePhoneSpeaker){ _EL_   if (contactInformation.equals("")) { _EL_     String lastRecipient=RecipientCmd.getLastRecipientNumber(); _EL_     String lastRecipientName=RecipientCmd.getLastRecipientName(); _EL_     if (lastRecipient != null) { _EL_       doDial(lastRecipientName,lastRecipient,makeTheCall,usePhoneSpeaker); _EL_     } _EL_  else { _EL_       send("error: last recipient not set"); _EL_     } _EL_   } _EL_  else { _EL_     ResolvedContact resolvedContact=mContactsResolver.resolveContact(contactInformation,ContactsResolver.TYPE_ALL); _EL_     if (resolvedContact == null) { _EL_       send(R.string.chat_no_match_for,contactInformation); _EL_     } _EL_  else     if (resolvedContact.isDistinct()) { _EL_       doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker); _EL_     } _EL_  else { _EL_       askForMoreDetails(resolvedContact.getCandidates()); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void close() throws IOException { _EL_   try { _EL_     Debug.message("binaryfile","StreamInputReader.close()"); _EL_     if (Debug.debugging("connection_problems")) { _EL_       Thread.sleep(1000); _EL_     } _EL_     if (inputStream != null)     inputStream.close(); _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_   } _EL_   inputStream=null; _EL_ } _EL_ ', 'private void readBinary(final LittleEndianDataInputStream dis) throws IOException { _EL_   RajLog.i("StlPaser: Reading Binary"); _EL_   dis.skip(80); _EL_   int facetCount=dis.readInt(); _EL_   float[] verticesArr=new float[facetCount * 9]; _EL_   float[] normalsArr=new float[facetCount * 9]; _EL_   int[] indicesArr=new int[facetCount * 3]; _EL_   float[] tempNorms=new float[3]; _EL_   int vertPos=0, normPos=0; _EL_   for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i; _EL_   while (dis.available() > 0) { _EL_     for (int j=0; j < 3; j++) { _EL_       tempNorms[j]=dis.readFloat(); _EL_       if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) { _EL_         RajLog.w("STL contains bad normals of NaN or Infinite!"); _EL_         tempNorms[0]=0; _EL_         tempNorms[1]=0; _EL_         tempNorms[2]=0; _EL_         break; _EL_       } _EL_     } _EL_     for (int j=0; j < 3; j++) { _EL_       normalsArr[normPos++]=tempNorms[0]; _EL_       normalsArr[normPos++]=tempNorms[1]; _EL_       normalsArr[normPos++]=tempNorms[2]; _EL_     } _EL_     for (int j=0; j < 9; j++)     verticesArr[vertPos++]=dis.readFloat(); _EL_     dis.skip(2); _EL_   } _EL_   mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false); _EL_ } _EL_ ', 'void cancelIncludedOnly(){ _EL_   if (!_showAllInput) { _EL_     _inputAllButton.doClick(); _EL_   } _EL_   if (!_showAllOutput) { _EL_     _outputAllButton.doClick(); _EL_   } _EL_   if (!_showAllAlign) { _EL_     _alignAllButton.doClick(); _EL_   } _EL_ } _EL_ ', 'List<Entry> killAll(boolean rootIncluded){ _EL_   List<Entry> killed=new ArrayList<>(rootIncluded ? entries.size() : entries.size() - 1); _EL_   Entry entry; _EL_   for (int i=entries.size() - 1; i > (rootIncluded ? -1 : 0); i--) { _EL_     entry=entries.get(i); _EL_     if (entry.dead)     continue; _EL_     entry.dead=true; _EL_     if (i != 0) { _EL_       killed.add(entry); _EL_     } _EL_   } _EL_   return killed; _EL_ } _EL_ ', 'public void write(final int b) throws IOException { _EL_   if (m_store == null) { _EL_     throw new IllegalStateException(ERR_NO_STORE); _EL_   } _EL_   if (m_isSaved) { _EL_     throw new IllegalStateException(ERR_ALREADY_SAVED); _EL_   } _EL_   if (m_count == m_blobThreshold && !m_writingHdr) { _EL_     if (m_blobHeader == null) { _EL_       m_blobHeader=new ArrayList<Integer>(); _EL_     } _EL_     final int curAddr=(int)m_store.alloc(m_buf,m_count,m_context); _EL_     m_blobHeader.add(curAddr); _EL_     m_count=0; _EL_   } _EL_   m_buf[m_count++]=(byte)b; _EL_   m_bytesWritten++; _EL_ } _EL_ ', 'public static List<String> unescape(String source,char escapeChar,char[] specialCharacters,char splitCharacter,int splitLimit){ _EL_   List<String> result=new LinkedList<>(); _EL_   StringBuilder b=new StringBuilder(); _EL_   boolean readEscape=false; _EL_   int indexCount=-1; _EL_   for (  char c : source.toCharArray()) { _EL_     indexCount++; _EL_     if (readEscape) { _EL_       boolean found=false; _EL_       if (c == splitCharacter) { _EL_         found=true; _EL_         b.append(c); _EL_       } _EL_  else       if (c == escapeChar) { _EL_         found=true; _EL_         b.append(c); _EL_       } _EL_  else { _EL_         for (        char s : specialCharacters) { _EL_           if (s == c) { _EL_             found=true; _EL_             b.append(c); _EL_             break; _EL_           } _EL_         } _EL_       } _EL_       if (!found) { _EL_         throw new IllegalArgumentException("String \'" + source + "\' contains illegal escaped character \'"+ c+ "\'."); _EL_       } _EL_       readEscape=false; _EL_     } _EL_  else     if (c == escapeChar) { _EL_       readEscape=true; _EL_     } _EL_  else     if (c == splitCharacter) { _EL_       readEscape=false; _EL_       result.add(b.toString()); _EL_       if (splitLimit != -1) { _EL_         if (result.size() == splitLimit - 1) { _EL_           result.add(source.substring(indexCount + 1)); _EL_           return result; _EL_         } _EL_       } _EL_       b=new StringBuilder(); _EL_     } _EL_  else { _EL_       readEscape=false; _EL_       b.append(c); _EL_     } _EL_   } _EL_   result.add(b.toString()); _EL_   return result; _EL_ } _EL_ ', 'protected int drawLegend(Canvas canvas,DefaultRenderer renderer,String[] titles,int left,int right,int y,int width,int height,int legendSize,Paint paint,boolean calculate){ _EL_   float size=32; _EL_   if (renderer.isShowLegend()) { _EL_     float currentX=left; _EL_     float currentY=y + height - legendSize + size; _EL_     paint.setTextAlign(Align.LEFT); _EL_     paint.setTextSize(renderer.getLegendTextSize()); _EL_     int sLength=Math.min(titles.length,renderer.getSeriesRendererCount()); _EL_     for (int i=0; i < sLength; i++) { _EL_       SimpleSeriesRenderer r=renderer.getSeriesRendererAt(i); _EL_       final float lineSize=getLegendShapeWidth(i); _EL_       if (r.isShowLegendItem()) { _EL_         String text=titles[i]; _EL_         if (titles.length == renderer.getSeriesRendererCount()) { _EL_           paint.setColor(r.getColor()); _EL_         } _EL_  else { _EL_           paint.setColor(Color.LTGRAY); _EL_         } _EL_         float[] widths=new float[text.length()]; _EL_         paint.getTextWidths(text,widths); _EL_         float sum=0; _EL_         for (        float value : widths) { _EL_           sum+=value; _EL_         } _EL_         float extraSize=lineSize + 10 + sum; _EL_         float currentWidth=currentX + extraSize; _EL_         if (i > 0 && getExceed(currentWidth,renderer,right,width)) { _EL_           currentX=left; _EL_           currentY+=renderer.getLegendTextSize(); _EL_           size+=renderer.getLegendTextSize(); _EL_           currentWidth=currentX + extraSize; _EL_         } _EL_         if (getExceed(currentWidth,renderer,right,width)) { _EL_           float maxWidth=right - currentX - lineSize- 10; _EL_           if (isVertical(renderer)) { _EL_             maxWidth=width - currentX - lineSize- 10; _EL_           } _EL_           int nr=paint.breakText(text,true,maxWidth,widths); _EL_           text=text.substring(0,nr) + "..."; _EL_         } _EL_         if (!calculate) { _EL_           drawLegendShape(canvas,r,currentX,currentY,i,paint); _EL_           drawString(canvas,text,currentX + lineSize + 5,currentY + 5,paint); _EL_         } _EL_         currentX+=extraSize; _EL_       } _EL_     } _EL_   } _EL_   return Math.round(size + renderer.getLegendTextSize()); _EL_ } _EL_ ', 'private synchronized void initResourceBundle(String resourceBundleName){ _EL_   String current=this.resourceBundleName; _EL_   if (current != null) { _EL_     if (current.equals(resourceBundleName)) { _EL_       return; _EL_     } _EL_  else { _EL_       throw new IllegalArgumentException("Resource bundle name \'" + resourceBundleName + "\' is inconsistent with the existing \'"+ current+ "\'"); _EL_     } _EL_   } _EL_   if (resourceBundleName != null) { _EL_     this.resourceBundle=loadResourceBundle(resourceBundleName); _EL_     this.resourceBundleName=resourceBundleName; _EL_   } _EL_ } _EL_ ', 'void rememberFactory(String host,RMISocketFactory factory){ _EL_ synchronized (successTable) { _EL_     while (hostList.size() >= MaxRememberedHosts) { _EL_       successTable.remove(hostList.elementAt(0)); _EL_       hostList.removeElementAt(0); _EL_     } _EL_     hostList.addElement(host); _EL_     successTable.put(host,factory); _EL_   } _EL_ } _EL_ ', 'private static Collection<Collection<DsnNetPin>> create_ordered_subnets(Collection<DsnNetPin> p_pin_list){ _EL_   Collection<Collection<DsnNetPin>> result=new LinkedList<Collection<DsnNetPin>>(); _EL_   if (p_pin_list.isEmpty()) { _EL_     return result; _EL_   } _EL_   Iterator<DsnNetPin> it=p_pin_list.iterator(); _EL_   DsnNetPin prev_pin=it.next(); _EL_   while (it.hasNext()) { _EL_     DsnNetPin next_pin=it.next(); _EL_     Set<DsnNetPin> curr_subnet_pin_list=new java.util.TreeSet<DsnNetPin>(); _EL_     curr_subnet_pin_list.add(prev_pin); _EL_     curr_subnet_pin_list.add(next_pin); _EL_     result.add(curr_subnet_pin_list); _EL_     prev_pin=next_pin; _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private void writeLocalCSV(MedtronicSensorRecord mostRecentData,Context context){ _EL_   try { _EL_     if (mostRecentData == null || mostRecentData.bGValue == null)     log.debug("writeLocalCSV SAVING  EMPTY!!"); _EL_  else     log.debug("writeLocalCSV SAVING --> " + mostRecentData.bGValue); _EL_     ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(new File(context.getFilesDir(),"save.bin"))); _EL_     oos.writeObject(mostRecentData); _EL_     oos.flush(); _EL_     oos.close(); _EL_   } _EL_  catch (  Exception e) { _EL_     Log.e(TAG,"write to OutputStream failed",e); _EL_     log.error("write to OutputStream failed",e); _EL_   } _EL_ } _EL_ ', 'void start(){ _EL_   this.running=true; _EL_   Thread thread=new Thread(this,"IceConnector@" + hashCode()); _EL_   thread.setDaemon(true); _EL_   thread.start(); _EL_ } _EL_ ', 'protected void sqrtLayout(VisualTable labels){ _EL_   Rectangle2D b=getLayoutBounds(); _EL_   double breadth=getBreadth(b); _EL_   double span=m_hi - m_lo; _EL_   double splo=MathLib.safeSqrt(m_prevlo); _EL_   double spspan=MathLib.safeSqrt(m_prevhi) - splo; _EL_   double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo))); _EL_   double slo=MathLib.safeSqrt(m_lo); _EL_   double sspan=MathLib.safeSqrt(m_hi) - slo; _EL_   Iterator iter=labels.tuples(); _EL_   while (iter.hasNext()) { _EL_     VisualItem item=(VisualItem)iter.next(); _EL_     reset(item); _EL_     double v=item.getDouble(VALUE); _EL_     double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / sspan) * breadth; _EL_     set(item,x,b); _EL_   } _EL_   Index index=labels.index(VALUE); _EL_   double step=getLinearStep(span,breadth / span); _EL_   if (step == 0)   step=1; _EL_   int r; _EL_   for (double x, v=vlo; v <= m_hi; v+=step) { _EL_     x=((MathLib.safeSqrt(v) - slo) / sspan) * breadth; _EL_     if (x < -0.5) { _EL_       continue; _EL_     } _EL_  else     if ((r=index.get(v)) >= 0) { _EL_       VisualItem item=labels.getItem(r); _EL_       item.setVisible(true); _EL_       item.setEndVisible(true); _EL_     } _EL_  else { _EL_       VisualItem item=labels.addItem(); _EL_       item.set(LABEL,m_nf.format(v)); _EL_       item.setDouble(VALUE,v); _EL_       double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan); _EL_       if (f <= 0 || f >= 1.0) { _EL_         item.setStartVisible(true); _EL_       } _EL_       set(item,f * breadth,b); _EL_       set(item,x,b); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected boolean customShouldTakeFocus(){ _EL_   if (customArea instanceof Label) { _EL_     return false; _EL_   } _EL_   if (customArea instanceof CLabel) { _EL_     return (customArea.getStyle() & SWT.NO_FOCUS) > 0; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static boolean isExtension(String filename,Collection<String> extensions){ _EL_   if (filename == null)   return false; _EL_   if (extensions == null || extensions.isEmpty())   return indexOfExtension(filename) == -1; _EL_   String fileExt=getExtension(filename); _EL_   for (  String extension : extensions) { _EL_     if (fileExt.equals(extension))     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static double info(int counts[]){ _EL_   int total=0; _EL_   double x=0; _EL_   for (  int count : counts) { _EL_     x-=xlogx(count); _EL_     total+=count; _EL_   } _EL_   return x + xlogx(total); _EL_ } _EL_ ', 'private void ensureFileOpen(){ _EL_   if (savingDisabled) { _EL_     Log.e(TAG,"Saving disabled but tried to ensureFileOpen"); _EL_     return; _EL_   } _EL_   if (saveFileStream != null)   return; _EL_   File saveFile=new File(ctx.getFilesDir(),SAVEFILE); _EL_   try { _EL_     FileOutputStream fileOutput=null; _EL_     DataOutputStream out=null; _EL_     if (saveFile.exists()) { _EL_       fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_APPEND); _EL_       out=new DataOutputStream(new BufferedOutputStream(fileOutput)); _EL_     } _EL_  else { _EL_       fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE); _EL_       out=new DataOutputStream(new BufferedOutputStream(fileOutput)); _EL_       out.writeInt(TrackPoint.FORMAT_VERSION); _EL_       savedTrackPoints=0; _EL_     } _EL_     saveFileStream=out; _EL_   } _EL_  catch (  Exception e) { _EL_     markSavingBroken("Failed to open track save file",e); _EL_   } _EL_ } _EL_ ', 'protected int read(InputStream inputStream,byte[] buffer,char divider) throws IOException { _EL_   int index=0; _EL_   do { _EL_     byte readByte=(byte)(0x000000FF & inputStream.read()); _EL_     if (readByte == -1 || readByte == (byte)divider) { _EL_       return index; _EL_     } _EL_     buffer[index]=readByte; _EL_     index++; _EL_   } _EL_  while (index < buffer.length); _EL_   return index; _EL_ } _EL_ ', 'public boolean isExpired(){ _EL_   return this.ttl < System.currentTimeMillis(); _EL_ } _EL_ ', 'protected void addContentSpecToElement(XMLElementDecl elementDecl){ _EL_   if ((fDepth == 0 || (fDepth == 1 && elementDecl.type == XMLElementDecl.TYPE_MIXED)) && fNodeIndexStack != null) { _EL_     if (elementDecl.type == XMLElementDecl.TYPE_MIXED) { _EL_       int pcdata=addUniqueLeafNode(null); _EL_       if (fNodeIndexStack[0] == -1) { _EL_         fNodeIndexStack[0]=pcdata; _EL_       } _EL_  else { _EL_         fNodeIndexStack[0]=addContentSpecNode(XMLContentSpec.CONTENTSPECNODE_CHOICE,pcdata,fNodeIndexStack[0]); _EL_       } _EL_     } _EL_     setContentSpecIndex(fCurrentElementIndex,fNodeIndexStack[fDepth]); _EL_   } _EL_ } _EL_ ', 'public String convertToLowerCase(String table){ _EL_   return table.toLowerCase(); _EL_ } _EL_ ', 'public PickingGraphMousePlugin(int selectionModifiers,int addToSelectionModifiers){ _EL_   super(selectionModifiers); _EL_   this.addToSelectionModifiers=addToSelectionModifiers; _EL_   this.lensPaintable=new LensPaintable(); _EL_   this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR); _EL_ } _EL_ ', 'public ViewRefRender(ViewRender<T> view,Class<T> type,int priority){ _EL_   Objects.requireNonNull(view); _EL_   _view=view; _EL_   _type=type; _EL_   _priority=priority; _EL_ } _EL_ ', 'private boolean isUpperCaseCamelCaseHunk(String hunk){ _EL_   if (hunk.length() < 2)   return false; _EL_   for (int i=0; i < hunk.length(); i++) { _EL_     if (!isLegalChar(hunk.charAt(i)))     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'static void removeRedundantAffix(TranslatorUtils.IContain iContain,List<String> strList){ _EL_   if (strList.size() <= 1) { _EL_     return; _EL_   } _EL_   int w=0; _EL_   for (  String str : strList) { _EL_     if (w == 0 || !iContain.containFunc(str,strList.get(w - 1))) { _EL_       strList.set(w,str); _EL_       w++; _EL_     } _EL_   } _EL_   strList=strList.subList(0,w); _EL_ } _EL_ ', 'public ConfigureCoerceiveParsingDialog_NB(CoerciveParsing coerciveParsing){ _EL_   this.coerciveParsing=coerciveParsing; _EL_   initComponents(); _EL_   final IterateModel numberOfTagsIterator=coerciveParsing.getNumberOfTagsIterator(); _EL_   configureIterateModel_NB2.setStartAt(String.valueOf(numberOfTagsIterator.getStartAt())); _EL_   configureIterateModel_NB2.setStopAt(String.valueOf(numberOfTagsIterator.getStopAt())); _EL_   configureIterateModel_NB2.setIncrement(String.valueOf(numberOfTagsIterator.getIncrement())); _EL_   configureIterateModel_NB2.setIterateStrategie(numberOfTagsIterator.getIterateStrategie()); _EL_   List<String> tagNames=Arrays.asList(coerciveParsing.getTagNames()); _EL_   configureStringList_NB1.setStringList(tagNames); _EL_ } _EL_ ', 'public FileSaverDescriptor(@NotNull String title,@NotNull String description,String... extensions){ _EL_   super(true,true,true,true,false,false); _EL_   setTitle(title); _EL_   setDescription(description); _EL_   this.extensions=Arrays.asList(extensions); _EL_ } _EL_ ', 'public DockNodeEventHandler(Node node){ _EL_   this.node=node; _EL_ } _EL_ ', 'public void reclaimViews(List<View> views){ _EL_   int childCount=getChildCount(); _EL_   RecyclerListener listener=mRecycler.mRecyclerListener; _EL_   for (int i=0; i < childCount; i++) { _EL_     View child=getChildAt(i); _EL_     TwoWayAbsListView.LayoutParams lp=(TwoWayAbsListView.LayoutParams)child.getLayoutParams(); _EL_     if (lp != null && mRecycler.shouldRecycleViewType(lp.viewType)) { _EL_       views.add(child); _EL_       if (listener != null) { _EL_         listener.onMovedToScrapHeap(child); _EL_       } _EL_     } _EL_   } _EL_   mRecycler.reclaimScrapViews(views); _EL_   removeAllViewsInLayout(); _EL_ } _EL_ ', 'private void serializeCompactRDFGeneralQualifier(int indent,XMPNode node) throws IOException, XMPException { _EL_   write(" rdf:parseType=\\"Resource\\">"); _EL_   writeNewline(); _EL_   serializeCanonicalRDFProperty(node,false,true,indent + 1); _EL_   for (Iterator iq=node.iterateQualifier(); iq.hasNext(); ) { _EL_     XMPNode qualifier=(XMPNode)iq.next(); _EL_     serializeCanonicalRDFProperty(qualifier,false,false,indent + 1); _EL_   } _EL_ } _EL_ ', 'public static void dropIndex(Connection conn,String schema,String table) throws SQLException { _EL_   init(conn); _EL_   PreparedStatement prep=conn.prepareStatement("SELECT ID FROM " + SCHEMA + ".INDEXES WHERE SCHEMA=? AND TABLE=?"); _EL_   prep.setString(1,schema); _EL_   prep.setString(2,table); _EL_   ResultSet rs=prep.executeQuery(); _EL_   if (!rs.next()) { _EL_     return; _EL_   } _EL_   int indexId=rs.getInt(1); _EL_   prep=conn.prepareStatement("DELETE FROM " + SCHEMA + ".INDEXES WHERE ID=?"); _EL_   prep.setInt(1,indexId); _EL_   prep.execute(); _EL_   createOrDropTrigger(conn,schema,table,false); _EL_   prep=conn.prepareStatement("DELETE FROM " + SCHEMA + ".ROWS WHERE INDEXID=? AND ROWNUM<10000"); _EL_   while (true) { _EL_     prep.setInt(1,indexId); _EL_     int deleted=prep.executeUpdate(); _EL_     if (deleted == 0) { _EL_       break; _EL_     } _EL_   } _EL_   prep=conn.prepareStatement("DELETE FROM " + SCHEMA + ".MAP M "+ "WHERE NOT EXISTS (SELECT * FROM "+ SCHEMA+ ".ROWS R WHERE R.ID=M.ROWID) AND ROWID<10000"); _EL_   while (true) { _EL_     int deleted=prep.executeUpdate(); _EL_     if (deleted == 0) { _EL_       break; _EL_     } _EL_   } _EL_ } _EL_ ', 'public ScriptBuilder data(int index,byte[] data){ _EL_   byte[] copy=Arrays.copyOf(data,data.length); _EL_   int opcode; _EL_   if (data.length == 0) { _EL_     opcode=OP_0; _EL_   } _EL_  else   if (data.length == 1) { _EL_     byte b=data[0]; _EL_     if (b >= 1 && b <= 16)     opcode=Script.encodeToOpN(b); _EL_  else     opcode=1; _EL_   } _EL_  else   if (data.length < OP_PUSHDATA1) { _EL_     opcode=data.length; _EL_   } _EL_  else   if (data.length < 256) { _EL_     opcode=OP_PUSHDATA1; _EL_   } _EL_  else   if (data.length < 65536) { _EL_     opcode=OP_PUSHDATA2; _EL_   } _EL_  else { _EL_     throw new RuntimeException("Unimplemented"); _EL_   } _EL_   return addChunk(index,new ScriptChunk(opcode,copy)); _EL_ } _EL_ ', 'public void initialize(Map configParams){ _EL_   String delimiterConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER); _EL_   if (delimiterConfig != null) { _EL_     this.delimiter=delimiterConfig; _EL_   } _EL_   String caseConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE); _EL_   if (caseConfig != null) { _EL_     if (caseConfig.equals("true")) { _EL_       this.caseSensitive=true; _EL_     } _EL_  else     if (caseConfig.equals("false")) { _EL_       this.caseSensitive=false; _EL_     } _EL_  else { _EL_       this.caseSensitive=true; _EL_     } _EL_   } _EL_   String wildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD); _EL_   if (wildcardConfig != null) { _EL_     this.wildcard=wildcardConfig; _EL_   } _EL_   String oneLevelWildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD); _EL_   if (oneLevelWildcardConfig != null) { _EL_     this.oneLevelWildcard=oneLevelWildcardConfig; _EL_   } _EL_   if (debug.messageEnabled()) { _EL_     debug.message("PrefixResourceName:initialize():" + " delimiter = " + delimiter + " wildcard = "+ wildcard+ " oneLevelWildcard = "+ oneLevelWildcard+ " case = "+ caseConfig); _EL_   } _EL_   oneLevelWildcardLength=oneLevelWildcard.length(); _EL_   wildcardLength=wildcard.length(); _EL_   if (oneLevelWildcard.indexOf(wildcard) != -1) { _EL_     wildcardEmbedded=true; _EL_   } _EL_  else { _EL_     wildcardEmbedded=false; _EL_   } _EL_   if (wildcard.indexOf(oneLevelWildcard) != -1) { _EL_     oneLevelWildcardEmbedded=true; _EL_   } _EL_  else { _EL_     oneLevelWildcardEmbedded=false; _EL_   } _EL_   if (debug.messageEnabled()) { _EL_     debug.message("wildcardEmbedded,oneLevelWildcardEmbedded" + wildcardEmbedded + ","+ oneLevelWildcardEmbedded); _EL_   } _EL_   return; _EL_ } _EL_ ', 'public void shutdown(){ _EL_   running=false; _EL_   if (networkThreads != null) { _EL_     for (    NetworkThread n : networkThreads) { _EL_       n.stopped=true; _EL_     } _EL_   } _EL_   networkThreads=null; _EL_ synchronized (LOCK) { _EL_     LOCK.notifyAll(); _EL_   } _EL_ } _EL_ ', 'public SerialMessage(byte[] a){ _EL_   super(String.valueOf(a)); _EL_   setBinary(true); _EL_ } _EL_ ', 'private static MetricValue number_to_metric_value_(Number elem){ _EL_   if (elem == null)   return MetricValue.EMPTY; _EL_   final String num=elem.toString(); _EL_   try { _EL_     return MetricValue.fromIntValue(Long.parseLong(num)); _EL_   } _EL_  catch (  NumberFormatException ex) { _EL_   } _EL_   try { _EL_     return MetricValue.fromDblValue(Double.parseDouble(num)); _EL_   } _EL_  catch (  NumberFormatException ex) { _EL_   } _EL_   return MetricValue.fromStrValue(num); _EL_ } _EL_ ', 'public OkapiBM25(double k1,double b){ _EL_   if (Double.isNaN(k1) || Double.isInfinite(k1) || k1 < 0)   throw new IllegalArgumentException("coefficient k1 must be a non negative constant, not " + k1); _EL_   this.k1=k1; _EL_   if (Double.isNaN(b) || b < 0 || b > 1)   throw new IllegalArgumentException("coefficient b must be in the range [0,1], not " + b); _EL_   this.b=b; _EL_ } _EL_ ', 'public void stop(int timeout) throws InterruptedException { _EL_   if (!isclosed.compareAndSet(false,true)) { _EL_     return; _EL_   } _EL_   List<WebSocket> socketsToClose=null; _EL_ synchronized (connections) { _EL_     socketsToClose=new ArrayList<WebSocket>(connections); _EL_   } _EL_   for (  WebSocket ws : socketsToClose) { _EL_     ws.close(CloseFrame.GOING_AWAY); _EL_   } _EL_ synchronized (this) { _EL_     if (selectorthread != null) { _EL_       if (Thread.currentThread() != selectorthread) { _EL_       } _EL_       if (selectorthread != Thread.currentThread()) { _EL_         if (socketsToClose.size() > 0)         selectorthread.join(timeout); _EL_         selectorthread.interrupt(); _EL_         selectorthread.join(); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'protected void calculateItemWidth(CategoryPlot plot,Rectangle2D dataArea,int rendererIndex,CategoryItemRendererState state){ _EL_   CategoryAxis domainAxis=getDomainAxis(plot,rendererIndex); _EL_   CategoryDataset dataset=plot.getDataset(rendererIndex); _EL_   if (dataset != null) { _EL_     int columns=dataset.getColumnCount(); _EL_     int rows=state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : dataset.getRowCount(); _EL_     double space=0.0; _EL_     PlotOrientation orientation=plot.getOrientation(); _EL_     if (orientation == PlotOrientation.HORIZONTAL) { _EL_       space=dataArea.getHeight(); _EL_     } _EL_  else     if (orientation == PlotOrientation.VERTICAL) { _EL_       space=dataArea.getWidth(); _EL_     } _EL_     double maxWidth=space * getMaximumItemWidth(); _EL_     double categoryMargin=0.0; _EL_     double currentItemMargin=0.0; _EL_     if (columns > 1) { _EL_       categoryMargin=domainAxis.getCategoryMargin(); _EL_     } _EL_     if (rows > 1) { _EL_       currentItemMargin=getItemMargin(); _EL_     } _EL_     double used=space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin- currentItemMargin); _EL_     if ((rows * columns) > 0) { _EL_       state.setBarWidth(Math.min(used / (rows * columns),maxWidth)); _EL_     } _EL_  else { _EL_       state.setBarWidth(Math.min(used,maxWidth)); _EL_     } _EL_   } _EL_ } _EL_ ', '@SuppressWarnings("ResultOfMethodCallIgnored") public static void pipeInputToOutputStream(InputStream in,File fileOut,boolean ignoreErrors) throws IOException { _EL_   if (fileOut == null) { _EL_     logger.error("The output filename doesn\'t exist or is invalid"); _EL_     if (!ignoreErrors) { _EL_       throw new IOException("The output filename doesn\'t exist or is invalid"); _EL_     } _EL_   } _EL_  else { _EL_     File parent=fileOut.getParentFile(); _EL_     if (parent != null && !parent.exists()) { _EL_       parent.mkdirs(); _EL_     } _EL_     OutputStream fileStream=null; _EL_     try { _EL_       fileStream=new FileOutputStream(fileOut); _EL_       pipeInputToOutputStream(in,fileStream,true,ignoreErrors); _EL_     } _EL_  catch (    IOException e) { _EL_       if (fileStream != null) { _EL_         try { _EL_           fileStream.close(); _EL_         } _EL_  catch (        IOException ex) { _EL_           logger.error("Cannot close stream - {}",ex.getMessage()); _EL_         } _EL_       } _EL_       if (!ignoreErrors) { _EL_         throw e; _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', '@SuppressLint("Assert") void release(){ _EL_   assert (mProcessingThread.getState() == State.TERMINATED); _EL_   mDetector.release(); _EL_   mDetector=null; _EL_ } _EL_ ', 'void submit(ProcessAndDisplayImageTask task){ _EL_   initExecutorsIfNeed(); _EL_   taskExecutorForCachedImages.execute(task); _EL_ } _EL_ ', "private String partiallyEscapeAssertionValue(String assertionValue){ _EL_   StringBuilder sb=new StringBuilder(assertionValue.length()); _EL_   for (int j=0; j < assertionValue.length(); j++) { _EL_     char c=assertionValue.charAt(j); _EL_     if (c == '*') { _EL_       sb.append(c); _EL_     } _EL_  else { _EL_       sb.append(Filter.escapeAssertionValue(String.valueOf(c))); _EL_     } _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ", 'synchronized boolean release(){ _EL_   d("release()"); _EL_   if (state == BUSY) { _EL_     state=IDLE; _EL_     idleSince=System.currentTimeMillis(); _EL_     return true; _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'private static String partitionSpecToName(Map<String,String> spec){ _EL_   StringBuilder sb=new StringBuilder(); _EL_   for (  Map.Entry<String,String> entry : spec.entrySet()) { _EL_     if (sb.length() != 0) { _EL_       sb.append("/"); _EL_     } _EL_     sb.append(entry.getKey() + "=" + entry.getValue()); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'public static void main(String[] args){ _EL_   double preBuffer=Double.parseDouble(args[4]); _EL_   double postBuffer=Double.parseDouble(args[5]); _EL_   run(args[0],args[1],args[2],args[3],preBuffer,postBuffer); _EL_ } _EL_ ', 'public boolean equalsDefault(){ _EL_   return (Double.doubleToLongBits(value) == 0); _EL_ } _EL_ ', 'private void notifyActivityStateChanged(Bundle bundle){ _EL_   if (!mRecords.isEmpty()) { _EL_     Log.d(TAG,"notifyActivityStatusChanged:clients = " + mRecords.size()); _EL_ synchronized (mRecords) { _EL_       Iterator<Record> iterator=mRecords.iterator(); _EL_       while (iterator.hasNext()) { _EL_         Record record=(Record)iterator.next(); _EL_         FmRadioListener listener=record.mCallback; _EL_         if (listener == null) { _EL_           iterator.remove(); _EL_           return; _EL_         } _EL_         listener.onCallBack(bundle); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public synchronized void reset(){ _EL_   pos=0; _EL_ } _EL_ ', 'public static void write(File file,CharSequence data) throws IOException { _EL_   write(file,data,Charset.defaultCharset(),false); _EL_ } _EL_ ', 'public synchronized void disableAttribute(String name){ _EL_   enabledAttributes.removeElement(name); _EL_ } _EL_ ', 'public void onSinksReceived(String sourceUrn,List<MediaSink> sinks){ _EL_   mSinks.put(sourceUrn,sinks); _EL_   nativeOnSinksReceived(mNativeMediaRouterAndroid,sourceUrn,sinks.size()); _EL_ } _EL_ ', '@NotNull protected VirtualFile[] collectAffectedFiles(@NotNull Project project,@NotNull VirtualFile[] files){ _EL_   List<VirtualFile> affectedFiles=new ArrayList<VirtualFile>(files.length); _EL_   ProjectLevelVcsManager projectLevelVcsManager=ProjectLevelVcsManager.getInstance(project); _EL_   for (  VirtualFile file : files) { _EL_     if (!file.isDirectory() && projectLevelVcsManager.getVcsFor(file) instanceof GitVcs) { _EL_       affectedFiles.add(file); _EL_     } _EL_  else     if (file.isDirectory() && isRecursive()) { _EL_       addChildren(project,affectedFiles,file); _EL_     } _EL_   } _EL_   return VfsUtilCore.toVirtualFileArray(affectedFiles); _EL_ } _EL_ ', 'public void clone(Vector3f source){ _EL_   System.arraycopy(source.points,0,points,0,3); _EL_ } _EL_ ', 'protected void drawCenterText(Canvas c){ _EL_   CharSequence centerText=mChart.getCenterText(); _EL_   if (mChart.isDrawCenterTextEnabled() && centerText != null) { _EL_     MPPointF center=mChart.getCenterCircleBox(); _EL_     MPPointF offset=mChart.getCenterTextOffset(); _EL_     float x=center.x + offset.x; _EL_     float y=center.y + offset.y; _EL_     float innerRadius=mChart.isDrawHoleEnabled() && !mChart.isDrawSlicesUnderHoleEnabled() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius(); _EL_     RectF holeRect=mRectBuffer[0]; _EL_     holeRect.left=x - innerRadius; _EL_     holeRect.top=y - innerRadius; _EL_     holeRect.right=x + innerRadius; _EL_     holeRect.bottom=y + innerRadius; _EL_     RectF boundingRect=mRectBuffer[1]; _EL_     boundingRect.set(holeRect); _EL_     float radiusPercent=mChart.getCenterTextRadiusPercent() / 100f; _EL_     if (radiusPercent > 0.0) { _EL_       boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f); _EL_     } _EL_     if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) { _EL_       mCenterTextLastBounds.set(boundingRect); _EL_       mCenterTextLastValue=centerText; _EL_       float width=mCenterTextLastBounds.width(); _EL_       mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false); _EL_     } _EL_     float layoutHeight=mCenterTextLayout.getHeight(); _EL_     c.save(); _EL_     if (Build.VERSION.SDK_INT >= 18) { _EL_       Path path=mDrawCenterTextPathBuffer; _EL_       path.reset(); _EL_       path.addOval(holeRect,Path.Direction.CW); _EL_       c.clipPath(path); _EL_     } _EL_     c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f); _EL_     mCenterTextLayout.draw(c); _EL_     c.restore(); _EL_     MPPointF.recycleInstance(center); _EL_     MPPointF.recycleInstance(offset); _EL_   } _EL_ } _EL_ ', 'public void addPolicyListener(PolicyListener policyListener){ _EL_   policyCache.addPolicyListener(policyListener); _EL_ } _EL_ ', 'public static String deflate(String previous,String current){ _EL_   if (previous == null)   return current; _EL_   StringBuilder buf=new StringBuilder(); _EL_   int start1=0; _EL_   int start2=0; _EL_   while (start1 < previous.length() && start2 < current.length()) { _EL_     int end1=start1; _EL_     int end2=start2; _EL_     while (end1 <= previous.length() && end2 <= current.length()) { _EL_       int c1=(end1 < previous.length() ? previous.charAt(end1) : \'\\t\'); _EL_       int c2=(end2 < current.length() ? current.charAt(end2) : \'\\t\'); _EL_       if (c1 == c2) { _EL_         if (c1 == \'\\t\') { _EL_           buf.append("&"); _EL_           break; _EL_         } _EL_  else { _EL_           end1++; _EL_           end2++; _EL_         } _EL_       } _EL_  else { _EL_         while (end1 < previous.length() && previous.charAt(end1) != \'\\t\') { _EL_           end1++; _EL_         } _EL_         while (end2 < current.length() && current.charAt(end2) != \'\\t\') { _EL_           end2++; _EL_         } _EL_         for (int i=start2; i < end2; i++)         buf.append(current.charAt(i)); _EL_         break; _EL_       } _EL_     } _EL_     start1=end1 + 1; _EL_     start2=end2 + 1; _EL_     if (start2 < current.length())     buf.append("\\t"); _EL_   } _EL_   return buf.toString(); _EL_ } _EL_ ', 'protected int splitListIndex(List<Pair<Double,Integer>> S){ _EL_   return S.size() / 2; _EL_ } _EL_ ', 'public static void e(String tag,String msg,Object... args){ _EL_   if (sLevel > LEVEL_ERROR) { _EL_     return; _EL_   } _EL_   if (args.length > 0) { _EL_     msg=String.format(msg,args); _EL_   } _EL_   Log.e(tag,msg); _EL_ } _EL_ ', 'public static synchronized void addPropertyChangeListener(PropertyChangeListener l){ _EL_   if (!listeners.contains(l)) { _EL_     listeners.add(l); _EL_   } _EL_ } _EL_ ', 'public MultiplexManager(DataStore... dataStores){ _EL_   this.dataStores=Arrays.asList(dataStores); _EL_ } _EL_ ', 'public static double pdf(double x,double shape,double scale,double factor){ _EL_   if (x <= 0)   return 0.0; _EL_   final double a=Math.exp(shape * Math.log(scale) - (shape + 1) * Math.log(x) - (scale / x) - GammaFunction.lnGamma(shape)); _EL_   return factor * a; _EL_ } _EL_ ', 'public static void discard(){ _EL_   current.remove(); _EL_ } _EL_ ', 'private Token toASIToken(ILeafNode leaf){ _EL_   if (leaf.isHidden()) { _EL_     return newSemicolonToken(leaf); _EL_   } _EL_  else { _EL_     if (!leafNodes.hasNext()) { _EL_       int tokenType=tokenTypeMapper.getInternalTokenType(leaf); _EL_       int semicolonTokenType=tokenTypeMapper.getInternalTokenType(semicolon); _EL_       if (tokenType == semicolonTokenType) { _EL_         return new CommonToken(semicolonTokenType,leaf.getText()); _EL_       } _EL_       if (leaf.getTotalEndOffset() == endOffset) { _EL_         leafNodes=Iterators.emptyIterator(); _EL_         return new CommonToken(tokenType,leaf.getText()); _EL_       } _EL_       next=new CommonToken(semicolonTokenType,leaf.getText()); _EL_       return new CommonToken(tokenType,leaf.getText()); _EL_     } _EL_  else     if (leaf.getGrammarElement() == rightCurlyInBlock || leaf.getGrammarElement() == rightCurlyInArrowExpression) { _EL_       int tokenType=tokenTypeMapper.getInternalTokenType(leaf); _EL_       next=new CommonToken(tokenType); _EL_       return new CommonToken(tokenTypeMapper.getInternalTokenType(semicolon),leaf.getText()); _EL_     } _EL_  else { _EL_       return newSemicolonToken(leaf); _EL_     } _EL_   } _EL_ } _EL_ ', 'private Collection<ExtractedItemsCollection> filterItemsByLevel(Player player,List<ExtractedItemsCollection> itemsCollections){ _EL_   int playerLevel=player.getLevel(); _EL_   Collection<ExtractedItemsCollection> result=new ArrayList<ExtractedItemsCollection>(); _EL_   for (  ExtractedItemsCollection collection : itemsCollections) { _EL_     if (collection.getMinLevel() > playerLevel) { _EL_       continue; _EL_     } _EL_     if (collection.getMaxLevel() > 0 && collection.getMaxLevel() < playerLevel) { _EL_       continue; _EL_     } _EL_     result.add(collection); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private void drawHost(Graphics2D g2){ _EL_   Coord loc=node.getLocation(); _EL_   if (drawCoverage && node.isRadioActive()) { _EL_     ArrayList<NetworkInterface> interfaces=new ArrayList<NetworkInterface>(); _EL_     interfaces.addAll(node.getInterfaces()); _EL_     for (    NetworkInterface ni : interfaces) { _EL_       double range=ni.getTransmitRange(); _EL_       Ellipse2D.Double coverage; _EL_       coverage=new Ellipse2D.Double(scale(loc.getX() - range),scale(loc.getY() - range),scale(range * 2),scale(range * 2)); _EL_       g2.setColor(rangeColor); _EL_       g2.draw(coverage); _EL_     } _EL_   } _EL_   if (drawConnections) { _EL_     g2.setColor(conColor); _EL_     Coord c1=node.getLocation(); _EL_     ArrayList<Connection> conList=new ArrayList<Connection>(); _EL_     conList.addAll(node.getConnections()); _EL_     for (    Connection c : conList) { _EL_       DTNHost otherNode=c.getOtherNode(node); _EL_       Coord c2; _EL_       if (otherNode == null) { _EL_         continue; _EL_       } _EL_       c2=otherNode.getLocation(); _EL_       g2.drawLine(scale(c1.getX()),scale(c1.getY()),scale(c2.getX()),scale(c2.getY())); _EL_     } _EL_   } _EL_   g2.setColor(hostColor); _EL_   g2.drawRect(scale(loc.getX() - 1),scale(loc.getY() - 1),scale(2),scale(2)); _EL_   if (isHighlighted()) { _EL_     g2.setColor(highlightedNodeColor); _EL_     g2.fillRect(scale(loc.getX()) - 3,scale(loc.getY()) - 3,6,6); _EL_   } _EL_   if (drawNodeName) { _EL_     g2.setColor(hostNameColor); _EL_     g2.drawString(node.toString(),scale(loc.getX()),scale(loc.getY())); _EL_   } _EL_ } _EL_ ', 'public static int binarySearchFloor(long[] a,long key,boolean inclusive,boolean stayInBounds){ _EL_   int index=Arrays.binarySearch(a,key); _EL_   index=index < 0 ? -(index + 2) : (inclusive ? index : (index - 1)); _EL_   return stayInBounds ? Math.max(0,index) : index; _EL_ } _EL_ ', 'public final int size(){ _EL_   if (GWT.isScript()) { _EL_     return jsArray.size(); _EL_   } _EL_  else { _EL_     return javaArray.size(); _EL_   } _EL_ } _EL_ ', 'public boolean intersects(final PlanetModel planetModel,final Plane q,final GeoPoint[] notablePoints,final GeoPoint[] moreNotablePoints,final Membership[] bounds,final Membership... moreBounds){ _EL_   if (isNumericallyIdentical(q)) { _EL_     for (    GeoPoint p : notablePoints) { _EL_       if (meetsAllBounds(p,bounds,moreBounds)) { _EL_         return true; _EL_       } _EL_     } _EL_     for (    GeoPoint p : moreNotablePoints) { _EL_       if (meetsAllBounds(p,bounds,moreBounds)) { _EL_         return true; _EL_       } _EL_     } _EL_     return false; _EL_   } _EL_   final double lineVectorX=y * q.z - z * q.y; _EL_   final double lineVectorY=z * q.x - x * q.z; _EL_   final double lineVectorZ=x * q.y - y * q.x; _EL_   if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) { _EL_     return false; _EL_   } _EL_   double x0; _EL_   double y0; _EL_   double z0; _EL_   final double denomYZ=this.y * q.z - this.z * q.y; _EL_   final double denomXZ=this.x * q.z - this.z * q.x; _EL_   final double denomXY=this.x * q.y - this.y * q.x; _EL_   if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) { _EL_     if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) { _EL_       return false; _EL_     } _EL_     final double denom=1.0 / denomYZ; _EL_     x0=0.0; _EL_     y0=(-this.D * q.z - this.z * -q.D) * denom; _EL_     z0=(this.y * -q.D + this.D * q.y) * denom; _EL_   } _EL_  else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) { _EL_     if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) { _EL_       return false; _EL_     } _EL_     final double denom=1.0 / denomXZ; _EL_     x0=(-this.D * q.z - this.z * -q.D) * denom; _EL_     y0=0.0; _EL_     z0=(this.x * -q.D + this.D * q.x) * denom; _EL_   } _EL_  else { _EL_     if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) { _EL_       return false; _EL_     } _EL_     final double denom=1.0 / denomXY; _EL_     x0=(-this.D * q.y - this.y * -q.D) * denom; _EL_     y0=(this.x * -q.D + this.D * q.x) * denom; _EL_     z0=0.0; _EL_   } _EL_   final double A=lineVectorX * lineVectorX * planetModel.inverseAbSquared + lineVectorY * lineVectorY * planetModel.inverseAbSquared + lineVectorZ * lineVectorZ * planetModel.inverseCSquared; _EL_   final double B=2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared); _EL_   final double C=x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0; _EL_   final double BsquaredMinus=B * B - 4.0 * A * C; _EL_   if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) { _EL_     final double inverse2A=1.0 / (2.0 * A); _EL_     final double t=-B * inverse2A; _EL_     final double pointX=lineVectorX * t + x0; _EL_     final double pointY=lineVectorY * t + y0; _EL_     final double pointZ=lineVectorZ * t + z0; _EL_     for (    final Membership bound : bounds) { _EL_       if (!bound.isWithin(pointX,pointY,pointZ)) { _EL_         return false; _EL_       } _EL_     } _EL_     for (    final Membership bound : moreBounds) { _EL_       if (!bound.isWithin(pointX,pointY,pointZ)) { _EL_         return false; _EL_       } _EL_     } _EL_     return true; _EL_   } _EL_  else   if (BsquaredMinus > 0.0) { _EL_     final double inverse2A=1.0 / (2.0 * A); _EL_     final double sqrtTerm=Math.sqrt(BsquaredMinus); _EL_     final double t1=(-B + sqrtTerm) * inverse2A; _EL_     final double t2=(-B - sqrtTerm) * inverse2A; _EL_     final double point1X=lineVectorX * t1 + x0; _EL_     final double point1Y=lineVectorY * t1 + y0; _EL_     final double point1Z=lineVectorZ * t1 + z0; _EL_     boolean point1Valid=true; _EL_     for (    final Membership bound : bounds) { _EL_       if (!bound.isWithin(point1X,point1Y,point1Z)) { _EL_         point1Valid=false; _EL_         break; _EL_       } _EL_     } _EL_     if (point1Valid) { _EL_       for (      final Membership bound : moreBounds) { _EL_         if (!bound.isWithin(point1X,point1Y,point1Z)) { _EL_           point1Valid=false; _EL_           break; _EL_         } _EL_       } _EL_     } _EL_     if (point1Valid) { _EL_       return true; _EL_     } _EL_     final double point2X=lineVectorX * t2 + x0; _EL_     final double point2Y=lineVectorY * t2 + y0; _EL_     final double point2Z=lineVectorZ * t2 + z0; _EL_     for (    final Membership bound : bounds) { _EL_       if (!bound.isWithin(point2X,point2Y,point2Z)) { _EL_         return false; _EL_       } _EL_     } _EL_     for (    final Membership bound : moreBounds) { _EL_       if (!bound.isWithin(point2X,point2Y,point2Z)) { _EL_         return false; _EL_       } _EL_     } _EL_     return true; _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public double SumOutlinkAuthorityScore(Page page){ _EL_   List<String> outLinks=page.getOutlinks(); _EL_   double authScore=0; _EL_   for (int i=0; i < outLinks.size(); i++) { _EL_     Page outLink=pTable.get(outLinks.get(i)); _EL_     if (outLink != null) { _EL_       authScore+=outLink.authority; _EL_     } _EL_   } _EL_   return authScore; _EL_ } _EL_ ', 'private void unwrapData() throws IgniteCheckedException, SSLException { _EL_   if (log.isDebugEnabled())   log.debug("Unwrapping received data."); _EL_   inNetBuf.flip(); _EL_   SSLEngineResult res=unwrap0(); _EL_   inNetBuf.compact(); _EL_   checkStatus(res); _EL_   renegotiateIfNeeded(res); _EL_ } _EL_ ', 'public boolean hasDescendant(Pattern pattern){ _EL_   Queue<BNode> nodesToProcess=new LinkedList<BNode>(); _EL_   nodesToProcess.add(this); _EL_   while (!nodesToProcess.isEmpty()) { _EL_     BNode currentNode=nodesToProcess.poll(); _EL_     for (    BNode descendantNode : currentNode.getOutputNodes()) { _EL_       Matcher matcher=pattern.matcher(descendantNode.getId()); _EL_       if (matcher.matches()) { _EL_         return true; _EL_       } _EL_       if (!nodesToProcess.contains(descendantNode)) { _EL_         nodesToProcess.add(descendantNode); _EL_       } _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private void cleanupMinidumpFile(){ _EL_   if (!CrashFileManager.tryMarkAsUploaded(mFileToUpload)) { _EL_     Log.w(TAG,"Unable to mark " + mFileToUpload + " as uploaded."); _EL_     if (!mFileToUpload.delete()) { _EL_       Log.w(TAG,"Cannot delete " + mFileToUpload); _EL_     } _EL_   } _EL_ } _EL_ ', 'StringVector processPREFIX_LIST(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException { _EL_   StringTokenizer tokenizer=new StringTokenizer(value," \\t\\n\\r\\f"); _EL_   int nStrings=tokenizer.countTokens(); _EL_   StringVector strings=new StringVector(nStrings); _EL_   for (int i=0; i < nStrings; i++) { _EL_     String prefix=tokenizer.nextToken(); _EL_     String url=handler.getNamespaceForPrefix(prefix); _EL_     if (prefix.equals(Constants.ATTRVAL_DEFAULT_PREFIX) || url != null)     strings.addElement(prefix); _EL_  else     throw new org.xml.sax.SAXException(XSLMessages.createMessage(XSLTErrorResources.ER_CANT_RESOLVE_NSPREFIX,new Object[]{prefix})); _EL_   } _EL_   return strings; _EL_ } _EL_ ', 'public String canonicalize(String simpleURL){ _EL_   String resultURL=simpleURL; _EL_   if (simpleURL.startsWith("ftp.")) { _EL_     resultURL="ftp://" + simpleURL; _EL_   } _EL_  else   if (simpleURL.startsWith("gopher.")) { _EL_     resultURL="gopher://" + simpleURL; _EL_   } _EL_  else   if (simpleURL.startsWith("/")) { _EL_     resultURL="file:" + simpleURL; _EL_   } _EL_  else   if (!hasProtocolName(simpleURL)) { _EL_     if (isSimpleHostName(simpleURL)) { _EL_       simpleURL="www." + simpleURL + ".com"; _EL_     } _EL_     resultURL="http://" + simpleURL; _EL_   } _EL_   return resultURL; _EL_ } _EL_ ', 'public void layout(Container container){ _EL_   Map<Location,Drawable> comps=getComponentsByLocation(container); _EL_   Drawable north=comps.get(Location.NORTH); _EL_   Drawable northEast=comps.get(Location.NORTH_EAST); _EL_   Drawable east=comps.get(Location.EAST); _EL_   Drawable southEast=comps.get(Location.SOUTH_EAST); _EL_   Drawable south=comps.get(Location.SOUTH); _EL_   Drawable southWest=comps.get(Location.SOUTH_WEST); _EL_   Drawable west=comps.get(Location.WEST); _EL_   Drawable northWest=comps.get(Location.NORTH_WEST); _EL_   Drawable center=comps.get(Location.CENTER); _EL_   double widthWest=getMaxWidth(northWest,west,southWest); _EL_   double widthEast=getMaxWidth(northEast,east,southEast); _EL_   double heightNorth=getMaxHeight(northWest,north,northEast); _EL_   double heightSouth=getMaxHeight(southWest,south,southEast); _EL_   double gapEast=(widthEast > 0.0) ? getGapX() : 0.0; _EL_   double gapWest=(widthWest > 0.0) ? getGapX() : 0.0; _EL_   double gapNorth=(heightNorth > 0.0) ? getGapY() : 0.0; _EL_   double gapSouth=(heightSouth > 0.0) ? getGapY() : 0.0; _EL_   Rectangle2D bounds=container.getBounds(); _EL_   Insets2D insets=container.getInsets(); _EL_   if (insets == null) { _EL_     insets=new Insets2D.Double(); _EL_   } _EL_   double xWest=bounds.getMinX() + insets.getLeft() - gapWest - widthWest; _EL_   double xCenter=bounds.getMinX() + insets.getLeft(); _EL_   double xEast=bounds.getMaxX() - insets.getRight() + gapEast; _EL_   double yNorth=bounds.getMinY() + insets.getTop() - gapNorth - heightNorth; _EL_   double yCenter=bounds.getMinY() + insets.getTop(); _EL_   double ySouth=bounds.getMaxY() - insets.getBottom() + gapSouth; _EL_   layoutComponent(northWest,xWest,yNorth,widthWest,heightNorth); _EL_   layoutComponent(north,xCenter,yNorth,bounds.getWidth() - insets.getHorizontal(),heightNorth); _EL_   layoutComponent(northEast,xEast,yNorth,widthEast,heightNorth); _EL_   layoutComponent(east,xEast,yCenter,widthEast,bounds.getHeight() - insets.getVertical()); _EL_   layoutComponent(southEast,xEast,ySouth,widthEast,heightSouth); _EL_   layoutComponent(south,xCenter,ySouth,bounds.getWidth() - insets.getHorizontal(),heightSouth); _EL_   layoutComponent(southWest,xWest,ySouth,widthWest,heightSouth); _EL_   layoutComponent(west,xWest,yCenter,widthWest,bounds.getHeight() - insets.getVertical()); _EL_   layoutComponent(center,xCenter + getGapX(),yCenter + getGapY(),bounds.getWidth() - insets.getHorizontal() - 2 * getGapX(),bounds.getHeight() - insets.getVertical() - 2 * getGapY()); _EL_ } _EL_ ', 'private double mean(double[] vec){ _EL_   double result=0; _EL_   for (int i=0; i < vec.length; i++)   result+=vec[i]; _EL_   return result / vec.length; _EL_ } _EL_ ', 'public EvoSVMModel(ExampleSet exampleSet,List<SupportVector> supportVectors,Kernel kernel,double bias){ _EL_   super(exampleSet,ExampleSetUtilities.SetsCompareOption.ALLOW_SUPERSET,ExampleSetUtilities.TypesCompareOption.ALLOW_SAME_PARENTS); _EL_   this.supportVectors=supportVectors; _EL_   if (supportVectors == null || supportVectors.size() == 0) { _EL_     throw new IllegalArgumentException("Null or empty support vector collection: not possible to predict values!"); _EL_   } _EL_   this.kernel=kernel; _EL_   this.bias=bias; _EL_   if (this.kernel instanceof DotKernel) { _EL_     this.weights=new double[getNumberOfAttributes()]; _EL_     for (int i=0; i < getNumberOfSupportVectors(); i++) { _EL_       SupportVector sv=getSupportVector(i); _EL_       if (sv != null) { _EL_         double[] x=sv.getX(); _EL_         double alpha=sv.getAlpha(); _EL_         double y=sv.getY(); _EL_         for (int j=0; j < weights.length; j++) { _EL_           weights[j]+=y * alpha * x[j]; _EL_         } _EL_       } _EL_  else { _EL_         this.weights=null; _EL_         break; _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public static Format generateFormat(String codec){ _EL_   return (Format)SUPPORTED_CODECS.get(codec.toLowerCase()); _EL_ } _EL_ ', 'public void removeListener(final TimeoutEventListener listener){ _EL_   listeners.remove(listener); _EL_ } _EL_ ', 'private void printBootstrapMap(){ _EL_   LOG.info("Bootstrap map:"); _EL_   for (  Integer i : chainMap.keySet()) { _EL_     LOG.info(String.format("  %6d: %d",i,chainMap.get(i))); _EL_   } _EL_ } _EL_ ', 'private char readEscapeCharacter() throws JSONException { _EL_   char escaped=in.charAt(pos++); _EL_ switch (escaped) { _EL_ case \'u\': _EL_     if (pos + 4 > in.length()) { _EL_       throw syntaxError("Unterminated escape sequence"); _EL_     } _EL_   String hex=in.substring(pos,pos + 4); _EL_ pos+=4; _EL_ return (char)Integer.parseInt(hex,16); _EL_ case \'t\': _EL_ return \'\\t\'; _EL_ case \'b\': _EL_ return \'\\b\'; _EL_ case \'n\': _EL_ return \'\\n\'; _EL_ case \'r\': _EL_ return \'\\r\'; _EL_ case \'f\': _EL_ return \'\\f\'; _EL_ case \'\\\'\': _EL_ case \'"\': _EL_ case \'\\\\\': _EL_ default : _EL_ return escaped; _EL_ } _EL_ } _EL_ ', 'public static String formatListToString(List<String> list){ _EL_   String result=""; _EL_   for (  String s : list)   result+=s + "\\t\\t"; _EL_   result=result.trim(); _EL_   return result.toUpperCase(); _EL_ } _EL_ ', 'private static void d_ucumm(double[] a,double[] agg,double[] c,int m,int n,int rl,int ru){ _EL_   double[] cprods=(agg != null) ? agg : new double[n]; _EL_   if (agg == null)   Arrays.fill(cprods,1); _EL_   for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) { _EL_     productAgg(a,cprods,aix,0,n); _EL_     System.arraycopy(cprods,0,c,aix,n); _EL_   } _EL_ } _EL_ ', 'private void $$$setupUI$$$(){ _EL_   myContentPanel=new JPanel(); _EL_   myContentPanel.setLayout(new GridLayoutManager(6,1,new Insets(0,0,0,0),-1,-1)); _EL_   myYoursRadioButton=new JRadioButton(); _EL_   myYoursRadioButton.setSelected(true); _EL_   myYoursRadioButton.setText("Keep local"); _EL_   myYoursRadioButton.setMnemonic(\'K\'); _EL_   myYoursRadioButton.setDisplayedMnemonicIndex(0); _EL_   myContentPanel.add(myYoursRadioButton,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false)); _EL_   myTheirsRadioButton=new JRadioButton(); _EL_   myTheirsRadioButton.setText("Accept server"); _EL_   myTheirsRadioButton.setMnemonic(\'A\'); _EL_   myTheirsRadioButton.setDisplayedMnemonicIndex(0); _EL_   myContentPanel.add(myTheirsRadioButton,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false)); _EL_   myUseCustomRadioButton=new JRadioButton(); _EL_   myUseCustomRadioButton.setText("Use specified:"); _EL_   myUseCustomRadioButton.setMnemonic(\'U\'); _EL_   myUseCustomRadioButton.setDisplayedMnemonicIndex(0); _EL_   myContentPanel.add(myUseCustomRadioButton,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false)); _EL_   myCustomPathTextField=new JTextField(); _EL_   myCustomPathTextField.setEnabled(false); _EL_   myContentPanel.add(myCustomPathTextField,new GridConstraints(3,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(100,-1),null,2,false)); _EL_   final Spacer spacer1=new Spacer(); _EL_   myContentPanel.add(spacer1,new GridConstraints(5,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false)); _EL_   myErrorLabel=new JLabel(); _EL_   myErrorLabel.setForeground(new Color(-65536)); _EL_   myErrorLabel.setText(""); _EL_   myContentPanel.add(myErrorLabel,new GridConstraints(4,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false)); _EL_   ButtonGroup buttonGroup; _EL_   buttonGroup=new ButtonGroup(); _EL_   buttonGroup.add(myYoursRadioButton); _EL_   buttonGroup.add(myTheirsRadioButton); _EL_   buttonGroup.add(myUseCustomRadioButton); _EL_ } _EL_ ', 'private static String reportListContents(Collection<ProcessErrorStateInfo> errList){ _EL_   if (errList == null)   return null; _EL_   StringBuilder builder=new StringBuilder(); _EL_   Iterator<ProcessErrorStateInfo> iter=errList.iterator(); _EL_   while (iter.hasNext()) { _EL_     ProcessErrorStateInfo entry=iter.next(); _EL_     String condition; _EL_ switch (entry.condition) { _EL_ case ActivityManager.ProcessErrorStateInfo.CRASHED: _EL_       condition="a CRASH"; _EL_     break; _EL_ case ActivityManager.ProcessErrorStateInfo.NOT_RESPONDING: _EL_   condition="an ANR"; _EL_ break; _EL_ default : _EL_ condition="an unknown error"; _EL_ break; _EL_ } _EL_ builder.append(String.format("Process %s encountered %s (%s)",entry.processName,condition,entry.shortMsg)); _EL_ if (entry.condition == ActivityManager.ProcessErrorStateInfo.CRASHED) { _EL_ builder.append(String.format(" with stack trace:\\n%s\\n",entry.stackTrace)); _EL_ } _EL_ builder.append("\\n"); _EL_ } _EL_ return builder.toString(); _EL_ } _EL_ ', 'void initDemandAndCollectionMap(final List<String> prepareFieldNames,final Map<String,BigDecimal> demand,final Map<String,BigDecimal> collection,final Map<String,BigDecimal> rebates){ _EL_   if (prepareFieldNames != null && !prepareFieldNames.isEmpty())   for (  final String fieldName : prepareFieldNames) { _EL_     demand.put(fieldName,BigDecimal.ZERO); _EL_     collection.put(fieldName,BigDecimal.ZERO); _EL_     rebates.put(fieldName,BigDecimal.ZERO); _EL_   } _EL_ } _EL_ ', 'protected Instance specifier(int i){ _EL_   return m_Specifiers.get(i); _EL_ } _EL_ ', 'public void computeParameters(){ _EL_   if (ellps == null) { _EL_     ellps=Ellipsoid.WGS_84; _EL_   } _EL_   if (mode == MODE_BELGIUM) { _EL_     alpha=0.00014204d; _EL_   } _EL_  else { _EL_     alpha=0d; _EL_   } _EL_   double phi1=ProjMath.degToRad(lambert_sp_one); _EL_   double phi2=ProjMath.degToRad(lambert_sp_two); _EL_   double phif=ProjMath.degToRad(referenceLatitude); _EL_   double e=ellps.ecc; _EL_   double sinphi; _EL_   sinphi=Math.sin(phi1); _EL_   double m1=lambMsfn(sinphi,Math.cos(phi1),e); _EL_   double t1=lambTsfn(phi1,sinphi,e); _EL_   if (MoreMath.approximately_equal(phi1,phi2,EPS10)) { _EL_     n=sinphi; _EL_   } _EL_  else { _EL_     sinphi=Math.sin(phi2); _EL_     double m2=lambMsfn(sinphi,Math.cos(phi2),e); _EL_     double t2=lambTsfn(phi2,sinphi,e); _EL_     n=Math.log(m1 / m2) / Math.log(t1 / t2); _EL_   } _EL_   F=m1 / (n * Math.pow(t1,n)); _EL_   if (MoreMath.approximately_equal(phi1,phi2,EPS10)) { _EL_     rf=0.0d; _EL_   } _EL_  else { _EL_     rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n); _EL_   } _EL_   lamdaf=ProjMath.degToRad(centralMeridian); _EL_   locationCenterXPixel=((double)getWidth() / 2d); _EL_   locationCenterYPixel=((double)getHeight() / 2d); _EL_   locationPixelsPerLambert=(double)getPPM() / getScale(); _EL_   LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian); _EL_   Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double()); _EL_   locationOriginX=lp.getX(); _EL_   locationOriginY=lp.getY(); _EL_   LatLonPoint center=getCenter(); _EL_   lp=LLToWorld(center.getY(),center.getX(),lp); _EL_   locationCenterXLambert=lp.getX(); _EL_   locationCenterYLambert=lp.getY(); _EL_   locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert; _EL_   locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert; _EL_   if (Debug.debugging("Lambert")) { _EL_     Debug.output("Creating LambertConformal: center x = " + locationCenterXLambert + ", center y = "+ locationCenterYLambert); _EL_     Debug.output("Creating LambertConformal: origin x = " + locationOriginX + ", origin y = "+ locationOriginY); _EL_   } _EL_ } _EL_ ', 'public boolean contains(Node s){ _EL_   runTo(-1); _EL_   if (null == m_map)   return false; _EL_   for (int i=0; i < m_firstFree; i++) { _EL_     Node node=m_map[i]; _EL_     if ((null != node) && node.equals(s))     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void finish() throws IOException { _EL_   if (!def.finished()) { _EL_     def.finish(); _EL_     while (!def.finished()) { _EL_       int len=def.deflate(buf,0,buf.length); _EL_       if (def.finished() && len <= buf.length - TRAILER_SIZE) { _EL_         writeTrailer(buf,len); _EL_         len=len + TRAILER_SIZE; _EL_         out.write(buf,0,len); _EL_         return; _EL_       } _EL_       if (len > 0)       out.write(buf,0,len); _EL_     } _EL_     byte[] trailer=new byte[TRAILER_SIZE]; _EL_     writeTrailer(trailer,0); _EL_     out.write(trailer); _EL_   } _EL_ } _EL_ ', '@Override public List<String> allKeys(){ _EL_   List<String> nameFiles=new ArrayList<>(); _EL_   File[] files=cacheDirectory.listFiles(); _EL_   if (files == null)   return nameFiles; _EL_   for (  File file : files) { _EL_     if (file.isFile()) { _EL_       nameFiles.add(file.getName()); _EL_     } _EL_   } _EL_   return nameFiles; _EL_ } _EL_ ', '@Override default CompletableFuture<OptionalDouble> minDouble(final ToDoubleFunction<? super T> fn){ _EL_   return CompletableFuture.supplyAsync(null,getExec()); _EL_ } _EL_ ', 'public String replace(CharSequence target,CharSequence replacement){ _EL_   if (target == null) { _EL_     throw new NullPointerException("target should not be null"); _EL_   } _EL_   if (replacement == null) { _EL_     throw new NullPointerException("replacement should not be null"); _EL_   } _EL_   String ts=target.toString(); _EL_   int index=indexOf(ts,0); _EL_   if (index == -1)   return this; _EL_   String rs=replacement.toString(); _EL_   StringBuilder buffer=new StringBuilder(count); _EL_   int tl=target.length(); _EL_   int tail=0; _EL_   do { _EL_     buffer.append(value,offset + tail,index - tail); _EL_     buffer.append(rs); _EL_     tail=index + tl; _EL_   } _EL_  while ((index=indexOf(ts,tail)) != -1); _EL_   buffer.append(value,offset + tail,count - tail); _EL_   return buffer.toString(); _EL_ } _EL_ ', 'private void emitMapPut(Method method,String fieldName,StringBuilder builder){ _EL_   builder.append("    public void "); _EL_   builder.append(getMapPutterName(fieldName)); _EL_   builder.append("(String k, "); _EL_   builder.append(getTypeArgumentImplName((ParameterizedType)method.getGenericReturnType(),1)); _EL_   builder.append(" v) {\\n      "); _EL_   builder.append(getEnsureName(fieldName)); _EL_   builder.append("();\\n      "); _EL_   builder.append(fieldName); _EL_   builder.append(".put(k, v);\\n"); _EL_   builder.append("    }\\n\\n"); _EL_ } _EL_ ', 'private ArrayList<String> parseJson(String text){ _EL_   text=text.substring(text.indexOf("\\\\nEvents\\\\n") + SIZE_OF_EVENTS,text.indexOf("\\\\n\\\\n\\\\nBirths")); _EL_   ArrayList<String> events=new ArrayList<String>(); _EL_   if (text.isEmpty()) { _EL_     return events; _EL_   } _EL_   int startIndex=0, endIndex=0; _EL_   while (endIndex != -1) { _EL_     endIndex=text.indexOf("\\\\n",startIndex + DELIMITER_SIZE); _EL_     String eventText=(endIndex == -1 ? text.substring(startIndex) : text.substring(startIndex,endIndex)); _EL_     Pattern pattern=Pattern.compile("\\\\\\\\u2013\\\\s*"); _EL_     Matcher matcher=pattern.matcher(eventText); _EL_     eventText=matcher.replaceAll(""); _EL_     pattern=Pattern.compile("(^\\\\d+)"); _EL_     matcher=pattern.matcher(eventText); _EL_     if (matcher.find()) { _EL_       eventText=matcher.replaceFirst(matcher.group(1) + ","); _EL_     } _EL_     eventText="In " + eventText; _EL_     startIndex=endIndex + 2; _EL_     events.add(eventText); _EL_   } _EL_   Collections.reverse(events); _EL_   return events; _EL_ } _EL_ ', 'private boolean isFileValid(File file,String methodName){ _EL_   if (file == null) { _EL_     Log.printConcatLine(name,".",methodName,": Warning - the given file is null."); _EL_     return false; _EL_   } _EL_   String fileName=file.getName(); _EL_   if (fileName == null || fileName.length() == 0) { _EL_     Log.printConcatLine(name,"." + methodName,": Warning - invalid file name."); _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private Object stringToValue(Object oldValue,String newValue) throws ReplicatorException { _EL_   if (oldValue instanceof String) { _EL_     return newValue; _EL_   } _EL_  else   if (oldValue instanceof Integer) { _EL_     return Integer.valueOf(newValue); _EL_   } _EL_  else   if (oldValue instanceof SerialBlob) { _EL_     try { _EL_       return DatabaseHelper.getSafeBlob(newValue.getBytes()); _EL_     } _EL_  catch (    SQLException e) { _EL_       throw new ReplicatorException("Unable to convert back from String to SerialBlob: " + e,e); _EL_     } _EL_   } _EL_  else { _EL_     return newValue; _EL_   } _EL_ } _EL_ ', 'public static byte[] decode(String hexa) throws CoderException { _EL_   if (hexa == null) { _EL_     throw new CoderException("can\'t decode empty String"); _EL_   } _EL_   if ((hexa.length() % 2) != 0) { _EL_     throw new CoderException("invalid hexadicimal String"); _EL_   } _EL_   int tamArray=hexa.length() / 2; _EL_   byte[] retorno=new byte[tamArray]; _EL_   for (int i=0; i < tamArray; i++) { _EL_     retorno[i]=hexToByte(hexa.substring(i * 2,i * 2 + 2)); _EL_   } _EL_   return retorno; _EL_ } _EL_ ', 'protected void drawText(String text1,String text2,int x,int y,Canvas c){ _EL_   if (textPaint == null) { _EL_     Paint p=new Paint(); _EL_     p.setTypeface(RobotoLightTypeface.getInstance(context)); _EL_     p.setColor(textColor); _EL_     p.setTextSize(14 * pixelDensity); _EL_     this.textPaint=p; _EL_   } _EL_   float w=textPaint.measureText(text1,0,text1.length()); _EL_   int offset=(int)w / 2; _EL_   c.drawText(text1,x - offset,y + (18f * pixelDensity),textPaint); _EL_   w=textPaint.measureText(text2,0,text2.length()); _EL_   offset=(int)w / 2; _EL_   c.drawText(text2,x - offset,y + (36f * pixelDensity),textPaint); _EL_ } _EL_ ', 'public void deleteVVset(String nativeId) throws Exception { _EL_   _log.info("3PARDriver: deleteVVset enter"); _EL_   ClientResponse clientResp=null; _EL_   final String path=MessageFormat.format(URI_DELETE_CG,nativeId); _EL_   _log.info("3PARDriver:deleteVVset running delete VV Set " + path); _EL_   try { _EL_     clientResp=delete(path); _EL_     if (clientResp == null) { _EL_       _log.error("3PARDriver:deleteVVset There is no response from 3PAR"); _EL_       throw new HP3PARException("There is no response from 3PAR"); _EL_     } _EL_  else     if (clientResp.getStatus() != 200) { _EL_       String errResp=getResponseDetails(clientResp); _EL_       throw new HP3PARException(errResp); _EL_     } _EL_  else { _EL_       _log.info("3PARDriver: deleteVVset success"); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     throw e; _EL_   } _EL_  finally { _EL_     if (clientResp != null) { _EL_       clientResp.close(); _EL_     } _EL_     _log.info("3PARDriver:deleteVVset leave"); _EL_   } _EL_ } _EL_ ', 'public void persistConnection(Connection connection) throws PersistenceException { _EL_   MqttConnectOptions conOpts=connection.getConnectionOptions(); _EL_   MqttMessage lastWill=conOpts.getWillMessage(); _EL_   SQLiteDatabase db=getWritableDatabase(); _EL_   ContentValues values=new ContentValues(); _EL_   values.put(COLUMN_HOST,connection.getHostName()); _EL_   values.put(COLUMN_port,connection.getPort()); _EL_   values.put(COLUMN_client_ID,connection.getId()); _EL_   values.put(COLUMN_ssl,connection.isSSL()); _EL_   values.put(COLUMN_KEEP_ALIVE,conOpts.getKeepAliveInterval()); _EL_   values.put(COLUMN_TIME_OUT,conOpts.getConnectionTimeout()); _EL_   values.put(COLUMN_USER_NAME,conOpts.getUserName()); _EL_   values.put(COLUMN_TOPIC,conOpts.getWillDestination()); _EL_   char[] password=conOpts.getPassword(); _EL_   values.put(COLUMN_CLEAN_SESSION,conOpts.isCleanSession() ? 1 : 0); _EL_   values.put(COLUMN_PASSWORD,password != null ? String.valueOf(password) : null); _EL_   values.put(COLUMN_MESSAGE,lastWill != null ? new String(lastWill.getPayload()) : null); _EL_   values.put(COLUMN_QOS,lastWill != null ? lastWill.getQos() : 0); _EL_   if (lastWill == null) { _EL_     values.put(COLUMN_RETAINED,0); _EL_   } _EL_  else { _EL_     values.put(COLUMN_RETAINED,lastWill.isRetained() ? 1 : 0); _EL_   } _EL_   long newRowId=db.insert(TABLE_CONNECTIONS,null,values); _EL_   db.close(); _EL_   if (newRowId == -1) { _EL_     throw new PersistenceException("Failed to persist connection: " + connection.handle()); _EL_   } _EL_  else { _EL_     connection.assignPersistenceId(newRowId); _EL_   } _EL_ } _EL_ ', 'private void assertAllFromTbl1(Statement stmt,String[] ones,short[] twos) throws SQLException { _EL_   ResultSet rs=stmt.executeQuery("select * from tbl1"); _EL_   int i=0; _EL_   for (; rs.next(); i++) { _EL_     assertTrue(i < ones.length); _EL_     assertEquals(ones[i],rs.getString("one")); _EL_     assertEquals(twos[i],rs.getShort("two")); _EL_   } _EL_   assertTrue(i == ones.length); _EL_ } _EL_ ', 'private void processUnprocessed(){ _EL_   boolean clean_processings=Boolean.getBoolean("Archive.processings.clean"); _EL_   logger.info("Archives processing clean instead of recovery " + "(Archive.processings.clean) requested by user (" + clean_processings + ")"); _EL_   productService.processUnprocessed(!clean_processings); _EL_ } _EL_ ', 'public static String canonicalizePath(String path,boolean discardRelativePrefix){ _EL_   int segmentStart=0; _EL_   int deletableSegments=0; _EL_   for (int i=0; i <= path.length(); ) { _EL_     int nextSegmentStart; _EL_     if (i == path.length()) { _EL_       nextSegmentStart=i; _EL_     } _EL_  else     if (path.charAt(i) == \'/\') { _EL_       nextSegmentStart=i + 1; _EL_     } _EL_  else { _EL_       i++; _EL_       continue; _EL_     } _EL_     if (i == segmentStart + 1 && path.regionMatches(segmentStart,".",0,1)) { _EL_       path=path.substring(0,segmentStart) + path.substring(nextSegmentStart); _EL_       i=segmentStart; _EL_     } _EL_  else     if (i == segmentStart + 2 && path.regionMatches(segmentStart,"..",0,2)) { _EL_       if (deletableSegments > 0 || discardRelativePrefix) { _EL_         deletableSegments--; _EL_         int prevSegmentStart=path.lastIndexOf(\'/\',segmentStart - 2) + 1; _EL_         path=path.substring(0,prevSegmentStart) + path.substring(nextSegmentStart); _EL_         i=segmentStart=prevSegmentStart; _EL_       } _EL_  else { _EL_         i++; _EL_         segmentStart=i; _EL_       } _EL_     } _EL_  else { _EL_       if (i > 0) { _EL_         deletableSegments++; _EL_       } _EL_       i++; _EL_       segmentStart=i; _EL_     } _EL_   } _EL_   return path; _EL_ } _EL_ ', 'protected Object readObjectOverride() throws OptionalDataException, ClassNotFoundException, IOException { _EL_   if (input == null) { _EL_     return null; _EL_   } _EL_   throw new IOException(); _EL_ } _EL_ ', 'public static String searchRemoveFromCategory(HttpServletRequest request,HttpServletResponse response){ _EL_   Delegator delegator=(Delegator)request.getAttribute("delegator"); _EL_   String productCategoryId=request.getParameter("SE_SEARCH_CATEGORY_ID"); _EL_   String errMsg=null; _EL_   try { _EL_     boolean beganTransaction=TransactionUtil.begin(DEFAULT_TX_TIMEOUT); _EL_     try { _EL_       EntityListIterator eli=getProductSearchResults(request); _EL_       if (eli == null) { _EL_         errMsg=UtilProperties.getMessage(resource,"productsearchevents.no_results_found_probably_error_constraints",UtilHttp.getLocale(request)); _EL_         request.setAttribute("_ERROR_MESSAGE_",errMsg); _EL_         return "error"; _EL_       } _EL_       int numRemoved=0; _EL_       GenericValue searchResultView=null; _EL_       while ((searchResultView=eli.next()) != null) { _EL_         String productId=searchResultView.getString("mainProductId"); _EL_         numRemoved+=delegator.removeByAnd("ProductCategoryMember",UtilMisc.toMap("productCategoryId",productCategoryId,"productId",productId)); _EL_       } _EL_       eli.close(); _EL_       Map<String,String> messageMap=UtilMisc.toMap("numRemoved",Integer.toString(numRemoved)); _EL_       errMsg=UtilProperties.getMessage(resource,"productsearchevents.removed_x_items",messageMap,UtilHttp.getLocale(request)); _EL_       request.setAttribute("_EVENT_MESSAGE_",errMsg); _EL_     } _EL_  catch (    GenericEntityException e) { _EL_       Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString()); _EL_       errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request)); _EL_       Debug.logError(e,errMsg,module); _EL_       request.setAttribute("_ERROR_MESSAGE_",errMsg); _EL_       TransactionUtil.rollback(beganTransaction,errMsg,e); _EL_       return "error"; _EL_     } _EL_  finally { _EL_       TransactionUtil.commit(beganTransaction); _EL_     } _EL_   } _EL_  catch (  GenericTransactionException e) { _EL_     Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString()); _EL_     errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request)); _EL_     Debug.logError(e,errMsg,module); _EL_     request.setAttribute("_ERROR_MESSAGE_",errMsg); _EL_     return "error"; _EL_   } _EL_   return "success"; _EL_ } _EL_ ', 'public void removePhoto(PhotoEntity photo){ _EL_   photos.remove(photo); _EL_ } _EL_ ', 'private String formatNode(RightThreadedBinaryNode<T> node){ _EL_   RightThreadedBinaryNode<T> n; _EL_   StringBuilder response=new StringBuilder("("); _EL_   if ((n=node.getLeftSon()) != null) { _EL_     response.append(formatNode(n)); _EL_   } _EL_   response.append(node.toString()); _EL_   if ((n=node.getRightSon()) != null) { _EL_     response.append(formatNode(n)); _EL_   } _EL_   response.append(")"); _EL_   return response.toString(); _EL_ } _EL_ ', '@HLEUnimplemented @HLEFunction(nid=0xCFE9E999,version=271) public int sceUsbCamSetupVideoEx(pspUsbCamSetupVideoExParam usbCamSetupVideoExParam,TPointer workArea,int workAreaSize){ _EL_   this.workArea=workArea.getAddress(); _EL_   this.workAreaSize=workAreaSize; _EL_   resolution=convertResolutionExToResolution(usbCamSetupVideoExParam.resolution); _EL_   frameRate=usbCamSetupVideoExParam.framerate; _EL_   whiteBalance=usbCamSetupVideoExParam.wb; _EL_   saturation=usbCamSetupVideoExParam.saturation; _EL_   brightness=usbCamSetupVideoExParam.brightness; _EL_   contrast=usbCamSetupVideoExParam.contrast; _EL_   sharpness=usbCamSetupVideoExParam.sharpness; _EL_   imageEffectMode=usbCamSetupVideoExParam.effectmode; _EL_   frameSize=usbCamSetupVideoExParam.framesize; _EL_   evLevel=usbCamSetupVideoExParam.evlevel; _EL_   if (!setupVideo()) { _EL_     log.warn(String.format("Cannot find webcam")); _EL_     return SceKernelErrors.ERROR_USBCAM_NOT_READY; _EL_   } _EL_   return 0; _EL_ } _EL_ ', 'public List<User> loadAllDeepFromCursor(Cursor cursor){ _EL_   int count=cursor.getCount(); _EL_   List<User> list=new ArrayList<User>(count); _EL_   if (cursor.moveToFirst()) { _EL_     if (identityScope != null) { _EL_       identityScope.lock(); _EL_       identityScope.reserveRoom(count); _EL_     } _EL_     try { _EL_       do { _EL_         list.add(loadCurrentDeep(cursor,false)); _EL_       } _EL_  while (cursor.moveToNext()); _EL_     } _EL_   finally { _EL_       if (identityScope != null) { _EL_         identityScope.unlock(); _EL_       } _EL_     } _EL_   } _EL_   return list; _EL_ } _EL_ ', 'private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException { _EL_   final ReentrantLock lock=this.lock; _EL_   lock.lock(); _EL_   try { _EL_     s.defaultWriteObject(); _EL_     for (Node<E> p=first; p != null; p=p.next)     s.writeObject(p.item); _EL_     s.writeObject(null); _EL_   } _EL_   finally { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', '@Override public Collection<SerialMessage> initialize(boolean refresh){ _EL_   ArrayList<SerialMessage> result=new ArrayList<SerialMessage>(); _EL_   if (isSupportRequestSupported == true && (refresh == true || initialiseDone == false) && getVersion() > 1) { _EL_     result.add(getSupportedMessage()); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'default B withDefault(String key,int value){ _EL_   return withDefault(key,Integer.toString(value)); _EL_ } _EL_ ', 'public final void addReference(Object ref){ _EL_   refSet.add(ref); _EL_ } _EL_ ', 'public static boolean isEmpty(String string){ _EL_   if (null == string)   return true; _EL_   return string.equals(EMPTY); _EL_ } _EL_ ', 'public void put(int key,int value){ _EL_   int i=binarySearch(mKeys,0,mSize,key); _EL_   if (i >= 0) { _EL_     mValues[i]=value; _EL_   } _EL_  else { _EL_     i=~i; _EL_     if (mSize >= mKeys.length) { _EL_       int n=Math.max(mSize + 1,mKeys.length * 2); _EL_       int[] nkeys=new int[n]; _EL_       int[] nvalues=new int[n]; _EL_       System.arraycopy(mKeys,0,nkeys,0,mKeys.length); _EL_       System.arraycopy(mValues,0,nvalues,0,mValues.length); _EL_       mKeys=nkeys; _EL_       mValues=nvalues; _EL_     } _EL_     if (mSize - i != 0) { _EL_       System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i); _EL_       System.arraycopy(mValues,i,mValues,i + 1,mSize - i); _EL_     } _EL_     mKeys[i]=key; _EL_     mValues[i]=value; _EL_     mSize++; _EL_   } _EL_ } _EL_ ', 'public String description(){ _EL_   StringBuilder sb=new StringBuilder(); _EL_   if (isCombo()) { _EL_     int i=0; _EL_     for (    NewComboLeg leg : m_comboLegs) { _EL_       if (i++ > 0) { _EL_         sb.append("/"); _EL_       } _EL_       sb.append(leg.toString()); _EL_     } _EL_   } _EL_  else { _EL_     sb.append(m_symbol); _EL_     app(sb,m_secType); _EL_     app(sb,m_exchange); _EL_     if (m_exchange != null && m_exchange.equals("SMART") && m_primaryExch != null) { _EL_       app(sb,m_primaryExch); _EL_     } _EL_     app(sb,m_expiry); _EL_     if (m_strike != 0) { _EL_       app(sb,m_strike); _EL_     } _EL_     if (m_right != Right.None) { _EL_       app(sb,m_right); _EL_     } _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'public void addClaimedSignerRole(final String claimedSignerRole){ _EL_   if ((claimedSignerRole == null) || (claimedSignerRole.length() == 0)) { _EL_     throw new NullPointerException("claimedSignerRole"); _EL_   } _EL_   if (claimedSignerRoles == null) { _EL_     claimedSignerRoles=new ArrayList<String>(); _EL_   } _EL_   claimedSignerRoles.add(claimedSignerRole); _EL_ } _EL_ ', 'public List<Interval> merge(List<Interval> intervals){ _EL_   List<Interval> res=new ArrayList<>(); _EL_   if (intervals == null || intervals.size() == 0) { _EL_     return res; _EL_   } _EL_   Collections.sort(intervals,null); _EL_   Interval prev=null; _EL_   for (  Interval i : intervals) { _EL_     if (prev == null || prev.end < i.start) { _EL_       res.add(i); _EL_       prev=i; _EL_     } _EL_  else     if (i.end > prev.end) { _EL_       prev.end=i.end; _EL_     } _EL_   } _EL_   return res; _EL_ } _EL_ ', 'private String formatType(Object typeRep){ _EL_   StringTokenizer tokenizer=new StringTokenizer(typeRep.toString(),"()<>[], ",true); _EL_   StringBuilder sb=new StringBuilder(); _EL_   while (tokenizer.hasMoreTokens()) { _EL_     String token=tokenizer.nextToken(); _EL_     if (token.length() == 1 || token.lastIndexOf(\'.\') == -1)     sb.append(token); _EL_  else { _EL_       int index=token.lastIndexOf(\'.\'); _EL_       sb.append(token.substring(index + 1)); _EL_     } _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', '@Override protected synchronized void write(long offset,byte[] b) throws IOException { _EL_   if (byteBuffer != null) { _EL_     byteBuffer.position((int)offset); _EL_     byteBuffer.put(b); _EL_   } _EL_  else { _EL_     throw new IOException("Write failed, file " + getPath() + " not mapped for I/O"); _EL_   } _EL_ } _EL_ ', 'public int findLine(int offset){ _EL_   int line=lineStarts.length - 1; _EL_   while ((lineStarts[line] > offset) && (line > 0)) { _EL_     line--; _EL_   } _EL_   return line; _EL_ } _EL_ ', 'private static RoadPermission roadFlagComparision(Way iosmWay,String newTag,String newValue,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){ _EL_   Way osmWay=new Way(); _EL_   StringJoiner stringJoiner=new StringJoiner(";"); _EL_   for (  OSMEntity.Tag tag : iosmWay.tags) { _EL_     osmWay.addTag(tag.key,tag.value); _EL_     stringJoiner.add(tag.key + "=" + tag.value); _EL_   } _EL_   if (newTag != null && newValue != null) { _EL_     osmWay.addTag(newTag,newValue); _EL_     stringJoiner.add(newTag + "=" + newValue); _EL_   } _EL_   Set<EdgeStore.EdgeFlag> forwardFiltered; _EL_   Set<EdgeStore.EdgeFlag> backwardFiltered; _EL_   RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay); _EL_   forwardFiltered=filterFlags(roadPermission.forward); _EL_   backwardFiltered=filterFlags(roadPermission.backward); _EL_   String tags="Tags: " + stringJoiner.toString(); _EL_   assertEquals(tags,forwardExpected,forwardFiltered); _EL_   assertEquals(tags,backwardExpected,backwardFiltered); _EL_   return roadPermission; _EL_ } _EL_ ', 'public String useRelativePathTipText(){ _EL_   return "Use relative rather than absolute paths"; _EL_ } _EL_ ', 'private void listDirectory(File directory,RelativeDirectory subdirectory,Set<JavaFileObject.Kind> fileKinds,boolean recurse,ListBuffer<JavaFileObject> resultList){ _EL_   File d=subdirectory.getFile(directory); _EL_   if (!caseMapCheck(d,subdirectory))   return; _EL_   File[] files=d.listFiles(); _EL_   if (files == null)   return; _EL_   if (sortFiles != null)   Arrays.sort(files,sortFiles); _EL_   for (  File f : files) { _EL_     String fname=f.getName(); _EL_     if (f.isDirectory()) { _EL_       if (recurse && SourceVersion.isIdentifier(fname)) { _EL_         listDirectory(directory,new RelativeDirectory(subdirectory,fname),fileKinds,recurse,resultList); _EL_       } _EL_     } _EL_  else { _EL_       if (isValidFile(fname,fileKinds)) { _EL_         JavaFileObject fe=new RegularFileObject(this,fname,new File(d,fname)); _EL_         resultList.append(fe); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public void init(RemoteAuthenticatedUser currentUser){ _EL_   this.currentUser=currentUser; _EL_ } _EL_ ', 'public static int instanceOf(Object o,Class<?> c){ _EL_   if (o == null)   return FALSE; _EL_   return c.isAssignableFrom(o.getClass()) ? TRUE : FALSE; _EL_ } _EL_ ', '@Override public void add(int location,E object){ _EL_   insertElementAt(object,location); _EL_ } _EL_ ', 'private static int arrayIndex(int i){ _EL_   return (i >> SHIFT_PER_WORD); _EL_ } _EL_ ', 'public VdcConfig toConfigParam(Properties vdcInfo){ _EL_   log.info("copy {} to the sync config param",vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID)); _EL_   VdcConfig vdcConfig=new VdcConfig(); _EL_   vdcConfig.setId(URIUtil.uri(vdcInfo.getProperty(GeoServiceJob.OPERATED_VDC_ID))); _EL_   vdcConfig.setShortId(vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID)); _EL_   vdcConfig.setSecretKey(vdcInfo.getProperty(GeoServiceJob.VDC_SECRETE_KEY)); _EL_   String name=vdcInfo.getProperty(GeoServiceJob.VDC_NAME); _EL_   if ((name != null) && (!name.isEmpty())) { _EL_     vdcConfig.setName(name); _EL_   } _EL_   String description=vdcInfo.getProperty(GeoServiceJob.VDC_DESCRIPTION); _EL_   if ((description != null) && (!description.isEmpty())) { _EL_     vdcConfig.setDescription(description); _EL_   } _EL_   String endPnt=vdcInfo.getProperty(GeoServiceJob.VDC_API_ENDPOINT); _EL_   if (endPnt != null) { _EL_     vdcConfig.setApiEndpoint(endPnt); _EL_   } _EL_   vdcConfig.setGeoCommandEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT)); _EL_   vdcConfig.setGeoDataEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT)); _EL_   return vdcConfig; _EL_ } _EL_ ', 'public static boolean deleteDirectoryFiles(Set<String> inputFilePathsAndNames){ _EL_   if ((inputFilePathsAndNames == null)) { _EL_     return false; _EL_   } _EL_   boolean didSuccessfullyDeleteAllFiles=true; _EL_   try { _EL_     for (    String filePathAndName : inputFilePathsAndNames) { _EL_       File file=new File(filePathAndName); _EL_       if (!file.isDirectory()) { _EL_         boolean deleteSuccess=deleteFile(filePathAndName); _EL_         if (!deleteSuccess) { _EL_           logger.debug("Warning - " + filePathAndName + " failed to delete"); _EL_           didSuccessfullyDeleteAllFiles=false; _EL_         } _EL_       } _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e)); _EL_     return false; _EL_   } _EL_   return didSuccessfullyDeleteAllFiles; _EL_ } _EL_ ', 'public static String readCookieIgnoreSpecialCharacters(HttpServletRequest request,String cookieName){ _EL_   String cs=request.getHeader("cookie"); _EL_   if (cs == null)   return null; _EL_   int start=cs.indexOf(cookieName); _EL_   if (start < 0)   return null; _EL_   cs=cs.substring(start + 1 + cookieName.length()); _EL_   int end=cs.indexOf(\';\'); _EL_   if (end > 0) { _EL_     cs=cs.substring(0,end); _EL_   } _EL_   return cs; _EL_ } _EL_ ', 'public void add(int pos,Box b){ _EL_   children.add(pos,b); _EL_   b.parent=this; _EL_   b.elderParent=elderParent; _EL_ } _EL_ ', 'public static void addActivityListener(ActivityListener listener){ _EL_   if (listener != null) { _EL_     startTracking(); _EL_     listeners.add(listener); _EL_   } _EL_ } _EL_ ', 'public void applyComponentOrientation(ComponentOrientation o){ _EL_   possiblyFixCursor(o.isLeftToRight()); _EL_   super.applyComponentOrientation(o); _EL_ } _EL_ ', 'public void close() throws IOException { _EL_   if (!closed) { _EL_     try { _EL_       finish(); _EL_     } _EL_   finally { _EL_       out.close(); _EL_       closed=true; _EL_     } _EL_   } _EL_ } _EL_ ', 'private boolean checkTouchSlop(View child,float dx,float dy){ _EL_   if (child == null) { _EL_     return false; _EL_   } _EL_   final boolean checkHorizontal=mCallback.getViewHorizontalDragRange(child) > 0; _EL_   final boolean checkVertical=mCallback.getViewVerticalDragRange(child) > 0; _EL_   if (checkHorizontal && checkVertical) { _EL_     return dx * dx + dy * dy > mTouchSlop * mTouchSlop; _EL_   } _EL_  else   if (checkHorizontal) { _EL_     return Math.abs(dx) > mTouchSlop; _EL_   } _EL_  else   if (checkVertical) { _EL_     return Math.abs(dy) > mTouchSlop; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws org.xml.sax.SAXException { _EL_   throw new StopParseException(); _EL_ } _EL_ ', 'Calendar toCalendar(String value,String pattern,Locale locale){ _EL_   Calendar calendar=null; _EL_   try { _EL_     DateFormat format=(locale == null) ? new SimpleDateFormat(pattern) : new SimpleDateFormat(pattern,locale); _EL_     format.setLenient(false); _EL_     format.parse(value); _EL_     calendar=format.getCalendar(); _EL_   } _EL_  catch (  Exception e) { _EL_     fail("Error creating Calendar value =\'" + value + ", pattern=\'"+ pattern+ "\' "+ e.toString()); _EL_   } _EL_   return calendar; _EL_ } _EL_ ', 'private static void saveTemplate(File parentDir,FileTemplateBase template,final String lineSeparator) throws IOException { _EL_   final File templateFile=new File(parentDir,encodeFileName(template.getName(),template.getExtension())); _EL_   FileOutputStream fileOutputStream; _EL_   try { _EL_     fileOutputStream=new FileOutputStream(templateFile); _EL_   } _EL_  catch (  FileNotFoundException e) { _EL_     FileUtil.delete(templateFile); _EL_     fileOutputStream=new FileOutputStream(templateFile); _EL_   } _EL_   OutputStreamWriter outputStreamWriter=new OutputStreamWriter(fileOutputStream,CharsetToolkit.UTF8_CHARSET); _EL_   String content=template.getText(); _EL_   if (!lineSeparator.equals("\\n")) { _EL_     content=StringUtil.convertLineSeparators(content,lineSeparator); _EL_   } _EL_   outputStreamWriter.write(content); _EL_   outputStreamWriter.close(); _EL_   fileOutputStream.close(); _EL_ } _EL_ ', 'static public InputStream findClusterXML(String _clusterXML){ _EL_   String schemaNameToBeUsed=_clusterXML; _EL_   InputStream schemaInputStream; _EL_   String schemaFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + schemaNameToBeUsed+ ClusterXML.CLUSTER_XML_FILE_SUFFIX; _EL_   schemaInputStream=getResourceStream(schemaFilePath); _EL_   if (schemaInputStream != null) { _EL_     if (_logger.isLoggable(Level.INFO)) { _EL_       _logger.info("Loaded the cluster XML < " + getResourceURL(schemaNameToBeUsed) + " > for the cluster config setup."); _EL_     } _EL_     return schemaInputStream; _EL_   } _EL_  else { _EL_     String defaultSchemaFileName=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + Constants.Schemas.DEFAULT_SCHEMA+ ClusterXML.CLUSTER_XML_FILE_SUFFIX; _EL_     schemaInputStream=getResourceStream(defaultSchemaFileName); _EL_     if (schemaInputStream != null) { _EL_       if (_logger.isLoggable(Level.WARNING)) { _EL_         _logger.warning("Could not find the cluster xml file: " + schemaFilePath + ".\\n Loaded the default cluster xml < "+ getResourceURL(defaultSchemaFileName)+ " > for the cluster config setup."); _EL_       } _EL_       return schemaInputStream; _EL_     } _EL_  else { _EL_       if (_logger.isLoggable(Level.WARNING)) { _EL_         _logger.warning("The requested cluster xml file does not exist in the following path: " + defaultSchemaFileName); _EL_       } _EL_     } _EL_   } _EL_   return schemaInputStream; _EL_ } _EL_ ', 'public void exec(String description,String[] baseCommand) throws BackupException { _EL_   exec(description,baseCommand,null,null,null,false,false); _EL_ } _EL_ ', 'public final boolean checkTag(int identifier){ _EL_   return Arrays.binarySearch(identifiers[0],identifier) >= 0; _EL_ } _EL_ ', 'static void incrementKeepAliveCount(){ _EL_ synchronized (keepAliveLock) { _EL_     keepAliveCount++; _EL_     if (reaper == null) { _EL_       reaper=AccessController.doPrivileged(new NewThreadAction(new Reaper(),"Reaper",false)); _EL_       reaper.start(); _EL_     } _EL_     if (gcLatencyRequest == null) { _EL_       gcLatencyRequest=GC.requestLatency(gcInterval); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void addSubTree(int index,List<Node> children){ _EL_   List<NodeDescriptor> nodeDescriptors=convertTreeNodesHelper(children); _EL_   roots.addChildren(index,nodeDescriptors); _EL_   List<Node> nodes=new ArrayList<>(); _EL_   for (  NodeDescriptor child : nodeDescriptors) { _EL_     nodes.add(child.getNode()); _EL_   } _EL_   if (!nodes.isEmpty()) { _EL_     fireEvent(new StoreAddEvent(index,nodes)); _EL_   } _EL_ } _EL_ ', 'public static boolean isExplicitAllType(String[] types){ _EL_   return types != null && types.length == 1 && ALL.equals(types[0]); _EL_ } _EL_ ', 'protected static String extractAccessKey(String s3uri){ _EL_   return s3uri.substring(s3uri.indexOf("://") + 3,s3uri.indexOf(\':\',s3uri.indexOf("://") + 3)); _EL_ } _EL_ ', 'ConverterSet add(Converter converter,Converter[] removed){ _EL_   Converter[] converters=iConverters; _EL_   int length=converters.length; _EL_   for (int i=0; i < length; i++) { _EL_     Converter existing=converters[i]; _EL_     if (converter.equals(existing)) { _EL_       if (removed != null) { _EL_         removed[0]=null; _EL_       } _EL_       return this; _EL_     } _EL_     if (converter.getSupportedType() == existing.getSupportedType()) { _EL_       Converter[] copy=new Converter[length]; _EL_       for (int j=0; j < length; j++) { _EL_         if (j != i) { _EL_           copy[j]=converters[j]; _EL_         } _EL_  else { _EL_           copy[j]=converter; _EL_         } _EL_       } _EL_       if (removed != null) { _EL_         removed[0]=existing; _EL_       } _EL_       return new ConverterSet(copy); _EL_     } _EL_   } _EL_   Converter[] copy=new Converter[length + 1]; _EL_   System.arraycopy(converters,0,copy,0,length); _EL_   copy[length]=converter; _EL_   if (removed != null) { _EL_     removed[0]=null; _EL_   } _EL_   return new ConverterSet(copy); _EL_ } _EL_ ', 'public void dumpIndex(boolean showBounds) throws IOException { _EL_   byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH]; _EL_   int recNum=0; _EL_   if (shpFileName == null) { _EL_     return; _EL_   } _EL_   BinaryBufferedFile ssx=new BinaryBufferedFile(ssx(shpFileName)); _EL_   ssx.seek(100); _EL_   while (true) { _EL_     int result=ssx.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH); _EL_     if (result <= 0) { _EL_       logger.info("Processed " + recNum + " records"); _EL_       break; _EL_     } _EL_  else { _EL_       recNum++; _EL_       int offset=readBEInt(ixRecord,0); _EL_       int length=readBEInt(ixRecord,4); _EL_       logger.info("Record " + recNum + ": "+ offset+ ", "+ length+ (showBounds ? ("; " + readLEDouble(ixRecord,8) + ", "+ readLEDouble(ixRecord,16)+ ", "+ readLEDouble(ixRecord,24)+ ", "+ readLEDouble(ixRecord,32)) : "")); _EL_     } _EL_   } _EL_   ssx.close(); _EL_ } _EL_ ', 'public boolean load(File fi) throws JmriConfigureXmlException { _EL_   return load(fi,false); _EL_ } _EL_ ', 'private void calculateGridSizes(float numbersRadius,float xCenter,float yCenter,float textSize,float[] textGridHeights,float[] textGridWidths){ _EL_   float offset1=numbersRadius; _EL_   float offset2=numbersRadius * ((float)Math.sqrt(3)) / 2f; _EL_   float offset3=numbersRadius / 2f; _EL_   mPaint.setTextSize(textSize); _EL_   yCenter-=(mPaint.descent() + mPaint.ascent()) / 2; _EL_   textGridHeights[0]=yCenter - offset1; _EL_   textGridWidths[0]=xCenter - offset1; _EL_   textGridHeights[1]=yCenter - offset2; _EL_   textGridWidths[1]=xCenter - offset2; _EL_   textGridHeights[2]=yCenter - offset3; _EL_   textGridWidths[2]=xCenter - offset3; _EL_   textGridHeights[3]=yCenter; _EL_   textGridWidths[3]=xCenter; _EL_   textGridHeights[4]=yCenter + offset3; _EL_   textGridWidths[4]=xCenter + offset3; _EL_   textGridHeights[5]=yCenter + offset2; _EL_   textGridWidths[5]=xCenter + offset2; _EL_   textGridHeights[6]=yCenter + offset1; _EL_   textGridWidths[6]=xCenter + offset1; _EL_ } _EL_ ', 'public synchronized void flush() throws IOException { _EL_   checkNotClosed(); _EL_   trimToSize(); _EL_   trimToFileCount(); _EL_   journalWriter.flush(); _EL_ } _EL_ ', 'public static Map<String,Object> performFindList(DispatchContext dctx,Map<String,Object> context){ _EL_   Integer viewSize=(Integer)context.get("viewSize"); _EL_   if (viewSize == null)   viewSize=Integer.valueOf(20); _EL_   context.put("viewSize",viewSize); _EL_   Integer viewIndex=(Integer)context.get("viewIndex"); _EL_   if (viewIndex == null)   viewIndex=Integer.valueOf(0); _EL_   context.put("viewIndex",viewIndex); _EL_   Map<String,Object> result=performFind(dctx,context); _EL_   int start=viewIndex.intValue() * viewSize.intValue(); _EL_   List<GenericValue> list=null; _EL_   Integer listSize=0; _EL_   try { _EL_     EntityListIterator it=(EntityListIterator)result.get("listIt"); _EL_     list=it.getPartialList(start + 1,viewSize); _EL_     listSize=it.getResultsSizeAfterPartialList(); _EL_     it.close(); _EL_   } _EL_  catch (  Exception e) { _EL_     Debug.logInfo("Problem getting partial list" + e,module); _EL_   } _EL_   result.put("listSize",listSize); _EL_   result.put("list",list); _EL_   result.remove("listIt"); _EL_   return result; _EL_ } _EL_ ', 'public static boolean isObjectAvailableNow(final boolean enabled,final Date availableFrom,final Date availableTo,final Date now){ _EL_   if (!enabled) { _EL_     return false; _EL_   } _EL_   if (availableFrom != null && now.before(availableFrom)) { _EL_     return false; _EL_   } _EL_   if (availableTo != null && now.after(availableTo)) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public void write(byte[] buf) throws IOException { _EL_   output.write(buf); _EL_   bytesWritten+=buf.length; _EL_ } _EL_ ', 'public String fullForm(final String str,final String lowString){ _EL_   String ret=lowString; _EL_   PrefixEntry found=prefixMap.get(str); _EL_   if (found != null) { _EL_     ret=found.prefixSingular + ret; _EL_   } _EL_  else { _EL_     for (    PrefixEntry entry : prefixEndList) { _EL_       if (str.endsWith(entry.keyword)) { _EL_         ret=Grammar.addPrefixIfNotAlreadyThere(ret,entry.prefixSingular,entry.prefixPlural); _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   return ret; _EL_ } _EL_ ', 'public void clearPasswordExpirationWarnedTime(){ _EL_   operations.add(PasswordPolicyStateOperationType.CLEAR_PASSWORD_EXPIRATION_WARNED_TIME); _EL_ } _EL_ ', 'protected double kernelHelper(int n,char[] s,int endIndexS,char[] t,int endIndexT){ _EL_   if (n <= 0) { _EL_     return getReturnValue(n); _EL_   } _EL_   if (Math.min(endIndexS + 1,endIndexT + 1) < n) { _EL_     return getReturnValue(n); _EL_   } _EL_   int adr=0; _EL_   if (m_useRecursionCache) { _EL_     adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT; _EL_     if (cachekhK[adr % maxCache] == adr + 1) { _EL_       return cachekh[adr % maxCache]; _EL_     } _EL_   } _EL_   double result=0; _EL_   result=m_lambda * kernelHelper(n,s,endIndexS - 1,t,endIndexT) + kernelHelper2(n,s,endIndexS,t,endIndexT); _EL_   if (m_useRecursionCache) { _EL_     cachekhK[adr % maxCache]=adr + 1; _EL_     cachekh[adr % maxCache]=result; _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public void addInputMethodListener(InputMethodListener l){ _EL_   m_textPane.addInputMethodListener(l); _EL_ } _EL_ ', 'private void SaveGCMData(){ _EL_   try { _EL_     SharedPreferences preferences=getSharedPreferences(); _EL_     SharedPreferences.Editor editor=preferences.edit(); _EL_     editor.putString(PREFS_PUSHER_APP_ID_KEY,mPusherAppId); _EL_     editor.putString(PREFS_PUSHER_URL_KEY,mPusherUrl); _EL_     editor.putString(PREFS_PUSHER_FILE_TAG_KEY,mPusherBaseFileTag); _EL_     editor.commit(); _EL_   } _EL_  catch (  Exception e) { _EL_     Log.e(LOG_TAG,"SaveGCMData failed " + e.getLocalizedMessage()); _EL_   } _EL_ } _EL_ ', 'public static void addAttributeDefaultValues(String serviceName,String subSchemaName,String schemaType,String attributeName,Set defaultValues) throws UpgradeException { _EL_   String classMethod="UpgradeUtils:addAttributeDefaultValues : "; _EL_   if (debug.messageEnabled()) { _EL_     debug.message(classMethod + "Updating attribute default values"); _EL_     debug.message("in :" + serviceName + "for attribute: "+ attributeName); _EL_   } _EL_   ServiceSchema ss=getServiceSchema(serviceName,subSchemaName,schemaType); _EL_   try { _EL_     Map attributeDefaults=ss.getAttributeDefaults(); _EL_     Set oldAttrValues=(Set)attributeDefaults.get(attributeName); _EL_     Set newAttrValues=((oldAttrValues == null) || oldAttrValues.isEmpty()) ? new HashSet() : new HashSet(oldAttrValues); _EL_     newAttrValues.addAll(defaultValues); _EL_     ss.setAttributeDefaults(attributeName,newAttrValues); _EL_   } _EL_  catch (  SSOException ssoe) { _EL_     throw new UpgradeException("Invalid SSOToken"); _EL_   } _EL_ catch (  SMSException sme) { _EL_     throw new UpgradeException("Failed to add attribute default " + "values"); _EL_   } _EL_ } _EL_ ', 'private static ClassNode makeType(ClassNode cn,boolean usingClass){ _EL_   if (usingClass) { _EL_     ClassNode clazzType=CLASS_Type.getPlainNodeReference(); _EL_     clazzType.setGenericsTypes(new GenericsType[]{new GenericsType(cn)}); _EL_     return clazzType; _EL_   } _EL_  else { _EL_     return cn; _EL_   } _EL_ } _EL_ ', 'private static boolean isWritable(@NonNull final File file){ _EL_   boolean isExisting=file.exists(); _EL_   try { _EL_     FileOutputStream output=new FileOutputStream(file,true); _EL_     try { _EL_       output.close(); _EL_     } _EL_  catch (    IOException e) { _EL_     } _EL_   } _EL_  catch (  java.io.FileNotFoundException e) { _EL_     return false; _EL_   } _EL_   boolean result=file.canWrite(); _EL_   if (!isExisting) { _EL_     file.delete(); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private int calculateMenuMargin(){ _EL_   WindowManager wm=(WindowManager)getSystemService(Context.WINDOW_SERVICE); _EL_   Display display=wm.getDefaultDisplay(); _EL_   Point size=new Point(); _EL_   display.getSize(size); _EL_   int height=size.y; _EL_   return (int)Math.round(height * MENU_MARGIN_RELATIVE_MODIFIER); _EL_ } _EL_ ', 'public static void verifySetterMethods(Class<?> clazz,MappedField... fields){ _EL_   String methodName=null; _EL_   String fieldName=null; _EL_   Class<?> fieldType=null; _EL_   try { _EL_     for (    MappedField field : fields) { _EL_       fieldName=field.getName(); _EL_       fieldType=field.getType(); _EL_       String customSet=field.setMethod(); _EL_       if (!isNull(customSet) && !customSet.equals(Constants.DEFAULT_ACCESSOR_VALUE))       try { _EL_         clazz.getMethod(customSet,fieldType); _EL_         field.setMethod(customSet); _EL_         continue; _EL_       } _EL_  catch (      Exception e) { _EL_         Error.customMethod("set",customSet,clazz); _EL_       } _EL_       methodName=mSet(fieldName); _EL_       clazz.getMethod(methodName,fieldType); _EL_       field.setMethod(methodName); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     Error.method(methodName,fieldName,clazz); _EL_   } _EL_ } _EL_ ', 'public static int countMatches(String string,char c){ _EL_   int n=0; _EL_   for (  char tc : string.toCharArray()) { _EL_     if (c == tc)     n++; _EL_   } _EL_   return n; _EL_ } _EL_ ', 'private int validatePreloadOrder(CacheConfiguration[] cfgs) throws IgniteCheckedException { _EL_   int maxOrder=0; _EL_   for (  CacheConfiguration cfg : cfgs) { _EL_     int rebalanceOrder=cfg.getRebalanceOrder(); _EL_     if (rebalanceOrder > 0) { _EL_       if (cfg.getCacheMode() == LOCAL)       throw new IgniteCheckedException("Rebalance order set for local cache (fix configuration and restart the " + "node): " + U.maskName(cfg.getName())); _EL_       if (cfg.getRebalanceMode() == CacheRebalanceMode.NONE)       throw new IgniteCheckedException("Only caches with SYNC or ASYNC rebalance mode can be set as rebalance " + "dependency for other caches [cacheName=" + U.maskName(cfg.getName()) + ", rebalanceMode="+ cfg.getRebalanceMode()+ ", rebalanceOrder="+ cfg.getRebalanceOrder()+ \']\'); _EL_       maxOrder=Math.max(maxOrder,rebalanceOrder); _EL_     } _EL_  else     if (rebalanceOrder < 0)     throw new IgniteCheckedException("Rebalance order cannot be negative for cache (fix configuration and restart " + "the node) [cacheName=" + U.maskName(cfg.getName()) + ", rebalanceOrder="+ rebalanceOrder+ \']\'); _EL_   } _EL_   return maxOrder; _EL_ } _EL_ ', 'private TransportNetwork checkCached(String networkId){ _EL_   try { _EL_     String filename=networkId + "_" + R5Version.version+ ".dat"; _EL_     File cacheLocation=new File(cacheDir,networkId + "_" + R5Version.version+ ".dat"); _EL_     if (cacheLocation.exists())     LOG.info("Found locally-cached TransportNetwork at {}",cacheLocation); _EL_  else { _EL_       LOG.info("No locally cached transport network at {}.",cacheLocation); _EL_       if (sourceBucket != null) { _EL_         LOG.info("Checking for cached transport network on S3."); _EL_         S3Object tn; _EL_         try { _EL_           tn=s3.getObject(sourceBucket,filename); _EL_         } _EL_  catch (        AmazonServiceException ex) { _EL_           LOG.info("No cached transport network was found in S3. It will be built from scratch."); _EL_           return null; _EL_         } _EL_         cacheDir.mkdirs(); _EL_         LOG.info("Copying pre-built transport network from S3 to local file {}",cacheLocation); _EL_         FileOutputStream fos=new FileOutputStream(cacheLocation); _EL_         InputStream is=tn.getObjectContent(); _EL_         try { _EL_           ByteStreams.copy(is,fos); _EL_         } _EL_   finally { _EL_           is.close(); _EL_           fos.close(); _EL_         } _EL_       } _EL_  else { _EL_         LOG.info("Transport network was not found"); _EL_         return null; _EL_       } _EL_     } _EL_     LOG.info("Loading cached transport network at {}",cacheLocation); _EL_     FileInputStream fis=new FileInputStream(cacheLocation); _EL_     try { _EL_       return TransportNetwork.read(fis); _EL_     } _EL_   finally { _EL_       fis.close(); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     LOG.error("Exception occurred retrieving cached transport network",e); _EL_     return null; _EL_   } _EL_ } _EL_ ', 'void readFile(File file) throws org.jdom2.JDOMException, java.io.IOException { _EL_   XmlFile xf=new XmlFile(){ _EL_   } _EL_ ; _EL_   xf.rootFromFile(file); _EL_ } _EL_ ', 'private void sendNextMessageOverNetwork() throws Exception { _EL_   RawData raw=outgoing.take(); _EL_   if (raw == null)   throw new NullPointerException(); _EL_   sendNext(raw); _EL_ } _EL_ ', 'public <T extends IntentionAction & LocalQuickFix>void registerBatchFix(@NotNull T fix,@Nullable TextRange range,@Nullable final HighlightDisplayKey key){ _EL_   if (range == null) { _EL_     range=new TextRange(myStartOffset,myEndOffset); _EL_   } _EL_   if (myBatchFixes == null) { _EL_     myBatchFixes=new ArrayList<QuickFixInfo>(); _EL_   } _EL_   myBatchFixes.add(new QuickFixInfo(fix,range,key)); _EL_ } _EL_ ', '@Override public void pushMessageAsync(Message msg) throws org.apache.thrift.TException { _EL_   pushMessageSync(msg); _EL_   return; _EL_ } _EL_ ', 'public boolean remove(JsonElement element){ _EL_   return elements.remove(element); _EL_ } _EL_ ', 'private void writeAttr(String name,String val) throws IOException { _EL_   writeAttr(name,val,true); _EL_ } _EL_ ', 'final private String syntaxDef2SyntaxDesc(Attributes attrs) throws NamingException { _EL_   StringBuffer syntaxDesc=new StringBuffer("( "); _EL_   Attribute attr=null; _EL_   int count=0; _EL_   attr=attrs.get(NUMERICOID_ID); _EL_   if (attr != null) { _EL_     syntaxDesc.append(writeNumericOID(attr)); _EL_     count++; _EL_   } _EL_  else { _EL_     throw new ConfigurationException("Attribute type doesn\'t" + "have a numeric OID"); _EL_   } _EL_   attr=attrs.get(DESC_ID); _EL_   if (attr != null) { _EL_     syntaxDesc.append(writeQDString(attr)); _EL_     count++; _EL_   } _EL_   if (count < attrs.size()) { _EL_     String attrId=null; _EL_     for (NamingEnumeration<? extends Attribute> ae=attrs.getAll(); ae.hasMoreElements(); ) { _EL_       attr=ae.next(); _EL_       attrId=attr.getID(); _EL_       if (attrId.equals(NUMERICOID_ID) || attrId.equals(DESC_ID)) { _EL_         continue; _EL_       } _EL_  else { _EL_         syntaxDesc.append(writeQDStrings(attr)); _EL_       } _EL_     } _EL_   } _EL_   syntaxDesc.append(")"); _EL_   return syntaxDesc.toString(); _EL_ } _EL_ ', 'public String generateMinimalMATSimConfig(){ _EL_   Config config=new Config(); _EL_   ConfigGroup ippcm=config.createModule(MatrixBasedPtRouterConfigGroup.GROUP_NAME); _EL_   ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_STOPS,this.ptStops); _EL_   ippcm.addParam(MatrixBasedPtRouterConfigGroup.USING_PT_STOPS,"tRue"); _EL_   ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_TRAVEL_TIMES_AND_DISTANCES_SWITCH,this.useTravelTimesAndDistances); _EL_   ChangeModeConfigGroup changeModeConfig=ConfigUtils.addOrGetModule(config,ChangeModeConfigGroup.CONFIG_MODULE,ChangeModeConfigGroup.class); _EL_   String[] str={"car","pt"}; _EL_   changeModeConfig.setModes(str); _EL_   return writeConfigFile(config); _EL_ } _EL_ ', 'public RecordedRequest takeRequest() throws InterruptedException { _EL_   return requestQueue.take(); _EL_ } _EL_ ', 'public static double cdf(double val,double rate){ _EL_   if (val < 0.) { _EL_     return 0.; _EL_   } _EL_   return 1 - Math.exp(-rate * val); _EL_ } _EL_ ', 'static void updateStyle(JTextComponent c,SeaGlassContext context,String prefix){ _EL_   SeaGlassStyle style=(SeaGlassStyle)context.getStyle(); _EL_   Color color=c.getCaretColor(); _EL_   if (color == null || color instanceof UIResource) { _EL_     c.setCaretColor((Color)style.get(context,prefix + ".caretForeground")); _EL_   } _EL_   Color fg=c.getForeground(); _EL_   if (fg == null || fg instanceof UIResource) { _EL_     fg=style.getColorForState(context,ColorType.TEXT_FOREGROUND); _EL_     if (fg != null) { _EL_       c.setForeground(fg); _EL_     } _EL_   } _EL_   Object ar=style.get(context,prefix + ".caretAspectRatio"); _EL_   if (ar instanceof Number) { _EL_     c.putClientProperty("caretAspectRatio",ar); _EL_   } _EL_   context.setComponentState(SELECTED | FOCUSED); _EL_   Color s=c.getSelectionColor(); _EL_   if (s == null || s instanceof UIResource) { _EL_     c.setSelectionColor(style.getColor(context,ColorType.TEXT_BACKGROUND)); _EL_   } _EL_   Color sfg=c.getSelectedTextColor(); _EL_   if (sfg == null || sfg instanceof UIResource) { _EL_     c.setSelectedTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND)); _EL_   } _EL_   context.setComponentState(DISABLED); _EL_   Color dfg=c.getDisabledTextColor(); _EL_   if (dfg == null || dfg instanceof UIResource) { _EL_     c.setDisabledTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND)); _EL_   } _EL_   Insets margin=c.getMargin(); _EL_   if (margin == null || margin instanceof UIResource) { _EL_     margin=(Insets)style.get(context,prefix + ".margin"); _EL_     if (margin == null) { _EL_       margin=SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS; _EL_     } _EL_     c.setMargin(margin); _EL_   } _EL_   Caret caret=c.getCaret(); _EL_   if (caret instanceof UIResource) { _EL_     Object o=style.get(context,prefix + ".caretBlinkRate"); _EL_     if (o != null && o instanceof Integer) { _EL_       Integer rate=(Integer)o; _EL_       caret.setBlinkRate(rate.intValue()); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected void initStreamBufferSize(){ _EL_   String streamBufferSizeParam=getInitParameter("streamBufferSize"); _EL_   setStreamBufferSize((streamBufferSizeParam == null) ? DEFAULT_STREAM_BUFFER_SIZE : Integer.parseInt(streamBufferSizeParam)); _EL_   if (isDebug()) { _EL_     log("streamBufferSize: " + getStreamBufferSize()); _EL_   } _EL_ } _EL_ ', 'public static void process(List<Packages> pkgList) throws Exception { _EL_   init(); _EL_   String[] temps=templates.split(","); _EL_   String[] vmFiles=new String[temps.length]; _EL_   for (int i=0; i < temps.length; i++) { _EL_     vmFiles[i]=temps[i] + ".vm"; _EL_   } _EL_   for (  Packages pkg : pkgList) { _EL_     for (    String vmFile : vmFiles) { _EL_       generator(vmFile,pkg); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void export_dependencies(JCas jcas){ _EL_   dependencies=new LinkedHashMap<Token,List<Dependency>>(); _EL_   List<Token> nonGoverned=new ArrayList<Token>(nodes.keySet()); _EL_   for (  Dependency dependency : select(jcas,Dependency.class)) { _EL_     Token governor=dependency.getGovernor(); _EL_     Token dependent=dependency.getDependent(); _EL_     List<Dependency> l=dependencies.get(governor); _EL_     if (l == null) { _EL_       dependencies.put(governor,new ArrayList<Dependency>()); _EL_       l=dependencies.get(governor); _EL_     } _EL_     l.add(dependency); _EL_     nonGoverned.remove(dependent); _EL_   } _EL_   for (  Token t : nonGoverned) { _EL_     traverseDependents(t,"",-1); _EL_     writeToFile("component",componentId,"p","dep","dep"); _EL_     componentId++; _EL_   } _EL_ } _EL_ ', 'public static String formatLong(long number){ _EL_   return intFormat.format(number); _EL_ } _EL_ ', 'static boolean isExist(String libName,int version){ _EL_   String file=_targetSoFile(libName,version); _EL_   File a=new File(file); _EL_   return a.exists(); _EL_ } _EL_ ', 'protected void error(String msg,Exception e) throws org.xml.sax.SAXException { _EL_   SAXSourceLocator locator=getLocator(); _EL_   ErrorListener handler=m_stylesheetProcessor.getErrorListener(); _EL_   TransformerException pe; _EL_   if (!(e instanceof TransformerException)) { _EL_     pe=(null == e) ? new TransformerException(msg,locator) : new TransformerException(msg,locator,e); _EL_   } _EL_  else   pe=(TransformerException)e; _EL_   if (null != handler) { _EL_     try { _EL_       handler.error(pe); _EL_     } _EL_  catch (    TransformerException te) { _EL_       throw new org.xml.sax.SAXException(te); _EL_     } _EL_   } _EL_  else   throw new org.xml.sax.SAXException(pe); _EL_ } _EL_ ', 'public static void copy(DimensionsEvent aeDest,DimensionsEvent aeSrc){ _EL_   GPOMutable destAggs=aeDest.getAggregates(); _EL_   GPOMutable srcAggs=aeSrc.getAggregates(); _EL_   if (srcAggs.getFieldsBoolean() != null) { _EL_     System.arraycopy(srcAggs.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcAggs.getFieldsBoolean().length); _EL_   } _EL_   if (srcAggs.getFieldsCharacter() != null) { _EL_     System.arraycopy(srcAggs.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcAggs.getFieldsCharacter().length); _EL_   } _EL_   if (srcAggs.getFieldsString() != null) { _EL_     System.arraycopy(srcAggs.getFieldsString(),0,destAggs.getFieldsString(),0,srcAggs.getFieldsString().length); _EL_   } _EL_   if (srcAggs.getFieldsShort() != null) { _EL_     System.arraycopy(srcAggs.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcAggs.getFieldsShort().length); _EL_   } _EL_   if (srcAggs.getFieldsInteger() != null) { _EL_     System.arraycopy(srcAggs.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcAggs.getFieldsInteger().length); _EL_   } _EL_   if (srcAggs.getFieldsLong() != null) { _EL_     System.arraycopy(srcAggs.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcAggs.getFieldsLong().length); _EL_   } _EL_   if (srcAggs.getFieldsFloat() != null) { _EL_     System.arraycopy(srcAggs.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcAggs.getFieldsFloat().length); _EL_   } _EL_   if (srcAggs.getFieldsDouble() != null) { _EL_     System.arraycopy(srcAggs.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcAggs.getFieldsDouble().length); _EL_   } _EL_ } _EL_ ', 'public static <T>List<T> rest(List<T> l){ _EL_   return l.subList(1,l.size()); _EL_ } _EL_ ', 'public static List<Integer> createRanges(int... startEnds){ _EL_   assert startEnds.length % 2 == 0; _EL_   ArrayList<Integer> ret=new ArrayList<Integer>(); _EL_   for (int si=0; si < startEnds.length; si++) { _EL_     final int start=startEnds[si++]; _EL_     final int end=startEnds[si]; _EL_     assert end >= start; _EL_     ret.ensureCapacity(ret.size() + ((end - start) + 1)); _EL_     for (int i=start; i <= end; i++) { _EL_       ret.add(new Integer(i)); _EL_     } _EL_   } _EL_   return ret; _EL_ } _EL_ ', 'private static Position nextTokenPos(Position pos,Token[][] spec){ _EL_   if (pos == null) { _EL_     return null; _EL_   } _EL_   int nextItem=pos.item + 1; _EL_   if ((nextItem < spec[pos.line].length) && ((pos.line < pcalEnd.line) || (nextItem < pcalEnd.item))) { _EL_     return new Position(pos.line,nextItem); _EL_   } _EL_   int nextLine=pos.line + 1; _EL_   while ((nextLine < spec.length) && (spec[nextLine].length == 0)) { _EL_     nextLine++; _EL_   } _EL_   if ((nextLine < spec.length) && ((nextLine < pcalEnd.line) || ((nextLine == pcalEnd.line) && (0 < pcalEnd.item)))) { _EL_     return new Position(nextLine,0); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static void writeListOfLongs(List list,boolean hasLongIDs,DataOutput out) throws IOException { _EL_   if (list == null) { _EL_     out.writeInt(-1); _EL_   } _EL_  else { _EL_     out.writeInt(list.size()); _EL_     out.writeBoolean(hasLongIDs); _EL_     for (Iterator it=list.iterator(); it.hasNext(); ) { _EL_       Long l=(Long)it.next(); _EL_       if (hasLongIDs) { _EL_         out.writeLong(l.longValue()); _EL_       } _EL_  else { _EL_         out.writeInt((int)l.longValue()); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public V remove(Object key){ _EL_   int hash=hash(key.hashCode()); _EL_   Segment<K,V> s=segmentForHash(hash); _EL_   return s == null ? null : s.remove(key,hash,null); _EL_ } _EL_ ', 'protected void reply(RequestContext context,String key,String message){ _EL_   try { _EL_     HttpServletRequest request=context.getRequest(); _EL_     String filename=request.getRemoteAddr(); _EL_     end(filename,key,message); _EL_   } _EL_  catch (  Exception e) { _EL_   } _EL_ } _EL_ ', 'private boolean isAckRequired(){ _EL_   return this.ackRequired; _EL_ } _EL_ ', 'public ConversionException(final Throwable cause){ _EL_   super(cause.getMessage()); _EL_   this.cause=cause; _EL_ } _EL_ ', 'public Builder withTokenizer(Class<? extends TokenizerFactory> factory,Map<String,String> params) throws IOException { _EL_   Objects.requireNonNull(factory,"Tokenizer factory may not be null"); _EL_   tokenizer.set(applyResourceLoader(newFactoryClassInstance(factory,applyDefaultParams(params)))); _EL_   componentsAdded=true; _EL_   return this; _EL_ } _EL_ ', 'protected void addResource(List defaults,String bundleName){ _EL_   ResourceBundle bundle=ResourceBundle.getBundle(bundleName); _EL_   for (Enumeration keys=bundle.getKeys(); keys.hasMoreElements(); ) { _EL_     String key=(String)keys.nextElement(); _EL_     defaults.add(key); _EL_     defaults.add(bundle.getObject(key)); _EL_   } _EL_ } _EL_ ', 'public void fireVetoableChange(String name,Object oldValue,Object newValue) throws PropertyVetoException { _EL_   super.fireVetoableChange(name,oldValue,newValue); _EL_   beanContextChildSupport.fireVetoableChange(name,oldValue,newValue); _EL_ } _EL_ ', 'public final int remainingCapacity(){ _EL_   return Math.max(0,capacity - cache.size()); _EL_ } _EL_ ', 'public void commit(IResource[] resources,String comment,boolean keepLocks,IProgressMonitor monitor) throws TeamException { _EL_   if (monitor == null) { _EL_     monitor=new NullProgressMonitor(); _EL_   } _EL_   Map table=getProviderMapping(resources); _EL_   Set keySet=table.keySet(); _EL_   monitor.beginTask("",keySet.size() * 1000); _EL_   monitor.setTaskName(Policy.bind("RepositoryManager.committing")); _EL_   Iterator iterator=keySet.iterator(); _EL_   while (iterator.hasNext()) { _EL_     IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000); _EL_     SVNTeamProvider provider=(SVNTeamProvider)iterator.next(); _EL_     List list=(List)table.get(provider); _EL_     IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]); _EL_     provider.checkin(providerResources,comment,keepLocks,IResource.DEPTH_INFINITE,subMonitor); _EL_   } _EL_ } _EL_ ', 'public boolean consumedGesture(){ _EL_   return reacted; _EL_ } _EL_ ', 'public void fireNeuronMoved(final Neuron moved){ _EL_   for (  NeuronListener listener : neuronListeners) { _EL_     listener.neuronMoved(new NetworkEvent<Neuron>(this,moved)); _EL_   } _EL_ } _EL_ ', "public static int inflate(byte[] previous,int previousLength,byte[] current,int currentLength,byte[] result){ _EL_   if (previous == null) { _EL_     System.arraycopy(current,0,result,0,currentLength); _EL_     return currentLength; _EL_   } _EL_   int length=0; _EL_   int start1=0; _EL_   int start2=0; _EL_   while (start1 < previousLength && start2 < currentLength) { _EL_     int end1=start1; _EL_     while (end1 < previousLength && previous[end1] != '\\t') { _EL_       end1++; _EL_     } _EL_     int end2=start2; _EL_     while (end2 < currentLength && current[end2] != '\\t') { _EL_       end2++; _EL_     } _EL_     if (current[start2] == '&' && end2 == start2 + 1) { _EL_       for (int i=start1; i < end1; i++)       result[length++]=previous[i]; _EL_     } _EL_  else { _EL_       for (int i=start2; i < end2; i++)       result[length++]=current[i]; _EL_     } _EL_     if (end2 < currentLength)     result[length++]='\\t'; _EL_     start1=end1 + 1; _EL_     start2=end2 + 1; _EL_   } _EL_   return length; _EL_ } _EL_ ", 'public String syllabify(String phoneString){ _EL_   LinkedList<String> phoneList=splitIntoAllophones(phoneString); _EL_   syllabify(phoneList); _EL_   StringBuilder sb=new StringBuilder(); _EL_   for (  String p : phoneList) { _EL_     if (sb.length() > 0)     sb.append(" "); _EL_     sb.append(p); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'public List<Entry> filter(List<Entry> points,double tolerance){ _EL_   if (tolerance <= 0)   return points; _EL_   keep=new boolean[points.size()]; _EL_ switch (mType) { _EL_ case DOUGLAS_PEUCKER: _EL_     return reduceWithDouglasPeuker(points,tolerance); _EL_ case NONE: _EL_   return points; _EL_ default : _EL_ return points; _EL_ } _EL_ } _EL_ ', 'public int search(String txt){ _EL_   int M=pat.length(); _EL_   int N=txt.length(); _EL_   int skip; _EL_   for (int i=0; i <= N - M; i+=skip) { _EL_     skip=0; _EL_     for (int j=M - 1; j >= 0; j--) { _EL_       if (pat.charAt(j) != txt.charAt(i + j)) { _EL_         skip=Math.max(1,j - right[txt.charAt(i + j)]); _EL_         break; _EL_       } _EL_     } _EL_     if (skip == 0)     return i; _EL_   } _EL_   return N; _EL_ } _EL_ ', '@Override public boolean wasSuccessful(){ _EL_   return isFinished() && getCurrentPoints() >= successThreashold; _EL_ } _EL_ ', 'public SGenItemProviderAdapterFactory(){ _EL_   supportedTypes.add(IEditingDomainItemProvider.class); _EL_   supportedTypes.add(IStructuredItemContentProvider.class); _EL_   supportedTypes.add(ITreeItemContentProvider.class); _EL_   supportedTypes.add(IItemLabelProvider.class); _EL_   supportedTypes.add(IItemPropertySource.class); _EL_ } _EL_ ', 'public Object pack(){ _EL_   if (collection) { _EL_     List l=(List)value; _EL_     if (Types.isArray(type)) { _EL_       Object[] o=(Object[])Array.newInstance(itemType,l.size()); _EL_       l.toArray(o); _EL_       return o; _EL_     } _EL_   } _EL_   return value; _EL_ } _EL_ ', '@Override public final void onHeatmapFailed(){ _EL_   updatePending=false; _EL_ } _EL_ ', 'protected synchronized void write(long offset,byte[] b) throws IOException { _EL_   if (byteBuffer != null) { _EL_     byteBuffer.position((int)offset); _EL_     byteBuffer.put(b); _EL_   } _EL_  else { _EL_     throw new IOException("Write failed, file " + getPath() + " not mapped for I/O"); _EL_   } _EL_ } _EL_ ', '@Override public void agg(Object newVal){ _EL_   if (newVal instanceof byte[]) { _EL_     byte[] values=(byte[])newVal; _EL_     ByteBuffer buffer=ByteBuffer.wrap(values); _EL_     buffer.rewind(); _EL_     while (buffer.hasRemaining()) { _EL_       valueSet.add(buffer.getInt()); _EL_     } _EL_     return; _EL_   } _EL_  else { _EL_     double value=new Double(newVal.toString()); _EL_     agg(value); _EL_   } _EL_ } _EL_ ', 'public void flush() throws IOException { _EL_   out.flush(); _EL_ } _EL_ ', 'private void loadSubmissions(){ _EL_   submissions.clear(); _EL_   String[] users=JPlagCentral.usersList(); _EL_   for (int i=0; i < users.length; i++) { _EL_     AccessStructure[] subm=JPlagCentral.listAccessStructures(users[i]); _EL_     if (subm != null && subm.length != 0) { _EL_       for (int j=0; j < subm.length; j++) { _EL_         submissions.add(subm[j]); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', '@SuppressWarnings("unused") public boolean onTouchEvent(MotionEvent event){ _EL_   try { _EL_     int pointerCount=multiTouchSupported ? (Integer)m_getPointerCount.invoke(event) : 1; _EL_     if (DEBUG)     Log.i("MultiTouch","Got here 1 - " + multiTouchSupported + " "+ mMode+ " "+ handleSingleTouchEvents+ " "+ pointerCount); _EL_     if (mMode == MODE_NOTHING && !handleSingleTouchEvents && pointerCount == 1)     return false; _EL_     if (DEBUG)     Log.i("MultiTouch","Got here 2"); _EL_     int action=event.getAction(); _EL_     int histLen=event.getHistorySize() / pointerCount; _EL_     for (int histIdx=0; histIdx <= histLen; histIdx++) { _EL_       boolean processingHist=histIdx < histLen; _EL_       if (!multiTouchSupported || pointerCount == 1) { _EL_         if (DEBUG)         Log.i("MultiTouch","Got here 3"); _EL_         xVals[0]=processingHist ? event.getHistoricalX(histIdx) : event.getX(); _EL_         yVals[0]=processingHist ? event.getHistoricalY(histIdx) : event.getY(); _EL_         pressureVals[0]=processingHist ? event.getHistoricalPressure(histIdx) : event.getPressure(); _EL_       } _EL_  else { _EL_         if (DEBUG)         Log.i("MultiTouch","Got here 4"); _EL_         int numPointers=Math.min(pointerCount,MAX_TOUCH_POINTS); _EL_         if (DEBUG && pointerCount > MAX_TOUCH_POINTS)         Log.i("MultiTouch","Got more pointers than MAX_TOUCH_POINTS"); _EL_         for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) { _EL_           int ptrId=(Integer)m_getPointerId.invoke(event,ptrIdx); _EL_           pointerIds[ptrIdx]=ptrId; _EL_           xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(event,ptrIdx,histIdx) : m_getX.invoke(event,ptrIdx)); _EL_           yVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(event,ptrIdx,histIdx) : m_getY.invoke(event,ptrIdx)); _EL_           pressureVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(event,ptrIdx,histIdx) : m_getPressure.invoke(event,ptrIdx)); _EL_         } _EL_       } _EL_       decodeTouchEvent(pointerCount,xVals,yVals,pressureVals,pointerIds,processingHist ? MotionEvent.ACTION_MOVE : action,processingHist ? true : action != MotionEvent.ACTION_UP && (action & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && action != MotionEvent.ACTION_CANCEL,processingHist ? event.getHistoricalEventTime(histIdx) : event.getEventTime()); _EL_     } _EL_     return true; _EL_   } _EL_  catch (  Exception e) { _EL_     Log.e("MultiTouchController","onTouchEvent() failed",e); _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public synchronized void writeTo(OutputStream out) throws IOException { _EL_   int remaining=count; _EL_   for (  byte[] buf : buffers) { _EL_     int c=Math.min(buf.length,remaining); _EL_     out.write(buf,0,c); _EL_     remaining-=c; _EL_     if (remaining == 0) { _EL_       break; _EL_     } _EL_   } _EL_ } _EL_ ', 'public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException { _EL_   try { _EL_     if (fDeclHandler != null) { _EL_       String publicId=identifier.getPublicId(); _EL_       String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId(); _EL_       fDeclHandler.externalEntityDecl(name,publicId,systemId); _EL_     } _EL_   } _EL_  catch (  SAXException e) { _EL_     throw new XNIException(e); _EL_   } _EL_ } _EL_ ', 'public boolean isBuiltinSoundAvailable(String soundIdentifier){ _EL_   return builtinSounds.containsKey(soundIdentifier); _EL_ } _EL_ ', 'public void put(ByteBuffer byteBuffer,int contentLength){ _EL_   if (contentLength > (bytes.length - this.contentLength)) { _EL_     throw new IllegalArgumentException("contentLength is too large"); _EL_   } _EL_   byteBuffer.get(bytes,this.contentLength,contentLength); _EL_   this.contentLength+=contentLength; _EL_ } _EL_ ', 'protected void parseGeometryString(){ _EL_   int i=0; _EL_   byte[] bytes=geometryString.getBytes(); _EL_   xgrav=new String(bytes,0,1); _EL_   for (i=2; i < bytes.length; i++) { _EL_     if ((bytes[i] == \'-\') || (bytes[i] == \'+\'))     break; _EL_   } _EL_   if (i == bytes.length)   return; _EL_   ygrav=(bytes[i] == \'-\') ? "-" : "+"; _EL_   xpos=Integer.parseInt(new String(bytes,1,i - 1)); _EL_   ++i; _EL_   ypos=Integer.parseInt(new String(bytes,i,bytes.length - i)); _EL_ } _EL_ ', 'protected boolean position(Projection proj){ _EL_   if (proj == null) { _EL_     logger.fine("OMRasterObject: null projection in position!"); _EL_     return false; _EL_   } _EL_   projWidth=proj.getWidth(); _EL_   projHeight=proj.getHeight(); _EL_ switch (renderType) { _EL_ case RENDERTYPE_LATLON: _EL_     if (!proj.isPlotable(lat,lon)) { _EL_       if (DEBUG) { _EL_         logger.fine("OMRasterObject: point is not plotable!"); _EL_       } _EL_       setNeedToReposition(true); _EL_       return false; _EL_     } _EL_   point1=(Point)proj.forward(lat,lon,new Point()); _EL_ break; _EL_ case RENDERTYPE_XY: _EL_ point1=new Point(x,y); _EL_ break; _EL_ case RENDERTYPE_OFFSET: _EL_ if (!proj.isPlotable(lat,lon)) { _EL_ if (DEBUG) { _EL_ logger.fine("OMRasterObject: point is not plotable!"); _EL_ } _EL_ setNeedToReposition(true); _EL_ return false; _EL_ } _EL_ point1=(Point)proj.forward(lat,lon,new Point()); _EL_ point1.x+=x; _EL_ point1.y+=y; _EL_ break; _EL_ case RENDERTYPE_UNKNOWN: _EL_ if (DEBUG) { _EL_ logger.fine("OMRasterObject.position(): ignoring unknown rendertype, wingin\' it"); _EL_ } _EL_ if (lat == 0 && lon == 0) { _EL_ if (x == 0 && y == 0) { _EL_ if (DEBUG) { _EL_ logger.fine("OMRasterObject.position(): Not enough info in object to place it reasonably."); _EL_ } _EL_ point1=new Point(-width,-height); _EL_ point2=new Point(0,0); _EL_ return false; _EL_ } _EL_  else { _EL_ point1=new Point(x,y); _EL_ } _EL_ } _EL_  else { _EL_ if (!proj.isPlotable(lat,lon)) { _EL_ logger.fine("OMRasterObject: point is not plotable!"); _EL_ return false; _EL_ } _EL_ point1=(Point)proj.forward(lat,lon,new Point()); _EL_ } _EL_ break; _EL_ } _EL_ point2=new Point(0,0); _EL_ point2.x=point1.x + width; _EL_ point2.y=point1.y + height; _EL_ setNeedToReposition(false); _EL_ return true; _EL_ } _EL_ ', 'private void remeasure(int width,int height){ _EL_   MAX_UNEXPANDED_ALLDAY_HEIGHT=(int)(MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 4); _EL_   MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.min(MAX_UNEXPANDED_ALLDAY_HEIGHT,height / 6); _EL_   MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.max(MAX_UNEXPANDED_ALLDAY_HEIGHT,(int)MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 2); _EL_   mMaxUnexpandedAlldayEventCount=(int)(MAX_UNEXPANDED_ALLDAY_HEIGHT / MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT); _EL_   for (int day=0; day < mNumDays; day++) { _EL_     mEarliestStartHour[day]=25; _EL_     mHasAllDayEvent[day]=false; _EL_   } _EL_   int maxAllDayEvents=mMaxAlldayEvents; _EL_   mMinCellHeight=Math.max((height - DAY_HEADER_HEIGHT) / 24,(int)MIN_EVENT_HEIGHT); _EL_   if (mCellHeight < mMinCellHeight) { _EL_     mCellHeight=mMinCellHeight; _EL_   } _EL_   mFirstCell=DAY_HEADER_HEIGHT; _EL_   int allDayHeight=0; _EL_   if (maxAllDayEvents > 0) { _EL_     int maxAllAllDayHeight=height - DAY_HEADER_HEIGHT - MIN_HOURS_HEIGHT; _EL_     if (maxAllDayEvents == 1) { _EL_       allDayHeight=SINGLE_ALLDAY_HEIGHT; _EL_     } _EL_  else     if (maxAllDayEvents <= mMaxUnexpandedAlldayEventCount) { _EL_       allDayHeight=maxAllDayEvents * MAX_HEIGHT_OF_ONE_ALLDAY_EVENT; _EL_       if (allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) { _EL_         allDayHeight=MAX_UNEXPANDED_ALLDAY_HEIGHT; _EL_       } _EL_     } _EL_  else { _EL_       if (mAnimateDayHeight != 0) { _EL_         allDayHeight=Math.max(mAnimateDayHeight,MAX_UNEXPANDED_ALLDAY_HEIGHT); _EL_       } _EL_  else { _EL_         allDayHeight=(int)(maxAllDayEvents * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT); _EL_         if (!mShowAllAllDayEvents && allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) { _EL_           allDayHeight=(int)(mMaxUnexpandedAlldayEventCount * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT); _EL_         } _EL_  else         if (allDayHeight > maxAllAllDayHeight) { _EL_           allDayHeight=maxAllAllDayHeight; _EL_         } _EL_       } _EL_     } _EL_     mFirstCell=DAY_HEADER_HEIGHT + allDayHeight + ALLDAY_TOP_MARGIN; _EL_   } _EL_  else { _EL_     mSelectionAllday=false; _EL_   } _EL_   mAlldayHeight=allDayHeight; _EL_   mGridAreaHeight=height - mFirstCell; _EL_   int allDayIconWidth=mExpandAlldayDrawable.getIntrinsicWidth(); _EL_   mExpandAllDayRect.left=Math.max((mHoursWidth - allDayIconWidth) / 2,EVENT_ALL_DAY_TEXT_LEFT_MARGIN); _EL_   mExpandAllDayRect.right=Math.min(mExpandAllDayRect.left + allDayIconWidth,mHoursWidth - EVENT_ALL_DAY_TEXT_RIGHT_MARGIN); _EL_   mExpandAllDayRect.bottom=mFirstCell - EXPAND_ALL_DAY_BOTTOM_MARGIN; _EL_   mExpandAllDayRect.top=mExpandAllDayRect.bottom - mExpandAlldayDrawable.getIntrinsicHeight(); _EL_   mNumHours=mGridAreaHeight / (mCellHeight + HOUR_GAP); _EL_   mEventGeometry.setHourHeight(mCellHeight); _EL_   final long minimumDurationMillis=(long)(MIN_EVENT_HEIGHT * DateUtils.MINUTE_IN_MILLIS / (mCellHeight / 60.0f)); _EL_   Event.computePositions(mEvents,minimumDurationMillis); _EL_   mMaxViewStartY=HOUR_GAP + 24 * (mCellHeight + HOUR_GAP) - mGridAreaHeight; _EL_   if (DEBUG) { _EL_     Log.e(TAG,"mViewStartY: " + mViewStartY); _EL_     Log.e(TAG,"mMaxViewStartY: " + mMaxViewStartY); _EL_   } _EL_   if (mViewStartY > mMaxViewStartY) { _EL_     mViewStartY=mMaxViewStartY; _EL_     computeFirstHour(); _EL_   } _EL_   if (mFirstHour == -1) { _EL_     initFirstHour(); _EL_     mFirstHourOffset=0; _EL_   } _EL_   if (mFirstHourOffset >= mCellHeight + HOUR_GAP) { _EL_     mFirstHourOffset=mCellHeight + HOUR_GAP - 1; _EL_   } _EL_   mViewStartY=mFirstHour * (mCellHeight + HOUR_GAP) - mFirstHourOffset; _EL_   final int eventAreaWidth=mNumDays * (mCellWidth + DAY_GAP); _EL_   if (mSelectedEvent != null && mLastPopupEventID != mSelectedEvent.id) { _EL_     mPopup.dismiss(); _EL_   } _EL_   mPopup.setWidth(eventAreaWidth - 20); _EL_   mPopup.setHeight(WindowManager.LayoutParams.WRAP_CONTENT); _EL_ } _EL_ ', '@Override public void writeExternal(ObjectOutput out) throws IOException { _EL_   super.writeExternal(out); _EL_   out.writeBoolean(isLeaf); _EL_   out.writeInt(numEntries); _EL_ } _EL_ ', 'public void delete() throws IOException { _EL_   close(); _EL_   Util.deleteContents(directory); _EL_ } _EL_ ', 'private static boolean isMergedSegment(String segName){ _EL_   if (segName.contains(".")) { _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void updateEnd(Logger log){ _EL_   m_instanceCount++; _EL_   m_sampleCount++; _EL_   double end=System.currentTimeMillis(); _EL_   double temp=end - m_updateStart; _EL_   m_cumulativeTime+=temp; _EL_   boolean toFastToMeasure=false; _EL_   if ((end - m_startTime) >= m_sampleTime) { _EL_     computeUpdate(end); _EL_     if (log != null) { _EL_       log.statusMessage(m_statusMessagePrefix + "Processed " + m_instanceCount+ " insts @ "+ m_avInstsPerSec / m_numSamples + " insts/sec" + (toFastToMeasure ? "*" : "")); _EL_     } _EL_     m_sampleCount=0; _EL_     m_cumulativeTime=0; _EL_     m_startTime=System.currentTimeMillis(); _EL_   } _EL_ } _EL_ ', 'public void contentsChanged(ListDataEvent e){ _EL_   Object oldSelection=selectedItemReminder; _EL_   Object newSelection=dataModel.getSelectedItem(); _EL_   if (oldSelection == null || !oldSelection.equals(newSelection)) { _EL_     selectedItemChanged(); _EL_     if (!selectingItem) { _EL_       fireActionEvent(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void doWindowOpen(){ _EL_   doConnect(); _EL_ } _EL_ ', '@Override public char next(){ _EL_   ++docPos; _EL_   if (docPos < segmentEnd || segmentEnd >= doc.getLength()) { _EL_     return text.next(); _EL_   } _EL_   try { _EL_     doc.getText(segmentEnd,doc.getLength() - segmentEnd,text); _EL_   } _EL_  catch (  BadLocationException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_   segmentEnd+=text.count; _EL_   return text.current(); _EL_ } _EL_ ', 'private void adjustRowHeights(JTable table){ _EL_   for (int row=0; row < table.getRowCount(); row++) { _EL_     int rowHeight=table.getRowHeight(); _EL_     for (int column=0; column < table.getColumnCount(); column++) { _EL_       Component comp=table.prepareRenderer(table.getCellRenderer(row,column),row,column); _EL_       rowHeight=Math.max(rowHeight,comp.getPreferredSize().height); _EL_     } _EL_     table.setRowHeight(row,rowHeight); _EL_   } _EL_ } _EL_ ', 'public static boolean isVolumeFullCopySource(Volume volume,DbClient dbClient){ _EL_   boolean isFullCopySource=false; _EL_   StringSet fullCopyIds=volume.getFullCopies(); _EL_   if ((fullCopyIds != null) && (!fullCopyIds.isEmpty())) { _EL_     Iterator<String> fullCopyIdsIter=fullCopyIds.iterator(); _EL_     while (fullCopyIdsIter.hasNext()) { _EL_       URI fullCopyURI=URI.create(fullCopyIdsIter.next()); _EL_       Volume fullCopyVolume=dbClient.queryObject(Volume.class,fullCopyURI); _EL_       if ((fullCopyVolume != null) && (!fullCopyVolume.getInactive())) { _EL_         isFullCopySource=true; _EL_       } _EL_     } _EL_   } _EL_   return isFullCopySource; _EL_ } _EL_ ', 'public Endpoint(URI endpointUrl,SecurityMode... modes){ _EL_   if (modes == null || endpointUrl == null)   throw new IllegalArgumentException("null arg"); _EL_   for (  SecurityMode m : modes) { _EL_     if (m == null)     throw new IllegalArgumentException("null arg"); _EL_     hash=13 * hash + m.hashCode(); _EL_   } _EL_   this.endpointUrl=endpointUrl.toString(); _EL_   this.modes=modes; _EL_   this.endpointConfiguration=EndpointConfiguration.defaults(); _EL_   hash=13 * hash + endpointUrl.hashCode(); _EL_ } _EL_ ', 'private static boolean isOptimizableForDescendantIterator(Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException { _EL_   int stepType; _EL_   int stepCount=0; _EL_   boolean foundDorDS=false; _EL_   boolean foundSelf=false; _EL_   boolean foundDS=false; _EL_   int nodeTestType=OpCodes.NODETYPE_NODE; _EL_   while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) { _EL_     if (nodeTestType != OpCodes.NODETYPE_NODE && nodeTestType != OpCodes.NODETYPE_ROOT)     return false; _EL_     stepCount++; _EL_     if (stepCount > 3)     return false; _EL_     boolean mightBeProximate=mightBeProximate(compiler,stepOpCodePos,stepType); _EL_     if (mightBeProximate)     return false; _EL_ switch (stepType) { _EL_ case OpCodes.FROM_FOLLOWING: _EL_ case OpCodes.FROM_FOLLOWING_SIBLINGS: _EL_ case OpCodes.FROM_PRECEDING: _EL_ case OpCodes.FROM_PRECEDING_SIBLINGS: _EL_ case OpCodes.FROM_PARENT: _EL_ case OpCodes.OP_VARIABLE: _EL_ case OpCodes.OP_EXTFUNCTION: _EL_ case OpCodes.OP_FUNCTION: _EL_ case OpCodes.OP_GROUP: _EL_ case OpCodes.FROM_NAMESPACE: _EL_ case OpCodes.FROM_ANCESTORS: _EL_ case OpCodes.FROM_ANCESTORS_OR_SELF: _EL_ case OpCodes.FROM_ATTRIBUTES: _EL_ case OpCodes.MATCH_ATTRIBUTE: _EL_ case OpCodes.MATCH_ANY_ANCESTOR: _EL_ case OpCodes.MATCH_IMMEDIATE_ANCESTOR: _EL_       return false; _EL_ case OpCodes.FROM_ROOT: _EL_     if (1 != stepCount)     return false; _EL_   break; _EL_ case OpCodes.FROM_CHILDREN: _EL_ if (!foundDS && !(foundDorDS && foundSelf)) return false; _EL_ break; _EL_ case OpCodes.FROM_DESCENDANTS_OR_SELF: _EL_ foundDS=true; _EL_ case OpCodes.FROM_DESCENDANTS: _EL_ if (3 == stepCount) return false; _EL_ foundDorDS=true; _EL_ break; _EL_ case OpCodes.FROM_SELF: _EL_ if (1 != stepCount) return false; _EL_ foundSelf=true; _EL_ break; _EL_ default : _EL_ throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)})); _EL_ } _EL_ nodeTestType=compiler.getStepTestType(stepOpCodePos); _EL_ int nextStepOpCodePos=compiler.getNextStepPos(stepOpCodePos); _EL_ if (nextStepOpCodePos < 0) break; _EL_ if (OpCodes.ENDOP != compiler.getOp(nextStepOpCodePos)) { _EL_ if (compiler.countPredicates(stepOpCodePos) > 0) { _EL_ return false; _EL_ } _EL_ } _EL_ stepOpCodePos=nextStepOpCodePos; _EL_ } _EL_ return true; _EL_ } _EL_ ', 'public void fill_ellipse_arr(PlaEllipse[] p_ellipse_arr,Graphics p_g,Color p_color,double p_translucency_factor){ _EL_   if (p_color == null)   return; _EL_   if (p_ellipse_arr.length <= 0)   return; _EL_   GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD); _EL_   for (  PlaEllipse curr_ellipse : p_ellipse_arr) { _EL_     Point2D center=coordinate_transform.board_to_screen(curr_ellipse.center); _EL_     double bigger_radius=coordinate_transform.board_to_screen(curr_ellipse.bigger_radius); _EL_     if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),bigger_radius)) { _EL_       continue; _EL_     } _EL_     double smaller_radius=coordinate_transform.board_to_screen(curr_ellipse.smaller_radius); _EL_     Ellipse2D draw_ellipse=new Ellipse2D.Double(center.getX() - bigger_radius,center.getY() - smaller_radius,2 * bigger_radius,2 * smaller_radius); _EL_     double rotation=coordinate_transform.board_to_screen_angle(curr_ellipse.rotation); _EL_     AffineTransform affine_transform=new AffineTransform(); _EL_     affine_transform.rotate(rotation,center.getX(),center.getY()); _EL_     Shape rotated_ellipse=affine_transform.createTransformedShape(draw_ellipse); _EL_     draw_path.append(rotated_ellipse,false); _EL_   } _EL_   Graphics2D g2=(Graphics2D)p_g; _EL_   g2.setColor(p_color); _EL_   set_translucency(g2,p_translucency_factor); _EL_   g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON); _EL_   g2.fill(draw_path); _EL_ } _EL_ ', 'public void addTotals(Info_Column[] layout){ _EL_   addTotals((ColumnInfo[])layout); _EL_ } _EL_ ', 'public void addTerm(SplitCondition condition){ _EL_   terms.add(condition); _EL_ } _EL_ ', 'private void release(ByteArray byteArray){ _EL_ synchronized (syncRoot) { _EL_     if (availableByteArrays.size() >= maxAvailableArraysCount) { _EL_       return; _EL_     } _EL_     if (!availableByteArrays.contains(byteArray)) { _EL_       availableByteArrays.add(byteArray); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void configs(SwtPlatform... platforms){ _EL_   configs(Arrays.asList(platforms)); _EL_ } _EL_ ', '@Override public ShapeTileSimplex to_Simplex(){ _EL_   if (is_empty())   return ShapeTileSimplex.EMPTY; _EL_   ArrayList<PlaLineInt> line_arr=new ArrayList<PlaLineInt>(4); _EL_   line_arr.add(new PlaLineInt(box_ll,PlaDirection.RIGHT)); _EL_   line_arr.add(new PlaLineInt(box_ur,PlaDirection.UP)); _EL_   line_arr.add(new PlaLineInt(box_ur,PlaDirection.LEFT)); _EL_   line_arr.add(new PlaLineInt(box_ll,PlaDirection.DOWN)); _EL_   return new ShapeTileSimplex(line_arr); _EL_ } _EL_ ', 'protected boolean updateAttachmentPoint(){ _EL_   boolean moved=false; _EL_   this.oldAPs=attachmentPoints; _EL_   if (attachmentPoints == null || attachmentPoints.isEmpty())   return false; _EL_   List<AttachmentPoint> apList=new ArrayList<AttachmentPoint>(); _EL_   if (attachmentPoints != null)   apList.addAll(attachmentPoints); _EL_   Map<Long,AttachmentPoint> newMap=getAPMap(apList); _EL_   if (newMap == null || newMap.size() != apList.size()) { _EL_     moved=true; _EL_   } _EL_   if (moved) { _EL_     log.info("updateAttachmentPoint: ap {}  newmap {} ",attachmentPoints,newMap); _EL_     List<AttachmentPoint> newAPList=new ArrayList<AttachmentPoint>(); _EL_     if (newMap != null)     newAPList.addAll(newMap.values()); _EL_     this.attachmentPoints=newAPList; _EL_   } _EL_   return moved; _EL_ } _EL_ ', 'public static String formatDps(final double dps){ _EL_   return "(" + String.format("%.2f",dps) + " dps)"; _EL_ } _EL_ ', 'public void add(T item){ _EL_ synchronized (lock) { _EL_     items.add(identifiedItemFactory.create(item)); _EL_   } _EL_   notifyDataSetChanged(); _EL_ } _EL_ ', 'public final double sampleMax(){ _EL_   long max=_max.getAndSet(0); _EL_   return _scale * max; _EL_ } _EL_ ', 'public static String encodeToString(byte[] src){ _EL_   if (src == null) { _EL_     return null; _EL_   } _EL_   if (src.length == 0) { _EL_     return ""; _EL_   } _EL_   String result; _EL_   try { _EL_     result=new String(delegate.encode(src),DEFAULT_CHARSET.displayName()); _EL_   } _EL_  catch (  UnsupportedEncodingException e) { _EL_     throw new IllegalStateException(e); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public boolean equals(Object o){ _EL_   if (o instanceof CoverageIntVdt) { _EL_     CoverageIntVdt civ=(CoverageIntVdt)o; _EL_     return ((attribute == civ.attribute) && (value == civ.value)); _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'private static String doGetPath(String filename,int separatorAdd){ _EL_   if (filename == null) { _EL_     return null; _EL_   } _EL_   int prefix=getPrefixLength(filename); _EL_   if (prefix < 0) { _EL_     return null; _EL_   } _EL_   int index=indexOfLastSeparator(filename); _EL_   int endIndex=index + separatorAdd; _EL_   if (prefix >= filename.length() || index < 0 || prefix >= endIndex) { _EL_     return ""; _EL_   } _EL_   return filename.substring(prefix,endIndex); _EL_ } _EL_ ', 'private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException { _EL_   s.defaultReadObject(); _EL_   init(getName(),getMask(actions)); _EL_ } _EL_ ', '@Override public void update(List<EnvVar> dataList){ _EL_   envVarList.clear(); _EL_   if (dataList == null) { _EL_     for (    EnvVar envVar : builtInEnvVarMap.values()) { _EL_       envVarList.add(envVar); _EL_     } _EL_   } _EL_  else { _EL_     for (    EnvVar envVar : dataList) { _EL_       if (builtInEnvVarMap.containsKey(envVar.getName())) { _EL_         envVarList.add(new EnvVar(envVar,true)); _EL_       } _EL_  else { _EL_         envVarList.add(new EnvVar(envVar,false)); _EL_       } _EL_     } _EL_   } _EL_   setEnvironmentVariableValues(); _EL_ } _EL_ ', 'protected void notifyTimestampsToGateways(EntryEventImpl event){ _EL_   VersionTagHolder updateTimeStampEvent=new VersionTagHolder(event.getVersionTag()); _EL_   updateTimeStampEvent.setOperation(Operation.UPDATE_VERSION_STAMP); _EL_   updateTimeStampEvent.setKeyInfo(event.getKeyInfo()); _EL_   updateTimeStampEvent.setGenerateCallbacks(false); _EL_   updateTimeStampEvent.distributedMember=event.getDistributedMember(); _EL_   updateTimeStampEvent.setNewEventId(getSystem()); _EL_   if (event.getRegion() instanceof BucketRegion) { _EL_     BucketRegion br=(BucketRegion)event.getRegion(); _EL_     PartitionedRegion pr=br.getPartitionedRegion(); _EL_     updateTimeStampEvent.setRegion(pr); _EL_     if (pr.isParallelWanEnabled()) { _EL_       br.handleWANEvent(updateTimeStampEvent); _EL_     } _EL_     if (pr.isInitialized()) { _EL_       pr.notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeStampEvent); _EL_     } _EL_   } _EL_  else { _EL_     updateTimeStampEvent.setRegion(event.getRegion()); _EL_     notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeStampEvent); _EL_   } _EL_ } _EL_ ', 'public String asString() throws IOException { _EL_   long len=getContentLength(); _EL_   ByteArrayOutputStream buf; _EL_   if (0 < len) { _EL_     buf=new ByteArrayOutputStream((int)len); _EL_   } _EL_  else { _EL_     buf=new ByteArrayOutputStream(); _EL_   } _EL_   writeTo(buf); _EL_   return decode(buf.toByteArray(),getCharacterEncoding()); _EL_ } _EL_ ', 'public static void scaleRectAboutCenter(Rect r,float scale){ _EL_   if (scale != 1.0f) { _EL_     int cx=r.centerX(); _EL_     int cy=r.centerY(); _EL_     r.offset(-cx,-cy); _EL_     r.left=(int)(r.left * scale + 0.5f); _EL_     r.top=(int)(r.top * scale + 0.5f); _EL_     r.right=(int)(r.right * scale + 0.5f); _EL_     r.bottom=(int)(r.bottom * scale + 0.5f); _EL_     r.offset(cx,cy); _EL_   } _EL_ } _EL_ ', 'public static boolean isConnected(NetType netType,NetworkInfo networkInfo){ _EL_   if (netType == NetType.Any && networkInfo != null && isConnected(networkInfo))   return true; _EL_  else   if (netType == NetType.Wifi && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI && isConnected(networkInfo))   return true; _EL_  else   if (netType == NetType.Mobile && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_MOBILE && isConnected(networkInfo))   return true; _EL_   return false; _EL_ } _EL_ ', 'public String text(){ _EL_   StringBuilder sb=new StringBuilder(); _EL_   for (  Node node : nodes) { _EL_     sb.append(node.getTextContent()); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'public InvitationStatus waitInvitationAnswer(){ _EL_   return waitInvitationAnswer(mRingingPeriod); _EL_ } _EL_ ', 'public static void describeShapeDetail(Shape shape,double flattening){ _EL_   PathIterator pi2=shape.getPathIterator(null); _EL_   FlatteningPathIterator pi=new FlatteningPathIterator(pi2,flattening); _EL_   double[] coords=new double[6]; _EL_   int pointCount=0; _EL_   Debug.output(" -- start describeShapeDetail with flattening[" + flattening + "]"); _EL_   while (!pi.isDone()) { _EL_     int type=pi.currentSegment(coords); _EL_     Debug.output(" Shape point [" + type + "] ("+ (pointCount++)+ ") "+ coords[0]+ ", "+ coords[1]); _EL_     pi.next(); _EL_   } _EL_   Debug.output(" -- end (" + pointCount + ")"); _EL_ } _EL_ ', 'void onMoved(){ _EL_   double diff=System.currentTimeMillis() - timeStamp; _EL_   timeStamp=0; _EL_   if (diff > DISCARD_THRESHOLD) { _EL_     return; _EL_   } _EL_   double recentJitter=0; _EL_   double sum=0.0; _EL_   for (int i=0; i < VECTOR_LENGTH; i++) { _EL_     double old=times[i]; _EL_     double avg=(diff + old) / 2; _EL_     recentJitter+=Math.abs(old - diff); _EL_     times[i]=avg; _EL_     diff=old; _EL_     sum+=avg; _EL_   } _EL_   recentJitter/=8; _EL_   jitter=(jitter + 2.0 * Math.max(jitter,recentJitter) + recentJitter) / 4.0; _EL_   prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jitter); _EL_   WtWindowManager wm=WtWindowManager.getInstance(); _EL_   wm.setProperty(SPEED_PROPERTY,Double.toString(prediction)); _EL_   wm.setProperty(JITTER_PROPERTY,Double.toString(jitter)); _EL_ } _EL_ ', 'private void verifyTimestamp(X509Certificate cert) throws CertPathValidatorException { _EL_   String msg="timestamp"; _EL_   if (debug != null)   debug.println("---checking " + msg + ":"+ date.toString()+ "..."); _EL_   try { _EL_     cert.checkValidity(date); _EL_   } _EL_  catch (  CertificateExpiredException e) { _EL_     throw new CertPathValidatorException(msg + " check failed",e,null,-1,BasicReason.EXPIRED); _EL_   } _EL_ catch (  CertificateNotYetValidException e) { _EL_     throw new CertPathValidatorException(msg + " check failed",e,null,-1,BasicReason.NOT_YET_VALID); _EL_   } _EL_   if (debug != null)   debug.println(msg + " verified."); _EL_ } _EL_ ', 'private Integer countFragmentFilteredPages(List<String> templateFragments,boolean whitelist) throws WikiApiException { _EL_   try { _EL_     int count=0; _EL_     PreparedStatement statement=null; _EL_     ResultSet result=null; _EL_     try { _EL_       StringBuffer sqlString=new StringBuffer(); _EL_       StringBuffer subconditions=new StringBuffer(); _EL_       sqlString.append("SELECT distinct(count(*)) FROM " + GeneratorConstants.TABLE_TPLID_TPLNAME + " as tpl, "+ GeneratorConstants.TABLE_TPLID_PAGEID+ " AS p WHERE tpl.templateId = p.templateId "+ (whitelist ? "AND" : "AND NOT")+ " ("); _EL_       for (      @SuppressWarnings("unused") String fragment : templateFragments) { _EL_         if (subconditions.length() != 0) { _EL_           subconditions.append("OR "); _EL_         } _EL_         subconditions.append("tpl.templateName LIKE ?"); _EL_       } _EL_       sqlString.append(subconditions); _EL_       sqlString.append(")"); _EL_       statement=connection.prepareStatement(sqlString.toString()); _EL_       int curIdx=1; _EL_       for (      String fragment : templateFragments) { _EL_         fragment=fragment.toLowerCase(); _EL_         fragment=fragment.trim(); _EL_         fragment=fragment.replaceAll(" ","_"); _EL_         statement.setString(curIdx++,fragment + "%"); _EL_       } _EL_       result=execute(statement); _EL_       if (result == null) { _EL_         return 0; _EL_       } _EL_       if (result.next()) { _EL_         count=result.getInt(1); _EL_       } _EL_     } _EL_   finally { _EL_       if (statement != null) { _EL_         statement.close(); _EL_       } _EL_       if (result != null) { _EL_         result.close(); _EL_       } _EL_     } _EL_     return count; _EL_   } _EL_  catch (  Exception e) { _EL_     throw new WikiApiException(e); _EL_   } _EL_ } _EL_ ', 'private static Bitmap transform(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){ _EL_   Log.i(TAG,"transform --1--"); _EL_   boolean scaleUp=(options & 0x1) != 0; _EL_   boolean recycle=(options & 0x2) != 0; _EL_   int deltaX=source.getWidth() - targetWidth; _EL_   int deltaY=source.getHeight() - targetHeight; _EL_   if (!scaleUp && (deltaX < 0 || deltaY < 0)) { _EL_     Log.i(TAG,"transform --2--"); _EL_     Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888); _EL_     Canvas c=new Canvas(b2); _EL_     int deltaXHalf=Math.max(0,deltaX / 2); _EL_     int deltaYHalf=Math.max(0,deltaY / 2); _EL_     Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight())); _EL_     int dstX=(targetWidth - src.width()) / 2; _EL_     int dstY=(targetHeight - src.height()) / 2; _EL_     Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY); _EL_     c.drawBitmap(source,src,dst,null); _EL_     if (recycle) { _EL_       source.recycle(); _EL_     } _EL_     c.setBitmap(null); _EL_     Log.i(TAG,"transform --3--"); _EL_     return b2; _EL_   } _EL_   float bitmapWidthF=source.getWidth(); _EL_   float bitmapHeightF=source.getHeight(); _EL_   Log.i(TAG,"bitmapWidthF:" + bitmapWidthF + ",bitmapHeightF:"+ bitmapHeightF); _EL_   float bitmapAspect=bitmapWidthF / bitmapHeightF; _EL_   float viewAspect=(float)targetWidth / targetHeight; _EL_   Log.i(TAG,"targetWidth:" + targetWidth + ",targetHeight:"+ targetHeight); _EL_   if (bitmapAspect > viewAspect) { _EL_     float scale=targetHeight / bitmapHeightF; _EL_     if (scale < .9F || scale > 1F) { _EL_       scaler.setScale(scale,scale); _EL_     } _EL_  else { _EL_       scaler=null; _EL_     } _EL_   } _EL_  else { _EL_     float scale=targetWidth / bitmapWidthF; _EL_     if (scale < .9F || scale > 1F) { _EL_       scaler.setScale(scale,scale); _EL_     } _EL_  else { _EL_       scaler=null; _EL_     } _EL_   } _EL_   Bitmap b1; _EL_   if (scaler != null) { _EL_     Log.i(TAG,"transform --3.1--"); _EL_     b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true); _EL_   } _EL_  else { _EL_     Log.i(TAG,"transform --3.2--"); _EL_     b1=source; _EL_   } _EL_   if (recycle && b1 != source) { _EL_     Log.i(TAG,"transform --4--"); _EL_     source.recycle(); _EL_   } _EL_   int dx1=Math.max(0,b1.getWidth() - targetWidth); _EL_   int dy1=Math.max(0,b1.getHeight() - targetHeight); _EL_   Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight); _EL_   if (b2 != b1) { _EL_     if (recycle || b1 != source) { _EL_       Log.i(TAG,"transform --5--"); _EL_       b1.recycle(); _EL_     } _EL_   } _EL_   Log.i(TAG,"transform --6--"); _EL_   if (b2 == null) { _EL_     Log.i(TAG,"transform --7--"); _EL_   } _EL_   return b2; _EL_ } _EL_ ', 'private String fetchCharsetFromCache(Client client,Locale loc){ _EL_   Map cCache=(Map)charsetCache.get(client.getClientType()); _EL_   String val=null; _EL_   if (cCache != null) { _EL_     val=(String)cCache.get(loc); _EL_   } _EL_   return val; _EL_ } _EL_ ', 'public Shape paintLayer(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c,View view){ _EL_   g.setColor(getColor()); _EL_   if (offs0 == view.getStartOffset() && offs1 == view.getEndOffset()) { _EL_     Rectangle alloc; _EL_     if (bounds instanceof Rectangle)     alloc=(Rectangle)bounds; _EL_  else     alloc=bounds.getBounds(); _EL_     paintSquiggle(g,alloc); _EL_     return alloc; _EL_   } _EL_   try { _EL_     Shape shape=view.modelToView(offs0,Position.Bias.Forward,offs1,Position.Bias.Backward,bounds); _EL_     Rectangle r=(shape instanceof Rectangle) ? (Rectangle)shape : shape.getBounds(); _EL_     paintSquiggle(g,r); _EL_     return r; _EL_   } _EL_  catch (  BadLocationException e) { _EL_     e.printStackTrace(); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static List<String> readToList(Reader r) throws IOException { _EL_   try (BufferedReader in=new BufferedReader(r)){ _EL_     List<String> l=new ArrayList<>(); _EL_     String line=null; _EL_     while ((line=in.readLine()) != null)     l.add(line); _EL_     return Collections.unmodifiableList(l); _EL_   } _EL_  } _EL_ ', 'protected static boolean isCglibGetCallbacks(AnnotatedMethod am){ _EL_   Class<?> rt=am.getRawType(); _EL_   if (rt == null || !rt.isArray()) { _EL_     return false; _EL_   } _EL_   Class<?> compType=rt.getComponentType(); _EL_   Package pkg=compType.getPackage(); _EL_   if (pkg != null) { _EL_     String pname=pkg.getName(); _EL_     if (pname.startsWith("net.sf.cglib") || pname.startsWith("org.hibernate.repackage.cglib")) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public boolean isModified(){ _EL_ synchronized (this) { _EL_     if (_isChecking || _isModified) { _EL_       return _isModified; _EL_     } _EL_     _isChecking=true; _EL_   } _EL_   try { _EL_     long now; _EL_     now=CurrentTime.currentTime(); _EL_     if (now < _lastCheckTime + _checkInterval)     return _isModified; _EL_     _lastCheckTime=now; _EL_     for (int i=_dependencyList.size() - 1; i >= 0; i--) { _EL_       Dependency dependency=_dependencyList.get(i); _EL_       if (dependency.isModified()) { _EL_         dependency.logModified(log()); _EL_         _isModified=true; _EL_         return _isModified; _EL_       } _EL_     } _EL_     return _isModified; _EL_   } _EL_   finally { _EL_     _isChecking=false; _EL_   } _EL_ } _EL_ ', 'public void addMetaObject(MetaObject object){ _EL_   for (int k=0; k < MetaObjects.size(); ++k) { _EL_     if (MetaObjects.get(k) == null) { _EL_       MetaObjects.set(k,object); _EL_       return; _EL_     } _EL_   } _EL_   MetaObjects.add(object); _EL_ } _EL_ ', 'public boolean removeArg(final BOp arg){ _EL_   if (arg == null)   throw new IllegalArgumentException(); _EL_   if (arg == this)   throw new IllegalArgumentException(); _EL_   if (args.remove(arg)) { _EL_     mutation(); _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void createNote(Note note){ _EL_   SQLiteDatabase db=getWritableDatabase(); _EL_   String spannableAsHtml=Html.toHtml(note.getSpannable()); _EL_   String date=dt.format(new Date()); _EL_   ContentValues values=new ContentValues(); _EL_   values.put(KEY_SPANNABLE_NOTE,spannableAsHtml); _EL_   values.put(KEY_NOTE_TITLE,note.getTitle()); _EL_   values.put(KEY_IMAGE,BitmapConverter.getBytes(note.getImage())); _EL_   values.put(KEY_DATE_UPDATED,date); _EL_   db.insert(TABLE_NOTES,null,values); _EL_   db.close(); _EL_ } _EL_ ', 'private void resetStateForGridTop(){ _EL_   final int colCount=mColCount; _EL_   if (mItemTops == null || mItemTops.length != colCount) { _EL_     mItemTops=new int[colCount]; _EL_     mItemBottoms=new int[colCount]; _EL_   } _EL_   final int top=getPaddingTop(); _EL_   Arrays.fill(mItemTops,top); _EL_   Arrays.fill(mItemBottoms,top); _EL_   mFirstPosition=0; _EL_   if (mRestoreOffsets != null)   Arrays.fill(mRestoreOffsets,0); _EL_ } _EL_ ', 'protected boolean isWFXMLChar(String chardata,Character refInvalidChar){ _EL_   if (chardata == null || (chardata.length() == 0)) { _EL_     return true; _EL_   } _EL_   char[] dataarray=chardata.toCharArray(); _EL_   int datalength=dataarray.length; _EL_   if (fIsXMLVersion11) { _EL_     int i=0; _EL_     while (i < datalength) { _EL_       if (XML11Char.isXML11Invalid(dataarray[i++])) { _EL_         char ch=dataarray[i - 1]; _EL_         if (XMLChar.isHighSurrogate(ch) && i < datalength) { _EL_           char ch2=dataarray[i++]; _EL_           if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) { _EL_             continue; _EL_           } _EL_         } _EL_         refInvalidChar=new Character(ch); _EL_         return false; _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     int i=0; _EL_     while (i < datalength) { _EL_       if (XMLChar.isInvalid(dataarray[i++])) { _EL_         char ch=dataarray[i - 1]; _EL_         if (XMLChar.isHighSurrogate(ch) && i < datalength) { _EL_           char ch2=dataarray[i++]; _EL_           if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) { _EL_             continue; _EL_           } _EL_         } _EL_         refInvalidChar=new Character(ch); _EL_         return false; _EL_       } _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private List<Rule> readRules(Reader reader) throws IOException, IllegalArgumentException { _EL_   BufferedReader in=new BufferedReader(reader); _EL_   List<Rule> rules=new ArrayList<Rule>(); _EL_   String line; _EL_   while ((line=in.readLine()) != null) { _EL_     if (line.length() == 0) { _EL_       continue; _EL_     } _EL_     line=line.trim(); _EL_     char first=line.charAt(0); _EL_     boolean sign=false; _EL_ switch (first) { _EL_ case \'+\': _EL_       sign=true; _EL_     break; _EL_ case \'-\': _EL_   sign=false; _EL_ break; _EL_ case \' \': _EL_ case \'\\n\': _EL_ case \'#\': _EL_ continue; _EL_ default : _EL_ throw new IOException("Invalid first character: " + line); _EL_ } _EL_ String regex=line.substring(1); _EL_ if (LOG.isTraceEnabled()) { _EL_ LOG.trace("Adding rule [" + regex + "]"); _EL_ } _EL_ Rule rule=createRule(sign,regex); _EL_ rules.add(rule); _EL_ } _EL_ return rules; _EL_ } _EL_ ', 'public PreferenceBuilder<PreferenceClass> prefType(Class<PreferenceClass> prefType){ _EL_   if (!VALID_TYPES.contains(prefType)) { _EL_     throw new IllegalArgumentException("The specified type: " + prefType + " is not supported in preferences"); _EL_   } _EL_   this.prefType=prefType; _EL_   return this; _EL_ } _EL_ ', 'private void purgeOne(){ _EL_ synchronized (queue) { _EL_     WeakKey key=(WeakKey)queue.poll(); _EL_     if (key != null) { _EL_       super.remove(key.getReferenced()); _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public Query newFuzzyQuery(String text,int fuzziness){ _EL_   if (settings.lowercaseExpandedTerms()) { _EL_     text=text.toLowerCase(settings.locale()); _EL_   } _EL_   BooleanQuery.Builder bq=new BooleanQuery.Builder(); _EL_   bq.setDisableCoord(true); _EL_   for (  Map.Entry<String,Float> entry : weights.entrySet()) { _EL_     try { _EL_       Query q=new FuzzyQuery(new Term(entry.getKey(),text),fuzziness); _EL_       q.setBoost(entry.getValue()); _EL_       bq.add(q,BooleanClause.Occur.SHOULD); _EL_     } _EL_  catch (    RuntimeException e) { _EL_       rethrowUnlessLenient(e); _EL_     } _EL_   } _EL_   return super.simplify(bq.build()); _EL_ } _EL_ ', 'public static Operation createOperationToUpdateOrCreateNetworkInterface(ComputeState existingComputeState,NetworkInterfaceState networkInterface,List<String> tenantLinks,StatelessService service,boolean isPublic){ _EL_   String existingInterfaceLink=getExistingNetworkInterfaceLink(existingComputeState,isPublic); _EL_   Operation networkInterfaceOperation=null; _EL_   if (existingInterfaceLink == null) { _EL_     networkInterfaceOperation=createPostOperation(service,networkInterface,NetworkInterfaceService.FACTORY_LINK); _EL_   } _EL_  else { _EL_     networkInterfaceOperation=createPatchOperation(service,networkInterface,existingInterfaceLink); _EL_   } _EL_   return networkInterfaceOperation; _EL_ } _EL_ ', '@Override public synchronized void removeDataSourceListener(DataSourceListener dsl){ _EL_   m_dataSourceListeners.remove(dsl); _EL_ } _EL_ ', 'public String rightStr(String str,int length){ _EL_   return str.substring(Math.max(0,str.length() - length)); _EL_ } _EL_ ', 'public static void onGridStop() throws InterruptedException { _EL_ synchronized (mux) { _EL_     if (gridCnt == 0)     return; _EL_     --gridCnt; _EL_     Thread timer0=timer; _EL_     if (gridCnt == 0 && timer0 != null) { _EL_       timer=null; _EL_       timer0.interrupt(); _EL_       timer0.join(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void printDepthFirst(){ _EL_   print(new DepthFirstEnumerator(_firstNode)); _EL_ } _EL_ ', 'protected void drawHorizontalBezier(Canvas c,ILineDataSet dataSet){ _EL_   Transformer trans=mChart.getTransformer(dataSet.getAxisDependency()); _EL_   int entryCount=dataSet.getEntryCount(); _EL_   Entry entryFrom=dataSet.getEntryForXIndex((mMinX < 0) ? 0 : mMinX,DataSet.Rounding.DOWN); _EL_   Entry entryTo=dataSet.getEntryForXIndex(mMaxX,DataSet.Rounding.UP); _EL_   int diff=(entryFrom == entryTo) ? 1 : 0; _EL_   int minx=Math.max(dataSet.getEntryIndex(entryFrom) - diff,0); _EL_   int maxx=Math.min(Math.max(minx + 2,dataSet.getEntryIndex(entryTo) + 1),entryCount); _EL_   float phaseX=Math.max(0.f,Math.min(1.f,mAnimator.getPhaseX())); _EL_   float phaseY=mAnimator.getPhaseY(); _EL_   cubicPath.reset(); _EL_   int size=(int)Math.ceil((maxx - minx) * phaseX + minx); _EL_   if (size - minx >= 2) { _EL_     Entry prev=dataSet.getEntryForIndex(minx); _EL_     Entry cur=prev; _EL_     cubicPath.moveTo(cur.getXIndex(),cur.getVal() * phaseY); _EL_     for (int j=minx + 1, count=Math.min(size,entryCount); j < count; j++) { _EL_       prev=dataSet.getEntryForIndex(j - 1); _EL_       cur=dataSet.getEntryForIndex(j); _EL_       final float cpx=(float)(prev.getXIndex()) + (float)(cur.getXIndex() - prev.getXIndex()) / 2.0f; _EL_       cubicPath.cubicTo(cpx,prev.getVal() * phaseY,cpx,cur.getVal() * phaseY,cur.getXIndex(),cur.getVal() * phaseY); _EL_     } _EL_   } _EL_   if (dataSet.isDrawFilledEnabled()) { _EL_     cubicFillPath.reset(); _EL_     cubicFillPath.addPath(cubicPath); _EL_     drawCubicFill(mBitmapCanvas,dataSet,cubicFillPath,trans,minx,size); _EL_   } _EL_   mRenderPaint.setColor(dataSet.getColor()); _EL_   mRenderPaint.setStyle(Paint.Style.STROKE); _EL_   trans.pathValueToPixel(cubicPath); _EL_   mBitmapCanvas.drawPath(cubicPath,mRenderPaint); _EL_   mRenderPaint.setPathEffect(null); _EL_ } _EL_ ', '@Override public void initialize(){ _EL_   board=null; _EL_ switch (simPaneCtrl.getParamValueIndex(PARAM_INIT_CONF)) { _EL_ case 0: _EL_     board=new EightPuzzleBoard(new int[]{1,2,5,3,4,0,6,7,8}); _EL_   break; _EL_ case 1: _EL_ board=new EightPuzzleBoard(new int[]{1,4,2,7,5,8,3,0,6}); _EL_ break; _EL_ case 2: _EL_ board=new EightPuzzleBoard(new int[]{0,8,7,6,5,4,3,2,1}); _EL_ break; _EL_ case 3: _EL_ board=new EightPuzzleBoard(new int[]{0,1,2,3,4,5,6,7,8}); _EL_ Random r=new Random(System.currentTimeMillis()); _EL_ for (int i=0; i < 200; i++) { _EL_ switch (r.nextInt(4)) { _EL_ case 0: _EL_ board.moveGapUp(); _EL_ break; _EL_ case 1: _EL_ board.moveGapDown(); _EL_ break; _EL_ case 2: _EL_ board.moveGapLeft(); _EL_ break; _EL_ case 3: _EL_ board.moveGapRight(); _EL_ break; _EL_ } _EL_ } _EL_ } _EL_ stateViewCtrl.initialize(board); _EL_ } _EL_ ', 'protected void checkAntVersion(Hashtable h){ _EL_   if (null == h)   h=new Hashtable(); _EL_   try { _EL_     final String ANT_VERSION_CLASS="org.apache.tools.ant.Main"; _EL_     final String ANT_VERSION_METHOD="getAntVersion"; _EL_     final Class noArgs[]=new Class[0]; _EL_     Class clazz=ObjectFactory.findProviderClass(ANT_VERSION_CLASS,ObjectFactory.findClassLoader(),true); _EL_     Method method=clazz.getMethod(ANT_VERSION_METHOD,noArgs); _EL_     Object returnValue=method.invoke(null,new Object[0]); _EL_     h.put(VERSION + "ant",(String)returnValue); _EL_   } _EL_  catch (  Exception e) { _EL_     h.put(VERSION + "ant",CLASS_NOTPRESENT); _EL_   } _EL_ } _EL_ ', 'public void addListener(ImsSessionListener listener){ _EL_   mListeners.add(listener); _EL_ } _EL_ ', 'public List<AddressItem> loadAllDeepFromCursor(Cursor cursor){ _EL_   int count=cursor.getCount(); _EL_   List<AddressItem> list=new ArrayList<AddressItem>(count); _EL_   if (cursor.moveToFirst()) { _EL_     if (identityScope != null) { _EL_       identityScope.lock(); _EL_       identityScope.reserveRoom(count); _EL_     } _EL_     try { _EL_       do { _EL_         list.add(loadCurrentDeep(cursor,false)); _EL_       } _EL_  while (cursor.moveToNext()); _EL_     } _EL_   finally { _EL_       if (identityScope != null) { _EL_         identityScope.unlock(); _EL_       } _EL_     } _EL_   } _EL_   return list; _EL_ } _EL_ ', 'public byte[] readNextPart() throws JPlagException { _EL_   if (remainingBytes == 0) { _EL_     throw new JPlagException("downloadException","There\'s nothing left to be downloaded!",""); _EL_   } _EL_   try { _EL_     FileInputStream in=new FileInputStream(file); _EL_     in.skip(filesize - remainingBytes); _EL_     int partsize=remainingBytes; _EL_     if (partsize > 81920)     partsize=81920; _EL_     byte[] data=new byte[partsize]; _EL_     in.read(data); _EL_     in.close(); _EL_     remainingBytes-=partsize; _EL_     return data; _EL_   } _EL_  catch (  IOException e) { _EL_     e.printStackTrace(); _EL_     throw new JPlagException("downloadException","Unable to read" + " submission part from server!",""); _EL_   } _EL_ } _EL_ ', 'public static List<ShapeRecord> rectangle(double startx,double starty,double width,double height,double radiusX,double radiusY,double topLeftRadiusX,double topLeftRadiusY,double topRightRadiusX,double topRightRadiusY,double bottomLeftRadiusX,double bottomLeftRadiusY,double bottomRightRadiusX,double bottomRightRadiusY){ _EL_   List<ShapeRecord> shapeRecords=new ArrayList<ShapeRecord>(); _EL_   if (radiusX == 0.0) { _EL_     radiusY=radiusX=0; _EL_   } _EL_  else   if (radiusY == 0.0) { _EL_     radiusY=radiusX; _EL_   } _EL_   if (radiusX > width / 2.0)   radiusX=width / 2.0; _EL_   if (radiusY > height / 2.0)   radiusY=height / 2.0; _EL_   double[] topLeftRadius=getCornerRadius(topLeftRadiusX,topLeftRadiusY,radiusX,radiusY,width,height); _EL_   topLeftRadiusX=topLeftRadius[0]; _EL_   topLeftRadiusY=topLeftRadius[1]; _EL_   double[] topRightRadius=getCornerRadius(topRightRadiusX,topRightRadiusY,radiusX,radiusY,width,height); _EL_   topRightRadiusX=topRightRadius[0]; _EL_   topRightRadiusY=topRightRadius[1]; _EL_   double[] bottomLeftRadius=getCornerRadius(bottomLeftRadiusX,bottomLeftRadiusY,radiusX,radiusY,width,height); _EL_   bottomLeftRadiusX=bottomLeftRadius[0]; _EL_   bottomLeftRadiusY=bottomLeftRadius[1]; _EL_   double[] bottomRightRadius=getCornerRadius(bottomRightRadiusX,bottomRightRadiusY,radiusX,radiusY,width,height); _EL_   bottomRightRadiusX=bottomRightRadius[0]; _EL_   bottomRightRadiusY=bottomRightRadius[1]; _EL_   double c0=0.923879532511; _EL_   double c1=0.382683432365; _EL_   double c3=0.707106781187; _EL_   double rx=bottomRightRadiusX; _EL_   double ry=bottomRightRadiusY; _EL_   double tx=rx / 0.923879532511; _EL_   double ty=ry / 0.923879532511; _EL_   double dx, currentx; _EL_   double dy, currenty; _EL_   dx=startx + width - rx; _EL_   dy=starty + height - ry; _EL_   shapeRecords.add(move((dx + rx),dy)); _EL_   currentx=(dx + rx); _EL_   currenty=dy; _EL_   if (bottomRightRadiusX != 0.0) { _EL_     shapeRecords.add(curvedEdge(currentx,currenty,(dx + c0 * tx),(dy + c1 * ty),(dx + c3 * rx),(dy + c3 * ry))); _EL_     shapeRecords.add(curvedEdge((dx + c3 * rx),(dy + c3 * ry),(dx + c1 * tx),(dy + c0 * ty),dx,(dy + ry))); _EL_     currentx=dx; _EL_     currenty=dy + ry; _EL_   } _EL_   rx=bottomLeftRadiusX; _EL_   ry=bottomLeftRadiusY; _EL_   tx=rx / 0.923879532511; _EL_   ty=ry / 0.923879532511; _EL_   dx=startx + rx; _EL_   dy=starty + height - ry; _EL_   shapeRecords.addAll(straightEdge(currentx,currenty,dx,(dy + ry))); _EL_   currentx=dx; _EL_   currenty=dy + ry; _EL_   if (bottomLeftRadiusX != 0.0) { _EL_     shapeRecords.add(curvedEdge(currentx,currenty,(dx - c1 * tx),(dy + c0 * ty),(dx - c3 * rx),(dy + c3 * ry))); _EL_     shapeRecords.add(curvedEdge((dx - c3 * rx),(dy + c3 * ry),(dx - c0 * tx),(dy + c1 * ty),(dx - rx),dy)); _EL_     currentx=dx - rx; _EL_     currenty=dy; _EL_   } _EL_   rx=topLeftRadiusX; _EL_   ry=topLeftRadiusY; _EL_   tx=rx / 0.923879532511; _EL_   ty=ry / 0.923879532511; _EL_   dx=startx + rx; _EL_   dy=starty + ry; _EL_   shapeRecords.addAll(straightEdge(currentx,currenty,(dx - rx),dy)); _EL_   currentx=dx - rx; _EL_   currenty=dy; _EL_   if (topLeftRadiusX != 0.0) { _EL_     shapeRecords.add(curvedEdge(currentx,currenty,(dx - c0 * tx),(dy - c1 * ty),(dx - c3 * rx),(dy - c3 * ry))); _EL_     shapeRecords.add(curvedEdge((dx - c3 * rx),(dy - c3 * ry),(dx - c1 * tx),(dy - c0 * ty),dx,(dy - ry))); _EL_     currentx=dx; _EL_     currenty=dy - ry; _EL_   } _EL_   rx=topRightRadiusX; _EL_   ry=topRightRadiusY; _EL_   tx=rx / 0.923879532511; _EL_   ty=ry / 0.923879532511; _EL_   dx=startx + width - rx; _EL_   dy=starty + ry; _EL_   shapeRecords.addAll(straightEdge(currentx,currenty,dx,(dy - ry))); _EL_   currentx=dx; _EL_   currenty=dy - ry; _EL_   if (topRightRadiusX != 0.0) { _EL_     shapeRecords.add(curvedEdge(currentx,currenty,(dx + c1 * tx),(dy - c0 * ty),(dx + c3 * rx),(dy - c3 * ry))); _EL_     shapeRecords.add(curvedEdge((dx + c3 * rx),(dy - c3 * ry),(dx + c0 * tx),(dy - c1 * ty),(dx + rx),dy)); _EL_     currentx=(dx + rx); _EL_     currenty=dy; _EL_   } _EL_   rx=bottomRightRadiusX; _EL_   ry=bottomRightRadiusY; _EL_   tx=rx / 0.923879532511; _EL_   ty=ry / 0.923879532511; _EL_   dx=startx + width - rx; _EL_   dy=starty + height - ry; _EL_   shapeRecords.addAll(straightEdge(currentx,currenty,(dx + rx),dy)); _EL_   return shapeRecords; _EL_ } _EL_ ', 'public static int findGlobalValleyLocation(double[] data){ _EL_   double min=Double.NaN; _EL_   int imin=-1; _EL_   for (int i=0; i < data.length; i++) { _EL_     if (Double.isNaN(data[i]))     continue; _EL_     if (Double.isNaN(min) || data[i] < min) { _EL_       min=data[i]; _EL_       imin=i; _EL_     } _EL_   } _EL_   return imin; _EL_ } _EL_ ', 'public DoubleBuffer put(double[] src,int srcOffset,int doubleCount){ _EL_   Arrays.checkOffsetAndCount(src.length,srcOffset,doubleCount); _EL_   if (doubleCount > remaining()) { _EL_     throw new BufferOverflowException(); _EL_   } _EL_   for (int i=srcOffset; i < srcOffset + doubleCount; ++i) { _EL_     put(src[i]); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'protected ArgsBase(){ _EL_   _argv=null; _EL_   _env=null; _EL_ } _EL_ ', 'public final void push(String s){ _EL_   if ((m_firstFree + 1) >= m_mapSize) { _EL_     m_mapSize+=m_blocksize; _EL_     String newMap[]=new String[m_mapSize]; _EL_     System.arraycopy(m_map,0,newMap,0,m_firstFree + 1); _EL_     m_map=newMap; _EL_   } _EL_   m_map[m_firstFree]=s; _EL_   m_firstFree++; _EL_ } _EL_ ', 'public static String readFromFile(final File path) throws IOException { _EL_   FileInputStream fis=null; _EL_   try { _EL_     fis=new FileInputStream(path); _EL_     return readFromFile(fis); _EL_   } _EL_   finally { _EL_     if (fis != null) { _EL_       fis.close(); _EL_     } _EL_   } _EL_ } _EL_ ', "public static String readLine(InputStream in,String charset) throws IOException { _EL_   ByteArrayOutputStream baos=new ByteArrayOutputStream(); _EL_   while (true) { _EL_     int b=in.read(); _EL_     if (b == -1) { _EL_       if (baos.size() == 0) { _EL_         return null; _EL_       } _EL_  else { _EL_         break; _EL_       } _EL_     } _EL_     if (b == '\\n') { _EL_       break; _EL_     } _EL_     if (b != '\\r') { _EL_       baos.write(b); _EL_       continue; _EL_     } _EL_     int b2=in.read(); _EL_     if (b2 == -1) { _EL_       baos.write(b); _EL_       break; _EL_     } _EL_     if (b2 == '\\n') { _EL_       break; _EL_     } _EL_     baos.write(b); _EL_     baos.write(b2); _EL_   } _EL_   return baos.toString(charset); _EL_ } _EL_ ", 'public void close(){ _EL_   this.closed=true; _EL_ } _EL_ ', 'private void updateWaveFileSize() throws IOException { _EL_   ByteBuffer buffer=getUnsignedIntegerBuffer(mFileChannel.size() - 8); _EL_   mFileChannel.write(buffer,4); _EL_   ByteBuffer buffer2=getUnsignedIntegerBuffer(mFileChannel.size() - 44); _EL_   mFileChannel.write(buffer2,40); _EL_ } _EL_ ', 'public void put(int key,E value){ _EL_   int i=binarySearch(mKeys,0,mSize,key); _EL_   if (i >= 0) { _EL_     mValues[i]=value; _EL_   } _EL_  else { _EL_     i=~i; _EL_     if (i < mSize && mValues[i] == DELETED) { _EL_       mKeys[i]=key; _EL_       mValues[i]=value; _EL_       return; _EL_     } _EL_     if (mGarbage && mSize >= mKeys.length) { _EL_       gc(); _EL_       i=~binarySearch(mKeys,0,mSize,key); _EL_     } _EL_     if (mSize >= mKeys.length) { _EL_       int n=Math.max(mSize + 1,mKeys.length * 2); _EL_       int[] nkeys=new int[n]; _EL_       Object[] nvalues=new Object[n]; _EL_       System.arraycopy(mKeys,0,nkeys,0,mKeys.length); _EL_       System.arraycopy(mValues,0,nvalues,0,mValues.length); _EL_       mKeys=nkeys; _EL_       mValues=nvalues; _EL_     } _EL_     if (mSize - i != 0) { _EL_       System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i); _EL_       System.arraycopy(mValues,i,mValues,i + 1,mSize - i); _EL_     } _EL_     mKeys[i]=key; _EL_     mValues[i]=value; _EL_     mSize++; _EL_   } _EL_ } _EL_ ', 'public void trimToSize(){ _EL_   if (size < array.length) { _EL_     int[] olddata=array; _EL_     array=new int[size]; _EL_     System.arraycopy(olddata,0,array,0,size); _EL_   } _EL_ } _EL_ ', 'public static List<Object> validateAndEvaluate(String viewName,StatementContext statementContext,List<ExprNode> expressions) throws ViewParameterException { _EL_   List<Object> results=new ArrayList<Object>(); _EL_   int expressionNumber=0; _EL_   StreamTypeService streamTypeService=new StreamTypeServiceImpl(statementContext.getEngineURI(),false); _EL_   for (  ExprNode expr : expressions) { _EL_     Object result=validateAndEvaluateExpr(viewName,statementContext,expr,streamTypeService,expressionNumber); _EL_     results.add(result); _EL_     expressionNumber++; _EL_   } _EL_   return results; _EL_ } _EL_ ', 'public void addJobGroupToNeverDelete(String group){ _EL_   if (group != null)   jobGroupsToNeverDelete.add(group); _EL_ } _EL_ ', 'private void waitForStateChange(int maxTTW) throws MqttException { _EL_ synchronized (waiter) { _EL_     if (!donext) { _EL_       try { _EL_         waiter.wait(maxTTW); _EL_       } _EL_  catch (      InterruptedException e) { _EL_         log("timed out"); _EL_         e.printStackTrace(); _EL_       } _EL_       if (ex != null) { _EL_         throw (MqttException)ex; _EL_       } _EL_     } _EL_     donext=false; _EL_   } _EL_ } _EL_ ', 'public void childrenRemoved(BeanContextMembershipEvent bcme){ _EL_   for (Iterator it=bcme.iterator(); it.hasNext(); ) { _EL_     findAndUndo(it.next()); _EL_   } _EL_ } _EL_ ', 'public void list(PrintWriter out,int indent){ _EL_   for (int i=0; i < indent; i++) { _EL_     out.print(" "); _EL_   } _EL_   out.println(this); _EL_ } _EL_ ', '@SuppressWarnings("unchecked") private void restoreBadges(){ _EL_   Bundle restoredBundle=savedInstanceState; _EL_   if (restoredBundle != null) { _EL_     if (restoredBundle.containsKey(BADGE_FULL_TEXT_KEY)) { _EL_       shouldShowBadgeWithNinePlus=restoredBundle.getBoolean(BADGE_FULL_TEXT_KEY); _EL_     } _EL_     if (restoredBundle.containsKey(BUDGES_ITEM_BUNDLE_KEY)) { _EL_       badgeSaveInstanceHashMap=(HashMap<Integer,Object>)savedInstanceState.getSerializable(BUDGES_ITEM_BUNDLE_KEY); _EL_       if (badgeSaveInstanceHashMap != null) { _EL_         for (        Integer integer : badgeSaveInstanceHashMap.keySet()) { _EL_           BadgeHelper.forceShowBadge(badgeList.get(integer),(BadgeItem)badgeSaveInstanceHashMap.get(integer),shouldShowBadgeWithNinePlus); _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public SubConfigModelImpl(HttpServletRequest req,String serviceName,String parentId,Map map) throws AMConsoleException { _EL_   super(req,map); _EL_   this.serviceName=serviceName; _EL_   this.parentId=parentId; _EL_   subConfigMeta=new SubConfigMeta(serviceName,this); _EL_   subConfigMeta.setParentId(parentId); _EL_   displayName=subConfigMeta.getParentDisplayName(); _EL_ } _EL_ ', 'public static int convertToColorInt(String a,String r,String g,String b,boolean useAlpha){ _EL_   int alpha=useAlpha ? Integer.parseInt(a,16) : 0xff; _EL_   int red=Integer.parseInt(r,16); _EL_   int green=Integer.parseInt(g,16); _EL_   int blue=Integer.parseInt(b,16); _EL_   return Color.argb(useAlpha ? alpha : -1,red,green,blue); _EL_ } _EL_ ', 'public void cancelAll(){ _EL_   endpoint.cancelAll(); _EL_ } _EL_ ', 'private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { _EL_   in.defaultReadObject(); _EL_   if (choiceLimits.length != choiceFormats.length) { _EL_     throw new InvalidObjectException("limits and format arrays of different length."); _EL_   } _EL_ } _EL_ ', 'private static final byte[] toOctets(int identifier,String text){ _EL_   byte[] s=text.getBytes(StandardCharsets.UTF_8); _EL_   byte[] base=OctetUtils.toOctets(AttributeType.VENDOR_SPECIFIC,identifier); _EL_   int maxTextSpace=Attribute.MAX_ATTRIBUTE_LENGTH - base.length; _EL_   byte[] octets; _EL_   if (s.length > maxTextSpace) { _EL_     octets=new byte[Attribute.MAX_ATTRIBUTE_LENGTH]; _EL_     System.arraycopy(s,0,octets,base.length,Attribute.MAX_ATTRIBUTE_LENGTH - base.length); _EL_   } _EL_  else { _EL_     octets=new byte[base.length + s.length]; _EL_     System.arraycopy(s,0,octets,base.length,s.length); _EL_   } _EL_   System.arraycopy(base,0,octets,0,base.length); _EL_   octets[1]=(byte)octets.length; _EL_   return octets; _EL_ } _EL_ ', 'public Album(Context context,Uri mediaUri){ _EL_   super(); _EL_   media.add(0,new Media(context,mediaUri)); _EL_   setCurrentPhotoIndex(0); _EL_ } _EL_ ', 'public int size(){ _EL_   return count.get(); _EL_ } _EL_ ', "public static String[] wrapString(@Nonnull String str,int maxWidth,@Nullable String[] output){ _EL_   if (output == null) { _EL_     output=new String[(int)((str.length() / maxWidth) * 1.5d + 1)]; _EL_   } _EL_   int lineStart=0; _EL_   int arrayIndex=0; _EL_   int i; _EL_   for (i=0; i < str.length(); i++) { _EL_     char c=str.charAt(i); _EL_     if (c == '\\n') { _EL_       output=addString(output,str.substring(lineStart,i),arrayIndex++); _EL_       lineStart=i + 1; _EL_     } _EL_  else     if (i - lineStart == maxWidth) { _EL_       output=addString(output,str.substring(lineStart,i),arrayIndex++); _EL_       lineStart=i; _EL_     } _EL_   } _EL_   if (lineStart != i || i == 0) { _EL_     output=addString(output,str.substring(lineStart),arrayIndex++,output.length + 1); _EL_   } _EL_   if (arrayIndex < output.length) { _EL_     output[arrayIndex]=null; _EL_   } _EL_   return output; _EL_ } _EL_ ", 'public static void cleanDirectory(File directory) throws IOException { _EL_   if (!directory.exists()) { _EL_     String message=directory + " does not exist"; _EL_     throw new IllegalArgumentException(message); _EL_   } _EL_   if (!directory.isDirectory()) { _EL_     String message=directory + " is not a directory"; _EL_     throw new IllegalArgumentException(message); _EL_   } _EL_   File[] files=directory.listFiles(); _EL_   if (files == null) { _EL_     throw new IOException("Failed to list contents of " + directory); _EL_   } _EL_   IOException exception=null; _EL_   for (  File file : files) { _EL_     try { _EL_       forceDelete(file); _EL_     } _EL_  catch (    IOException ioe) { _EL_       exception=ioe; _EL_     } _EL_   } _EL_   if (null != exception) { _EL_     throw exception; _EL_   } _EL_ } _EL_ ', 'private boolean areParallelSiblings(Component source,Component target,int axis){ _EL_   ComponentInfo sourceInfo=getComponentInfo(source); _EL_   ComponentInfo targetInfo=getComponentInfo(target); _EL_   Spring sourceSpring; _EL_   Spring targetSpring; _EL_   if (axis == HORIZONTAL) { _EL_     sourceSpring=sourceInfo.horizontalSpring; _EL_     targetSpring=targetInfo.horizontalSpring; _EL_   } _EL_  else { _EL_     sourceSpring=sourceInfo.verticalSpring; _EL_     targetSpring=targetInfo.verticalSpring; _EL_   } _EL_   ArrayList sourcePath=tmpParallelSet; _EL_   sourcePath.clear(); _EL_   Spring spring=sourceSpring.getParent(); _EL_   while (spring != null) { _EL_     sourcePath.add(spring); _EL_     spring=spring.getParent(); _EL_   } _EL_   spring=targetSpring.getParent(); _EL_   while (spring != null) { _EL_     if (sourcePath.contains(spring)) { _EL_       sourcePath.clear(); _EL_       while (spring != null) { _EL_         if (spring instanceof ParallelGroup) { _EL_           return true; _EL_         } _EL_         spring=spring.getParent(); _EL_       } _EL_       return false; _EL_     } _EL_     spring=spring.getParent(); _EL_   } _EL_   sourcePath.clear(); _EL_   return false; _EL_ } _EL_ ', 'void findValue(){ _EL_   if (log.isDebugEnabled()) { _EL_     log.debug("findValue invoked on " + label()); _EL_   } _EL_   for (int i=0; i < _value.getItemCount(); i++) { _EL_     String choice=_value.getItemAt(i); _EL_     SettingList sl=choiceHash.get(choice); _EL_     if (sl.match()) { _EL_       if (log.isDebugEnabled()) { _EL_         log.debug("  match in " + i); _EL_       } _EL_       _value.setSelectedItem(choice); _EL_       return; _EL_     } _EL_   } _EL_   if (log.isDebugEnabled()) { _EL_     log.debug("   no match"); _EL_   } _EL_ } _EL_ ', 'protected String encodeCookie(SerializableHttpCookie cookie){ _EL_   if (cookie == null)   return null; _EL_   ByteArrayOutputStream os=new ByteArrayOutputStream(); _EL_   try { _EL_     ObjectOutputStream outputStream=new ObjectOutputStream(os); _EL_     outputStream.writeObject(cookie); _EL_   } _EL_  catch (  IOException e) { _EL_     Log.d(LOG_TAG,"IOException in encodeCookie",e); _EL_     return null; _EL_   } _EL_   return byteArrayToHexString(os.toByteArray()); _EL_ } _EL_ ', 'public void delete(String name) throws IOException { _EL_   if (name.equalsIgnoreCase(KEY_ID)) { _EL_     id=null; _EL_   } _EL_  else { _EL_     throw new IOException("Attribute name not recognized by " + "CertAttrSet:SubjectKeyIdentifierExtension."); _EL_   } _EL_   encodeThis(); _EL_ } _EL_ ', 'private static void addLeafWithNonExistingParents(Spatial root,Spatial leaf){ _EL_   if (!(root instanceof Node)) { _EL_     logger.log(Level.WARNING,"Cannot add new Leaf {0} to {1}, is not a Node!",new Object[]{leaf.getName(),root.getName()}); _EL_     return; _EL_   } _EL_   for (Spatial s=leaf; s.getParent() != null; s=s.getParent()) { _EL_     Spatial parent=s.getParent(); _EL_     Spatial other=findTaggedSpatial(root,parent); _EL_     if (other == null) { _EL_       continue; _EL_     } _EL_     if (other instanceof Node) { _EL_       logger.log(Level.INFO,"Attaching {0} to {1} in root {2} to add leaf {3}",new Object[]{s,other,root,leaf}); _EL_       for (Spatial spt=leaf; spt != parent; spt=spt.getParent()) { _EL_         spt.setUserData(ORIGINAL_NAME,spt.getName()); _EL_         spt.setUserData(ORIGINAL_PATH,getSpatialPath(spt)); _EL_         spt=spt.getParent(); _EL_       } _EL_       Node otherNode=(Node)other; _EL_       otherNode.attachChild(s); _EL_       logger.log(LogLevel.USERINFO,"Attached Node {0} with leaf {0}",new Object[]{other.getName(),leaf.getName()}); _EL_       return; _EL_     } _EL_  else { _EL_       logger.log(Level.WARNING,"Cannot attach leaf {0} to found spatial {1} in root {2}, not a node.",new Object[]{leaf,other,root}); _EL_     } _EL_   } _EL_   logger.log(Level.WARNING,"Could not attach new Leaf {0}, no root node found.",leaf.getName()); _EL_ } _EL_ ', 'private void adjustBlockListeners(List<OBlock> oldRange,List<OBlock> newRange,Tracker tracker){ _EL_   Iterator<OBlock> iter=newRange.iterator(); _EL_   while (iter.hasNext()) { _EL_     OBlock b=iter.next(); _EL_     if (oldRange.contains(b)) { _EL_       oldRange.remove(b); _EL_       continue; _EL_     } _EL_     addBlockListener(b,tracker); _EL_   } _EL_   iter=oldRange.iterator(); _EL_   while (iter.hasNext()) { _EL_     removeBlockListener(iter.next(),tracker); _EL_   } _EL_ } _EL_ ', 'TCPChannel(TCPTransport tr,TCPEndpoint ep){ _EL_   this.tr=tr; _EL_   this.ep=ep; _EL_ } _EL_ ', 'public static Face drawDir(Direction dir,MeshModel model,double minX,double minY,double minZ,double maxX,double maxY,double maxZ,CubeTextureCoordinates textureCoordinates){ _EL_ switch (dir) { _EL_ case DOWN: _EL_     return drawDown(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates); _EL_ case UP: _EL_   return drawUp(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates); _EL_ case NORTH: _EL_ return drawNorth(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates); _EL_ case SOUTH: _EL_ return drawSouth(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates); _EL_ case EAST: _EL_ return drawEast(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates); _EL_ case WEST: _EL_ return drawWest(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates); _EL_ } _EL_ throw new RenderException("Invalid draw direction!"); _EL_ } _EL_ ', 'public boolean removeContainerAndCancelIfNecessary(ImageContainer container){ _EL_   mContainers.remove(container); _EL_   if (mContainers.isEmpty()) { _EL_     mRequest.cancel(); _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public KernelDensityFunction(Collection<double[]> points){ _EL_   this(points.toArray(new double[points.size()][])); _EL_ } _EL_ ', 'void readDictionary(String filename,String suffix,InputStream res) throws IOException { _EL_   DictionaryNames nms=new DictionaryNames(filename,suffix); _EL_   BufferedReader in=new BufferedReader(new InputStreamReader(res)); _EL_   String line; _EL_   while ((line=in.readLine()) != null) { _EL_     String[] terms=splitter.split(line); _EL_     if (terms.length > maxPhraseLength)     continue; _EL_     if (terms.length == 0)     continue; _EL_     GazEntry ge=gaz.get(terms[0]); _EL_     if (ge == null) { _EL_       gaz.put(terms[0],new GazEntry(terms,1,nms)); _EL_     } _EL_  else { _EL_       ge.addChild(terms,1,nms); _EL_     } _EL_   } _EL_   in.close(); _EL_ } _EL_ ', "public String popAndEncode(boolean fromOnlineEvent){ _EL_ synchronized (this) { _EL_     if (activeBridgeMode == null) { _EL_       return null; _EL_     } _EL_     activeBridgeMode.notifyOfFlush(this,fromOnlineEvent); _EL_     if (queue.isEmpty()) { _EL_       return null; _EL_     } _EL_     int totalPayloadLen=0; _EL_     int numMessagesToSend=0; _EL_     for (    JsMessage message : queue) { _EL_       int messageSize=calculatePackedMessageLength(message); _EL_       if (numMessagesToSend > 0 && totalPayloadLen + messageSize > MAX_PAYLOAD_SIZE && MAX_PAYLOAD_SIZE > 0) { _EL_         break; _EL_       } _EL_       totalPayloadLen+=messageSize; _EL_       numMessagesToSend+=1; _EL_     } _EL_     StringBuilder sb=new StringBuilder(totalPayloadLen); _EL_     for (int i=0; i < numMessagesToSend; ++i) { _EL_       JsMessage message=queue.removeFirst(); _EL_       packMessage(message,sb); _EL_     } _EL_     if (!queue.isEmpty()) { _EL_       sb.append('*'); _EL_     } _EL_     String ret=sb.toString(); _EL_     return ret; _EL_   } _EL_ } _EL_ ", 'public static boolean isAllAlpha(String str){ _EL_   if (str == null)   return false; _EL_   for (int i=str.length() - 1; i >= 0; i--) { _EL_     if (!Character.isLetter(str.charAt(i)))     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public Enumeration listOptions(){ _EL_   Vector newVector=new Vector(); _EL_   newVector.addElement(new Option("\\tSpecify list of columns to use as MEKA class attributes. \'first\' and \'last\' are valid\\n" + "\\tindexes. (default: last)","R",1,"-R <index1,index2-index4,...>")); _EL_   return newVector.elements(); _EL_ } _EL_ ', 'public void save(File keyStore,String type,char[] password,char[] keyPassword,String caAlias) throws GeneralSecurityException, IOException { _EL_   KeyStore store=KeyStore.getInstance(type); _EL_   store.load(null,password); _EL_   store.setKeyEntry(caAlias,caKey,keyPassword,caCerts); _EL_   OutputStream out=new FileOutputStream(keyStore); _EL_   try { _EL_     store.store(out,password); _EL_   } _EL_  catch (  IOException ioe) { _EL_     ioe.printStackTrace(); _EL_   } _EL_  finally { _EL_     out.close(); _EL_   } _EL_ } _EL_ ', 'void update(long timeNanos,int rows){ _EL_   count++; _EL_   executionTimeMinNanos=Math.min(timeNanos,executionTimeMinNanos); _EL_   executionTimeMaxNanos=Math.max(timeNanos,executionTimeMaxNanos); _EL_   rowCountMin=Math.min(rows,rowCountMin); _EL_   rowCountMax=Math.max(rows,rowCountMax); _EL_   double rowDelta=rows - rowCountMean; _EL_   rowCountMean+=rowDelta / count; _EL_   rowCountM2+=rowDelta * (rows - rowCountMean); _EL_   double timeDelta=timeNanos - executionTimeMeanNanos; _EL_   executionTimeMeanNanos+=timeDelta / count; _EL_   executionTimeM2Nanos+=timeDelta * (timeNanos - executionTimeMeanNanos); _EL_   executionTimeCumulativeNanos+=timeNanos; _EL_   rowCountCumulative+=rows; _EL_   lastUpdateTime=System.currentTimeMillis(); _EL_ } _EL_ ', 'public static String propertiesEncode(Properties pp){ _EL_   ByteArrayOutputStream bos=new ByteArrayOutputStream(); _EL_   try { _EL_     pp.store(bos,"adempiere"); _EL_   } _EL_  catch (  IOException e) { _EL_     log.log(Level.SEVERE,"store",e); _EL_   } _EL_   String result=new String(bos.toByteArray()); _EL_   try { _EL_     result=URLEncoder.encode(result,MobileEnv.ENCODING); _EL_   } _EL_  catch (  UnsupportedEncodingException e) { _EL_     log.log(Level.SEVERE,"encode" + MobileEnv.ENCODING,e); _EL_     String enc=System.getProperty("file.encoding"); _EL_     try { _EL_       result=URLEncoder.encode(result,enc); _EL_       log.info("encode: " + enc); _EL_     } _EL_  catch (    Exception ex) { _EL_       log.log(Level.SEVERE,"encode",ex); _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private boolean startsNewHunk(String string){ _EL_   if (string.length() == 0)   return true; _EL_   return isLegalChar(string.charAt(0)); _EL_ } _EL_ ', 'public void addValueKeyName(String key){ _EL_   valueKeyNames.add(key); _EL_ } _EL_ ', 'public JFileDataStoreChooser(Shell parent,int style,final List<String> extensions){ _EL_   this(parent,style,associations(extensions)); _EL_ } _EL_ ', 'public static PronghornStage findStageByPath(GraphManager m,int... path){ _EL_   int ordinal=path[0]; _EL_   int i=0; _EL_   int limit=m.stageIdToStage.length; _EL_   while (i < limit) { _EL_     if (null != m.stageIdToStage[i]) { _EL_       if (-1 == m.multInputIds[m.stageIdToInputsBeginIdx[m.stageIdToStage[i].stageId]]) { _EL_         if (--ordinal <= 0) { _EL_           return findStageByPath(m,m.stageIdToStage[i],1,path); _EL_         } _EL_       } _EL_     } _EL_     i++; _EL_   } _EL_   throw new UnsupportedOperationException("Unable to find ordinal input stage of " + path[0]); _EL_ } _EL_ ', 'private int makeAvailable(){ _EL_   if (pos != -1) { _EL_     return 0; _EL_   } _EL_   total+=tail - head - pad; _EL_   System.arraycopy(buffer,tail - pad,buffer,0,pad); _EL_   head=0; _EL_   tail=pad; _EL_   for (; ; ) { _EL_     int bytesRead=0; _EL_     try { _EL_       bytesRead=input.read(buffer,tail,bufSize - tail); _EL_     } _EL_  catch (    IOException e) { _EL_       throw new RuntimeException("Error while reading multipart stream"); _EL_     } _EL_     if (bytesRead == -1) { _EL_       final String msg="Stream ended unexpectedly"; _EL_       throw new MalformedStreamException(msg); _EL_     } _EL_     tail+=bytesRead; _EL_     findSeparator(); _EL_     int av=available(); _EL_     if (av > 0 || pos != -1) { _EL_       return av; _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public void dragGestureRecognized(DragGestureEvent evt){ _EL_   DragEntry dragEntry=kseFrame.dragSelectedEntry(); _EL_   if (dragEntry == null) { _EL_     return; _EL_   } _EL_   ImageIcon icon=dragEntry.getImage(); _EL_   Toolkit toolkit=Toolkit.getDefaultToolkit(); _EL_   Dimension dim=toolkit.getBestCursorSize(icon.getIconWidth(),icon.getIconHeight()); _EL_   BufferedImage buffImage=new BufferedImage(dim.width,dim.height,BufferedImage.TYPE_INT_ARGB_PRE); _EL_   icon.paintIcon(evt.getComponent(),buffImage.getGraphics(),0,0); _EL_   cursor=toolkit.createCustomCursor(buffImage,new Point(0,0),"keystore-entry"); _EL_   evt.startDrag(cursor,new KeyStoreEntryTransferable(dragEntry),this); _EL_ } _EL_ ', 'protected Transferable createLocaleTransferable(long[] formats) throws IOException { _EL_   return null; _EL_ } _EL_ ', 'private void playNext(){ _EL_   if (mediaType == Config.YOUTUBE_MEDIA_TYPE_VIDEO) { _EL_     seekVideo(0); _EL_     restartVideo(); _EL_     return; _EL_   } _EL_   if (previousWasCalled) { _EL_     previousWasCalled=false; _EL_     iterator.next(); _EL_   } _EL_   if (!iterator.hasNext()) { _EL_     iterator=youTubeVideos.listIterator(); _EL_   } _EL_   videoItem=iterator.next(); _EL_   nextWasCalled=true; _EL_   playVideo(); _EL_ } _EL_ ', 'private void cleanUpHistory(){ _EL_   if (!mHistoryOfNumbers.isEmpty() && mHistoryOfNumbers.size() >= MAX_HISTORY_SIZE) { _EL_     for (int i=0; i < Math.max(1,MAX_HISTORY_SIZE / 2); i++) { _EL_       mPreviousNumbers.remove(mHistoryOfNumbers.removeFirst()); _EL_     } _EL_   } _EL_ } _EL_ ', 'public String asXmlId(){ _EL_   return DatatypeConverter.printHexBinary(tokenDigest.getValue()); _EL_ } _EL_ ', 'public void entityReference(String name) throws org.xml.sax.SAXException { _EL_   append(m_doc.createEntityReference(name)); _EL_ } _EL_ ', '@Override public void before(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){ _EL_   String newIntervalStr=newProps.getProperty(BackupConstants.SCHEDULE_INTERVAL); _EL_   String newStartTimeStr=newProps.getProperty(BackupConstants.SCHEDULE_TIME); _EL_   if ((newIntervalStr == null || newIntervalStr.isEmpty()) && (newStartTimeStr == null || newStartTimeStr.isEmpty())) { _EL_     _log.info("No changes in backup interval and start time"); _EL_     return; _EL_   } _EL_   String intervalStr=(newIntervalStr == null || newIntervalStr.isEmpty()) ? oldProps.getProperty(BackupConstants.SCHEDULE_INTERVAL) : newIntervalStr; _EL_   String startTimeStr=(newStartTimeStr == null || newStartTimeStr.isEmpty()) ? oldProps.getProperty(BackupConstants.SCHEDULE_TIME) : newStartTimeStr; _EL_   _log.info("intervalStr={}, startTimeStr={}",intervalStr,startTimeStr); _EL_   validateBackupIntervalAndStartTime(intervalStr,startTimeStr); _EL_ } _EL_ ', 'private Automaton buildAutomaton(BytesRefHash termBytesHash){ _EL_   final TreeSet<BytesRef> terms=new TreeSet<BytesRef>(); _EL_   for (int i=0; i < termBytesHash.size(); i++) { _EL_     BytesRef ref=new BytesRef(); _EL_     termBytesHash.get(i,ref); _EL_     terms.add(ref); _EL_   } _EL_   final Automaton a=DaciukMihovAutomatonBuilder.build(terms); _EL_   return a; _EL_ } _EL_ ', 'public void legacyProcess(Class clazz,Method m,MethodAppearanceDecision decision){ _EL_   if (m.getDeclaringClass() != Object.class && m.getReturnType() != void.class && m.getParameterTypes().length == 0) { _EL_     String mName=m.getName(); _EL_     if (!looksLikePropertyReadMethod(mName)) { _EL_       decision.setExposeMethodAs(null); _EL_       try { _EL_         decision.setExposeAsProperty(new PropertyDescriptor(mName,clazz,mName,null)); _EL_       } _EL_  catch (      IntrospectionException e) { _EL_         throw new RuntimeException(e); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public SPTKPitchReaderWriter(String lf0SPTKFile,float windowSizeInSeconds,float skipSizeInSeconds,int samplingRate){ _EL_   contour=null; _EL_   header=new PitchFileHeader(); _EL_   header.windowSizeInSeconds=windowSizeInSeconds; _EL_   header.skipSizeInSeconds=skipSizeInSeconds; _EL_   header.fs=samplingRate; _EL_   try { _EL_     contour=readSPTKF0Data(lf0SPTKFile); _EL_   } _EL_  catch (  IOException e) { _EL_     e.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'public Query limit(int limit){ _EL_   return limit(limit < 0 ? NO_LIMIT : Field.<Integer>field(Integer.toString(limit))); _EL_ } _EL_ ', 'public String classifierTipText(){ _EL_   return "The base classifier to be used."; _EL_ } _EL_ ', 'public static CommandResult execCommand(List<String> commands,boolean isRoot){ _EL_   return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true); _EL_ } _EL_ ', 'private void commitChanges(){ _EL_   hopfieldPropsPanel.commitChanges(); _EL_   inputPanel.commitChanges(); _EL_ } _EL_ ', 'public static void showProfile(Activity activity,String pilotId,@Nullable HashMap<String,String> extras){ _EL_   if ((pilotId == null || pilotId.isEmpty()) && AirMap.hasValidAuthenticatedUser()) { _EL_     pilotId=AirMap.getUserId(); _EL_   } _EL_   Intent intent=new Intent(activity,ProfileActivity.class); _EL_   intent.putExtra(ProfileActivity.ARG_PILOT_ID,pilotId); _EL_   if (extras != null) { _EL_     intent.putExtra(CreateFlightActivity.KEY_VALUE_EXTRAS,extras); _EL_   } _EL_   activity.startActivity(intent); _EL_ } _EL_ ', 'void clear(){ _EL_   stack.clear(); _EL_ } _EL_ ', 'private void token(char c) throws ConfigurationException, IOException { _EL_   int t=st.nextToken(); _EL_   if (t != c) { _EL_     if (c == \'"\') { _EL_       syntax("a String"); _EL_     } _EL_  else { _EL_       syntax(new String(new char[]{\'\\\'\',c,+\'\\\'\'})); _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean equals(Object o){ _EL_   if (o instanceof LDAPUsers) { _EL_     LDAPUsers g=(LDAPUsers)o; _EL_     if ((selectedUserDNs != null) && (g.selectedUserDNs != null) && (selectedUserDNs.equals(g.selectedUserDNs))) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void stop(){ _EL_   duration+=System.currentTimeMillis() - start; _EL_ } _EL_ ', 'public Image rotate180Degrees(Image image,boolean maintainOpacity){ _EL_   int[] rgb=image.getRGB(); _EL_   int[] newRGB=new int[rgb.length]; _EL_   int width=image.getWidth(); _EL_   int height=image.getHeight(); _EL_   for (int y=0; y < height; y++) { _EL_     for (int x=0; x < width; x++) { _EL_       int destX=width - x - 1; _EL_       newRGB[destX + (height - y - 1) * width]=rgb[x + y * width]; _EL_     } _EL_   } _EL_   return EncodedImage.createFromRGB(newRGB,width,height,!maintainOpacity); _EL_ } _EL_ ', 'public static String createLink(String uri,String label){ _EL_   return "<a href=\'" + uri + "\'>"+ label+ "</a>"; _EL_ } _EL_ ', '@RequestMapping(value="",method={RequestMethod.GET}) @ResponseBody public List<JobInstance> list(JobListRequest jobRequest){ _EL_   List<JobInstance> jobInstanceList=Collections.emptyList(); _EL_   List<JobStatusEnum> statusList=new ArrayList<JobStatusEnum>(); _EL_   if (null != jobRequest.getStatus()) { _EL_     for (    int status : jobRequest.getStatus()) { _EL_       statusList.add(JobStatusEnum.getByCode(status)); _EL_     } _EL_   } _EL_   JobTimeFilterEnum timeFilter=JobTimeFilterEnum.getByCode(jobRequest.getTimeFilter()); _EL_   try { _EL_     jobInstanceList=jobService.listAllJobs(jobRequest.getCubeName(),jobRequest.getProjectName(),statusList,jobRequest.getLimit(),jobRequest.getOffset(),timeFilter); _EL_   } _EL_  catch (  Exception e) { _EL_     logger.error(e.getLocalizedMessage(),e); _EL_     throw new InternalErrorException(e); _EL_   } _EL_   return jobInstanceList; _EL_ } _EL_ ', 'public final void openFallbackInputStream() throws DataFallbackException { _EL_   if (inputBuf == null) { _EL_     if (LOG.isDebugEnabled())     LOG.debug("openFallbackInputStream() : Opening the reader for the " + dataFile.getName() + "file"); _EL_     try { _EL_       setInput(new BufferedReader(new FileReader(dataFile))); _EL_     } _EL_  catch (    IOException e) { _EL_       throw new DataFallbackException(e.getMessage()); _EL_     } _EL_   } _EL_ } _EL_ ', 'void close(int contextPrec,int ownPrec) throws IOException { _EL_   if (ownPrec < contextPrec)   out.write(")"); _EL_ } _EL_ ', 'public boolean deletePanel(){ _EL_   if (!super.deletePanel()) { _EL_     return false; _EL_   } _EL_   turnoutList.clear(); _EL_   trackList.clear(); _EL_   pointList.clear(); _EL_   xingList.clear(); _EL_   slipList.clear(); _EL_   turntableList.clear(); _EL_   return true; _EL_ } _EL_ ', 'private static PermissionCollection createAllPermissions(){ _EL_   Permissions permissions=new Permissions(); _EL_   permissions.add(new AllPermission()); _EL_   return permissions; _EL_ } _EL_ ', 'private List<FacetResult> sumAssociations() throws IOException { _EL_   DirectoryReader indexReader=DirectoryReader.open(indexDir); _EL_   IndexSearcher searcher=new IndexSearcher(indexReader); _EL_   TaxonomyReader taxoReader=new DirectoryTaxonomyReader(taxoDir); _EL_   FacetsCollector fc=new FacetsCollector(); _EL_   FacetsCollector.search(searcher,new MatchAllDocsQuery(),10,fc); _EL_   Facets tags=new TaxonomyFacetSumIntAssociations("$tags",taxoReader,config,fc); _EL_   Facets genre=new TaxonomyFacetSumFloatAssociations("$genre",taxoReader,config,fc); _EL_   List<FacetResult> results=new ArrayList<>(); _EL_   results.add(tags.getTopChildren(10,"tags")); _EL_   results.add(genre.getTopChildren(10,"genre")); _EL_   indexReader.close(); _EL_   taxoReader.close(); _EL_   return results; _EL_ } _EL_ ', 'private XMLElement2 createAnotherElement(){ _EL_   return new XMLElement2(this.entities,this.ignoreWhitespace,false,this.ignoreCase); _EL_ } _EL_ ', 'public void connectionLost(java.lang.Throwable cause){ _EL_   int rc=-1; _EL_   led.setAmber(); _EL_   led.setFlash(); _EL_   setTitleText("Connection Lost!....Reconnecting"); _EL_ synchronized (this) { _EL_     writeLogln("MQTT Connection Lost!....Reconnecting to " + mqtt.getServerURI()); _EL_   } _EL_   try { _EL_     while ((rc == -1) && connected) { _EL_       try { _EL_ synchronized (connLostWait) { _EL_           connLostWait.wait(10000); _EL_         } _EL_       } _EL_  catch (      InterruptedException iex) { _EL_       } _EL_ synchronized (this) { _EL_         if (connected) { _EL_           writeLog("MQTT reconnecting......"); _EL_           try { _EL_             connect(mqtt.getServerURI(),optionsComp.isPersistenceSelected()); _EL_             rc=0; _EL_           } _EL_  catch (          MqttException mqte) { _EL_             rc=-1; _EL_           } _EL_           if (rc == -1) { _EL_             writeLogln("failed"); _EL_           } _EL_  else { _EL_             writeLogln("success !"); _EL_           } _EL_         } _EL_       } _EL_     } _EL_     setTitleText(""); _EL_   } _EL_  catch (  Exception ex) { _EL_     setTitleText("MQTT connection broken !"); _EL_     ex.printStackTrace(); _EL_     disconnect(); _EL_   } _EL_  finally { _EL_     if (led.isFlashing()) { _EL_       led.setFlash(); _EL_     } _EL_   } _EL_   if (connected) { _EL_     led.setGreen(); _EL_     setConnected(true); _EL_   } _EL_  else { _EL_     led.setRed(); _EL_     setConnected(false); _EL_   } _EL_ } _EL_ ', '@Override public void stateChanged(ChangeEvent e){ _EL_   updateFrameTitle(); _EL_   updateMenu(); _EL_   if (e.getSource() instanceof JComponent) { _EL_     setTabTitle((JComponent)e.getSource()); _EL_   } _EL_ } _EL_ ', 'private void pauseForClientToJoin(){ _EL_   Wait.pause(2000); _EL_ } _EL_ ', 'private ResultPointsAndTransitions transitionsBetween(ResultPoint from,ResultPoint to){ _EL_   int fromX=(int)from.getX(); _EL_   int fromY=(int)from.getY(); _EL_   int toX=(int)to.getX(); _EL_   int toY=(int)to.getY(); _EL_   boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX); _EL_   if (steep) { _EL_     int temp=fromX; _EL_     fromX=fromY; _EL_     fromY=temp; _EL_     temp=toX; _EL_     toX=toY; _EL_     toY=temp; _EL_   } _EL_   int dx=Math.abs(toX - fromX); _EL_   int dy=Math.abs(toY - fromY); _EL_   int error=-dx / 2; _EL_   int ystep=fromY < toY ? 1 : -1; _EL_   int xstep=fromX < toX ? 1 : -1; _EL_   int transitions=0; _EL_   boolean inBlack=image.get(steep ? fromY : fromX,steep ? fromX : fromY); _EL_   for (int x=fromX, y=fromY; x != toX; x+=xstep) { _EL_     boolean isBlack=image.get(steep ? y : x,steep ? x : y); _EL_     if (isBlack != inBlack) { _EL_       transitions++; _EL_       inBlack=isBlack; _EL_     } _EL_     error+=dy; _EL_     if (error > 0) { _EL_       if (y == toY) { _EL_         break; _EL_       } _EL_       y+=ystep; _EL_       error-=dx; _EL_     } _EL_   } _EL_   return new ResultPointsAndTransitions(from,to,transitions); _EL_ } _EL_ ', 'private static ArrayList<ContainerVm> createVmList(int brokerId,int containerVmsNumber){ _EL_   ArrayList<ContainerVm> containerVms=new ArrayList<ContainerVm>(); _EL_   for (int i=0; i < containerVmsNumber; ++i) { _EL_     ArrayList<ContainerPe> peList=new ArrayList<ContainerPe>(); _EL_     int vmType=i / (int)Math.ceil((double)containerVmsNumber / 4.0D); _EL_     for (int j=0; j < ConstantsExamples.VM_PES[vmType]; ++j) { _EL_       peList.add(new ContainerPe(j,new CotainerPeProvisionerSimple((double)ConstantsExamples.VM_MIPS[vmType]))); _EL_     } _EL_     containerVms.add(new PowerContainerVm(IDs.pollId(ContainerVm.class),brokerId,(double)ConstantsExamples.VM_MIPS[vmType],(float)ConstantsExamples.VM_RAM[vmType],ConstantsExamples.VM_BW,ConstantsExamples.VM_SIZE,"Xen",new ContainerSchedulerTimeSharedOverSubscription(peList),new ContainerRamProvisionerSimple(ConstantsExamples.VM_RAM[vmType]),new ContainerBwProvisionerSimple(ConstantsExamples.VM_BW),peList,ConstantsExamples.SCHEDULING_INTERVAL)); _EL_   } _EL_   return containerVms; _EL_ } _EL_ ', 'public Query execute(PageContext pc,SQL sql,int maxrows,int fetchsize,TimeSpan timeout) throws PageException { _EL_   Stopwatch stopwatch=new Stopwatch(Stopwatch.UNIT_NANO); _EL_   stopwatch.start(); _EL_   String prettySQL=null; _EL_   Selects selects=null; _EL_   try { _EL_     SelectParser parser=new SelectParser(); _EL_     selects=parser.parse(sql.getSQLString()); _EL_     Query q=qoq.execute(pc,sql,selects,maxrows); _EL_     q.setExecutionTime(stopwatch.time()); _EL_     return q; _EL_   } _EL_  catch (  SQLParserException spe) { _EL_     prettySQL=SQLPrettyfier.prettyfie(sql.getSQLString()); _EL_     try { _EL_       Query query=executer.execute(pc,sql,prettySQL,maxrows); _EL_       query.setExecutionTime(stopwatch.time()); _EL_       return query; _EL_     } _EL_  catch (    PageException ex) { _EL_     } _EL_   } _EL_ catch (  PageException e) { _EL_   } _EL_   try { _EL_     boolean isUnion=false; _EL_     Set<String> tables=null; _EL_     if (selects != null) { _EL_       HSQLUtil2 hsql2=new HSQLUtil2(selects); _EL_       isUnion=hsql2.isUnion(); _EL_       tables=hsql2.getInvokedTables(); _EL_     } _EL_  else { _EL_       if (prettySQL == null)       prettySQL=SQLPrettyfier.prettyfie(sql.getSQLString()); _EL_       HSQLUtil hsql=new HSQLUtil(prettySQL); _EL_       tables=hsql.getInvokedTables(); _EL_       isUnion=hsql.isUnion(); _EL_     } _EL_     String strSQL=StringUtil.replace(sql.getSQLString(),"[","",false); _EL_     strSQL=StringUtil.replace(strSQL,"]","",false); _EL_     sql.setSQLString(strSQL); _EL_     return _execute(pc,sql,maxrows,fetchsize,timeout,stopwatch,tables,isUnion); _EL_   } _EL_  catch (  ParseException e) { _EL_     throw new DatabaseException(e.getMessage(),null,sql,null); _EL_   } _EL_ } _EL_ ', 'private void drawLines(Canvas canvas){ _EL_   for (int i=0; i < connectionOrder.size() - 1; i++) { _EL_     drawLine(canvas,circles[connectionOrder.get(i)],circles[connectionOrder.get(i + 1)]); _EL_   } _EL_ } _EL_ ', 'public WritableRaster createCompatibleWritableRaster(int w,int h){ _EL_   int[] bOffs={2,1,0}; _EL_   return Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,w,h,w * 3,3,bOffs,null); _EL_ } _EL_ ', 'public void signalEvent(){ _EL_   Collection<Semaphore> semaphores=_semaphores.values(); _EL_   for (  Semaphore semaphore : semaphores) { _EL_     semaphore.release(); _EL_     semaphores.remove(semaphore); _EL_   } _EL_ } _EL_ ', '@Override public boolean equals(Object obj){ _EL_   if (obj == this) { _EL_     return true; _EL_   } _EL_   if (!(obj instanceof KeyedObjects)) { _EL_     return false; _EL_   } _EL_   KeyedObjects that=(KeyedObjects)obj; _EL_   int count=getItemCount(); _EL_   if (count != that.getItemCount()) { _EL_     return false; _EL_   } _EL_   for (int i=0; i < count; i++) { _EL_     Comparable k1=getKey(i); _EL_     Comparable k2=that.getKey(i); _EL_     if (!k1.equals(k2)) { _EL_       return false; _EL_     } _EL_     Object o1=getObject(i); _EL_     Object o2=that.getObject(i); _EL_     if (o1 == null) { _EL_       if (o2 != null) { _EL_         return false; _EL_       } _EL_     } _EL_  else { _EL_       if (!o1.equals(o2)) { _EL_         return false; _EL_       } _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public void reset(String latex){ _EL_   parseString=new StringBuffer(latex); _EL_   len=parseString.length(); _EL_   formula.root=null; _EL_   pos=0; _EL_   spos=0; _EL_   line=0; _EL_   col=0; _EL_   group=0; _EL_   insertion=false; _EL_   atIsLetter=0; _EL_   arrayMode=false; _EL_   ignoreWhiteSpace=true; _EL_   firstpass(); _EL_ } _EL_ ', 'public RunScriptAction(NetworkPanel networkPanel){ _EL_   super("Run Script..."); _EL_   putValue(SMALL_ICON,ResourceManager.getImageIcon("Script.png")); _EL_   putValue(SHORT_DESCRIPTION,"Open and apply a network .bsh script to this network"); _EL_   this.networkPanel=networkPanel; _EL_ } _EL_ ', 'public int read(String table,String key,Set<String> fields,HashMap<String,ByteIterator> result){ _EL_   long st=System.nanoTime(); _EL_   int res=_db.read(table,key,fields,result); _EL_   long en=System.nanoTime(); _EL_   _measurements.measure("READ",(int)((en - st) / 1000)); _EL_   _measurements.reportReturnCode("READ",res); _EL_   return res; _EL_ } _EL_ ', 'public void addIssuer(X500Principal issuer){ _EL_   if (issuer == null) { _EL_     throw new NullPointerException("issuer == null"); _EL_   } _EL_   if (issuerNames == null) { _EL_     issuerNames=new ArrayList<String>(); _EL_   } _EL_   String name=issuer.getName(X500Principal.CANONICAL); _EL_   if (!issuerNames.contains(name)) { _EL_     issuerNames.add(name); _EL_   } _EL_   if (issuerPrincipals == null) { _EL_     issuerPrincipals=new ArrayList<X500Principal>(issuerNames.size()); _EL_   } _EL_   int size=issuerNames.size() - 1; _EL_   for (int i=issuerPrincipals.size(); i < size; i++) { _EL_     issuerPrincipals.add(new X500Principal(issuerNames.get(i))); _EL_   } _EL_   issuerPrincipals.add(issuer); _EL_ } _EL_ ', 'public static final void isCommentWF(DOMErrorHandler errorHandler,DOMErrorImpl error,DOMLocatorImpl locator,String datavalue,boolean isXML11Version){ _EL_   if (datavalue == null || (datavalue.length() == 0)) { _EL_     return; _EL_   } _EL_   char[] dataarray=datavalue.toCharArray(); _EL_   int datalength=dataarray.length; _EL_   if (isXML11Version) { _EL_     int i=0; _EL_     while (i < datalength) { _EL_       char c=dataarray[i++]; _EL_       if (XML11Char.isXML11Invalid(c)) { _EL_         if (XMLChar.isHighSurrogate(c) && i < datalength) { _EL_           char c2=dataarray[i++]; _EL_           if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) { _EL_             continue; _EL_           } _EL_         } _EL_         String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"InvalidCharInComment",new Object[]{Integer.toString(dataarray[i - 1],16)}); _EL_         reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character"); _EL_       } _EL_  else       if (c == \'-\' && i < datalength && dataarray[i] == \'-\') { _EL_         String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"DashDashInComment",null); _EL_         reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character"); _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     int i=0; _EL_     while (i < datalength) { _EL_       char c=dataarray[i++]; _EL_       if (XMLChar.isInvalid(c)) { _EL_         if (XMLChar.isHighSurrogate(c) && i < datalength) { _EL_           char c2=dataarray[i++]; _EL_           if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) { _EL_             continue; _EL_           } _EL_         } _EL_         String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"InvalidCharInComment",new Object[]{Integer.toString(dataarray[i - 1],16)}); _EL_         reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character"); _EL_       } _EL_  else       if (c == \'-\' && i < datalength && dataarray[i] == \'-\') { _EL_         String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"DashDashInComment",null); _EL_         reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character"); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public void upload(final InputStream in,String artifact,String version,String fileName,Properties props) throws IOException { _EL_   props.put(FILE_NAME_PROPERTY,fileName); _EL_   props.put(VERSION_PROPERTY,version); _EL_   props.put(ARTIFACT_PROPERTY,artifact); _EL_   storeProperties(artifact,version,props); _EL_   try (OutputStream out=newOutputStream(getArtifact(artifact,version,fileName))){ _EL_     IOUtils.copyLarge(in,out); _EL_   } _EL_   finally { _EL_     in.close(); _EL_   } _EL_ } _EL_ ', 'private static Class<?>[] types(Object... values){ _EL_   if (values == null) { _EL_     return new Class[0]; _EL_   } _EL_   Class<?>[] result=new Class[values.length]; _EL_   for (int i=0; i < values.length; i++) { _EL_     Object value=values[i]; _EL_     result[i]=value == null ? NULL.class : value.getClass(); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'default B with(String key,Class<?> value){ _EL_   return with(key,value != null ? value.getName() : null); _EL_ } _EL_ ', 'public void applyLayout(){ _EL_   layout.setInitialLocation(getPosition()); _EL_   layout.layoutNeurons(getNeuronList()); _EL_ } _EL_ ', 'boolean compareMethods(Method a,Method b){ _EL_   if ((a == null) != (b == null)) { _EL_     return false; _EL_   } _EL_   if (a != null && b != null) { _EL_     if (!a.equals(b)) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'MarkerSegment findMarkerSegment(int tag){ _EL_   Iterator iter=markerSequence.iterator(); _EL_   while (iter.hasNext()) { _EL_     MarkerSegment seg=(MarkerSegment)iter.next(); _EL_     if (seg.tag == tag) { _EL_       return seg; _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static SecretKey createAESKey(){ _EL_   try { _EL_     final KeyGenerator kgen=KeyGenerator.getInstance("AES"); _EL_     final int keySize=256; _EL_     kgen.init(keySize); _EL_     return kgen.generateKey(); _EL_   } _EL_  catch (  final NoSuchAlgorithmException e) { _EL_     e.printStackTrace(); _EL_   } _EL_   return null; _EL_ } _EL_ ', '@Override public void valueChange(ValueChangeEvent e){ _EL_   String name=e.getPropertyName(); _EL_   Object value=e.getNewValue(); _EL_   log.config(name + "=" + value); _EL_   if (value == null)   return; _EL_ } _EL_ ', '@RequestMapping(value="/page",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<PageResponse<UserDTO>> findAll(@RequestBody PageRequestByExample<UserDTO> prbe) throws URISyntaxException { _EL_   PageResponse<UserDTO> pageResponse=userDTOService.findAll(prbe); _EL_   return new ResponseEntity<>(pageResponse,new HttpHeaders(),HttpStatus.OK); _EL_ } _EL_ ', 'public boolean isReadOnly(boolean useSessionStatus) throws SQLException { _EL_   if (useSessionStatus && !this.isClosed && versionMeetsMinimum(5,6,5)&& !getUseLocalSessionState()&& getReadOnlyPropagatesToServer()) { _EL_     java.sql.Statement stmt=null; _EL_     java.sql.ResultSet rs=null; _EL_     try { _EL_       try { _EL_         stmt=getMetadataSafeStatement(); _EL_         rs=stmt.executeQuery("select @@session.tx_read_only"); _EL_         if (rs.next()) { _EL_           return rs.getInt(1) != 0; _EL_         } _EL_       } _EL_  catch (      SQLException ex1) { _EL_         if (ex1.getErrorCode() != MysqlErrorNumbers.ER_MUST_CHANGE_PASSWORD || getDisconnectOnExpiredPasswords()) { _EL_           throw SQLError.createSQLException("Could not retrieve transation read-only status server",SQLError.SQL_STATE_GENERAL_ERROR,ex1,getExceptionInterceptor()); _EL_         } _EL_       } _EL_     } _EL_   finally { _EL_       if (rs != null) { _EL_         try { _EL_           rs.close(); _EL_         } _EL_  catch (        Exception ex) { _EL_         } _EL_         rs=null; _EL_       } _EL_       if (stmt != null) { _EL_         try { _EL_           stmt.close(); _EL_         } _EL_  catch (        Exception ex) { _EL_         } _EL_         stmt=null; _EL_       } _EL_     } _EL_   } _EL_   return this.readOnly; _EL_ } _EL_ ', 'public void addHop(int id){ _EL_   if (entities == null) { _EL_     return; _EL_   } _EL_   hopsNumber++; _EL_   entities.add(Integer.valueOf(id)); _EL_ } _EL_ ', 'public void gc(){ _EL_   System.gc(); _EL_ } _EL_ ', 'private Node deleteMin(Node x){ _EL_   if (x.left == null)   return x.right; _EL_   x.left=deleteMin(x.left); _EL_   x.size=1 + size(x.left) + size(x.right); _EL_   x.height=1 + Math.max(height(x.left),height(x.right)); _EL_   return balance(x); _EL_ } _EL_ ', 'public void pushFile(String local,String remote,ISyncProgressMonitor monitor) throws SyncException, IOException, TimeoutException { _EL_   File f=new File(local); _EL_   if (!f.exists()) { _EL_     throw new SyncException(SyncError.NO_LOCAL_FILE); _EL_   } _EL_   if (f.isDirectory()) { _EL_     throw new SyncException(SyncError.LOCAL_IS_DIRECTORY); _EL_   } _EL_   monitor.start((int)f.length()); _EL_   doPushFile(local,remote,monitor); _EL_   monitor.stop(); _EL_ } _EL_ ', 'public Properties extractProperties(Iterable<Map.Entry<String,String>> propSrc){ _EL_   Properties result=new Properties(); _EL_   for (  Map.Entry<String,String> entry : propSrc) { _EL_     String name=entry.getKey(); _EL_     if (isNamespacedProperty(name)) { _EL_       String val=entry.getValue(); _EL_       result.setProperty(name,val); _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'int boundedIndexOf(String string,char search,int start,int end){ _EL_   int retValue=string.indexOf(search,start); _EL_   if (retValue >= end) { _EL_     return -1; _EL_   } _EL_   return retValue; _EL_ } _EL_ ', 'public void deleteInstances(int[] rowIndices){ _EL_   int i; _EL_   Arrays.sort(rowIndices); _EL_   addUndoPoint(); _EL_   m_IgnoreChanges=true; _EL_   for (i=rowIndices.length - 1; i >= 0; i--) { _EL_     deleteInstanceAt(rowIndices[i],false); _EL_   } _EL_   m_IgnoreChanges=false; _EL_   notifyListener(new TableModelEvent(this,rowIndices[0],rowIndices[rowIndices.length - 1],TableModelEvent.ALL_COLUMNS,TableModelEvent.DELETE)); _EL_ } _EL_ ', 'public void characters(String characters) throws SAXException { _EL_   final int len=characters.length(); _EL_   if (len > m_charsBuff.length) { _EL_     m_charsBuff=new char[len * 2 + 1]; _EL_   } _EL_   characters.getChars(0,len,m_charsBuff,0); _EL_   characters(m_charsBuff,0,len); _EL_ } _EL_ ', 'private void readEntityDeclaration() throws IOException, XmlPullParserException { _EL_   read(START_ENTITY); _EL_   boolean generalEntity=true; _EL_   skip(); _EL_   if (peekCharacter() == \'%\') { _EL_     generalEntity=false; _EL_     position++; _EL_     skip(); _EL_   } _EL_   String name=readName(); _EL_   skip(); _EL_   int quote=peekCharacter(); _EL_   String entityValue; _EL_   if (quote == \'"\' || quote == \'\\\'\') { _EL_     position++; _EL_     entityValue=readValue((char)quote,true,false,ValueContext.ENTITY_DECLARATION); _EL_     if (peekCharacter() == quote) { _EL_       position++; _EL_     } _EL_   } _EL_  else   if (readExternalId(true,false)) { _EL_     entityValue=""; _EL_     skip(); _EL_     if (peekCharacter() == NDATA[0]) { _EL_       read(NDATA); _EL_       skip(); _EL_       readName(); _EL_     } _EL_   } _EL_  else { _EL_     throw new XmlPullParserException("Expected entity value or external ID",this,null); _EL_   } _EL_   if (generalEntity && processDocDecl) { _EL_     if (documentEntities == null) { _EL_       documentEntities=new HashMap<String,char[]>(); _EL_     } _EL_     documentEntities.put(name,entityValue.toCharArray()); _EL_   } _EL_   skip(); _EL_   read(\'>\'); _EL_ } _EL_ ', 'public boolean is_selected(ItemSelectionChoice p_choice){ _EL_   return sel_array[p_choice.ordinal()]; _EL_ } _EL_ ', 'private boolean compareAndDecrementWorkerCount(int expect){ _EL_   return ctl.compareAndSet(expect,expect - 1); _EL_ } _EL_ ', 'public static boolean isJavaValidName(String str){ _EL_   if (str.isEmpty())   return false; _EL_   if (javaKeys.contains(str))   return false; _EL_   char first=str.charAt(0); _EL_   if (isValidNameStartChar(first)) { _EL_     for (int i=1; i < str.length(); ++i) { _EL_       char c=str.charAt(i); _EL_       if (!isValidNameChar(c))       return false; _EL_     } _EL_     return true; _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'private static byte[] concatBytes(byte[] array1,byte[] array2){ _EL_   byte[] cBytes=new byte[array1.length + array2.length]; _EL_   try { _EL_     System.arraycopy(array1,0,cBytes,0,array1.length); _EL_     System.arraycopy(array2,0,cBytes,array1.length,array2.length); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_   return cBytes; _EL_ } _EL_ ', 'void writeValueProperties(String fullId,long dbId,String localId,JsonValue value,Connection connection) throws SQLException { _EL_   if (cfg.hasPossibleSearchableProperties()) { _EL_     Integer batchingCount=0; _EL_     PreparedStatement propCreateStatement=getPreparedStatement(connection,QueryDefinition.PROPCREATEQUERYSTR); _EL_     try { _EL_       batchingCount=writeValueProperties(fullId,dbId,localId,value,connection,propCreateStatement,batchingCount); _EL_       if (enableBatching && batchingCount > 0) { _EL_         int[] numUpdates=propCreateStatement.executeBatch(); _EL_         logger.debug("Batch update of objectproperties updated: {}",numUpdates); _EL_         if (logger.isDebugEnabled()) { _EL_           logger.debug("Writing batch of objectproperties, updated: {}",Arrays.asList(numUpdates)); _EL_         } _EL_         propCreateStatement.clearBatch(); _EL_       } _EL_     } _EL_   finally { _EL_       CleanupHelper.loggedClose(propCreateStatement); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected void finishGridRow(){ _EL_   GridBagConstraints constraints=new GridBagConstraints(); _EL_   constraints.gridwidth=GridBagConstraints.REMAINDER; _EL_   constraints.weightx=0; _EL_   final JLabel icon; _EL_   if (param.isOptional()) { _EL_     if (param.isDefined() && param.tookDefaultValue() && !(param instanceof Flag)) { _EL_       icon=new JLabel(StockIcon.getStockIcon(StockIcon.DIALOG_INFORMATION)); _EL_       icon.setToolTipText("Default value: " + param.getDefaultValueAsString()); _EL_     } _EL_  else { _EL_       icon=new JLabel(); _EL_       icon.setMinimumSize(new Dimension(16,16)); _EL_     } _EL_   } _EL_  else { _EL_     if (!param.isDefined()) { _EL_       icon=new JLabel(StockIcon.getStockIcon(StockIcon.DIALOG_ERROR)); _EL_       icon.setToolTipText("Missing value."); _EL_     } _EL_  else { _EL_       icon=new JLabel(); _EL_       icon.setMinimumSize(new Dimension(16,16)); _EL_     } _EL_   } _EL_   parent.add(icon,constraints); _EL_ } _EL_ ', 'public void pingReceived(Ping pong){ _EL_   long now=System.currentTimeMillis(); _EL_   long previousReceived=(int)(lastPingSent.get() & 0xffffffff); _EL_   log.debug("Pong from client id {} at {} with value {}, previous received at {}",new Object[]{getId(),now,pong.getValue2(),previousReceived}); _EL_   if (pong.getValue2() == previousReceived) { _EL_     lastPingTime.set((int)(now & 0xffffffff) - pong.getValue2()); _EL_   } _EL_   lastPongReceived.set(now); _EL_ } _EL_ ', 'public static int findObjectLiteral(Object literal){ _EL_ synchronized (objectLiterals) { _EL_     Integer result=objectLiterals.get(literal); _EL_     return result == null ? 0 : result.intValue(); _EL_   } _EL_ } _EL_ ', "public static String toLowerCase(String string){ _EL_   boolean changed=false; _EL_   char[] chars=string.toCharArray(); _EL_   for (int i=0; i != chars.length; i++) { _EL_     char ch=chars[i]; _EL_     if ('A' <= ch && 'Z' >= ch) { _EL_       changed=true; _EL_       chars[i]=(char)(ch - 'A' + 'a'); _EL_     } _EL_   } _EL_   if (changed) { _EL_     return new String(chars); _EL_   } _EL_   return string; _EL_ } _EL_ ", 'public static void write(OutputStream out,int c){ _EL_   if (out == null) { _EL_     throw new IllegalArgumentException("output stream null."); _EL_   } _EL_   try { _EL_     out.write(c); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new RuntimeException(e.getMessage(),e); _EL_   } _EL_ } _EL_ ', 'public static double lnFactorial(int x){ _EL_   if (x < 0)   throw new IllegalArgumentException("Invalid input to factorial: " + x); _EL_  else   if (x > 32)   return lnGamma(x + 1); _EL_  else { _EL_     int l=factorialsBuffer.size(); _EL_     for (int i=l; i <= x; i++) { _EL_       factorialsBuffer.add(log(i) + factorialsBuffer.get(i - 1)); _EL_     } _EL_     return factorialsBuffer.get(x); _EL_   } _EL_ } _EL_ ', 'public int addAndGet(T obj,int delta){ _EL_   for (; ; ) { _EL_     int current=get(obj); _EL_     int next=current + delta; _EL_     if (compareAndSet(obj,current,next))     return next; _EL_   } _EL_ } _EL_ ', 'public E poll(){ _EL_   if (isEmpty()) { _EL_     return null; _EL_   } _EL_   E result=elements[0]; _EL_   removeAt(0); _EL_   return result; _EL_ } _EL_ ', 'public MovieSetAddAction(boolean withTitle){ _EL_   if (withTitle) { _EL_     putValue(NAME,BUNDLE.getString("movieset.add.desc")); _EL_   } _EL_   putValue(LARGE_ICON_KEY,IconManager.LIST_ADD); _EL_   putValue(SMALL_ICON,IconManager.LIST_ADD); _EL_   putValue(SHORT_DESCRIPTION,BUNDLE.getString("movieset.add.desc")); _EL_ } _EL_ ', 'public boolean expired(long expire){ _EL_   long mod=time.getTime(); _EL_   long now=System.currentTimeMillis(); _EL_   long diff=now - mod; _EL_   if (diff > expire && getSource() != NETWORK) { _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', '@LoopProcessorAnnotations(loopProcessorAnnotations={@LoopProcessorAnnotation(processPath={IModelingElementDefinitions.CLASSES_PROCESSOR,IModelingElementDefinitions.OPERATIONS_PROCESSOR}),@LoopProcessorAnnotation(processPath={IModelingElementDefinitions.INTERFACES_PROCESSOR,IModelingElementDefinitions.OPERATIONS_PROCESSOR})},aspect=LoopAspectConstants.AFTER) public static void operationsProcessor(@GenerationRegistry GenerationPolicyRegistry generationValueGetter,@GenerationBaseElement Object element,@GenerationLoopElement Object modelPackage,@GenerationLoopElement(id={IModelingElementDefinitions.CLASSES_PROCESSOR,IModelingElementDefinitions.INTERFACES_PROCESSOR}) Object parent){ _EL_   List<Object> userAddedDependTypes=generationValueGetter.getValues(DEPEND_TYPES_TRACKER,parent); _EL_   List<Object> parametersArgument=generationValueGetter.getValues(IModelingDecisions.OPERATION_PARAMETER_ARGUMENT,element,parent); _EL_   for (  Object item : parametersArgument) { _EL_     if (item instanceof SimpleEntry == false) { _EL_       continue; _EL_     } _EL_     SimpleEntry<?,?> simpleEntry=(SimpleEntry<?,?>)item; _EL_     Object type=simpleEntry.getKey(); _EL_     if (!userAddedDependTypes.contains(type)) { _EL_       List<Object> types=generationValueGetter.getValues(IModelingConstants.TYPES_TRACKER,modelPackage,type); _EL_       if (types.isEmpty()) { _EL_         continue; _EL_       } _EL_       addDepend(generationValueGetter,parent,type); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static int binarySearchCeil(long[] a,long key,boolean inclusive,boolean stayInBounds){ _EL_   int index=Arrays.binarySearch(a,key); _EL_   index=index < 0 ? ~index : (inclusive ? index : (index + 1)); _EL_   return stayInBounds ? Math.min(a.length - 1,index) : index; _EL_ } _EL_ ', 'public void appendCell(int value){ _EL_   appendCell(String.valueOf(value)); _EL_ } _EL_ ', 'public int match(String s){ _EL_   String rep=new String(_dataChars,0,_nDataChars); _EL_   return rep.indexOf(s); _EL_ } _EL_ ', 'private BshMethod loadScriptedCommand(InputStream in,String name,Class[] argTypes,String resourcePath,Interpreter interpreter) throws UtilEvalError { _EL_   try { _EL_     interpreter.eval(new InputStreamReader(in),this,resourcePath); _EL_   } _EL_  catch (  EvalError e) { _EL_     Interpreter.debug(e.toString()); _EL_     throw new UtilEvalError("Error loading script: " + e.getMessage()); _EL_   } _EL_   BshMethod meth=getMethod(name,argTypes); _EL_   return meth; _EL_ } _EL_ ', 'default Path append(String relPath){ _EL_   return append(Path.parse(relPath)); _EL_ } _EL_ ', 'public int readSI32() throws IOException { _EL_   synchBits(); _EL_   int b0=in.read(); _EL_   if (b0 < 0) { _EL_     throw new IOException("Unexpected end of input"); _EL_   } _EL_   int b1=in.read(); _EL_   if (b1 < 0) { _EL_     throw new IOException("Unexpected end of input"); _EL_   } _EL_   int b2=in.read(); _EL_   if (b2 < 0) { _EL_     throw new IOException("Unexpected end of input"); _EL_   } _EL_   byte[] aByte=new byte[1]; _EL_   int count=in.read(aByte); _EL_   if (count < 1) { _EL_     throw new IOException("Unexpected end of input"); _EL_   } _EL_   bytesRead+=4; _EL_   return (int)((aByte[0] * 256 * 256* 256) + (b2 * 256 * 256) + (b1 * 256)+ b0); _EL_ } _EL_ ', 'public void addAttributeValue(Principal principal,Guid guid,String name,String value) throws UMSException { _EL_   modifyAttributeValue(ModificationType.ADD,principal,guid,name,value); _EL_ } _EL_ ', 'public static void copyStream(InputStream inputStream,OutputStream outputStream){ _EL_   if (inputStream != null && outputStream != null) { _EL_     try { _EL_       int length=-1; _EL_       byte[] buffer=new byte[Constant.Capacity.BYTES_PER_MB]; _EL_       while ((length=inputStream.read(buffer,0,buffer.length)) != -1) { _EL_         outputStream.write(buffer,0,length); _EL_         outputStream.flush(); _EL_       } _EL_     } _EL_  catch (    Exception e) { _EL_       throw new FileUtilException(e); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static final void writeStringArrayXml(String[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException { _EL_   if (val == null) { _EL_     out.startTag(null,"null"); _EL_     out.endTag(null,"null"); _EL_     return; _EL_   } _EL_   out.startTag(null,"string-array"); _EL_   if (name != null) { _EL_     out.attribute(null,"name",name); _EL_   } _EL_   final int n=val.length; _EL_   out.attribute(null,"num",Integer.toString(n)); _EL_   for (int i=0; i < n; i++) { _EL_     if (val[i] == null) { _EL_       out.startTag(null,"null"); _EL_       out.endTag(null,"null"); _EL_     } _EL_  else { _EL_       out.startTag(null,"item"); _EL_       out.attribute(null,"value",val[i]); _EL_       out.endTag(null,"item"); _EL_     } _EL_   } _EL_   out.endTag(null,"string-array"); _EL_ } _EL_ ', 'private Spannable highlightHashtags(Spannable text){ _EL_   if (text == null) { _EL_     return null; _EL_   } _EL_   final Matcher matcher=PATTERN_HASHTAGS.matcher(text); _EL_   while (matcher.find()) { _EL_     final int start=matcher.start(1); _EL_     final int end=matcher.end(1); _EL_     text.setSpan(new ForegroundColorSpan(mHighlightColor),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); _EL_     text.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); _EL_   } _EL_   return text; _EL_ } _EL_ ', 'public Image flipImageVertically(Image image,boolean maintainOpacity){ _EL_   int[] rgb=image.getRGB(); _EL_   int[] newRGB=new int[rgb.length]; _EL_   int width=image.getWidth(); _EL_   int height=image.getHeight(); _EL_   for (int y=0; y < height; y++) { _EL_     for (int x=0; x < width; x++) { _EL_       newRGB[x + (height - y - 1) * width]=rgb[x + y * width]; _EL_     } _EL_   } _EL_   return EncodedImage.createFromRGB(newRGB,width,height,!maintainOpacity); _EL_ } _EL_ ', 'public int hashCode(){ _EL_   int myhash=37 + policyIdentifier.hashCode(); _EL_   myhash=37 * myhash + policyQualifiers.hashCode(); _EL_   return myhash; _EL_ } _EL_ ', '@Override public boolean isRotateEdgeLabels(){ _EL_   return graphCreator.isRotatingEdgeLabels(); _EL_ } _EL_ ', 'public boolean add(terminal sym) throws internal_error { _EL_   boolean result; _EL_   not_null(sym); _EL_   result=_elements.get(sym.index()); _EL_   if (!result)   _elements.set(sym.index()); _EL_   return result; _EL_ } _EL_ ', 'private int[] versionParts(String version){ _EL_   String[] parts=version.split("\\\\."); _EL_   int[] p=new int[3]; _EL_   for (int i=0; i < 3; i++) { _EL_     int pi; _EL_     if (i < parts.length) { _EL_       p[i]=Integer.parseInt(parts[i]); _EL_     } _EL_  else { _EL_       p[i]=-1; _EL_     } _EL_   } _EL_   return p; _EL_ } _EL_ ', 'static String[] splitLine(final String line){ _EL_   final int ix0=line.indexOf(\'#\'); _EL_   final int ix=ix0 == -1 ? line.length() : ix0; _EL_   final String lessComment=line.substring(0,ix); _EL_   if (lessComment.matches("^\\\\s*$")) { _EL_     return null; _EL_   } _EL_   return lessComment.split("\\\\s+"); _EL_ } _EL_ ', 'private void deleteSMS(String cmd,String search){ _EL_   int nbDeleted=-2; _EL_   if (cmd.equals("all")) { _EL_     nbDeleted=mSmsManager.deleteAllSms(); _EL_   } _EL_  else   if (cmd.equals("sent")) { _EL_     nbDeleted=mSmsManager.deleteSentSms(); _EL_   } _EL_  else   if (cmd.startsWith("last")) { _EL_     Integer number=Tools.parseInt(search); _EL_     if (number == null) { _EL_       number=1; _EL_     } _EL_     if (cmd.equals("last")) { _EL_       nbDeleted=mSmsManager.deleteLastSms(number); _EL_     } _EL_  else     if (cmd.equals("lastin")) { _EL_       nbDeleted=mSmsManager.deleteLastInSms(number); _EL_     } _EL_  else     if (cmd.equals("lastout")) { _EL_       nbDeleted=mSmsManager.deleteLastOutSms(number); _EL_     } _EL_  else { _EL_       send(R.string.chat_del_sms_error); _EL_     } _EL_   } _EL_  else   if (cmd.equals("contact") && search != null) { _EL_     ArrayList<Contact> contacts=ContactsManager.getMatchingContacts(sContext,search); _EL_     if (contacts.size() > 1) { _EL_       StringBuilder sb=new StringBuilder(getString(R.string.chat_specify_details)); _EL_       sb.append(Tools.LineSep); _EL_       for (      Contact contact : contacts) { _EL_         sb.append(contact.name); _EL_         sb.append(Tools.LineSep); _EL_       } _EL_       send(sb.toString()); _EL_     } _EL_  else     if (contacts.size() == 1) { _EL_       Contact contact=contacts.get(0); _EL_       send(R.string.chat_del_sms_from,contact.name); _EL_       nbDeleted=mSmsManager.deleteSmsByContact(contact.rawIds); _EL_     } _EL_  else { _EL_       send(R.string.chat_no_match_for,search); _EL_     } _EL_   } _EL_  else   if (cmd.equals("number") && search != null) { _EL_     send(R.string.chat_del_sms_from,search); _EL_     nbDeleted=mSmsManager.deleteSmsByNumber(search); _EL_     if (nbDeleted <= 0) { _EL_       send(R.string.chat_no_match_for,search); _EL_     } _EL_   } _EL_  else { _EL_     send(R.string.chat_del_sms_syntax); _EL_   } _EL_   if (nbDeleted >= 0) { _EL_     send(R.string.chat_del_sms_nb,nbDeleted); _EL_   } _EL_  else   if (nbDeleted == -1) { _EL_     send(R.string.chat_del_sms_error); _EL_   } _EL_ } _EL_ ', 'private static BlocksRemoveInfo isStartBlock(BlockNode remBlock,BlockNode startBlock){ _EL_   List<InsnNode> remInsns=remBlock.getInstructions(); _EL_   List<InsnNode> startInsns=startBlock.getInstructions(); _EL_   if (remInsns.size() < startInsns.size()) { _EL_     return null; _EL_   } _EL_   int startPos=remInsns.size() - startInsns.size(); _EL_   int endPos=0; _EL_   if (!checkInsns(remInsns,startInsns,startPos,null)) { _EL_     if (checkInsns(remInsns,startInsns,0,null)) { _EL_       startPos=0; _EL_       endPos=startInsns.size(); _EL_     } _EL_  else { _EL_       boolean found=false; _EL_       for (int i=1; i < startPos; i++) { _EL_         if (checkInsns(remInsns,startInsns,i,null)) { _EL_           startPos=i; _EL_           endPos=startInsns.size() + i; _EL_           found=true; _EL_           break; _EL_         } _EL_       } _EL_       if (!found) { _EL_         return null; _EL_       } _EL_     } _EL_   } _EL_   BlocksPair startPair=new BlocksPair(remBlock,startBlock); _EL_   BlocksRemoveInfo removeInfo=new BlocksRemoveInfo(startPair); _EL_   removeInfo.setStartSplitIndex(startPos); _EL_   removeInfo.setEndSplitIndex(endPos); _EL_   if (endPos != 0) { _EL_     removeInfo.setEnd(startPair); _EL_   } _EL_   if (!checkInsns(remInsns,startInsns,startPos,removeInfo)) { _EL_     return null; _EL_   } _EL_   return removeInfo; _EL_ } _EL_ ', 'public static Sentence parse(final String text,final ConversationContext ctx){ _EL_   String txt; _EL_   if (text == null) { _EL_     txt=""; _EL_   } _EL_  else { _EL_     if ((ctx != null) && ctx.isForMatching()) { _EL_       final ExpressionMatcher matcher=new ExpressionMatcher(); _EL_       txt=matcher.readMatchingFlags(text); _EL_       if (matcher.isAnyFlagSet()) { _EL_         return matcher.parseSentence(txt,ctx); _EL_       } _EL_     } _EL_  else { _EL_       txt=text; _EL_     } _EL_   } _EL_   txt=txt.trim(); _EL_   final SentenceImplementation sentence=new SentenceImplementation(ctx,txt); _EL_   try { _EL_     final ConversationParser parser=new ConversationParser(sentence); _EL_     sentence.parse(parser); _EL_     sentence.classifyWords(parser); _EL_     if ((ctx != null) && ctx.getMergeExpressions()) { _EL_       sentence.evaluateSentenceType(); _EL_       sentence.mergeWords(); _EL_       if (!ctx.isForMatching()) { _EL_         sentence.standardizeSentenceType(); _EL_         sentence.performaAliasing(); _EL_       } _EL_     } _EL_     sentence.setError(parser.getErrorString()); _EL_   } _EL_  catch (  final Exception e) { _EL_     LOGGER.error("ConversationParser.parse(): caught Exception while parsing \'" + text + \'\\\'\'); _EL_     sentence.setError(e.getMessage()); _EL_     e.printStackTrace(); _EL_   } _EL_   return sentence; _EL_ } _EL_ ', 'public void putLong(long pos,long val){ _EL_   unsafe.putLong(pos + addr,val); _EL_ } _EL_ ', 'public String rma(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){ _EL_   Integer M_RMA_ID=(Integer)value; _EL_   if (M_RMA_ID == null || M_RMA_ID.intValue() == 0)   return ""; _EL_   if (isCalloutActive())   return ""; _EL_   MRMA rma=new MRMA(ctx,M_RMA_ID.intValue(),null); _EL_   MInOut originalReceipt=rma.getShipment(); _EL_   if (rma.get_ID() != 0) { _EL_     mTab.setValue("DateOrdered",originalReceipt.getDateOrdered()); _EL_     mTab.setValue("POReference",originalReceipt.getPOReference()); _EL_     mTab.setValue("AD_Org_ID",new Integer(originalReceipt.getAD_Org_ID())); _EL_     mTab.setValue("AD_OrgTrx_ID",new Integer(originalReceipt.getAD_OrgTrx_ID())); _EL_     mTab.setValue("C_Activity_ID",new Integer(originalReceipt.getC_Activity_ID())); _EL_     mTab.setValue("C_Campaign_ID",new Integer(originalReceipt.getC_Campaign_ID())); _EL_     mTab.setValue("C_Project_ID",new Integer(originalReceipt.getC_Project_ID())); _EL_     mTab.setValue("User1_ID",new Integer(originalReceipt.getUser1_ID())); _EL_     mTab.setValue("User2_ID",new Integer(originalReceipt.getUser2_ID())); _EL_     mTab.setValue("M_Warehouse_ID",new Integer(originalReceipt.getM_Warehouse_ID())); _EL_     mTab.setValue("DeliveryRule",originalReceipt.getDeliveryRule()); _EL_     mTab.setValue("DeliveryViaRule",originalReceipt.getDeliveryViaRule()); _EL_     mTab.setValue("M_Shipper_ID",new Integer(originalReceipt.getM_Shipper_ID())); _EL_     mTab.setValue("FreightCostRule",originalReceipt.getFreightCostRule()); _EL_     mTab.setValue("FreightAmt",originalReceipt.getFreightAmt()); _EL_     mTab.setValue("C_BPartner_ID",new Integer(originalReceipt.getC_BPartner_ID())); _EL_     mTab.setValue("C_BPartner_Location_ID",new Integer(originalReceipt.getC_BPartner_Location_ID())); _EL_     if (originalReceipt.getAD_User_ID() > 0)     mTab.setValue("AD_User_ID",new Integer(originalReceipt.getAD_User_ID())); _EL_  else     mTab.setValue("AD_User_ID",null); _EL_   } _EL_   return ""; _EL_ } _EL_ ', 'private void handleJsonCreateAccount(RequestAndResponse requestAndResponse) throws IOException, ServletException { _EL_   requestAndResponse.setResponseContentTypeJson(); _EL_   String userName, password, password2, email; _EL_   boolean mayContact=false; _EL_   String csrft; _EL_   try { _EL_     final JsonNodeHelper json=getJsonNode(requestAndResponse); _EL_     userName=json.getString("username"); _EL_     password=json.getString("password"); _EL_     password2=json.getString("password2"); _EL_     email=json.getString("email"); _EL_     mayContact=json.getBoolean("mayContact"); _EL_     csrft=json.getString("csrft"); _EL_   } _EL_  catch (  final IOException e) { _EL_     returnJson400(requestAndResponse,servletText.errorJson()); _EL_     return; _EL_   } _EL_   if (userName != null) { _EL_     userName=userName.toLowerCase(); _EL_   } _EL_   if (isTheCsrftWrong(requestAndResponse,csrft)) { _EL_     returnJson400(requestAndResponse,servletText.errorWrongCsrft()); _EL_     return; _EL_   } _EL_   if (!allowSelfSignUp) { _EL_     returnJson400(requestAndResponse,servletText.errorSelfSignUpNotAllowed()); _EL_     return; _EL_   } _EL_   if (userName == null || userName.isEmpty()) { _EL_     returnJson400(requestAndResponse,servletText.errorUsernameMustNotBeBlank()); _EL_     return; _EL_   } _EL_   if (password == null || password.isEmpty()) { _EL_     returnJson400(requestAndResponse,servletText.errorFirstPasswordMustBeSet(true,null)); _EL_     return; _EL_   } _EL_   if (password == null || password2.isEmpty()) { _EL_     returnJson400(requestAndResponse,servletText.errorSecondPasswordMustBeSet(true,null)); _EL_     return; _EL_   } _EL_   if (!password2.equals(password)) { _EL_     returnJson400(requestAndResponse,servletText.errorPasswordsMustMatch()); _EL_     return; _EL_   } _EL_   if (!AccountAttributeValidator.isUserNameValid(userName)) { _EL_     returnJson400(requestAndResponse,servletText.errorUserNameIsNotValid()); _EL_     return; _EL_   } _EL_   if (!AccountAttributeValidator.isPasswordValid(password)) { _EL_     returnJson400(requestAndResponse,servletText.errorPasswordIsNotValid()); _EL_     return; _EL_   } _EL_   if (email != null && email.isEmpty()) { _EL_     email=null; _EL_   } _EL_   if (email != null && !AccountAttributeValidator.isEmailValid(email)) { _EL_     returnJson400(requestAndResponse,servletText.errorEmailIsNotValid()); _EL_     return; _EL_   } _EL_   try { _EL_     User user=dbLogic.getUserByUserName(userName); _EL_     if (user != null) { _EL_       returnJson400(requestAndResponse,servletText.errorUserNameIsAlreadyTaken()); _EL_       return; _EL_     } _EL_     user=dbLogic.createUser(userName); _EL_     if (user == null) { _EL_       returnJson400(requestAndResponse,servletText.errorCouldNotCreateAccount()); _EL_       return; _EL_     } _EL_     user.setPassword(DigestUtils.sha1Hex(password)); _EL_     user.setEmail(email); _EL_     user.setMayContact(mayContact); _EL_     mapSessionToUser(requestAndResponse,user.getId()); _EL_     dbLogic.commit(); _EL_     returnJson200(requestAndResponse); _EL_   } _EL_  catch (  final PersistenceException e) { _EL_     logger.log(Level.INFO,"Exception",e); _EL_     returnJson500(requestAndResponse,servletText.errorInternalDatabase()); _EL_   } _EL_ } _EL_ ', 'public Arg(String aName,String desc,int expectedNumberOfArguments,boolean expectDashedArguments){ _EL_   name=aName; _EL_   description=desc; _EL_   numExpectedValues=expectedNumberOfArguments; _EL_   c=name.charAt(0); _EL_   dashedArguments=expectDashedArguments; _EL_ } _EL_ ', 'private boolean remove(Object o,Object[] snapshot,int index){ _EL_   final ReentrantLock lock=this.lock; _EL_   lock.lock(); _EL_   try { _EL_     Object[] current=getArray(); _EL_     int len=current.length; _EL_     if (snapshot != current)     findIndex: { _EL_       int prefix=Math.min(index,len); _EL_       for (int i=0; i < prefix; i++) { _EL_         if (current[i] != snapshot[i] && eq(o,current[i])) { _EL_           index=i; _EL_           break findIndex; _EL_         } _EL_       } _EL_       if (index >= len)       return false; _EL_       if (current[index] == o)       break findIndex; _EL_       index=indexOf(o,current,index,len); _EL_       if (index < 0)       return false; _EL_     } _EL_     Object[] newElements=new Object[len - 1]; _EL_     System.arraycopy(current,0,newElements,0,index); _EL_     System.arraycopy(current,index + 1,newElements,index,len - index - 1); _EL_     setArray(newElements); _EL_     return true; _EL_   } _EL_   finally { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', 'private static void generateJavaScriptLogAlertCloseWindow(Writer writer,String message) throws IOException { _EL_   writer.write("<script language=\\"javascript\\">alert(\\"" + message + "\\");"); _EL_   writer.write("window.close();"); _EL_   writer.write("</script>"); _EL_ } _EL_ ', 'private void consume(){ _EL_   consumer.subscribe(topics); _EL_   while (running.get()) { _EL_     try { _EL_       ConsumerRecords records=consumer.poll(pollIntervalMs); _EL_       if (records == null) { _EL_         continue; _EL_       } _EL_       Iterator<ConsumerRecord<String,String>> iterator=records.iterator(); _EL_       while (iterator.hasNext()) { _EL_         sendMessage(iterator.next()); _EL_       } _EL_     } _EL_  catch (    Exception ex) { _EL_       String error="Error consuming messages from kafka"; _EL_       logger.error(error,ex); _EL_       bus.send(ConfigConstants.CONSUMER_ERROR_TOPIC,getErrorString(error,ex.getMessage())); _EL_     } _EL_   } _EL_ } _EL_ ', 'private byte[] readRawBytesSlowPath(final int size) throws IOException { _EL_   if (size <= 0) { _EL_     if (size == 0) { _EL_       return Internal.EMPTY_BYTE_ARRAY; _EL_     } _EL_  else { _EL_       throw InvalidProtocolBufferException.negativeSize(); _EL_     } _EL_   } _EL_   if (totalBytesRetired + bufferPos + size > currentLimit) { _EL_     skipRawBytes(currentLimit - totalBytesRetired - bufferPos); _EL_     throw InvalidProtocolBufferException.truncatedMessage(); _EL_   } _EL_   if (size < BUFFER_SIZE) { _EL_     final byte[] bytes=new byte[size]; _EL_     int pos=bufferSize - bufferPos; _EL_     System.arraycopy(buffer,bufferPos,bytes,0,pos); _EL_     bufferPos=bufferSize; _EL_     ensureAvailable(size - pos); _EL_     System.arraycopy(buffer,0,bytes,pos,size - pos); _EL_     bufferPos=size - pos; _EL_     return bytes; _EL_   } _EL_  else { _EL_     final int originalBufferPos=bufferPos; _EL_     final int originalBufferSize=bufferSize; _EL_     totalBytesRetired+=bufferSize; _EL_     bufferPos=0; _EL_     bufferSize=0; _EL_     int sizeLeft=size - (originalBufferSize - originalBufferPos); _EL_     final List<byte[]> chunks=new ArrayList<byte[]>(); _EL_     while (sizeLeft > 0) { _EL_       final byte[] chunk=new byte[Math.min(sizeLeft,BUFFER_SIZE)]; _EL_       int pos=0; _EL_       while (pos < chunk.length) { _EL_         final int n=(input == null) ? -1 : input.read(chunk,pos,chunk.length - pos); _EL_         if (n == -1) { _EL_           throw InvalidProtocolBufferException.truncatedMessage(); _EL_         } _EL_         totalBytesRetired+=n; _EL_         pos+=n; _EL_       } _EL_       sizeLeft-=chunk.length; _EL_       chunks.add(chunk); _EL_     } _EL_     final byte[] bytes=new byte[size]; _EL_     int pos=originalBufferSize - originalBufferPos; _EL_     System.arraycopy(buffer,originalBufferPos,bytes,0,pos); _EL_     for (    final byte[] chunk : chunks) { _EL_       System.arraycopy(chunk,0,bytes,pos,chunk.length); _EL_       pos+=chunk.length; _EL_     } _EL_     return bytes; _EL_   } _EL_ } _EL_ ', 'public boolean isSafeMode(){ _EL_   return this.safeMode; _EL_ } _EL_ ', 'public final void put(String key,int value){ _EL_   if ((m_firstFree + 1) >= m_mapSize) { _EL_     m_mapSize+=m_blocksize; _EL_     String newMap[]=new String[m_mapSize]; _EL_     System.arraycopy(m_map,0,newMap,0,m_firstFree + 1); _EL_     m_map=newMap; _EL_     int newValues[]=new int[m_mapSize]; _EL_     System.arraycopy(m_values,0,newValues,0,m_firstFree + 1); _EL_     m_values=newValues; _EL_   } _EL_   m_map[m_firstFree]=key; _EL_   m_values[m_firstFree]=value; _EL_   m_firstFree++; _EL_ } _EL_ ', 'private void addVolumesToParkingStorageGroup(StorageSystem storage,String policyName,Set<String> volumeDeviceIds) throws Exception { _EL_   String[] tokens=policyName.split(Constants.SMIS_PLUS_REGEX); _EL_   CIMObjectPath groupPath=_helper.getVolumeGroupBasedOnSLO(storage,storage,tokens[0],tokens[1],tokens[2]); _EL_   if (groupPath == null) { _EL_     groupPath=_helper.createVolumeGroupBasedOnSLO(storage,storage,tokens[0],tokens[1],tokens[2]); _EL_   } _EL_   CIMArgument[] inArgs=_helper.getAddVolumesToMaskingGroupInputArguments(storage,groupPath,volumeDeviceIds); _EL_   CIMArgument[] outArgs=new CIMArgument[5]; _EL_   SmisJob addVolumesToSGJob=new SmisSynchSubTaskJob(null,storage.getId(),SmisConstants.ADD_MEMBERS); _EL_   _helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),"AddMembers",inArgs,outArgs,addVolumesToSGJob); _EL_ } _EL_ ', 'public final void addElement(String value){ _EL_   if ((m_firstFree + 1) >= m_mapSize) { _EL_     m_mapSize+=m_blocksize; _EL_     String newMap[]=new String[m_mapSize]; _EL_     System.arraycopy(m_map,0,newMap,0,m_firstFree + 1); _EL_     m_map=newMap; _EL_   } _EL_   m_map[m_firstFree]=value; _EL_   m_firstFree++; _EL_ } _EL_ ', 'public FPSTextureView addChildAt(int location,@NonNull DisplayBase displayBase){ _EL_   displayBase.setUp(mFps); _EL_   mDisplayList.add(location,displayBase); _EL_   return this; _EL_ } _EL_ ', 'public static Automaton minimizeSimple(Automaton a){ _EL_   Set<Integer> initialSet=new HashSet<Integer>(); _EL_   a=determinizeSimple(Operations.reverse(a,initialSet),initialSet); _EL_   initialSet.clear(); _EL_   a=determinizeSimple(Operations.reverse(a,initialSet),initialSet); _EL_   return a; _EL_ } _EL_ ', 'public String consume(String name,boolean required) throws ParseException { _EL_   if (name == null) { _EL_     if (content == null && required) { _EL_       throw new ParseException(CoreErrorDomain.ERR.missingRequiredContent); _EL_     } _EL_     contentConsumed=true; _EL_     return content; _EL_   } _EL_   String value=attrs.get(name); _EL_   if (value == null) { _EL_     if (required) { _EL_       ParseException pe=new ParseException(CoreErrorDomain.ERR.missingAttribute); _EL_       pe.setInternalReason("Missing attribute: \'" + name + "\'"); _EL_       throw pe; _EL_     } _EL_     return null; _EL_   } _EL_   attrs.remove(name); _EL_   return value; _EL_ } _EL_ ', '@Override public void removeColumns(Column... columns){ _EL_   for (  Column c : columns) { _EL_     columnList.remove(c); _EL_   } _EL_ } _EL_ ', 'public boolean checkIfBackupSetExists(String setName){ _EL_   validateNotNullOrEmpty(setName); _EL_   try { _EL_     File file=new File(getBackupRoot(),setName); _EL_     if (file.exists()) { _EL_       return true; _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     log.error("Exception during backup set directory exists check"); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void sendEventToAgent(final String event){ _EL_ synchronized (eventSocket) { _EL_     eventWriter.print(event); _EL_     eventWriter.flush(); _EL_   } _EL_ } _EL_ ', '@Override public int previous(){ _EL_   CharacterIterator text=getText(); _EL_   if (current() == text.getBeginIndex()) { _EL_     return BreakIterator.DONE; _EL_   } _EL_   int start=current(); _EL_   int lastResult=cachedLastKnownBreak; _EL_   if (lastResult >= start || lastResult <= BreakIterator.DONE) { _EL_     getPrevious(); _EL_     lastResult=handlePrevious(); _EL_   } _EL_  else { _EL_     text.setIndex(lastResult); _EL_   } _EL_   int result=lastResult; _EL_   while (result != BreakIterator.DONE && result < start) { _EL_     lastResult=result; _EL_     result=handleNext(); _EL_   } _EL_   text.setIndex(lastResult); _EL_   cachedLastKnownBreak=lastResult; _EL_   return lastResult; _EL_ } _EL_ ', 'public void onStop(){ _EL_   if (null != mService) { _EL_     if (null != mContext) { _EL_       mContext.unbindService(mServiceConnection); _EL_     } _EL_     mServiceConnection=null; _EL_     mService=null; _EL_   } _EL_ } _EL_ ', 'public static long nanosFromDate(long ms){ _EL_   Calendar cal=getCalendar(); _EL_   cal.setTimeInMillis(ms); _EL_   return nanosFromCalendar(cal); _EL_ } _EL_ ', 'public void println() throws IOException { _EL_   writer.write(format.getLineSeparator()); _EL_ } _EL_ ', 'private void cleanupDiscovery(StorageSystem system){ _EL_   try { _EL_     system.setReachableStatus(false); _EL_     _dbClient.persistObject(system); _EL_   } _EL_  catch (  DatabaseException e) { _EL_     _logger.error("discoverStorage failed. Failed to update discovery status to ERROR.",e); _EL_   } _EL_ } _EL_ ', 'public void removeColumn(final String columnName){ _EL_   if (columnName == null) { _EL_     return; _EL_   } _EL_   final List<String> cols=Arrays.asList(getInfo().headers); _EL_   final int colIndex=cols.indexOf(columnName); _EL_   removeColumn(colIndex); _EL_ } _EL_ ', 'public static UnManagedProtectionSet checkUnManagedProtectionSetExistsInDB(DbClient dbClient,String nativeGuid) throws IOException { _EL_   List<UnManagedProtectionSet> cgs=CustomQueryUtility.getUnManagedProtectionSetByNativeGuid(dbClient,nativeGuid); _EL_   Iterator<UnManagedProtectionSet> cgsItr=cgs.iterator(); _EL_   if (cgsItr.hasNext()) { _EL_     return cgsItr.next(); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'private void checkQuery(String expRes,String qry) throws Exception { _EL_   assertEquals(0,executeHiveQuery("drop table if exists result")); _EL_   assertEquals(0,executeHiveQuery("create table result " + "row format delimited fields terminated by \' \' " + "stored as textfile "+ "location \'/result\' as "+ qry)); _EL_   IgfsInputStream in=igfs.open(new IgfsPath("/result/000000_0")); _EL_   byte[] buf=new byte[(int)in.length()]; _EL_   in.read(buf); _EL_   assertEquals(expRes,new String(buf)); _EL_ } _EL_ ', "private void doTextNormal(final PDFPage cmds,final String text){ _EL_   final PointF zero=new PointF(); _EL_   final Matrix scale=new Matrix(); _EL_   Utils.setMatValues(scale,fsize,0,0,fsize * th,0,tr); _EL_   final Matrix at=new Matrix(); _EL_   final List<PDFGlyph> l=(List<PDFGlyph>)font.getGlyphs(text); _EL_   for (  final PDFGlyph glyph : l) { _EL_     at.set(cur); _EL_     at.preConcat(scale); _EL_     final PointF advance=glyph.addCommands(cmds,at,tm); _EL_     float advanceX=(advance.x * fsize) + tc; _EL_     if (glyph.getChar() == ' ') { _EL_       advanceX+=tw; _EL_     } _EL_     advanceX*=th; _EL_     cur.preTranslate(advanceX,advance.y); _EL_   } _EL_   final float[] src={zero.x,zero.y}; _EL_   final float[] dst=new float[src.length]; _EL_   cur.mapPoints(dst,src); _EL_   prevEnd.set(dst[0],dst[1]); _EL_ } _EL_ ", 'public void delete(int key){ _EL_   int i=binarySearch(mKeys,0,mSize,key); _EL_   if (i >= 0) { _EL_     System.arraycopy(mKeys,i + 1,mKeys,i,mSize - (i + 1)); _EL_     System.arraycopy(mValues,i + 1,mValues,i,mSize - (i + 1)); _EL_     mSize--; _EL_   } _EL_ } _EL_ ', 'protected void addWholeMatch(StringBuilder sb,String surface,String analyzed){ _EL_   sb.append("<b>"); _EL_   sb.append(surface); _EL_   sb.append("</b>"); _EL_ } _EL_ ', 'private Node newFloatingComment(){ _EL_   Node c=new Node(Token.EMPTY); _EL_   linkCommentToNode(c); _EL_   return c; _EL_ } _EL_ ', 'public static File createTempDir(File parent){ _EL_   File temp=new File(parent,Integer.toString(Math.abs(UNSEEDED_RANDOM.nextInt()) % 1000000)); _EL_   temp.delete(); _EL_   temp.mkdir(); _EL_   temp.deleteOnExit(); _EL_   return temp; _EL_ } _EL_ ', 'public static List split(String str,String regex){ _EL_   return (Arrays.asList(str.split(regex))); _EL_ } _EL_ ', 'Node<K,V> findLast(){ _EL_   Index<K,V> q=head; _EL_   for (; ; ) { _EL_     Index<K,V> d, r; _EL_     if ((r=q.right) != null) { _EL_       if (r.indexesDeletedNode()) { _EL_         q.unlink(r); _EL_         q=head; _EL_       } _EL_  else       q=r; _EL_     } _EL_  else     if ((d=q.down) != null) { _EL_       q=d; _EL_     } _EL_  else { _EL_       Node<K,V> b=q.node; _EL_       Node<K,V> n=b.next; _EL_       for (; ; ) { _EL_         if (n == null)         return b.isBaseHeader() ? null : b; _EL_         Node<K,V> f=n.next; _EL_         if (n != b.next)         break; _EL_         Object v=n.value; _EL_         if (v == null) { _EL_           n.helpDelete(b,f); _EL_           break; _EL_         } _EL_         if (v == n || b.value == null)         break; _EL_         b=n; _EL_         n=f; _EL_       } _EL_       q=head; _EL_     } _EL_   } _EL_ } _EL_ ', 'public synchronized void panAbs(double dx,double dy){ _EL_   damageReport(); _EL_   m_transform.translate(dx,dy); _EL_   try { _EL_     m_itransform=m_transform.createInverse(); _EL_   } _EL_  catch (  Exception e) { _EL_   } _EL_ } _EL_ ', 'public static String toHex(byte[] data){ _EL_   try { _EL_     return new String(Hex.encode(data),"US-ASCII"); _EL_   } _EL_  catch (  UnsupportedEncodingException e) { _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public void unlockUI(ProcessInfo pi){ _EL_   boolean notPrint=pi != null && pi.getAD_Process_ID() != m_curTab.getAD_Process_ID() && pi.isReportingProcess() == false; _EL_   setBusy(false,notPrint); _EL_   if (notPrint) { _EL_     m_curTab.dataRefresh(); _EL_     if (pi.isTimeout())     Env.setContext(m_ctx,m_curWindowNo,"Processed","Y"); _EL_     m_curGC.dynamicDisplay(0); _EL_     setStatusLine(pi.getSummary(),pi.isError()); _EL_     if (pi.isError())     ADialog.error(m_curWindowNo,this,null,pi.getSummary()); _EL_     ProcessInfoUtil.setLogFromDB(pi); _EL_     String logInfo=pi.getLogInfo(); _EL_     if (logInfo.length() > 0)     ADialog.info(m_curWindowNo,this,Env.getHeader(m_ctx,m_curWindowNo),pi.getTitle(),logInfo); _EL_   } _EL_  else { _EL_     setStatusLine(pi.getSummary(),pi.isError()); _EL_     if (pi.isError())     ADialog.error(m_curWindowNo,this,null,pi.getSummary()); _EL_   } _EL_ } _EL_ ', 'public final ArrayList<WifiRecord> loadWifisByBssid(final String bssid,final Integer session){ _EL_   final ArrayList<WifiRecord> wifis=new ArrayList<>(); _EL_   String selectSql; _EL_   if (session != null) { _EL_     selectSql=Schema.COL_BSSID + " = \\"" + bssid+ "\\" AND "+ Schema.COL_SESSION_ID+ " =\\""+ session+ "\\""; _EL_   } _EL_  else { _EL_     selectSql=Schema.COL_BSSID + " = \\"" + bssid+ "\\""; _EL_   } _EL_   final Cursor cursor=contentResolver.query(ContentProvider.CONTENT_URI_WIFI,null,selectSql,null,null); _EL_   final int columnIndex=cursor.getColumnIndex(Schema.COL_BSSID); _EL_   final int columnIndex2=cursor.getColumnIndex(Schema.COL_SSID); _EL_   final int columnIndex3=cursor.getColumnIndex(Schema.COL_CAPABILITIES); _EL_   final int columnIndex4=cursor.getColumnIndex(Schema.COL_FREQUENCY); _EL_   final int columnIndex5=cursor.getColumnIndex(Schema.COL_LEVEL); _EL_   final int columnIndex6=cursor.getColumnIndex(Schema.COL_TIMESTAMP); _EL_   final int columnIndex7=cursor.getColumnIndex(Schema.COL_BEGIN_POSITION_ID); _EL_   final int columnIndex8=cursor.getColumnIndex(Schema.COL_END_POSITION_ID); _EL_   final int columnIndex9=cursor.getColumnIndex(Schema.COL_KNOWN_WIFI); _EL_   while (cursor.moveToNext()) { _EL_     final WifiRecord wifi=new WifiRecord(); _EL_     wifi.setBssid(cursor.getString(columnIndex)); _EL_     wifi.setSsid(cursor.getString(columnIndex2)); _EL_     wifi.setCapabilities(cursor.getString(columnIndex3)); _EL_     wifi.setFrequency(cursor.getInt(columnIndex4)); _EL_     wifi.setLevel(cursor.getInt(columnIndex5)); _EL_     wifi.setOpenBmapTimestamp(cursor.getLong(columnIndex6)); _EL_     wifi.setBeginPosition(loadPositionById(cursor.getString(columnIndex7))); _EL_     wifi.setEndPosition(loadPositionById(cursor.getString(columnIndex8))); _EL_     wifi.setCatalogStatus(CatalogStatus.values()[cursor.getInt(columnIndex9)]); _EL_     wifis.add(wifi); _EL_   } _EL_   cursor.close(); _EL_   return wifis; _EL_ } _EL_ ', 'public void addFieldProperty(String name,String accessorField){ _EL_   fieldProperties.add(new LegacyFieldPropDesc(name,accessorField)); _EL_ } _EL_ ', '@SuppressWarnings("deprecation") public void newMinute(){ _EL_   if (!inSyncWithInternalFastClock) { _EL_     return; _EL_   } _EL_   if (correctFastClock || synchronizeWithInternalClock) { _EL_     Date now=clock.getTime(); _EL_     if (now.getMinutes() != 0) { _EL_       curDays=now.getDate(); _EL_       curHours=now.getHours(); _EL_       curMinutes=now.getMinutes(); _EL_       long millis=now.getTime(); _EL_       long elapsedMS=millis % MSECPERMINUTE; _EL_       double frac_min=elapsedMS / (double)MSECPERMINUTE; _EL_       curFractionalMinutes=(int)CORRECTION - (int)(CORRECTION * frac_min); _EL_       setClock(); _EL_     } _EL_   } _EL_  else   if (setInternal && !correctFastClock && !synchronizeWithInternalClock) { _EL_     inSyncWithInternalFastClock=false; _EL_     initiateRead(); _EL_   } _EL_ } _EL_ ', 'public void add(T item){ _EL_   if (set.add(item)) { _EL_     fireContentsChanged(this,0,getSize() - 1); _EL_   } _EL_ } _EL_ ', 'static PotionType fromName(String name){ _EL_   for (  PotionTypeTable table : values()) { _EL_     if (name.equalsIgnoreCase(table.name))     return table.type; _EL_   } _EL_   return PotionType.valueOf(name.toUpperCase()); _EL_ } _EL_ ', 'private boolean isCheckpointExists(Connection conn,String key) throws SQLException { _EL_   PreparedStatement st=null; _EL_   ResultSet rs=null; _EL_   try { _EL_     st=conn.prepareStatement(chkExistsSql); _EL_     st.setString(1,key); _EL_     rs=st.executeQuery(); _EL_     return rs.next(); _EL_   } _EL_   finally { _EL_     U.close(rs,log); _EL_     U.close(st,log); _EL_   } _EL_ } _EL_ ', '@Override public void writeHeader() throws IOException { _EL_   os=new PDFWriter(new BufferedOutputStream(ros),PDF_VERSION); _EL_   delayImageQueue=new PDFImageDelayQueue(os); _EL_   delayPaintQueue=new PDFPaintDelayQueue(os,delayImageQueue); _EL_   fontTable=new PDFFontTable(os); _EL_   PDFDocInfo info=os.openDocInfo("DocInfo"); _EL_   info.setTitle(getProperty(TITLE)); _EL_   info.setAuthor(getProperty(AUTHOR)); _EL_   info.setSubject(getProperty(SUBJECT)); _EL_   info.setKeywords(getProperty(KEYWORDS)); _EL_   info.setCreator(getCreator()); _EL_   info.setProducer(producer == null ? "" : producer); _EL_   if (!isDeviceIndependent()) { _EL_     Calendar now=Calendar.getInstance(); _EL_     info.setCreationDate(now); _EL_     info.setModificationDate(now); _EL_   } _EL_   info.setTrapped("False"); _EL_   os.close(info); _EL_   PDFCatalog catalog=os.openCatalog("Catalog","RootPage"); _EL_   catalog.setOutlines("Outlines"); _EL_   catalog.setPageMode("UseOutlines"); _EL_   catalog.setViewerPreferences("Preferences"); _EL_   catalog.setOpenAction(new Object[]{os.ref("Page1"),os.name("Fit")}); _EL_   os.close(catalog); _EL_   PDFViewerPreferences prefs=os.openViewerPreferences("Preferences"); _EL_   prefs.setFitWindow(true); _EL_   prefs.setCenterWindow(false); _EL_   os.close(prefs); _EL_   alphaIndex=1; _EL_   extGStates=new HashMap<Float,String>(); _EL_   if (!isMultiPage()) { _EL_     openPage(getSize(),null); _EL_   } _EL_ } _EL_ ', 'private String formatLink(String[] parts){ _EL_   String anchor, text; _EL_   if (parts.length < 2) { _EL_     anchor=""; _EL_     text="Checker Framework"; _EL_   } _EL_  else { _EL_     anchor=parts[0]; _EL_     text=parts[1]; _EL_   } _EL_   return String.format("<A HREF=\\"http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html%s\\">%s</A>",anchor,text); _EL_ } _EL_ ', 'public JSONException(Throwable cause){ _EL_   super(cause.getMessage()); _EL_   this.cause=cause; _EL_ } _EL_ ', 'public static boolean isAuthorized(String logName,String operation,Object credential){ _EL_   return authorizer.isAuthorized(logName,operation,credential); _EL_ } _EL_ ', 'public <K,V>void consume(String groupId,String clientId,OffsetResetStrategy autoOffsetReset,Deserializer<K> keyDeserializer,Deserializer<V> valueDeserializer,BooleanSupplier continuation,OffsetCommitCallback offsetCommitCallback,Runnable completion,Collection<String> topics,java.util.function.Consumer<ConsumerRecord<K,V>> consumerFunction){ _EL_   Properties props=getConsumerProperties(groupId,clientId,autoOffsetReset); _EL_   Thread t=new Thread(null); _EL_   t.setName(clientId + "-thread"); _EL_   t.start(); _EL_ } _EL_ ', 'default B withDefault(String key,float value){ _EL_   return withDefault(key,Float.toString(value)); _EL_ } _EL_ ', 'private static void convert(AScene scene,InputStream in,OutputStream out) throws IOException, DefException, ParseException { _EL_   IndexUnit iu=JavaParser.parse(in); _EL_   extractScene(iu,scene); _EL_   try (Writer w=new BufferedWriter(new OutputStreamWriter(out))){ _EL_     IndexFileWriter.write(scene,w); _EL_   } _EL_  } _EL_ ', 'public static boolean filesExistOnDestButNotSrc(Configuration conf,Path src,Path dest,Optional<PathFilter> filter) throws IOException { _EL_   Set<FileStatus> srcFileStatuses=getFileStatusesRecursive(conf,src,filter); _EL_   Set<FileStatus> destFileStatuses=getFileStatusesRecursive(conf,dest,filter); _EL_   Map<String,Long> srcFileSizes=null; _EL_   Map<String,Long> destFileSizes=null; _EL_   try { _EL_     srcFileSizes=getRelPathToSizes(src,srcFileStatuses); _EL_     destFileSizes=getRelPathToSizes(dest,destFileStatuses); _EL_   } _EL_  catch (  ArgumentException e) { _EL_     throw new IOException("Invalid file statuses!",e); _EL_   } _EL_   for (  String file : destFileSizes.keySet()) { _EL_     if (!srcFileSizes.containsKey(file)) { _EL_       LOG.warn(String.format("%s exists on %s but not in %s",file,dest,src)); _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'default Filterable<T> removeAll(final Stream<? extends T> stream){ _EL_   final Set<T> set=stream.collect(Collectors.toSet()); _EL_   return filterNot(null); _EL_ } _EL_ ', 'public void drawLine(List<mxPoint> pts,Map<String,Object> style){ _EL_   Color penColor=mxUtils.getStyleStrokeColor(style,Color.BLACK); _EL_   float penWidth=mxUtils.getStyleStrokeWidth(style,(float)1); _EL_   if (penColor != null && penWidth > 0) { _EL_     String shape=mxUtils.getString(style,mxConstants.STYLE_SHAPE,""); _EL_     if (shape.equals(mxConstants.SHAPE_ARROW)) { _EL_       setStroke(penWidth,style); _EL_       mxPoint p0=pts.get(0); _EL_       mxPoint pe=pts.get(pts.size() - 1); _EL_       Rectangle bounds=new Rectangle(p0.getPoint()); _EL_       bounds.add(pe.getPoint()); _EL_       Color fillColor=mxUtils.getStyleFillColor(style); _EL_       Paint fillPaint=getFillPaint(bounds,fillColor,style); _EL_       boolean shadow=mxUtils.isTrue(style,mxConstants.STYLE_SHADOW,false); _EL_       drawArrow(pts,fillColor,fillPaint,penColor,shadow); _EL_     } _EL_  else { _EL_       Object startMarker=style.get(mxConstants.STYLE_STARTARROW); _EL_       Object endMarker=style.get(mxConstants.STYLE_ENDARROW); _EL_       float startSize=(float)(mxUtils.getFloat(style,mxConstants.STYLE_STARTSIZE,mxConstants.DEFAULT_MARKERSIZE)); _EL_       float endSize=(float)(mxUtils.getFloat(style,mxConstants.STYLE_ENDSIZE,mxConstants.DEFAULT_MARKERSIZE)); _EL_       boolean rounded=mxUtils.isTrue(style,mxConstants.STYLE_ROUNDED,false); _EL_       drawConnector(pts,penWidth,penColor,startMarker,startSize,endMarker,endSize,rounded,style); _EL_     } _EL_   } _EL_ } _EL_ ', 'private static MeteringRectangle[] regionsForNormalizedCoord(float nx,float ny,float fraction,final Rect cropRegion,int sensorOrientation){ _EL_   int minCropEdge=Math.min(cropRegion.width(),cropRegion.height()); _EL_   int halfSideLength=(int)(0.5f * fraction * minCropEdge); _EL_   PointF nsc=CameraUtil.normalizedSensorCoordsForNormalizedDisplayCoords(nx,ny,sensorOrientation); _EL_   int xCenterSensor=(int)(cropRegion.left + nsc.x * cropRegion.width()); _EL_   int yCenterSensor=(int)(cropRegion.top + nsc.y * cropRegion.height()); _EL_   Rect meteringRegion=new Rect(xCenterSensor - halfSideLength,yCenterSensor - halfSideLength,xCenterSensor + halfSideLength,yCenterSensor + halfSideLength); _EL_   meteringRegion.left=CameraUtil.clamp(meteringRegion.left,cropRegion.left,cropRegion.right); _EL_   meteringRegion.top=CameraUtil.clamp(meteringRegion.top,cropRegion.top,cropRegion.bottom); _EL_   meteringRegion.right=CameraUtil.clamp(meteringRegion.right,cropRegion.left,cropRegion.right); _EL_   meteringRegion.bottom=CameraUtil.clamp(meteringRegion.bottom,cropRegion.top,cropRegion.bottom); _EL_   return new MeteringRectangle[]{new MeteringRectangle(meteringRegion,CAMERA2_REGION_WEIGHT)}; _EL_ } _EL_ ', '@Override public void visitInnerClass(final String aname,final String outerName,final String innerName,final int attr_access){ _EL_   if ((name != null) && name.equals(aname)) { _EL_     this.access=attr_access; _EL_   } _EL_   super.visitInnerClass(aname,outerName,innerName,attr_access); _EL_ } _EL_ ', '@TargetApi(Build.VERSION_CODES.JELLY_BEAN) private void dequeueOutputBuffer(MediaCodec codec,ByteBuffer[] outputBuffers,int index,MediaCodec.BufferInfo info){ _EL_   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) { _EL_     ByteBuffer buffer=outputBuffers[index]; _EL_     Log.i("size/remaining: " + info.size + "/"+ buffer.remaining()); _EL_     if (info.size <= buffer.remaining()) { _EL_       final byte[] bufferCopied=new byte[info.size]; _EL_       buffer.get(bufferCopied); _EL_       codec.releaseOutputBuffer(index,false); _EL_       addEncoded(bufferCopied); _EL_       if (Log.DEBUG) { _EL_         AudioUtils.showSomeBytes("out",bufferCopied); _EL_       } _EL_     } _EL_  else { _EL_       Log.e("size > remaining"); _EL_       codec.releaseOutputBuffer(index,false); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static DefaultJobDefinition retryableFixedDelayJobDefinition(final String jobType,final String jobName,final String description,final Duration fixedDelay,final int restarts,final int retries,final Optional<Duration> retryDelay,final Optional<Duration> maxAge){ _EL_   return new DefaultJobDefinition(jobType,jobName,description,maxAge,Optional.of(fixedDelay),Optional.empty(),restarts,retries,retryDelay); _EL_ } _EL_ ', 'public static void putLong(long addr,long val){ _EL_   if (UNALIGNED)   UNSAFE.putLong(addr,val); _EL_  else   putLongByByte(addr,val,BIG_ENDIAN); _EL_ } _EL_ ', 'public AbstractSdfWriter(final PrereadType prereadType,final boolean hasQuality,boolean hasNames,boolean compressed,final SequenceType type){ _EL_   mPrereadType=prereadType; _EL_   mPrereadArm=PrereadArm.UNKNOWN; _EL_   mSdfId=new SdfId(); _EL_   mNameHandler=new SequenceNameHandler(); _EL_   mSequenceType=type; _EL_   mFirstValid=mSequenceType.firstValid(); _EL_   mResidueCounts=new long[mSequenceType.numberKnownCodes() + mSequenceType.firstValid()]; _EL_   mNHistogram=new long[MAX_HISTOGRAM]; _EL_   mPosHistogram=new long[MAX_HISTOGRAM]; _EL_   mQSAveragePerPos=new double[MAX_HISTOGRAM]; _EL_   mPositionCounts=new long[MAX_HISTOGRAM]; _EL_   mGlobalQSAverage=0.0; _EL_   mDataHashFunction=new PrereadHashFunction(); _EL_   mQualityHashFunction=new PrereadHashFunction(); _EL_   mNameHashFunction=new PrereadHashFunction(); _EL_   mNameSuffixHashFunction=new PrereadHashFunction(); _EL_   mHasQuality=hasQuality; _EL_   mHasNames=hasNames; _EL_   mCompressed=compressed; _EL_   mSeqDataChecksum=new CRC32(); _EL_   mQualDataChecksum=new CRC32(); _EL_ } _EL_ ', 'private Matches lookupDo(Template tmpl,int maxMatches){ _EL_   if (maxMatches < 0)   throw new IllegalArgumentException("negative maxMatches"); _EL_   int totalMatches=0; _EL_   ArrayList matches=null; _EL_   ItemIter iter=matchingItems(tmpl); _EL_   if (maxMatches > 0 || iter.dupsPossible)   matches=new ArrayList(); _EL_   if (iter.dupsPossible) { _EL_     while (iter.hasNext()) { _EL_       Item item=iter.next(); _EL_       if (!matches.contains(item))       matches.add(item); _EL_     } _EL_     totalMatches=matches.size(); _EL_     if (maxMatches > 0) { _EL_       for (int i=matches.size(); --i >= maxMatches; )       matches.remove(i); _EL_       for (int i=matches.size(); --i >= 0; ) { _EL_         matches.set(i,copyItem((Item)matches.get(i))); _EL_       } _EL_     } _EL_  else { _EL_       matches=null; _EL_     } _EL_   } _EL_  else { _EL_     while (iter.hasNext()) { _EL_       Item item=iter.next(); _EL_       totalMatches++; _EL_       if (--maxMatches >= 0)       matches.add(copyItem(item)); _EL_     } _EL_   } _EL_   return new Matches(matches,totalMatches); _EL_ } _EL_ ', 'public static String quote(char ch){ _EL_ switch (ch) { _EL_ case \'\\b\': _EL_     return "\\\\b"; _EL_ case \'\\f\': _EL_   return "\\\\f"; _EL_ case \'\\n\': _EL_ return "\\\\n"; _EL_ case \'\\r\': _EL_ return "\\\\r"; _EL_ case \'\\t\': _EL_ return "\\\\t"; _EL_ case \'\\\'\': _EL_ return "\\\\\'"; _EL_ case \'\\"\': _EL_ return "\\\\\\""; _EL_ case \'\\\\\': _EL_ return "\\\\\\\\"; _EL_ default : _EL_ return (isPrintableAscii(ch)) ? String.valueOf(ch) : String.format("\\\\u%04x",(int)ch); _EL_ } _EL_ } _EL_ ', 'public void writeLine(long time,float[] column){ _EL_   String str=Long.toString(time); _EL_   for (int i=0; i < column.length; ++i) { _EL_     str+=", " + column[i]; _EL_   } _EL_   writer.println(str); _EL_ } _EL_ ', 'public static boolean isPEM(InputStream is){ _EL_   try { _EL_     String startPEM="-----BEGIN"; _EL_     int headerLength=100; _EL_     byte[] preamble=new byte[headerLength]; _EL_     if (is.read(preamble,0,headerLength) > 0) { _EL_       String startArray=new String(preamble); _EL_       return startArray.startsWith(startPEM); _EL_     } _EL_     return false; _EL_   } _EL_  catch (  Exception e) { _EL_     throw new DSSException("Unable to read InputStream"); _EL_   } _EL_ } _EL_ ', 'protected byte[] engineWrap(Key key) throws IllegalBlockSizeException, InvalidKeyException { _EL_   throw new UnsupportedOperationException(); _EL_ } _EL_ ', 'private void delayRetry(int multiplier){ _EL_   debug("Sleeping before next retry..."); _EL_   try { _EL_     Thread.sleep(1000 * multiplier); _EL_   } _EL_  catch (  InterruptedException e) { _EL_     warn(e,"Thread sleeping failed.\\nContinuing with the next retry."); _EL_   } _EL_ } _EL_ ', '@Override public boolean isBusy(){ _EL_   return false; _EL_ } _EL_ ', 'public static Double oizp(Number value){ _EL_   if (value == null) { _EL_     return null; _EL_   } _EL_   return (value.doubleValue() >= 0d) ? 1d : 0d; _EL_ } _EL_ ', "public void drawString(String str,int x,int y,int textDecoration){ _EL_   if (str.length() == 0 || (str.length() == 1 && str.charAt(0) == ' ')) { _EL_     return; _EL_   } _EL_   Object nativeFont=null; _EL_   if (current != null) { _EL_     nativeFont=current.getNativeFont(); _EL_   } _EL_   if (current instanceof CustomFont) { _EL_     current.drawString(this,str,x,y); _EL_   } _EL_  else { _EL_     impl.drawString(nativeGraphics,nativeFont,str,x + xTranslate,y + yTranslate,textDecoration); _EL_   } _EL_ } _EL_ ", '@Override public void acceptInstance(InstanceEvent e){ _EL_   if (e.getStatus() == InstanceEvent.FORMAT_AVAILABLE) { _EL_     m_connectedFormat=e.getStructure(); _EL_     m_stopRequested.set(false); _EL_     try { _EL_       init(new Instances(e.getStructure(),0)); _EL_     } _EL_  catch (    IllegalArgumentException ex) { _EL_       if (m_log != null) { _EL_         String message="ERROR: There is a problem with the incoming instance structure"; _EL_         stopWithErrorMessage(message,ex); _EL_         return; _EL_       } _EL_     } _EL_     String buffSize=m_bufferSize; _EL_     try { _EL_       buffSize=m_env.substitute(buffSize); _EL_       m_bufferSizeI=Integer.parseInt(buffSize); _EL_     } _EL_  catch (    Exception ex) { _EL_       ex.printStackTrace(); _EL_     } _EL_     m_incrementalBuffer=new ArrayList<InstanceHolder>(m_bufferSizeI); _EL_     m_bufferFiles=new ArrayList<File>(); _EL_     m_streamCounter=0; _EL_     return; _EL_   } _EL_   m_busy=true; _EL_   if (e.getInstance() != null) { _EL_     if (m_streamCounter == 0) { _EL_       if (m_log != null) { _EL_         m_log.statusMessage(statusMessagePrefix() + "Starting streaming sort..."); _EL_         m_log.logMessage("[Sorter] " + statusMessagePrefix() + " Using streaming buffer size: "+ m_bufferSizeI); _EL_       } _EL_     } _EL_     InstanceHolder tempH=new InstanceHolder(); _EL_     tempH.m_instance=e.getInstance(); _EL_     tempH.m_fileNumber=-1; _EL_     if (m_stringAttIndexes != null) { _EL_       copyStringAttVals(tempH); _EL_     } _EL_     m_incrementalBuffer.add(tempH); _EL_     m_streamCounter++; _EL_   } _EL_   if (e.getInstance() == null || e.getStatus() == InstanceEvent.BATCH_FINISHED) { _EL_     emitBufferedInstances(); _EL_     return; _EL_   } _EL_  else   if (m_incrementalBuffer.size() == m_bufferSizeI) { _EL_     try { _EL_       sortBuffer(true); _EL_     } _EL_  catch (    Exception ex) { _EL_       String msg=statusMessagePrefix() + "ERROR: unable to write to temp file."; _EL_       stopWithErrorMessage(msg,ex); _EL_       m_busy=false; _EL_       return; _EL_     } _EL_   } _EL_   m_busy=false; _EL_ } _EL_ ', 'ArrayList<SourceFile> trimFileList(ArrayList<SourceFile> files){ _EL_   HashMap<String,String> names=new HashMap<String,String>(); _EL_   ArrayList<SourceFile> list=new ArrayList<SourceFile>(); _EL_   int size=files.size(); _EL_   for (int i=0; i < size; i++) { _EL_     boolean addIt=false; _EL_     SourceFile fi=files.get(i); _EL_     String fName=fi.getRawName(); _EL_     if (m_swfFilter == null) { _EL_       if (names.get(fName) == null)       addIt=true; _EL_     } _EL_  else { _EL_       addIt=m_swfFilter.containsSource(fi); _EL_     } _EL_     if (addIt) { _EL_       names.put(fName,fName); _EL_       list.add(fi); _EL_     } _EL_   } _EL_   return list; _EL_ } _EL_ ', "private static void write(Collection<String> src,File out) throws IOException { _EL_   try (Writer writer=new BufferedWriter(new FileWriter(out))){ _EL_     for (    String line : src)     writer.write(line + '\\n'); _EL_   } _EL_  } _EL_ ", 'public Bidi createLineBidi(int lineStart,int lineLimit){ _EL_   AttributedString astr=new AttributedString(""); _EL_   Bidi newBidi=new Bidi(astr.getIterator()); _EL_   return bidiBase.setLine(this,bidiBase,newBidi,newBidi.bidiBase,lineStart,lineLimit); _EL_ } _EL_ ', 'public synchronized void addGraphListener(GraphListener cl){ _EL_   m_graphListeners.addElement(cl); _EL_ } _EL_ ', 'public void append(File file,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException { _EL_   if (!file.exists()) { _EL_     throw new FileNotFoundException(file.getAbsolutePath()); _EL_   } _EL_   InputStream inputStream=null; _EL_   try { _EL_     inputStream=new FileInputStream(file); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new FTPDataTransferException(e); _EL_   } _EL_   try { _EL_     append(file.getName(),inputStream,0,listener); _EL_   } _EL_  catch (  IllegalStateException e) { _EL_     throw e; _EL_   } _EL_ catch (  IOException e) { _EL_     throw e; _EL_   } _EL_ catch (  FTPIllegalReplyException e) { _EL_     throw e; _EL_   } _EL_ catch (  FTPException e) { _EL_     throw e; _EL_   } _EL_ catch (  FTPDataTransferException e) { _EL_     throw e; _EL_   } _EL_ catch (  FTPAbortedException e) { _EL_     throw e; _EL_   } _EL_  finally { _EL_     if (inputStream != null) { _EL_       try { _EL_         inputStream.close(); _EL_       } _EL_  catch (      Throwable t) { _EL_         ; _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public LiteralExtensionIV createIV(final Value value){ _EL_   if (value instanceof Literal == false)   throw new IllegalArgumentException(); _EL_   final Literal lit=(Literal)value; _EL_   final AbstractLiteralIV delegate=new PackedLongIV(Long.parseLong(lit.getLabel())); _EL_   return new LiteralExtensionIV(delegate,datatype.getIV()); _EL_ } _EL_ ', 'protected void onFinish(){ _EL_   mErrorListener=null; _EL_ } _EL_ ', '@Override public Enumeration<Option> listOptions(){ _EL_   Vector<Option> newVector=new Vector<Option>(4); _EL_   newVector.addElement(new Option("\\tRandom number seed for cross validation\\n" + "\\t(default = 1)","S",1,"-S <seed>")); _EL_   newVector.addElement(new Option("\\tNumber of folds for cross validation\\n" + "\\t(default = 10)","F",1,"-F <folds>")); _EL_   newVector.addElement(new Option("\\tUse training data for evaluation rather than cross validaton","D",0,"-D")); _EL_   newVector.addElement(new Option("\\tMinimum number of objects in a bucket\\n" + "\\t(passed on to " + "OneR, default = 6)","B",1,"-B <minimum bucket size>")); _EL_   return newVector.elements(); _EL_ } _EL_ ', 'long freeSpaceUnix(String path,boolean kb,boolean posix,long timeout) throws IOException { _EL_   if (path.length() == 0) { _EL_     throw new IllegalArgumentException("Path must not be empty"); _EL_   } _EL_   String flags="-"; _EL_   if (kb) { _EL_     flags+="k"; _EL_   } _EL_   if (posix) { _EL_     flags+="P"; _EL_   } _EL_   String[] cmdAttribs=flags.length() > 1 ? new String[]{DF,flags,path} : new String[]{DF,path}; _EL_   List<String> lines=performCommand(cmdAttribs,3,timeout); _EL_   if (lines.size() < 2) { _EL_     throw new IOException("Command line \'" + DF + "\' did not return info as expected "+ "for path \'"+ path+ "\'- response was "+ lines); _EL_   } _EL_   String line2=lines.get(1); _EL_   StringTokenizer tok=new StringTokenizer(line2," "); _EL_   if (tok.countTokens() < 4) { _EL_     if (tok.countTokens() == 1 && lines.size() >= 3) { _EL_       String line3=lines.get(2); _EL_       tok=new StringTokenizer(line3," "); _EL_     } _EL_  else { _EL_       throw new IOException("Command line \'" + DF + "\' did not return data as expected "+ "for path \'"+ path+ "\'- check path is valid"); _EL_     } _EL_   } _EL_  else { _EL_     tok.nextToken(); _EL_   } _EL_   tok.nextToken(); _EL_   tok.nextToken(); _EL_   String freeSpace=tok.nextToken(); _EL_   return parseBytes(freeSpace,path); _EL_ } _EL_ ', 'public void receiveRedundancy(){ _EL_   try { _EL_     while (true) { _EL_       if (mIn.read(mInBuffer) <= 0)       return; _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_   } _EL_ } _EL_ ', 'private static URL[] pathToURLs(String path) throws MalformedURLException { _EL_ synchronized (pathToURLsCache) { _EL_     Object[] v=(Object[])pathToURLsCache.get(path); _EL_     if (v != null) { _EL_       return (URL[])v[0]; _EL_     } _EL_   } _EL_   StringTokenizer st=new StringTokenizer(path); _EL_   URL[] urls=new URL[st.countTokens()]; _EL_   for (int i=0; st.hasMoreTokens(); i++) { _EL_     urls[i]=new URL(st.nextToken()); _EL_   } _EL_ synchronized (pathToURLsCache) { _EL_     pathToURLsCache.put(path,new Object[]{urls,new SoftReference(path)}); _EL_   } _EL_   return urls; _EL_ } _EL_ ', 'public void flushBuffer() throws IOException { _EL_   if (count > 0) { _EL_     m_os.write(m_outputBytes,0,count); _EL_     count=0; _EL_   } _EL_ } _EL_ ', 'public boolean isDisplayedExpectingComponents(){ _EL_   boolean result=false; _EL_   if (conditions.isConditionMet(visibilityOf(window))) { _EL_     if (components.isEmpty()) { _EL_       closeButton.click(); _EL_     } _EL_  else { _EL_       result=true; _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public static StringBuilder formatTo(StringBuilder buf,float[] d,String sep,NumberFormat nf){ _EL_   if (d == null) { _EL_     return buf.append("null"); _EL_   } _EL_   if (d.length == 0) { _EL_     return buf; _EL_   } _EL_   buf.append(nf.format(d[0])); _EL_   for (int i=1; i < d.length; i++) { _EL_     buf.append(sep); _EL_     buf.append(nf.format(d[i])); _EL_   } _EL_   return buf; _EL_ } _EL_ ', 'public int removeViewpoints(int[] indices){ _EL_   for (int i=indices.length - 1; i >= 0; --i)   viewpointList.remove(indices[i]); _EL_   viewpointIndex=indices[0] - 1; _EL_   if (viewpointList.size() == 0) { _EL_     viewpointIndex=-1; _EL_   } _EL_  else   if (viewpointIndex < 0) { _EL_     viewpointIndex=viewpointList.size() - 1; _EL_   } _EL_   return (viewpointIndex); _EL_ } _EL_ ', '@Override public XMLEvent peek() throws XMLStreamException { _EL_   log.log(Level.FINE,"peek()"); _EL_   if (!hasNext()) { _EL_     throw new XMLStreamException("The reader is depleted!"); _EL_   } _EL_   log.log(Level.FINE,"peek(): {0}",nextEvent); _EL_   return nextEvent; _EL_ } _EL_ ', 'public static final boolean executePotentialWork(final Object data,final ImageView imageView){ _EL_   final BitmapWorkerTask bitmapWorkerTask=getBitmapWorkerTask(imageView); _EL_   if (bitmapWorkerTask != null) { _EL_     final Object bitmapData=bitmapWorkerTask.mKey; _EL_     if (bitmapData == null || !bitmapData.equals(data)) { _EL_       bitmapWorkerTask.cancel(true); _EL_     } _EL_  else { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'protected double entropy(double[][] dataZs,double[][] dataWs){ _EL_   double entropy=0.0; _EL_   int numInstances=dataZs.length; _EL_   for (int j=0; j < m_numClasses; j++) { _EL_     double m=0.0; _EL_     double sum=0.0; _EL_     for (int i=0; i < numInstances; i++) { _EL_       m+=dataZs[i][j] * dataWs[i][j]; _EL_       sum+=dataWs[i][j]; _EL_     } _EL_     m/=sum; _EL_     for (int i=0; i < numInstances; i++) { _EL_       entropy+=dataWs[i][j] * Math.pow(dataZs[i][j] - m,2); _EL_     } _EL_   } _EL_   return entropy; _EL_ } _EL_ ', '@Override public void appendCode(Type declaringType,TypeTuple inputTypes,Type outputType,List<Variable> inputVars,StringBuilder b){ _EL_   b.append(field.toCode(declaringType,inputVars)); _EL_ } _EL_ ', '@Nullable public GrCall enclosingCall(String name,GdslMembersHolderConsumer consumer){ _EL_   final PsiElement place=consumer.getPlace(); _EL_   if (place == null)   return null; _EL_   GrCall call=PsiTreeUtil.getParentOfType(place,GrCall.class,true); _EL_   if (call == null)   return null; _EL_   while (call != null && !name.equals(getInvokedMethodName(call))) { _EL_     call=PsiTreeUtil.getParentOfType(call,GrCall.class,true); _EL_   } _EL_   if (call == null)   return null; _EL_   final GrArgumentList argumentList=call.getArgumentList(); _EL_   if (argumentList != null) { _EL_     for (    GrExpression arg : argumentList.getExpressionArguments()) { _EL_       if (arg instanceof GrClosableBlock && PsiTreeUtil.findCommonParent(place,arg) == arg) { _EL_         return call; _EL_       } _EL_     } _EL_   } _EL_   if (call instanceof GrMethodCallExpression) { _EL_     for (    GrExpression arg : call.getClosureArguments()) { _EL_       if (arg instanceof GrClosableBlock && PsiTreeUtil.findCommonParent(place,arg) == arg) { _EL_         return call; _EL_       } _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public void dispose(){ _EL_   mRunButton.setSelected(false); _EL_   super.dispose(); _EL_ } _EL_ ', 'public void removeResourceListener(ResourceEventsListener listener){ _EL_   resourceListeners.remove(listener); _EL_ } _EL_ ', 'private void informUponSimilarName(final StringBuffer messageBuffer,final String name,final String candidate){ _EL_   if (name.equals(candidate)) { _EL_     return; _EL_   } _EL_   if (name.regionMatches(true,0,candidate,0,PKG_LEN + 5)) { _EL_     messageBuffer.append(" Did you mean \'"); _EL_     messageBuffer.append(candidate); _EL_     messageBuffer.append("\'?"); _EL_   } _EL_ } _EL_ ', 'private void addCategoryToTree(DefaultMutableTreeNode node,String[] names){ _EL_   if (names.length == 0) { _EL_     return; _EL_   } _EL_   boolean matched=false; _EL_   for (@SuppressWarnings("unchecked") Enumeration<DefaultMutableTreeNode> e=node.children(); e.hasMoreElements(); ) { _EL_     DefaultMutableTreeNode childNode=e.nextElement(); _EL_     String nodeName=(String)childNode.getUserObject(); _EL_     if (nodeName.equals(names[0])) { _EL_       if (names.length > 1) { _EL_         addCategoryToTree(childNode,Arrays.copyOfRange(names,1,names.length)); _EL_         matched=true; _EL_       } _EL_  else { _EL_       } _EL_     } _EL_   } _EL_   if (!matched) { _EL_     DefaultMutableTreeNode root=node; _EL_     for (int i=0; i < names.length; i++) { _EL_       DefaultMutableTreeNode newNode=new DefaultMutableTreeNode(names[i]); _EL_       root.add(newNode); _EL_       root=newNode; _EL_     } _EL_   } _EL_ } _EL_ ', 'private void editNote(int noteId){ _EL_   hideSoftKeyboard(); _EL_   Intent intent=new Intent(MainActivity.this,NoteActivity.class); _EL_   intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK); _EL_   intent.putExtra("id",String.valueOf(noteId)); _EL_   startActivity(intent); _EL_ } _EL_ ', 'private void closeDatabases(){ _EL_   s_logger.log(Level.INFO,""); _EL_   s_logger.log(Level.INFO,"migrateCloseDatabases"); _EL_   m_source.close(); _EL_   m_target.close(); _EL_   m_source.reset(); _EL_   m_source=null; _EL_   m_target.reset(); _EL_   m_target=null; _EL_   m_direction=null; _EL_   m_objectType=null; _EL_   m_objectTypes=null; _EL_   m_sourceMap=null; _EL_   m_targetMap=null; _EL_   m_objectList=new ArrayList<String>(); _EL_   m_trackingList=new ArrayList<String>(); _EL_   m_tempIndexes=null; _EL_   m_counterPrg=null; _EL_   m_counterDrp=null; _EL_   m_counterUpd=null; _EL_   m_counterAdd=null; _EL_   m_totalPrg=null; _EL_   m_totalDrp=null; _EL_   m_totalUpd=null; _EL_   m_totalAdd=null; _EL_   m_detailType=null; _EL_   m_detailTypes=null; _EL_   m_detailCounterDrp=null; _EL_   m_detailCounterUpd=null; _EL_   m_detailCounterAdd=null; _EL_   System.gc(); _EL_ } _EL_ ', 'public String query(String handler,SolrQueryRequest req) throws Exception { _EL_   try (SolrCore core=getCoreInc()){ _EL_     SolrQueryResponse rsp=new SolrQueryResponse(); _EL_     SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp)); _EL_     core.execute(core.getRequestHandler(handler),req,rsp); _EL_     if (rsp.getException() != null) { _EL_       throw rsp.getException(); _EL_     } _EL_     StringWriter sw=new StringWriter(32000); _EL_     QueryResponseWriter responseWriter=core.getQueryResponseWriter(req); _EL_     responseWriter.write(sw,req,rsp); _EL_     req.close(); _EL_     return sw.toString(); _EL_   } _EL_   finally { _EL_     req.close(); _EL_     SolrRequestInfo.clearRequestInfo(); _EL_   } _EL_ } _EL_ ', 'public static synchronized void removeProvider(int providerNumber){ _EL_   Provider p=providers.remove(providerNumber - 1); _EL_   providersNames.remove(p.getName()); _EL_   setNeedRefresh(); _EL_ } _EL_ ', 'protected static void isort(int level[],float BC[]){ _EL_   float temp; _EL_   int temp2; _EL_   for (int i=0; i < BC.length - 1; i++) { _EL_     int j=i; _EL_     temp=BC[j + 1]; _EL_     temp2=level[j + 1]; _EL_     if (temp == 0) { _EL_       continue; _EL_     } _EL_     int prej=j + 1; _EL_     while (j > -1 && (temp < BC[j] || BC[j] == 0)) { _EL_       if (BC[j] == 0) { _EL_         j--; _EL_         continue; _EL_       } _EL_  else { _EL_         BC[prej]=BC[j]; _EL_         level[prej]=level[j]; _EL_         prej=j; _EL_         j--; _EL_       } _EL_     } _EL_     BC[prej]=temp; _EL_     level[prej]=temp2; _EL_   } _EL_ } _EL_ ', 'private void writeObject(ObjectOutputStream oos) throws IOException { _EL_   oos.defaultWriteObject(); _EL_   writeStroke(oos,stroke,OMGraphicAdapter.BASIC_STROKE); _EL_   writeTextureMask(oos,textureMask); _EL_ } _EL_ ', 'public boolean parseMoreData(final EncodedImage encodedImage){ _EL_   if (mParserState == NOT_A_JPEG) { _EL_     return false; _EL_   } _EL_   final int dataBufferSize=encodedImage.getSize(); _EL_   if (dataBufferSize <= mBytesParsed) { _EL_     return false; _EL_   } _EL_   final InputStream bufferedDataStream=new PooledByteArrayBufferedInputStream(encodedImage.getInputStream(),mByteArrayPool.get(BUFFER_SIZE),mByteArrayPool); _EL_   try { _EL_     StreamUtil.skip(bufferedDataStream,mBytesParsed); _EL_     return doParseMoreData(bufferedDataStream); _EL_   } _EL_  catch (  IOException ioe) { _EL_     Throwables.propagate(ioe); _EL_     return false; _EL_   } _EL_  finally { _EL_     Closeables.closeQuietly(bufferedDataStream); _EL_   } _EL_ } _EL_ ', 'public synchronized void kill(){ _EL_   running=false; _EL_   closed=true; _EL_   try { _EL_     STDIN.close(); _EL_   } _EL_  catch (  IOException e) { _EL_   } _EL_   try { _EL_     process.destroy(); _EL_   } _EL_  catch (  Exception e) { _EL_   } _EL_ } _EL_ ', 'public void add(int i,byte[] buffer,int offset,int length){ _EL_   if (_length + length > _capacity)   ensureCapacity(_length + length); _EL_   System.arraycopy(_buffer,i,_buffer,i + length,_length - i); _EL_   System.arraycopy(buffer,offset,_buffer,i,length); _EL_   _length+=length; _EL_ } _EL_ ', 'protected void doValidateZeroLongFile(String path,String filename,long size,boolean checkContents){ _EL_   File inFile=new File(path,filename); _EL_   DataInputStream inStream=null; _EL_   Log.i(LOG_TAG,"Validating file " + filename + " at "+ path); _EL_   try { _EL_     inStream=new DataInputStream(new FileInputStream(inFile)); _EL_     if (checkContents) { _EL_       for (long i=0; i < size; ++i) { _EL_         if (inStream.readLong() != 0) { _EL_           fail("Unexpected value read in OBB file" + filename); _EL_         } _EL_       } _EL_     } _EL_     if (inStream != null) { _EL_       inStream.close(); _EL_     } _EL_     Log.i(LOG_TAG,"File " + filename + " successfully verified for "+ size+ " zeros"); _EL_   } _EL_  catch (  IOException e) { _EL_     fail("IOError with file " + inFile + ":"+ e.toString()); _EL_   } _EL_ } _EL_ ', 'public String applyMask(String mask,String value){ _EL_   return (String)getMaskOrGetCursorIndex(mask,value,0,true); _EL_ } _EL_ ', 'public static int unionSize(long[] x,long[] y){ _EL_   final int lx=x.length, ly=y.length; _EL_   final int min=(lx < ly) ? lx : ly; _EL_   int i=0, res=0; _EL_   for (; i < min; i++) { _EL_     res+=Long.bitCount(x[i] | y[i]); _EL_   } _EL_   for (; i < lx; i++) { _EL_     res+=Long.bitCount(x[i]); _EL_   } _EL_   for (; i < ly; i++) { _EL_     res+=Long.bitCount(y[i]); _EL_   } _EL_   return res; _EL_ } _EL_ ', 'public final Sector union(Sector that){ _EL_   if (that == null)   return this; _EL_   Angle minLat=this.minLatitude; _EL_   Angle maxLat=this.maxLatitude; _EL_   Angle minLon=this.minLongitude; _EL_   Angle maxLon=this.maxLongitude; _EL_   if (that.minLatitude.degrees < this.minLatitude.degrees)   minLat=that.minLatitude; _EL_   if (that.maxLatitude.degrees > this.maxLatitude.degrees)   maxLat=that.maxLatitude; _EL_   if (that.minLongitude.degrees < this.minLongitude.degrees)   minLon=that.minLongitude; _EL_   if (that.maxLongitude.degrees > this.maxLongitude.degrees)   maxLon=that.maxLongitude; _EL_   return new Sector(minLat,maxLat,minLon,maxLon); _EL_ } _EL_ ', 'private static boolean isDoubleEqual(double value,double valueToCompare){ _EL_   return (Math.abs(value - valueToCompare) < 0.001); _EL_ } _EL_ ', 'private void walk(File directory,int depth,Collection<T> results) throws IOException { _EL_   checkIfCancelled(directory,depth,results); _EL_   if (handleDirectory(directory,depth,results)) { _EL_     handleDirectoryStart(directory,depth,results); _EL_     int childDepth=depth + 1; _EL_     if (depthLimit < 0 || childDepth <= depthLimit) { _EL_       checkIfCancelled(directory,depth,results); _EL_       File[] childFiles=filter == null ? directory.listFiles() : directory.listFiles(filter); _EL_       childFiles=filterDirectoryContents(directory,depth,childFiles); _EL_       if (childFiles == null) { _EL_         handleRestricted(directory,childDepth,results); _EL_       } _EL_  else { _EL_         for (        File childFile : childFiles) { _EL_           if (childFile.isDirectory()) { _EL_             walk(childFile,childDepth,results); _EL_           } _EL_  else { _EL_             checkIfCancelled(childFile,childDepth,results); _EL_             handleFile(childFile,childDepth,results); _EL_             checkIfCancelled(childFile,childDepth,results); _EL_           } _EL_         } _EL_       } _EL_     } _EL_     handleDirectoryEnd(directory,depth,results); _EL_   } _EL_   checkIfCancelled(directory,depth,results); _EL_ } _EL_ ', '@Override public void datasetChanged(DatasetChangeEvent event){ _EL_   super.datasetChanged(event); _EL_   if (this.subplots == null) { _EL_     return; _EL_   } _EL_   XYDataset dataset=null; _EL_   if (event.getDataset() instanceof XYDataset) { _EL_     dataset=(XYDataset)event.getDataset(); _EL_   } _EL_   for (  XYPlot subplot : this.subplots) { _EL_     if (subplot.indexOf(dataset) >= 0) { _EL_       subplot.configureRangeAxes(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean onScheduleAsLibrary(Config config,Config runtime,IScheduler scheduler,PackingPlan packing){ _EL_   boolean ret=false; _EL_   try { _EL_     scheduler.initialize(config,runtime); _EL_     ret=scheduler.onSchedule(packing); _EL_     if (ret) { _EL_       ret=SchedulerUtils.setLibSchedulerLocation(runtime,scheduler,false); _EL_     } _EL_  else { _EL_       LOG.severe("Failed to invoke IScheduler as library"); _EL_     } _EL_   } _EL_   finally { _EL_     scheduler.close(); _EL_   } _EL_   return ret; _EL_ } _EL_ ', 'private void validateSqlStatement(String sql,int jdbcStatementIndex){ _EL_   Assert.isTrue(StringUtils.isNotBlank(sql),"JDBC statement [" + jdbcStatementIndex + "] SQL is required"); _EL_ } _EL_ ', 'public static Long[] valuesOf(long[] array){ _EL_   Long[] dest=new Long[array.length]; _EL_   for (int i=0; i < array.length; i++) { _EL_     dest[i]=Long.valueOf(array[i]); _EL_   } _EL_   return dest; _EL_ } _EL_ ', 'private static void useMissile(Player player){ _EL_   StackableItem projectilesItem=null; _EL_   if (player.getRangeWeapon() != null) { _EL_     projectilesItem=player.getAmmunition(); _EL_   } _EL_   if (projectilesItem == null) { _EL_     projectilesItem=player.getMissileIfNotHoldingOtherWeapon(); _EL_   } _EL_   if (projectilesItem != null) { _EL_     projectilesItem.removeOne(); _EL_   } _EL_ } _EL_ ', 'public TcpMatcher(final NetworkConfig config){ _EL_   super(config); _EL_ } _EL_ ', 'private int determineMaxLevelRec(int level,Node v){ _EL_   int newLevel=level; _EL_   for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) { _EL_     newLevel=Math.max(newLevel,determineMaxLevelRec(level,e.getTarget()) + 1); _EL_   } _EL_   return newLevel; _EL_ } _EL_ ', 'protected void requestPassCodeConfirmation(){ _EL_   clearBoxes(); _EL_   mPassCodeHdr.setText(R.string.pass_code_reenter_your_pass_code); _EL_   mPassCodeHdrExplanation.setVisibility(View.INVISIBLE); _EL_   mConfirmingPassCode=true; _EL_ } _EL_ ', 'private void addWorkerFailed(Worker w){ _EL_   final ReentrantLock mainLock=this.mainLock; _EL_   mainLock.lock(); _EL_   try { _EL_     if (w != null)     workers.remove(w); _EL_     decrementWorkerCount(); _EL_     tryTerminate(); _EL_   } _EL_   finally { _EL_     mainLock.unlock(); _EL_   } _EL_ } _EL_ ', 'private synchronized void putMapEntry(String localId,MapEntry entry){ _EL_   if (!isLocalId(localId)) { _EL_     throw new IllegalStateException("Tried to get invalid local id: \\"" + localId + "\\"."); _EL_   } _EL_   JSONObject json=new JSONObject(); _EL_   try { _EL_     json.put("retainCount",entry.retainCount); _EL_     if (entry.objectId != null) { _EL_       json.put("objectId",entry.objectId); _EL_     } _EL_   } _EL_  catch (  JSONException je) { _EL_     throw new IllegalStateException("Error creating local id map entry.",je); _EL_   } _EL_   File file=new File(diskPath,localId); _EL_   if (!diskPath.exists()) { _EL_     diskPath.mkdirs(); _EL_   } _EL_   try { _EL_     ParseFileUtils.writeJSONObjectToFile(file,json); _EL_   } _EL_  catch (  IOException e) { _EL_   } _EL_ } _EL_ ', 'public void deleteLeaves(String name){ _EL_   for (int i=0; i < _leaves.size(); i++) { _EL_     CatalogTreeLeaf leaf=_leaves.get(i); _EL_     if (name.equals(leaf.getName())) { _EL_       _leaves.remove(i); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected boolean validate(final char[] component,final int soffset,int eoffset,final BitSet generous){ _EL_   if (eoffset == -1) { _EL_     eoffset=component.length - 1; _EL_   } _EL_   for (int i=soffset; i <= eoffset; i++) { _EL_     if (!generous.get(component[i])) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private void buildPieces(){ _EL_   pieces=new Piece[pathArray.size()]; _EL_   Paint paint=new Paint(); _EL_   Matrix matrix=new Matrix(); _EL_   Canvas canvas=new Canvas(); _EL_   for (int i=0; i < pieces.length; i++) { _EL_     int shadow=Utils.nextInt(Utils.dp2px(2),Utils.dp2px(9)); _EL_     Path path=pathArray.get(i); _EL_     RectF r=new RectF(); _EL_     path.computeBounds(r,true); _EL_     Bitmap pBitmap=Utils.createBitmapSafely((int)r.width() + shadow * 2,(int)r.height() + shadow * 2,Bitmap.Config.ARGB_4444,1); _EL_     if (pBitmap == null) { _EL_       pieces[i]=new Piece(-1,-1,null,shadow); _EL_       continue; _EL_     } _EL_     pieces[i]=new Piece((int)r.left + mTouchPoint.x - shadow,(int)r.top + mTouchPoint.y - shadow,pBitmap,shadow); _EL_     canvas.setBitmap(pieces[i].bitmap); _EL_     BitmapShader mBitmapShader=new BitmapShader(mBitmap,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP); _EL_     matrix.reset(); _EL_     matrix.setTranslate(-r.left - offsetX + shadow,-r.top - offsetY + shadow); _EL_     mBitmapShader.setLocalMatrix(matrix); _EL_     paint.reset(); _EL_     Path offsetPath=new Path(); _EL_     offsetPath.addPath(path,-r.left + shadow,-r.top + shadow); _EL_     paint.setStyle(Paint.Style.FILL); _EL_     paint.setShadowLayer(shadow,0,0,0xff333333); _EL_     canvas.drawPath(offsetPath,paint); _EL_     paint.setShadowLayer(0,0,0,0); _EL_     paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.XOR)); _EL_     canvas.drawPath(offsetPath,paint); _EL_     paint.setXfermode(null); _EL_     paint.setShader(mBitmapShader); _EL_     paint.setAlpha(0xcc); _EL_     canvas.drawPath(offsetPath,paint); _EL_   } _EL_   Arrays.sort(pieces); _EL_ } _EL_ ', 'public boolean removeShutdownHook(Thread hook){ _EL_   SecurityManager sm=System.getSecurityManager(); _EL_   if (sm != null) { _EL_     sm.checkPermission(RuntimePermissionCollection.SHUTDOWN_HOOKS_PERMISSION); _EL_   } _EL_   if (hook == null)   throw new NullPointerException("null is not allowed here"); _EL_   if (VMState > 0) { _EL_     throw new IllegalStateException(); _EL_   } _EL_ synchronized (hooksList) { _EL_     return hooksList.remove(hook); _EL_   } _EL_ } _EL_ ', 'public void run(){ _EL_   while (m_keyboardStream != null) { _EL_     try { _EL_       if (m_keyboardReadRequest) { _EL_         String s=m_keyboardStream.readLine(); _EL_         m_keyboardInput.add(s); _EL_         m_keyboardReadRequest=false; _EL_ synchronized (this) { _EL_           notifyAll(); _EL_         } _EL_       } _EL_  else       try { _EL_         Thread.sleep(50); _EL_       } _EL_  catch (      InterruptedException ie) { _EL_       } _EL_     } _EL_  catch (    IOException io) { _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean boundScroll(){ _EL_   float curScroll=getStackScroll(); _EL_   float newScroll=getBoundedStackScroll(curScroll); _EL_   if (Float.compare(newScroll,curScroll) != 0) { _EL_     setStackScroll(newScroll); _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', '@Override public AggregateableEvaluation aggregate(Evaluation evaluation){ _EL_   m_Incorrect+=evaluation.incorrect(); _EL_   m_Correct+=evaluation.correct(); _EL_   m_Unclassified+=evaluation.unclassified(); _EL_   m_MissingClass+=evaluation.m_MissingClass; _EL_   m_WithClass+=evaluation.m_WithClass; _EL_   if (evaluation.m_ConfusionMatrix != null) { _EL_     double[][] newMatrix=evaluation.confusionMatrix(); _EL_     if (newMatrix != null) { _EL_       for (int i=0; i < m_ConfusionMatrix.length; i++) { _EL_         for (int j=0; j < m_ConfusionMatrix[i].length; j++) { _EL_           m_ConfusionMatrix[i][j]+=newMatrix[i][j]; _EL_         } _EL_       } _EL_     } _EL_   } _EL_   double[] newClassPriors=evaluation.m_ClassPriors; _EL_   if (newClassPriors != null && m_ClassPriors != null) { _EL_     for (int i=0; i < this.m_ClassPriors.length; i++) { _EL_       m_ClassPriors[i]=newClassPriors[i]; _EL_     } _EL_   } _EL_   m_ClassPriorsSum=evaluation.m_ClassPriorsSum; _EL_   m_TotalCost+=evaluation.totalCost(); _EL_   m_SumErr+=evaluation.m_SumErr; _EL_   m_SumAbsErr+=evaluation.m_SumAbsErr; _EL_   m_SumSqrErr+=evaluation.m_SumSqrErr; _EL_   m_SumClass+=evaluation.m_SumClass; _EL_   m_SumSqrClass+=evaluation.m_SumSqrClass; _EL_   m_SumPredicted+=evaluation.m_SumPredicted; _EL_   m_SumSqrPredicted+=evaluation.m_SumSqrPredicted; _EL_   m_SumClassPredicted+=evaluation.m_SumClassPredicted; _EL_   m_SumPriorAbsErr+=evaluation.m_SumPriorAbsErr; _EL_   m_SumPriorSqrErr+=evaluation.m_SumPriorSqrErr; _EL_   m_SumKBInfo+=evaluation.m_SumKBInfo; _EL_   double[] newMarginCounts=evaluation.m_MarginCounts; _EL_   if (newMarginCounts != null) { _EL_     for (int i=0; i < m_MarginCounts.length; i++) { _EL_       m_MarginCounts[i]+=newMarginCounts[i]; _EL_     } _EL_   } _EL_   m_ComplexityStatisticsAvailable=evaluation.m_ComplexityStatisticsAvailable; _EL_   m_CoverageStatisticsAvailable=evaluation.m_CoverageStatisticsAvailable; _EL_   m_SumPriorEntropy+=evaluation.m_SumPriorEntropy; _EL_   m_SumSchemeEntropy+=evaluation.m_SumSchemeEntropy; _EL_   m_TotalSizeOfRegions+=evaluation.m_TotalSizeOfRegions; _EL_   m_TotalCoverage+=evaluation.m_TotalCoverage; _EL_   ArrayList<Prediction> predsToAdd=evaluation.m_Predictions; _EL_   if (predsToAdd != null) { _EL_     if (m_Predictions == null) { _EL_       m_Predictions=new ArrayList<Prediction>(); _EL_     } _EL_     for (int i=0; i < predsToAdd.size(); i++) { _EL_       m_Predictions.add(predsToAdd.get(i)); _EL_     } _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public void updateView(){ _EL_   if (fInputElement != null && fParentComposite != null) { _EL_     IndicatorViewState oldState=fStateMap.get(fInputElement); _EL_     boolean reload=fFilesToReoad.contains(fInputElement); _EL_     if (reload || oldState == null) { _EL_       JsonObject jsonObject=DroidsafePluginUtilities.parseIndicatorFile(fInputElement); _EL_       if (jsonObject == null)       return; _EL_       fFilesToReoad.remove(fInputElement); _EL_       fState=new IndicatorViewState(fInputElement,jsonObject,getSecuritySpec(),oldState); _EL_       fStateMap.put(fInputElement,fState); _EL_     } _EL_  else { _EL_       fState=oldState; _EL_     } _EL_     setPartName(fState.indicatorType); _EL_     showPage(PAGE_VIEWER); _EL_     fTreeViewer.setInput(fState.jsonObject); _EL_     if (fTreeViewer.getSorter() == null)     sortByField(getSortByField()); _EL_   } _EL_  else { _EL_     setPartName(DEFAULT_PART_NAME); _EL_   } _EL_ } _EL_ ', '@Override public void paint(Graphics g){ _EL_   g.drawImage(image,0,0,this); _EL_   if (!paintCalled) { _EL_     paintCalled=true; _EL_ synchronized (this) { _EL_       notifyAll(); _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public boolean connectionAllowed(String eventName){ _EL_   if (m_listenees.containsKey(eventName)) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', "public boolean isPrefixed(){ _EL_   return name.indexOf(':') >= 0; _EL_ } _EL_ ", 'public void releaseAnyConnection(Connection connection) throws SQLException { _EL_   try { _EL_     connection.close(); _EL_   } _EL_  catch (  Exception ex) { _EL_     throw new RuntimeException(ex); _EL_   } _EL_ } _EL_ ', 'public QuickActionView addActions(Collection<Action> actions){ _EL_   checkShown(); _EL_   mActions.addAll(actions); _EL_   return this; _EL_ } _EL_ ', 'public void addSeriesRenderer(int index,SimpleSeriesRenderer renderer){ _EL_   mRenderers.add(index,renderer); _EL_ } _EL_ ', 'private float calcAngle(float value){ _EL_   return value / mData.getYValueSum() * 360f; _EL_ } _EL_ ', 'public synchronized void returnBuf(byte[] buf){ _EL_   if (buf == null || buf.length > mSizeLimit) { _EL_     return; _EL_   } _EL_   mBuffersByLastUse.add(buf); _EL_   int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR); _EL_   if (pos < 0) { _EL_     pos=-pos - 1; _EL_   } _EL_   mBuffersBySize.add(pos,buf); _EL_   mCurrentSize+=buf.length; _EL_   trim(); _EL_ } _EL_ ', 'public CharSeq concat(CharSeq another){ _EL_   return new CharSeq(str + another.str); _EL_ } _EL_ ', '@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException { _EL_   resp.setContentType("text/plain"); _EL_   PrintWriter sendToClient=resp.getWriter(); _EL_   for (  Video v : this.videos) { _EL_     sendToClient.write(v.getName() + " : " + v.getUrl()+ "\\n"); _EL_   } _EL_ } _EL_ ', 'protected void notifyStateChange(int oldState,int newState){ _EL_   mState=newState; _EL_   if (oldState != newState) { _EL_     firePropertyChange("KnownState",Integer.valueOf(oldState),Integer.valueOf(newState)); _EL_   } _EL_ } _EL_ ', 'private void formatAndLogThrowable(LoggingLevel level,Color color,String msg,Throwable t){ _EL_   if (!USE_COLORS) { _EL_     formatAndLogThrowable(level,msg,t); _EL_     return; _EL_   } _EL_   if (PhotonLogger.level.id < level.id) { _EL_     return; _EL_   } _EL_   LocalDateTime dateTime=LocalDateTime.now(); _EL_   String formatted=formatLogLine(level,dateTime,msg); _EL_   LoggingService.logThrowable(dateTime,t,formatted,color); _EL_ } _EL_ ', 'public static String constructQueueRedisKey(String queueName,String shardName,int priority,PinLaterJobState state){ _EL_   return String.format("%s_%s_%s.p%1d_s%1d",PINLATER_QUEUE_KEY_PREFIX,shardName,queueName,priority,state.getValue()); _EL_ } _EL_ ', 'public void addRestrictedDomain(String domainName){ _EL_   if (StringUtils.isEmpty(domainName)) { _EL_     return; _EL_   } _EL_   if (restrictedDomains == null) { _EL_     restrictedDomains=new ArrayList<>(); _EL_   } _EL_   restrictedDomains.add(domainName); _EL_ } _EL_ ', 'StoppableReadLock(ReadWriteLock lock,CancelCriterion stopper){ _EL_   this.lock=lock.readLock(); _EL_   this.stopper=stopper; _EL_ } _EL_ ', 'public void testisAutoIncrement(){ _EL_   try { _EL_     assertFalse(rsmd.isAutoIncrement(1)); _EL_   } _EL_  catch (  SQLException e1) { _EL_     fail("ResultSetMetaDataTest.testGetScale()" + e1.getMessage()); _EL_     e1.printStackTrace(); _EL_   } _EL_   try { _EL_     conn.close(); _EL_     rsmd.getSchemaName(2); _EL_     fail("Exception expected"); _EL_   } _EL_  catch (  SQLException e) { _EL_   } _EL_ } _EL_ ', 'private long computeInterfaceHash(){ _EL_   long hash=0; _EL_   ByteArrayOutputStream sink=new ByteArrayOutputStream(512); _EL_   try { _EL_     MessageDigest md=MessageDigest.getInstance("SHA"); _EL_     DataOutputStream out=new DataOutputStream(new DigestOutputStream(sink,md)); _EL_     out.writeInt(INTERFACE_HASH_STUB_VERSION); _EL_     for (    Method method : remoteMethods) { _EL_       MethodDoc methodDoc=method.methodDoc(); _EL_       out.writeUTF(methodDoc.name()); _EL_       out.writeUTF(Util.methodDescriptorOf(methodDoc)); _EL_       ClassDoc exceptions[]=methodDoc.thrownExceptions(); _EL_       Arrays.sort(exceptions,new ClassDocComparator()); _EL_       for (      ClassDoc ex : exceptions) { _EL_         out.writeUTF(Util.binaryNameOf(ex)); _EL_       } _EL_     } _EL_     out.flush(); _EL_     byte hashArray[]=md.digest(); _EL_     for (int i=0; i < Math.min(8,hashArray.length); i++) { _EL_       hash+=((long)(hashArray[i] & 0xFF)) << (i * 8); _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     throw new AssertionError(e); _EL_   } _EL_ catch (  NoSuchAlgorithmException e) { _EL_     throw new AssertionError(e); _EL_   } _EL_   return hash; _EL_ } _EL_ ', 'public static void copy(byte[] in,OutputStream out) throws IOException { _EL_   Assert.notNull(in,"No input byte array specified"); _EL_   Assert.notNull(out,"No OutputStream specified"); _EL_   out.write(in); _EL_ } _EL_ ', 'public RepeatedFieldBuilder<MType,BType,IType> addMessage(MType message){ _EL_   if (message == null) { _EL_     throw new NullPointerException(); _EL_   } _EL_   ensureMutableMessageList(); _EL_   messages.add(message); _EL_   if (builders != null) { _EL_     builders.add(null); _EL_   } _EL_   onChanged(); _EL_   incrementModCounts(); _EL_   return this; _EL_ } _EL_ ', 'private ServiceRegistrar[] buildServiceRegistrar(){ _EL_   int k=0; _EL_   ServiceRegistrar[] proxys=new ServiceRegistrar[proxyRegSet.size()]; _EL_   Iterator iter=proxyRegSet.iterator(); _EL_   while (iter.hasNext()) { _EL_     ProxyReg reg=(ProxyReg)iter.next(); _EL_     proxys[k++]=reg.proxy; _EL_   } _EL_   return proxys; _EL_ } _EL_ ', 'private static boolean checkValue(String val) throws MalformedObjectNameException { _EL_   if (val == null)   throw new NullPointerException("Invalid value (null)"); _EL_   final int len=val.length(); _EL_   if (len == 0)   return false; _EL_   final char[] s=val.toCharArray(); _EL_   final int[] result=parseValue(s,0); _EL_   final int endValue=result[0]; _EL_   final boolean value_pattern=result[1] == 1; _EL_   if (endValue < len)   throw new MalformedObjectNameException("Invalid character in value: `" + s[endValue] + "\'"); _EL_   return value_pattern; _EL_ } _EL_ ', 'protected void recoverPrimary(Set excludedServers){ _EL_   if (pool.getPoolOrCacheCancelInProgress() != null) { _EL_     return; _EL_   } _EL_   final boolean isDebugEnabled=logger.isDebugEnabled(); _EL_   if (queueConnections.getPrimary() != null) { _EL_     if (isDebugEnabled) { _EL_       logger.debug("Primary recovery not needed"); _EL_     } _EL_     return; _EL_   } _EL_   if (isDebugEnabled) { _EL_     logger.debug("SubscriptionManager redundancy satisfier - primary endpoint has been lost. Attempting to recover"); _EL_   } _EL_   if (printRecoveringPrimary) { _EL_     logger.info(LocalizedMessage.create(LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER)); _EL_     printRecoveringPrimary=false; _EL_   } _EL_   QueueConnectionImpl newPrimary=null; _EL_   while (newPrimary == null && pool.getPoolOrCacheCancelInProgress() == null) { _EL_     List backups=queueConnections.getBackups(); _EL_     newPrimary=promoteBackupToPrimary(backups); _EL_     if (newPrimary == null) { _EL_       break; _EL_     } _EL_     if (!addToConnectionList(newPrimary,true)) { _EL_ synchronized (lock) { _EL_         queueConnections=queueConnections.removeConnection(newPrimary); _EL_       } _EL_       newPrimary=null; _EL_     } _EL_   } _EL_   if (newPrimary != null) { _EL_     if (isDebugEnabled) { _EL_       logger.debug("SubscriptionManager redundancy satisfier - Switched backup server to primary: {}",newPrimary.getEndpoint()); _EL_     } _EL_     if (PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) { _EL_       ClientServerObserver bo=ClientServerObserverHolder.getInstance(); _EL_       bo.afterPrimaryRecovered(newPrimary.getServer()); _EL_     } _EL_     cqsConnected(); _EL_     printPrimaryNotFoundError=true; _EL_     printRecoveringPrimary=true; _EL_     return; _EL_   } _EL_   while (newPrimary == null) { _EL_     newPrimary=createNewPrimary(excludedServers); _EL_     if (newPrimary == null) { _EL_       break; _EL_     } _EL_     if (!addToConnectionList(newPrimary,true)) { _EL_       excludedServers.add(newPrimary.getServer()); _EL_       newPrimary=null; _EL_     } _EL_     if (newPrimary != null) { _EL_       if (isDebugEnabled) { _EL_         logger.debug("SubscriptionManager redundancy satisfier - Non backup server was made primary. Recovering interest {}",newPrimary.getEndpoint()); _EL_       } _EL_       if (!recoverInterest(newPrimary,true)) { _EL_         excludedServers.add(newPrimary.getServer()); _EL_         newPrimary=null; _EL_       } _EL_       cqsConnected(); _EL_     } _EL_     if (newPrimary != null && PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) { _EL_       ClientServerObserver bo=ClientServerObserverHolder.getInstance(); _EL_       bo.afterPrimaryRecovered(newPrimary.getServer()); _EL_     } _EL_     printPrimaryNotFoundError=true; _EL_     printRecoveringPrimary=true; _EL_     return; _EL_   } _EL_   cqsDisconnected(); _EL_   if (isDebugEnabled) { _EL_     logger.debug("SubscriptionManager redundancy satisfier - Could not recover a new primary"); _EL_   } _EL_ synchronized (lock) { _EL_     queueConnections=queueConnections.setPrimaryDiscoveryFailed(null); _EL_     lock.notifyAll(); _EL_   } _EL_ } _EL_ ', 'private synchronized void rebuildJournal() throws IOException { _EL_   if (journalWriter != null) { _EL_     journalWriter.close(); _EL_   } _EL_   Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE); _EL_   writer.write(MAGIC); _EL_   writer.write("\\n"); _EL_   writer.write(VERSION_1); _EL_   writer.write("\\n"); _EL_   writer.write(Integer.toString(appVersion)); _EL_   writer.write("\\n"); _EL_   writer.write(Integer.toString(valueCount)); _EL_   writer.write("\\n"); _EL_   writer.write("\\n"); _EL_   for (  Entry entry : lruEntries.values()) { _EL_     if (entry.currentEditor != null) { _EL_       writer.write(DIRTY + \' \' + entry.key+ \'\\n\'); _EL_     } _EL_  else { _EL_       writer.write(CLEAN + \' \' + entry.key+ entry.getLengths()+ \'\\n\'); _EL_     } _EL_   } _EL_   writer.close(); _EL_   journalFileTmp.renameTo(journalFile); _EL_   journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE); _EL_ } _EL_ ', 'public void remove() throws RecurrenceInfoException { _EL_   List<RecurrenceRule> rulesList=new ArrayList<RecurrenceRule>(); _EL_   rulesList.addAll(rRulesList); _EL_   rulesList.addAll(eRulesList); _EL_   try { _EL_     for (    RecurrenceRule rule : rulesList)     rule.remove(); _EL_     info.remove(); _EL_   } _EL_  catch (  RecurrenceRuleException rre) { _EL_     throw new RecurrenceInfoException(rre.getMessage(),rre); _EL_   } _EL_ catch (  GenericEntityException gee) { _EL_     throw new RecurrenceInfoException(gee.getMessage(),gee); _EL_   } _EL_ } _EL_ ', 'protected boolean needToRefetchData(){ _EL_   long now=System.currentTimeMillis(); _EL_   long last=lastDataFetchTime; _EL_   if ((last + fetchIntervalMillis) < now) { _EL_     lastDataFetchTime=now; _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public static <E extends Enum<? extends Style.HasCssName>>E fromStyleName(final String styleName,final Class<E> enumClass,final E defaultValue){ _EL_   if (styleName == null || enumClass == null) { _EL_     return defaultValue; _EL_   } _EL_   for (  final Enum<? extends Style.HasCssName> constant : enumClass.getEnumConstants()) { _EL_     final Style.HasCssName anEnum=(Style.HasCssName)constant; _EL_     final String cssClass=anEnum.getCssName(); _EL_     if (cssClass != null && StyleHelper.containsStyle(styleName,cssClass)) { _EL_       return (E)anEnum; _EL_     } _EL_   } _EL_   return defaultValue; _EL_ } _EL_ ', 'private Map<URI,ExportMask> createExportMaskMap(Set<URI> placedMasks){ _EL_   Map<URI,ExportMask> exportMaskMap=new HashMap<>(); _EL_   Iterator<ExportMask> exportMaskIterator=dbClient.queryIterativeObjects(ExportMask.class,placedMasks,true); _EL_   while (exportMaskIterator.hasNext()) { _EL_     ExportMask exportMask=exportMaskIterator.next(); _EL_     exportMaskMap.put(exportMask.getId(),exportMask); _EL_   } _EL_   return exportMaskMap; _EL_ } _EL_ ', 'public ImmutableArray2<K> insert(int index,K obj){ _EL_   int len=length + 1; _EL_   int newLen=len; _EL_   boolean extendable; _EL_   if (index == len - 1) { _EL_     AtomicBoolean x=canExtend; _EL_     if (x != null) { _EL_       canExtend=null; _EL_       if (array.length > index && x.getAndSet(false)) { _EL_         array[index]=obj; _EL_         return new ImmutableArray2<K>(array,len,true); _EL_       } _EL_     } _EL_     extendable=true; _EL_     newLen=len + 4; _EL_   } _EL_  else { _EL_     extendable=false; _EL_   } _EL_   @SuppressWarnings("unchecked") K[] a2=(K[])new Object[newLen]; _EL_   DataUtils.copyWithGap(array,a2,length,index); _EL_   a2[index]=obj; _EL_   return new ImmutableArray2<K>(a2,len,extendable); _EL_ } _EL_ ', 'public void writeNoScale(Image c,Component i){ _EL_   if (page == null) { _EL_     newpage(); _EL_   } _EL_   int x=x0 + width - (c.getWidth(null) + charwidth); _EL_   int y=y0 + (linenum * lineheight) + lineascent; _EL_   if (page != null && pagenum >= prFirst) { _EL_     page.drawImage(c,x,y,c.getWidth(null),c.getHeight(null),null); _EL_   } _EL_ } _EL_ ', 'public void putDocumentInCache(int n,Source source){ _EL_   int cachedNode=getNode(source); _EL_   if (DTM.NULL != cachedNode) { _EL_     if (!(cachedNode == n))     throw new RuntimeException("Programmer\'s Error!  " + "putDocumentInCache found reparse of doc: " + source.getSystemId()); _EL_     return; _EL_   } _EL_   if (null != source.getSystemId()) { _EL_     m_sourceTree.addElement(new SourceTree(n,source.getSystemId())); _EL_   } _EL_ } _EL_ ', 'private void updateProgress(String progressLabel,int progress){ _EL_   if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) { _EL_     myHost.updateProgress(progressLabel,progress); _EL_   } _EL_   previousProgress=progress; _EL_   previousProgressLabel=progressLabel; _EL_ } _EL_ ', 'public static void copy(InputStream is,Resource out,boolean closeIS) throws IOException { _EL_   OutputStream os=null; _EL_   try { _EL_     os=toBufferedOutputStream(out.getOutputStream()); _EL_   } _EL_  catch (  IOException ioe) { _EL_     IOUtil.closeEL(os); _EL_     throw ioe; _EL_   } _EL_   copy(is,os,closeIS,true); _EL_ } _EL_ ', 'private static void fixGPSTimeStamp(XMPNode exifSchema) throws XMPException { _EL_   XMPNode gpsDateTime=XMPNodeUtils.findChildNode(exifSchema,"exif:GPSTimeStamp",false); _EL_   if (gpsDateTime == null) { _EL_     return; _EL_   } _EL_   try { _EL_     XMPDateTime binGPSStamp; _EL_     XMPDateTime binOtherDate; _EL_     binGPSStamp=XMPUtils.convertToDate(gpsDateTime.getValue()); _EL_     if (binGPSStamp.getYear() != 0 || binGPSStamp.getMonth() != 0 || binGPSStamp.getDay() != 0) { _EL_       return; _EL_     } _EL_     XMPNode otherDate=XMPNodeUtils.findChildNode(exifSchema,"exif:DateTimeOriginal",false); _EL_     if (otherDate == null) { _EL_       otherDate=XMPNodeUtils.findChildNode(exifSchema,"exif:DateTimeDigitized",false); _EL_     } _EL_     binOtherDate=XMPUtils.convertToDate(otherDate.getValue()); _EL_     Calendar cal=binGPSStamp.getCalendar(); _EL_     cal.set(Calendar.YEAR,binOtherDate.getYear()); _EL_     cal.set(Calendar.MONTH,binOtherDate.getMonth()); _EL_     cal.set(Calendar.DAY_OF_MONTH,binOtherDate.getDay()); _EL_     binGPSStamp=new XMPDateTimeImpl(cal); _EL_     gpsDateTime.setValue(XMPUtils.convertFromDate(binGPSStamp)); _EL_   } _EL_  catch (  XMPException e) { _EL_     return; _EL_   } _EL_ } _EL_ ', 'protected boolean cellConsumesEventType(Cell<?> cell,String eventType){ _EL_   Set<String> consumedEvents=cell.getConsumedEvents(); _EL_   return consumedEvents != null && consumedEvents.contains(eventType); _EL_ } _EL_ ', 'public int read() throws IOException { _EL_   int b0=fInputStream.read(); _EL_   if (b0 > 0x80) { _EL_     throw new IOException(Localizer.getMessage("jsp.error.xml.invalidASCII",Integer.toString(b0))); _EL_   } _EL_   return b0; _EL_ } _EL_ ', 'public long max(){ _EL_   return deltaMax.get(); _EL_ } _EL_ ', 'public void print(File file) throws IOException { _EL_   checkExec(); _EL_   SecurityManager sm=System.getSecurityManager(); _EL_   if (sm != null) { _EL_     sm.checkPrintJobAccess(); _EL_   } _EL_   checkActionSupport(Action.PRINT); _EL_   checkFileValidation(file); _EL_   peer.print(file); _EL_ } _EL_ ', '@Override public String expect(Pattern pattern){ _EL_   final String token=read(pattern); _EL_   if (token == null) { _EL_     throw new ParserException("Expected pattern \'" + pattern.pattern() + "\' was not encountered in document: "+ document); _EL_   } _EL_   return token; _EL_ } _EL_ ', 'public void removeSwipeListener(SwipeListener listener){ _EL_   if (mListeners == null) { _EL_     return; _EL_   } _EL_   mListeners.remove(listener); _EL_ } _EL_ ', "private static String descriptorForFieldSignature(String signature){ _EL_   return signature.replace('.','/'); _EL_ } _EL_ ", 'public void addParameters(final NameValuePair[] parameters){ _EL_   LOG.trace("enter PostMethod.addParameters(NameValuePair[])"); _EL_   if (parameters == null) { _EL_     LOG.warn("Attempt to addParameters(null) ignored"); _EL_   } _EL_  else { _EL_     super.clearRequestBody(); _EL_     for (int i=0; i < parameters.length; i++) { _EL_       params.add(parameters[i]); _EL_     } _EL_   } _EL_ } _EL_ ', "@Pure public Atom annotationInterfaceToAnnotationClass(){ _EL_   byte[] annotationClassName_tmp=new byte[val.length + 2]; _EL_   System.arraycopy(val,0,annotationClassName_tmp,0,val.length - 1); _EL_   annotationClassName_tmp[val.length - 1]='$'; _EL_   annotationClassName_tmp[val.length]='$'; _EL_   annotationClassName_tmp[val.length + 1]=';'; _EL_   return Atom.findOrCreateUtf8Atom(annotationClassName_tmp); _EL_ } _EL_ ", 'public boolean resourceSupportAR(Integer id){ _EL_   if (id == null) { _EL_     return false; _EL_   } _EL_   return resourceSupportAR(id.intValue()); _EL_ } _EL_ ', 'public static Map<String,Object> createElectronicText(DispatchContext dctx,Map<String,? extends Object> context){ _EL_   Map<String,Object> result=createElectronicTextMethod(dctx,context); _EL_   return result; _EL_ } _EL_ ', 'public PatternGuardExpr(String namespace,String name,Expression[] parameters,PatternExpr guarded){ _EL_   this(namespace,name,Arrays.asList(parameters),guarded); _EL_ } _EL_ ', 'public static int intersectLineLine(Line2D a,Line2D b,Point2D intersect){ _EL_   double a1x=a.getX1(), a1y=a.getY1(); _EL_   double a2x=a.getX2(), a2y=a.getY2(); _EL_   double b1x=b.getX1(), b1y=b.getY1(); _EL_   double b2x=b.getX2(), b2y=b.getY2(); _EL_   return intersectLineLine(a1x,a1y,a2x,a2y,b1x,b1y,b2x,b2y,intersect); _EL_ } _EL_ ', 'protected void drawGridBackground(Canvas c){ _EL_   if (mDrawGridBackground) { _EL_     c.drawRect(mViewPortHandler.getContentRect(),mGridBackgroundPaint); _EL_   } _EL_   if (mDrawBorders) { _EL_     c.drawRect(mViewPortHandler.getContentRect(),mBorderPaint); _EL_   } _EL_ } _EL_ ', 'public ZipStreamImpl openReadImpl(PathImpl path) throws IOException { _EL_   String pathName=path.getPath(); _EL_   return openReadImpl(pathName); _EL_ } _EL_ ', 'private static char[] zzUnpackCMap(String packed){ _EL_   char[] map=new char[0x10000]; _EL_   int i=0; _EL_   int j=0; _EL_   while (i < 112) { _EL_     int count=packed.charAt(i++); _EL_     char value=packed.charAt(i++); _EL_     do     map[j++]=value; _EL_  while (--count > 0); _EL_   } _EL_   return map; _EL_ } _EL_ ', '@Override public void onTmpFilesCopied(ResultCode result){ _EL_   dismissLoadingDialog(); _EL_   finish(); _EL_ } _EL_ ', 'public synchronized OMGraphicList prepare(){ _EL_   Projection projection=getProjection(); _EL_   boolean DEBUG_FINE=logger.isLoggable(Level.FINE); _EL_   if (projection == null) { _EL_     if (DEBUG_FINE) { _EL_       logger.fine(getName() + ": prepare called with null projection"); _EL_     } _EL_     return new OMGraphicList(); _EL_   } _EL_   if (spatialIndex == null) { _EL_     if (DEBUG_FINE) { _EL_       logger.fine(getName() + ": spatialIndex is null!"); _EL_     } _EL_     OMGraphicList list=getList(); _EL_     if (list != null) { _EL_       list.generate(projection,true); _EL_       return list; _EL_     } _EL_  else { _EL_       return new OMGraphicList(); _EL_     } _EL_   } _EL_   Point2D ul=projection.getUpperLeft(); _EL_   Point2D lr=projection.getLowerRight(); _EL_   double ulLat=ul.getY(); _EL_   double ulLon=ul.getX(); _EL_   double lrLat=lr.getY(); _EL_   double lrLon=lr.getX(); _EL_   OMGraphicList list=new OMGraphicList(); _EL_   if (ProjMath.isCrossingDateline(ulLon,lrLon,projection.getScale())) { _EL_     if (DEBUG_FINE) { _EL_       logger.fine("ShapeLayer.computeGraphics(): Dateline is on screen"); _EL_     } _EL_     double ymin=Math.min(ulLat,lrLat); _EL_     double ymax=Math.max(ulLat,lrLat); _EL_     try { _EL_       list=spatialIndex.getOMGraphics(ulLon,ymin,180.0d,ymax,list,drawingAttributes,projection,coordTransform); _EL_       list=spatialIndex.getOMGraphics(-180.0d,ymin,lrLon,ymax,list,drawingAttributes,projection,coordTransform); _EL_     } _EL_  catch (    InterruptedIOException iioe) { _EL_       list=null; _EL_     } _EL_ catch (    IOException ex) { _EL_       if (DEBUG_FINE) { _EL_         ex.printStackTrace(); _EL_       } _EL_     } _EL_ catch (    FormatException fe) { _EL_       if (DEBUG_FINE) { _EL_         fe.printStackTrace(); _EL_       } _EL_     } _EL_ catch (    NullPointerException npe) { _EL_       if (DEBUG_FINE) { _EL_         npe.printStackTrace(); _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     double xmin=Math.min(ulLon,lrLon); _EL_     double xmax=Math.max(ulLon,lrLon); _EL_     double ymin=Math.min(ulLat,lrLat); _EL_     double ymax=Math.max(ulLat,lrLat); _EL_     try { _EL_       list=spatialIndex.getOMGraphics(xmin,ymin,xmax,ymax,list,drawingAttributes,projection,coordTransform); _EL_     } _EL_  catch (    InterruptedIOException iioe) { _EL_       list=null; _EL_     } _EL_ catch (    java.io.IOException ex) { _EL_       if (DEBUG_FINE) { _EL_         ex.printStackTrace(); _EL_       } _EL_     } _EL_ catch (    FormatException fe) { _EL_       if (DEBUG_FINE) { _EL_         fe.printStackTrace(); _EL_       } _EL_     } _EL_ catch (    NullPointerException npe) { _EL_       if (DEBUG_FINE) { _EL_         npe.printStackTrace(); _EL_       } _EL_     } _EL_   } _EL_   return list; _EL_ } _EL_ ', 'static WorkQueue commonSubmitterQueue(){ _EL_   ForkJoinPool p; _EL_   WorkQueue[] ws; _EL_   int m; _EL_   Submitter z; _EL_   return ((z=submitters.get()) != null && (p=commonPool) != null && (ws=p.workQueues) != null && (m=ws.length - 1) >= 0) ? ws[m & z.seed & SQMASK] : null; _EL_ } _EL_ ', 'private boolean isFieldPackagePrivate(Element attribute){ _EL_   Set<Modifier> modifiers=attribute.getModifiers(); _EL_   return !modifiers.contains(PUBLIC) && !modifiers.contains(PROTECTED) && !modifiers.contains(PRIVATE); _EL_ } _EL_ ', '@CallSuper protected void onPageScrolled(int position,float offset,int offsetPixels){ _EL_   if (mDecorChildCount > 0) { _EL_     final int scrollX=getScrollX(); _EL_     int paddingLeft=getPaddingLeft(); _EL_     int paddingRight=getPaddingRight(); _EL_     final int width=getWidth(); _EL_     final int childCount=getChildCount(); _EL_     for (int i=0; i < childCount; i++) { _EL_       final View child=getChildAt(i); _EL_       final LayoutParams lp=(LayoutParams)child.getLayoutParams(); _EL_       if (!lp.isDecor)       continue; _EL_       final int hgrav=lp.gravity & Gravity.HORIZONTAL_GRAVITY_MASK; _EL_       int childLeft=0; _EL_ switch (hgrav) { _EL_ default : _EL_         childLeft=paddingLeft; _EL_       break; _EL_ case Gravity.LEFT: _EL_     childLeft=paddingLeft; _EL_   paddingLeft+=child.getWidth(); _EL_ break; _EL_ case Gravity.CENTER_HORIZONTAL: _EL_ childLeft=Math.max((width - child.getMeasuredWidth()) / 2,paddingLeft); _EL_ break; _EL_ case Gravity.RIGHT: _EL_ childLeft=width - paddingRight - child.getMeasuredWidth(); _EL_ paddingRight+=child.getMeasuredWidth(); _EL_ break; _EL_ } _EL_ childLeft+=scrollX; _EL_ final int childOffset=childLeft - child.getLeft(); _EL_ if (childOffset != 0) { _EL_ child.offsetLeftAndRight(childOffset); _EL_ } _EL_ } _EL_ } _EL_ dispatchOnPageScrolled(position,offset,offsetPixels); _EL_ if (mPageTransformer != null) { _EL_ final int scrollX=getScrollX(); _EL_ final int childCount=getChildCount(); _EL_ for (int i=0; i < childCount; i++) { _EL_ final View child=getChildAt(i); _EL_ final LayoutParams lp=(LayoutParams)child.getLayoutParams(); _EL_ if (lp.isDecor) continue; _EL_ final float transformPos=(float)(child.getLeft() - scrollX) / getClientWidth(); _EL_ mPageTransformer.transformPage(child,transformPos); _EL_ } _EL_ } _EL_ mCalledSuper=true; _EL_ } _EL_ ', 'private void loadText(InputStream is){ _EL_   BufferedReader reader; _EL_   String line; _EL_   unitList=new ArrayList(); _EL_   unitTypesList=new ArrayList(); _EL_   if (is == null) { _EL_     throw new Error("Can\'t load cluster db file."); _EL_   } _EL_   reader=new BufferedReader(new InputStreamReader(is)); _EL_   try { _EL_     line=reader.readLine(); _EL_     lineCount++; _EL_     while (line != null) { _EL_       if (!line.startsWith("***")) { _EL_         parseAndAdd(line,reader); _EL_       } _EL_       line=reader.readLine(); _EL_     } _EL_     reader.close(); _EL_     units=new DatabaseClusterUnit[unitList.size()]; _EL_     units=(DatabaseClusterUnit[])unitList.toArray(units); _EL_     unitList=null; _EL_     unitTypes=new UnitType[unitTypesList.size()]; _EL_     unitTypes=(UnitType[])unitTypesList.toArray(unitTypes); _EL_     unitTypesList=null; _EL_   } _EL_  catch (  IOException e) { _EL_     throw new Error(e.getMessage() + " at line " + lineCount); _EL_   } _EL_  finally { _EL_   } _EL_ } _EL_ ', 'private float calculateSelectorRadius(){ _EL_   if (mfSelectorRadius == 0.0f) { _EL_     int nHeight=mSelectedView.getHeight(); _EL_     int nWidth=mSelectedView.getWidth(); _EL_     int nLargerSide=Math.max(nWidth,nHeight); _EL_     mfSelectorRadius=((nLargerSide ^ 2) / 2); _EL_   } _EL_   return mfSelectorRadius; _EL_ } _EL_ ', 'private int measureWidth(int measureSpec){ _EL_   int result; _EL_   int specMode=MeasureSpec.getMode(measureSpec); _EL_   int specSize=MeasureSpec.getSize(measureSpec); _EL_   if (specMode == MeasureSpec.EXACTLY) { _EL_     result=specSize; _EL_   } _EL_  else { _EL_     result=(int)mTextPaint.measureText(mText) + getPaddingLeft() + getPaddingRight(); _EL_     if (specMode == MeasureSpec.AT_MOST) { _EL_       result=Math.min(result,specSize); _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', '@Override public void onAdded(final RPObject object){ _EL_   if (isUser(object)) { _EL_     if (object.has("adminlevel")) { _EL_       adminlevel=object.getInt("adminlevel"); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static byte[] decode(String s){ _EL_   return decode(s.toCharArray()); _EL_ } _EL_ ', 'public CheckpointManager(NetworkParameters params,@Nullable InputStream inputStream) throws IOException { _EL_   this.params=checkNotNull(params); _EL_   if (inputStream == null)   inputStream=openStream(params); _EL_   checkNotNull(inputStream); _EL_   inputStream=new BufferedInputStream(inputStream); _EL_   inputStream.mark(1); _EL_   int first=inputStream.read(); _EL_   inputStream.reset(); _EL_   if (first == BINARY_MAGIC.charAt(0))   dataHash=readBinary(inputStream); _EL_  else   if (first == TEXTUAL_MAGIC.charAt(0))   dataHash=readTextual(inputStream); _EL_  else   throw new IOException("Unsupported format."); _EL_ } _EL_ ', 'private String liveness(){ _EL_   boolean isClosed=false; _EL_   try { _EL_     if (isClosed()) { _EL_       isClosed=true; _EL_     } _EL_   } _EL_  catch (  SQLException s) { _EL_     isClosed=true; _EL_   } _EL_   if (isClosed) { _EL_     return "CLOSED"; _EL_   } _EL_   return "OPEN"; _EL_ } _EL_ ', 'private static void insertValue(final Map<String,List<String>> paramsMap,final String paramVal,final String parameterName){ _EL_   if (paramVal != null) { _EL_     List<String> list=new ArrayList<>(); _EL_     list.add(paramVal); _EL_     paramsMap.put(parameterName,list); _EL_   } _EL_ } _EL_ ', 'public Dimension minimumLayoutSize(Container target){ _EL_   Dimension size; _EL_ synchronized (this) { _EL_     checkContainer(target); _EL_     checkRequests(); _EL_     size=new Dimension(xTotal.minimum,yTotal.minimum); _EL_   } _EL_   Insets insets=target.getInsets(); _EL_   size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE); _EL_   size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE); _EL_   return size; _EL_ } _EL_ ', 'public boolean select(int position){ _EL_   View v=mAllList.get(position); _EL_   if (mMultiChoiceAdapter != null) { _EL_     performVibrate(); _EL_     performSelect(v,position,true); _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private static final void waitForEditorToBeActive(IEditorPart internalFileEditor,IWorkbenchPage page){ _EL_   long start=System.currentTimeMillis(); _EL_   long end=start; _EL_   do { _EL_     end=System.currentTimeMillis(); _EL_   } _EL_  while (page.getActiveEditor() != internalFileEditor && (end - start) < 5000); _EL_   if (page.getActiveEditor() != internalFileEditor)   logger.warn("selected editor was not activated within timout"); _EL_ } _EL_ ', 'private Solution largestObjectiveValue(int objective,Population population){ _EL_   Solution largest=null; _EL_   double value=Double.NEGATIVE_INFINITY; _EL_   for (  Solution solution : population) { _EL_     if (solution.getObjective(objective) > value) { _EL_       largest=solution; _EL_       value=solution.getObjective(objective); _EL_     } _EL_   } _EL_   return largest; _EL_ } _EL_ ', 'public static int convertLatmToY(int latm){ _EL_   long v=Math.round((Mercator.MAX_Y - Mercator.lat2y(latm / LATLON_TO_LATLONM)) * MAX_AP_UNITS / (Mercator.MAX_Y * 2)); _EL_   if (v > MAX_AP_UNITS)   return MAX_AP_UNITS; _EL_   if (v < 0)   return -1; _EL_   return (int)v; _EL_ } _EL_ ', 'public void registerCallbackHandler(SMSObjectListener changeListener) throws SMSException { _EL_   objectListener=changeListener; _EL_   if (!notificationInitialized) { _EL_     String notificationFlag=SystemProperties.get(NOTIFICATION_PROPERTY,"true"); _EL_     if (notificationFlag.equalsIgnoreCase("true")) { _EL_       try { _EL_         URL url=WebtopNaming.getNotificationURL(); _EL_         PLLClient.addNotificationHandler(JAXRPCUtil.SMS_SERVICE,new SMSNotificationHandler()); _EL_         client.send("registerNotificationURL",url.toString(),null,null); _EL_         if (debug.messageEnabled()) { _EL_           debug.message("SMSJAXRPCObject: Using " + "notification mechanism for cache updates: " + url); _EL_         } _EL_       } _EL_  catch (      Exception e) { _EL_         if (debug.warningEnabled()) { _EL_           debug.warning("SMSJAXRPCObject: Registering for " + "notification via URL failed: " + e.getMessage() + "\\nUsing polling mechanism for updates"); _EL_         } _EL_         startPollingThreadIfEnabled(getCachePollingInterval()); _EL_       } _EL_     } _EL_  else { _EL_       startPollingThreadIfEnabled(getCachePollingInterval()); _EL_     } _EL_     notificationInitialized=true; _EL_   } _EL_ } _EL_ ', 'public static NSObject parse(InputStream in) throws ParseException, IOException { _EL_   byte[] buf=PropertyListParser.readAll(in); _EL_   in.close(); _EL_   return parse(buf); _EL_ } _EL_ ', 'protected double currentScoreFunction(){ _EL_   double score=0.; _EL_   for (int i=0; i < this.values[this.currentVar1].length; i++) { _EL_     for (int j=0; j < this.values[this.currentVar2].length; j++) { _EL_       score-=this.currentCounts[this.currentVar1][this.currentVar2][i][j] * Math.log(this.currentPi[i][j]); _EL_     } _EL_   } _EL_   return score; _EL_ } _EL_ ', 'public void checkNextPoissonConsistency(double mean){ _EL_   final int sampleSize=1000; _EL_   final int minExpectedCount=7; _EL_   long maxObservedValue=0; _EL_   final double alpha=0.001; _EL_   UnitTestUtils.Frequency<Long> frequency=new UnitTestUtils.Frequency<Long>(); _EL_   for (int i=0; i < sampleSize; i++) { _EL_     long value=randomData.nextPoisson(mean); _EL_     if (value > maxObservedValue) { _EL_       maxObservedValue=value; _EL_     } _EL_     frequency.addValue(value); _EL_   } _EL_   PoissonDistribution poissonDistribution=new PoissonDistribution(mean); _EL_   int lower=1; _EL_   while (poissonDistribution.cumulativeProbability(lower - 1) * sampleSize < minExpectedCount) { _EL_     lower++; _EL_   } _EL_   int upper=(int)(5 * mean); _EL_   while ((1 - poissonDistribution.cumulativeProbability(upper - 1)) * sampleSize < minExpectedCount) { _EL_     upper--; _EL_   } _EL_   int binWidth=0; _EL_   boolean widthSufficient=false; _EL_   double lowerBinMass=0; _EL_   double upperBinMass=0; _EL_   while (!widthSufficient) { _EL_     binWidth++; _EL_     lowerBinMass=poissonDistribution.probability(lower - 1,lower + binWidth - 1); _EL_     upperBinMass=poissonDistribution.probability(upper - binWidth - 1,upper - 1); _EL_     widthSufficient=FastMath.min(lowerBinMass,upperBinMass) * sampleSize >= minExpectedCount; _EL_   } _EL_   List<Integer> binBounds=new ArrayList<Integer>(); _EL_   binBounds.add(lower); _EL_   int bound=lower + binWidth; _EL_   while (bound < upper - binWidth) { _EL_     binBounds.add(bound); _EL_     bound+=binWidth; _EL_   } _EL_   binBounds.add(upper); _EL_   final int binCount=binBounds.size() + 1; _EL_   long[] observed=new long[binCount]; _EL_   double[] expected=new double[binCount]; _EL_   observed[0]=0; _EL_   for (int i=0; i < lower; i++) { _EL_     observed[0]+=frequency.getCount((long)i); _EL_   } _EL_   expected[0]=poissonDistribution.cumulativeProbability(lower - 1) * sampleSize; _EL_   observed[binCount - 1]=0; _EL_   for (int i=upper; i <= maxObservedValue; i++) { _EL_     observed[binCount - 1]+=frequency.getCount((long)i); _EL_   } _EL_   expected[binCount - 1]=(1 - poissonDistribution.cumulativeProbability(upper - 1)) * sampleSize; _EL_   for (int i=1; i < binCount - 1; i++) { _EL_     observed[i]=0; _EL_     for (int j=binBounds.get(i - 1); j < binBounds.get(i); j++) { _EL_       observed[i]+=frequency.getCount((long)j); _EL_     } _EL_     expected[i]=(poissonDistribution.cumulativeProbability(binBounds.get(i) - 1) - poissonDistribution.cumulativeProbability(binBounds.get(i - 1) - 1)) * sampleSize; _EL_   } _EL_   if (UnitTestUtils.chiSquareTest(expected,observed) < alpha) { _EL_     StringBuilder msgBuffer=new StringBuilder(); _EL_     DecimalFormat df=new DecimalFormat("#.##"); _EL_     msgBuffer.append("Chisquare test failed for mean = "); _EL_     msgBuffer.append(mean); _EL_     msgBuffer.append(" p-value = "); _EL_     msgBuffer.append(UnitTestUtils.chiSquareTest(expected,observed)); _EL_     msgBuffer.append(" chisquare statistic = "); _EL_     msgBuffer.append(UnitTestUtils.chiSquare(expected,observed)); _EL_     msgBuffer.append(". \\n"); _EL_     msgBuffer.append("bin\\t\\texpected\\tobserved\\n"); _EL_     for (int i=0; i < expected.length; i++) { _EL_       msgBuffer.append("["); _EL_       msgBuffer.append(i == 0 ? 1 : binBounds.get(i - 1)); _EL_       msgBuffer.append(","); _EL_       msgBuffer.append(i == binBounds.size() ? "inf" : binBounds.get(i)); _EL_       msgBuffer.append(")"); _EL_       msgBuffer.append("\\t\\t"); _EL_       msgBuffer.append(df.format(expected[i])); _EL_       msgBuffer.append("\\t\\t"); _EL_       msgBuffer.append(observed[i]); _EL_       msgBuffer.append("\\n"); _EL_     } _EL_     msgBuffer.append("This test can fail randomly due to sampling error with probability "); _EL_     msgBuffer.append(alpha); _EL_     msgBuffer.append("."); _EL_     Assert.fail(msgBuffer.toString()); _EL_   } _EL_ } _EL_ ', 'public static void checkValid(double[] x){ _EL_   for (  double v : x) { _EL_     if (Double.isNaN(v)) { _EL_       throw new RuntimeException("Invalid entry " + v); _EL_     } _EL_   } _EL_ } _EL_ ', 'final void layoutChildren(boolean queryAdapter){ _EL_   final int paddingLeft=getPaddingLeft(); _EL_   final int paddingRight=getPaddingRight(); _EL_   final int itemMargin=mItemMargin; _EL_   final int colWidth=(getWidth() - paddingLeft - paddingRight- itemMargin * (mColCount - 1)) / mColCount; _EL_   mColWidth=colWidth; _EL_   int rebuildLayoutRecordsBefore=-1; _EL_   int rebuildLayoutRecordsAfter=-1; _EL_   Arrays.fill(mItemBottoms,Integer.MIN_VALUE); _EL_   final int childCount=getChildCount(); _EL_   int amountRemoved=0; _EL_   for (int i=0; i < childCount; i++) { _EL_     View child=getChildAt(i); _EL_     LayoutParams lp=(LayoutParams)child.getLayoutParams(); _EL_     final int col=lp.column; _EL_     final int position=mFirstPosition + i; _EL_     final boolean needsLayout=queryAdapter || child.isLayoutRequested(); _EL_     if (queryAdapter) { _EL_       View newView=obtainView(position,child); _EL_       if (newView == null) { _EL_         removeViewAt(i); _EL_         if (i - 1 >= 0)         invalidateLayoutRecordsAfterPosition(i - 1); _EL_         amountRemoved++; _EL_         continue; _EL_       } _EL_  else       if (newView != child) { _EL_         removeViewAt(i); _EL_         addView(newView,i); _EL_         child=newView; _EL_       } _EL_       lp=(LayoutParams)child.getLayoutParams(); _EL_     } _EL_     final int span=Math.min(mColCount,lp.span); _EL_     final int widthSize=colWidth * span + itemMargin * (span - 1); _EL_     if (needsLayout) { _EL_       final int widthSpec=MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY); _EL_       final int heightSpec; _EL_       if (lp.height == LayoutParams.WRAP_CONTENT) { _EL_         heightSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED); _EL_       } _EL_  else { _EL_         heightSpec=MeasureSpec.makeMeasureSpec(lp.height,MeasureSpec.EXACTLY); _EL_       } _EL_       child.measure(widthSpec,heightSpec); _EL_     } _EL_     int childTop=mItemBottoms[col] > Integer.MIN_VALUE ? mItemBottoms[col] + mItemMargin : child.getTop(); _EL_     if (span > 1) { _EL_       int lowest=childTop; _EL_       for (int j=col + 1; j < col + span; j++) { _EL_         final int bottom=mItemBottoms[j] + mItemMargin; _EL_         if (bottom > lowest) { _EL_           lowest=bottom; _EL_         } _EL_       } _EL_       childTop=lowest; _EL_     } _EL_     final int childHeight=child.getMeasuredHeight(); _EL_     final int childBottom=childTop + childHeight; _EL_     final int childLeft=paddingLeft + col * (colWidth + itemMargin); _EL_     final int childRight=childLeft + child.getMeasuredWidth(); _EL_     child.layout(childLeft,childTop,childRight,childBottom); _EL_     for (int j=col; j < col + span; j++) { _EL_       mItemBottoms[j]=childBottom; _EL_     } _EL_     final LayoutRecord rec=mLayoutRecords.get(position); _EL_     if (rec != null && rec.height != childHeight) { _EL_       rec.height=childHeight; _EL_       rebuildLayoutRecordsBefore=position; _EL_     } _EL_     if (rec != null && rec.span != span) { _EL_       rec.span=span; _EL_       rebuildLayoutRecordsAfter=position; _EL_     } _EL_   } _EL_   for (int i=0; i < mColCount; i++) { _EL_     if (mItemBottoms[i] == Integer.MIN_VALUE) { _EL_       mItemBottoms[i]=mItemTops[i]; _EL_     } _EL_   } _EL_   if (rebuildLayoutRecordsBefore >= 0 || rebuildLayoutRecordsAfter >= 0) { _EL_     if (rebuildLayoutRecordsBefore >= 0) { _EL_       invalidateLayoutRecordsBeforePosition(rebuildLayoutRecordsBefore); _EL_     } _EL_     if (rebuildLayoutRecordsAfter >= 0) { _EL_       invalidateLayoutRecordsAfterPosition(rebuildLayoutRecordsAfter); _EL_     } _EL_     for (int i=0; i < (childCount - amountRemoved); i++) { _EL_       final int position=mFirstPosition + i; _EL_       final View child=getChildAt(i); _EL_       final LayoutParams lp=(LayoutParams)child.getLayoutParams(); _EL_       LayoutRecord rec=mLayoutRecords.get(position); _EL_       if (rec == null) { _EL_         rec=new LayoutRecord(); _EL_         mLayoutRecords.put(position,rec); _EL_       } _EL_       rec.column=lp.column; _EL_       rec.height=child.getHeight(); _EL_       rec.id=lp.id; _EL_       rec.span=Math.min(mColCount,lp.span); _EL_     } _EL_   } _EL_   if (this.mSelectorPosition != INVALID_POSITION) { _EL_     View child=getChildAt(mMotionPosition - mFirstPosition); _EL_     if (child != null)     positionSelector(mMotionPosition,child); _EL_   } _EL_  else   if (mTouchMode > TOUCH_MODE_DOWN) { _EL_     View child=getChildAt(mMotionPosition - mFirstPosition); _EL_     if (child != null)     positionSelector(mMotionPosition,child); _EL_   } _EL_  else { _EL_     mSelectorRect.setEmpty(); _EL_   } _EL_ } _EL_ ', 'protected void processConnectionEvent(ConnectionEvent event){ _EL_   for (Enumeration<ConnectionListener> e=connectionListeners.elements(); e.hasMoreElements(); ) { _EL_     ConnectionListener l=e.nextElement(); _EL_ switch (event.getType()) { _EL_ case ConnectionEvent.CONNECTED: _EL_       l.connected((ConnectedEvent)event); _EL_     break; _EL_ case ConnectionEvent.DISCONNECTED: _EL_   l.disconnected((DisconnectedEvent)event); _EL_ break; _EL_ case ConnectionEvent.PACKET_RECEIVED: _EL_ l.packetReceived((PacketReceivedEvent)event); _EL_ break; _EL_ } _EL_ } _EL_ } _EL_ ', 'public double percentage(ConstantRange range){ _EL_   SortedSet<Constant> sorted=values(); _EL_   SortedSet<Constant> contained=new TreeSet<Constant>(); _EL_   Constant prev=null; _EL_   for (  Constant pct : sorted) { _EL_     if (range.contains(pct))     contained.add(pct); _EL_  else     if (contained.isEmpty())     prev=pct; _EL_   } _EL_   if (contained.size() == 0)   return 0.0; _EL_   double prevPercent=prev == null ? 0.0 : pcts.get(prev); _EL_   return pcts.get(contained.last()) - prevPercent; _EL_ } _EL_ ', 'public static void closeQuiet(@Nullable Closeable closeable){ _EL_   if (closeable != null) { _EL_     try { _EL_       closeable.close(); _EL_     } _EL_  catch (    IOException ignored) { _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public void releaseLuceePageContext(PageContext pc,boolean register){ _EL_   if (pc.getId() < 0)   return; _EL_   pc.release(); _EL_   ThreadLocalPageContext.release(); _EL_   runningPcs.remove(Integer.valueOf(pc.getId())); _EL_   if (pcs.size() < 100 && pc.getRequestTimeoutException() == null)   pcs.push(pc); _EL_ } _EL_ ', 'public void addEventListener(SIPDialogEventListener newListener){ _EL_   eventListeners.add(newListener); _EL_ } _EL_ ', 'private boolean journalRebuildRequired(){ _EL_   final int redundantOpCompactThreshold=2000; _EL_   return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size(); _EL_ } _EL_ ', 'private static byte[] stringToByteArray(String str){ _EL_   if (str == null) { _EL_     return null; _EL_   } _EL_   byte[] srcByte=str.getBytes(); _EL_   int srcLength=srcByte.length; _EL_   byte[] result=new byte[srcLength + 1]; _EL_   System.arraycopy(srcByte,0,result,0,srcLength); _EL_   result[srcLength]=0; _EL_   return result; _EL_ } _EL_ ', 'public static Properties loadProperties(ClassLoader classLoader,String classpathResource){ _EL_   return loadProperties(null,classpathResource); _EL_ } _EL_ ', '@Override public boolean equals(Object o){ _EL_   if (o instanceof Graph) { _EL_     return string.equals(o.toString()); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public final static NameValuePair parseNameValuePair(final String value,HeaderValueParser parser) throws ParseException { _EL_   if (value == null) { _EL_     throw new IllegalArgumentException("Value to parse may not be null"); _EL_   } _EL_   if (parser == null)   parser=SaveHeaderValueParser.DEFAULT; _EL_   CharArrayBuffer buffer=new CharArrayBuffer(value.length()); _EL_   buffer.append(value); _EL_   SaveParserCursor cursor=new SaveParserCursor(0,value.length()); _EL_   return parser.parseNameValuePair(buffer,cursor); _EL_ } _EL_ ', 'private void pullEvent(){ _EL_   final int newScrollValue; _EL_   final int itemDimension; _EL_   final float initialMotionValue, lastMotionValue; _EL_ switch (getPullToRefreshScrollDirection()) { _EL_ case HORIZONTAL: _EL_     initialMotionValue=mInitialMotionX; _EL_   lastMotionValue=mLastMotionX; _EL_ break; _EL_ case VERTICAL: _EL_ default : _EL_ initialMotionValue=mInitialMotionY; _EL_ lastMotionValue=mLastMotionY; _EL_ break; _EL_ } _EL_ switch (mCurrentMode) { _EL_ case PULL_FROM_END: _EL_ newScrollValue=Math.round(Math.max(initialMotionValue - lastMotionValue,0) / FRICTION); _EL_ itemDimension=getFooterSize(); _EL_ break; _EL_ case PULL_FROM_START: _EL_ default : _EL_ newScrollValue=Math.round(Math.min(initialMotionValue - lastMotionValue,0) / FRICTION); _EL_ itemDimension=getHeaderSize(); _EL_ break; _EL_ } _EL_ setHeaderScroll(newScrollValue); _EL_ if (newScrollValue != 0 && !isRefreshing()) { _EL_ float scale=Math.abs(newScrollValue) / (float)itemDimension; _EL_ switch (mCurrentMode) { _EL_ case PULL_FROM_END: _EL_ mFooterLayout.onPull(scale); _EL_ break; _EL_ case PULL_FROM_START: _EL_ default : _EL_ mHeaderLayout.onPull(scale); _EL_ break; _EL_ } _EL_ if (mState != State.PULL_TO_REFRESH && itemDimension >= Math.abs(newScrollValue)) { _EL_ setState(State.PULL_TO_REFRESH); _EL_ } _EL_  else if (mState == State.PULL_TO_REFRESH && itemDimension < Math.abs(newScrollValue)) { _EL_ setState(State.RELEASE_TO_REFRESH); _EL_ } _EL_ } _EL_ } _EL_ ', 'private static MappingObject ObjectAt(PCalLocation loc,MappingObject[][] map){ _EL_   return map[loc.getLine()][loc.getColumn()]; _EL_ } _EL_ ', 'private LinkedList<Diff> diff_main(String text1,String text2,boolean checklines,long deadline){ _EL_   if (text1 == null || text2 == null) { _EL_     throw new IllegalArgumentException("Null inputs. (diff_main)"); _EL_   } _EL_   LinkedList<Diff> diffs; _EL_   if (text1.equals(text2)) { _EL_     diffs=new LinkedList<Diff>(); _EL_     if (text1.length() != 0) { _EL_       diffs.add(new Diff(Operation.EQUAL,text1)); _EL_     } _EL_     return diffs; _EL_   } _EL_   int commonlength=diff_commonPrefix(text1,text2); _EL_   String commonprefix=text1.substring(0,commonlength); _EL_   text1=text1.substring(commonlength); _EL_   text2=text2.substring(commonlength); _EL_   commonlength=diff_commonSuffix(text1,text2); _EL_   String commonsuffix=text1.substring(text1.length() - commonlength); _EL_   text1=text1.substring(0,text1.length() - commonlength); _EL_   text2=text2.substring(0,text2.length() - commonlength); _EL_   diffs=diff_compute(text1,text2,checklines,deadline); _EL_   if (commonprefix.length() != 0) { _EL_     diffs.addFirst(new Diff(Operation.EQUAL,commonprefix)); _EL_   } _EL_   if (commonsuffix.length() != 0) { _EL_     diffs.addLast(new Diff(Operation.EQUAL,commonsuffix)); _EL_   } _EL_   diff_cleanupMerge(diffs); _EL_   return diffs; _EL_ } _EL_ ', 'public Repository(String domain,boolean fairLock){ _EL_   lock=new ReentrantReadWriteLock(fairLock); _EL_   domainTb=new HashMap<String,Map<String,NamedObject>>(5); _EL_   if (domain != null && domain.length() != 0)   this.domain=domain.intern(); _EL_  else   this.domain=ServiceName.DOMAIN; _EL_   domainTb.put(this.domain,new HashMap<String,NamedObject>()); _EL_ } _EL_ ', 'public int countTokens(){ _EL_   int count=0; _EL_   boolean inToken=false; _EL_   for (int i=position, length=string.length(); i < length; i++) { _EL_     if (delimiters.indexOf(string.charAt(i),0) >= 0) { _EL_       if (returnDelimiters)       count++; _EL_       if (inToken) { _EL_         count++; _EL_         inToken=false; _EL_       } _EL_     } _EL_  else { _EL_       inToken=true; _EL_     } _EL_   } _EL_   if (inToken)   count++; _EL_   return count; _EL_ } _EL_ ', 'private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { _EL_   in.defaultReadObject(); _EL_   i18n=Environment.getI18n(); _EL_   beanContextChildSupport=new BeanContextChildSupport(this); _EL_ } _EL_ ', 'private void paintForegroundEnabled(Graphics2D g,int width,int height){ _EL_   Shape s=decodeArrowPath(width,height); _EL_   g.setPaint(enabledColor); _EL_   g.fill(s); _EL_ } _EL_ ', 'private static void logThrow(Level level,String className,String methodName,String message,Object[] args,Throwable thrown){ _EL_   java.util.logging.LogRecord lr=new java.util.logging.LogRecord(level,message); _EL_   lr.setLoggerName(logger.getName()); _EL_   lr.setSourceClassName(className); _EL_   lr.setSourceMethodName(methodName); _EL_   lr.setParameters(args); _EL_   lr.setThrown(thrown); _EL_   logger.log(lr); _EL_ } _EL_ ', 'public void onAccuracyChanged(Sensor sensor,int accuracy){ _EL_   if (sensor.getType() != Sensor.TYPE_ACCELEROMETER) { _EL_     return; _EL_   } _EL_   if (this.status == AccelListener.STOPPED) { _EL_     return; _EL_   } _EL_   this.accuracy=accuracy; _EL_ } _EL_ ', 'public boolean allowsTrailingArguments(){ _EL_   return allowsTrailingArguments; _EL_ } _EL_ ', 'private void evaluatePopup(MouseEvent e){ _EL_   if (e.isPopupTrigger()) { _EL_     JPopupMenu menu=createBookmarkPopupMenu(); _EL_     if (menu != null) { _EL_       menu.show(this,e.getX(),e.getY()); _EL_     } _EL_   } _EL_ } _EL_ ', 'private boolean removeTask(Task t,int min){ _EL_   for (int i=tasks.size(); --i >= min; ) { _EL_     if (tasks.get(i) == t) { _EL_       tasks.remove(i); _EL_       if (i < firstPending) { _EL_         firstPending--; _EL_         for (int j=threads.size(); --j >= 0; ) { _EL_           TaskThread thread=threads.get(j); _EL_           if (thread.task == t) { _EL_             if (thread != Thread.currentThread())             thread.interrupt(); _EL_             break; _EL_           } _EL_         } _EL_       } _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', "public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException { _EL_   int i=name.lastIndexOf('.'); _EL_   if (i != -1) { _EL_     SecurityManager sm=System.getSecurityManager(); _EL_     if (sm != null) { _EL_       sm.checkPackageAccess(name.substring(0,i)); _EL_     } _EL_   } _EL_   if (ucp.knownToNotExist(name)) { _EL_     Class<?> c=findLoadedClass(name); _EL_     if (c != null) { _EL_       if (resolve) { _EL_         resolveClass(c); _EL_       } _EL_       return c; _EL_     } _EL_     throw new ClassNotFoundException(name); _EL_   } _EL_   return (super.loadClass(name,resolve)); _EL_ } _EL_ ", 'private int measureShort(int measureSpec){ _EL_   int result; _EL_   int specMode=MeasureSpec.getMode(measureSpec); _EL_   int specSize=MeasureSpec.getSize(measureSpec); _EL_   if (specMode == MeasureSpec.EXACTLY) { _EL_     result=specSize; _EL_   } _EL_  else { _EL_     result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1); _EL_     if (specMode == MeasureSpec.AT_MOST) { _EL_       result=Math.min(result,specSize); _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private boolean isListChildUnderClipped(float x,float y){ _EL_   final View listChild=findListChildUnder(x,y); _EL_   return listChild != null && isDescendantClipped(listChild); _EL_ } _EL_ ', 'public static void writeByteArrayToFile(File file,byte[] data,boolean append) throws IOException { _EL_   OutputStream out=null; _EL_   try { _EL_     out=openOutputStream(file,append); _EL_     out.write(data); _EL_     out.close(); _EL_   } _EL_   finally { _EL_     IOUtils.closeQuietly(out); _EL_   } _EL_ } _EL_ ', 'private void checkPendingCustomMessages(){ _EL_   if (joiningNodes.isEmpty() && isLocalNodeCoordinator()) { _EL_     TcpDiscoveryCustomEventMessage msg; _EL_     while ((msg=pendingCustomMsgs.poll()) != null) { _EL_       processCustomMessage(msg); _EL_       if (msg.verified())       msgHist.add(msg); _EL_     } _EL_   } _EL_ } _EL_ ', 'private static int determineConsecutiveDigitCount(CharSequence msg,int startpos){ _EL_   int count=0; _EL_   int len=msg.length(); _EL_   int idx=startpos; _EL_   if (idx < len) { _EL_     char ch=msg.charAt(idx); _EL_     while (isDigit(ch) && idx < len) { _EL_       count++; _EL_       idx++; _EL_       if (idx < len) { _EL_         ch=msg.charAt(idx); _EL_       } _EL_     } _EL_   } _EL_   return count; _EL_ } _EL_ ', 'private float calculateScrambleImageHeightMultiplier(float multiplier){ _EL_ switch (currentPuzzle) { _EL_ case PuzzleUtils.TYPE_777: _EL_ case PuzzleUtils.TYPE_666: _EL_ case PuzzleUtils.TYPE_555: _EL_ case PuzzleUtils.TYPE_222: _EL_ case PuzzleUtils.TYPE_444: _EL_ case PuzzleUtils.TYPE_333: _EL_     return (multiplier / 4) * 3; _EL_ case PuzzleUtils.TYPE_CLOCK: _EL_   return multiplier / 2; _EL_ case PuzzleUtils.TYPE_MEGA: _EL_ return (multiplier / 2); _EL_ case PuzzleUtils.TYPE_PYRA: _EL_ return (float)(multiplier / Math.sqrt(1.25)); _EL_ case PuzzleUtils.TYPE_SKEWB: _EL_ return (multiplier / 4) * 3; _EL_ case PuzzleUtils.TYPE_SQUARE1: _EL_ return multiplier; _EL_ } _EL_ return multiplier; _EL_ } _EL_ ', 'private static int indexOf(Object o,Object[] elements,int index,int fence){ _EL_   if (o == null) { _EL_     for (int i=index; i < fence; i++)     if (elements[i] == null)     return i; _EL_   } _EL_  else { _EL_     for (int i=index; i < fence; i++)     if (o.equals(elements[i]))     return i; _EL_   } _EL_   return -1; _EL_ } _EL_ ', 'private void populateProfiles(final ProfileList profiles){ _EL_   profilesComboBox.removeAllItems(); _EL_   for (  Profile p : profiles) { _EL_     profilesComboBox.addItem(p); _EL_   } _EL_   final int count=profilesComboBox.getItemCount(); _EL_   if (count != 0) { _EL_     profilesComboBox.setSelectedIndex(count - 1); _EL_   } _EL_ } _EL_ ', 'public float realAbsolute(){ _EL_   return Math.abs(mLeft); _EL_ } _EL_ ', 'private ExtremumType extremumType(int n,double[] alpha_extreme,HyperBoundingBox interval){ _EL_   if (n == alpha_extreme.length - 1) { _EL_     return extremumType; _EL_   } _EL_   double[] alpha_extreme_l=new double[alpha_extreme.length]; _EL_   double[] alpha_extreme_r=new double[alpha_extreme.length]; _EL_   double[] alpha_extreme_c=new double[alpha_extreme.length]; _EL_   System.arraycopy(alpha_extreme,0,alpha_extreme_l,0,alpha_extreme.length); _EL_   System.arraycopy(alpha_extreme,0,alpha_extreme_r,0,alpha_extreme.length); _EL_   System.arraycopy(alpha_extreme,0,alpha_extreme_c,0,alpha_extreme.length); _EL_   double[] centroid=SpatialUtil.centroid(interval); _EL_   for (int i=0; i < n; i++) { _EL_     alpha_extreme_l[i]=centroid[i]; _EL_     alpha_extreme_r[i]=centroid[i]; _EL_     alpha_extreme_c[i]=centroid[i]; _EL_   } _EL_   double intervalLength=interval.getMax(n) - interval.getMin(n); _EL_   alpha_extreme_l[n]=Math.random() * intervalLength + interval.getMin(n); _EL_   alpha_extreme_r[n]=Math.random() * intervalLength + interval.getMin(n); _EL_   double f_c=function(alpha_extreme_c); _EL_   double f_l=function(alpha_extreme_l); _EL_   double f_r=function(alpha_extreme_r); _EL_   if (f_l < f_c) { _EL_     if (f_r < f_c || Math.abs(f_r - f_c) < DELTA) { _EL_       return ExtremumType.MAXIMUM; _EL_     } _EL_   } _EL_   if (f_r < f_c) { _EL_     if (f_l < f_c || Math.abs(f_l - f_c) < DELTA) { _EL_       return ExtremumType.MAXIMUM; _EL_     } _EL_   } _EL_   if (f_l > f_c) { _EL_     if (f_r > f_c || Math.abs(f_r - f_c) < DELTA) { _EL_       return ExtremumType.MINIMUM; _EL_     } _EL_   } _EL_   if (f_r > f_c) { _EL_     if (f_l > f_c || Math.abs(f_l - f_c) < DELTA) { _EL_       return ExtremumType.MINIMUM; _EL_     } _EL_   } _EL_   if (Math.abs(f_l - f_c) < DELTA && Math.abs(f_r - f_c) < DELTA) { _EL_     return ExtremumType.CONSTANT; _EL_   } _EL_   throw new IllegalArgumentException("Houston, we have a problem!\\n" + this + "\\n"+ "f_l "+ f_l+ "\\n"+ "f_c "+ f_c+ "\\n"+ "f_r "+ f_r+ "\\n"+ "p "+ vec.toArray()+ "\\n"+ "alpha   "+ FormatUtil.format(alpha_extreme_c)+ "\\n"+ "alpha_l "+ FormatUtil.format(alpha_extreme_l)+ "\\n"+ "alpha_r "+ FormatUtil.format(alpha_extreme_r)+ "\\n"+ "n "+ n); _EL_ } _EL_ ', 'public static String map2OID(String algName){ _EL_   return alg2OidMap.get(algName.toUpperCase(Locale.US)); _EL_ } _EL_ ', '@Override public Generator<ICircle> construct(String[] args){ _EL_   return new UniformGenerator(Double.valueOf(args[0])); _EL_ } _EL_ ', 'private boolean yy_refill() throws java.io.IOException { _EL_   if (yy_startRead > 0) { _EL_     System.arraycopy(yy_buffer,yy_startRead,yy_buffer,0,yy_endRead - yy_startRead); _EL_     yy_endRead-=yy_startRead; _EL_     yy_currentPos-=yy_startRead; _EL_     yy_markedPos-=yy_startRead; _EL_     yy_pushbackPos-=yy_startRead; _EL_     yy_startRead=0; _EL_   } _EL_   if (yy_currentPos >= yy_buffer.length) { _EL_     char newBuffer[]=new char[yy_currentPos * 2]; _EL_     System.arraycopy(yy_buffer,0,newBuffer,0,yy_buffer.length); _EL_     yy_buffer=newBuffer; _EL_   } _EL_   int numRead=yy_reader.read(yy_buffer,yy_endRead,yy_buffer.length - yy_endRead); _EL_   if (numRead < 0) { _EL_     return true; _EL_   } _EL_  else { _EL_     yy_endRead+=numRead; _EL_     return false; _EL_   } _EL_ } _EL_ ', 'protected void processMouseEvent(MouseEvent e){ _EL_   if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) { _EL_     finishEditing(true); _EL_   } _EL_   super.processMouseEvent(e); _EL_ } _EL_ ', 'protected void addModule(Map<Class<? extends IFloodlightService>,IFloodlightModule> moduleMap,Collection<IFloodlightModule> moduleList,IFloodlightModule module){ _EL_   Collection<Class<? extends IFloodlightService>> servs=moduleServiceMap.get(module); _EL_   if (servs != null) { _EL_     for (    Class<? extends IFloodlightService> c : servs)     moduleMap.put(c,module); _EL_   } _EL_   moduleList.add(module); _EL_ } _EL_ ', 'protected boolean hasAllTables() throws CouldntLoadDataException, InvalidDatabaseException { _EL_   NaviLogger.info("Checking the existence of the BinNavi database tables"); _EL_   final int counter=PostgreSQLHelpers.getTableCount(getConnection(),Lists.newArrayList(TABLES)); _EL_   if (counter == 0) { _EL_     return false; _EL_   } _EL_  else   if (counter == TABLES.length) { _EL_     return true; _EL_   } _EL_  else { _EL_     throw new InvalidDatabaseException(String.format("Invalid database state (%d of %d tables found)",counter,TABLES.length)); _EL_   } _EL_ } _EL_ ', 'public void onBindHeaderViewHolder(RecyclerView.ViewHolder holder,int position){ _EL_   onBindHeaderViewHolder(holder,position,Collections.emptyList()); _EL_ } _EL_ ', 'private void updateLineList(){ _EL_   if (horizontalLineRadiobutton.isSelected()) { _EL_     setHorizontalLineSelected(); _EL_   } _EL_  else { _EL_     setVerticalLineSelected(); _EL_   } _EL_   updateButtonStates(); _EL_ } _EL_ ', 'public void rectangle(double x,double y,double halfWidth,double halfHeight){ _EL_   if (halfWidth < 0)   throw new IllegalArgumentException("half width can\'t be negative"); _EL_   if (halfHeight < 0)   throw new IllegalArgumentException("half height can\'t be negative"); _EL_   double xs=scaleX(x); _EL_   double ys=scaleY(y); _EL_   double ws=factorX(2 * halfWidth); _EL_   double hs=factorY(2 * halfHeight); _EL_   if (ws <= 1 && hs <= 1)   pixel(x,y); _EL_  else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs)); _EL_   draw(); _EL_ } _EL_ ', 'public void replaceSplitElement(int aIndex,Fragment aSplitElement){ _EL_   splits.set(aIndex,aSplitElement); _EL_ } _EL_ ', 'private void startItemList(StringBuilder result,String rootId){ _EL_   result.append("<div class=\\"container\\"" + "><div class=\\"alone fakealone\\" id=\\"alone_ef_" + rootId + "\\"></div><div class=\\"justchildren fakejustchildren\\">"); _EL_ } _EL_ ', 'private static int numInitialSplits(long numRecords){ _EL_   final int maxSplits=100; _EL_   final long recordsPerSplit=10000; _EL_   return (int)Math.min(maxSplits,numRecords / recordsPerSplit + 1); _EL_ } _EL_ ', 'public void mouseClicked(MouseEvent e){ _EL_   if (e.getClickCount() > 1) { _EL_     System.gc(); _EL_   } _EL_ } _EL_ ', 'private boolean hasNextPostponed(){ _EL_   return !postponedRoutes.isEmpty(); _EL_ } _EL_ ', 'public boolean hasSingleElement(){ _EL_   return mSelectedWidgets.size() == 1; _EL_ } _EL_ ', 'public IgfsPath(URI uri){ _EL_   A.notNull(uri,"uri"); _EL_   path=normalizePath(uri.getPath()); _EL_ } _EL_ ', 'public static String readFully(Reader reader) throws IOException { _EL_   try { _EL_     StringWriter writer=new StringWriter(); _EL_     char[] buffer=new char[1024]; _EL_     int count; _EL_     while ((count=reader.read(buffer)) != -1) { _EL_       writer.write(buffer,0,count); _EL_     } _EL_     return writer.toString(); _EL_   } _EL_   finally { _EL_     reader.close(); _EL_   } _EL_ } _EL_ ', 'public void addGetters(int assignedPropertyNumber,String propertyName){ _EL_   for (  EventType type : knownTypes) { _EL_     EventPropertyGetter getter=type.getGetter(propertyName); _EL_     VariantPropertyGetterRow row=allGetters.get(type); _EL_     if (row == null) { _EL_ synchronized (this) { _EL_         row=new VariantPropertyGetterRow(type,new EventPropertyGetter[assignedPropertyNumber + 1]); _EL_         allGetters.put(type,row); _EL_       } _EL_     } _EL_     row.addGetter(assignedPropertyNumber,getter); _EL_   } _EL_   properties.add(propertyName); _EL_ } _EL_ ', 'protected void markUsed(Entry entry){ _EL_   entry.lastUsed=System.nanoTime(); _EL_ } _EL_ ', 'private void handleStateLeft(InetAddress endpoint,String[] pieces){ _EL_   assert pieces.length >= 2; _EL_   Collection<Token> tokens=getTokensFor(endpoint); _EL_   if (logger.isDebugEnabled())   logger.debug("Node {} state left, tokens {}",endpoint,tokens); _EL_   excise(tokens,endpoint,extractExpireTime(pieces)); _EL_ } _EL_ ', 'public static void register(String algorithmURI,Class<? extends SignatureAlgorithmSpi> implementingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, XMLSignatureException { _EL_   JavaUtils.checkRegisterPermission(); _EL_   if (log.isLoggable(java.util.logging.Level.FINE)) { _EL_     log.log(java.util.logging.Level.FINE,"Try to register " + algorithmURI + " "+ implementingClass); _EL_   } _EL_   Class<? extends SignatureAlgorithmSpi> registeredClass=algorithmHash.get(algorithmURI); _EL_   if (registeredClass != null) { _EL_     Object exArgs[]={algorithmURI,registeredClass}; _EL_     throw new AlgorithmAlreadyRegisteredException("algorithm.alreadyRegistered",exArgs); _EL_   } _EL_   algorithmHash.put(algorithmURI,implementingClass); _EL_ } _EL_ ', '@SuppressWarnings("UnusedDeclaration") public KeyValuePersistenceSettings(File settingsFile){ _EL_   InputStream in; _EL_   try { _EL_     in=new FileInputStream(settingsFile); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new IgniteException("Failed to get input stream for Cassandra persistence settings file: " + settingsFile.getAbsolutePath(),e); _EL_   } _EL_   init(loadSettings(in)); _EL_ } _EL_ ', 'public boolean containsWordBreakingChar(final @NonNull CharSequence input){ _EL_   if (!TextUtils.isEmpty(input)) { _EL_     for (int i=0; i < input.length(); i++) { _EL_       char c=input.charAt(i); _EL_       if (isWordBreakingChar(c)) { _EL_         return true; _EL_       } _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private void checkInteriorIntersections(){ _EL_   for (Iterator i=segStrings.iterator(); i.hasNext(); ) { _EL_     SegmentString ss0=(SegmentString)i.next(); _EL_     for (Iterator j=segStrings.iterator(); j.hasNext(); ) { _EL_       SegmentString ss1=(SegmentString)j.next(); _EL_       checkInteriorIntersections(ss0,ss1); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void addCdcColSpecs(ArrayList<ColumnSpec> cdcSpecs,OneRowChange cdcRowChangeData){ _EL_   int cdcPos=cdcSpecs.size(); _EL_   if (cdcColumnsAtFront)   cdcPos=0; _EL_   ColumnSpec spec=cdcRowChangeData.new ColumnSpec(); _EL_   spec.setIndex(cdcPos + 1); _EL_   spec.setName("CDC_OP_TYPE"); _EL_   spec.setType(java.sql.Types.VARCHAR); _EL_   spec.setLength(1); _EL_   cdcSpecs.add(cdcPos,spec); _EL_   spec=cdcRowChangeData.new ColumnSpec(); _EL_   spec.setIndex(cdcPos + 1 + 1); _EL_   spec.setName("CDC_TIMESTAMP"); _EL_   spec.setType(java.sql.Types.TIMESTAMP); _EL_   cdcSpecs.add(cdcPos + 1,spec); _EL_   spec=cdcRowChangeData.new ColumnSpec(); _EL_   spec.setIndex(cdcPos + 1 + 2); _EL_   spec.setName("CDC_SEQUENCE_NUMBER"); _EL_   spec.setType(java.sql.Types.BIGINT); _EL_   cdcSpecs.add(cdcPos + 2,spec); _EL_ } _EL_ ', 'public static String convertToJavaFieldName(String name){ _EL_   int dotIndex=name.indexOf(\'.\'); _EL_   if (dotIndex >= 0) { _EL_     name=name.substring(0,dotIndex); _EL_   } _EL_   String[] split=name.split("[_-]"); _EL_   StringBuilder out=new StringBuilder(); _EL_   boolean first=true; _EL_   for (  String section : split) { _EL_     if (first) { _EL_       first=false; _EL_       out.append(section); _EL_     } _EL_  else { _EL_       out.append(StringUtil.capitalize(section)); _EL_     } _EL_   } _EL_   return out.toString(); _EL_ } _EL_ ', 'public static SecretKeys generateKey() throws GeneralSecurityException { _EL_   fixPrng(); _EL_   KeyGenerator keyGen=KeyGenerator.getInstance(CIPHER); _EL_   keyGen.init(AES_KEY_LENGTH_BITS); _EL_   SecretKey confidentialityKey=keyGen.generateKey(); _EL_   byte[] integrityKeyBytes=randomBytes(HMAC_KEY_LENGTH_BITS / 8); _EL_   SecretKey integrityKey=new SecretKeySpec(integrityKeyBytes,HMAC_ALGORITHM); _EL_   return new SecretKeys(confidentialityKey,integrityKey); _EL_ } _EL_ ', 'protected void execute(String[] sqls,SQLiteDatabase db){ _EL_   String throwSQL=""; _EL_   try { _EL_     if (sqls != null) { _EL_       for (      String sql : sqls) { _EL_         throwSQL=sql; _EL_         db.execSQL(BaseUtility.changeCase(sql)); _EL_       } _EL_     } _EL_   } _EL_  catch (  SQLException e) { _EL_     throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + throwSQL); _EL_   } _EL_ } _EL_ ', 'private synchronized void rebuildJournal() throws IOException { _EL_   if (journalWriter != null) { _EL_     journalWriter.close(); _EL_   } _EL_   Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII)); _EL_   try { _EL_     writer.write(MAGIC); _EL_     writer.write("\\n"); _EL_     writer.write(VERSION_1); _EL_     writer.write("\\n"); _EL_     writer.write(Integer.toString(appVersion)); _EL_     writer.write("\\n"); _EL_     writer.write(Integer.toString(valueCount)); _EL_     writer.write("\\n"); _EL_     writer.write("\\n"); _EL_     for (    Entry entry : lruEntries.values()) { _EL_       if (entry.currentEditor != null) { _EL_         writer.write(DIRTY + \' \' + entry.key+ \'\\n\'); _EL_       } _EL_  else { _EL_         writer.write(CLEAN + \' \' + entry.key+ entry.getLengths()+ \'\\n\'); _EL_       } _EL_     } _EL_   } _EL_   finally { _EL_     writer.close(); _EL_   } _EL_   if (journalFile.exists()) { _EL_     renameTo(journalFile,journalFileBackup,true); _EL_   } _EL_   renameTo(journalFileTmp,journalFile,false); _EL_   journalFileBackup.delete(); _EL_   journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII)); _EL_ } _EL_ ', 'private void refreshDoneButton(boolean done){ _EL_   butDone.setText(done ? Messages.getString("ChatLounge.notDone") : Messages.getString("ChatLounge.imDone")); _EL_ } _EL_ ', 'protected void onPageScrolled(int position,float offset,int offsetPixels){ _EL_   if (mDecorChildCount > 0) { _EL_     final int scrollX=getScrollX(); _EL_     int paddingLeft=getPaddingLeft(); _EL_     int paddingRight=getPaddingRight(); _EL_     final int width=getWidth(); _EL_     final int childCount=getChildCount(); _EL_     for (int i=0; i < childCount; i++) { _EL_       final View child=getChildAt(i); _EL_       final LayoutParams lp=(LayoutParams)child.getLayoutParams(); _EL_       if (!lp.isDecor)       continue; _EL_       final int hgrav=lp.gravity & Gravity.HORIZONTAL_GRAVITY_MASK; _EL_       int childLeft=0; _EL_ switch (hgrav) { _EL_ default : _EL_         childLeft=paddingLeft; _EL_       break; _EL_ case Gravity.LEFT: _EL_     childLeft=paddingLeft; _EL_   paddingLeft+=child.getWidth(); _EL_ break; _EL_ case Gravity.CENTER_HORIZONTAL: _EL_ childLeft=Math.max((width - child.getMeasuredWidth()) / 2,paddingLeft); _EL_ break; _EL_ case Gravity.RIGHT: _EL_ childLeft=width - paddingRight - child.getMeasuredWidth(); _EL_ paddingRight+=child.getMeasuredWidth(); _EL_ break; _EL_ } _EL_ childLeft+=scrollX; _EL_ final int childOffset=childLeft - child.getLeft(); _EL_ if (childOffset != 0) { _EL_ child.offsetLeftAndRight(childOffset); _EL_ } _EL_ } _EL_ } _EL_ if (mOnPageChangeListener != null) { _EL_ mOnPageChangeListener.onPageScrolled(position,offset,offsetPixels); _EL_ } _EL_ if (mInternalPageChangeListener != null) { _EL_ mInternalPageChangeListener.onPageScrolled(position,offset,offsetPixels); _EL_ } _EL_ if (mPageTransformer != null) { _EL_ final int scrollX=getScrollX(); _EL_ final int childCount=getChildCount(); _EL_ for (int i=0; i < childCount; i++) { _EL_ final View child=getChildAt(i); _EL_ final LayoutParams lp=(LayoutParams)child.getLayoutParams(); _EL_ if (lp.isDecor) continue; _EL_ final float transformPos=(float)(child.getLeft() - scrollX) / getClientWidth(); _EL_ mPageTransformer.transformPage(child,transformPos); _EL_ } _EL_ } _EL_ mCalledSuper=true; _EL_ } _EL_ ', 'private void expand(int i){ _EL_   if (count + i <= buf.length) { _EL_     return; _EL_   } _EL_   byte[] newbuf=mPool.getBuf((count + i) * 2); _EL_   System.arraycopy(buf,0,newbuf,0,count); _EL_   mPool.returnBuf(buf); _EL_   buf=newbuf; _EL_ } _EL_ ', 'public static int toIPv4Address(String ipAddress){ _EL_   if (ipAddress == null)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods"); _EL_   String[] octets=ipAddress.split("\\\\."); _EL_   if (octets.length != 4)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods"); _EL_   int result=0; _EL_   for (int i=0; i < 4; ++i) { _EL_     int oct=Integer.valueOf(octets[i]); _EL_     if (oct > 255 || oct < 0)     throw new IllegalArgumentException("Octet values in specified" + " IPv4 address must be 0 <= value <= 255"); _EL_     result|=oct << ((3 - i) * 8); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public void closeCursor(Cursor cursor){ _EL_   cursor.close(); _EL_   cursorMap.remove(Integer.valueOf(cursor.getCursorId())); _EL_ } _EL_ ', 'private boolean hasNext(Pattern pattern){ _EL_   if (!hasNext()) { _EL_     return false; _EL_   } _EL_   Matcher matcher=pattern.matcher(gserValue.substring(pos,length)); _EL_   return matcher.find(); _EL_ } _EL_ ', 'public static String xmlNode(String name,String attributes,String content,boolean indent){ _EL_   String start=attributes == null ? name : name + attributes; _EL_   if (content == null) { _EL_     return "<" + start + "/>\\n"; _EL_   } _EL_   if (indent && content.indexOf(\'\\n\') >= 0) { _EL_     content="\\n" + indent(content); _EL_   } _EL_   return "<" + start + ">"+ content+ "</"+ name+ ">\\n"; _EL_ } _EL_ ', 'public void add(int position,@NonNull T item){ _EL_ synchronized (lock) { _EL_     if (items == null) { _EL_       items=new ArrayList<>(); _EL_     } _EL_     items.add(position,item); _EL_   } _EL_   if (notifyOnChange) { _EL_     notifyItemInserted(position); _EL_   } _EL_ } _EL_ ', 'void notifyFailure(Throwable exception){ _EL_ synchronized (waitObject) { _EL_     isComplete=true; _EL_     if (exception instanceof MqttException) { _EL_       pendingException=(MqttException)exception; _EL_     } _EL_  else { _EL_       pendingException=new MqttException(exception); _EL_     } _EL_     waitObject.notifyAll(); _EL_     if (exception instanceof MqttException) { _EL_       lastException=(MqttException)exception; _EL_     } _EL_     if (listener != null) { _EL_       listener.onFailure(this,exception); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static void transform(StreamSource src,StreamSource stylesheet,Fop fop) throws FOPException { _EL_   Result res=new SAXResult(fop.getDefaultHandler()); _EL_   try { _EL_     TransformerFactory factory=TransformerFactory.newInstance(); _EL_     Transformer transformer; _EL_     if (stylesheet == null) { _EL_       transformer=factory.newTransformer(); _EL_     } _EL_  else { _EL_       transformer=factory.newTransformer(stylesheet); _EL_     } _EL_     transformer.setURIResolver(new LocalResolver(transformer.getURIResolver())); _EL_     transformer.transform(src,res); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new FOPException(e); _EL_   } _EL_ } _EL_ ', 'public List<String> splitStringWithDefaultDelimiterEscaped(String inputString){ _EL_   String delimiter=configurationHelper.getProperty(ConfigurationValue.FIELD_DATA_DELIMITER); _EL_   String escapeChar=configurationHelper.getProperty(ConfigurationValue.FIELD_DATA_DELIMITER_ESCAPE_CHAR); _EL_   List<String> splitString=new ArrayList<>(); _EL_   if (StringUtils.isNotBlank(inputString)) { _EL_     String regex="(?<!" + Pattern.quote(escapeChar) + ")"+ Pattern.quote(delimiter); _EL_     for (    String s : inputString.split(regex)) { _EL_       splitString.add(s.replace(escapeChar + delimiter,delimiter)); _EL_     } _EL_   } _EL_   return splitString; _EL_ } _EL_ ', 'protected final boolean readAvailableBlocking() throws IOException { _EL_   char[] buffer=myBuffer; _EL_   StringBuilder token=myTextBuffer; _EL_   token.setLength(0); _EL_   boolean read=false; _EL_   int n; _EL_   while ((n=myReader.read(buffer)) > 0) { _EL_     if (myScheduledSubmitter != null)     myScheduledSubmitter.cancel(true); _EL_     read=true; _EL_ synchronized (myTextBuffer) { _EL_       processLine(buffer,token,n); _EL_     } _EL_     myScheduledSubmitter=myExecutorService.submit(myTokenSubmitter); _EL_   } _EL_   submitToken(); _EL_   return read; _EL_ } _EL_ ', 'public void deleteObligation(final Obligation obligation,int basicBlockId) throws ObligationAcquiredOrReleasedInLoopException { _EL_   Map<ObligationSet,State> updatedStateMap=new HashMap<ObligationSet,State>(); _EL_   for (Iterator<State> i=stateIterator(); i.hasNext(); ) { _EL_     State state=i.next(); _EL_     checkCircularity(state,obligation,basicBlockId); _EL_     ObligationSet obligationSet=state.getObligationSet(); _EL_     obligationSet.remove(obligation); _EL_     if (!obligationSet.isEmpty()) { _EL_       updatedStateMap.put(obligationSet,state); _EL_     } _EL_   } _EL_   replaceMap(updatedStateMap); _EL_ } _EL_ ', 'private void clipViewOnTheRight(Rect curViewBound,float curViewWidth,int right){ _EL_   curViewBound.right=(int)(right - mClipPadding); _EL_   curViewBound.left=(int)(curViewBound.right - curViewWidth); _EL_ } _EL_ ', 'public ContentImpl createCompoundPackageContent(OleBlobImpl blob,String prettyName,String className,String typeName,ByteBuffer blobBb,int dataBlockLen){ _EL_   return new CompoundContentImpl(blob,prettyName,className,typeName,blobBb.position(),dataBlockLen); _EL_ } _EL_ ', 'private Set<Integer> findValues(String string){ _EL_   Set<Integer> results=new TreeSet<Integer>(); _EL_   for (  String str : string.split(",")) { _EL_     if (!str.equals("")) { _EL_       results.add(findValue(str)); _EL_     } _EL_   } _EL_   return results; _EL_ } _EL_ ', 'private static int indexOf(Object[] array,int len,Object elt){ _EL_   for (int i=0; i < len; i++) { _EL_     if (elt.equals(array[i]))     return i; _EL_   } _EL_   return -1; _EL_ } _EL_ ', '@Deprecated public void append(final String name,final String value){ _EL_   List<String> l=map.get(name); _EL_   if (l != null) { _EL_     l.add(value); _EL_   } _EL_  else { _EL_     l=Lists.newArrayList(value); _EL_     map.put(name,l); _EL_   } _EL_ } _EL_ ', 'public boolean equals(Object obj){ _EL_   if (obj == this) { _EL_     return true; _EL_   } _EL_   if (!(obj instanceof Certificate)) { _EL_     return false; _EL_   } _EL_   Certificate object=(Certificate)obj; _EL_   try { _EL_     return Arrays.equals(getEncoded(),object.getEncoded()); _EL_   } _EL_  catch (  CertificateEncodingException e) { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public Statement between(Object former,Object later){ _EL_   statement.append(" BETWEEN "); _EL_   append(former); _EL_   statement.append(" AND "); _EL_   append(later); _EL_   return this; _EL_ } _EL_ ', 'public byte[] encode1(final String s){ _EL_   final ByteArrayBuffer tmp=new ByteArrayBuffer(s.length()); _EL_   final int nwritten=uc.encode(s,tmp); _EL_   final int npack=LongPacker.getByteLength(nwritten); _EL_   final byte[] a=new byte[npack + nwritten]; _EL_   final DataOutputBuffer dob=new DataOutputBuffer(0,a); _EL_   try { _EL_     dob.packLong(nwritten); _EL_     dob.append(tmp.array(),0,tmp.pos()); _EL_     return a; _EL_   } _EL_   finally { _EL_     try { _EL_       dob.close(); _EL_     } _EL_  catch (    IOException e) { _EL_       throw new RuntimeException(e); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static Map<Object,Long> valueHistogram(GeoTimeSerie gts){ _EL_   Map<Object,Long> occurrences=new HashMap<Object,Long>(); _EL_   for (int i=0; i < gts.values; i++) { _EL_     Object value=GTSHelper.valueAtIndex(gts,i); _EL_     if (!occurrences.containsKey(value)) { _EL_       occurrences.put(value,1L); _EL_     } _EL_  else { _EL_       occurrences.put(value,1L + occurrences.get(value)); _EL_     } _EL_   } _EL_   if (GTSHelper.isBucketized(gts) && gts.bucketcount != gts.values) { _EL_     occurrences.put(null,(long)(gts.bucketcount - gts.values)); _EL_   } _EL_   return occurrences; _EL_ } _EL_ ', 'private void computeWeights(Node node){ _EL_   int wsum=0; _EL_   for (  Node child : node.children) { _EL_     computeWeights(child); _EL_     wsum+=child.weight; _EL_   } _EL_   node.weight=Math.max(1,wsum); _EL_ } _EL_ ', 'public Searcher() throws IOException { _EL_   searcher=new IndexSearcher(DirectoryReader.open(FSDirectory.open(Paths.get(INDEX_DIR)))); _EL_   parser=new QueryParser(CONTENT_FIELD,new StandardAnalyzer()); _EL_ } _EL_ ', 'public QueryStringQueryBuilder field(String field){ _EL_   if (fields == null) { _EL_     fields=new ArrayList<>(); _EL_   } _EL_   fields.add(field); _EL_   return this; _EL_ } _EL_ ', 'public static <R,A,B>CompletionStage<R> combine(CompletionStage<A> a,CompletionStage<B> b,BiFunction<A,B,R> function){ _EL_   return a.thenCombine(b,function); _EL_ } _EL_ ', 'protected String buildCreateSchemaStatement() throws ReplicatorException { _EL_   return null; _EL_ } _EL_ ', 'public StreamInfoManager(TwitchApi api,StreamInfoListener listener){ _EL_   this.listener=listener; _EL_   this.api=api; _EL_   pendingRequests=new HashMap<>(); _EL_   invalidStreamInfo=new StreamInfo("invalid",listener); _EL_   invalidStreamInfo.setRequested(); _EL_ } _EL_ ', 'public Sentence asSentence(){ _EL_   return Sentence.newConjunction(sentences); _EL_ } _EL_ ', 'public static Vector tokenizeString(String source,String separator){ _EL_   if (separator.length() == 1) { _EL_     return tokenizeString(source,separator.charAt(0)); _EL_   } _EL_   Vector tokenized=new Vector(); _EL_   int len=source.length(); _EL_   StringBuilder buf=new StringBuilder(); _EL_   for (int iter=0; iter < len; iter++) { _EL_     char current=source.charAt(iter); _EL_     if (separator.indexOf(current) > -1) { _EL_       if (buf.length() > 0) { _EL_         tokenized.addElement(buf.toString()); _EL_         buf=new StringBuilder(); _EL_       } _EL_     } _EL_  else { _EL_       buf.append(current); _EL_     } _EL_   } _EL_   if (buf.length() > 0) { _EL_     tokenized.addElement(buf.toString()); _EL_   } _EL_   return tokenized; _EL_ } _EL_ ', 'private void backupFavorites(BackupDataOutput data) throws IOException { _EL_   ContentResolver cr=mContext.getContentResolver(); _EL_   Cursor cursor=cr.query(Favorites.CONTENT_URI,FAVORITE_PROJECTION,getUserSelectionArg(),null,null); _EL_   try { _EL_     cursor.moveToPosition(-1); _EL_     while (cursor.moveToNext()) { _EL_       final long id=cursor.getLong(ID_INDEX); _EL_       final long updateTime=cursor.getLong(ID_MODIFIED); _EL_       Key key=getKey(Key.FAVORITE,id); _EL_       mKeys.add(key); _EL_       final String backupKey=keyToBackupKey(key); _EL_       if (!mExistingKeys.contains(backupKey) || updateTime >= mLastBackupRestoreTime) { _EL_         writeRowToBackup(key,packFavorite(cursor),data); _EL_       } _EL_  else { _EL_         if (DEBUG)         Log.d(TAG,"favorite already backup up: " + id); _EL_       } _EL_     } _EL_   } _EL_   finally { _EL_     cursor.close(); _EL_   } _EL_ } _EL_ ', 'public List<ValidationErrorMessage> validate(){ _EL_   errorMessageIds.clear(); _EL_   if (paymentProduct == null) { _EL_     throw new NullPointerException("Error validating PaymentRequest, please set a paymentProduct first."); _EL_   } _EL_   for (  PaymentProductField field : paymentProduct.getPaymentProductFields()) { _EL_     if (!isFieldInAccountOnFileAndNotAltered(field)) { _EL_       errorMessageIds.addAll(field.validateValue(getValue(field.getId()))); _EL_     } _EL_   } _EL_   return errorMessageIds; _EL_ } _EL_ ', 'CryptoResult(final T result,final List<K> masterKeys,final CiphertextHeaders headers){ _EL_   result_=result; _EL_   masterKeys_=Collections.unmodifiableList(masterKeys); _EL_   headers_=headers; _EL_   encryptionContext_=headers_.getEncryptionContextMap(); _EL_ } _EL_ ', 'public void stateChanged(ChangeEvent e){ _EL_   if (ignoreUpdate) { _EL_     return; _EL_   } _EL_   double value=(double)(1800 - setpointSlider.getValue()) / 10; _EL_   setSetPoint(value); _EL_   sim.setSetPoint(value); _EL_ } _EL_ ', 'private void initializeLayout(){ _EL_   GridLayout gl=new GridLayout(0,2); _EL_   gl.setVgap(5); _EL_   setLayout(gl); _EL_   add(new JLabel("Frozen: ")); _EL_   add(frozenDD); _EL_   add(new JLabel("Upper Bound:")); _EL_   add(tfUpBound); _EL_   add(new JLabel("Lower Bound")); _EL_   add(tfLowBound); _EL_   add(new JLabel("Increment:")); _EL_   add(tfIncrement); _EL_   add(new JLabel("Delay:")); _EL_   add(tfDelay); _EL_   setBorder(BorderFactory.createEmptyBorder(5,5,5,5)); _EL_ } _EL_ ', '@Override public boolean isRunning(){ _EL_   return (frame != null && frame.isVisible()); _EL_ } _EL_ ', 'public static MosaicDefinition createMosaicDefinition(final Account creator){ _EL_   return createMosaicDefinition(creator,Utils.createMosaicId("alice.vouchers","alice\'s gift vouchers"),createMosaicProperties()); _EL_ } _EL_ ', 'public Result result(SqlNode node,Collection<Clause> clauses,RelNode rel){ _EL_   final String alias2=SqlValidatorUtil.getAlias(node,-1); _EL_   final String alias3=alias2 != null ? alias2 : "t"; _EL_   final String alias4=SqlValidatorUtil.uniquify(alias3,aliasSet,SqlValidatorUtil.EXPR_SUGGESTER); _EL_   final String alias5=alias2 == null || !alias2.equals(alias4) ? alias4 : null; _EL_   return new Result(node,clauses,alias5,Collections.singletonList(Pair.of(alias4,rel.getRowType()))); _EL_ } _EL_ ', 'private static void _trustAllHttpsCertificates(){ _EL_   SSLContext context; _EL_   if (_trustManagers == null) { _EL_     _trustManagers=new TrustManager[]{new FakeX509TrustManager()}; _EL_   } _EL_   try { _EL_     context=SSLContext.getInstance("SSL"); _EL_     context.init(null,_trustManagers,new SecureRandom()); _EL_   } _EL_  catch (  GeneralSecurityException gse) { _EL_     throw new IllegalStateException(gse.getMessage()); _EL_   } _EL_   HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory()); _EL_ } _EL_ ', 'private void addInternalListeners(){ _EL_   cbDistribution.addItemListener(cbItemListener); _EL_ } _EL_ ', 'public static double safeSqrt(double x){ _EL_   return (x < 0 ? -Math.sqrt(-x) : Math.sqrt(x)); _EL_ } _EL_ ', 'public void initializeOwnerReferencesForField(StateManager sm,FieldMetaData fmd){ _EL_   if (fmd.getAssociationType() == FieldMetaData.ONE_TO_MANY) { _EL_     Collection<?> collection=(Collection<?>)sm.fetch(fmd.getIndex()); _EL_     if (collection != null) { _EL_       for (      Object item : collection) { _EL_         if (item != null) { _EL_           _relationsManager.setOwnerStateManagerForPersistentInstance(item,sm,fmd); _EL_         } _EL_       } _EL_     } _EL_   } _EL_  else   if (fmd.getAssociationType() == FieldMetaData.ONE_TO_ONE || fmd.isEmbeddedPC()) { _EL_     Object value=sm.fetch(fmd.getIndex()); _EL_     if (value != null) { _EL_       _relationsManager.setOwnerStateManagerForPersistentInstance(value,sm,fmd); _EL_     } _EL_   } _EL_ } _EL_ ', 'public String buildUnionSubQuery(String typeDiscriminatorColumn,String[] unionColumns,Set<String> columnsPresentInTable,int computedColumnsOffset,String typeDiscriminatorValue,String selection,String groupBy,String having){ _EL_   int unionColumnsCount=unionColumns.length; _EL_   String[] projectionIn=new String[unionColumnsCount]; _EL_   for (int i=0; i < unionColumnsCount; i++) { _EL_     String unionColumn=unionColumns[i]; _EL_     if (unionColumn.equals(typeDiscriminatorColumn)) { _EL_       projectionIn[i]="\'" + typeDiscriminatorValue + "\' AS "+ typeDiscriminatorColumn; _EL_     } _EL_  else     if (i <= computedColumnsOffset || columnsPresentInTable.contains(unionColumn)) { _EL_       projectionIn[i]=unionColumn; _EL_     } _EL_  else { _EL_       projectionIn[i]="NULL AS " + unionColumn; _EL_     } _EL_   } _EL_   return buildQuery(projectionIn,selection,groupBy,having,null,null); _EL_ } _EL_ ', 'public Node(Coordinate pt){ _EL_   this(pt,new DirectedEdgeStar()); _EL_ } _EL_ ', 'public synchronized void increase(){ _EL_   if (accuracy > 0) { _EL_     long timePassed=System.currentTimeMillis() - lastAdded; _EL_     if (timePassed > accuracy) { _EL_       clearUp(); _EL_       if (count > 0) { _EL_         data.addFirst(lastAdded + accuracy); _EL_       } _EL_       lastAdded=System.currentTimeMillis(); _EL_       count=0; _EL_     } _EL_     count++; _EL_   } _EL_  else { _EL_     clearUp(); _EL_     data.addFirst(System.currentTimeMillis()); _EL_   } _EL_ } _EL_ ', 'public void revert(final VirtualFile root,final List<FilePath> files) throws VcsException { _EL_   for (  List<String> paths : VcsFileUtil.chunkPaths(root,files)) { _EL_     GitSimpleHandler handler=new GitSimpleHandler(myProject,root,GitCommand.CHECKOUT); _EL_     handler.addParameters("HEAD"); _EL_     handler.endOptions(); _EL_     handler.addParameters(paths); _EL_     handler.run(); _EL_   } _EL_ } _EL_ ', 'public static float[] concatAllFloat(float[]... arrays){ _EL_   int totalLength=0; _EL_   final int subArrayCount=arrays.length; _EL_   for (int i=0; i < subArrayCount; ++i) { _EL_     totalLength+=arrays[i].length; _EL_   } _EL_   float[] result=Arrays.copyOf(arrays[0],totalLength); _EL_   int offset=arrays[0].length; _EL_   for (int i=1; i < subArrayCount; ++i) { _EL_     System.arraycopy(arrays[i],0,result,offset,arrays[i].length); _EL_     offset+=arrays[i].length; _EL_   } _EL_   return result; _EL_ } _EL_ ', "public TaggedValueIterator(final String aLine,final boolean attemptFirstWord,final String... tags){ _EL_   this.aLine=aLine; _EL_   this.attemptFirstWord=attemptFirstWord; _EL_   this.tags=tags; _EL_   tagPos=0; _EL_   nextResult=getNextResult(); _EL_   if (attemptFirstWord) { _EL_     int a=0; _EL_     while (a < aLine.length()) { _EL_       if (aLine.charAt(a) == '>' || aLine.charAt(a) == '@' || Character.isWhitespace(aLine.charAt(a)))       a++; _EL_  else       break; _EL_     } _EL_     int b=a + 1; _EL_     while (b < aLine.length()) { _EL_       if (Character.isLetterOrDigit(aLine.charAt(b)) || aLine.charAt(b) == '_')       b++; _EL_  else       break; _EL_     } _EL_     if (b - a > 4) { _EL_       nextResult=aLine.substring(a,b); _EL_     } _EL_     tagPos=b; _EL_   } _EL_ } _EL_ ", 'public void ascendTree(){ _EL_   if (null != parentPath) { _EL_     parentPath.append(PARENT_PATH); _EL_     return; _EL_   } _EL_   File parentTree=calcParentTree(); _EL_   if (null != parentTree) { _EL_     treeFile=parentTree; _EL_     return; _EL_   } _EL_   parentPath=new StringBuilder(provideLastName()); _EL_   parentPath.append(PARENT_PATH); _EL_ } _EL_ ', 'void writeTo(byte[] b,int off){ _EL_   System.arraycopy(buf,0,b,off,count); _EL_ } _EL_ ', 'public static double normalPDF(double x,double variance,double meanValue){ _EL_   double standardDeviation=Math.sqrt(variance); _EL_   return (1 / (standardDeviation * Math.sqrt(2 * Math.PI))) * Math.pow(Math.E,-((x - meanValue) * (x - meanValue)) / (2 * variance)); _EL_ } _EL_ ', 'public static Object[] sortCopy(Object[] objects,Comparer comparer){ _EL_   int len=objects.length; _EL_   Object[] copy=new Object[len]; _EL_   System.arraycopy(objects,0,copy,0,len); _EL_   sort(copy,comparer); _EL_   return copy; _EL_ } _EL_ ', 'public synchronized void addZoomListener(ZoomListener listener){ _EL_   mZoomListeners.add(listener); _EL_ } _EL_ ', 'private void clearRegisters(Instruction start,Instruction end){ _EL_   for (Instruction p=start; ; p=p.nextInstructionInCodeOrder()) { _EL_     for (Enumeration<Operand> ops=p.getOperands(); ops.hasMoreElements(); ) { _EL_       Operand op=ops.nextElement(); _EL_       if (op instanceof RegisterOperand) { _EL_         RegisterOperand rOp=(RegisterOperand)op; _EL_         clearDepGraphNodeForRegister(rOp.getRegister()); _EL_       } _EL_     } _EL_     if (p == end)     break; _EL_   } _EL_   for (Enumeration<Register> e=GenericPhysicalDefUse.enumerateAllImplicitDefUses(ir); e.hasMoreElements(); ) { _EL_     Register r=e.nextElement(); _EL_     clearDepGraphNodeForRegister(r); _EL_   } _EL_ } _EL_ ', 'public void fireAnnotationSelected(WorkflowAnnotation anno){ _EL_   List<WorkflowAnnotation> list=new LinkedList<>(); _EL_   list.add(anno); _EL_   fireAnnotationsChanged(AnnotationEvent.SELECTED_ANNOTATION_CHANGED,list); _EL_ } _EL_ ', 'public boolean verifyServerEvidenceMessage(BigInteger serverM2) throws CryptoException { _EL_   if ((this.A == null) || (this.M1 == null) || (this.S == null)) { _EL_     throw new CryptoException("Impossible to compute and verify M2: " + "some data are missing from the previous operations (A,M1,S)"); _EL_   } _EL_   BigInteger computedM2=SRP6Util.calculateM2(digest,N,A,M1,S); _EL_   if (computedM2.equals(serverM2)) { _EL_     this.M2=serverM2; _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void handleText(String text){ _EL_   if (skippingCharacters > 0) { _EL_     if (skippingCharacters >= text.length()) { _EL_       skippingCharacters-=text.length(); _EL_       return; _EL_     } _EL_  else { _EL_       text=text.substring(skippingCharacters); _EL_       skippingCharacters=0; _EL_     } _EL_   } _EL_   if (rtfDestination != null) { _EL_     rtfDestination.handleText(text); _EL_     return; _EL_   } _EL_   warning("Text with no destination. oops."); _EL_ } _EL_ ', '@Nullable private static String referenceToAttribute(String attrib,boolean includeDummies){ _EL_   while (attrib.startsWith("\\\\\\\\")) { _EL_     attrib=attrib.substring(2); _EL_   } _EL_   if (attrib.startsWith("\\\\$")) { _EL_     if (includeDummies) { _EL_       attrib=attrib.substring(1); _EL_     } _EL_  else     return null; _EL_   } _EL_   if (!StringUtil.startsWithChar(attrib,\'$\')) { _EL_     return null; _EL_   } _EL_   attrib=attrib.substring(1); _EL_   if (StringUtil.startsWithChar(attrib,\'{\')) { _EL_     String cleanAttribute=null; _EL_     for (int i=1; i < attrib.length(); i++) { _EL_       char currChar=attrib.charAt(i); _EL_       if (currChar == \'{\' || currChar == \'.\') { _EL_         cleanAttribute=null; _EL_         break; _EL_       } _EL_  else       if (currChar == \'}\') { _EL_         cleanAttribute=attrib.substring(1,i); _EL_         break; _EL_       } _EL_     } _EL_     attrib=cleanAttribute; _EL_   } _EL_  else { _EL_     for (int i=0; i < attrib.length(); i++) { _EL_       char currChar=attrib.charAt(i); _EL_       if (currChar == \'{\' || currChar == \'}\' || currChar == \'.\') { _EL_         attrib=attrib.substring(0,i); _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   return attrib; _EL_ } _EL_ ', 'public EscapedWriter(Writer fos){ _EL_   super(fos); _EL_ } _EL_ ', 'public boolean isExpired(final Date date){ _EL_   if (date == null) { _EL_     throw new IllegalArgumentException("Date may not be null"); _EL_   } _EL_   return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= date.getTime()); _EL_ } _EL_ ', 'public void record(RecordBuilderImpl recordBuilder){ _EL_   storeBitmap(recordBuilder); _EL_   OutputStream viewHierarchyDump=null; _EL_   try { _EL_     viewHierarchyDump=mAlbum.openViewHierarchyFile(recordBuilder.getName()); _EL_     mViewHierarchy.deflate(recordBuilder.getView(),viewHierarchyDump); _EL_     mAlbum.addRecord(recordBuilder); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_  finally { _EL_     if (viewHierarchyDump != null) { _EL_       try { _EL_         viewHierarchyDump.close(); _EL_       } _EL_  catch (      IOException e) { _EL_         Log.e("ScreenshotImpl","Exception closing viewHierarchyDump",e); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public Metadata.Property.Builder clear(){ _EL_   Metadata_Property_Builder _defaults=new Metadata.Property.Builder(); _EL_   type=_defaults.type; _EL_   boxedType=_defaults.boxedType; _EL_   name=_defaults.name; _EL_   capitalizedName=_defaults.capitalizedName; _EL_   allCapsName=_defaults.allCapsName; _EL_   getterName=_defaults.getterName; _EL_   codeGenerator=_defaults.codeGenerator; _EL_   fullyCheckedCast=_defaults.fullyCheckedCast; _EL_   accessorAnnotations.clear(); _EL_   _unsetProperties.clear(); _EL_   _unsetProperties.addAll(_defaults._unsetProperties); _EL_   return (Metadata.Property.Builder)this; _EL_ } _EL_ ', 'public static float r_distance(vec3 a,vec3 b){ _EL_   float x=a.m[0] - b.m[0]; _EL_   float y=a.m[1] - b.m[1]; _EL_   float z=a.m[2] - b.m[2]; _EL_   float result=(float)Math.sqrt(x * x + y * y + z * z); _EL_   return result; _EL_ } _EL_ ', 'public static byte[] buildOpusComment(String comment){ _EL_   byte[] data=new byte[28 + comment.length()]; _EL_   writeOpusComment(data,0,comment); _EL_   return data; _EL_ } _EL_ ', 'public int size(){ _EL_   return al.size(); _EL_ } _EL_ ', 'public static String toUpperCase(String src){ _EL_   if (src == null) { _EL_     return null; _EL_   } _EL_  else { _EL_     return src.toUpperCase(); _EL_   } _EL_ } _EL_ ', '@Deprecated public void unlock(LockState<T> lockState){ _EL_   if (lockState == null) { _EL_     throw new IllegalArgumentException("lockState is null"); _EL_   } _EL_   if (lockState.setLock != this) { _EL_     throw new IllegalArgumentException("The lockState passed was not from this instance"); _EL_   } _EL_   if (lockState.thread != Thread.currentThread()) { _EL_     throw new IllegalArgumentException("The thread that created this lockState is not the same as the one unlocking it"); _EL_   } _EL_   threadSet.remove(Thread.currentThread()); _EL_   for (  ReentrantLock lock : lockState.locks) { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', 'public static String formatJavaDocBox(String text){ _EL_   requireNonNull(text); _EL_   return formatTextBox(text,JAVA_DOC_WIDTH,JAVADOC_WORDS,JAVA_DOC_SINGLE_LINE_WORDS); _EL_ } _EL_ ', 'private static String forceNumberStringToTwoDigits(String text){ _EL_   while (text.length() < 2) { _EL_     text="0" + text; _EL_   } _EL_   if (text.length() > 2) { _EL_     text=text.substring(text.length() - 2,text.length()); _EL_   } _EL_   return text; _EL_ } _EL_ ', 'public void addDropItem(final String name,final double probability,final int min,final int max){ _EL_   dropsItems.add(new DropItem(name,probability,min,max)); _EL_ } _EL_ ', 'public static <E extends Identifiable>List<E> findByPrimaryKeys(EntityManager em,List<BigInteger> ids,Class<E> type){ _EL_   requireArgument(em != null,"The entity manager cannot be null."); _EL_   requireArgument(ids != null && !ids.isEmpty(),"IDs cannot be null or empty."); _EL_   requireArgument(type != null,"The entity type cannot be null."); _EL_   TypedQuery<E> query=em.createNamedQuery("JPAEntity.findByPrimaryKeys",type); _EL_   query.setHint("javax.persistence.cache.storeMode","REFRESH"); _EL_   try { _EL_     query.setParameter("ids",ids); _EL_     query.setParameter("deleted",false); _EL_     return query.getResultList(); _EL_   } _EL_  catch (  NoResultException ex) { _EL_     return new ArrayList<>(0); _EL_   } _EL_ } _EL_ ', 'private void loadWorkflow(Properties ctx,int AD_Workflow_ID,HttpSession sess){ _EL_   MWorkflow wf=new MWorkflow(ctx,AD_Workflow_ID,null); _EL_   MWFNode[] nodes=wf.getNodes(true,Env.getContextAsInt(ctx,"#AD_Client_ID")); _EL_   MWFNode wfn=null; _EL_   ArrayList nodes_ID=new ArrayList(); _EL_   for (int i=0; i < nodes.length; i++) { _EL_     wfn=nodes[i]; _EL_     nodes_ID.add(new Integer(wfn.getAD_WF_Node_ID())); _EL_   } _EL_   int imageMap[][]=generateImageMap(nodes_ID); _EL_   sess.setAttribute(WORKFLOW,wf); _EL_   sess.setAttribute(NODES,nodes); _EL_   sess.setAttribute(NODES_ID,nodes_ID); _EL_   sess.setAttribute(IMAGE_MAP,imageMap); _EL_   sess.setAttribute(ACTIVE_NODE,new Integer(-999)); _EL_ } _EL_ ', 'public int hashCode(){ _EL_   int h=hash; _EL_   if (h == -1) { _EL_     try { _EL_       h=Arrays.hashCode(X509CertImpl.getEncodedInternal(this)); _EL_     } _EL_  catch (    CertificateException e) { _EL_       h=0; _EL_     } _EL_     hash=h; _EL_   } _EL_   return h; _EL_ } _EL_ ', 'public void removeFromTags(String removeTag){ _EL_   tags.remove(removeTag); _EL_   firePropertyChange(TAG,null,removeTag); _EL_   firePropertyChange(TAGS_AS_STRING,null,removeTag); _EL_ } _EL_ ', 'protected void deleteDirectory(File webAppFile){ _EL_   if (webAppFile.isDirectory()) { _EL_     File[] children=webAppFile.listFiles(); _EL_     for (    File element : children) { _EL_       deleteDirectory(element); _EL_     } _EL_     webAppFile.delete(); _EL_   } _EL_  else { _EL_     webAppFile.delete(); _EL_   } _EL_ } _EL_ ', '@SuppressWarnings("unchecked") static public void assertSameIteratorAnyOrder(final Object[] expected,final Iterator actual){ _EL_   assertSameIteratorAnyOrder("",expected,actual); _EL_ } _EL_ ', 'public static String formattingFinishedPercentage(final RolloutGroup rolloutGroup,final float finishedPercentage){ _EL_   float tmpFinishedPercentage=0; _EL_ switch (rolloutGroup.getStatus()) { _EL_ case READY: _EL_ case SCHEDULED: _EL_ case ERROR: _EL_     tmpFinishedPercentage=0.0F; _EL_   break; _EL_ case FINISHED: _EL_ tmpFinishedPercentage=100.0F; _EL_ break; _EL_ case RUNNING: _EL_ tmpFinishedPercentage=finishedPercentage; _EL_ break; _EL_ default : _EL_ break; _EL_ } _EL_ return String.format("%.1f",tmpFinishedPercentage); _EL_ } _EL_ ', 'public static String generateHostName(String vmName,String hostId){ _EL_   String hostname=vmName + \'-\' + hostId; _EL_   Preconditions.checkState(hostname.equals(hostname.toLowerCase()),"hostname should not contain upper case characters"); _EL_   return hostname; _EL_ } _EL_ ', 'private static String unwrap(String expression){ _EL_   if (expression.startsWith("((")) { _EL_     expression=expression.substring(expression.indexOf(")") + 1,expression.length() - 1); _EL_     if (expression.endsWith("]")) { _EL_       expression=expression.substring(0,expression.lastIndexOf("[")); _EL_     } _EL_  else { _EL_       expression=expression.substring(0,expression.lastIndexOf(".")); _EL_     } _EL_   } _EL_   return expression; _EL_ } _EL_ ', 'public boolean areAllSegmentPresent(int datasetSize){ _EL_   return mPieSegmentList.size() == datasetSize; _EL_ } _EL_ ', 'protected int drawNextEventTimeDiff(){ _EL_   int timeDiff=msgInterval[0] == msgInterval[1] ? 0 : rng.nextInt(msgInterval[1] - msgInterval[0]); _EL_   return msgInterval[0] + timeDiff; _EL_ } _EL_ ', 'private int createLines(String text,int insertPosition,int offset){ _EL_   int count=0; _EL_   int start=0; _EL_   DelimiterInfo delimiterInfo=nextDelimiterInfo(text,0); _EL_   while (delimiterInfo != null && delimiterInfo.delimiterIndex > -1) { _EL_     int index=delimiterInfo.delimiterIndex + (delimiterInfo.delimiterLength - 1); _EL_     if (insertPosition + count >= fLines.size())     fLines.add(new Line(offset + start,offset + index,delimiterInfo.delimiter)); _EL_  else     fLines.add(insertPosition + count,new Line(offset + start,offset + index,delimiterInfo.delimiter)); _EL_     ++count; _EL_     start=index + 1; _EL_     delimiterInfo=nextDelimiterInfo(text,start); _EL_   } _EL_   if (start < text.length()) { _EL_     if (insertPosition + count < fLines.size()) { _EL_       Line l=(Line)fLines.get(insertPosition + count); _EL_       int delta=text.length() - start; _EL_       l.offset-=delta; _EL_       l.length+=delta; _EL_     } _EL_  else { _EL_       fLines.add(new Line(offset + start,offset + text.length() - 1,null)); _EL_       ++count; _EL_     } _EL_   } _EL_   return count; _EL_ } _EL_ ', 'public static double sqrt(double x){ _EL_   return Math.sqrt(x); _EL_ } _EL_ ', 'public static String toBits(final long x){ _EL_   final StringBuilder sb=new StringBuilder(); _EL_   long t=x; _EL_   for (int i=0; i < 64; i++) { _EL_     if ((i & 7) == 0 && i > 0) { _EL_       sb.append(":"); _EL_     } _EL_     sb.append(t < 0 ? "1" : "0"); _EL_     t=t << 1; _EL_   } _EL_   assert t == 0; _EL_   return sb.toString(); _EL_ } _EL_ ', "public static final byte[] encodeUrl(BitSet urlsafe,byte[] bytes){ _EL_   if (bytes == null) { _EL_     return null; _EL_   } _EL_   if (urlsafe == null) { _EL_     urlsafe=WWW_FORM_URL; _EL_   } _EL_   ByteArrayOutputStream buffer=new ByteArrayOutputStream(); _EL_   for (int i=0; i < bytes.length; i++) { _EL_     int b=bytes[i]; _EL_     if (b < 0) { _EL_       b=256 + b; _EL_     } _EL_     if (urlsafe.get(b)) { _EL_       if (b == ' ') { _EL_         b='+'; _EL_       } _EL_       buffer.write(b); _EL_     } _EL_  else { _EL_       buffer.write('%'); _EL_       char hex1=Character.toUpperCase(Character.forDigit((b >> 4) & 0xF,16)); _EL_       char hex2=Character.toUpperCase(Character.forDigit(b & 0xF,16)); _EL_       buffer.write(hex1); _EL_       buffer.write(hex2); _EL_     } _EL_   } _EL_   return buffer.toByteArray(); _EL_ } _EL_ ", 'public MessageTokenizer(IDiscordClient client,String content){ _EL_   if (content == null)   throw new IllegalArgumentException("Content cannot be null!"); _EL_   if (content.length() == 0)   throw new IllegalArgumentException("Content must have length!"); _EL_   if (client == null)   throw new IllegalArgumentException("Client cannot be null!"); _EL_   this.content=content; _EL_   this.client=client; _EL_   stepForward(0); _EL_ } _EL_ ', 'public void await(int ID) throws InterruptedException { _EL_   if (parties == 1)   return; _EL_   final boolean startCondition=competitionCondition; _EL_   int competingFor=(locks.length * 2 - 1 - ID) / 2; _EL_   while (competingFor >= 0) { _EL_     final Lock node=locks[competingFor]; _EL_     if (node.tryLock()) { _EL_ synchronized (node) { _EL_         while (competitionCondition == startCondition)         node.wait(); _EL_       } _EL_       node.unlock(); _EL_       wakeUpTarget(competingFor * 2 + 1); _EL_       wakeUpTarget(competingFor * 2 + 2); _EL_       return; _EL_     } _EL_  else { _EL_       if (competingFor == 0)       break; _EL_       competingFor=(competingFor - 1) / 2; _EL_     } _EL_   } _EL_   competitionCondition=!competitionCondition; _EL_   wakeUpTarget(0); _EL_ } _EL_ ', 'private void loadTranslationsCacheIfEmpty(){ _EL_   if (translationCache.isEmpty()) { _EL_     for (    ObjectTranslation translation : translations) { _EL_       if (translation.getLocale() != null && translation.getProperty() != null && !StringUtils.isEmpty(translation.getValue())) { _EL_         String key=ObjectTranslation.getCacheKey(translation.getLocale(),translation.getProperty()); _EL_         translationCache.put(key,translation.getValue()); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public void addEvent(SimEvent newEvent){ _EL_   newEvent.setSerial(serial++); _EL_   sortedSet.add(newEvent); _EL_ } _EL_ ', 'public static void stopTimer(String name){ _EL_   long stopTime=System.nanoTime(); _EL_   Long startTime=openTimers.remove(name); _EL_   if (startTime == null) { _EL_     throw new IllegalArgumentException("timer does not exist"); _EL_   } _EL_   SummaryStatistics statistics=data.get(name); _EL_   if (statistics == null) { _EL_     statistics=new SummaryStatistics(); _EL_     data.put(name,statistics); _EL_   } _EL_   statistics.addValue(stopTime - startTime); _EL_ } _EL_ ', 'public String toStringSummary(){ _EL_   int resultsetLength; _EL_   String result; _EL_   String titles; _EL_   int i; _EL_   int j; _EL_   if (m_NonSigWins == null)   return "-summary data not set-"; _EL_   resultsetLength=1 + Math.max((int)(Math.log(getColCount()) / Math.log(10)),(int)(Math.log(getRowCount()) / Math.log(10))); _EL_   result=""; _EL_   titles=""; _EL_   result+="{\\\\centering\\n"; _EL_   result+="\\\\begin{table}[thb]\\n\\\\caption{\\\\label{labelname}" + "Table Caption}\\n"; _EL_   result+="\\\\footnotesize\\n"; _EL_   result+="\\\\begin{tabular}{l"; _EL_   for (i=0; i < getColCount(); i++) { _EL_     if (getColHidden(i))     continue; _EL_     titles+=" &"; _EL_     result+="c"; _EL_     titles+=\' \' + Utils.padLeft("" + getSummaryTitle(i),resultsetLength * 2 + 3); _EL_   } _EL_   result+="}\\\\\\\\\\n\\\\hline\\n"; _EL_   result+=titles + " \\\\\\\\\\n\\\\hline\\n"; _EL_   for (i=0; i < getColCount(); i++) { _EL_     if (getColHidden(i))     continue; _EL_     for (j=0; j < getColCount(); j++) { _EL_       if (getColHidden(j))       continue; _EL_       if (j == 0)       result+=(char)((int)\'a\' + i % 26); _EL_       if (j == i)       result+=" & - "; _EL_  else       result+="& " + m_NonSigWins[i][j] + " ("+ m_Wins[i][j]+ ") "; _EL_     } _EL_     result+="\\\\\\\\\\n"; _EL_   } _EL_   result+="\\\\hline\\n\\\\end{tabular} \\\\footnotesize \\\\par\\n\\\\end{table}}"; _EL_   return result; _EL_ } _EL_ ', 'public static File createTempPath(String path) throws IOException { _EL_   String sep=File.separator; _EL_   File tempDir=new File(System.getProperty("java.io.tmpdir") + sep + path); _EL_   if (!tempDir.exists())   if (!tempDir.mkdirs()) { _EL_     boolean status=tempDir.delete(); _EL_     throw new IOException("creation failed for dir " + tempDir + "status = "+ status); _EL_   } _EL_   tempDir.deleteOnExit(); _EL_   return tempDir; _EL_ } _EL_ ', 'public StateInteractive extent_to_whole_connections(){ _EL_   Set<BrdItem> selected_items=new TreeSet<BrdItem>(); _EL_   for (  BrdItem curr_item : items_list) { _EL_     if (curr_item instanceof BrdConnectable) { _EL_       selected_items.addAll(curr_item.get_connection_items()); _EL_     } _EL_   } _EL_   if (selected_items.isEmpty()) { _EL_     return return_state; _EL_   } _EL_   items_list=selected_items; _EL_   actlog_start_scope(LogfileScope.EXTEND_TO_WHOLE_CONNECTIONS); _EL_   filter(); _EL_   i_brd.repaint(); _EL_   return this; _EL_ } _EL_ ', 'public static IKeyBuilder newInstance(int capacity,CollatorEnum collatorChoice,Locale locale,Object strength,DecompositionEnum mode){ _EL_   if (collatorChoice == CollatorEnum.ASCII) { _EL_     return new KeyBuilder(capacity); _EL_   } _EL_   if (locale == null) { _EL_     locale=Locale.getDefault(); _EL_     if (log.isInfoEnabled())     log.info("Using default locale: " + locale.getDisplayName()); _EL_   } _EL_   final boolean icu=collatorChoice == CollatorEnum.ICU; _EL_   if (icu && !DefaultKeyBuilderFactory.isICUAvailable()) { _EL_     throw new UnsupportedOperationException(DefaultKeyBuilderFactory.ICU_NOT_AVAILABLE); _EL_   } _EL_   final byte[] buf=createBuffer(capacity); _EL_   final int len=0; _EL_ switch (collatorChoice) { _EL_ case ICU: _EL_     return new KeyBuilder(new ICUSortKeyGenerator(locale,strength,mode),len,buf); _EL_ case JDK: _EL_   return new KeyBuilder(new JDKSortKeyGenerator(locale,strength,mode),len,buf); _EL_ default : _EL_ throw new UnsupportedOperationException("Collator not supported: " + collatorChoice); _EL_ } _EL_ } _EL_ ', 'protected void configureFromProperties(InputStream is,String rootDirectory) throws IOException { _EL_   Properties props=new Properties(); _EL_   props.load(is); _EL_   props.put(ROOT_DIR_PATH_PROPERTY,rootDirectory); _EL_   String oldPrefix=getPropertyPrefix(); _EL_   setProperties(null,props); _EL_   setPropertyPrefix(oldPrefix); _EL_ } _EL_ ', 'Connection openNewConnection() throws SQLException { _EL_   Connection newConn=DriverManager.getConnection(url,user,password); _EL_   if (url.startsWith("jdbc:derby:")) { _EL_     try (Statement s=newConn.createStatement()){ _EL_     } _EL_    } _EL_  else   if (url.startsWith("jdbc:hsqldb:")) { _EL_     try (Statement s=newConn.createStatement()){ _EL_       s.execute("SET WRITE_DELAY 1"); _EL_     } _EL_    } _EL_   return newConn; _EL_ } _EL_ ', 'protected void doFloodBDDP(long pinSwitch,OFPacketIn pi,FloodlightContext cntx){ _EL_   TopologyInstance ti=getCurrentInstance(false); _EL_   Set<Long> switches=ti.getSwitchesInOpenflowDomain(pinSwitch); _EL_   if (switches == null) { _EL_     switches=new HashSet<Long>(); _EL_     switches.add(pinSwitch); _EL_   } _EL_   for (  long sid : switches) { _EL_     IOFSwitch sw=floodlightProvider.getSwitch(sid); _EL_     if (sw == null)     continue; _EL_     Collection<Short> enabledPorts=sw.getEnabledPortNumbers(); _EL_     if (enabledPorts == null)     continue; _EL_     Set<Short> ports=new HashSet<Short>(); _EL_     ports.addAll(enabledPorts); _EL_     Set<Short> portsKnownToTopo=ti.getPortsWithLinks(sid); _EL_     if (portsKnownToTopo != null) { _EL_       for (      short p : portsKnownToTopo) { _EL_         NodePortTuple npt=new NodePortTuple(sid,p); _EL_         if (ti.isBroadcastDomainPort(npt) == false) { _EL_           ports.remove(p); _EL_         } _EL_       } _EL_     } _EL_     Set<Short> portsToEliminate=getPortsToEliminateForBDDP(sid); _EL_     if (portsToEliminate != null) { _EL_       ports.removeAll(portsToEliminate); _EL_     } _EL_     if (pinSwitch == sid) { _EL_       ports.remove(pi.getInPort()); _EL_     } _EL_     doMultiActionPacketOut(pi.getPacketData(),sw,ports,cntx); _EL_   } _EL_ } _EL_ ', 'public void sleepMillis(final long millis){ _EL_   try { _EL_     Thread.sleep(millis); _EL_   } _EL_  catch (  final InterruptedException e) { _EL_     logger.error(e,e); _EL_   } _EL_ } _EL_ ', 'private static void verifyWriteSetNotFound(final BTree btree){ _EL_   log.info(""); _EL_   for (int i=0; i < 1000; i++) { _EL_     if (btree.contains(i)) { _EL_       throw new RuntimeException("Not expecting: key=" + i); _EL_     } _EL_   } _EL_ } _EL_ ', 'private double calculateEntropy(double... masses){ _EL_   double res=0; _EL_   for (  double d : masses) { _EL_     res-=(d == 0) ? 0 : d * Math.log(d); _EL_   } _EL_   return res / LOG2; _EL_ } _EL_ ', '@Override public void mousePressed(MouseEvent e){ _EL_   m_frameLimiter.setRepeats(true); _EL_   if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !e.isAltDown() && m_mouseState == 0 && m_scaling == 0) { _EL_     if (((e.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((e.getModifiers() & InputEvent.SHIFT_MASK) == 0)) { _EL_       m_mouseState=2; _EL_     } _EL_  else     if (((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((e.getModifiers() & InputEvent.CTRL_MASK) == 0)) { _EL_       m_oldMousePos.width=e.getX(); _EL_       m_oldMousePos.height=e.getY(); _EL_       m_newMousePos.width=e.getX(); _EL_       m_newMousePos.height=e.getY(); _EL_       m_mouseState=3; _EL_       Graphics g=getGraphics(); _EL_       if (m_ZoomBoxColor == null) { _EL_         g.setColor(Color.black); _EL_       } _EL_  else { _EL_         g.setColor(m_ZoomBoxColor); _EL_       } _EL_       if (m_ZoomBoxXORColor == null) { _EL_         g.setXORMode(Color.white); _EL_       } _EL_  else { _EL_         g.setXORMode(m_ZoomBoxXORColor); _EL_       } _EL_       g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height); _EL_       g.dispose(); _EL_     } _EL_  else { _EL_       m_oldMousePos.width=e.getX(); _EL_       m_oldMousePos.height=e.getY(); _EL_       m_newMousePos.width=e.getX(); _EL_       m_newMousePos.height=e.getY(); _EL_       m_mouseState=1; _EL_       m_frameLimiter.start(); _EL_     } _EL_   } _EL_  else   if ((e.getButton() == MouseEvent.BUTTON1) && e.isAltDown() && e.isShiftDown()&& !e.isControlDown()) { _EL_     saveComponent(); _EL_   } _EL_  else   if (m_mouseState == 0 && m_scaling == 0) { _EL_   } _EL_ } _EL_ ', 'public void addRtcpListener(RtcpEventListener listener){ _EL_   listeners.addElement(listener); _EL_ } _EL_ ', '@Override protected void ensureNumberOfColumns(int numberOfColumns){ _EL_   if (data.length >= numberOfColumns) { _EL_     return; _EL_   } _EL_   double[] newData=new double[numberOfColumns]; _EL_   System.arraycopy(data,0,newData,0,data.length); _EL_   data=newData; _EL_ } _EL_ ', 'private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException { _EL_   int[] leftTopBlack=image.getTopLeftOnBit(); _EL_   int[] rightBottomBlack=image.getBottomRightOnBit(); _EL_   if (leftTopBlack == null || rightBottomBlack == null) { _EL_     throw NotFoundException.getNotFoundInstance(); _EL_   } _EL_   float moduleSize=moduleSize(leftTopBlack,image); _EL_   int top=leftTopBlack[1]; _EL_   int bottom=rightBottomBlack[1]; _EL_   int left=leftTopBlack[0]; _EL_   int right=rightBottomBlack[0]; _EL_   if (left >= right || top >= bottom) { _EL_     throw NotFoundException.getNotFoundInstance(); _EL_   } _EL_   if (bottom - top != right - left) { _EL_     right=left + (bottom - top); _EL_   } _EL_   int matrixWidth=Math.round((right - left + 1) / moduleSize); _EL_   int matrixHeight=Math.round((bottom - top + 1) / moduleSize); _EL_   if (matrixWidth <= 0 || matrixHeight <= 0) { _EL_     throw NotFoundException.getNotFoundInstance(); _EL_   } _EL_   if (matrixHeight != matrixWidth) { _EL_     throw NotFoundException.getNotFoundInstance(); _EL_   } _EL_   int nudge=(int)(moduleSize / 2.0f); _EL_   top+=nudge; _EL_   left+=nudge; _EL_   int nudgedTooFarRight=left + (int)((matrixWidth - 1) * moduleSize) - right; _EL_   if (nudgedTooFarRight > 0) { _EL_     if (nudgedTooFarRight > nudge) { _EL_       throw NotFoundException.getNotFoundInstance(); _EL_     } _EL_     left-=nudgedTooFarRight; _EL_   } _EL_   int nudgedTooFarDown=top + (int)((matrixHeight - 1) * moduleSize) - bottom; _EL_   if (nudgedTooFarDown > 0) { _EL_     if (nudgedTooFarDown > nudge) { _EL_       throw NotFoundException.getNotFoundInstance(); _EL_     } _EL_     top-=nudgedTooFarDown; _EL_   } _EL_   BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight); _EL_   for (int y=0; y < matrixHeight; y++) { _EL_     int iOffset=top + (int)(y * moduleSize); _EL_     for (int x=0; x < matrixWidth; x++) { _EL_       if (image.get(left + (int)(x * moduleSize),iOffset)) { _EL_         bits.set(x,y); _EL_       } _EL_     } _EL_   } _EL_   return bits; _EL_ } _EL_ ', 'public static boolean connect(FileDescriptor fd,InetAddress inetAddress,int port) throws SocketException { _EL_   try { _EL_     return IoBridge.connect(fd,inetAddress,port,0); _EL_   } _EL_  catch (  SocketTimeoutException ex) { _EL_     throw new AssertionError(ex); _EL_   } _EL_ } _EL_ ', 'public boolean isWhitespace(int nodeHandle){ _EL_   int type=getNodeType(nodeHandle); _EL_   Node node=getNode(nodeHandle); _EL_   if (TEXT_NODE == type || CDATA_SECTION_NODE == type) { _EL_     FastStringBuffer buf=StringBufferPool.get(); _EL_     while (node != null) { _EL_       buf.append(node.getNodeValue()); _EL_       node=logicalNextDOMTextNode(node); _EL_     } _EL_     boolean b=buf.isWhitespace(0,buf.length()); _EL_     StringBufferPool.free(buf); _EL_     return b; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public CStatusPanel(final BackEndDebuggerProvider debuggerProvider){ _EL_   super(new BorderLayout()); _EL_   Preconditions.checkNotNull(debuggerProvider,"IE1094: Debugger provider argument can not be null"); _EL_   m_label.setForeground(Color.BLACK); _EL_   add(m_label); _EL_   m_synchronizer=new CStatusLabelSynchronizer(m_label,debuggerProvider); _EL_ } _EL_ ', 'void deregisterSpring(Spring spring){ _EL_   if (spring == null) { _EL_     throw new IllegalArgumentException("spring is required"); _EL_   } _EL_   mActiveSprings.remove(spring); _EL_   mSpringRegistry.remove(spring.getId()); _EL_ } _EL_ ', '@Nullable public String fileName(){ _EL_   return JavaLogger.fileName(delegate); _EL_ } _EL_ ', 'public static BNode parseBNode(String nTriplesBNode,ValueFactory valueFactory) throws IllegalArgumentException { _EL_   if (nTriplesBNode.startsWith("_:")) { _EL_     return valueFactory.createBNode(nTriplesBNode.substring(2)); _EL_   } _EL_  else { _EL_     throw new IllegalArgumentException("Not a legal N-Triples Blank Node: " + nTriplesBNode); _EL_   } _EL_ } _EL_ ', 'public void resetPSRs(){ _EL_   pilotRolls.removeAllElements(); _EL_ } _EL_ ', 'public static void sort(byte[] array){ _EL_   DualPivotQuicksort.sort(array); _EL_ } _EL_ ', 'public void closePopup(){ _EL_   if (openedSubPopup != null) { _EL_     openedSubPopup.closePopup(); _EL_   } _EL_   removeFromParent(); _EL_ } _EL_ ', 'public void freeObject(int id){ _EL_   if (cacheId == id) { _EL_     cacheId=-1; _EL_     cache=null; _EL_   } _EL_   map.remove(id); _EL_ } _EL_ ', 'public static InetAddress hexToInet6Address(String addrHexString) throws IllegalArgumentException { _EL_   try { _EL_     return numericToInetAddress(String.format("%s:%s:%s:%s:%s:%s:%s:%s",addrHexString.substring(0,4),addrHexString.substring(4,8),addrHexString.substring(8,12),addrHexString.substring(12,16),addrHexString.substring(16,20),addrHexString.substring(20,24),addrHexString.substring(24,28),addrHexString.substring(28,32))); _EL_   } _EL_  catch (  Exception e) { _EL_     Log.e("NetworkUtils","error in hexToInet6Address(" + addrHexString + "): "+ e); _EL_     throw new IllegalArgumentException(e); _EL_   } _EL_ } _EL_ ', 'public void trackFailure(){ _EL_   retryTime=Utils.currentTimeMillis() + (long)backoff; _EL_   backoff=Math.min(backoff * params.multiplier,params.maximum); _EL_ } _EL_ ', 'public double readDouble() throws IOException { _EL_   return primitiveTypes.readDouble(); _EL_ } _EL_ ', 'private boolean isAtMaximum(Adjustable bar){ _EL_   return (bar.getValue() + bar.getVisibleAmount() >= bar.getMaximum()); _EL_ } _EL_ ', 'public boolean matchesCS(String seq){ _EL_   return queue.startsWith(seq,pos); _EL_ } _EL_ ', 'protected void parseAndAddMapTileSet(URL tileSetProperties) throws IOException, MalformedURLException { _EL_   Properties descProps=new Properties(); _EL_   Logger logger=getLogger(); _EL_   logger.info("going to read props"); _EL_   InputStream descURLStream=tileSetProperties.openStream(); _EL_   descProps.load(descURLStream); _EL_   logger.info("loaded " + tileSetProperties.toString() + " "+ descProps.toString()); _EL_   MapTileSet mts=createMapTileSetFromProperties(descProps); _EL_   if (mts != null && mts.allGood()) { _EL_     String mtsName=mts.getName(); _EL_     mapTileSets.put(mts.getName(),mts); _EL_     logger.info("Adding " + mtsName + " dataset"); _EL_   } _EL_   descURLStream.close(); _EL_ } _EL_ ', 'protected Date compute(double value){ _EL_   if (Double.isNaN(value)) { _EL_     return null; _EL_   } _EL_   long dateLong=(long)value; _EL_   Date date=new Date(dateLong); _EL_   Calendar cal=Calendar.getInstance(); _EL_   cal.setTime(date); _EL_   return cal.getTime(); _EL_ } _EL_ ', 'public void enablePan(BluetoothAdapter adapter){ _EL_   if (mPan == null)   mPan=(BluetoothPan)connectProxy(adapter,BluetoothProfile.PAN); _EL_   assertNotNull(mPan); _EL_   long start=System.currentTimeMillis(); _EL_   mPan.setBluetoothTethering(true); _EL_   long stop=System.currentTimeMillis(); _EL_   assertTrue(mPan.isTetheringOn()); _EL_   writeOutput(String.format("enablePan() completed in %d ms",(stop - start))); _EL_ } _EL_ ', 'private int distBetweenPoints(int x1,int z1,int x2,int z2,boolean bAllowDiags){ _EL_   int w=Math.abs(x2 - x1); _EL_   int h=Math.abs(z2 - z1); _EL_   if (bAllowDiags) { _EL_     if (w < h)     w=0; _EL_  else     h=0; _EL_   } _EL_   return w + h + 1; _EL_ } _EL_ ', 'public URL(String protocol,String host,int port,String file,URLStreamHandler handler) throws MalformedURLException { _EL_   if (port < -1) { _EL_     throw new MalformedURLException("port < -1: " + port); _EL_   } _EL_   if (protocol == null) { _EL_     throw new NullPointerException("protocol == null"); _EL_   } _EL_   if (host != null && host.contains(":") && host.charAt(0) != \'[\') { _EL_     host="[" + host + "]"; _EL_   } _EL_   this.protocol=protocol; _EL_   this.host=host; _EL_   this.port=port; _EL_   file=UrlUtils.authoritySafePath(host,file); _EL_   int hash=file.indexOf("#"); _EL_   if (hash != -1) { _EL_     this.file=file.substring(0,hash); _EL_     this.ref=file.substring(hash + 1); _EL_   } _EL_  else { _EL_     this.file=file; _EL_   } _EL_   fixURL(false); _EL_   if (handler == null) { _EL_     setupStreamHandler(); _EL_     if (streamHandler == null) { _EL_       throw new MalformedURLException("Unknown protocol: " + protocol); _EL_     } _EL_   } _EL_  else { _EL_     streamHandler=handler; _EL_   } _EL_ } _EL_ ', 'private Workflow.Method createVolumesMethod(URI systemURI,URI poolURI,List<URI> volumeURIs,VirtualPoolCapabilityValuesWrapper capabilities){ _EL_   return new Workflow.Method("createVolumes",systemURI,poolURI,volumeURIs,capabilities); _EL_ } _EL_ ', 'private static SSLSocketFactory trustAllHosts(HttpsURLConnection connection){ _EL_   SSLSocketFactory oldFactory=connection.getSSLSocketFactory(); _EL_   try { _EL_     SSLContext sc=SSLContext.getInstance("TLS"); _EL_     sc.init(null,trustAllCerts,new java.security.SecureRandom()); _EL_     SSLSocketFactory newFactory=sc.getSocketFactory(); _EL_     connection.setSSLSocketFactory(newFactory); _EL_   } _EL_  catch (  Exception e) { _EL_     Log.e(LOG_TAG,e.getMessage(),e); _EL_   } _EL_   return oldFactory; _EL_ } _EL_ ', 'public final double sampleMax(){ _EL_   return _activeCountMax.getAndSet(_activeCount.get()); _EL_ } _EL_ ', '@Get public Representation userCodeForm() throws OAuth2RestletException, InvalidGrantException, NotFoundException, ServerException { _EL_   final OAuth2Request request=requestFactory.create(getRequest()); _EL_   if (request.getParameter(OAuth2Constants.DeviceCode.USER_CODE) != null) { _EL_     return verify(null); _EL_   } _EL_  else { _EL_     return getTemplateRepresentation(FORM,request,null); _EL_   } _EL_ } _EL_ ', '@Override public boolean equals(Object other){ _EL_   if (other == this) { _EL_     return true; _EL_   } _EL_   if (other instanceof ZoneOffsetTransition) { _EL_     ZoneOffsetTransition d=(ZoneOffsetTransition)other; _EL_     return transition.equals(d.transition) && offsetBefore.equals(d.offsetBefore) && offsetAfter.equals(d.offsetAfter); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void release(){ _EL_   super.release(); _EL_   init(); _EL_ } _EL_ ', 'public double unsafeSabrVolatility(final double strike,final double forward,final double expiryTime,final double alpha,final double beta,final double nu,final double rho){ _EL_   final double oneMinusBeta=1.0 - beta; _EL_   final double A=Math.pow(forward * strike,oneMinusBeta); _EL_   final double sqrtA=Math.sqrt(A); _EL_   double logM; _EL_   if (!isClose(forward,strike))   logM=Math.log(forward / strike); _EL_  else { _EL_     final double epsilon=(forward - strike) / strike; _EL_     logM=epsilon - .5 * epsilon * epsilon; _EL_   } _EL_   final double z=(nu / alpha) * sqrtA * logM; _EL_   final double B=1.0 - 2.0 * rho * z + z * z; _EL_   final double C=oneMinusBeta * oneMinusBeta * logM* logM; _EL_   final double tmp=(Math.sqrt(B) + z - rho) / (1.0 - rho); _EL_   final double xx=Math.log(tmp); _EL_   final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0); _EL_   final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* nu* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (nu * nu / 24.0)); _EL_   double multiplier; _EL_   final double m=10; _EL_   if (Math.abs(z * z) > Constants.QL_EPSILON * m)   multiplier=z / xx; _EL_  else { _EL_     final double talpha=(0.5 - rho * rho) / (1.0 - rho); _EL_     final double tbeta=alpha - .5; _EL_     final double tgamma=rho / (1 - rho); _EL_     multiplier=1.0 - beta * z + (tgamma - talpha + tbeta * tbeta * .5) * z * z; _EL_   } _EL_   return (alpha / D) * multiplier * d; _EL_ } _EL_ ', 'public void close(){ _EL_   while (!mReceivers.isEmpty()) { _EL_     mContext.unregisterReceiver(mReceivers.remove(0)); _EL_   } _EL_   if (mOutputWriter != null) { _EL_     try { _EL_       mOutputWriter.close(); _EL_     } _EL_  catch (    IOException e) { _EL_       Log.w(mTag,"Test output file could not be closed",e); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void resolveFiles(List<String> classpaths,Map<String,String> files,String[] paths,String prefix){ _EL_   for (  String path : paths) { _EL_     String relativePath=fileHandler.getName(path); _EL_     if (prefix != null) { _EL_       relativePath=fileHandler.append(prefix,relativePath); _EL_     } _EL_     if (classpaths != null) { _EL_       classpaths.add(relativePath); _EL_     } _EL_     if (fileHandler.isDirectory(path)) { _EL_       String[] children=fileHandler.getChildren(path); _EL_       if (children != null && children.length != 0) { _EL_         resolveFiles(null,files,children,relativePath); _EL_       } _EL_     } _EL_  else { _EL_       files.put(relativePath,path); _EL_     } _EL_   } _EL_ } _EL_ ', 'public synchronized void reloadConfiguration(){ _EL_   properties=null; _EL_   finalParameters.clear(); _EL_ } _EL_ ', 'X509IssuerSerial(X509Certificate cert){ _EL_   this(cert.getIssuerX500Principal(),cert.getSerialNumber()); _EL_ } _EL_ ', 'private void addToSet(ObjectXmlPersist persist,IFile file,String setName) throws IOException, CoreException { _EL_   Collection<GraphEdgeMatcherDescriptor> updateSet=loadEdgeMatchers(persist,file); _EL_   persistUpdatedBundle(persist,file,updateSet,setName); _EL_ } _EL_ ', 'public void putBytes(byte[] bytes){ _EL_   ensureCapacity(bytes.length); _EL_   System.arraycopy(bytes,0,this.byteBuffer,this.position,bytes.length); _EL_   this.position+=bytes.length; _EL_ } _EL_ ', 'public static String arrayToDelimitedString(Object[] arr,String delim){ _EL_   if (arr == null) { _EL_     return ""; _EL_   } _EL_   StringBuffer sb=new StringBuffer(); _EL_   for (int i=0; i < arr.length; i++) { _EL_     if (i > 0) { _EL_       sb.append(delim); _EL_     } _EL_     sb.append(arr[i]); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'public static CompiereColor parse(String attributes){ _EL_   CompiereColor cc=new CompiereColor(); _EL_   try { _EL_     if (attributes != null && attributes.length() > 0)     cc.parseAttributres(attributes); _EL_   } _EL_  catch (  Exception e) { _EL_     log.severe("(" + attributes + ") - "+ e.toString()); _EL_   } _EL_   return cc; _EL_ } _EL_ ', 'public synchronized static LuaState newLuaState(){ _EL_   int i=getNextStateIndex(); _EL_   LuaState L=new LuaState(i); _EL_   states.add(i,L); _EL_   return L; _EL_ } _EL_ ', 'static long checkPreambleSize(Memory mem){ _EL_   final long cap=mem.getCapacity(); _EL_   if (cap < 8) { _EL_     throwNotBigEnough(cap,8); _EL_   } _EL_   final long pre0=mem.getLong(0); _EL_   final int preLongs=(int)(pre0 & 0X3FL); _EL_   final int required=Math.max(preLongs << 3,8); _EL_   if (cap < required) { _EL_     throwNotBigEnough(cap,required); _EL_   } _EL_   return pre0; _EL_ } _EL_ ', 'public int read() throws IOException { _EL_   if (inputStream == null) { _EL_     reopen(); _EL_   } _EL_   count(1); _EL_   return inputStream.read(); _EL_ } _EL_ ', 'private void fitImageToView(){ _EL_   Drawable drawable=getDrawable(); _EL_   if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) { _EL_     return; _EL_   } _EL_   if (matrix == null || prevMatrix == null) { _EL_     return; _EL_   } _EL_   int drawableWidth=drawable.getIntrinsicWidth(); _EL_   int drawableHeight=drawable.getIntrinsicHeight(); _EL_   float scaleX=(float)viewWidth / drawableWidth; _EL_   float scaleY=(float)viewHeight / drawableHeight; _EL_ switch (mScaleType) { _EL_ case CENTER: _EL_     scaleX=scaleY=1; _EL_   break; _EL_ case CENTER_CROP: _EL_ scaleX=scaleY=Math.max(scaleX,scaleY); _EL_ break; _EL_ case CENTER_INSIDE: _EL_ scaleX=scaleY=Math.min(1,Math.min(scaleX,scaleY)); _EL_ case FIT_CENTER: _EL_ scaleX=scaleY=Math.min(scaleX,scaleY); _EL_ break; _EL_ case FIT_XY: _EL_ break; _EL_ default : _EL_ throw new UnsupportedOperationException("TouchImageView does not support FIT_START or FIT_END"); _EL_ } _EL_ float redundantXSpace=viewWidth - (scaleX * drawableWidth); _EL_ float redundantYSpace=viewHeight - (scaleY * drawableHeight); _EL_ matchViewWidth=viewWidth - redundantXSpace; _EL_ matchViewHeight=viewHeight - redundantYSpace; _EL_ if (!isZoomed() && !imageRenderedAtLeastOnce) { _EL_ matrix.setScale(scaleX,scaleY); _EL_ matrix.postTranslate(redundantXSpace / 2,redundantYSpace / 2); _EL_ normalizedScale=1; _EL_ } _EL_  else { _EL_ if (prevMatchViewWidth == 0 || prevMatchViewHeight == 0) { _EL_ savePreviousImageValues(); _EL_ } _EL_ prevMatrix.getValues(m); _EL_ m[Matrix.MSCALE_X]=matchViewWidth / drawableWidth * normalizedScale; _EL_ m[Matrix.MSCALE_Y]=matchViewHeight / drawableHeight * normalizedScale; _EL_ float transX=m[Matrix.MTRANS_X]; _EL_ float transY=m[Matrix.MTRANS_Y]; _EL_ float prevActualWidth=prevMatchViewWidth * normalizedScale; _EL_ float actualWidth=getImageWidth(); _EL_ translateMatrixAfterRotate(Matrix.MTRANS_X,transX,prevActualWidth,actualWidth,prevViewWidth,viewWidth,drawableWidth); _EL_ float prevActualHeight=prevMatchViewHeight * normalizedScale; _EL_ float actualHeight=getImageHeight(); _EL_ translateMatrixAfterRotate(Matrix.MTRANS_Y,transY,prevActualHeight,actualHeight,prevViewHeight,viewHeight,drawableHeight); _EL_ matrix.setValues(m); _EL_ } _EL_ fixTrans(); _EL_ setImageMatrix(matrix); _EL_ } _EL_ ', 'public void shutdown(){ _EL_   final long begin=System.currentTimeMillis(); _EL_   log.info("ThreadPoolManager: Shutting down."); _EL_   log.info("\\t... executing " + getTaskCount(scheduledPool) + " scheduled tasks."); _EL_   log.info("\\t... executing " + getTaskCount(instantPool) + " instant tasks."); _EL_   log.info("\\t... executing " + getTaskCount(longRunningPool) + " long running tasks."); _EL_   log.info("\\t... " + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + " forking tasks left."); _EL_   scheduledPool.shutdown(); _EL_   instantPool.shutdown(); _EL_   longRunningPool.shutdown(); _EL_   workStealingPool.shutdown(); _EL_   boolean success=false; _EL_   try { _EL_     success|=awaitTermination(5000); _EL_     scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false); _EL_     scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); _EL_     success|=awaitTermination(10000); _EL_   } _EL_  catch (  InterruptedException e) { _EL_     e.printStackTrace(); _EL_   } _EL_   log.info("\\t... success: " + success + " in "+ (System.currentTimeMillis() - begin)+ " msec."); _EL_   log.info("\\t... " + getTaskCount(scheduledPool) + " scheduled tasks left."); _EL_   log.info("\\t... " + getTaskCount(instantPool) + " instant tasks left."); _EL_   log.info("\\t... " + getTaskCount(longRunningPool) + " long running tasks left."); _EL_   log.info("\\t... " + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + " forking tasks left."); _EL_   workStealingPool.shutdownNow(); _EL_ } _EL_ ', 'public static Collection<InetAddress> toInetAddresses(Collection<String> addrs,Collection<String> hostNames) throws IgniteCheckedException { _EL_   Set<InetAddress> res=new HashSet<>(addrs.size()); _EL_   Iterator<String> hostNamesIt=hostNames.iterator(); _EL_   for (  String addr : addrs) { _EL_     String hostName=hostNamesIt.hasNext() ? hostNamesIt.next() : null; _EL_     InetAddress inetAddr=null; _EL_     if (!F.isEmpty(hostName)) { _EL_       try { _EL_         inetAddr=InetAddress.getByName(hostName); _EL_       } _EL_  catch (      UnknownHostException ignored) { _EL_       } _EL_     } _EL_     if (inetAddr == null || inetAddr.isLoopbackAddress()) { _EL_       try { _EL_         inetAddr=InetAddress.getByName(addr); _EL_       } _EL_  catch (      UnknownHostException ignored) { _EL_       } _EL_     } _EL_     if (inetAddr != null)     res.add(inetAddr); _EL_   } _EL_   if (res.isEmpty())   throw new IgniteCheckedException("Addresses can not be resolved [addr=" + addrs + ", hostNames="+ hostNames+ \']\'); _EL_   return res; _EL_ } _EL_ ', "public static String removeNewLineChars(String s){ _EL_   String retString=null; _EL_   if ((s != null) && (s.length() > 0) && (s.indexOf('\\n') != -1)) { _EL_     char[] chars=s.toCharArray(); _EL_     int len=chars.length; _EL_     StringBuffer sb=new StringBuffer(len); _EL_     for (int i=0; i < len; i++) { _EL_       char c=chars[i]; _EL_       if (c != '\\n') { _EL_         sb.append(c); _EL_       } _EL_     } _EL_     retString=sb.toString(); _EL_   } _EL_  else { _EL_     retString=s; _EL_   } _EL_   return retString; _EL_ } _EL_ ", 'void calculateCounters(){ _EL_   if (!isDBAvailable())   return; _EL_   long time=System.currentTimeMillis(); _EL_   int total=0; _EL_   write.lock(); _EL_   try { _EL_     countResetFeedsAndCategories(); _EL_     total+=countFeedsWithUnread(); _EL_     countCategoriesWithUnread(); _EL_     countSpecialCategories(total); _EL_   } _EL_   finally { _EL_     write.unlock(); _EL_   } _EL_   Log.i(TAG,String.format("Recalculated counters, total unread: %s (took %sms)",total,(System.currentTimeMillis() - time))); _EL_ } _EL_ ', 'public JarModifier(File jarFile) throws JarException, IOException { _EL_   this.jarFile=jarFile; _EL_   JarFile jar=new JarFile(jarFile); _EL_   Enumeration<? extends JarEntry> enumerator=jar.entries(); _EL_   while (enumerator.hasMoreElements()) { _EL_     JarEntry currentEntry=(JarEntry)enumerator.nextElement(); _EL_     JarEntry resetEntry=new JarEntry(currentEntry.getName()); _EL_     jarEntries.put(currentEntry.getName(),resetEntry); _EL_   } _EL_   String manifestPath=META_INF + SEPERATOR + "MANIFEST.MF"; _EL_   JarEntry jarEntry=jar.getJarEntry(manifestPath); _EL_   if (jarEntry != null) { _EL_     Enumeration<JarEntry> entries=jar.entries(); _EL_     while (entries.hasMoreElements()) { _EL_       jarEntry=(JarEntry)entries.nextElement(); _EL_       if (manifestPath.equalsIgnoreCase(jarEntry.getName())) { _EL_         break; _EL_       } _EL_  else { _EL_         jarEntry=null; _EL_       } _EL_     } _EL_   } _EL_   Manifest manifest=new Manifest(); _EL_   if (jarEntry != null) { _EL_     manifest.read(jar.getInputStream(jarEntry)); _EL_   } _EL_   this.manifest=manifest; _EL_   jar.close(); _EL_ } _EL_ ', '@Override public int addAttribute(Attribute a){ _EL_   if (a == null) { _EL_     throw new IllegalArgumentException("Attribute must not be null"); _EL_   } _EL_  else { _EL_     int index=-1; _EL_     Attribute original=a; _EL_     a=(Attribute)a.clone(); _EL_     if (unusedColumnList.size() > 0) { _EL_ synchronized (unusedColumnList) { _EL_         if (unusedColumnList.size() > 0) { _EL_           index=unusedColumnList.remove(0); _EL_           attributes.set(index,a); _EL_         } _EL_  else { _EL_           index=attributes.size(); _EL_           attributes.add(a); _EL_         } _EL_       } _EL_     } _EL_  else { _EL_       index=attributes.size(); _EL_       attributes.add(a); _EL_     } _EL_     a.setTableIndex(index); _EL_     original.setTableIndex(index); _EL_     return index; _EL_   } _EL_ } _EL_ ', 'default B with(String key,int value){ _EL_   return with(key,Integer.toString(value)); _EL_ } _EL_ ', 'public static <X>void sortTopN(X[] array,int offset,int limit,Comparator<? super X> comp){ _EL_   partitionTopN(array,offset,limit,comp); _EL_   Arrays.sort(array,offset,(int)Math.min((long)offset + limit,array.length),comp); _EL_ } _EL_ ', 'protected boolean isServerTransaction(){ _EL_   return this instanceof SIPServerTransaction; _EL_ } _EL_ ', 'Object addMarkedOccurrenceHighlight(int start,int end,MarkOccurrencesHighlightPainter p) throws BadLocationException { _EL_   Document doc=textArea.getDocument(); _EL_   TextUI mapper=textArea.getUI(); _EL_   HighlightInfo i=new LayeredHighlightInfo(); _EL_   i.painter=p; _EL_   i.p0=doc.createPosition(start); _EL_   i.p1=doc.createPosition(end - 1); _EL_   markedOccurrences.add(i); _EL_   mapper.damageRange(textArea,start,end); _EL_   return i; _EL_ } _EL_ ', 'public static void readFully(InputStream in,byte buf[],int off,int len) throws IOException { _EL_   int toRead=len; _EL_   while (toRead > 0) { _EL_     int ret=in.read(buf,off,toRead); _EL_     if (ret < 0) { _EL_       throw new IOException("Premature EOF from inputStream"); _EL_     } _EL_     toRead-=ret; _EL_     off+=ret; _EL_   } _EL_ } _EL_ ', 'public static String addToCartBulk(HttpServletRequest request,HttpServletResponse response){ _EL_   String categoryId=request.getParameter("category_id"); _EL_   ShoppingCart cart=getCartObject(request); _EL_   Delegator delegator=(Delegator)request.getAttribute("delegator"); _EL_   LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher"); _EL_   ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart); _EL_   String controlDirective; _EL_   Map<String,Object> result; _EL_   Map<String,Object> paramMap=UtilHttp.getParameterMap(request); _EL_   String catalogId=CatalogWorker.getCurrentCatalogId(request); _EL_   result=cartHelper.addToCartBulk(catalogId,categoryId,paramMap); _EL_   controlDirective=processResult(result,request); _EL_   if (controlDirective.equals(ERROR)) { _EL_     return "error"; _EL_   } _EL_  else { _EL_     return "success"; _EL_   } _EL_ } _EL_ ', 'public void addFrequentSet(FrequentItemSet itemSet){ _EL_   frequentSets.add(itemSet); _EL_   maximumSetSize=Math.max(itemSet.getNumberOfItems(),maximumSetSize); _EL_ } _EL_ ', 'private int skipFromPeekBuffer(int length){ _EL_   int bytesSkipped=Math.min(peekBufferLength,length); _EL_   updatePeekBuffer(bytesSkipped); _EL_   return bytesSkipped; _EL_ } _EL_ ', 'protected Workflow.Method createRemoveVolumesFromCGMethod(URI vplexURI,URI cgURI,List<URI> vplexVolumeURIs){ _EL_   return new Workflow.Method(REMOVE_VOLUMES_FROM_CG_STEP,vplexURI,cgURI,vplexVolumeURIs); _EL_ } _EL_ ', 'private static String computeRegexString(String originalString,String oldName,String newName){ _EL_   StringBuilder builder=new StringBuilder(originalString.length()); _EL_   String oldNameOrNewNameRegEx=String.format("(%s)|(%s)",Pattern.quote(oldName),Pattern.quote(newName)); _EL_   int i=originalString.indexOf(oldName); _EL_   if (i >= 0) { _EL_     int prevI=0; _EL_     while (i >= 0) { _EL_       builder.append(Pattern.quote(originalString.substring(prevI,i))); _EL_       builder.append(oldNameOrNewNameRegEx); _EL_       prevI=i; _EL_       i=originalString.indexOf(oldName,i + oldName.length()); _EL_     } _EL_     builder.append(Pattern.quote(originalString.substring(prevI + oldName.length(),originalString.length()))); _EL_   } _EL_   return builder.toString(); _EL_ } _EL_ ', 'public synchronized String generateCallIdentifier(String address){ _EL_   String date=Long.toString(System.currentTimeMillis() + callIDCounter++ + rand.nextLong()); _EL_   byte cid[]=digester.digest(date.getBytes()); _EL_   String cidString=Utils.toHexString(cid); _EL_   return cidString + "@" + address; _EL_ } _EL_ ', 'public void doHistory(KeyEvent e){ _EL_   if (e.getSource() == m_Input) { _EL_ switch (e.getKeyCode()) { _EL_ case KeyEvent.VK_UP: _EL_       if (m_HistoryPos > 0) { _EL_         m_HistoryPos--; _EL_         String command=m_CommandHistory.elementAt(m_HistoryPos); _EL_         m_Input.setText(command); _EL_       } _EL_     break; _EL_ case KeyEvent.VK_DOWN: _EL_   if (m_HistoryPos < m_CommandHistory.size()) { _EL_     m_HistoryPos++; _EL_     String command=""; _EL_     if (m_HistoryPos < m_CommandHistory.size()) { _EL_       command=m_CommandHistory.elementAt(m_HistoryPos); _EL_     } _EL_     m_Input.setText(command); _EL_   } _EL_ break; _EL_ default : _EL_ break; _EL_ } _EL_ } _EL_ } _EL_ ', 'public static ReferenceBinding[] substitute(Substitution substitution,ReferenceBinding[] originalTypes){ _EL_   if (originalTypes == null)   return null; _EL_   ReferenceBinding[] substitutedTypes=originalTypes; _EL_   for (int i=0, length=originalTypes.length; i < length; i++) { _EL_     ReferenceBinding originalType=originalTypes[i]; _EL_     TypeBinding substitutedType=substitute(substitution,originalType); _EL_     if (!(substitutedType instanceof ReferenceBinding)) { _EL_       return null; _EL_     } _EL_     if (substitutedType != originalType) { _EL_       if (substitutedTypes == originalTypes) { _EL_         System.arraycopy(originalTypes,0,substitutedTypes=new ReferenceBinding[length],0,i); _EL_       } _EL_       substitutedTypes[i]=(ReferenceBinding)substitutedType; _EL_     } _EL_  else     if (substitutedTypes != originalTypes) { _EL_       substitutedTypes[i]=originalType; _EL_     } _EL_   } _EL_   return substitutedTypes; _EL_ } _EL_ ', 'private static Collection<TCPTransport> allKnownTransports(){ _EL_   Set<TCPTransport> s; _EL_ synchronized (localEndpoints) { _EL_     s=new HashSet<TCPTransport>(localEndpoints.size()); _EL_     for (    LinkedList<TCPEndpoint> epList : localEndpoints.values()) { _EL_       TCPEndpoint ep=epList.getFirst(); _EL_       s.add(ep.transport); _EL_     } _EL_   } _EL_   return s; _EL_ } _EL_ ', 'public void requestSecondsUntilIdleLockout(){ _EL_   operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_IDLE_LOCKOUT); _EL_ } _EL_ ', '@RequestMapping(value="/hive",method={RequestMethod.GET}) @ResponseBody private static List<String> showHiveDatabases() throws IOException { _EL_   IHiveClient hiveClient=HiveClientFactory.getHiveClient(); _EL_   List<String> results=null; _EL_   try { _EL_     results=hiveClient.getHiveDbNames(); _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_     throw new IOException(e); _EL_   } _EL_   return results; _EL_ } _EL_ ', 'private static double hackyAdjuster(double f){ _EL_   double tmp=Math.sqrt(1.0 - f); _EL_   return (f <= 0.5) ? tmp : tmp + (0.01 * (f - 0.5)); _EL_ } _EL_ ', 'private static Object fromString(String s) throws IOException, ClassNotFoundException { _EL_   byte[] data=Base64.decode(s,Base64.DEFAULT); _EL_   ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(data)); _EL_   Object o=ois.readObject(); _EL_   ois.close(); _EL_   return o; _EL_ } _EL_ ', 'private boolean copyDocument(SearchDocument newDocument,SearchDocument document,Map<String,Set<String>> removedProperties){ _EL_   boolean mutated=false; _EL_   for (  String oldFieldName : document.getPropertyNames()) { _EL_     newDocument.addProperty(oldFieldName); _EL_     List<String> oldValues=document.getProperty(oldFieldName); _EL_     if (oldValues != null) { _EL_       Set<String> objectsRemoved=(removedProperties != null) ? removedProperties.get(oldFieldName) : null; _EL_       for (      String oldValue : oldValues) { _EL_         if ((objectsRemoved != null) && (objectsRemoved.contains(oldValue))) { _EL_           mutated=true; _EL_         } _EL_  else { _EL_           addProperty(oldFieldName,oldValue,newDocument); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return mutated; _EL_ } _EL_ ', 'public SVDMatrix(Matrix Arg){ _EL_   this(Arg,true,true,true); _EL_ } _EL_ ', 'public void unlockForClear(InternalDistributedMember locker){ _EL_ synchronized (this.clearLockSync) { _EL_     InternalDistributedSystem instance=InternalDistributedSystem.getAnyInstance(); _EL_     if (instance != null && logger.isDebugEnabled()) { _EL_       logger.debug("Unlocking for clear, from member {} RVV {}",locker,System.identityHashCode(this)); _EL_     } _EL_     if (this.lockOwner != null && !locker.equals(this.lockOwner)) { _EL_       if (instance != null && logger.isDebugEnabled()) { _EL_         logger.debug("current clear lock owner was {} not unlocking",lockOwner); _EL_       } _EL_       return; _EL_     } _EL_     unlockVersionGeneration(locker); _EL_   } _EL_ } _EL_ ', 'private static int lastIndexOf(Object o,@NotNull Object[] elements,int index){ _EL_   if (o == null) { _EL_     for (int i=index; i >= 0; i--) { _EL_       if (elements[i] == null) { _EL_         return i; _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     for (int i=index; i >= 0; i--) { _EL_       if (o.equals(elements[i])) { _EL_         return i; _EL_       } _EL_     } _EL_   } _EL_   return -1; _EL_ } _EL_ ', 'public void write(ByteBuffer buffer) throws IOException { _EL_   buffer.position(0); _EL_   if (mFileChannel.size() + buffer.capacity() < mMaxSize) { _EL_     while (buffer.hasRemaining()) { _EL_       mFileChannel.write(buffer); _EL_     } _EL_     updateWaveFileSize(); _EL_   } _EL_  else { _EL_     int remaining=(int)(mMaxSize - mFileChannel.size()); _EL_     remaining-=(int)(remaining % mAudioFormat.getFrameSize()); _EL_     byte[] bytes=buffer.array(); _EL_     ByteBuffer current=ByteBuffer.wrap(Arrays.copyOf(bytes,remaining)); _EL_     ByteBuffer next=ByteBuffer.wrap(Arrays.copyOfRange(bytes,remaining,bytes.length)); _EL_     while (current.hasRemaining()) { _EL_       mFileChannel.write(current); _EL_     } _EL_     updateWaveFileSize(); _EL_     rollover(); _EL_     while (next.hasRemaining()) { _EL_       mFileChannel.write(next); _EL_     } _EL_     updateWaveFileSize(); _EL_   } _EL_ } _EL_ ', 'public static double dmod_d(double lhs,double rhs){ _EL_   return rhs != 0 ? lhs - rhs * Math.floor(lhs / rhs) : Double.NaN; _EL_ } _EL_ ', 'private synchronized void block(boolean tf){ _EL_   if (tf) { _EL_     try { _EL_       if (m_ioThread.isAlive() && m_state != IDLE) { _EL_         wait(); _EL_       } _EL_     } _EL_  catch (    InterruptedException ex) { _EL_     } _EL_   } _EL_  else { _EL_     notifyAll(); _EL_   } _EL_ } _EL_ ', 'public void move(MouseEvent e){ _EL_   Point2D pnt=getProjectionPoint(e); _EL_   int x=(int)pnt.getX(); _EL_   int y=(int)pnt.getY(); _EL_   if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) { _EL_     gpm=new OffsetGrabPoint(x,y); _EL_     gpm.clear(); _EL_   } _EL_  else { _EL_     gpm=gpo; _EL_     gpm.clear(); _EL_     gpm.set(x,y); _EL_   } _EL_   addPolyGrabPointsToOGP(gpm); _EL_   movingPoint=gpm; _EL_ } _EL_ ', 'public FloatBuffer put(float[] src,int srcOffset,int floatCount){ _EL_   Arrays.checkOffsetAndCount(src.length,srcOffset,floatCount); _EL_   if (floatCount > remaining()) { _EL_     throw new BufferOverflowException(); _EL_   } _EL_   for (int i=srcOffset; i < srcOffset + floatCount; ++i) { _EL_     put(src[i]); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public final void dispatchCharactersEvents(int nodeHandle,ContentHandler ch,boolean normalize) throws SAXException { _EL_   int identity=makeNodeIdentity(nodeHandle); _EL_   if (identity == DTM.NULL)   return; _EL_   int type=_type2(identity); _EL_   if (type == DTM.ELEMENT_NODE || type == DTM.DOCUMENT_NODE) { _EL_     int startNode=identity; _EL_     identity=_firstch2(identity); _EL_     if (DTM.NULL != identity) { _EL_       int offset=-1; _EL_       int length=0; _EL_       do { _EL_         type=_exptype2(identity); _EL_         if (type == DTM.TEXT_NODE || type == DTM.CDATA_SECTION_NODE) { _EL_           int dataIndex=m_dataOrQName.elementAt(identity); _EL_           if (dataIndex >= 0) { _EL_             if (-1 == offset) { _EL_               offset=dataIndex >>> TEXT_LENGTH_BITS; _EL_             } _EL_             length+=dataIndex & TEXT_LENGTH_MAX; _EL_           } _EL_  else { _EL_             if (-1 == offset) { _EL_               offset=m_data.elementAt(-dataIndex); _EL_             } _EL_             length+=m_data.elementAt(-dataIndex + 1); _EL_           } _EL_         } _EL_         identity++; _EL_       } _EL_  while (_parent2(identity) >= startNode); _EL_       if (length > 0) { _EL_         if (normalize)         m_chars.sendNormalizedSAXcharacters(ch,offset,length); _EL_  else         m_chars.sendSAXcharacters(ch,offset,length); _EL_       } _EL_     } _EL_   } _EL_  else   if (DTM.TEXT_NODE == type || DTM.CDATA_SECTION_NODE == type) { _EL_     int dataIndex=m_dataOrQName.elementAt(identity); _EL_     if (dataIndex >= 0) { _EL_       if (normalize)       m_chars.sendNormalizedSAXcharacters(ch,dataIndex >>> TEXT_LENGTH_BITS,dataIndex & TEXT_LENGTH_MAX); _EL_  else       m_chars.sendSAXcharacters(ch,dataIndex >>> TEXT_LENGTH_BITS,dataIndex & TEXT_LENGTH_MAX); _EL_     } _EL_  else { _EL_       if (normalize)       m_chars.sendNormalizedSAXcharacters(ch,m_data.elementAt(-dataIndex),m_data.elementAt(-dataIndex + 1)); _EL_  else       m_chars.sendSAXcharacters(ch,m_data.elementAt(-dataIndex),m_data.elementAt(-dataIndex + 1)); _EL_     } _EL_   } _EL_  else { _EL_     int dataIndex=m_dataOrQName.elementAt(identity); _EL_     if (dataIndex < 0) { _EL_       dataIndex=-dataIndex; _EL_       dataIndex=m_data.elementAt(dataIndex + 1); _EL_     } _EL_     String str=(String)m_values.elementAt(dataIndex); _EL_     if (normalize)     FastStringBuffer.sendNormalizedSAXcharacters(str.toCharArray(),0,str.length(),ch); _EL_  else     ch.characters(str.toCharArray(),0,str.length()); _EL_   } _EL_ } _EL_ ', 'public static boolean containIP(int cidrPrefix,int cidrMaskBits,int ip){ _EL_   boolean matched=true; _EL_   int bitsToShift=32 - cidrMaskBits; _EL_   if (bitsToShift > 0) { _EL_     cidrPrefix=cidrPrefix >> bitsToShift; _EL_     ip=ip >> bitsToShift; _EL_     cidrPrefix=cidrPrefix << bitsToShift; _EL_     ip=ip << bitsToShift; _EL_   } _EL_   if (cidrPrefix != ip) { _EL_     matched=false; _EL_   } _EL_   return matched; _EL_ } _EL_ ', 'protected static Boolean lock(String serviceName,Object name){ _EL_   DistributedLockService service=DistributedLockService.getServiceNamed(serviceName); _EL_   boolean locked=service.lock(name,1000,-1); _EL_   return Boolean.valueOf(locked); _EL_ } _EL_ ', 'public File[] selectImportFiles(final String title,boolean multipleSelection,FileNameExtensionFilter[] fileNameExtensionFilters){ _EL_   if (Boolean.parseBoolean(System.getProperty("use.native.choosers",Boolean.toString(OSType.isMac())))) { _EL_     FileDialog importDialog=fileDialogs.get(title); _EL_     if (importDialog == null) { _EL_       importDialog=new FileDialog(this,title,FileDialog.LOAD); _EL_       fileDialogs.put(title,importDialog); _EL_     } _EL_     importDialog.setVisible(true); _EL_     if (importDialog.getFile() != null) { _EL_       return new File[]{new File(importDialog.getDirectory(),importDialog.getFile())}; _EL_     } _EL_   } _EL_  else { _EL_     JFileChooser importChooser=fileChoosers.get(title); _EL_     if (importChooser == null) { _EL_       importChooser=new JFileChooser(Utils.getCWD()); _EL_       importChooser.setMultiSelectionEnabled(multipleSelection); _EL_       for (      FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters) { _EL_         importChooser.setFileFilter(fileNameExtensionFilter); _EL_       } _EL_       importChooser.setDialogTitle(title); _EL_       fileChoosers.put(title,importChooser); _EL_     } _EL_     int returnVal=importChooser.showOpenDialog(this); _EL_     if (returnVal == JFileChooser.APPROVE_OPTION) { _EL_       if (importChooser.isMultiSelectionEnabled()) { _EL_         return importChooser.getSelectedFiles(); _EL_       } _EL_  else { _EL_         return new File[]{importChooser.getSelectedFile()}; _EL_       } _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public GT_MetaGenerated_Item(String aUnlocalized,short aOffset,short aItemAmount){ _EL_   super(aUnlocalized); _EL_   setCreativeTab(GregTech_API.TAB_GREGTECH_MATERIALS); _EL_   setHasSubtypes(true); _EL_   setMaxDamage(0); _EL_   mEnabledItems=new BitSet(aItemAmount); _EL_   mVisibleItems=new BitSet(aItemAmount); _EL_   mOffset=(short)Math.min(32766,aOffset); _EL_   mItemAmount=(short)Math.min(aItemAmount,32766 - mOffset); _EL_   mIconList=new IIcon[aItemAmount][1]; _EL_   sInstances.put(getUnlocalizedName(),this); _EL_ } _EL_ ', 'public static byte[] readFully(InputStream in) throws IOException { _EL_   try { _EL_     return readFullyNoClose(in); _EL_   } _EL_   finally { _EL_     in.close(); _EL_   } _EL_ } _EL_ ', 'final void putLong(int offset,long value){ _EL_   unsafe.putLong(offset + address,value); _EL_ } _EL_ ', 'public static String gensalt(int log_rounds,SecureRandom random){ _EL_   StringBuffer rs=new StringBuffer(); _EL_   byte rnd[]=new byte[BCRYPT_SALT_LEN]; _EL_   random.nextBytes(rnd); _EL_   rs.append("$2a$"); _EL_   if (log_rounds < 10) { _EL_     rs.append("0"); _EL_   } _EL_   if (log_rounds > 30) { _EL_     throw new IllegalArgumentException("log_rounds exceeds maximum (30)"); _EL_   } _EL_   rs.append(Integer.toString(log_rounds)); _EL_   rs.append("$"); _EL_   rs.append(encode_base64(rnd,rnd.length)); _EL_   return rs.toString(); _EL_ } _EL_ ', 'public void checkKey(Object key) throws PartitionedRegionException { _EL_   if (!hasHash) { _EL_     return; _EL_   } _EL_   if (key == null) { _EL_     return; _EL_   } _EL_   int expected=key.hashCode(); _EL_   if (expected == keyHash) { _EL_     return; _EL_   } _EL_   throw new PartitionedRegionException("Object hashCode inconsistent between cache peers. Here = " + expected + "; peer calculated = "+ keyHash); _EL_ } _EL_ ', 'public StringBuffer numberToString(final String strNumberToConvert){ _EL_   String strNumber="", signBit=""; _EL_   if (strNumberToConvert.startsWith("-")) { _EL_     strNumber="" + strNumberToConvert.substring(1,strNumberToConvert.length()); _EL_     signBit="-"; _EL_   } _EL_  else   strNumber="" + strNumberToConvert; _EL_   final DecimalFormat dft=new DecimalFormat("##############0.00"); _EL_   final String strtemp="" + dft.format(Double.parseDouble(strNumber)); _EL_   StringBuffer strbNumber=new StringBuffer(strtemp); _EL_   final int intLen=strbNumber.length(); _EL_   for (int i=intLen - 6; i > 0; i=i - 2)   strbNumber.insert(i,\',\'); _EL_   if (signBit.equals("-"))   strbNumber=strbNumber.insert(0,"-"); _EL_   return strbNumber; _EL_ } _EL_ ', 'private void runInitScriptIfRequired(String url,Connection connection) throws SQLException { _EL_   Matcher matcher=INITSCRIPT_MATCHING_PATTERN.matcher(url); _EL_   if (matcher.matches()) { _EL_     String initScriptPath=matcher.group(2); _EL_     try { _EL_       URL resource=Resources.getResource(initScriptPath); _EL_       String sql=Resources.toString(resource,Charsets.UTF_8); _EL_       ScriptUtils.executeSqlScript(connection,initScriptPath,sql); _EL_     } _EL_  catch (    IOException|IllegalArgumentException e) { _EL_       LOGGER.warn("Could not load classpath init script: {}",initScriptPath); _EL_       throw new SQLException("Could not load classpath init script: " + initScriptPath,e); _EL_     } _EL_ catch (    ScriptException e) { _EL_       LOGGER.error("Error while executing init script: {}",initScriptPath,e); _EL_       throw new SQLException("Error while executing init script: " + initScriptPath,e); _EL_     } _EL_   } _EL_ } _EL_ ', 'private static int parseInt(String value,int beginIndex,int endIndex) throws NumberFormatException { _EL_   if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) { _EL_     throw new NumberFormatException(value); _EL_   } _EL_   int i=beginIndex; _EL_   int result=0; _EL_   int digit; _EL_   if (i < endIndex) { _EL_     digit=Character.digit(value.charAt(i++),10); _EL_     if (digit < 0) { _EL_       throw new NumberFormatException("Invalid number: " + value); _EL_     } _EL_     result=-digit; _EL_   } _EL_   while (i < endIndex) { _EL_     digit=Character.digit(value.charAt(i++),10); _EL_     if (digit < 0) { _EL_       throw new NumberFormatException("Invalid number: " + value); _EL_     } _EL_     result*=10; _EL_     result-=digit; _EL_   } _EL_   return -result; _EL_ } _EL_ ', 'public static void println(Object x){ _EL_   out.println(x); _EL_ } _EL_ ', 'private void initKeyboardButtons(KeyboardView view){ _EL_   mButtons=new ArrayList<>(); _EL_   mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_0)); _EL_   mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_1)); _EL_   mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_2)); _EL_   mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_3)); _EL_   mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_4)); _EL_   mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_5)); _EL_   mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_6)); _EL_   mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_7)); _EL_   mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_8)); _EL_   mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_9)); _EL_   mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_clear)); _EL_   for (  View button : mButtons) { _EL_     button.setOnClickListener(this); _EL_   } _EL_ } _EL_ ', 'private static String findRelativePath(String filePath,String dirPath){ _EL_   String relPath; _EL_   if (!dirPath.endsWith(File.separator)) { _EL_     dirPath=dirPath + File.separator; _EL_   } _EL_   if (filePath.startsWith(dirPath)) { _EL_     relPath=filePath.substring(dirPath.length()); _EL_   } _EL_  else { _EL_     relPath=filePath; _EL_   } _EL_   return relPath; _EL_ } _EL_ ', 'public boolean init(){ _EL_   log.config(""); _EL_   MClient client=MClient.get(Env.getCtx()); _EL_   String ASPFilter=""; _EL_   if (client.isUseASP())   ASPFilter="   AND (   p.AD_Process_Para_ID IN ( " + "              SELECT pp.AD_Process_Para_ID " + "                FROM ASP_Process_Para pp, ASP_Process p, ASP_Level l, ASP_ClientLevel cl "+ "               WHERE p.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND cl.AD_Client_ID = " + client.getAD_Client_ID() + "                 AND cl.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND pp.ASP_Process_ID = p.ASP_Process_ID "+ "                 AND pp.IsActive = \'Y\' "+ "                 AND p.IsActive = \'Y\' "+ "                 AND l.IsActive = \'Y\' "+ "                 AND cl.IsActive = \'Y\' "+ "                 AND pp.ASP_Status = \'S\') "+ "        OR p.AD_Process_Para_ID IN ( "+ "              SELECT AD_Process_Para_ID "+ "                FROM ASP_ClientException ce "+ "               WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "                 AND ce.IsActive = \'Y\' "+ "                 AND ce.AD_Process_Para_ID IS NOT NULL "+ "                 AND ce.AD_Tab_ID IS NULL "+ "                 AND ce.AD_Field_ID IS NULL "+ "                 AND ce.ASP_Status = \'S\') "+ "       ) "+ "   AND p.AD_Process_Para_ID NOT IN ( "+ "          SELECT AD_Process_Para_ID "+ "            FROM ASP_ClientException ce "+ "           WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "             AND ce.IsActive = \'Y\' "+ "             AND ce.AD_Process_Para_ID IS NOT NULL "+ "             AND ce.AD_Tab_ID IS NULL "+ "             AND ce.AD_Field_ID IS NULL "+ "             AND ce.ASP_Status = \'H\')"; _EL_   String sql=null; _EL_   if (Env.isBaseLanguage(Env.getCtx(),"AD_Process_Para"))   sql="SELECT p.Name, p.Description, p.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode, "+ "p.ReadOnlyLogic, p.DisplayLogic "+ "FROM AD_Process_Para p"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND p.IsActive=\'Y\' " + ASPFilter + " ORDER BY SeqNo"; _EL_  else   sql="SELECT t.Name, t.Description, t.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode, "+ "p.ReadOnlyLogic, p.DisplayLogic "+ "FROM AD_Process_Para p"+ " INNER JOIN AD_Process_Para_Trl t ON (p.AD_Process_Para_ID=t.AD_Process_Para_ID)"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND t.AD_Language=\'" + Env.getAD_Language(Env.getCtx()) + "\'"+ " AND p.IsActive=\'Y\' "+ ASPFilter+ " ORDER BY SeqNo"; _EL_   boolean hasFields=false; _EL_   Rows rows=new Rows(); _EL_   try { _EL_     PreparedStatement pstmt=DB.prepareStatement(sql,null); _EL_     pstmt.setInt(1,m_processInfo.getAD_Process_ID()); _EL_     ResultSet rs=pstmt.executeQuery(); _EL_     while (rs.next()) { _EL_       hasFields=true; _EL_       createField(rs,rows); _EL_       isPair=!isPair; _EL_     } _EL_     rs.close(); _EL_     pstmt.close(); _EL_   } _EL_  catch (  SQLException e) { _EL_     log.log(Level.SEVERE,sql,e); _EL_   } _EL_   if (m_mFields.size() != m_mFields2.size() || m_mFields.size() != m_wEditors.size() || m_mFields2.size() != m_wEditors2.size())   log.log(Level.SEVERE,"View & Model vector size is different"); _EL_   if (hasFields) { _EL_     centerPanel.appendChild(rows); _EL_     dynamicDisplay(); _EL_   } _EL_  else   dispose(); _EL_   return hasFields; _EL_ } _EL_ ', 'public void resetSingleton(){ _EL_   root=null; _EL_   tmpFileCounter.set(0); _EL_   accessedFiles.clear(); _EL_   shouldAllThrowIOException=false; _EL_   classesThatShouldThrowIOException.clear(); _EL_ synchronized (leakingResources) { _EL_     for (    LeakingResource resource : leakingResources) { _EL_       try { _EL_         resource.release(); _EL_       } _EL_  catch (      Exception e) { _EL_         logger.warn("Failed to release resource: " + e.getMessage(),e); _EL_       } _EL_     } _EL_     leakingResources.clear(); _EL_   } _EL_ } _EL_ ', 'public static String generateStringOfCharacters(int count){ _EL_   StringBuilder sb=new StringBuilder(); _EL_   for (int i=0; i < count; i++) { _EL_     sb.append(CHARACTERS.charAt((int)(Math.random() * CHARACTERS.length()))); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'private ExchangeRateManager(){ _EL_   if (System.getProperty("EXPERIMENTAL") == null)   throw new UnsupportedOperationException("Work in progress"); _EL_   addKnownRates(); _EL_ } _EL_ ', 'public void removeAttribute(String name){ _EL_   if (name != null)   if (attributesList != null) { _EL_     for (int i=0; i < attributesList.size(); i++) { _EL_       Object o=attributesList.elementAt(i); _EL_       if (o instanceof AttributeField) { _EL_         AttributeField a=(AttributeField)o; _EL_         try { _EL_           String n=a.getName(); _EL_           if (n != null) { _EL_             if (name.equals(n)) { _EL_               attributesList.remove(a); _EL_             } _EL_           } _EL_         } _EL_  catch (        SdpParseException e) { _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public static boolean isUniqueContraintError(Exception e){ _EL_   if (DB.isPostgreSQL())   return isSQLState(e,"23505"); _EL_   return isErrorCode(e,1); _EL_ } _EL_ ', 'ConfigurationError(String msg,Exception x){ _EL_   super(msg); _EL_   this.exception=x; _EL_ } _EL_ ', 'void addFillComponents(Container panel,int[] cols,int[] rows){ _EL_   Dimension filler=new Dimension(10,10); _EL_   boolean filled_cell_11=false; _EL_   CellConstraints cc=new CellConstraints(); _EL_   if (cols.length > 0 && rows.length > 0) { _EL_     if (cols[0] == 1 && rows[0] == 1) { _EL_       panel.add(Box.createRigidArea(filler),cc.xy(1,1)); _EL_       filled_cell_11=true; _EL_     } _EL_   } _EL_   for (int index=0; index < cols.length; index++) { _EL_     if (cols[index] == 1 && filled_cell_11) { _EL_       continue; _EL_     } _EL_     panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1)); _EL_   } _EL_   for (int index=0; index < rows.length; index++) { _EL_     if (rows[index] == 1 && filled_cell_11) { _EL_       continue; _EL_     } _EL_     panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index])); _EL_   } _EL_ } _EL_ ', 'private void insertUsedContextPrefixes(){ _EL_   int unknownPrefixesCount=unknownPrefixesInXMLLiteral.size(); _EL_   if (unknownPrefixesCount > 0) { _EL_     StringBuilder contextPrefixes=new StringBuilder(1024); _EL_     ElementInfo topElement=peekStack(); _EL_     for (int i=0; i < unknownPrefixesCount; i++) { _EL_       String prefix=unknownPrefixesInXMLLiteral.get(i); _EL_       String namespace=topElement.getNamespace(prefix); _EL_       if (namespace != null) { _EL_         appendNamespaceDecl(contextPrefixes,prefix,namespace); _EL_       } _EL_     } _EL_     int endOfFirstStartTag=charBuf.indexOf(">"); _EL_     charBuf.insert(endOfFirstStartTag,contextPrefixes.toString()); _EL_   } _EL_   unknownPrefixesInXMLLiteral.clear(); _EL_ } _EL_ ', 'public void addPutTimeNanos(long duration){ _EL_   putTimeNanos.addAndGet(duration); _EL_   if (delegate != null)   delegate.addPutTimeNanos(duration); _EL_ } _EL_ ', 'public static List<Integer> precomputeHashes(byte[] data,long tweak){ _EL_   ArrayList<Integer> list=new ArrayList<>(MAX_HASH_FUNCS); _EL_   for (int i=0; i < MAX_HASH_FUNCS; ++i) { _EL_     list.add(murmurhash3bit(i,data,tweak)); _EL_   } _EL_   return list; _EL_ } _EL_ ', '@RequestProcessing(value="/member/{userName}/following/tags",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomeFollowingTags(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception { _EL_   final JSONObject user=(JSONObject)request.getAttribute(User.USER); _EL_   request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName")); _EL_   final AbstractFreeMarkerRenderer renderer=new SkinRenderer(); _EL_   context.setRenderer(renderer); _EL_   renderer.setTemplateName("/home/following-tags.ftl"); _EL_   final Map<String,Object> dataModel=renderer.getDataModel(); _EL_   filler.fillHeaderAndFooter(request,response,dataModel); _EL_   String pageNumStr=request.getParameter("p"); _EL_   if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) { _EL_     pageNumStr="1"; _EL_   } _EL_   final int pageNum=Integer.valueOf(pageNumStr); _EL_   final int pageSize=Symphonys.getInt("userHomeFollowingTagsCnt"); _EL_   final int windowSize=Symphonys.getInt("userHomeFollowingTagsWindowSize"); _EL_   fillHomeUser(dataModel,user); _EL_   final String followingId=user.optString(Keys.OBJECT_ID); _EL_   dataModel.put(Follow.FOLLOWING_ID,followingId); _EL_   avatarQueryService.fillUserAvatarURL(user); _EL_   final JSONObject followingTagsResult=followQueryService.getFollowingTags(followingId,pageNum,pageSize); _EL_   final List<JSONObject> followingTags=(List<JSONObject>)followingTagsResult.opt(Keys.RESULTS); _EL_   dataModel.put(Common.USER_HOME_FOLLOWING_TAGS,followingTags); _EL_   final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN); _EL_   if (isLoggedIn) { _EL_     final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER); _EL_     final String followerId=currentUser.optString(Keys.OBJECT_ID); _EL_     final boolean isFollowing=followQueryService.isFollowing(followerId,followingId); _EL_     dataModel.put(Common.IS_FOLLOWING,isFollowing); _EL_     for (    final JSONObject followingTag : followingTags) { _EL_       final String homeUserFollowingTagId=followingTag.optString(Keys.OBJECT_ID); _EL_       followingTag.put(Common.IS_FOLLOWING,followQueryService.isFollowing(followerId,homeUserFollowingTagId)); _EL_     } _EL_   } _EL_   user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID))); _EL_   final int followingTagCnt=followingTagsResult.optInt(Pagination.PAGINATION_RECORD_COUNT); _EL_   final int pageCount=(int)Math.ceil(followingTagCnt / (double)pageSize); _EL_   final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize); _EL_   if (!pageNums.isEmpty()) { _EL_     dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0)); _EL_     dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1)); _EL_   } _EL_   dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum); _EL_   dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount); _EL_   dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums); _EL_ } _EL_ ', 'ObservedObject createObservedObject(ObjectName object){ _EL_   return new ObservedObject(object); _EL_ } _EL_ ', 'private void deleteChildren(Element container){ _EL_   while (container.hasChildNodes()) { _EL_     container.removeChild(container.getLastChild()); _EL_   } _EL_ } _EL_ ', 'private void saveInitialChildState(FacesContext facesContext,UIComponent component){ _EL_   if (component instanceof EditableValueHolder && !component.isTransient()) { _EL_     String clientId=component.getClientId(facesContext); _EL_     SavedState state=new SavedState(); _EL_     initialChildState.put(clientId,state); _EL_     state.populate((EditableValueHolder)component); _EL_   } _EL_   Iterator<UIComponent> iterator=component.getFacetsAndChildren(); _EL_   while (iterator.hasNext()) { _EL_     saveChildState(facesContext,iterator.next()); _EL_   } _EL_ } _EL_ ', 'public boolean is_overlap(){ _EL_   Set<BrdItem> start_contacts=get_start_contacts(); _EL_   Set<BrdItem> end_contacts=get_end_contacts(); _EL_   for (  BrdItem end_contact : end_contacts) { _EL_     if (start_contacts.contains(end_contact))     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'static Object ensureNotNull(Location location,Object value){ _EL_   if (value == null) { _EL_     throw new EvalException(location,"Snippet runtime does not support null values."); _EL_   } _EL_   return value; _EL_ } _EL_ ', 'public static final ArrayList readListXml(InputStream in) throws XmlPullParserException, IOException { _EL_   XmlPullParser parser=Xml.newPullParser(); _EL_   parser.setInput(in,null); _EL_   return (ArrayList)readValueXml(parser,new String[1]); _EL_ } _EL_ ', 'private static String padRight(String s,int minLength){ _EL_   return String.format("%1$-" + minLength + "s",s); _EL_ } _EL_ ', 'protected synchronized void onSendTaskCompleted(RecordBuffer<R> buffer){ _EL_   logger.trace("{}:{} Send Completed",name(),buffer); _EL_   activeSendTasks.decrementAndGet(); _EL_ } _EL_ ', 'public void addPreferencesButton(){ _EL_   JButton prefsButton=new JButton("Prefs"); _EL_   prefsButton.setHideActionText(true); _EL_   prefsButton.setAction(RasterPlotActions.getPropertiesDialogAction(this)); _EL_   buttonPanel.add(prefsButton); _EL_ } _EL_ ', 'public void clearUnused(ConfigImpl config){ _EL_   SystemOut.printDate(config.getOutWriter(),"PagePool: " + size() + ">("+ maxSize+ ")"); _EL_   if (size() > maxSize) { _EL_     Object[] keys=keys(); _EL_     LongKeyList list=new LongKeyList(); _EL_     for (int i=0; i < keys.length; i++) { _EL_       PageSource ps=getPageSource(keys[i],false); _EL_       long updateTime=ps.getLastAccessTime(); _EL_       if (updateTime + timeout < System.currentTimeMillis()) { _EL_         long add=((ps.getAccessCount() - 1) * 10000); _EL_         if (add > timeout)         add=timeout; _EL_         list.add(updateTime + add,keys[i]); _EL_       } _EL_     } _EL_     while (size() > maxSize) { _EL_       Object key=list.shift(); _EL_       if (key == null)       break; _EL_       remove(key); _EL_     } _EL_   } _EL_ } _EL_ ', 'public ShortInterleavedRaster(SampleModel sampleModel,DataBuffer dataBuffer,Point origin){ _EL_   this(sampleModel,dataBuffer,new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null); _EL_ } _EL_ ', 'private void copyCarbonDataFileToCarbonStorePath(String localFileName) throws CarbonDataWriterException { _EL_   long copyStartTime=System.currentTimeMillis(); _EL_   LOGGER.info("Copying " + localFileName + " --> "+ carbonDataDirectoryPath); _EL_   try { _EL_     CarbonFile localCarbonFile=FileFactory.getCarbonFile(localFileName,FileFactory.getFileType(localFileName)); _EL_     String carbonFilePath=carbonDataDirectoryPath + localFileName.substring(localFileName.lastIndexOf(File.separator)); _EL_     copyLocalFileToCarbonStore(carbonFilePath,localFileName,CarbonCommonConstants.BYTEBUFFER_SIZE,getMaxOfBlockAndFileSize(fileSizeInBytes,localCarbonFile.getSize())); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new CarbonDataWriterException("Problem while copying file from local store to carbon store"); _EL_   } _EL_   LOGGER.info("Total copy time (ms) to copy file " + localFileName + " is "+ (System.currentTimeMillis() - copyStartTime)); _EL_ } _EL_ ', '@Override public boolean flingBackward(Selector obj,boolean isVertical) throws UiObjectNotFoundException { _EL_   UiScrollable scrollable=new UiScrollable(obj.toUiSelector()); _EL_   if (isVertical)   scrollable.setAsVerticalList(); _EL_  else   scrollable.setAsHorizontalList(); _EL_   return scrollable.flingBackward(); _EL_ } _EL_ ', 'protected static double toDouble(String s){ _EL_   try { _EL_     return Double.parseDouble(s); _EL_   } _EL_  catch (  Exception e) { _EL_     TestCase.fail("Failed to parse double: " + s + "\\n"+ throwableToString(e)); _EL_     return Double.NaN; _EL_   } _EL_ } _EL_ ', 'public void addListener(final IFilterPanelListener<T> listener){ _EL_   m_listeners.addListener(listener); _EL_ } _EL_ ', 'public void testmirror(File orig,File origni,File truecolor){ _EL_   File mirror=TestSupport.addSuffixToName(orig,"_mirror"); _EL_   File recov=TestSupport.addSuffixToName(orig,"_recov"); _EL_   long crc0=0; _EL_   boolean interlaced; _EL_   boolean palete; _EL_ { _EL_     PngReader pngr=new PngReader(orig); _EL_     PngWriter pngw=null; _EL_     try { _EL_       if (rand.nextBoolean())       pngr.setLineSetFactory(ImageLineSetDefault.getFactoryByte()); _EL_       palete=pngr.imgInfo.indexed; _EL_       pngr.prepareSimpleDigestComputation(); _EL_       interlaced=pngr.isInterlaced(); _EL_       pngw=new PngWriter(mirror,pngr.imgInfo,true); _EL_       pngw.setFilterType(FilterType.FILTER_CYCLIC); _EL_       pngw.copyChunksFrom(pngr.getChunksList()); _EL_       IImageLineSet<? extends IImageLine> lines=pngr.readRows(); _EL_       for (int row=0; row < pngr.imgInfo.rows; row++) { _EL_         mirrorLine(lines.getImageLine(row),pngr.imgInfo); _EL_         pngw.writeRow(lines.getImageLine(row)); _EL_       } _EL_       pngr.end(); _EL_       crc0=PngHelperInternal.getDigest(pngr); _EL_       pngw.end(); _EL_     } _EL_   finally { _EL_       pngr.close(); _EL_       if (pngw != null)       pngw.close(); _EL_     } _EL_   } _EL_ { _EL_     PngReader pngr2=new PngReader(mirror); _EL_     PngWriter pngw=null; _EL_     try { _EL_       if (pngr2.imgInfo.bitDepth < 16 && rand.nextBoolean())       pngr2.setLineSetFactory(ImageLineSetDefault.getFactoryByte()); _EL_       pngw=new PngWriter(recov,pngr2.imgInfo,true); _EL_       pngw.setFilterType(FilterType.FILTER_DEFAULT); _EL_       pngw.copyChunksFrom(pngr2.getChunksList()); _EL_       for (int row=0; row < pngr2.imgInfo.rows; row++) { _EL_         IImageLine line=pngr2.readRow(); _EL_         mirrorLine(line,pngr2.imgInfo); _EL_         pngw.writeRow(line); _EL_       } _EL_       pngr2.end(); _EL_       pngw.end(); _EL_     } _EL_   finally { _EL_       pngr2.close(); _EL_       if (pngw != null)       pngw.close(); _EL_     } _EL_   } _EL_   if (!interlaced)   TestSupport.testCrcEquals(recov,crc0); _EL_  else   TestSupport.testSameCrc(recov,origni); _EL_   if (interlaced)   additionalTestInterlaced(orig,origni); _EL_   if (palete && truecolor.exists())   additionalTestPalette(orig,truecolor); _EL_ } _EL_ ', 'public static void calcTextSize(Paint paint,String demoText,FSize outputFSize){ _EL_   Rect r=mCalcTextSizeRect; _EL_   r.set(0,0,0,0); _EL_   paint.getTextBounds(demoText,0,demoText.length(),r); _EL_   outputFSize.width=r.width(); _EL_   outputFSize.height=r.height(); _EL_ } _EL_ ', 'public void stateChanged(ChangeEvent evt){ _EL_   int scale=slider.getValue(); _EL_   value.setText("x" + String.valueOf(scale)); _EL_   size.setText("Image Size: " + (width * scale) + " x "+ (height * scale)+ " pixels"); _EL_   preview.repaint(); _EL_ } _EL_ ', 'public static void writeToFile(String content,File dstFile) throws IOException { _EL_   BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(dstFile,false)); _EL_   bufferedWriter.write(content); _EL_   bufferedWriter.close(); _EL_ } _EL_ ', 'public static boolean isFileURL(URL url){ _EL_   String protocol=url.getProtocol(); _EL_   return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) || URL_PROTOCOL_VFS.equals(protocol)); _EL_ } _EL_ ', 'private void updateStatus(String relayState,int currentStatus){ _EL_   Integer tmp=(Integer)currentStatusMap.get(relayState); _EL_   if (tmp != null) { _EL_     int previousStatus=tmp.intValue(); _EL_ switch (previousStatus) { _EL_ case LOGOUT_SUCCEEDED_STATUS: _EL_       if (currentStatus > previousStatus) { _EL_         currentStatusMap.put(relayState,new Integer(currentStatus)); _EL_       } _EL_     break; _EL_ case LOGOUT_FAILED_STATUS: _EL_   if (currentStatus < LOGOUT_FAILED_STATUS) { _EL_     currentStatusMap.put(relayState,new Integer(LOGOUT_PARTIAL_STATUS)); _EL_   } _EL_ break; _EL_ default : _EL_ break; _EL_ } _EL_ } _EL_  else { _EL_ currentStatusMap.put(relayState,new Integer(currentStatus)); _EL_ } _EL_ } _EL_ ', 'public static int[] oidStrToInts(String oid) throws IOException { _EL_   int length=oid.length(); _EL_   if (oid.charAt(length - 1) == \'.\') { _EL_     throw new IOException("Bad OID: " + oid); _EL_   } _EL_   int[] result=new int[length / 2 + 1]; _EL_   int number=0; _EL_   for (int i=0; i < length; i++) { _EL_     int value=0; _EL_     int pos=i; _EL_     for (; i < length; i++) { _EL_       char ch=oid.charAt(i); _EL_       if ((ch < \'0\') || (ch > \'9\')) { _EL_         break; _EL_       } _EL_       value=10 * value + (ch - \'0\'); _EL_     } _EL_     if (i == pos) { _EL_       throw new IOException("Bad OID: " + oid); _EL_     } _EL_     result[number++]=value; _EL_     if (i == length) { _EL_       break; _EL_     } _EL_     char ch=oid.charAt(i); _EL_     if (ch != \'.\') { _EL_       throw new IOException("Bad OID: " + oid); _EL_     } _EL_   } _EL_   if (number < 2) { _EL_     throw new IOException("OID should consist of no less than 2 components: " + oid); _EL_   } _EL_   return Arrays.copyOfRange(result,0,number); _EL_ } _EL_ ', 'public static Set<String> listServers(SSOToken ssoToken,String siteName) throws SMSException, SSOException, ConfigurationException { _EL_   Set<String> members=new HashSet<>(); _EL_   String siteId=getSiteId(ssoToken,siteName); _EL_   if (siteId != null) { _EL_     Set<String> allServers=ServerConfiguration.getServers(ssoToken); _EL_     for (    String svr : allServers) { _EL_       if (ServerConfiguration.belongToSite(ssoToken,svr,siteName)) { _EL_         members.add(svr); _EL_       } _EL_     } _EL_   } _EL_   return members; _EL_ } _EL_ ', 'public static GenericObjectEditorDialog createDialog(Container parent){ _EL_   return createDialog(parent,null); _EL_ } _EL_ ', 'public static boolean containsInLineFeatures(StyledLayerDescriptor sld){ _EL_   if (sld != null) { _EL_     for (    StyledLayer layer : sld.layers()) { _EL_       if (layer instanceof UserLayer) { _EL_         UserLayer userLayer=(UserLayer)layer; _EL_         if (userLayer.getInlineFeatureDatastore() != null) { _EL_           return true; _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public byte decodeBuffer(InputStream in)[] throws IOException { _EL_   ByteArrayOutputStream outStream=new ByteArrayOutputStream(); _EL_   decodeBuffer(in,outStream); _EL_   return (outStream.toByteArray()); _EL_ } _EL_ ', 'public static void runFinalization(){ _EL_   RUNTIME.runFinalization(); _EL_ } _EL_ ', 'private void displayAllStringDefinedInStringXml(){ _EL_   SimpleIconFontTextView textView=(SimpleIconFontTextView)findViewById(R.id.text_view_1); _EL_   List<String> list=new ArrayList<>(); _EL_   list.add(getString(R.string.gems_logo)); _EL_   String text=TextUtils.join(" ",list); _EL_   textView.setText(text); _EL_ } _EL_ ', 'public void push(Notification notification,NotificationResponseListener listener){ _EL_   final String notificationTopic=notification.getTopic(); _EL_   final String topic=notificationTopic == null ? defaultTopic : notificationTopic; _EL_   Request req=Utils.buildRequest(client,topic,notification,gateway); _EL_   semaphore.acquireUninterruptibly(); _EL_   req.send(new ResponseListener(semaphore,notification,listener)); _EL_ } _EL_ ', 'private static void appendJSONPair(StringBuilder json,String key,String value) throws UnsupportedEncodingException { _EL_   boolean isValueNumeric=false; _EL_   try { _EL_     if (value.equals("0") || !value.endsWith("0")) { _EL_       Double.parseDouble(value); _EL_       isValueNumeric=true; _EL_     } _EL_   } _EL_  catch (  NumberFormatException e) { _EL_     isValueNumeric=false; _EL_   } _EL_   if (json.charAt(json.length() - 1) != \'{\') { _EL_     json.append(\',\'); _EL_   } _EL_   json.append(escapeJSON(key)); _EL_   json.append(\':\'); _EL_   if (isValueNumeric) { _EL_     json.append(value); _EL_   } _EL_  else { _EL_     json.append(escapeJSON(value)); _EL_   } _EL_ } _EL_ ', 'public void updateFromResource(){ _EL_   for (  String resource : resources) { _EL_     InputStream is=ClassLoader.getSystemResourceAsStream(resource); _EL_     LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is); _EL_     for (    EntryType type : myMap.keySet()) { _EL_       LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type); _EL_       LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type); _EL_       LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>(); _EL_       LinkedHashSet<String> keys=new LinkedHashSet<String>(); _EL_       keys.addAll(dataMappings.keySet()); _EL_       keys.addAll(resourceMappings.keySet()); _EL_       for (      String key : keys) { _EL_         if (resourceMappings.containsKey(key)) { _EL_           tempMappings.put(key,resourceMappings.get(key)); _EL_         } _EL_  else { _EL_           tempMappings.put(key,dataMappings.get(key)); _EL_         } _EL_       } _EL_       myMap.put(type,tempMappings); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void deselect(final int index,final boolean shouldFireEvents){ _EL_   checkWidget(); _EL_   if (index < 0 || index >= items.size()) { _EL_     return; _EL_   } _EL_   final DLItem item=selection.remove(index); _EL_   if (shouldFireEvents) { _EL_     fireSelectionEvent(item); _EL_   } _EL_   final List<DLItem> deselectedItems=new ArrayList<DLItem>(); _EL_   item.setLastAction(LAST_ACTION.DESELECTION); _EL_   deselectedItems.add(item); _EL_   if (shouldFireEvents) { _EL_     fireSelectionChangeEvent(deselectedItems); _EL_   } _EL_   redrawTables(); _EL_ } _EL_ ', 'public boolean isLeaf(Object nd){ _EL_   Node node=(Node)nd; _EL_   return !node.hasChildNodes(); _EL_ } _EL_ ', 'public SessionWrapper(Session ses){ _EL_   this.ses=ses; _EL_   this.time=System.currentTimeMillis(); _EL_ } _EL_ ', 'public static List<BatchResponse> postWithSingleRequest(final RequestSpecification requestSpec,final ResponseSpecification responseSpec,final BatchRequest br){ _EL_   final List<BatchRequest> batchRequests=new ArrayList<>(); _EL_   batchRequests.add(br); _EL_   final String jsonifiedRequest=BatchHelper.toJsonString(batchRequests); _EL_   final List<BatchResponse> response=BatchHelper.postBatchRequestsWithoutEnclosingTransaction(requestSpec,responseSpec,jsonifiedRequest); _EL_   Assert.assertNotNull(response); _EL_   Assert.assertTrue(response.size() > 0); _EL_   return response; _EL_ } _EL_ ', 'public File programDirectory(){ _EL_   return programDirectory; _EL_ } _EL_ ', 'public static KEYSTORE_TYPE fromString(String x) throws ConfigurationException { _EL_   for (  KEYSTORE_TYPE currentType : KEYSTORE_TYPE.values()) { _EL_     if (x.equalsIgnoreCase(currentType.toString()))     return currentType; _EL_   } _EL_   throw new ConfigurationException(MessageFormat.format("Cannot cast into a known CERTIFICATE_KEY_TYPE: {0}",x)); _EL_ } _EL_ ', 'public ObjectMapper nextLevel(ObjectMapper level){ _EL_   ObjectMapper previous=levelStack.peek(); _EL_   levelStack.push(level); _EL_   return previous; _EL_ } _EL_ ', 'protected static int toDigit(final char ch,final int index) throws HexDecodeException { _EL_   final int digit=Character.digit(ch,16); _EL_   if (digit == -1) { _EL_     throw new HexDecodeException("Illegal hexadecimal character " + ch + " at index "+ index); _EL_   } _EL_   return digit; _EL_ } _EL_ ', 'public static KeyStore load(File keyStoreFile,Password password) throws CryptoException, FileNotFoundException { _EL_   KeyStoreType keyStoreType=null; _EL_   try { _EL_     keyStoreType=CryptoFileUtil.detectKeyStoreType(new FileInputStream(keyStoreFile)); _EL_   } _EL_  catch (  FileNotFoundException ex) { _EL_     throw ex; _EL_   } _EL_ catch (  IOException ex) { _EL_     throw new CryptoException(res.getString("NoLoadKeyStore.exception.message"),ex); _EL_   } _EL_   if (keyStoreType == null) { _EL_     return null; _EL_   } _EL_   return load(keyStoreFile,password,keyStoreType); _EL_ } _EL_ ', '@VisibleForTesting static boolean isPrecachingEnabled(Context context){ _EL_   SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context); _EL_   return prefs.getBoolean(PREF_IS_PRECACHING_ENABLED,false); _EL_ } _EL_ ', 'public void and(LongBitSet other){ _EL_   int pos=Math.min(numWords,other.numWords); _EL_   while (--pos >= 0) { _EL_     bits[pos]&=other.bits[pos]; _EL_   } _EL_   if (numWords > other.numWords) { _EL_     Arrays.fill(bits,other.numWords,numWords,0L); _EL_   } _EL_ } _EL_ ', '@Override public boolean equals(Object obj){ _EL_   if (this == obj)   return true; _EL_   if (!(obj instanceof PrincipalEntry))   return false; _EL_   PrincipalEntry that=(PrincipalEntry)obj; _EL_   return (principalClass.equals(that.principalClass) && principalName.equals(that.principalName)); _EL_ } _EL_ ', 'public boolean isValidLockdownProfile(){ _EL_   try { _EL_     return true; _EL_   } _EL_  catch (  IllegalArgumentException e) { _EL_     Log.w(TAG,"Invalid address",e); _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public static boolean isExtension(String filename,String[] extensions){ _EL_   if (filename == null) { _EL_     return false; _EL_   } _EL_   if (extensions == null || extensions.length == 0) { _EL_     return indexOfExtension(filename) == -1; _EL_   } _EL_   String fileExt=getExtension(filename); _EL_   for (  String extension : extensions) { _EL_     if (fileExt.equals(extension)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static KdbDatabase createKdbDatabase(Credentials credentials,KdbHeader kdbHeader,InputStream inputStream) throws IOException { _EL_   DataInput dataInput=new LittleEndianDataInputStream(inputStream); _EL_   checkSignature(dataInput); _EL_   deserializeHeader(kdbHeader,dataInput); _EL_   InputStream decryptedInputStream=kdbHeader.createDecryptedInputStream(credentials.getKey(),inputStream); _EL_   MessageDigest digest=Encryption.getMessageDigestInstance(); _EL_   DigestInputStream digestInputStream=new DigestInputStream(decryptedInputStream,digest); _EL_   dataInput=new LittleEndianDataInputStream(digestInputStream); _EL_   KdbDatabase kdbDatabase=new KdbDatabase(); _EL_   KdbGroup lastGroup=(KdbGroup)kdbDatabase.getRootGroup(); _EL_   for (long group=0; group < kdbHeader.getGroupCount(); group++) { _EL_     lastGroup=deserializeGroup(lastGroup,dataInput); _EL_   } _EL_   for (long entry=0; entry < kdbHeader.getEntryCount(); entry++) { _EL_     deserializeEntry(kdbDatabase,dataInput); _EL_   } _EL_   if (!Arrays.equals(digest.digest(),kdbHeader.getContentHash())) { _EL_     throw new IllegalStateException("Hash values did not match"); _EL_   } _EL_   digestInputStream.close(); _EL_   return kdbDatabase; _EL_ } _EL_ ', 'private DiffPart decodeAdd(final int blockSize_S,final int blockSize_L) throws UnsupportedEncodingException, DecodingException { _EL_   if (blockSize_S < 1 || blockSize_L < 1) { _EL_     throw new DecodingException("Invalid value for blockSize_S: " + blockSize_S + " or blockSize_L: "+ blockSize_L); _EL_   } _EL_   int s=r.read(blockSize_S); _EL_   int l=r.read(blockSize_L); _EL_   ByteArrayOutputStream output=new ByteArrayOutputStream(); _EL_   for (int i=0; i < l; i++) { _EL_     output.write(r.readByte()); _EL_   } _EL_   DiffPart part=new DiffPart(DiffAction.INSERT); _EL_   part.setStart(s); _EL_   part.setText(output.toString(WIKIPEDIA_ENCODING)); _EL_   return part; _EL_ } _EL_ ', 'public void sort(){ _EL_   Arrays.sort(V,0,size()); _EL_ } _EL_ ', 'public void rebuildPanel(){ _EL_   if (activeWorker != null && !activeWorker.isDone()) { _EL_     activeWorker.cancel(true); _EL_   } _EL_   panelImages.removeAll(); _EL_   panelImages.revalidate(); _EL_   scrollPane.repaint(); _EL_   activeWorker=new ImageLoader(mediaFiles); _EL_   activeWorker.execute(); _EL_ } _EL_ ', 'public final void goToNextPage(){ _EL_   final boolean isLastPage=viewPager.getCurrentItem() == (pages.size() - 1); _EL_   if (!isLastPage) { _EL_     viewPager.setCurrentItem(viewPager.getCurrentItem() + 1,true); _EL_   } _EL_ } _EL_ ', 'private static InputStream nullInputStream() throws NullPointerException { _EL_   if (currentTimeMillis() > 0) { _EL_     return null; _EL_   } _EL_   throw new NullPointerException(); _EL_ } _EL_ ', 'public List<TypeId<?>> asList(){ _EL_   return Collections.unmodifiableList(Arrays.asList(types)); _EL_ } _EL_ ', 'private static void deleteRules(List<String> batchList,List<Rule> rulesToDelete){ _EL_   String deleteStatement="DELETE FROM " + RULES_TABLE + " WHERE RULE_INTERNAL_ID=%d"; _EL_   for (  Rule rule : rulesToDelete) { _EL_     batchList.add(String.format(deleteStatement,rule.getUid())); _EL_   } _EL_ } _EL_ ', 'public boolean isVisited(Object element){ _EL_   return myVisitedElements.containsKey(element); _EL_ } _EL_ ', 'public AwsIotConnection(AbstractAwsIotClient client){ _EL_   this.client=client; _EL_ } _EL_ ', 'protected void initForecastErrors(ArrayList<Float> model,TimeSeries.DataSequence data){ _EL_   double sumErr=0.0; _EL_   double sumAbsErr=0.0; _EL_   double sumAbsPercentErr=0.0; _EL_   double sumErrSquared=0.0; _EL_   int processedPoints=0; _EL_   int n=data.size(); _EL_   for (int i=0; i < n; i++) { _EL_     double error=model.get(i) - data.get(i).value; _EL_     sumErr+=error; _EL_     sumAbsErr+=Math.abs(error); _EL_     sumAbsPercentErr+=Math.abs(error / data.get(i).value); _EL_     sumErrSquared+=error * error; _EL_     processedPoints++; _EL_   } _EL_   this.bias=sumErr / processedPoints; _EL_   this.mad=sumAbsErr / processedPoints; _EL_   this.mape=sumAbsPercentErr / processedPoints; _EL_   this.mse=sumErrSquared / processedPoints; _EL_   this.sae=sumAbsErr; _EL_   errorsInit=true; _EL_ } _EL_ ', 'public boolean checkModifiers(MouseEvent e){ _EL_   return e.getModifiers() == modifiers; _EL_ } _EL_ ', 'public URI(String scheme,String authority,String path,String query,String fragment) throws URISyntaxException { _EL_   if (scheme != null && path != null && !path.isEmpty() && path.charAt(0) != \'/\') { _EL_     throw new URISyntaxException(path,"Relative path"); _EL_   } _EL_   StringBuilder uri=new StringBuilder(); _EL_   if (scheme != null) { _EL_     uri.append(scheme); _EL_     uri.append(\':\'); _EL_   } _EL_   if (authority != null) { _EL_     uri.append("//"); _EL_     AUTHORITY_ENCODER.appendEncoded(uri,authority); _EL_   } _EL_   if (path != null) { _EL_     PATH_ENCODER.appendEncoded(uri,path); _EL_   } _EL_   if (query != null) { _EL_     uri.append(\'?\'); _EL_     ALL_LEGAL_ENCODER.appendEncoded(uri,query); _EL_   } _EL_   if (fragment != null) { _EL_     uri.append(\'#\'); _EL_     ALL_LEGAL_ENCODER.appendEncoded(uri,fragment); _EL_   } _EL_   parseURI(uri.toString(),false); _EL_ } _EL_ ', 'public List<StructuredTranslation> KbestExtractOnHG(HyperGraph hg,int topN){ _EL_   resetState(); _EL_   if (hg == null || hg.goalNode == null) { _EL_     return emptyList(); _EL_   } _EL_   final List<StructuredTranslation> kbest=new ArrayList<>(topN); _EL_   for (int k=1; k <= topN; k++) { _EL_     StructuredTranslation translation=getKthStructuredTranslation(hg.goalNode,k); _EL_     if (translation == null) { _EL_       break; _EL_     } _EL_     kbest.add(translation); _EL_   } _EL_   return kbest; _EL_ } _EL_ ', 'public static boolean isSnapshotFullCopySupported(URI blockSnapURI,DbClient dbClient){ _EL_   BlockSnapshot blockObj=dbClient.queryObject(BlockSnapshot.class,blockSnapURI); _EL_   StorageSystem storage=dbClient.queryObject(StorageSystem.class,blockObj.getStorageController()); _EL_   return (storage != null && (storage.deviceIsType(Type.openstack) || storage.deviceIsType(Type.vnxblock) || storage.deviceIsType(Type.ibmxiv)|| storage.deviceIsType(Type.vmax))); _EL_ } _EL_ ', 'public Iterable<ServiceDescriptor> listServices(){ _EL_   ArrayList<ServiceDescriptor> serviceDescriptors=new ArrayList<ServiceDescriptor>(); _EL_   for (  FileDescriptor fileDescriptor : fileDescriptors) { _EL_     serviceDescriptors.addAll(fileDescriptor.getServices()); _EL_   } _EL_   return serviceDescriptors; _EL_ } _EL_ ', 'public int size(){ _EL_   return seq.size(); _EL_ } _EL_ ', 'public MultiTermQuery(final String field){ _EL_   this.field=Objects.requireNonNull(field,"field must not be null"); _EL_ } _EL_ ', 'public static void printLine(Object message){ _EL_   if (!isDisabled()) { _EL_     printLine(String.valueOf(message)); _EL_   } _EL_ } _EL_ ', 'public void accumulate(TaggedLogAPIEntity entity) throws Exception { _EL_   AggregateAPIEntity current=root; _EL_   for (  String groupby : groupbys) { _EL_     String tagv=locateGroupbyField(groupby,entity); _EL_     if (tagv == null || tagv.isEmpty()) { _EL_       tagv=UNASSIGNED_GROUPBY_ROOT_FIELD_NAME; _EL_     } _EL_     Map<String,AggregateAPIEntity> children=current.getEntityList(); _EL_     if (children.get(tagv) == null) { _EL_       children.put(tagv,factory.create()); _EL_       current.setNumDirectDescendants(current.getNumDirectDescendants() + 1); _EL_     } _EL_     AggregateAPIEntity child=children.get(tagv); _EL_     if (counting)     count(child); _EL_     for (    String sumFunctionField : sumFunctionFields) { _EL_       sum(child,entity,sumFunctionField); _EL_     } _EL_     current=child; _EL_   } _EL_ } _EL_ ', 'public static boolean isAccessorPair(TMember member,TMember member2){ _EL_   return (member instanceof TGetter && member2 instanceof TSetter) || (member instanceof TSetter && member2 instanceof TGetter); _EL_ } _EL_ ', 'public void writeLinkedKml(final String filename,final KmlType kml){ _EL_   if (filename.equals("doc.kml")) { _EL_     throw new IllegalArgumentException("The filename \'doc.kml\' is reserved for the primary kml."); _EL_   } _EL_   if (filename.equals("main.kml")) { _EL_     throw new IllegalArgumentException("The filename \'main.kml\' is reserved for the main kml."); _EL_   } _EL_   writeKml(filename,kml); _EL_ } _EL_ ', 'String destinationFilePath(){ _EL_   return destinationFilePath; _EL_ } _EL_ ', 'public BootPanel(){ _EL_   initComponents(); _EL_ } _EL_ ', 'private List<Header> defaultHeaders(){ _EL_   DateFormat dateFormat=new SimpleDateFormat("EEE, dd mmm yyyy HH:mm:ss zzz"); _EL_   List<Header> headers=new ArrayList<>(); _EL_   headers.add(new BasicHeader("Date",dateFormat.format(new Date()))); _EL_   return headers; _EL_ } _EL_ ', '@Override public void parse(InputStream in,String baseURI) throws IOException, RDFParseException, RDFHandlerException { _EL_   if (in == null) { _EL_     throw new IllegalArgumentException("Input stream cannot be \'null\'"); _EL_   } _EL_   if (baseURI == null) { _EL_     throw new IllegalArgumentException("Base URI cannot be \'null\'"); _EL_   } _EL_   InputSource inputSource=new InputSource(new BOMInputStream(in,false)); _EL_   inputSource.setSystemId(baseURI); _EL_   parse(inputSource); _EL_ } _EL_ ', 'public static Date parseDate(String dateValue,Collection dateFormats) throws DateParseException { _EL_   if (dateValue == null) { _EL_     throw new IllegalArgumentException("dateValue is null"); _EL_   } _EL_   if (dateFormats == null) { _EL_     dateFormats=DEFAULT_PATTERNS; _EL_   } _EL_   if (dateValue.length() > 1 && dateValue.startsWith("\'") && dateValue.endsWith("\'")) { _EL_     dateValue=dateValue.substring(1,dateValue.length() - 1); _EL_   } _EL_   SimpleDateFormat dateParser=null; _EL_   final Iterator formatIter=dateFormats.iterator(); _EL_   while (formatIter.hasNext()) { _EL_     final String format=(String)formatIter.next(); _EL_     if (dateParser == null) { _EL_       dateParser=new SimpleDateFormat(format,Locale.US); _EL_       dateParser.setTimeZone(TimeZone.getTimeZone("GMT")); _EL_     } _EL_  else { _EL_       dateParser.applyPattern(format); _EL_     } _EL_     try { _EL_       return dateParser.parse(dateValue); _EL_     } _EL_  catch (    final ParseException pe) { _EL_     } _EL_   } _EL_   throw new DateParseException("Unable to parse the date " + dateValue); _EL_ } _EL_ ', 'public JSONObject remove(String name){ _EL_   if (name == null) { _EL_     throw new NullPointerException("name is null"); _EL_   } _EL_   int index=indexOf(name); _EL_   if (index != -1) { _EL_     table.remove(index); _EL_     names.remove(index); _EL_     values.remove(index); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'EdgeMap<Block> findLoops(Deque<Block> code,Map<Block,Block> idom,SetMap<Block,Edge> pred){ _EL_   EdgeMap<Block> loops=new EdgeMap<Block>(); _EL_   for (  Block b : code)   for (  Edge s : b.succ())   if (isLoop(s,idom)) { _EL_     verboseStatus("backedge " + s); _EL_     Block h=s.to; _EL_     Set<Block> loop=loops.get(h); _EL_     Set<Block> work=new TreeSet<Block>(); _EL_     for (    Edge p : pred.get(h)) { _EL_       if (isLoop(p,idom) && !loop.contains(p.from) && p.from != h) { _EL_         loop.add(p.from); _EL_         work.add(p.from); _EL_       } _EL_     } _EL_     while (!work.isEmpty()) { _EL_       Block x=getBlock(work); _EL_       for (      Edge p : pred.get(x)) { _EL_         if (p.from != h && !loop.contains(p.from)) { _EL_           loop.add(p.from); _EL_           work.add(p.from); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return loops; _EL_ } _EL_ ', 'public int[] readLine(){ _EL_   int record[]=new int[MAX_LEN]; _EL_   int checksum=0; _EL_   try { _EL_     while (((charIn=buffIn.read()) == 0xd) || (charIn == 0xa)) { _EL_     } _EL_     if (charIn != \':\') { _EL_       if (log.isDebugEnabled()) { _EL_         log.debug("HexFile.readLine no colon at start of line " + lineNo); _EL_       } _EL_       return new int[]{-1}; _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     JOptionPane.showMessageDialog(this,"I/O Error reading hex file!","Hex File",JOptionPane.ERROR_MESSAGE); _EL_     if (log.isDebugEnabled()) { _EL_       log.debug("I/O Error reading hex file!" + e.toString()); _EL_     } _EL_   } _EL_   record[LEN]=rdHexByte(); _EL_   checksum+=record[LEN]; _EL_   record[ADDRH]=rdHexByte(); _EL_   checksum+=record[ADDRH]; _EL_   record[ADDRL]=rdHexByte(); _EL_   checksum+=record[ADDRL]; _EL_   record[TYPE]=rdHexByte(); _EL_   checksum+=record[TYPE]; _EL_   address=(address & 0xffff0000) + record[ADDRH] * 256 + record[ADDRL]; _EL_   type=record[TYPE]; _EL_   if (type != END) { _EL_     len=record[LEN]; _EL_     for (int i=1; i <= len; i++) { _EL_       record[TYPE + i]=rdHexByte(); _EL_       checksum+=record[TYPE + i]; _EL_     } _EL_   } _EL_   int fileCheck=rdHexByte(); _EL_   if (((checksum + fileCheck) & 0xff) != 0) { _EL_     log.error("HexFile.readLine bad checksum at line " + lineNo); _EL_   } _EL_   lineNo++; _EL_   return record; _EL_ } _EL_ ', 'public void renameEditorPanel(Editor panel){ _EL_   if (panelsList.size() == 0) { _EL_     return; _EL_   } _EL_   for (int i=0; i < panelsList.size(); i++) { _EL_     Object o=panelsList.get(i); _EL_     if (o == panel) { _EL_       JCheckBoxMenuItem r=(JCheckBoxMenuItem)panelsSubMenu.getItem(i); _EL_       r.setText(panel.getTitle()); _EL_       return; _EL_     } _EL_   } _EL_ } _EL_ ', 'private boolean fitsAsSingleLine(int col){ _EL_   return (col + singleLineWidth() <= PcalTLAGen.wrapColumn) || (bodyFormulas.sf == null && (prcdFormulas == null || prcdFormulas.size() == 0)); _EL_ } _EL_ ', '@Override protected void before() throws Throwable { _EL_   previousThreads=Thread.getAllStackTraces(); _EL_ } _EL_ ', 'public void sphericalToWorld(Vector3 vec){ _EL_   if (pjUnprojected == null) { _EL_     String projStr="+proj=longlat +a=" + projInfo.getSemiMajorAxis() + " +b="+ projInfo.getSemiMinorAxis()+ " +no_defs"; _EL_     pjUnprojected=Proj4.newInstance(projStr); _EL_   } _EL_   if (pjProjected == null) { _EL_     pjProjected=Proj4.newInstance(proj4String); _EL_   } _EL_   try { _EL_     vec.toArray(coord); _EL_     coord[0]=Math.toRadians(coord[0]); _EL_     coord[1]=Math.toRadians(coord[1]); _EL_     pjUnprojected.transform(pjProjected,coord); _EL_     vec.setX(coord[0]); _EL_     vec.setY(coord[1]); _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'public static String encodeUrl(final String str){ _EL_   return encode(str,"%20"); _EL_ } _EL_ ', 'public void drawRenderedImage(RenderedImage img,AffineTransform xform){ _EL_   if (img == null) { _EL_     return; _EL_   } _EL_   mPrintMetrics.drawImage(this,img); _EL_   mDrawingArea.addInfinite(); _EL_ } _EL_ ', 'private long buildSize(int durationInSeconds,LinkInfo linfo){ _EL_   long result=-1; _EL_   double bitRateSum=0; _EL_ switch (linfo.fmt) { _EL_ case 5: _EL_     bitRateSum=0.25 + 64d / 1024d; _EL_   break; _EL_ case 6: _EL_ bitRateSum=0.8 + 64d / 1024d; _EL_ break; _EL_ case 17: _EL_ bitRateSum=0.05 + 24d / 1024d; _EL_ break; _EL_ case 18: _EL_ bitRateSum=0.5 + 96d / 1024d; _EL_ break; _EL_ case 22: _EL_ bitRateSum=2.9 + 192d / 1024d; _EL_ break; _EL_ case 34: _EL_ bitRateSum=0.5 + 128d / 1024d; _EL_ break; _EL_ case 35: _EL_ bitRateSum=1 + 128d / 1024d; _EL_ break; _EL_ case 36: _EL_ bitRateSum=0.17 + 38d / 1024d; _EL_ break; _EL_ case 37: _EL_ bitRateSum=5.9 + 192d / 1024d; _EL_ break; _EL_ case 38: _EL_ bitRateSum=5 + 192d / 1024d; _EL_ break; _EL_ case 43: _EL_ bitRateSum=0.5 + 128d / 1024d; _EL_ break; _EL_ case 44: _EL_ bitRateSum=1 + 128d / 1024d; _EL_ break; _EL_ case 45: _EL_ bitRateSum=2 + 192d / 1024d; _EL_ break; _EL_ case 46: _EL_ bitRateSum=3 + 192d / 1024d; _EL_ break; _EL_ case 82: _EL_ bitRateSum=0.5 + 96d / 1024d; _EL_ break; _EL_ case 83: _EL_ bitRateSum=0.5 + 96d / 1024d; _EL_ break; _EL_ case 84: _EL_ bitRateSum=2.9 + 152d / 1024d; _EL_ break; _EL_ case 85: _EL_ bitRateSum=2.9 + 152d / 1024d; _EL_ break; _EL_ case 100: _EL_ bitRateSum=0.5 + 128d / 1024d; _EL_ break; _EL_ case 101: _EL_ bitRateSum=1 + 192d / 1024d; _EL_ break; _EL_ case 102: _EL_ bitRateSum=2 + 192d / 1024d; _EL_ break; _EL_ case 133: _EL_ bitRateSum=0.3 + 256d / 1024d; _EL_ break; _EL_ case 134: _EL_ bitRateSum=0.4 + 256d / 1024d; _EL_ break; _EL_ case 135: _EL_ bitRateSum=1 + 256d / 1024d; _EL_ break; _EL_ case 136: _EL_ bitRateSum=1.5 + 256d / 1024d; _EL_ break; _EL_ case 137: _EL_ bitRateSum=2.9 + 256d / 1024d; _EL_ break; _EL_ case 139: _EL_ bitRateSum=48d / 1024d; _EL_ break; _EL_ case 140: _EL_ bitRateSum=128d / 1024d; _EL_ break; _EL_ case 141: _EL_ bitRateSum=256d / 1024d; _EL_ break; _EL_ } _EL_ bitRateSum=bitRateSum * 1024 * 1024; _EL_ result=(long)(Math.ceil((bitRateSum * durationInSeconds) / 8)); _EL_ return result; _EL_ } _EL_ ', "private void skipToEndOfLine(){ _EL_   for (; pos < in.length(); pos++) { _EL_     char c=in.charAt(pos); _EL_     if (c == '\\r' || c == '\\n') { _EL_       pos++; _EL_       break; _EL_     } _EL_   } _EL_ } _EL_ ", '@Override public void actOn(File f){ _EL_   BufferedReader reader=null; _EL_   try { _EL_     reader=new BufferedReader(new FileReader(f)); _EL_     announceSeedsFromReader(reader); _EL_   } _EL_  catch (  FileNotFoundException fnf) { _EL_     logger.log(Level.SEVERE,"seed file source not found",fnf); _EL_   } _EL_  finally { _EL_     IOUtils.closeQuietly(reader); _EL_   } _EL_ } _EL_ ', 'public static String formatMillis(int millis){ _EL_   String result=""; _EL_   int hr=millis / 3600000; _EL_   millis%=3600000; _EL_   int min=millis / 60000; _EL_   millis%=60000; _EL_   int sec=millis / 1000; _EL_   if (hr > 0) { _EL_     result+=hr + ":"; _EL_   } _EL_   if (min >= 0) { _EL_     if (min > 9) { _EL_       result+=min + ":"; _EL_     } _EL_  else { _EL_       result+="0" + min + ":"; _EL_     } _EL_   } _EL_   if (sec > 9) { _EL_     result+=sec; _EL_   } _EL_  else { _EL_     result+="0" + sec; _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){ _EL_   propertyChangeSupport.addPropertyChangeListener(propertyName,listener); _EL_ } _EL_ ', 'public File createNewFolder(File containingDir) throws IOException { _EL_   if (containingDir == null) { _EL_     throw new IOException("Containing directory is null:"); _EL_   } _EL_   File newFolder=createFileObject(containingDir,newFolderString); _EL_   int i=2; _EL_   while (newFolder.exists() && i < 100) { _EL_     newFolder=createFileObject(containingDir,MessageFormat.format(newFolderNextString,new Integer(i))); _EL_     i++; _EL_   } _EL_   if (newFolder.exists()) { _EL_     throw new IOException("Directory already exists:" + newFolder.getAbsolutePath()); _EL_   } _EL_  else { _EL_     newFolder.mkdirs(); _EL_   } _EL_   return newFolder; _EL_ } _EL_ ', 'public ResourcesPoet addTypedArray(String name,@NotNull List<String> values){ _EL_   Element element=document.createElement("array"); _EL_   element.setAttribute("name",name); _EL_   for (  String value : values) { _EL_     Element valueElement=document.createElement("item"); _EL_     valueElement.appendChild(document.createTextNode(value)); _EL_     element.appendChild(valueElement); _EL_   } _EL_   resourceElement.appendChild(element); _EL_   return this; _EL_ } _EL_ ', 'void fillEntryTree(Set<PageLeafEntry> entries,Row row){ _EL_   int ptr=_rowHead; _EL_   byte[] buffer=_buffer; _EL_   while (ptr < BLOCK_SIZE) { _EL_     int code=buffer[ptr] & CODE_MASK; _EL_     int len=getLength(code,row); _EL_     if (code == INSERT || code == REMOVE) { _EL_       PageLeafEntry entry=new PageLeafEntry(this,row,ptr,len,code); _EL_       entries.add(entry); _EL_     } _EL_     ptr+=len; _EL_   } _EL_ } _EL_ ', 'public static <S>boolean containsAtleastOne(Collection<S> left,Collection<S> right){ _EL_   if (left == null || right == null) { _EL_     return false; _EL_   } _EL_   for (  S id : left) { _EL_     if (right.contains(id)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void assertDurationIsInRange(long expectedMillis){ _EL_   long minimum=(long)((double)expectedMillis * 0.90); _EL_   long maximum=Math.max((long)((double)expectedMillis * 1.10),10); _EL_   long waitMillis=Math.max(expectedMillis * 10,10); _EL_   long duration=getDurationMillis(waitMillis); _EL_   if (duration < minimum) { _EL_     Assert.fail("expected duration: " + expectedMillis + " minimum duration: "+ minimum+ " actual duration too short: "+ duration); _EL_   } _EL_  else   if (duration > maximum) { _EL_     Assert.fail("expected duration: " + expectedMillis + " maximum duration: "+ maximum+ " actual duration too long: "+ duration); _EL_   } _EL_ } _EL_ ', 'public FieldFrameBodyIMG(Lyrics3Image image){ _EL_   images.add(image); _EL_ } _EL_ ', 'public AbstractResource(String mimetype){ _EL_   this(mimetype,System.currentTimeMillis()); _EL_ } _EL_ ', 'private Parameters(){ _EL_   for (Iterator i=arguments.iterator(); i.hasNext(); ) { _EL_     String arg=(String)i.next(); _EL_     arg=arg.toLowerCase(); _EL_     if (!arg.startsWith("-"))     throw new IllegalArgumentException("Command-line argument does not start with \'-\': " + arg); _EL_     int colonIndex=arg.indexOf(":"); _EL_     String key; _EL_     String value; _EL_     if (colonIndex >= 0) { _EL_       key=arg.substring(1,colonIndex); _EL_       value=arg.substring(colonIndex + 1); _EL_     } _EL_  else { _EL_       key=arg.substring(1); _EL_       value=""; _EL_     } _EL_     if (!allowedKeys.contains(key))     throw new IllegalArgumentException("Unrecognized command-line argument: " + arg.substring(1) + ". Valid arguments are: "+ StringUtil.toCommaDelimitedString(allowedKeys)); _EL_     hashtable.put(key,value); _EL_   } _EL_   for (Iterator i=requiredKeys.iterator(); i.hasNext(); ) { _EL_     String requiredKey=(String)i.next(); _EL_     if (!hashtable.containsKey(requiredKey))     throw new IllegalArgumentException("Required command-line argument is missing: " + requiredKey); _EL_   } _EL_ } _EL_ ', 'public List<TLV> initRespondSmp(String question,String secret,boolean initiating) throws OtrException { _EL_   if (question != null && !initiating)   throw new IllegalArgumentException("Only supply a question if initiating"); _EL_   byte[] our_fp=Hex.decode(keyManager.getLocalFingerprint(sessionID)); _EL_   String remoteFingerprint=keyManager.getRemoteFingerprint(sessionID); _EL_   if (remoteFingerprint == null)   throw new OtrException("no fingerprint for remote user"); _EL_   byte[] their_fp=Hex.decode(remoteFingerprint); _EL_   byte[] sessionId; _EL_   try { _EL_     sessionId=computeSessionId(session.getS()); _EL_   } _EL_  catch (  SMException ex) { _EL_     throw new OtrException(ex); _EL_   } _EL_   byte[] bytes=secret.getBytes(SerializationUtils.UTF8); _EL_   int combined_buf_len=41 + sessionId.length + bytes.length; _EL_   byte[] combined_buf=new byte[combined_buf_len]; _EL_   combined_buf[0]=1; _EL_   if (initiating) { _EL_     System.arraycopy(our_fp,0,combined_buf,1,20); _EL_     System.arraycopy(their_fp,0,combined_buf,21,20); _EL_   } _EL_  else { _EL_     System.arraycopy(their_fp,0,combined_buf,1,20); _EL_     System.arraycopy(our_fp,0,combined_buf,21,20); _EL_   } _EL_   System.arraycopy(sessionId,0,combined_buf,41,sessionId.length); _EL_   System.arraycopy(bytes,0,combined_buf,41 + sessionId.length,bytes.length); _EL_   MessageDigest sha256; _EL_   try { _EL_     sha256=MessageDigest.getInstance("SHA-256"); _EL_   } _EL_  catch (  NoSuchAlgorithmException ex) { _EL_     throw new OtrException(ex); _EL_   } _EL_   byte[] combined_secret=sha256.digest(combined_buf); _EL_   byte[] smpmsg; _EL_   try { _EL_     if (initiating) { _EL_       smpmsg=SM.step1(smstate,combined_secret); _EL_     } _EL_  else { _EL_       smpmsg=SM.step2b(smstate,combined_secret); _EL_     } _EL_   } _EL_  catch (  SMException ex) { _EL_     throw new OtrException(ex); _EL_   } _EL_   if (question != null) { _EL_     bytes=question.getBytes(SerializationUtils.UTF8); _EL_     byte[] qsmpmsg=new byte[bytes.length + 1 + smpmsg.length]; _EL_     System.arraycopy(bytes,0,qsmpmsg,0,bytes.length); _EL_     System.arraycopy(smpmsg,0,qsmpmsg,bytes.length + 1,smpmsg.length); _EL_     smpmsg=qsmpmsg; _EL_   } _EL_   TLV sendtlv=new TLV(initiating ? (question != null ? TLV.SMP1Q : TLV.SMP1) : TLV.SMP2,smpmsg); _EL_   smstate.nextExpected=initiating ? SM.EXPECT2 : SM.EXPECT3; _EL_   return makeTlvList(sendtlv); _EL_ } _EL_ ', 'private double melToLinFreq(double inputFreq){ _EL_   return (700.0 * (Math.pow(10.0,(inputFreq / 2595.0)) - 1.0)); _EL_ } _EL_ ', 'public static byte[] randomBytes(int size){ _EL_   byte[] bytes=new byte[size]; _EL_   seededRandom.nextBytes(bytes); _EL_   return bytes; _EL_ } _EL_ ', 'protected void arraycopy(byte[] buf,int pos,int length){ _EL_   mMessage.write(buf,pos,length); _EL_   mPosition=mPosition + length; _EL_ } _EL_ ', 'public boolean expired(){ _EL_   return System.currentTimeMillis() - time > DFLT_EXPIRATION_TIMEOUT; _EL_ } _EL_ ', 'public JSONObject put(String key,boolean value) throws JSONException { _EL_   put(key,value ? Boolean.TRUE : Boolean.FALSE); _EL_   return this; _EL_ } _EL_ ', 'private void handleSelection(View view,Item item,int position){ _EL_   if (!item.isSelectable()) { _EL_     return; _EL_   } _EL_   if (item.isSelected() && !mAllowDeselection) { _EL_     return; _EL_   } _EL_   boolean selected=false; _EL_   if (mPositionBasedStateManagement) { _EL_     selected=mSelections.contains(position); _EL_   } _EL_  else { _EL_     selected=item.isSelected(); _EL_   } _EL_   if (mSelectWithItemUpdate || view == null) { _EL_     if (!mMultiSelect) { _EL_       deselect(); _EL_     } _EL_     if (selected) { _EL_       deselect(position); _EL_     } _EL_  else { _EL_       select(position); _EL_     } _EL_   } _EL_  else { _EL_     if (!mMultiSelect) { _EL_       if (mPositionBasedStateManagement) { _EL_         Iterator<Integer> entries=mSelections.iterator(); _EL_         while (entries.hasNext()) { _EL_           Integer pos=entries.next(); _EL_           if (pos != position) { _EL_             deselect(pos,entries); _EL_           } _EL_         } _EL_       } _EL_  else { _EL_         Set<Integer> selections=getSelections(); _EL_         for (        int pos : selections) { _EL_           if (pos != position) { _EL_             deselect(pos); _EL_           } _EL_         } _EL_       } _EL_     } _EL_     item.withSetSelected(!selected); _EL_     view.setSelected(!selected); _EL_     if (mSelectionListener != null)     mSelectionListener.onSelectionChanged(item,!selected); _EL_     if (mPositionBasedStateManagement) { _EL_       if (selected) { _EL_         if (mSelections.contains(position)) { _EL_           mSelections.remove(position); _EL_         } _EL_       } _EL_  else { _EL_         mSelections.add(position); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean writeHeader(OutputStream os){ _EL_   try { _EL_     writeInt(os,CACHE_MAGIC); _EL_     writeString(os,key); _EL_     writeString(os,etag == null ? "" : etag); _EL_     writeLong(os,serverDate); _EL_     writeLong(os,lastModified); _EL_     writeLong(os,ttl); _EL_     writeLong(os,softTtl); _EL_     writeStringStringMap(responseHeaders,os); _EL_     os.flush(); _EL_     return true; _EL_   } _EL_  catch (  IOException e) { _EL_     VolleyLog.d("%s",e.toString()); _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public byte[] bytes() throws HttpRequestException { _EL_   final ByteArrayOutputStream output=byteStream(); _EL_   try { _EL_     copy(buffer(),output); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new HttpRequestException(e); _EL_   } _EL_   return output.toByteArray(); _EL_ } _EL_ ', 'public void fadeOutAllLayers(){ _EL_   mTransitionState=TRANSITION_STARTING; _EL_   Arrays.fill(mIsLayerOn,false); _EL_   invalidateSelf(); _EL_ } _EL_ ', '@Override public Iterator<Profile> iterator(){ _EL_   return profiles.iterator(); _EL_ } _EL_ ', "private boolean startsWithSpace(String str){ _EL_   return str.length() != 0 && str.charAt(0) == ' '; _EL_ } _EL_ ", 'public String wrap(String path){ _EL_   return uriPrefix + path; _EL_ } _EL_ ', 'public boolean mouseDragged(MouseEvent e){ _EL_   if (grabbed_plot_graphics_) { _EL_     int x=e.getX(); _EL_     int y=e.getY(); _EL_     int dx=x - prevX; _EL_     int dy=y - prevY; _EL_     plotX+=dx; _EL_     plotY+=dy; _EL_     prevX=x; _EL_     prevY=y; _EL_     graph.resize(plotX,plotY,plotWidth,plotHeight); _EL_     OMGraphicList plotGraphics=graph.getPlotGraphics(); _EL_     plotGraphics.generate(getProjection(),true); _EL_     repaint(); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private void initCachingHttpHeadersFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){ _EL_   log.debug("Registering Caching HTTP Headers Filter"); _EL_   FilterRegistration.Dynamic cachingHttpHeadersFilter=servletContext.addFilter("cachingHttpHeadersFilter",new CachingHttpHeadersFilter(jHipsterProperties)); _EL_   cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/content/*"); _EL_   cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/app/*"); _EL_   cachingHttpHeadersFilter.setAsyncSupported(true); _EL_ } _EL_ ', 'protected void addCommonComponent(XMLComponent component){ _EL_   if (fCommonComponents.contains(component)) { _EL_     return; _EL_   } _EL_   fCommonComponents.add(component); _EL_   addRecognizedParamsAndSetDefaults(component); _EL_ } _EL_ ', 'public void load(GeneralSubtrees generalSubtrees){ _EL_   List<GeneralSubtree> generalSubtreesList=generalSubtrees.getGeneralSubtrees(); _EL_   Collections.sort(generalSubtreesList,new GeneralSubtreeBaseComparator()); _EL_   data=new Object[generalSubtreesList.size()][3]; _EL_   int i=0; _EL_   for (  GeneralSubtree generalSubtree : generalSubtreesList) { _EL_     data[i][0]=generalSubtree; _EL_     data[i][1]=generalSubtree; _EL_     data[i][2]=generalSubtree; _EL_     i++; _EL_   } _EL_   fireTableDataChanged(); _EL_ } _EL_ ', '@Override public synchronized int read(){ _EL_   return pos < count ? buffer.charAt(pos++) & 0xFF : -1; _EL_ } _EL_ ', 'public boolean isPingDisabled(){ _EL_   return (null != healthcheck && !healthcheck.exists()); _EL_ } _EL_ ', 'public static void writeToFile(File file,String contents) throws IOException { _EL_   FileOutputStream fos=new FileOutputStream(file); _EL_   fos.write(contents.getBytes()); _EL_   fos.close(); _EL_ } _EL_ ', 'public void makeTreeOfWritables(Iterable<Pair<String,Integer>> flatData){ _EL_   Text key=new Text(); _EL_   for (  Pair<String,Integer> pair : flatData) { _EL_     key.set(pair.key); _EL_     ArrayList<IntWritable> valList; _EL_     if (!mockInput.containsKey(key)) { _EL_       valList=new ArrayList<>(); _EL_       mockInput.put(key,valList); _EL_       key=new Text(); _EL_     } _EL_  else     valList=(ArrayList<IntWritable>)mockInput.get(key); _EL_     valList.add(new IntWritable(pair.value())); _EL_   } _EL_ } _EL_ ', 'public static double angle(Coordinate p0,Coordinate p1){ _EL_   double dx=p1.x - p0.x; _EL_   double dy=p1.y - p0.y; _EL_   return Math.atan2(dy,dx); _EL_ } _EL_ ', 'public InMemoryCursor(String[] columnNames){ _EL_   mCurrentPosition=-1; _EL_   mColumnNames=columnNames; _EL_ } _EL_ ', '@Override public boolean isEnabled(){ _EL_   if ((attributeSelectionPanel != null) && !isValueOnly()) { _EL_     return attributeSelectionPanel.isEnabled(); _EL_   } _EL_  else { _EL_     if (slider != null) { _EL_       return slider.isEnabled(); _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private void renderForeground(final ExecutionUnit process,final Graphics2D g2,boolean printing){ _EL_   if (drawHighlight && !printing && (model.isDragStarted() || model.isDropTargetSet() && model.isImportDragged()) || model.isOperatorSourceHovered()) { _EL_ switch (RapidMinerGUI.getDragHighlighteMode()) { _EL_ case FULL: _EL_ case BORDER: _EL_       drawDragBorder(process,g2); _EL_     break; _EL_ case NONE: _EL_ default : _EL_   break; _EL_ } _EL_ } _EL_ } _EL_ ', 'public ModbusTransaction createTransaction(){ _EL_   ModbusSerialTransaction transaction=new ModbusSerialTransaction(); _EL_   transaction.setTransport(this); _EL_   return transaction; _EL_ } _EL_ ', 'public void start(){ _EL_   if (runner == null) { _EL_     runner=new Thread(this,"Runner"); _EL_     runner.start(); _EL_   } _EL_ } _EL_ ', 'public synchronized int exportObject(String name,Object obj) throws CannotCompileException { _EL_   Class clazz=obj.getClass(); _EL_   ExportedObject eo=new ExportedObject(); _EL_   eo.object=obj; _EL_   eo.methods=clazz.getMethods(); _EL_   exportedObjects.addElement(eo); _EL_   eo.identifier=exportedObjects.size() - 1; _EL_   if (name != null)   exportedNames.put(name,eo); _EL_   try { _EL_     stubGen.makeProxyClass(clazz); _EL_   } _EL_  catch (  NotFoundException e) { _EL_     throw new CannotCompileException(e); _EL_   } _EL_   return eo.identifier; _EL_ } _EL_ ', 'protected final File createDBFFDCDirectory(){ _EL_   File dbffdcDir=new File(ffdcDirectoryName); _EL_   if (!dbffdcDir.exists()) { _EL_     final boolean isDBFFDcDirCreated=dbffdcDir.mkdirs(); _EL_     if (isDBFFDcDirCreated) { _EL_       dbffdcDir=new File(ffdcDirectoryName); _EL_       return dbffdcDir; _EL_     } _EL_   } _EL_  else   if (!dbffdcDir.isDirectory()) { _EL_     return null; _EL_   } _EL_   return dbffdcDir; _EL_ } _EL_ ', 'public static String readCharacterSizedString(InputStream stream) throws IOException { _EL_   StringBuilder result=new StringBuilder(); _EL_   int strLen=readUINT16(stream); _EL_   int character=stream.read(); _EL_   character|=stream.read() << 8; _EL_   do { _EL_     if (character != 0) { _EL_       result.append((char)character); _EL_       character=stream.read(); _EL_       character|=stream.read() << 8; _EL_     } _EL_   } _EL_  while (character != 0 || (result.length() + 1) > strLen); _EL_   if (strLen != (result.length() + 1)) { _EL_     throw new IllegalStateException("Invalid Data for current interpretation"); _EL_   } _EL_   return result.toString(); _EL_ } _EL_ ', 'protected void processChildren(QueryNode queryTree) throws QueryNodeException { _EL_   List<QueryNode> children=queryTree.getChildren(); _EL_   ChildrenList newChildren; _EL_   if (children != null && children.size() > 0) { _EL_     newChildren=allocateChildrenList(); _EL_     try { _EL_       for (      QueryNode child : children) { _EL_         child=processIteration(child); _EL_         if (child == null) { _EL_           throw new NullPointerException(); _EL_         } _EL_         newChildren.add(child); _EL_       } _EL_       List<QueryNode> orderedChildrenList=setChildrenOrder(newChildren); _EL_       queryTree.set(orderedChildrenList); _EL_     } _EL_   finally { _EL_       newChildren.beingUsed=false; _EL_     } _EL_   } _EL_ } _EL_ ', 'private void initializeMessages(List<String> messages){ _EL_   messages.addAll(Arrays.asList(TipOfTheDayMessages.getGeneralMessages())); _EL_   if (OSUtils.isWindows()) { _EL_     messages.addAll(Arrays.asList(TipOfTheDayMessages.getWindowsMessages())); _EL_   } _EL_  else   if (OSUtils.isMacOSX()) { _EL_     messages.addAll(Arrays.asList(TipOfTheDayMessages.getMacOSXMessages())); _EL_   } _EL_  else   if (OSUtils.isLinux()) { _EL_     messages.addAll(Arrays.asList(TipOfTheDayMessages.getLinuxMessages())); _EL_   } _EL_  else { _EL_     messages.addAll(Arrays.asList(TipOfTheDayMessages.getOtherMessages())); _EL_   } _EL_   if (!OSUtils.isMacOSX()) { _EL_     messages.addAll(Arrays.asList(TipOfTheDayMessages.getNonMacOSXMessages())); _EL_   } _EL_   messages.addAll(Arrays.asList(TipOfTheDayMessages.getFrostWireMessages())); _EL_   Collections.shuffle(messages); _EL_   _currentTip=-1; _EL_ } _EL_ ', 'public PersistedQueue(final File queueEnvPath,final String queueName,final int cacheSize){ _EL_   queueEnvPath.mkdirs(); _EL_   final EnvironmentConfig dbEnvConfig=new EnvironmentConfig(); _EL_   dbEnvConfig.setTransactional(false); _EL_   dbEnvConfig.setAllowCreate(true); _EL_   this.dbEnv=new Environment(queueEnvPath,dbEnvConfig); _EL_   DatabaseConfig dbConfig=new DatabaseConfig(); _EL_   dbConfig.setTransactional(false); _EL_   dbConfig.setAllowCreate(true); _EL_   dbConfig.setDeferredWrite(true); _EL_   this.queueDatabase=dbEnv.openDatabase(null,queueName,dbConfig); _EL_   this.queueName=queueName; _EL_   this.cacheSize=cacheSize; _EL_   this.opsCounter=0; _EL_ } _EL_ ', 'protected final StringBuilder write(StringBuilder sb,final Object... objects){ _EL_   for (  Object string : objects)   sb.append(string); _EL_   return sb; _EL_ } _EL_ ', '@Override public boolean connectionAllowed(EventSetDescriptor esd){ _EL_   return connectionAllowed(esd.getName()); _EL_ } _EL_ ', 'public static Request newPostOpenGraphActionRequest(Session session,OpenGraphAction openGraphAction,Callback callback){ _EL_   if (openGraphAction == null) { _EL_     throw new FacebookException("openGraphAction cannot be null"); _EL_   } _EL_   if (Utility.isNullOrEmpty(openGraphAction.getType())) { _EL_     throw new FacebookException("openGraphAction must have non-null \'type\' property"); _EL_   } _EL_   String path=String.format(MY_ACTION_FORMAT,openGraphAction.getType()); _EL_   return newPostRequest(session,path,openGraphAction,callback); _EL_ } _EL_ ', 'public static double computeMAD(double[] x,double median){ _EL_   for (int i=0; i < x.length; i++) { _EL_     x[i]=Math.abs(x[i] - median); _EL_   } _EL_   double mad=QuickSelect.median(x); _EL_   if (!(mad > 0.)) { _EL_     double min=Double.POSITIVE_INFINITY; _EL_     for (    double xi : x) { _EL_       if (xi > 0. && xi < min) { _EL_         min=xi; _EL_       } _EL_     } _EL_     if (min < Double.POSITIVE_INFINITY) { _EL_       mad=min; _EL_     } _EL_  else { _EL_       mad=1.0; _EL_     } _EL_   } _EL_   if (mad == Double.POSITIVE_INFINITY) { _EL_     double max=0.; _EL_     for (    double xi : x) { _EL_       if (xi < Double.POSITIVE_INFINITY && xi > max) { _EL_         max=xi; _EL_       } _EL_     } _EL_     if (max < Double.POSITIVE_INFINITY) { _EL_       mad=max; _EL_     } _EL_  else { _EL_       mad=1.0; _EL_     } _EL_   } _EL_   return mad; _EL_ } _EL_ ', 'public SdpException(Throwable rootCause){ _EL_   super(rootCause.getLocalizedMessage()); _EL_ } _EL_ ', 'private boolean linkFirst(Node<E> node){ _EL_   if (count >= capacity)   return false; _EL_   Node<E> f=first; _EL_   node.next=f; _EL_   first=node; _EL_   if (last == null)   last=node; _EL_  else   f.prev=node; _EL_   ++count; _EL_   notEmpty.signal(); _EL_   return true; _EL_ } _EL_ ', 'protected void notifyPropertyChangeListener(String property,Object oldValue,Object newValue){ _EL_   Set<PropertyChangeListener> v; _EL_ synchronized (this) { _EL_     v=new HashSet<>(listeners); _EL_   } _EL_   for (  PropertyChangeListener listener : v) { _EL_     listener.propertyChange(new PropertyChangeEvent(this,property,oldValue,newValue)); _EL_   } _EL_ } _EL_ ', 'public boolean indicateDirtyRead(ITemplateHolder template){ _EL_   return ((template.isReadOperation() && _useDirtyRead) || template.isDirtyReadRequested()); _EL_ } _EL_ ', 'protected void applyAttributesToSymbol(TacticalGraphicAttributes graphicAttributes,TacticalSymbolAttributes symbolAttributes){ _EL_   Double value=graphicAttributes.getInteriorOpacity(); _EL_   if (value != null) { _EL_     symbolAttributes.setOpacity(value); _EL_   } _EL_   value=graphicAttributes.getScale(); _EL_   if (value != null) { _EL_     symbolAttributes.setScale(value); _EL_   } _EL_   Material material=graphicAttributes.getInteriorMaterial(); _EL_   symbolAttributes.setInteriorMaterial(material); _EL_   Font font=graphicAttributes.getTextModifierFont(); _EL_   if (font != null) { _EL_     symbolAttributes.setTextModifierFont(font); _EL_   } _EL_   material=graphicAttributes.getTextModifierMaterial(); _EL_   if (material != null) { _EL_     symbolAttributes.setTextModifierMaterial(material); _EL_   } _EL_ } _EL_ ', 'private Journal readJournal(ParcelFileDescriptor oldState){ _EL_   Journal journal=new Journal(); _EL_   if (oldState == null) { _EL_     return journal; _EL_   } _EL_   FileInputStream inStream=new FileInputStream(oldState.getFileDescriptor()); _EL_   try { _EL_     int availableBytes=inStream.available(); _EL_     if (DEBUG)     Log.d(TAG,"available " + availableBytes); _EL_     if (availableBytes < MAX_JOURNAL_SIZE) { _EL_       byte[] buffer=new byte[availableBytes]; _EL_       int bytesRead=0; _EL_       boolean valid=false; _EL_       InvalidProtocolBufferNanoException lastProtoException=null; _EL_       while (availableBytes > 0) { _EL_         try { _EL_           int result=inStream.read(buffer,bytesRead,1); _EL_           if (result > 0) { _EL_             availableBytes-=result; _EL_             bytesRead+=result; _EL_           } _EL_  else { _EL_             Log.w(TAG,"unexpected end of file while reading journal."); _EL_             availableBytes=0; _EL_           } _EL_         } _EL_  catch (        IOException e) { _EL_           buffer=null; _EL_           availableBytes=0; _EL_         } _EL_         try { _EL_           MessageNano.mergeFrom(journal,readCheckedBytes(buffer,bytesRead)); _EL_           valid=true; _EL_           availableBytes=0; _EL_           if (VERBOSE)           Log.v(TAG,"read " + bytesRead + " bytes of journal"); _EL_         } _EL_  catch (        InvalidProtocolBufferNanoException e) { _EL_           lastProtoException=e; _EL_           journal.clear(); _EL_         } _EL_       } _EL_       if (DEBUG)       Log.d(TAG,"journal bytes read: " + bytesRead); _EL_       if (!valid) { _EL_         Log.w(TAG,"could not find a valid journal",lastProtoException); _EL_       } _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     Log.w(TAG,"failed to close the journal",e); _EL_   } _EL_   return journal; _EL_ } _EL_ ', 'public Server start() throws SQLException { _EL_   try { _EL_     started=true; _EL_     service.start(); _EL_     String name=service.getName() + " (" + service.getURL()+ ")"; _EL_     Thread t=new Thread(this,name); _EL_     t.setDaemon(service.isDaemon()); _EL_     t.start(); _EL_     for (int i=1; i < 64; i+=i) { _EL_       wait(i); _EL_       if (isRunning(false)) { _EL_         return this; _EL_       } _EL_     } _EL_     if (isRunning(true)) { _EL_       return this; _EL_     } _EL_     throw DbException.get(ErrorCode.EXCEPTION_OPENING_PORT_2,name,"timeout; " + "please check your network configuration, specially the file /etc/hosts"); _EL_   } _EL_  catch (  DbException e) { _EL_     throw DbException.toSQLException(e); _EL_   } _EL_ } _EL_ ', '@Override public boolean isComplete(){ _EL_   return true; _EL_ } _EL_ ', 'public Request header(String key,String value){ _EL_   Objects.requireNonNull(key); _EL_   Objects.requireNonNull(value); _EL_   _headers.put(key,value); _EL_   return this; _EL_ } _EL_ ', 'public void updateUI(){ _EL_   super.updateUI(); _EL_   setBackground(new Color(255,255,255,0)); _EL_   setWrapStyleWord(true); _EL_   setHighlighter(null); _EL_   setEditable(false); _EL_   LookAndFeel.installBorder(this,"Label.border"); _EL_   LookAndFeel.installColorsAndFont(this,"Label.background","Label.foreground","Label.font"); _EL_   if (resizeHandler != null) { _EL_     resizeHandler.componentResized(null); _EL_   } _EL_   SizePolicy policy=(SizePolicy)getClientProperty(SizePolicy.class); _EL_   if (policy != null) { _EL_     GUIUtils.restrictSize(this,policy); _EL_   } _EL_ } _EL_ ', 'public static void generateExtensionManager(File rootFolder) throws IOException { _EL_   File outFile=new File(rootFolder,REGISTRY_PATH); _EL_   StringBuilder builder=new StringBuilder(); _EL_   builder.append("package org.eclipse.che.ide.client;\\n\\n"); _EL_   generateImports(builder); _EL_   generateClass(builder); _EL_   FileUtils.writeStringToFile(outFile,builder.toString()); _EL_ } _EL_ ', 'public synchronized Future<V> submit(Callable<V> task) throws RejectedExecutionException { _EL_   return pool.submit(task); _EL_ } _EL_ ', 'private void checkBucketName(String name) throws InvalidBucketNameException { _EL_   if (name == null) { _EL_     throw new InvalidBucketNameException(NULL_STRING,"null bucket name"); _EL_   } _EL_   if (name.length() < 3 || name.length() > 63) { _EL_     String msg="bucket name must be at least 3 and no more than 63 characters long"; _EL_     throw new InvalidBucketNameException(name,msg); _EL_   } _EL_   if (name.matches("\\\\.\\\\.")) { _EL_     String msg="bucket name cannot contain successive periods. For more information refer " + "http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html"; _EL_     throw new InvalidBucketNameException(name,msg); _EL_   } _EL_   if (!name.matches("^[a-z0-9][a-z0-9\\\\.\\\\-]+[a-z0-9]$")) { _EL_     String msg="bucket name does not follow Amazon S3 standards. For more information refer " + "http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html"; _EL_     throw new InvalidBucketNameException(name,msg); _EL_   } _EL_ } _EL_ ', 'private void validateUserNamespaceAuthorizationCreateRequest(UserNamespaceAuthorizationCreateRequest request){ _EL_   Assert.notNull(request,"A user namespace authorization create request must be specified."); _EL_   validateUserNamespaceAuthorizationKey(request.getUserNamespaceAuthorizationKey()); _EL_   validateNamespacePermissions(request.getNamespacePermissions()); _EL_ } _EL_ ', 'protected String format(Object o){ _EL_   return o.toString(); _EL_ } _EL_ ', 'public void calculateDerived(){ _EL_   xStats.calculateDerived(); _EL_   yStats.calculateDerived(); _EL_   differencesStats.calculateDerived(); _EL_   correlation=Double.NaN; _EL_   if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) { _EL_     double slope=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean); _EL_     if (!Utils.eq(yStats.stdDev,0)) { _EL_       correlation=slope * xStats.stdDev / yStats.stdDev; _EL_     } _EL_  else { _EL_       correlation=1.0; _EL_     } _EL_   } _EL_   if (Utils.gr(differencesStats.stdDev,0)) { _EL_     double tval=differencesStats.mean * Math.sqrt(count) / differencesStats.stdDev; _EL_     if (m_degreesOfFreedom >= 1) { _EL_       differencesProbability=Statistics.FProbability(tval * tval,1,m_degreesOfFreedom); _EL_     } _EL_  else { _EL_       if (count > 1) { _EL_         differencesProbability=Statistics.FProbability(tval * tval,1,(int)count - 1); _EL_       } _EL_  else { _EL_         differencesProbability=1; _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     if (differencesStats.sumSq == 0) { _EL_       differencesProbability=1.0; _EL_     } _EL_  else { _EL_       differencesProbability=0.0; _EL_     } _EL_   } _EL_   differencesSignificance=0; _EL_   if (differencesProbability <= sigLevel) { _EL_     if (xStats.mean > yStats.mean) { _EL_       differencesSignificance=1; _EL_     } _EL_  else { _EL_       differencesSignificance=-1; _EL_     } _EL_   } _EL_ } _EL_ ', 'protected boolean canDeleteConsistencyGroup(final BlockConsistencyGroup consistencyGroup){ _EL_   return (!consistencyGroup.getInactive() && !consistencyGroup.created()); _EL_ } _EL_ ', 'public static void closeQuietly(Closeable closeable){ _EL_   if (closeable != null) { _EL_     try { _EL_       closeable.close(); _EL_     } _EL_  catch (    RuntimeException rethrown) { _EL_       throw rethrown; _EL_     } _EL_ catch (    Exception ignored) { _EL_     } _EL_   } _EL_ } _EL_ ', '@Override protected void removeRange(int start,int end){ _EL_   if (start < 0) { _EL_     throw new IndexOutOfBoundsException("" + start); _EL_   } _EL_  else   if (end > size) { _EL_     throw new IndexOutOfBoundsException("" + end + " out of: "+ size); _EL_   } _EL_  else   if (start > end) { _EL_     throw new IndexOutOfBoundsException("" + start + " out of: "+ end); _EL_   } _EL_   if (start == end) { _EL_     return; _EL_   } _EL_   if (end == size) { _EL_     Arrays.fill(array,firstIndex + start,firstIndex + size,null); _EL_   } _EL_  else   if (start == 0) { _EL_     Arrays.fill(array,firstIndex,firstIndex + end,null); _EL_     firstIndex+=end; _EL_   } _EL_  else { _EL_     System.arraycopy(array,firstIndex + end,array,firstIndex + start,size - end); _EL_     int lastIndex=firstIndex + size; _EL_     int newLast=lastIndex + start - end; _EL_     Arrays.fill(array,newLast,lastIndex,null); _EL_   } _EL_   size-=end - start; _EL_   modCount++; _EL_ } _EL_ ', 'private boolean zzRefill() throws java.io.IOException { _EL_   if (zzStartRead > 0) { _EL_     System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead); _EL_     zzEndRead-=zzStartRead; _EL_     zzCurrentPos-=zzStartRead; _EL_     zzMarkedPos-=zzStartRead; _EL_     zzPushbackPos-=zzStartRead; _EL_     zzStartRead=0; _EL_   } _EL_   if (zzCurrentPos >= zzBuffer.length) { _EL_     final char newBuffer[]=new char[zzCurrentPos * 2]; _EL_     System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length); _EL_     zzBuffer=newBuffer; _EL_   } _EL_   final int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead); _EL_   if (numRead < 0) { _EL_     return true; _EL_   } _EL_  else { _EL_     zzEndRead+=numRead; _EL_     return false; _EL_   } _EL_ } _EL_ ', 'private void checkDuplicateNamesDuringDelete(List<Integer> ids){ _EL_   ArrayList<Entity> myEntities=game.getPlayerEntities(game.getPlayer(localPlayerNumber),false); _EL_   Hashtable<String,ArrayList<Integer>> rawNameToId=new Hashtable<String,ArrayList<Integer>>((int)(myEntities.size() * 1.26)); _EL_   for (  Entity e : myEntities) { _EL_     String rawName=e.getShortNameRaw(); _EL_     ArrayList<Integer> namedIds=rawNameToId.get(rawName); _EL_     if (namedIds == null) { _EL_       namedIds=new ArrayList<Integer>(); _EL_     } _EL_     namedIds.add(e.getId()); _EL_     rawNameToId.put(rawName,namedIds); _EL_   } _EL_   for (  int id : ids) { _EL_     Entity removedEntity=game.getEntity(id); _EL_     if (removedEntity == null) { _EL_       continue; _EL_     } _EL_     String removedRawName=removedEntity.getShortNameRaw(); _EL_     Integer count=duplicateNameHash.get(removedEntity.getShortNameRaw()); _EL_     if ((count != null) && (count > 1)) { _EL_       ArrayList<Integer> namedIds=rawNameToId.get(removedRawName); _EL_       for (      Integer i : namedIds) { _EL_         Entity e=game.getEntity(i); _EL_         String eRawName=e.getShortNameRaw(); _EL_         if (eRawName.equals(removedRawName) && (e.duplicateMarker > removedEntity.duplicateMarker)) { _EL_           e.duplicateMarker--; _EL_           e.generateShortName(); _EL_           e.generateDisplayName(); _EL_           if (!ids.contains(e.getId())) { _EL_             sendUpdateEntity(e); _EL_           } _EL_         } _EL_       } _EL_       duplicateNameHash.put(removedEntity.getShortNameRaw(),new Integer(count - 1)); _EL_     } _EL_  else     if (count != null) { _EL_       duplicateNameHash.remove(removedEntity.getShortNameRaw()); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void releaseSelections(Set<Entity> items){ _EL_   for (  Entity item : items) { _EL_     releaseSelection(item); _EL_   } _EL_ } _EL_ ', 'public HubLinkMapping(String fileName,int numberOfHubs,Network network){ _EL_   this.numberOfHubs=numberOfHubs; _EL_   if (fileName.contains(".mappingTable.")) { _EL_     readMappingTable(fileName); _EL_     unMappedLinksAtZeroHub=true; _EL_     return; _EL_   } _EL_   handleUnmappedLinksStart(); _EL_   try { _EL_     FileReader fr=new FileReader(fileName); _EL_     BufferedReader br=new BufferedReader(fr); _EL_     String line; _EL_     StringTokenizer tokenizer; _EL_     String token; _EL_     int linkId; _EL_     line=br.readLine(); _EL_     while (line != null) { _EL_       tokenizer=new StringTokenizer(line); _EL_       for (int i=0; i < this.numberOfHubs; i++) { _EL_         token=tokenizer.nextToken(); _EL_         linkId=(int)Double.parseDouble(token); _EL_         linkHubMapping.put(Integer.toString(linkId),i); _EL_       } _EL_       if (tokenizer.hasMoreTokens()) { _EL_         throw new RuntimeException("the number of hubs is wrong"); _EL_       } _EL_       line=br.readLine(); _EL_     } _EL_   } _EL_  catch (  RuntimeException e) { _EL_     throw e; _EL_   } _EL_ catch (  Exception e) { _EL_     throw new RuntimeException("Error reading the hub link mapping file"); _EL_   } _EL_   linkHubMapping.remove("-1"); _EL_   handleUnmappedLinksEnd(network); _EL_ } _EL_ ', 'public boolean deleteLoadName(String load){ _EL_   if (!_loadList.contains(load)) { _EL_     return false; _EL_   } _EL_   _loadList.remove(load); _EL_   log.debug("train (" + getName() + ") delete car load "+ load); _EL_   setDirtyAndFirePropertyChange(LOADS_CHANGED_PROPERTY,_loadList.size() + 1,_loadList.size()); _EL_   return true; _EL_ } _EL_ ', 'public static String fromTag(IntArrayTag tag){ _EL_   StringBuilder builder=new StringBuilder(); _EL_   builder.append(ARRAY_START); _EL_   boolean start=true; _EL_   for (  int value : tag.getValue()) { _EL_     IntTag i=new IntTag(value); _EL_     if (start) { _EL_       start=false; _EL_     } _EL_  else { _EL_       builder.append(ELEMENT_SEPERATOR); _EL_     } _EL_     builder.append(fromTag(i)); _EL_   } _EL_   builder.append(ARRAY_END); _EL_   return builder.toString(); _EL_ } _EL_ ', 'public static int removeArgsAndReturnInsertionIndex(List<String> args,int argIndex,boolean tryRemovingArgValue){ _EL_   if (argIndex < 0 || argIndex >= args.size()) { _EL_     return 0; _EL_   } _EL_   if (tryRemovingArgValue) { _EL_     String argValue=getArgValue(args,argIndex + 1); _EL_     if (argValue != null) { _EL_       args.remove(argIndex + 1); _EL_     } _EL_   } _EL_   args.remove(argIndex); _EL_   return argIndex; _EL_ } _EL_ ', 'public AtomicDoubleArray(int length){ _EL_   larray=new AtomicLongArray(length); _EL_   long ZERO=Double.doubleToRawLongBits(0.0); _EL_   for (int i=0; i < length; i++)   larray.set(i,ZERO); _EL_ } _EL_ ', 'private void copyAction(File srcFile,File destFile) throws FileNotFoundException, IOException { _EL_   FileInputStream istream=new FileInputStream(srcFile); _EL_   FileOutputStream ostream=new FileOutputStream(destFile); _EL_   FileChannel input=istream.getChannel(); _EL_   FileChannel output=ostream.getChannel(); _EL_   try { _EL_     input.transferTo(0,input.size(),output); _EL_   } _EL_   finally { _EL_     istream.close(); _EL_     ostream.close(); _EL_     input.close(); _EL_     output.close(); _EL_   } _EL_ } _EL_ ', 'private static BufferedImage makeSquare(BufferedImage input){ _EL_   if (input.getHeight() == input.getWidth()) { _EL_     return input; _EL_   } _EL_  else { _EL_     int max=Math.max(input.getHeight(),input.getWidth()); _EL_     int dx=(max - input.getWidth()) / 2; _EL_     int dy=(max - input.getHeight()) / 2; _EL_     return createImg(max,max,input.getType(),null); _EL_   } _EL_ } _EL_ ', 'public void writeStartElement(String localName) throws XMLStreamException { _EL_   if (localName == null || localName.length() == 0) { _EL_     throw new XMLStreamException("Local Name cannot be null or empty"); _EL_   } _EL_   _state=STATE_ELEMENT; _EL_   if (_currentEle != null && _currentEle.getState() == ELEMENT_STARTTAG_OPEN) { _EL_     closeStartTag(); _EL_   } _EL_   _currentEle=new Element(_currentEle,localName,false); _EL_   openStartTag(); _EL_   _writer.write(localName); _EL_ } _EL_ ', 'public void addProcessInteractionListener(final ProcessInteractionListener l){ _EL_   if (l == null) { _EL_     throw new IllegalArgumentException("l must not be null!"); _EL_   } _EL_   processInteractionListeners.add(l); _EL_ } _EL_ ', 'public StrBuilder replaceFirst(final String searchStr,final String replaceStr){ _EL_   final int searchLen=(searchStr == null ? 0 : searchStr.length()); _EL_   if (searchLen > 0) { _EL_     final int index=indexOf(searchStr,0); _EL_     if (index >= 0) { _EL_       final int replaceLen=(replaceStr == null ? 0 : replaceStr.length()); _EL_       replaceImpl(index,index + searchLen,searchLen,replaceStr,replaceLen); _EL_     } _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public static String gensalt(int log_rounds,SecureRandom random){ _EL_   if (log_rounds < 4 || log_rounds > 31) { _EL_     throw new IllegalArgumentException("Bad number of rounds"); _EL_   } _EL_   StringBuilder rs=new StringBuilder(); _EL_   byte rnd[]=new byte[BCRYPT_SALT_LEN]; _EL_   random.nextBytes(rnd); _EL_   rs.append("$2a$"); _EL_   if (log_rounds < 10) { _EL_     rs.append("0"); _EL_   } _EL_   rs.append(log_rounds); _EL_   rs.append("$"); _EL_   encode_base64(rnd,rnd.length,rs); _EL_   return rs.toString(); _EL_ } _EL_ ', 'protected void drawDescription(Canvas c){ _EL_   if (!mDescription.equals("")) { _EL_     if (mDescriptionPosition == null) { _EL_       c.drawText(mDescription,getWidth() - mViewPortHandler.offsetRight() - 10,getHeight() - mViewPortHandler.offsetBottom() - 10,mDescPaint); _EL_     } _EL_  else { _EL_       c.drawText(mDescription,mDescriptionPosition.x,mDescriptionPosition.y,mDescPaint); _EL_     } _EL_   } _EL_ } _EL_ ', 'long parseBytes(String freeSpace,String path) throws IOException { _EL_   try { _EL_     long bytes=Long.parseLong(freeSpace); _EL_     if (bytes < 0) { _EL_       throw new IOException("Command line \'" + DF + "\' did not find free space in response "+ "for path \'"+ path+ "\'- check path is valid"); _EL_     } _EL_     return bytes; _EL_   } _EL_  catch (  NumberFormatException ex) { _EL_     throw new IOExceptionWithCause("Command line \'" + DF + "\' did not return numeric data as expected "+ "for path \'"+ path+ "\'- check path is valid",ex); _EL_   } _EL_ } _EL_ ', 'public String findInterlanguageLink(String lang){ _EL_   int start=page.indexOf("[[" + lang + ":"); _EL_   if (start < 0)   return null; _EL_   int end=page.indexOf("]]",start); _EL_   if (end < 0)   return null; _EL_   String link=page.substring(start + 3 + lang.length(),end); _EL_   if (link.indexOf("\\n") != -1) { _EL_     return null; _EL_   } _EL_   if (link.length() == 0)   return null; _EL_   return link; _EL_ } _EL_ ', 'private void updateActions(final INaviAddressSpace addressSpace){ _EL_   m_loadAddressSpaceAction.setEnabled(!addressSpace.isLoaded()); _EL_ } _EL_ ', 'private void addGumball(float xPos,float yPos){ _EL_   Gumball gumball=new Gumball(); _EL_   gumball.mXInitPos=xPos; _EL_   gumball.mYInitPos=yPos; _EL_   gumball.mSoundPoolId=UUID.randomUUID(); _EL_   mSoundPoolId.put(gumball.mSoundPoolId,false); _EL_   mGameView.addGumball(gumball); _EL_   mSoundPool.play(mSoundBallDrop,1,1,0,0,1); _EL_ } _EL_ ', 'int put(T segment,List<? super T> recycleBin){ _EL_   int count; _EL_   if (lastCount == 0) { _EL_     count=0; _EL_     lastCount=1; _EL_     last=segment; _EL_   } _EL_  else   if (Objects.deepEquals(last,segment)) { _EL_     ++lastCount; _EL_     count=0; _EL_     recycleBin.add(segment); _EL_   } _EL_  else { _EL_     count=lastCount; _EL_     lastCount=1; _EL_     last=segment; _EL_   } _EL_   return count; _EL_ } _EL_ ', 'public Channel chan(final String topic,final JsonNode payload){ _EL_   LOG.log(Level.FINE,"chan: {0}, {1}",new Object[]{topic,payload}); _EL_   final Channel channel=new Channel(topic,payload,Socket.this); _EL_ synchronized (channels) { _EL_     channels.add(channel); _EL_   } _EL_   return channel; _EL_ } _EL_ ', 'public PlaPointFloat change_size(double p_new_size){ _EL_   if (v_x == 0 && v_y == 0) { _EL_     return this; _EL_   } _EL_   double length=Math.sqrt(v_x * v_x + v_y * v_y); _EL_   double new_x=(v_x * p_new_size) / length; _EL_   double new_y=(v_y * p_new_size) / length; _EL_   return new PlaPointFloat(new_x,new_y); _EL_ } _EL_ ', 'int insert(Row row,byte[] sourceBuffer,int sourceOffset,BlobOutputStream[] blobs){ _EL_   int rowHead=_rowHead; _EL_   int blobTail=_blobTail; _EL_   int rowLength=row.length(); _EL_   rowHead-=rowLength; _EL_   if (rowHead < blobTail) { _EL_     return -1; _EL_   } _EL_   byte[] buffer=_buffer; _EL_   System.arraycopy(sourceBuffer,sourceOffset,buffer,rowHead,rowLength); _EL_   buffer[rowHead]=(byte)((buffer[rowHead] & ~CODE_MASK) | INSERT); _EL_   blobTail=row.insertBlobs(buffer,rowHead,blobTail,blobs); _EL_   if (blobTail < 0) { _EL_     return -1; _EL_   } _EL_   setBlobTail(blobTail); _EL_   rowHead(rowHead); _EL_   validateBlock(row); _EL_   return rowHead; _EL_ } _EL_ ', 'private void addDefaultUri() throws IgniteSpiException { _EL_   assert uriEncodedList != null; _EL_   URI uri; _EL_   try { _EL_     uri=U.resolveWorkDirectory(DFLT_DEPLOY_DIR,false).toURI(); _EL_   } _EL_  catch (  IgniteCheckedException e) { _EL_     throw new IgniteSpiException("Failed to initialize default file scanner",e); _EL_   } _EL_   uriEncodedList.add(uri); _EL_ } _EL_ ', 'public static double distancePointLinePerpendicular(Coordinate p,Coordinate A,Coordinate B){ _EL_   double len2=(B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y); _EL_   double s=((A.y - p.y) * (B.x - A.x) - (A.x - p.x) * (B.y - A.y)) / len2; _EL_   return Math.abs(s) * Math.sqrt(len2); _EL_ } _EL_ ', 'BigInteger copy(){ _EL_   prepareJavaRepresentation(); _EL_   int[] copyDigits=new int[numberLength]; _EL_   System.arraycopy(digits,0,copyDigits,0,numberLength); _EL_   return new BigInteger(sign,numberLength,copyDigits); _EL_ } _EL_ ', 'private void createGui(){ _EL_   final JPanel outerNamePanel=new JPanel(new BorderLayout()); _EL_   outerNamePanel.setBorder(new TitledBorder("Tag")); _EL_   final JPanel namePanel=new JPanel(new BorderLayout()); _EL_   namePanel.setBorder(new EmptyBorder(0,0,5,0)); _EL_   final JLabel nameLabel=new CHelpLabel("Name" + ":",new CNameHelp()); _EL_   nameLabel.setPreferredSize(new Dimension(110,25)); _EL_   namePanel.add(nameLabel,BorderLayout.WEST); _EL_   namePanel.add(m_nameTextField,BorderLayout.CENTER); _EL_   outerNamePanel.add(namePanel,BorderLayout.CENTER); _EL_   final JPanel outerDescriptionPanel=new JPanel(new BorderLayout()); _EL_   outerDescriptionPanel.setBorder(new EmptyBorder(5,0,0,0)); _EL_   final JPanel descriptionPanel=new JPanel(new BorderLayout()); _EL_   descriptionPanel.setBorder(new TitledBorder("Description")); _EL_   descriptionPanel.setMinimumSize(new Dimension(0,120)); _EL_   descriptionPanel.add(new JScrollPane(m_descriptionField)); _EL_   outerDescriptionPanel.add(descriptionPanel,BorderLayout.CENTER); _EL_   final JPanel buttonPanel=new JPanel(new GridLayout(1,2)); _EL_   buttonPanel.add(new JPanel()); _EL_   buttonPanel.setBorder(new EmptyBorder(5,0,5,2)); _EL_   buttonPanel.add(m_saveButton); _EL_   final JPanel topPanel=new JPanel(new BorderLayout()); _EL_   topPanel.add(outerNamePanel,BorderLayout.NORTH); _EL_   topPanel.add(outerDescriptionPanel,BorderLayout.CENTER); _EL_   topPanel.add(buttonPanel,BorderLayout.SOUTH); _EL_   final JPanel bottomPanel=new JPanel(new BorderLayout()); _EL_   bottomPanel.setBorder(m_tableBorder); _EL_   final JScrollPane scrollPane=new JScrollPane(m_childrenTagTable); _EL_   bottomPanel.add(scrollPane,BorderLayout.CENTER); _EL_   final JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,topPanel,bottomPanel); _EL_   splitPane.setOneTouchExpandable(true); _EL_   splitPane.setDividerLocation(splitPane.getMinimumDividerLocation()); _EL_   splitPane.setResizeWeight(0.5); _EL_   add(splitPane); _EL_ } _EL_ ', 'public static boolean isJellybeanOrLater(){ _EL_   return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN; _EL_ } _EL_ ', 'public PartialCorrelationPdf(int n,int k){ _EL_   this.n=n; _EL_   this.k=k; _EL_   double gammaRatio=gammaRatio(n,k); _EL_   this.constant=(1 / Math.pow(Math.PI,0.5)) * gammaRatio; _EL_   this.outsideExp=(double)(n - k - 2) / 2.0; _EL_ } _EL_ ', 'public void addResponseCodeListener(ActionListener a){ _EL_   responseCodeListeners.addElement(a); _EL_ } _EL_ ', 'public static boolean hasDeadStatesFromInitial(Automaton a){ _EL_   BitSet reachableFromInitial=getLiveStatesFromInitial(a); _EL_   BitSet reachableFromAccept=getLiveStatesToAccept(a); _EL_   reachableFromInitial.andNot(reachableFromAccept); _EL_   return reachableFromInitial.isEmpty() == false; _EL_ } _EL_ ', 'public Decimal subtract(Decimal decimal){ _EL_   assertDefined(); _EL_   if (null == m_value) { _EL_     return (decimal); _EL_   } _EL_   BigDecimal value=m_value.subtract(decimal.getBigDecimalValue()); _EL_   return new Decimal(value,SCALE); _EL_ } _EL_ ', "protected int skipLine(int c) throws IOException { _EL_   while (c != -1 && c != '\\r' && c != '\\n') { _EL_     c=reader.read(); _EL_   } _EL_   if (c == '\\n') { _EL_     c=reader.read(); _EL_     lineNo++; _EL_     reportLocation(lineNo,1); _EL_   } _EL_  else   if (c == '\\r') { _EL_     c=reader.read(); _EL_     if (c == '\\n') { _EL_       c=reader.read(); _EL_     } _EL_     lineNo++; _EL_     reportLocation(lineNo,1); _EL_   } _EL_   return c; _EL_ } _EL_ ", 'public static ByteBuffer base64StringToByteBuffer(String base64EncodedKey){ _EL_   return ByteBuffer.wrap(base64DecodeString(base64EncodedKey)); _EL_ } _EL_ ', 'public boolean step(){ _EL_   long current=System.currentTimeMillis(); _EL_   if (mStart == 0 || (current - mStart < 0)) { _EL_     mProgress=0; _EL_   } _EL_  else   if (current - mStart > mDuration) { _EL_     if (mLoop) { _EL_       mProgress=0; _EL_       start(); _EL_       return true; _EL_     } _EL_     mProgress=1; _EL_     return false; _EL_   } _EL_  else { _EL_     mProgress=(current - mStart) / (double)mDuration; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'protected void load_raw_characters(StringBuilder sb) throws IOException { _EL_   int c=read_char(); _EL_   for (; ; ) { _EL_     c=read_char(); _EL_ switch (c) { _EL_ case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_1: _EL_ case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_2: _EL_ case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_3: _EL_       continue; _EL_ case -1: _EL_     return; _EL_ default : _EL_   if (!IonTokenConstsX.is7bitValue(c)) { _EL_     c=read_large_char_sequence(c); _EL_   } _EL_ } _EL_ if (IonUTF8.needsSurrogateEncoding(c)) { _EL_ sb.append(IonUTF8.highSurrogate(c)); _EL_ c=IonUTF8.lowSurrogate(c); _EL_ } _EL_ sb.append((char)c); _EL_ } _EL_ } _EL_ ', 'public void addChangingListener(OnWheelChangedListener listener){ _EL_   changingListeners.add(listener); _EL_ } _EL_ ', 'private Integer scanYamlDirectiveNumber(Mark startMark){ _EL_   char ch=reader.peek(); _EL_   if (!Character.isDigit(ch)) { _EL_     throw new ScannerException("while scanning a directive",startMark,"expected a digit, but found " + ch + "("+ ((int)ch)+ ")",reader.getMark()); _EL_   } _EL_   int length=0; _EL_   while (Character.isDigit(reader.peek(length))) { _EL_     length++; _EL_   } _EL_   Integer value=Integer.parseInt(reader.prefixForward(length)); _EL_   return value; _EL_ } _EL_ ', 'public static final String toBitString(int i[]){ _EL_   StringBuilder sb=new StringBuilder(i.length); _EL_   for (  int b : i) { _EL_     sb.append(b); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'boolean checkToken(ByteWrapper token,Key nodeId,InetAddress ip,int port,Key lookupKey){ _EL_   updateTokenTimestamps(); _EL_   boolean valid=checkToken(token,nodeId,ip,port,lookupKey,timestampCurrent.get()) || checkToken(token,nodeId,ip,port,lookupKey,timestampPrevious); _EL_   if (!valid)   DHT.logDebug("Received Invalid token from " + ip.getHostAddress()); _EL_   return valid; _EL_ } _EL_ ', 'public void expandAll(){ _EL_   cancelEditing(); _EL_   final TreeModel tm=getModel(); _EL_   final Object root=tm.getRoot(); _EL_   if (root != null) { _EL_     expandAllPaths(new TreePath(root),tm); _EL_   } _EL_ } _EL_ ', 'protected void describeVocabularies(final IVCount[] predicatePartitionCounts){ _EL_   final Set<String> namespaces=new LinkedHashSet<String>(); _EL_ { _EL_     for (    IVCount tmp : predicatePartitionCounts) { _EL_       final URI p=(URI)tmp.getValue(); _EL_       String namespace=p.getNamespace(); _EL_       if (namespace.endsWith("#")) { _EL_         namespace=namespace.substring(0,namespace.length() - 1); _EL_       } _EL_       namespaces.add(namespace); _EL_     } _EL_   } _EL_   final String[] a=namespaces.toArray(new String[namespaces.size()]); _EL_   Arrays.sort(a); _EL_   for (  String namespace : a) { _EL_     g.add(aDataset,VoidVocabularyDecl.vocabulary,f.createURI(namespace)); _EL_   } _EL_ } _EL_ ', 'public QueryStringDecoderUtil(URI uri){ _EL_   this(uri,Charset.defaultCharset()); _EL_ } _EL_ ', 'public static float[] cmykFromRgb(int rgbColor){ _EL_   int red=(0xff0000 & rgbColor) >> 16; _EL_   int green=(0xff00 & rgbColor) >> 8; _EL_   int blue=(0xff & rgbColor); _EL_   float black=Math.min(1.0f - red / 255.0f,Math.min(1.0f - green / 255.0f,1.0f - blue / 255.0f)); _EL_   float cyan=1.0f; _EL_   float magenta=1.0f; _EL_   float yellow=1.0f; _EL_   if (black != 1.0f) { _EL_     cyan=(1.0f - (red / 255.0f) - black) / (1.0f - black); _EL_     magenta=(1.0f - (green / 255.0f) - black) / (1.0f - black); _EL_     yellow=(1.0f - (blue / 255.0f) - black) / (1.0f - black); _EL_   } _EL_   return new float[]{cyan,magenta,yellow,black}; _EL_ } _EL_ ', 'public static void showErrorMessage(String msg){ _EL_   showErrorMessage(msg,3500); _EL_ } _EL_ ', 'public final static NameValuePair parseNameValuePair(final String value,HeaderValueParser parser) throws ParseException { _EL_   if (value == null) { _EL_     throw new IllegalArgumentException("Value to parse may not be null"); _EL_   } _EL_   if (parser == null)   parser=BasicHeaderValueParser.DEFAULT; _EL_   CharArrayBuffer buffer=new CharArrayBuffer(value.length()); _EL_   buffer.append(value); _EL_   ParserCursor cursor=new ParserCursor(0,value.length()); _EL_   return parser.parseNameValuePair(buffer,cursor); _EL_ } _EL_ ', 'public static double cos(double radians){ _EL_   return Math.cos(radians); _EL_ } _EL_ ', 'public static String formatNumber(float number,int digitCount,boolean separateThousands){ _EL_   char[] out=new char[35]; _EL_   boolean neg=false; _EL_   if (number == 0) { _EL_     return "0"; _EL_   } _EL_   boolean zero=false; _EL_   if (number < 1 && number > -1) { _EL_     zero=true; _EL_   } _EL_   if (number < 0) { _EL_     neg=true; _EL_     number=-number; _EL_   } _EL_   if (digitCount > POW_10.length) { _EL_     digitCount=POW_10.length - 1; _EL_   } _EL_   number*=POW_10[digitCount]; _EL_   long lval=Math.round(number); _EL_   int ind=out.length - 1; _EL_   int charCount=0; _EL_   boolean decimalPointAdded=false; _EL_   while (lval != 0 || charCount < (digitCount + 1)) { _EL_     int digit=(int)(lval % 10); _EL_     lval=lval / 10; _EL_     out[ind--]=(char)(digit + \'0\'); _EL_     charCount++; _EL_     if (charCount == digitCount) { _EL_       out[ind--]=\',\'; _EL_       charCount++; _EL_       decimalPointAdded=true; _EL_     } _EL_  else     if (separateThousands && lval != 0 && charCount > digitCount) { _EL_       if (decimalPointAdded) { _EL_         if ((charCount - digitCount) % 4 == 0) { _EL_           out[ind--]=\'.\'; _EL_           charCount++; _EL_         } _EL_       } _EL_  else { _EL_         if ((charCount - digitCount) % 4 == 3) { _EL_           out[ind--]=\'.\'; _EL_           charCount++; _EL_         } _EL_       } _EL_     } _EL_   } _EL_   if (zero) { _EL_     out[ind--]=\'0\'; _EL_     charCount+=1; _EL_   } _EL_   if (neg) { _EL_     out[ind--]=\'-\'; _EL_     charCount+=1; _EL_   } _EL_   int start=out.length - charCount; _EL_   return String.valueOf(out,start,out.length - start); _EL_ } _EL_ ', '@Override protected void onDestroy(){ _EL_   super.onDestroy(); _EL_   doReallyStop(false); _EL_   mFragments.dispatchDestroy(); _EL_   if (mLoaderManager != null) { _EL_     mLoaderManager.doDestroy(); _EL_   } _EL_ } _EL_ ', 'static public boolean doesFileExist(Context c,String fileName,long fileSize,boolean deleteFileOnMismatch){ _EL_   File fileForNewFile=new File(Helpers.generateSaveFileName(c,fileName)); _EL_   if (fileForNewFile.exists()) { _EL_     if (fileForNewFile.length() == fileSize) { _EL_       return true; _EL_     } _EL_     if (deleteFileOnMismatch) { _EL_       fileForNewFile.delete(); _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'static WindowsFileAttributes fromFindData(long address){ _EL_   int fileAttrs=unsafe.getInt(address + OFFSETOF_FIND_DATA_ATTRIBUTES); _EL_   long creationTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_CREATETIME); _EL_   long lastAccessTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_LASTACCESSTIME); _EL_   long lastWriteTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_LASTWRITETIME); _EL_   long size=((long)(unsafe.getInt(address + OFFSETOF_FIND_DATA_SIZEHIGH)) << 32) + (unsafe.getInt(address + OFFSETOF_FIND_DATA_SIZELOW) & 0xFFFFFFFFL); _EL_   int reparseTag=isReparsePoint(fileAttrs) ? unsafe.getInt(address + OFFSETOF_FIND_DATA_RESERVED0) : 0; _EL_   return new WindowsFileAttributes(fileAttrs,creationTime,lastAccessTime,lastWriteTime,size,reparseTag,0,0,0); _EL_ } _EL_ ', 'public static final void writeMapXml(Map val,XmlSerializer out,WriteMapCallback callback) throws XmlPullParserException, IOException { _EL_   if (val == null) { _EL_     return; _EL_   } _EL_   Set s=val.entrySet(); _EL_   Iterator i=s.iterator(); _EL_   while (i.hasNext()) { _EL_     Map.Entry e=(Map.Entry)i.next(); _EL_     writeValueXml(e.getValue(),(String)e.getKey(),out,callback); _EL_   } _EL_ } _EL_ ', 'public void fireEventProgrammatically(Event event){ _EL_   if (!event.isConsumed())   ripplerPane.fireEvent(event); _EL_ } _EL_ ', 'private boolean hasFullEntry(JsonValue entry,QuerySide querySide){ _EL_   if (querySide == QuerySide.SOURCE && sourceQueryFullEntry != null) { _EL_     return sourceQueryFullEntry; _EL_   } _EL_  else   if (querySide == QuerySide.TARGET && targetQueryFullEntry != null) { _EL_     return targetQueryFullEntry; _EL_   } _EL_   if (entry != null) { _EL_     short ignoreFields=0; _EL_     if (entry.isDefined("_id")) { _EL_       ignoreFields++; _EL_     } _EL_     if (entry.isDefined("_rev")) { _EL_       ignoreFields++; _EL_     } _EL_     ignoreFields+=2; _EL_     return entry.size() > ignoreFields; _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public static boolean isModule(IResource resource){ _EL_   return (resource != null && TLA_EXTENSION.equals(resource.getFileExtension())); _EL_ } _EL_ ', 'public int writeAnnotation(Annotation annotation){ _EL_   int off=data.position(); _EL_   writeByte(annotation.visibility); _EL_   writeEncodedArray(annotation.encodedAnnotation); _EL_   return off; _EL_ } _EL_ ', 'public static long fromInet4Address(final InetAddress inetAddress){ _EL_   ensureIsInet4Address(inetAddress); _EL_   return Integer.toUnsignedLong(inetAddress.hashCode()); _EL_ } _EL_ ', 'public boolean revisionContainsTemplateName(int revId,String templateName) throws WikiApiException { _EL_   return revisionContainsTemplateNames(revId,Arrays.asList(new String[]{templateName})); _EL_ } _EL_ ', 'public List<GenericEntry> retrieveAllAccountInfoRequests(Date fromDate) throws AppsForYourDomainException, IOException, ServiceException { _EL_   String url=BASE_URL + "account/" + domain; _EL_   if (fromDate != null) { _EL_     url+="?fromDate=" + DATE_FORMAT.format(fromDate); _EL_   } _EL_   return getAllPages(new URL(url),GenericFeed.class); _EL_ } _EL_ ', 'protected void drawCylinder(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean isShadow){ _EL_   int h4=h / 4; _EL_   int r=w - 1; _EL_   if (fillColor != null || fillPaint != null) { _EL_     Area area=new Area(new Rectangle(x,y + h4 / 2,r,h - h4)); _EL_     area.add(new Area(new Rectangle(x,y + h4 / 2,r,h - h4))); _EL_     area.add(new Area(new Ellipse2D.Double(x,y,r,h4))); _EL_     area.add(new Area(new Ellipse2D.Double(x,y + h - h4,r,h4))); _EL_     if (isShadow) { _EL_       g.setColor(mxConstants.SHADOW_COLOR); _EL_       g.translate(mxConstants.SHADOW_OFFSETX,mxConstants.SHADOW_OFFSETY); _EL_       g.fill(area); _EL_       g.translate(-mxConstants.SHADOW_OFFSETX,-mxConstants.SHADOW_OFFSETY); _EL_     } _EL_     if (fillPaint != null) { _EL_       g.setPaint(fillPaint); _EL_     } _EL_  else { _EL_       g.setColor(fillColor); _EL_     } _EL_     g.fill(area); _EL_   } _EL_   if (penColor != null) { _EL_     g.setColor(penColor); _EL_     int h2=h4 / 2; _EL_     g.drawOval(x,y,r,h4); _EL_     g.drawLine(x,y + h2,x,y + h - h2); _EL_     g.drawLine(x + w - 1,y + h2,x + w - 1,y + h - h2); _EL_     g.drawArc(x,y + h - h4,r,h4,0,-180); _EL_   } _EL_ } _EL_ ', 'private void walkParseTree(List<SwiftBaseListener> listeners,TopLevelContext tree){ _EL_   ParseTreeWalker walker=new ParseTreeWalker(); _EL_   listeners.forEach(null); _EL_ } _EL_ ', 'public static int truncatedCompareTo(final Date date1,final Date date2,final int field){ _EL_   final Date truncatedDate1=truncate(date1,field); _EL_   final Date truncatedDate2=truncate(date2,field); _EL_   return truncatedDate1.compareTo(truncatedDate2); _EL_ } _EL_ ', 'public static boolean isBookSearchUrl(String url){ _EL_   return url.startsWith("http://google.com/books") || url.startsWith("http://books.google."); _EL_ } _EL_ ', 'public static String classNamePath(String className){ _EL_   String filename=className.replace(".",File.separator); _EL_   filename=filename.replaceFirst("[$][0-9]+",""); _EL_   if (filename.indexOf("$") > 0) { _EL_     filename=filename.substring(0,filename.indexOf("$")); _EL_   } _EL_   return "src" + File.separator + filename+ ".java"; _EL_ } _EL_ ', 'public void removeTitlePrefix(String prfx){ _EL_   titlePrefix.remove(prfx); _EL_   firePropertyChange(TITLE_PREFIX,null,titlePrefix); _EL_ } _EL_ ', 'public int findCarByRoadNumber(String roadNumber){ _EL_   if (sysList != null) { _EL_     if (!roadNumber.equals(_roadNumber)) { _EL_       return getIndex(0,roadNumber); _EL_     } _EL_     int index=getIndex(_index,roadNumber); _EL_     if (index > 0) { _EL_       return index; _EL_     } _EL_     return getIndex(0,roadNumber); _EL_   } _EL_   return -1; _EL_ } _EL_ ', 'public Location newLocation(String name){ _EL_   Location location=getLocationByName(name); _EL_   if (location == null) { _EL_     _id++; _EL_     location=new Location(Integer.toString(_id),name); _EL_     Integer oldSize=Integer.valueOf(_locationHashTable.size()); _EL_     _locationHashTable.put(location.getId(),location); _EL_     setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_locationHashTable.size())); _EL_   } _EL_   return location; _EL_ } _EL_ ', '@Override public void close(){ _EL_   closing=true; _EL_   if (reservations == null || reservations.compareAndSet(0,-1))   doClose(); _EL_ } _EL_ ', 'private void removeOMADownloadFromSharedPrefs(long downloadId){ _EL_   Set<String> omaDownloads=getStoredDownloadInfo(PENDING_OMA_DOWNLOADS); _EL_   for (  String omaDownload : omaDownloads) { _EL_     OMAEntry entry=OMAEntry.parseOMAEntry(omaDownload); _EL_     if (entry.mDownloadId == downloadId) { _EL_       omaDownloads.remove(omaDownload); _EL_       storeDownloadInfo(PENDING_OMA_DOWNLOADS,omaDownloads); _EL_       return; _EL_     } _EL_   } _EL_ } _EL_ ', 'public static boolean isAndroidSdkDirInLocalPropertiesFile(@NotNull File projectDir){ _EL_   String androidHome=getAndroidHomeFromLocalPropertiesFile(projectDir); _EL_   if (!Strings.isNullOrEmpty(androidHome)) { _EL_     String msg=String.format("Found Android SDK home at \'%1$s\' (from local.properties file)",androidHome); _EL_     LOG.info(msg); _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static boolean hasTokenInformation(Bundle bundle){ _EL_   if (bundle == null) { _EL_     return false; _EL_   } _EL_   String token=bundle.getString(TOKEN_KEY); _EL_   if ((token == null) || (token.length() == 0)) { _EL_     return false; _EL_   } _EL_   long expiresMilliseconds=bundle.getLong(EXPIRATION_DATE_KEY,0L); _EL_   if (expiresMilliseconds == 0L) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static Vector2 pow(Vector2 o,double power){ _EL_   return new Vector2(Math.pow(o.x,power),Math.pow(o.z,power)); _EL_ } _EL_ ', 'public static Object invokeStatic(String clazz,String methodName,Class[] types,Object[] values) throws NoSuchMethodException { _EL_   try { _EL_     return invokeStatic(Class.forName(clazz),methodName,types,values); _EL_   } _EL_  catch (  ClassNotFoundException e) { _EL_     throw new NoSuchMethodException("class " + clazz + " not found"); _EL_   } _EL_ } _EL_ ', 'public Prototype undump(InputStream stream,String chunkname) throws IOException { _EL_   if (stream.read() != LUA_SIGNATURE[0] || stream.read() != LUA_SIGNATURE[1] || stream.read() != LUA_SIGNATURE[2] || stream.read() != LUA_SIGNATURE[3])   return null; _EL_   String sname=getSourceName(chunkname); _EL_   LoadState s=new LoadState(stream,sname); _EL_   s.loadHeader(); _EL_ switch (s.luacNumberFormat) { _EL_ case NUMBER_FORMAT_FLOATS_OR_DOUBLES: _EL_ case NUMBER_FORMAT_INTS_ONLY: _EL_ case NUMBER_FORMAT_NUM_PATCH_INT32: _EL_     break; _EL_ default : _EL_   throw new LuaError("unsupported int size"); _EL_ } _EL_ return s.loadFunction(LuaString.valueOf(sname)); _EL_ } _EL_ ', 'public void addButton(URL url,String info,ActionListener al){ _EL_   JButton b=new JButton(new ImageIcon(url,info)); _EL_   b.setToolTipText(info); _EL_   b.setMargin(new Insets(0,0,0,0)); _EL_   b.addActionListener(al); _EL_   b.setBorderPainted(false); _EL_   add(b); _EL_ } _EL_ ', '@Override protected void commitToInput(){ _EL_   JmxBeanSensorAssignment assignment=getInput(); _EL_   if (null != assignment) { _EL_     assignment.setDomain(domainText.getText()); _EL_     assignment.setObjectNameParameters(new HashMap<>(parametersMap)); _EL_     if (allAttributesButton.getSelection()) { _EL_       assignment.setAttributes(Collections.<String>emptySet()); _EL_     } _EL_  else { _EL_       assignment.setAttributes(new HashSet<>(attributesSet)); _EL_     } _EL_   } _EL_ } _EL_ ', 'public java.lang.Object newInstance() throws java.lang.InstantiationException, java.lang.IllegalAccessException { _EL_   Object o=newInstanceImpl(); _EL_   if (o == null) { _EL_     throw new InstantiationException(); _EL_   } _EL_   return o; _EL_ } _EL_ ', 'FormatSpecifierParser(String format){ _EL_   this.format=format; _EL_   this.length=format.length(); _EL_ } _EL_ ', 'private void schedulePlaylistSave(){ _EL_   if (!mPlaylistLoading) { _EL_     if (mPlaylistSavePending.compareAndSet(false,true)) { _EL_       mThreadPoolManager.scheduleOnce(new PlaylistSaveTask(),2,TimeUnit.SECONDS); _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean isToRead(){ _EL_   Iterator<VariableValue> i=variables.iterator(); _EL_   while (i.hasNext()) { _EL_     VariableValue v=i.next(); _EL_     if (v.isToRead()) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void actionPerformed(ActionEvent e){ _EL_   navigateToPriorDemo(); _EL_ } _EL_ ', '@Deprecated public static Integer Integer(int i){ _EL_   return Integer.valueOf(i); _EL_ } _EL_ ', 'public static void v(String tag,String msg,Object... args){ _EL_   if (sLevel > LEVEL_VERBOSE) { _EL_     return; _EL_   } _EL_   if (args.length > 0) { _EL_     msg=String.format(msg,args); _EL_   } _EL_   Log.v(tag,msg); _EL_ } _EL_ ', 'private double match_bitapScore(int e,int x,int loc,String pattern){ _EL_   float accuracy=(float)e / pattern.length(); _EL_   int proximity=Math.abs(loc - x); _EL_   if (Match_Distance == 0) { _EL_     return proximity == 0 ? accuracy : 1.0; _EL_   } _EL_   return accuracy + (proximity / (float)Match_Distance); _EL_ } _EL_ ', 'private void movePos(float deltaY){ _EL_   if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) { _EL_     if (DEBUG) { _EL_       PtrCLog.e(LOG_TAG,String.format("has reached the top")); _EL_     } _EL_     return; _EL_   } _EL_   int to=mPtrIndicator.getCurrentPosY() + (int)deltaY; _EL_   if (mPtrIndicator.willOverTop(to)) { _EL_     if (DEBUG) { _EL_       PtrCLog.e(LOG_TAG,String.format("over top")); _EL_     } _EL_     to=PtrIndicator.POS_START; _EL_   } _EL_   mPtrIndicator.setCurrentPos(to); _EL_   int change=to - mPtrIndicator.getLastPosY(); _EL_   updatePos(change); _EL_ } _EL_ ', 'public UndoableEdit insertString(int where,String str) throws BadLocationException { _EL_   if (where >= count || where < 0) { _EL_     throw new BadLocationException("Invalid location",count); _EL_   } _EL_   char[] chars=str.toCharArray(); _EL_   replace(where,0,chars,0,chars.length); _EL_   if (marks != null) { _EL_     updateMarksForInsert(where,str.length()); _EL_   } _EL_   return new InsertUndo(where,str.length()); _EL_ } _EL_ ', 'public static int copyAndCloseOutput(Reader input,Writer output) throws IOException { _EL_   try { _EL_     return copy(input,output); _EL_   } _EL_   finally { _EL_     output.close(); _EL_   } _EL_ } _EL_ ', 'public Point2D inverseTransform(Point2D src,Point2D dst){ _EL_   try { _EL_     src.setLocation(src.getX() + rotXOffset,src.getY() + rotYOffset); _EL_     dst=rotTransform.inverseTransform(src,dst); _EL_   } _EL_  catch (  NoninvertibleTransformException e) { _EL_     logger.log(Level.FINE,e.getMessage(),e); _EL_   } _EL_   return dst; _EL_ } _EL_ ', 'public int write(byte[] destMac,byte[] packet,int offset,int byteCount){ _EL_   if (destMac == null) { _EL_     throw new NullPointerException("destMac == null"); _EL_   } _EL_   if (packet == null) { _EL_     throw new NullPointerException("packet == null"); _EL_   } _EL_   Arrays.checkOffsetAndCount(packet.length,offset,byteCount); _EL_   if (destMac.length != 6) { _EL_     throw new IllegalArgumentException("MAC length must be 6: " + destMac.length); _EL_   } _EL_   return sendPacket(fd,mInterfaceName,mProtocolType,destMac,packet,offset,byteCount); _EL_ } _EL_ ', 'protected ArrayList<KeyNamePair> loadRMAData(int C_BPartner_ID){ _EL_   ArrayList<KeyNamePair> list=new ArrayList<KeyNamePair>(); _EL_   String sqlStmt="SELECT r.M_RMA_ID, r.DocumentNo || \'-\' || r.Amt from M_RMA r " + "WHERE ISSOTRX=\'N\' AND r.DocStatus in (\'CO\', \'CL\') " + "AND r.C_BPartner_ID=? "+ "AND NOT EXISTS (SELECT * FROM C_Invoice inv "+ "WHERE inv.M_RMA_ID=r.M_RMA_ID AND inv.DocStatus IN (\'CO\', \'CL\'))"; _EL_   PreparedStatement pstmt=null; _EL_   try { _EL_     pstmt=DB.prepareStatement(sqlStmt,null); _EL_     pstmt.setInt(1,C_BPartner_ID); _EL_     ResultSet rs=pstmt.executeQuery(); _EL_     while (rs.next()) { _EL_       list.add(new KeyNamePair(rs.getInt(1),rs.getString(2))); _EL_     } _EL_     rs.close(); _EL_   } _EL_  catch (  SQLException e) { _EL_     log.log(Level.SEVERE,sqlStmt.toString(),e); _EL_   } _EL_  finally { _EL_     if (pstmt != null) { _EL_       try { _EL_         pstmt.close(); _EL_       } _EL_  catch (      Exception ex) { _EL_         log.severe("Could not close prepared statement"); _EL_       } _EL_     } _EL_   } _EL_   return list; _EL_ } _EL_ ', 'public Week(Date time,TimeZone zone,Locale locale){ _EL_   ParamChecks.nullNotPermitted(time,"time"); _EL_   ParamChecks.nullNotPermitted(zone,"zone"); _EL_   ParamChecks.nullNotPermitted(locale,"locale"); _EL_   Calendar calendar=Calendar.getInstance(zone,locale); _EL_   calendar.setTime(time); _EL_   int tempWeek=calendar.get(Calendar.WEEK_OF_YEAR); _EL_   if (tempWeek == 1 && calendar.get(Calendar.MONTH) == Calendar.DECEMBER) { _EL_     this.week=1; _EL_     this.year=(short)(calendar.get(Calendar.YEAR) + 1); _EL_   } _EL_  else { _EL_     this.week=(byte)Math.min(tempWeek,LAST_WEEK_IN_YEAR); _EL_     int yyyy=calendar.get(Calendar.YEAR); _EL_     if (calendar.get(Calendar.MONTH) == Calendar.JANUARY && this.week >= 52) { _EL_       yyyy--; _EL_     } _EL_     this.year=(short)yyyy; _EL_   } _EL_   peg(calendar); _EL_ } _EL_ ', 'public ResourceQueue(final NonBlockingLockManagerWithNewDesign<R> lockService,final R resource){ _EL_   if (lockService == null)   throw new IllegalArgumentException(); _EL_   if (resource == null)   throw new IllegalArgumentException(); _EL_   this.lockService=lockService; _EL_   this.resource=resource; _EL_   this.queue=new LinkedBlockingQueue<T>(); _EL_   this.statisticsTask=new QueueSizeMovingAverageTask(resource.toString(),queue); _EL_ } _EL_ ', 'public synchronized void schedulePeriodicTask(TimerTask task,long period){ _EL_   try { _EL_     m_timer.scheduleAtFixedRate(task,0,period); _EL_   } _EL_  catch (  IllegalStateException ie) { _EL_     m_timer=new Timer(); _EL_     m_timer.scheduleAtFixedRate(task,0,period); _EL_   } _EL_ } _EL_ ', 'public static String abbreviate(String str,FontMetrics fm,int width){ _EL_   int lastblank=0, nchars=0, cumx=0; _EL_   while (cumx < width && nchars < str.length()) { _EL_     if (Character.isWhitespace(str.charAt(nchars))) { _EL_       lastblank=nchars; _EL_     } _EL_     cumx+=fm.charWidth(str.charAt(nchars)); _EL_     nchars++; _EL_   } _EL_   if (nchars < str.length() && lastblank > 0) { _EL_     nchars=lastblank; _EL_   } _EL_   return (nchars > 0 ? str.substring(0,nchars) : str); _EL_ } _EL_ ', 'protected void checkRowIndex(final int row) throws MathIllegalArgumentException { _EL_   if (row < 0 || row >= getRowDimension()) { _EL_     throw new MathIllegalArgumentException(LocalizedCoreFormats.ROW_INDEX,row,0,getRowDimension() - 1); _EL_   } _EL_ } _EL_ ', 'private void nukeSymbols(){ _EL_   _count=0; _EL_   _longestCollisionList=0; _EL_   Arrays.fill(_mainHash,0); _EL_   Arrays.fill(_mainNames,null); _EL_   Arrays.fill(_collList,null); _EL_   _collCount=0; _EL_   _collEnd=0; _EL_ } _EL_ ', 'private static float determineEnemyBlitzStrength(final Territory blitzHere,final List<Route> blitzTerrRoutes,final List<Territory> blockTerr,final GameData data,final PlayerID ePlayer){ _EL_   final HashSet<Integer> ignore=new HashSet<>(); _EL_   ignore.add(1); _EL_   final CompositeMatch<Unit> blitzUnit=new CompositeMatchAnd<>(Matches.unitIsOwnedBy(ePlayer),Matches.UnitCanBlitz,Matches.UnitCanMove); _EL_   final CompositeMatch<Territory> validBlitzRoute=new CompositeMatchAnd<>(Matches.territoryHasNoEnemyUnits(ePlayer,data),Matches.TerritoryIsNotImpassableToLandUnits(ePlayer,data)); _EL_   final List<Route> routes=new ArrayList<>(); _EL_   final List<Unit> blitzUnits=findAttackers(blitzHere,2,ignore,ePlayer,data,blitzUnit,validBlitzRoute,blockTerr,routes,false); _EL_   for (  final Route r : routes) { _EL_     if (r.numberOfSteps() == 2) { _EL_       blitzTerrRoutes.add(r); _EL_     } _EL_   } _EL_   return strength(blitzUnits,true,false,true); _EL_ } _EL_ ', 'public Name join(String identifier){ _EL_   validateLowerUnderscore(identifier); _EL_   List<NamePiece> newPieceList=new ArrayList<>(); _EL_   newPieceList.addAll(namePieces); _EL_   newPieceList.add(new NamePiece(identifier,CaseFormat.LOWER_UNDERSCORE)); _EL_   return new Name(newPieceList); _EL_ } _EL_ ', 'private LocalDateTime parseDate(String dateStr,boolean tryAgain){ _EL_   LocalDateTime date=LocalDateTime.now(ZoneId.of("GMT")); _EL_   if (mDateTimeFormatter == null) { _EL_     initFormatter(dateStr); _EL_   } _EL_   if (mDateTimeFormatter != null) { _EL_     try { _EL_       date=LocalDateTime.parse(dateStr,mDateTimeFormatter); _EL_     } _EL_  catch (    DateTimeParseException e) { _EL_       Timber.d(String.format("ParseException parsing date: %s",dateStr)); _EL_       if (tryAgain) { _EL_         Timber.d("ParseException encountered, re-initializing the date parser"); _EL_         mDateTimeFormatter=null; _EL_         parseDate(dateStr,false); _EL_       } _EL_     } _EL_   } _EL_   return date; _EL_ } _EL_ ', 'public void remove(RequestFilter filter){ _EL_   filters.remove(filter); _EL_ } _EL_ ', 'protected void removeClassifiers(int[] indices){ _EL_   int i; _EL_   if (indices == null) { _EL_     m_ModelClassifiers.removeAllElements(); _EL_   } _EL_  else { _EL_     for (i=indices.length - 1; i >= 0; i--)     m_ModelClassifiers.remove(indices[i]); _EL_   } _EL_   setModified(true); _EL_ } _EL_ ', 'public int numCheckpoints(){ _EL_   return checkpoints.size(); _EL_ } _EL_ ', 'public void addElement(Object anObject){ _EL_   p_data.add(anObject); _EL_   fireIntervalAdded(this,p_data.size() - 1,p_data.size() - 1); _EL_   if (p_data.size() == 1 && m_selectedObject == null && anObject != null)   setSelectedItem(anObject); _EL_ } _EL_ ', 'public Builder addListenUrls(List<String> urls){ _EL_   List<String> needAdd=new ArrayList<String>(); _EL_   for (  String url : urls) { _EL_     if (!UrlUtil.isUrl(url)) { _EL_       continue; _EL_     } _EL_     needAdd.add(url); _EL_   } _EL_   if (!CollectionUtil.isEmpty(needAdd)) { _EL_     if (mListenUrls == null) { _EL_       mListenUrls=new HashSet<String>(); _EL_     } _EL_     mListenUrls.addAll(needAdd); _EL_   } _EL_   return this; _EL_ } _EL_ ', '@Override public boolean isCellEditable(int row,int column){ _EL_   EnvVar envVar=dataList.get(row); _EL_   if (column == COL_VALUE) { _EL_     return true; _EL_   } _EL_   return !envVar.isPredefined(); _EL_ } _EL_ ', 'private static char[] zzUnpackCMap(String packed){ _EL_   char[] map=new char[0x10000]; _EL_   int i=0; _EL_   int j=0; _EL_   while (i < 150) { _EL_     int count=packed.charAt(i++); _EL_     char value=packed.charAt(i++); _EL_     do     map[j++]=value; _EL_  while (--count > 0); _EL_   } _EL_   return map; _EL_ } _EL_ ', 'private boolean dropInTrash(){ _EL_   if (mHighlightedBlockView != null) { _EL_     mHighlightedBlockView.setHighlightedConnection(null); _EL_     mHighlightedBlockView=null; _EL_   } _EL_   mDraggedConnections.clear(); _EL_   return mController.trashRootBlock(mPendingDrag.getRootDraggedBlock()); _EL_ } _EL_ ', '<T>List<T> concatValues(final T[]... data){ _EL_   final List<T> rv=new ArrayList<>(); _EL_   for (  T[] values : data) { _EL_     rv.addAll(Arrays.asList(values)); _EL_   } _EL_   return rv; _EL_ } _EL_ ', 'public DagIterator(Graph pattern){ _EL_   for (  Edge edge : pattern.getEdges()) { _EL_     if (Edges.isDirectedEdge(edge) || Edges.isUndirectedEdge(edge)) { _EL_       continue; _EL_     } _EL_     throw new IllegalArgumentException("The graph may consist only of " + "directed and undirected edges: " + edge); _EL_   } _EL_   decoratedGraphs.add(new DecoratedGraph(pattern)); _EL_ } _EL_ ', 'private boolean validateCustomCatalog(String title,String value){ _EL_   return false; _EL_ } _EL_ ', 'private void restoreSortingSelection(int[] selection,int lead,ModelChange change){ _EL_   for (int i=selection.length - 1; i >= 0; i--) { _EL_     selection[i]=convertRowIndexToView(selection[i],change); _EL_   } _EL_   lead=convertRowIndexToView(lead,change); _EL_   if (selection.length == 0 || (selection.length == 1 && selection[0] == getSelectedRow())) { _EL_     return; _EL_   } _EL_   selectionModel.setValueIsAdjusting(true); _EL_   selectionModel.clearSelection(); _EL_   for (int i=selection.length - 1; i >= 0; i--) { _EL_     if (selection[i] != -1) { _EL_       selectionModel.addSelectionInterval(selection[i],selection[i]); _EL_     } _EL_   } _EL_   SwingUtilities2.setLeadAnchorWithoutSelection(selectionModel,lead,lead); _EL_   selectionModel.setValueIsAdjusting(false); _EL_ } _EL_ ', 'public synchronized byte[] toByteArray(){ _EL_   int remaining=count; _EL_   if (remaining == 0) { _EL_     return EMPTY_BYTE_ARRAY; _EL_   } _EL_   byte newbuf[]=new byte[remaining]; _EL_   int pos=0; _EL_   for (  byte[] buf : buffers) { _EL_     int c=Math.min(buf.length,remaining); _EL_     System.arraycopy(buf,0,newbuf,pos,c); _EL_     pos+=c; _EL_     remaining-=c; _EL_     if (remaining == 0) { _EL_       break; _EL_     } _EL_   } _EL_   return newbuf; _EL_ } _EL_ ', '@After public void clean(){ _EL_   mute(null); _EL_   mute(null); _EL_   mute(null); _EL_ } _EL_ ', 'public void consume(int eventCount,long timeoutInMillis,Predicate<Event> condition) throws TimeoutException { _EL_   if (eventCount < 0)   throw new IllegalArgumentException("The eventCount may not be negative"); _EL_   if (eventCount == 0)   return; _EL_   int eventsRemaining=eventCount; _EL_   final long stopTime=System.currentTimeMillis() + timeoutInMillis; _EL_   while (eventsRemaining > 0 && System.currentTimeMillis() < stopTime) { _EL_     Event nextEvent=queue.poll(); _EL_     if (nextEvent != null) { _EL_       if (condition.test(nextEvent)) { _EL_         --eventsRemaining; _EL_         consumedEvents.accept(nextEvent); _EL_       } _EL_  else { _EL_         ignoredEvents.accept(nextEvent); _EL_       } _EL_     } _EL_   } _EL_   if (eventsRemaining > 0) { _EL_     throw new TimeoutException("Received " + (eventCount - eventsRemaining) + " of "+ eventCount+ " in "+ timeoutInMillis+ "ms"); _EL_   } _EL_ } _EL_ ', 'public static int randGaussian(final int mean,final int sd){ _EL_   return (int)(rand.nextGaussian() * sd + mean); _EL_ } _EL_ ', 'private float computeOverscrollPercent(){ _EL_   if (mOverScrollOffset >= 0) { _EL_     return mOverScrollOffset / mMaxOverScroll; _EL_   } _EL_  else { _EL_     return mOverScrollOffset / mMaxUnderScroll; _EL_   } _EL_ } _EL_ ', 'public IVector(int c){ _EL_   vector=new int[Math.max(defaultCapacity,c)]; _EL_ } _EL_ ', 'public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){ _EL_   final Request request=requestEvent.getRequest(); _EL_   final SipProvider sipProvider=(SipProvider)requestEvent.getSource(); _EL_   ServerTransaction st=serverTransaction; _EL_   try { _EL_     if (st == null) { _EL_       try { _EL_         st=sipProvider.getNewServerTransaction(request); _EL_       } _EL_  catch (      TransactionUnavailableException tae) { _EL_         tae.printStackTrace(); _EL_         return; _EL_       } _EL_ catch (      TransactionAlreadyExistsException taex) { _EL_         return; _EL_       } _EL_     } _EL_     final String toTag="" + System.nanoTime(); _EL_     Response response=messageFactory.createResponse(Response.RINGING,request); _EL_     ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME); _EL_     toHeader.setTag(toTag); _EL_     st.sendResponse(response); _EL_     response=messageFactory.createResponse(Response.OK,request); _EL_     final Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">"); _EL_     final ContactHeader contactHeader=headerFactory.createContactHeader(address); _EL_     response.addHeader(contactHeader); _EL_     toHeader=(ToHeader)response.getHeader(ToHeader.NAME); _EL_     toHeader.setTag(toTag); _EL_     st.sendResponse(response); _EL_   } _EL_  catch (  Exception ex) { _EL_     ex.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'public static IgniteLogger logger(GridKernalContext ctx,AtomicReference<IgniteLogger> logRef,Object obj){ _EL_   IgniteLogger log=logRef.get(); _EL_   if (log == null) { _EL_     logRef.compareAndSet(null,ctx.log(obj.getClass())); _EL_     log=logRef.get(); _EL_   } _EL_   return log; _EL_ } _EL_ ', 'protected boolean readReceiveDelay(){ _EL_   try { _EL_     receiveDelay=Integer.parseInt(receiveDelayField.getText()); _EL_   } _EL_  catch (  Exception e) { _EL_     statusText1.setText(rb.getString("Error7")); _EL_     statusText1.setVisible(true); _EL_     receiveDelay=0; _EL_     errorInStatus1=true; _EL_     resetNotes2(); _EL_     return (false); _EL_   } _EL_   if (receiveDelay < 0) { _EL_     statusText1.setText(rb.getString("Error8")); _EL_     statusText1.setVisible(true); _EL_     receiveDelay=0; _EL_     errorInStatus1=true; _EL_     resetNotes2(); _EL_     return (false); _EL_   } _EL_   if (receiveDelay > 65535) { _EL_     statusText1.setText(rb.getString("Error9")); _EL_     statusText1.setVisible(true); _EL_     receiveDelay=0; _EL_     errorInStatus1=true; _EL_     resetNotes2(); _EL_     return (false); _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private void writeIndent(int times) throws IOException { _EL_   for (int i=options.getBaseIndent() + times; i > 0; i--) { _EL_     writer.write(options.getIndent()); _EL_   } _EL_ } _EL_ ', '@Override public int hashCode(){ _EL_   int result=1; _EL_   Iterator<?> it=iterator(); _EL_   while (it.hasNext()) { _EL_     Object object=it.next(); _EL_     result=(31 * result) + (object == null ? 0 : object.hashCode()); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'void doHandleJavaMouseEvent(MouseEvent mouseEvent){ _EL_   if (!XToolkit.isLeftMouseButton(mouseEvent) && !XToolkit.isRightMouseButton(mouseEvent)) { _EL_     return; _EL_   } _EL_   XBaseWindow grabWindow=XAwtState.getGrabWindow(); _EL_   Point ptGlobal=mouseEvent.getLocationOnScreen(); _EL_   if (!hasPointerMoved) { _EL_     if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) { _EL_       hasPointerMoved=true; _EL_     } _EL_   } _EL_   XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal); _EL_   XMenuItemPeer item=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null; _EL_   XBaseMenuWindow cwnd=getShowingLeaf(); _EL_ switch (mouseEvent.getID()) { _EL_ case MouseEvent.MOUSE_PRESSED: _EL_     showingMousePressedSubmenu=null; _EL_   if ((grabWindow == this) && (wnd == null)) { _EL_     ungrabInput(); _EL_   } _EL_  else { _EL_     grabInput(); _EL_     if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) { _EL_       if (wnd.getShowingSubmenu() == item) { _EL_         showingMousePressedSubmenu=(XMenuPeer)item; _EL_       } _EL_       wnd.selectItem(item,true); _EL_     } _EL_  else { _EL_       if (wnd != null) { _EL_         wnd.selectItem(null,false); _EL_       } _EL_     } _EL_   } _EL_ break; _EL_ case MouseEvent.MOUSE_RELEASED: _EL_ if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) { _EL_ if (item instanceof XMenuPeer) { _EL_   if (showingMousePressedSubmenu == item) { _EL_     if (wnd instanceof XMenuBarPeer) { _EL_       ungrabInput(); _EL_     } _EL_  else { _EL_       wnd.selectItem(item,false); _EL_     } _EL_   } _EL_ } _EL_  else { _EL_   item.action(mouseEvent.getWhen()); _EL_   ungrabInput(); _EL_ } _EL_ } _EL_  else { _EL_ if (hasPointerMoved || (wnd instanceof XMenuBarPeer)) { _EL_   ungrabInput(); _EL_ } _EL_ } _EL_ showingMousePressedSubmenu=null; _EL_ break; _EL_ case MouseEvent.MOUSE_DRAGGED: _EL_ if (wnd != null) { _EL_ if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) { _EL_ if (grabWindow == this) { _EL_ wnd.selectItem(item,true); _EL_ } _EL_ } _EL_  else { _EL_ wnd.selectItem(null,false); _EL_ } _EL_ } _EL_  else { _EL_ if (cwnd != null) { _EL_ cwnd.selectItem(null,false); _EL_ } _EL_ } _EL_ break; _EL_ } _EL_ } _EL_ ', 'public boolean isInvalidNode(){ _EL_   ASTNode first=fNodes.get(0); _EL_   ASTNode candidate=first.getParent(); _EL_   if (candidate == null)   return false; _EL_   if (candidate.getNodeType() == ASTNode.METHOD_DECLARATION)   return true; _EL_   return false; _EL_ } _EL_ ', 'public void push(final float value){ _EL_   int bits=Float.floatToIntBits(value); _EL_   if (bits == 0L || bits == 0x3f800000 || bits == 0x40000000) { _EL_     mv.visitInsn(Opcodes.FCONST_0 + (int)value); _EL_   } _EL_  else { _EL_     mv.visitLdcInsn(value); _EL_   } _EL_ } _EL_ ', 'public synchronized void removeBatchClustererListener(BatchClustererListener cl){ _EL_   m_batchClustererListeners.remove(cl); _EL_ } _EL_ ', 'void removeKnownObject(ParseObject object){ _EL_ synchronized (mutex) { _EL_     knownObjects.remove(object); _EL_   } _EL_ } _EL_ ', 'static HeapBytesStore<byte[]> wrap(@NotNull byte[] bytes){ _EL_   return HeapBytesStore.wrap(bytes); _EL_ } _EL_ ', 'private static String parse(JsonValue base){ _EL_   if (!base.isString()) { _EL_     return null; _EL_   } _EL_   return buildString(base.asString()); _EL_ } _EL_ ', 'public void beforeInsert(int index,char element){ _EL_   if (index > size || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size); _EL_   ensureCapacity(size + 1); _EL_   System.arraycopy(elements,index,elements,index + 1,size - index); _EL_   elements[index]=element; _EL_   size++; _EL_ } _EL_ ', 'private void growEntries(){ _EL_   int newLen=(next.length << 1) + 1; _EL_   int[] newNext=new int[newLen]; _EL_   GridUnsafe.copyMemory(next,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2); _EL_   next=newNext; _EL_   nextEmpty=new int[newLen]; _EL_   Arrays.fill(nextEmpty,-1); _EL_   Object[] newObjs=new Object[newLen]; _EL_   System.arraycopy(objs,0,newObjs,0,size); _EL_   objs=newObjs; _EL_ } _EL_ ', 'public SidedPlane(final Vector p,final boolean onSide,final Vector A,final Vector B){ _EL_   super(A,B); _EL_   sigNum=onSide ? Math.signum(evaluate(p)) : -Math.signum(evaluate(p)); _EL_   if (sigNum == 0.0)   throw new IllegalArgumentException("Cannot determine sidedness because check point is on plane."); _EL_ } _EL_ ', 'public static boolean isInputStreamGZIPCompressed(final PushbackInputStream inputStream) throws IOException { _EL_   if (inputStream == null)   return false; _EL_   byte[] signature=new byte[2]; _EL_   int readStatus=inputStream.read(signature); _EL_   inputStream.unread(signature); _EL_   int streamHeader=((int)signature[0] & 0xff) | ((signature[1] << 8) & 0xff00); _EL_   return readStatus == 2 && GZIPInputStream.GZIP_MAGIC == streamHeader; _EL_ } _EL_ ', 'void insertOp(int pos,int length,int op){ _EL_   int totalLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH); _EL_   for (int i=totalLen - 1; i >= pos; i--) { _EL_     m_ops.setOp(i + length,m_ops.getOp(i)); _EL_   } _EL_   m_ops.setOp(pos,op); _EL_   m_ops.setOp(OpMap.MAPINDEX_LENGTH,totalLen + length); _EL_ } _EL_ ', 'public static void registerDecayableObject(Decayable obj){ _EL_   decayObjects.add(obj); _EL_ } _EL_ ', 'public static void assertExpectedOutputContains(String expectedString,String x){ _EL_   if (!x.contains(expectedString)) { _EL_     fail("expected \'" + expectedString + "\' not found in \'"+ x+ "\'"); _EL_   } _EL_ } _EL_ ', 'public boolean remove(String classname){ _EL_   String pkgname; _EL_   HashSet<String> names; _EL_   classname=cleanUp(classname); _EL_   pkgname=extractPackage(classname); _EL_   names=m_Cache.get(pkgname); _EL_   if (names != null) { _EL_     return names.remove(classname); _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public void classLoaderDestroy(DynamicClassLoader loader){ _EL_   Method destroy=getDestroyMethod(_resource.getClass()); _EL_   if (destroy == null)   return; _EL_   try { _EL_     destroy.invoke(_resource); _EL_   } _EL_  catch (  Throwable e) { _EL_     log.log(Level.WARNING,e.toString(),e); _EL_   } _EL_ } _EL_ ', 'public boolean deleteAttachmentPoint(DatapathId sw,OFPort port){ _EL_   AttachmentPoint ap=new AttachmentPoint(sw,port,new Date(0)); _EL_   if (this.oldAPs != null) { _EL_     ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>(); _EL_     apList.addAll(this.oldAPs); _EL_     int index=apList.indexOf(ap); _EL_     if (index > 0) { _EL_       apList.remove(index); _EL_       this.oldAPs=apList; _EL_     } _EL_   } _EL_   if (this.attachmentPoints != null) { _EL_     ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>(); _EL_     apList.addAll(this.attachmentPoints); _EL_     int index=apList.indexOf(ap); _EL_     if (index > 0) { _EL_       apList.remove(index); _EL_       this.attachmentPoints=apList; _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'static boolean isAssignableTo(ClassNode type,ClassNode toBeAssignedTo){ _EL_   if (UNKNOWN_PARAMETER_TYPE == type)   return true; _EL_   if (type == toBeAssignedTo)   return true; _EL_   if (toBeAssignedTo.redirect() == STRING_TYPE && type.redirect() == GSTRING_TYPE) { _EL_     return true; _EL_   } _EL_   if (isPrimitiveType(toBeAssignedTo))   toBeAssignedTo=getWrapper(toBeAssignedTo); _EL_   if (isPrimitiveType(type))   type=getWrapper(type); _EL_   if (Double_TYPE == toBeAssignedTo) { _EL_     return type.isDerivedFrom(Number_TYPE); _EL_   } _EL_   if (Float_TYPE == toBeAssignedTo) { _EL_     return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect(); _EL_   } _EL_   if (Long_TYPE == toBeAssignedTo) { _EL_     return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect() && Float_TYPE != type.redirect(); _EL_   } _EL_   if (Integer_TYPE == toBeAssignedTo) { _EL_     return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect() && Float_TYPE != type.redirect() && Long_TYPE != type.redirect(); _EL_   } _EL_   if (Short_TYPE == toBeAssignedTo) { _EL_     return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect() && Float_TYPE != type.redirect() && Long_TYPE != type.redirect() && Integer_TYPE != type.redirect(); _EL_   } _EL_   if (Byte_TYPE == toBeAssignedTo) { _EL_     return type.redirect() == Byte_TYPE; _EL_   } _EL_   if (type.isArray() && toBeAssignedTo.isArray()) { _EL_     return isAssignableTo(type.getComponentType(),toBeAssignedTo.getComponentType()); _EL_   } _EL_   if (type.isDerivedFrom(GSTRING_TYPE) && STRING_TYPE.equals(toBeAssignedTo)) { _EL_     return true; _EL_   } _EL_   if (toBeAssignedTo.isDerivedFrom(GSTRING_TYPE) && STRING_TYPE.equals(type)) { _EL_     return true; _EL_   } _EL_   if (implementsInterfaceOrIsSubclassOf(type,toBeAssignedTo)) { _EL_     if (OBJECT_TYPE.equals(toBeAssignedTo))     return true; _EL_     if (toBeAssignedTo.isUsingGenerics()) { _EL_       GenericsType gt=GenericsUtils.buildWildcardType(toBeAssignedTo); _EL_       return gt.isCompatibleWith(type); _EL_     } _EL_     return true; _EL_   } _EL_   if (type.isDerivedFrom(CLOSURE_TYPE) && isSAMType(toBeAssignedTo)) { _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public synchronized int totalRecoverFiles(){ _EL_   int total=0; _EL_   for (  File file : fileDetails.values()) { _EL_     if (file.reused() == false) { _EL_       total++; _EL_     } _EL_   } _EL_   return total; _EL_ } _EL_ ', 'public static AnimGameItem process(MD5Model md5Model,MD5AnimModel animModel,Vector3f defaultColour) throws Exception { _EL_   List<Matrix4f> invJointMatrices=calcInJointMatrices(md5Model); _EL_   List<AnimatedFrame> animatedFrames=processAnimationFrames(md5Model,animModel,invJointMatrices); _EL_   List<Mesh> list=new ArrayList<>(); _EL_   for (  MD5Mesh md5Mesh : md5Model.getMeshes()) { _EL_     Mesh mesh=generateMesh(md5Model,md5Mesh); _EL_     handleTexture(mesh,md5Mesh,defaultColour); _EL_     list.add(mesh); _EL_   } _EL_   Mesh[] meshes=new Mesh[list.size()]; _EL_   meshes=list.toArray(meshes); _EL_   AnimGameItem result=new AnimGameItem(meshes,animatedFrames,invJointMatrices); _EL_   return result; _EL_ } _EL_ ', '@Override @Timed public void deleteAssignment(Experiment experiment,User.ID userID,Context context,Application.Name appName,Assignment currentAssignment){ _EL_   deleteUserFromLookUp(experiment.getID(),userID,context); _EL_   boolean countUp=false; _EL_   assignmentsCountExecutor.execute(new AssignmentCountEnvelope(assignmentsRepository,experimentRepository,dbRepository,experiment,currentAssignment,countUp,eventLog,null,assignUserToExport,assignBucketCount)); _EL_   deleteAssignmentOld(experiment.getID(),userID,context,appName,currentAssignment.getBucketLabel()); _EL_   removeIndexUserToExperiment(userID,experiment.getID(),context,appName); _EL_   removeIndexUserToBucket(userID,experiment.getID(),context,currentAssignment.getBucketLabel()); _EL_   removeIndexExperimentsToUser(userID,experiment.getID(),context,appName); _EL_ } _EL_ ', 'private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){ _EL_   return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update); _EL_ } _EL_ ', 'public static ThreadDump create(){ _EL_   ThreadDump threadDump=_threadDumpRef.get(); _EL_   if (threadDump == null) { _EL_     threadDump=new ThreadDumpPro(); _EL_     _threadDumpRef.compareAndSet(null,threadDump); _EL_     threadDump=_threadDumpRef.get(); _EL_   } _EL_   return threadDump; _EL_ } _EL_ ', 'private void checkStart(){ _EL_   if (mCanProcessAudio && !mOutput.isRunning() && mOutput.available() <= mBufferStartThreshold) { _EL_     mOutput.start(); _EL_   } _EL_ } _EL_ ', 'private E unlinkFirst(){ _EL_   Node<E> f=first; _EL_   if (f == null)   return null; _EL_   Node<E> n=f.next; _EL_   E item=f.item; _EL_   f.item=null; _EL_   f.next=f; _EL_   first=n; _EL_   if (n == null)   last=null; _EL_  else   n.prev=null; _EL_   --count; _EL_   notFull.signal(); _EL_   return item; _EL_ } _EL_ ', 'public IStatus run(IProgressMonitor monitor){ _EL_   InputStream input=null; _EL_   FileOutputStream output=null; _EL_   IStatus jobStatus=Status.OK_STATUS; _EL_   byte[] b=new byte[1024]; _EL_   int bytesRead; _EL_   try { _EL_     HttpURLConnection connection=(HttpURLConnection)url.openConnection(); _EL_     input=url.openStream(); _EL_     long totalBytesRead=0L; _EL_     int responseStatusCode=connection.getResponseCode(); _EL_     if (responseStatusCode >= HttpURLConnection.HTTP_BAD_REQUEST) { _EL_       jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,MessageFormat.format("Remote ServerError: {0} ({1})",responseStatusCode,connection.getResponseMessage())); _EL_     } _EL_     long contentLength=connection.getContentLength(); _EL_     output=new FileOutputStream(target); _EL_     monitor.beginTask("Downloading " + url.toString(),(int)contentLength); _EL_     while (jobStatus == Status.OK_STATUS) { _EL_       if (contentLength > 0 && totalBytesRead >= contentLength) { _EL_         break; _EL_       } _EL_       bytesRead=input.read(b); _EL_       if (bytesRead == -1) { _EL_         break; _EL_       } _EL_       output.write(b,0,bytesRead); _EL_       totalBytesRead+=bytesRead; _EL_       monitor.worked(bytesRead); _EL_       if (monitor.isCanceled()) { _EL_         jobStatus=Status.CANCEL_STATUS; _EL_         break; _EL_       } _EL_     } _EL_   } _EL_  catch (  MalformedURLException e) { _EL_     jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,"Malformed URL: " + url.toExternalForm(),e); _EL_   } _EL_ catch (  IOException e) { _EL_     jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,"IO error while downloading " + url.toExternalForm(),e); _EL_   } _EL_   closeStreams(input,output); _EL_   return jobStatus; _EL_ } _EL_ ', 'private static synchronized void initDocBuilderFactory(){ _EL_   docBuilderFactory=DocumentBuilderFactory.newInstance(); _EL_   docBuilderFactory.setIgnoringComments(true); _EL_   docBuilderFactory.setCoalescing(true); _EL_ } _EL_ ', 'public double interceptStdErr(){ _EL_   return Math.sqrt(svar0); _EL_ } _EL_ ', 'private void createMissingValues(){ _EL_   String sql="SELECT ra.A_RegistrationAttribute_ID " + "FROM A_RegistrationAttribute ra" + " LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)"+ " LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) "+ "WHERE r.A_Registration_ID=?"+ " AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v "+ "WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)"; _EL_   PreparedStatement pstmt=null; _EL_   try { _EL_     pstmt=DB.prepareStatement(sql,get_TrxName()); _EL_     pstmt.setInt(1,getA_Registration_ID()); _EL_     ResultSet rs=pstmt.executeQuery(); _EL_     while (rs.next()) { _EL_       MRegistrationValue v=new MRegistrationValue(this,rs.getInt(1),"?"); _EL_       v.saveEx(); _EL_     } _EL_     rs.close(); _EL_     pstmt.close(); _EL_     pstmt=null; _EL_   } _EL_  catch (  Exception e) { _EL_     log.log(Level.SEVERE,null,e); _EL_   } _EL_   try { _EL_     if (pstmt != null)     pstmt.close(); _EL_     pstmt=null; _EL_   } _EL_  catch (  Exception e) { _EL_     pstmt=null; _EL_   } _EL_ } _EL_ ', "private static String normalisePath(String path){ _EL_   return path.replace('\\\\','/'); _EL_ } _EL_ ", 'public void startLaunchNotifier(){ _EL_   if (m_launchNotification == null)   throw new NullPointerException(); _EL_   m_launchNotifierThread.setDaemon(true); _EL_   m_launchNotifierThread.start(); _EL_ } _EL_ ', 'private static void encode(List<AclEntry> acl,long address){ _EL_   long offset=address; _EL_   for (  AclEntry ace : acl) { _EL_     int flags=0; _EL_     UserPrincipal who=ace.principal(); _EL_     if (!(who instanceof UnixUserPrincipals.User))     throw new ProviderMismatchException(); _EL_     UnixUserPrincipals.User user=(UnixUserPrincipals.User)who; _EL_     int uid; _EL_     if (user.isSpecial()) { _EL_       uid=-1; _EL_       if (who == UnixUserPrincipals.SPECIAL_OWNER)       flags|=ACE_OWNER; _EL_  else       if (who == UnixUserPrincipals.SPECIAL_GROUP)       flags|=(ACE_GROUP | ACE_IDENTIFIER_GROUP); _EL_  else       if (who == UnixUserPrincipals.SPECIAL_EVERYONE)       flags|=ACE_EVERYONE; _EL_  else       throw new AssertionError("Unable to map special identifier"); _EL_     } _EL_  else { _EL_       if (user instanceof UnixUserPrincipals.Group) { _EL_         uid=user.gid(); _EL_         flags|=ACE_IDENTIFIER_GROUP; _EL_       } _EL_  else { _EL_         uid=user.uid(); _EL_       } _EL_     } _EL_     int type; _EL_ switch (ace.type()) { _EL_ case ALLOW: _EL_       type=ACE_ACCESS_ALLOWED_ACE_TYPE; _EL_     break; _EL_ case DENY: _EL_   type=ACE_ACCESS_DENIED_ACE_TYPE; _EL_ break; _EL_ case AUDIT: _EL_ type=ACE_SYSTEM_AUDIT_ACE_TYPE; _EL_ break; _EL_ case ALARM: _EL_ type=ACE_SYSTEM_ALARM_ACE_TYPE; _EL_ break; _EL_ default : _EL_ throw new AssertionError("Unable to map ACE type"); _EL_ } _EL_ Set<AclEntryPermission> aceMask=ace.permissions(); _EL_ int mask=0; _EL_ if (aceMask.contains(AclEntryPermission.READ_DATA)) mask|=ACE_READ_DATA; _EL_ if (aceMask.contains(AclEntryPermission.WRITE_DATA)) mask|=ACE_WRITE_DATA; _EL_ if (aceMask.contains(AclEntryPermission.APPEND_DATA)) mask|=ACE_APPEND_DATA; _EL_ if (aceMask.contains(AclEntryPermission.READ_NAMED_ATTRS)) mask|=ACE_READ_NAMED_ATTRS; _EL_ if (aceMask.contains(AclEntryPermission.WRITE_NAMED_ATTRS)) mask|=ACE_WRITE_NAMED_ATTRS; _EL_ if (aceMask.contains(AclEntryPermission.EXECUTE)) mask|=ACE_EXECUTE; _EL_ if (aceMask.contains(AclEntryPermission.DELETE_CHILD)) mask|=ACE_DELETE_CHILD; _EL_ if (aceMask.contains(AclEntryPermission.READ_ATTRIBUTES)) mask|=ACE_READ_ATTRIBUTES; _EL_ if (aceMask.contains(AclEntryPermission.WRITE_ATTRIBUTES)) mask|=ACE_WRITE_ATTRIBUTES; _EL_ if (aceMask.contains(AclEntryPermission.DELETE)) mask|=ACE_DELETE; _EL_ if (aceMask.contains(AclEntryPermission.READ_ACL)) mask|=ACE_READ_ACL; _EL_ if (aceMask.contains(AclEntryPermission.WRITE_ACL)) mask|=ACE_WRITE_ACL; _EL_ if (aceMask.contains(AclEntryPermission.WRITE_OWNER)) mask|=ACE_WRITE_OWNER; _EL_ if (aceMask.contains(AclEntryPermission.SYNCHRONIZE)) mask|=ACE_SYNCHRONIZE; _EL_ Set<AclEntryFlag> aceFlags=ace.flags(); _EL_ if (aceFlags.contains(AclEntryFlag.FILE_INHERIT)) flags|=ACE_FILE_INHERIT_ACE; _EL_ if (aceFlags.contains(AclEntryFlag.DIRECTORY_INHERIT)) flags|=ACE_DIRECTORY_INHERIT_ACE; _EL_ if (aceFlags.contains(AclEntryFlag.NO_PROPAGATE_INHERIT)) flags|=ACE_NO_PROPAGATE_INHERIT_ACE; _EL_ if (aceFlags.contains(AclEntryFlag.INHERIT_ONLY)) flags|=ACE_INHERIT_ONLY_ACE; _EL_ unsafe.putInt(offset + OFFSETOF_UID,uid); _EL_ unsafe.putInt(offset + OFFSETOF_MASK,mask); _EL_ unsafe.putShort(offset + OFFSETOF_FLAGS,(short)flags); _EL_ unsafe.putShort(offset + OFFSETOF_TYPE,(short)type); _EL_ offset+=SIZEOF_ACE_T; _EL_ } _EL_ } _EL_ ', 'public void updateValue(final Object value,final boolean isSelected,boolean sync){ _EL_   if (isReadOnly()) { _EL_     return; _EL_   } _EL_   if (GenericFormFactory.isTextForm(formType)) { _EL_     textString=(String)value; _EL_     if (textString != null && textString.equals(lastTextString)) { _EL_       sync=false; _EL_     } _EL_     lastTextString=textString; _EL_   } _EL_  else { _EL_     textString=(String)value; _EL_     this.isSelected=isSelected; _EL_     if (isSelected != lastIsSelected && lastTextString != null && textString != null && textString.equals(lastTextString)) { _EL_       sync=false; _EL_     } _EL_     lastTextString=textString; _EL_     lastIsSelected=isSelected; _EL_   } _EL_   if ((sync && guiType != FormFactory.ULC) && guiComp != null) { _EL_     syncGUI(value); _EL_   } _EL_ } _EL_ ', 'public boolean hasNext() throws IOException { _EL_   dataInputStream.mark(1); _EL_   int val=dataInputStream.read(); _EL_   dataInputStream.reset(); _EL_   return val != -1; _EL_ } _EL_ ', "private final StringBuilder appendParameterSignature(StringBuilder buffer,char[][] parameterTypes,char[][] parameterNames){ _EL_   if (parameterTypes != null) { _EL_     for (int i=0; i < parameterTypes.length; i++) { _EL_       if (i > 0) { _EL_         buffer.append(','); _EL_         buffer.append(' '); _EL_       } _EL_       buffer.append(parameterTypes[i]); _EL_       if (parameterNames != null && parameterNames[i] != null) { _EL_         buffer.append(' '); _EL_         buffer.append(parameterNames[i]); _EL_       } _EL_     } _EL_   } _EL_   return buffer; _EL_ } _EL_ ", 'public void completeHeartbeat(Database database,long seqno,String eventId) throws SQLException { _EL_   if (logger.isDebugEnabled())   logger.debug("Processing slave heartbeat update"); _EL_   Statement st=null; _EL_   ResultSet rs=null; _EL_   Timestamp sts=new Timestamp(0); _EL_   Timestamp now=new Timestamp(System.currentTimeMillis()); _EL_   ArrayList<Column> whereClause=new ArrayList<Column>(); _EL_   ArrayList<Column> values=new ArrayList<Column>(); _EL_   if (logger.isDebugEnabled())   logger.debug("Processing slave heartbeat update: " + now); _EL_   try { _EL_     st=database.createStatement(); _EL_     rs=st.executeQuery(sourceTsQuery); _EL_     if (rs.next())     sts=rs.getTimestamp(1); _EL_   } _EL_   finally { _EL_     if (rs != null) { _EL_       try { _EL_         rs.close(); _EL_       } _EL_  catch (      SQLException e) { _EL_       } _EL_     } _EL_     if (st != null) { _EL_       try { _EL_         st.close(); _EL_       } _EL_  catch (      SQLException e) { _EL_       } _EL_     } _EL_   } _EL_   long lag_millis=now.getTime() - sts.getTime(); _EL_   hbId.setValue(KEY); _EL_   whereClause.add(hbId); _EL_   hbSeqno.setValue(seqno); _EL_   hbEventId.setValue(eventId); _EL_   hbTargetTstamp.setValue(now); _EL_   hbLagMillis.setValue(lag_millis); _EL_   values.add(hbSeqno); _EL_   values.add(hbEventId); _EL_   values.add(hbTargetTstamp); _EL_   values.add(hbLagMillis); _EL_   database.update(hbTable,whereClause,values); _EL_ } _EL_ ', 'public CipherParameters decrypt(byte[] in,int inOff,int inLen,int keyLen) throws IllegalArgumentException { _EL_   if (!key.isPrivate()) { _EL_     throw new IllegalArgumentException("Private key required for decryption"); _EL_   } _EL_   BigInteger n=key.getModulus(); _EL_   BigInteger d=key.getExponent(); _EL_   byte[] C=new byte[inLen]; _EL_   System.arraycopy(in,inOff,C,0,C.length); _EL_   BigInteger c=new BigInteger(1,C); _EL_   BigInteger r=c.modPow(d,n); _EL_   return generateKey(n,r,keyLen); _EL_ } _EL_ ', 'public PrivateKey loadPrivateKey() throws Exception { _EL_   if (defaultKeys) { _EL_     return getPrivateKeyFromString(RSAKeyLoader.DEFAULT_PKEY); _EL_   } _EL_   if (priKey == null) { _EL_     FileReader f=new FileReader(path + "privatekey" + this.id); _EL_     BufferedReader r=new BufferedReader(f); _EL_     String tmp=""; _EL_     String key=""; _EL_     while ((tmp=r.readLine()) != null) { _EL_       key=key + tmp; _EL_     } _EL_     f.close(); _EL_     r.close(); _EL_     priKey=getPrivateKeyFromString(key); _EL_   } _EL_   return priKey; _EL_ } _EL_ ', 'public void removeCategoriesListener(SnapshotCategoriesListener listener){ _EL_   listeners.remove(listener); _EL_ } _EL_ ', 'public boolean hasUnsupportedCriticalExtension(){ _EL_   Set extns=getCriticalExtensionOIDs(); _EL_   if (extns == null) { _EL_     return false; _EL_   } _EL_   extns.remove(RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT); _EL_   extns.remove(RFC3280CertPathUtilities.DELTA_CRL_INDICATOR); _EL_   return !extns.isEmpty(); _EL_ } _EL_ ', 'private Integer zGetWeekNumberForASevenDayRange(LocalDate firstDateInRange,WeekFields weekFieldRules,boolean requireUnanimousWeekNumber){ _EL_   ArrayList<Integer> weekNumbersList=new ArrayList<Integer>(); _EL_   for (int daysIntoTheFuture=0; daysIntoTheFuture <= 6; ++daysIntoTheFuture) { _EL_     LocalDate currentDateInRange; _EL_     try { _EL_       currentDateInRange=firstDateInRange.plusDays(daysIntoTheFuture); _EL_       int currentWeekNumber=currentDateInRange.get(weekFieldRules.weekOfWeekBasedYear()); _EL_       weekNumbersList.add(currentWeekNumber); _EL_     } _EL_  catch (    Exception ex) { _EL_       return 1; _EL_     } _EL_   } _EL_   boolean isUnanimous=(InternalUtilities.areObjectsEqual(weekNumbersList.get(0),weekNumbersList.get(6))); _EL_   if (isUnanimous) { _EL_     return weekNumbersList.get(0); _EL_   } _EL_   if (requireUnanimousWeekNumber) { _EL_     return null; _EL_   } _EL_   int mostCommonWeekNumber=InternalUtilities.getMostCommonElementInList(weekNumbersList); _EL_   return mostCommonWeekNumber; _EL_ } _EL_ ', 'private boolean isNotInArray(String str,String[] array){ _EL_   for (int i=0; i < array.length; i++) { _EL_     if (str.equals(array[i])) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'Node cloneOrImportNode(short operation,Node node,boolean deep){ _EL_   NodeImpl copy=shallowCopy(operation,node); _EL_   if (deep) { _EL_     NodeList list=node.getChildNodes(); _EL_     for (int i=0; i < list.getLength(); i++) { _EL_       copy.appendChild(cloneOrImportNode(operation,list.item(i),deep)); _EL_     } _EL_   } _EL_   notifyUserDataHandlers(operation,node,copy); _EL_   return copy; _EL_ } _EL_ ', 'public List<String> makeURLList(String shard){ _EL_   List<String> urls=StrUtils.splitSmart(shard,"|",true); _EL_   for (int i=0; i < urls.size(); i++) { _EL_     urls.set(i,buildUrl(urls.get(i))); _EL_   } _EL_   if (urls.size() > 1)   Collections.shuffle(urls,r); _EL_   return urls; _EL_ } _EL_ ', 'public InputStreamReader reader(final String charset) throws HttpRequestException { _EL_   try { _EL_     return new InputStreamReader(stream(),getValidCharset(charset)); _EL_   } _EL_  catch (  UnsupportedEncodingException e) { _EL_     throw new HttpRequestException(e); _EL_   } _EL_ } _EL_ ', 'private byte[] toZLIB(RenderedImage image,Color bkg,String colorModel) throws IOException { _EL_   return ImageGraphics2D.toByteArray(image,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel)); _EL_ } _EL_ ', 'public void addVertex(Object id) throws IllegalArgumentException { _EL_   if (initialized) { _EL_     throw new IllegalArgumentException(); _EL_   } _EL_   Vertex vertex=new Vertex(id); _EL_   Object existing=vertexMap.put(id,vertex); _EL_   if (existing != null) { _EL_     throw new IllegalArgumentException(); _EL_   } _EL_   vertexList.add(vertex); _EL_ } _EL_ ', 'public void configureLocalServices(){ _EL_   clientMemo.setLnTrafficController(this); _EL_   clientMemo.configureCommandStation(LnCommandStationType.COMMAND_STATION_DCS100,false,false); _EL_   clientMemo.configureManagers(); _EL_ } _EL_ ', 'private static int indexOf(int fromIndex,CharSequence csq){ _EL_   if (csq == null)   return 0; _EL_   int length=csq.length(); _EL_   int j=fromIndex; _EL_   int i=(j < length) ? csq.charAt(j++) : 0; _EL_   i<<=16; _EL_   i|=(j < length) ? csq.charAt(j++) : 0; _EL_   return i; _EL_ } _EL_ ', 'protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){ _EL_   updateGrid(); _EL_   calculateColumnRequirements(axis); _EL_   if (r == null) { _EL_     r=new SizeRequirements(); _EL_   } _EL_   long min=0; _EL_   long pref=0; _EL_   int n=columnRequirements.length; _EL_   for (int i=0; i < n; i++) { _EL_     SizeRequirements req=columnRequirements[i]; _EL_     min+=req.minimum; _EL_     pref+=req.preferred; _EL_   } _EL_   int adjust=(n + 1) * cellSpacing + 2 * borderWidth; _EL_   min+=adjust; _EL_   pref+=adjust; _EL_   r.minimum=(int)min; _EL_   r.preferred=(int)pref; _EL_   r.maximum=(int)pref; _EL_   AttributeSet attr=getAttributes(); _EL_   CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH); _EL_   if (BlockView.spanSetFromAttributes(axis,r,cssWidth,null)) { _EL_     if (r.minimum < (int)min) { _EL_       r.maximum=r.minimum=r.preferred=(int)min; _EL_     } _EL_   } _EL_   totalColumnRequirements.minimum=r.minimum; _EL_   totalColumnRequirements.preferred=r.preferred; _EL_   totalColumnRequirements.maximum=r.maximum; _EL_   Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN); _EL_   if (o != null) { _EL_     String ta=o.toString(); _EL_     if (ta.equals("left")) { _EL_       r.alignment=0; _EL_     } _EL_  else     if (ta.equals("center")) { _EL_       r.alignment=0.5f; _EL_     } _EL_  else     if (ta.equals("right")) { _EL_       r.alignment=1; _EL_     } _EL_  else { _EL_       r.alignment=0; _EL_     } _EL_   } _EL_  else { _EL_     r.alignment=0; _EL_   } _EL_   return r; _EL_ } _EL_ ', 'public ListenableFuture<String> push(final String name,final Expression func){ _EL_   String let=String.format("let %s = %s",name,func.toHaskell()); _EL_   return pullRaw(let); _EL_ } _EL_ ', 'public MetaDataColumnDescriptor(String columnName,int jdbcType,Object defaultValue){ _EL_   _columnName=columnName.toUpperCase(); _EL_   _jdbcType=jdbcType; _EL_   _defaultValue=defaultValue; _EL_ } _EL_ ', 'private void bulkLoad(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){ _EL_   if (dim == 0) { _EL_     DBIDArrayIter iter=ids.iter(); _EL_     iter.seek(start); _EL_     NumberVector first=relation.get(iter); _EL_     iter.advance(); _EL_     boolean degenerate=true; _EL_     loop:     for (; iter.getOffset() < end; iter.advance()) { _EL_       NumberVector other=relation.get(iter); _EL_       for (int d=0; d < lmin.length; d++) { _EL_         if (Math.abs(first.doubleValue(d) - other.doubleValue(d)) > 1E-15) { _EL_           degenerate=false; _EL_           break loop; _EL_         } _EL_       } _EL_     } _EL_     if (degenerate) { _EL_       double[] center=new double[lmin.length]; _EL_       for (int d=0; d < lmin.length; d++) { _EL_         center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d]; _EL_         if (center[d] > min[d] + width[d]) { _EL_           center[d]-=width[d]; _EL_         } _EL_       } _EL_       children.add(new Node(code,center,end - start,level,null)); _EL_       return; _EL_     } _EL_   } _EL_   if (dim == lmin.length) { _EL_     double[] center=new double[lmin.length]; _EL_     for (int d=0; d < lmin.length; d++) { _EL_       center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d]; _EL_       if (center[d] > min[d] + width[d]) { _EL_         center[d]-=width[d]; _EL_       } _EL_     } _EL_     if (end - start < nmin) { _EL_       children.add(new Node(code,center,end - start,level,null)); _EL_       return; _EL_     } _EL_  else { _EL_       List<Node> newchildren=new ArrayList<>(); _EL_       bulkLoad(lmin,lmax,newchildren,ids,start,end,0,level + 1,0); _EL_       children.add(new Node(code,center,end - start,level,newchildren)); _EL_       return; _EL_     } _EL_   } _EL_  else { _EL_     DBIDArrayIter siter=ids.iter(), eiter=ids.iter(); _EL_     siter.seek(start); _EL_     eiter.seek(end - 1); _EL_     while (siter.getOffset() < eiter.getOffset()) { _EL_       if (getShiftedDim(relation.get(siter),dim,level) <= .5) { _EL_         siter.advance(); _EL_         continue; _EL_       } _EL_       if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) { _EL_         eiter.retract(); _EL_         continue; _EL_       } _EL_       ids.swap(siter.getOffset(),eiter.getOffset() - 1); _EL_       siter.advance(); _EL_       eiter.retract(); _EL_     } _EL_     final int spos=siter.getOffset(); _EL_     if (start < spos) { _EL_       final double tmp=lmax[dim]; _EL_       lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5; _EL_       bulkLoad(lmin,lmax,children,ids,start,spos,dim + 1,level,code); _EL_       lmax[dim]=tmp; _EL_     } _EL_     if (spos < end) { _EL_       final double tmp=lmin[dim]; _EL_       lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5; _EL_       bulkLoad(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim)); _EL_       lmin[dim]=tmp; _EL_     } _EL_   } _EL_ } _EL_ ', 'protected ArrayList<float[]> _forwardPoly(float[] rawllpts,int ltype,int nsegs,boolean isFilled){ _EL_   boolean DEBUG=Debug.debugging("proj"); _EL_   int len=rawllpts.length >>> 1; _EL_   if (len < 2)   return new ArrayList<float[]>(0); _EL_   if (isComplicatedLineType(ltype))   return doPolyDispatch(rawllpts,ltype,nsegs,isFilled); _EL_   int invalid_count=0; _EL_   boolean curr_invalid, prev_invalid=false; _EL_   Point temp=new Point(); _EL_   AzimuthVar az_first=null, az_save=null, azVar=new AzimuthVar(); _EL_   ArrayList<AzimuthVar> sections=new ArrayList<AzimuthVar>(128); _EL_   float[] x_, xs=new float[len]; _EL_   float[] y_, ys=new float[len]; _EL_   _forward(rawllpts[0],rawllpts[1],temp,azVar); _EL_   xs[0]=temp.x; _EL_   ys[0]=temp.y; _EL_   prev_invalid=azVar.invalid_forward; _EL_   if (prev_invalid) { _EL_     ++invalid_count; _EL_   } _EL_  else { _EL_     azVar.index=0; _EL_     azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[0],rawllpts[1]); _EL_     if (!isFilled) { _EL_       sections.add(azVar); _EL_     } _EL_  else { _EL_       az_first=azVar; _EL_     } _EL_     azVar=new AzimuthVar(); _EL_   } _EL_   int i=0, j=0; _EL_   for (i=1, j=2; i < len; i++, j+=2) { _EL_     azVar.invalid_forward=false; _EL_     _forward(rawllpts[j],rawllpts[j + 1],temp,azVar); _EL_     curr_invalid=azVar.invalid_forward; _EL_     xs[i]=temp.x; _EL_     ys[i]=temp.y; _EL_     if (!curr_invalid && prev_invalid) { _EL_       azVar.index=i - 1; _EL_       azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]); _EL_       sections.add(azVar); _EL_       azVar=new AzimuthVar(); _EL_     } _EL_  else     if (curr_invalid) { _EL_       if (!prev_invalid) { _EL_         azVar.index=i; _EL_         if (isFilled && (invalid_count == 0)) { _EL_           az_save=azVar; _EL_         } _EL_  else { _EL_           sections.add(azVar); _EL_         } _EL_         azVar=new AzimuthVar(); _EL_       } _EL_       ++invalid_count; _EL_     } _EL_     prev_invalid=curr_invalid; _EL_   } _EL_   if (invalid_count == 0) { _EL_     ArrayList<float[]> ret_val=new ArrayList<float[]>(2); _EL_     ret_val.add(xs); _EL_     ret_val.add(ys); _EL_     return ret_val; _EL_   } _EL_   if (invalid_count == len) { _EL_     return new ArrayList<float[]>(0); _EL_   } _EL_   if (!prev_invalid) { _EL_     if (isFilled && (az_save != null)) { _EL_       int l=az_save.index; _EL_       x_=new float[len + l]; _EL_       y_=new float[len + l]; _EL_       System.arraycopy(xs,0,x_,0,len); _EL_       System.arraycopy(ys,0,y_,0,len); _EL_       System.arraycopy(xs,0,x_,len,l); _EL_       System.arraycopy(ys,0,y_,len,l); _EL_       az_save.index=len + l; _EL_       sections.add(az_save); _EL_       xs=x_; _EL_       ys=y_; _EL_     } _EL_  else { _EL_       if (DEBUG && isFilled && (az_save == null)) { _EL_         Debug.output("AA, filled, no-wrap!"); _EL_       } _EL_       azVar.index=i; _EL_       j=rawllpts.length; _EL_       azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]); _EL_       sections.add(azVar); _EL_     } _EL_   } _EL_  else   if (az_save != null) { _EL_     if (DEBUG)     Debug.output("DD, filled!"); _EL_     sections.add(az_first); _EL_     sections.add(az_save); _EL_   } _EL_   int size=sections.size(); _EL_   ArrayList<float[]> ret_val=new ArrayList<float[]>(size); _EL_   if (isFilled && (len > 2)) { _EL_     generateFilledPoly(xs,ys,sections,ret_val); _EL_     return ret_val; _EL_   } _EL_   for (j=0; j < size; j+=2) { _EL_     AzimuthVar az1=(AzimuthVar)sections.get(j); _EL_     AzimuthVar az2=(AzimuthVar)sections.get(j + 1); _EL_     int off1=az1.index; _EL_     int off2=az2.index; _EL_     int l=off2 - off1; _EL_     x_=new float[l]; _EL_     y_=new float[l]; _EL_     System.arraycopy(xs,off1,x_,0,l); _EL_     System.arraycopy(ys,off1,y_,0,l); _EL_     ret_val.add(x_); _EL_     ret_val.add(y_); _EL_   } _EL_   return ret_val; _EL_ } _EL_ ', 'public DataProviderEvent(final LocalizableMessage reason,final Set<Type> types){ _EL_   Reject.ifNull(reason,types); _EL_   Reject.ifTrue(types.isEmpty()); _EL_   this.reason=reason; _EL_   final EnumSet<Type> tmp=EnumSet.noneOf(Type.class); _EL_   tmp.addAll(types); _EL_   this.types=Collections.unmodifiableSet(tmp); _EL_ } _EL_ ', 'public <T>List<String> validateBean(T bean,String errIfBeanNull){ _EL_   List<String> errors=new ArrayList<String>(); _EL_   if (bean == null) { _EL_     errors.add(errIfBeanNull); _EL_     return errors; _EL_   } _EL_   Set<ConstraintViolation<T>> violations=validator.validate(bean); _EL_   for (  ConstraintViolation<T> violation : violations) { _EL_     errors.add(violation.getMessage()); _EL_   } _EL_   return errors; _EL_ } _EL_ ', 'private String attemptToChooseFormattingPattern(){ _EL_   if (nationalNumber.length() >= MIN_LEADING_DIGITS_LENGTH) { _EL_     getAvailableFormats(nationalNumber.toString()); _EL_     String formattedNumber=attemptToFormatAccruedDigits(); _EL_     if (formattedNumber.length() > 0) { _EL_       return formattedNumber; _EL_     } _EL_     return maybeCreateNewTemplate() ? inputAccruedNationalNumber() : accruedInput.toString(); _EL_   } _EL_  else { _EL_     return appendNationalNumber(nationalNumber.toString()); _EL_   } _EL_ } _EL_ ', '@Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){ _EL_   FieldConfigFontPreview copy=null; _EL_   if (fieldConfigBase != null) { _EL_     copy=new FieldConfigFontPreview(fieldConfigBase.getCommonData()); _EL_   } _EL_   return copy; _EL_ } _EL_ ', 'public Object castToType(int t,XPathContext support) throws javax.xml.transform.TransformerException { _EL_   Object result; _EL_ switch (t) { _EL_ case CLASS_STRING: _EL_     result=str(); _EL_   break; _EL_ case CLASS_NUMBER: _EL_ result=new Double(num()); _EL_ break; _EL_ case CLASS_NODESET: _EL_ result=iter(); _EL_ break; _EL_ case CLASS_BOOLEAN: _EL_ result=new Boolean(bool()); _EL_ break; _EL_ case CLASS_UNKNOWN: _EL_ result=m_obj; _EL_ break; _EL_ default : _EL_ error(XPATHErrorResources.ER_CANT_CONVERT_TO_TYPE,new Object[]{getTypeString(),Integer.toString(t)}); _EL_ result=null; _EL_ } _EL_ return result; _EL_ } _EL_ ', 'public static void forceDeleteOnExit(File file) throws IOException { _EL_   if (file.isDirectory()) { _EL_     deleteDirectoryOnExit(file); _EL_   } _EL_  else { _EL_     file.deleteOnExit(); _EL_   } _EL_ } _EL_ ', 'public boolean init(StepMetaInterface smi,StepDataInterface sdi){ _EL_   this.meta=((SortKeyStepMeta)smi); _EL_   this.data=((SortKeyStepData)sdi); _EL_   return super.init(smi,sdi); _EL_ } _EL_ ', 'private void printAnnotationFromEditor(final WorkflowAnnotation anno,final Graphics2D g2){ _EL_   Graphics2D gPr=(Graphics2D)g2.create(); _EL_   Rectangle2D loc=anno.getLocation(); _EL_   gPr.translate(loc.getX(),loc.getY()); _EL_   gPr.setClip(0,0,(int)loc.getWidth(),(int)loc.getHeight()); _EL_   Dimension size=new Dimension((int)loc.getWidth(),(int)loc.getHeight()); _EL_   pane.setSize(size); _EL_   pane.setText(AnnotationDrawUtils.createStyledCommentString(anno)); _EL_   pane.setCaretPosition(0); _EL_   pane.paint(gPr); _EL_   gPr.dispose(); _EL_ } _EL_ ', 'public void add(IPoint pt){ _EL_   if (inProgress) { _EL_     throw new ConcurrentModificationException("Can\'t add point while iterator in progress"); _EL_   } _EL_   points.add(pt); _EL_ } _EL_ ', 'public static Configuration load(Reader reader) throws IOException { _EL_   try { _EL_     Properties properties=new Properties(); _EL_     properties.load(reader); _EL_     return from(properties); _EL_   } _EL_   finally { _EL_     reader.close(); _EL_   } _EL_ } _EL_ ', 'public void add(OffsettedItem item){ _EL_   throwIfPrepared(); _EL_   try { _EL_     if (item.getAlignment() > getAlignment()) { _EL_       throw new IllegalArgumentException("incompatible item alignment"); _EL_     } _EL_   } _EL_  catch (  NullPointerException ex) { _EL_     throw new NullPointerException("item == null"); _EL_   } _EL_   items.add(item); _EL_ } _EL_ ', 'public static void addAnnotationToXML(Element annotationsElement,String name,String value){ _EL_   if (value == null) { _EL_     deleteAnnotationFromXML(annotationsElement,name); _EL_   } _EL_  else { _EL_     final Document doc=annotationsElement.getOwnerDocument(); _EL_     Element elem=doc.createElement("annotation"); _EL_     annotationsElement.appendChild(elem); _EL_     elem.setAttribute("key",name); _EL_     elem.setTextContent(value); _EL_   } _EL_ } _EL_ ', 'public boolean readBoolean() throws IOException { _EL_   return primitiveTypes.readBoolean(); _EL_ } _EL_ ', 'public static double lnGamma(double alpha){ _EL_   double x=alpha, f=0.0, z; _EL_   if (x < 7) { _EL_     f=1; _EL_     z=x - 1; _EL_     while (++z < 7) { _EL_       f*=z; _EL_     } _EL_     x=z; _EL_     f=-Math.log(f); _EL_   } _EL_   z=1 / (x * x); _EL_   return f + (x - 0.5) * Math.log(x) - x + 0.918938533204673 + (((-0.000595238095238 * z + 0.000793650793651) * z - 0.002777777777778) * z + 0.083333333333333) / x; _EL_ } _EL_ ', 'private static char[] zzUnpackCMap(String packed){ _EL_   char[] map=new char[0x10000]; _EL_   int i=0; _EL_   int j=0; _EL_   while (i < 188) { _EL_     int count=packed.charAt(i++); _EL_     char value=packed.charAt(i++); _EL_     do     map[j++]=value; _EL_  while (--count > 0); _EL_   } _EL_   return map; _EL_ } _EL_ ', 'public void startTicker(long delay,boolean rightToLeft){ _EL_   if (!tickerEnabled) { _EL_     return; _EL_   } _EL_   if (!isCellRenderer()) { _EL_     Form parent=getComponentForm(); _EL_     if (parent != null) { _EL_       parent.registerAnimatedInternal(this); _EL_     } _EL_   } _EL_   tickerStartTime=System.currentTimeMillis(); _EL_   tickerDelay=delay; _EL_   tickerRunning=true; _EL_   this.rightToLeft=rightToLeft; _EL_   if (isRTL()) { _EL_     this.rightToLeft=!this.rightToLeft; _EL_   } _EL_ } _EL_ ', 'static CipherSuite valueOf(int id1,int id2){ _EL_   id1&=0xff; _EL_   id2&=0xff; _EL_   int id=(id1 << 8) | id2; _EL_   CipherSuite c=idMap.get(id); _EL_   if (c == null) { _EL_     String h1=Integer.toString(id1,16); _EL_     String h2=Integer.toString(id2,16); _EL_     c=new CipherSuite("Unknown 0x" + h1 + ":0x"+ h2,id); _EL_   } _EL_   return c; _EL_ } _EL_ ', 'public static Context createPendingActionContext(Context context,ReconAction action,String mappingName,JsonValue sourceObject,String reconId,Situation situation){ _EL_   Map<String,Object> pendingActionMap=new HashMap<String,Object>(); _EL_   pendingActionMap.put(MAPPING_NAME,mappingName); _EL_   pendingActionMap.put(SOURCE_OBJECT,sourceObject); _EL_   pendingActionMap.put(RECON_ID,reconId); _EL_   pendingActionMap.put(ORIGINAL_SITUATION,situation.toString()); _EL_   PendingActionContext pendingActionContext=new PendingActionContext(context,pendingActionMap,action.toString()); _EL_   return pendingActionContext; _EL_ } _EL_ ', 'private static char[] zzUnpackCMap(String packed){ _EL_   char[] map=new char[0x10000]; _EL_   int i=0; _EL_   int j=0; _EL_   while (i < 204) { _EL_     int count=packed.charAt(i++); _EL_     char value=packed.charAt(i++); _EL_     do     map[j++]=value; _EL_  while (--count > 0); _EL_   } _EL_   return map; _EL_ } _EL_ ', 'public void showDroidsafeTextMarkers(IEditorPart openedEditor,String className){ _EL_   if (openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null) { _EL_     ITextEditor editor=(ITextEditor)openedEditor; _EL_     if (fProcessedClasses.contains(className)) { _EL_       if (fClassesNeedUpdate.contains(className)) { _EL_         ClassMarkerProcessor classProcessor=get(className); _EL_         classProcessor.updateTaintMarkers(editor); _EL_         fClassesNeedUpdate.remove(className); _EL_       } _EL_     } _EL_  else { _EL_       fProcessedClasses.add(className); _EL_       Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> classTaintedDataMap=fTaintedDataMap.get(className); _EL_       Map<String,Set<IntRange>> classUnreachableMethodMap=fUnreachableSourceMethodMap.get(className); _EL_       if (classTaintedDataMap != null || classUnreachableMethodMap != null) { _EL_         IEditorInput input=editor.getEditorInput(); _EL_         if (input instanceof FileEditorInput) { _EL_           ClassMarkerProcessor classProcessor=get(className); _EL_           classProcessor.showDroidsafeTextMarkers(editor); _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'private static void resolveNewExpression(NewExpression objSubjectExpression,HashSet<String> objTypesSet){ _EL_   ClassReference objClassRef=objSubjectExpression.getClassReference(); _EL_   if (null == objClassRef || null == objClassRef.getFQN()) { _EL_     objTypesSet.add(Types.strResolvingAbortedOnPsiLevel); _EL_     return; _EL_   } _EL_   objTypesSet.add(objClassRef.getFQN()); _EL_ } _EL_ ', 'private static List<Size> pickUpToThree(List<Size> sizes){ _EL_   List<Size> result=new ArrayList<Size>(); _EL_   Size largest=sizes.get(0); _EL_   result.add(largest); _EL_   Size lastSize=largest; _EL_   for (  Size size : sizes) { _EL_     double targetArea=Math.pow(.5,result.size()) * area(largest); _EL_     if (area(size) < targetArea) { _EL_       if (!result.contains(lastSize) && (targetArea - area(lastSize) < area(size) - targetArea)) { _EL_         result.add(lastSize); _EL_       } _EL_  else { _EL_         result.add(size); _EL_       } _EL_     } _EL_     lastSize=size; _EL_     if (result.size() == 3) { _EL_       break; _EL_     } _EL_   } _EL_   if (result.size() < 3 && !result.contains(lastSize)) { _EL_     result.add(lastSize); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private boolean verifyLogRecord(String[] record,int macPos) throws Exception { _EL_   StringBuilder data=new StringBuilder(); _EL_   for (int m=0; m < record.length - 2; m++) { _EL_     data.append(record[m]); _EL_   } _EL_   curMAC=record[macPos]; _EL_   verified=helper.verifyMAC(data.toString(),helper.toByteArray(curMAC)); _EL_   return verified; _EL_ } _EL_ ', 'public static String formatPercent(int downloadSize,int fileSize){ _EL_   float num=(float)downloadSize / fileSize; _EL_   float percent=((float)(int)(num * 1000)) / 10; _EL_   return String.valueOf(percent + "%"); _EL_ } _EL_ ', 'private void updateActions(){ _EL_   String selectedText=getSelectedText(); _EL_   if (selectedText == null)   selectedText=""; _EL_   boolean stuffSelected=!selectedText.equals(""); _EL_   boolean allSelected=selectedText.equals(getText()); _EL_   UNDO_ACTION.setEnabled(isEnabled() && isEditable() && isUndoAvailable()); _EL_   CUT_ACTION.setEnabled(isEnabled() && isEditable() && stuffSelected); _EL_   COPY_ACTION.setEnabled(isEnabled() && stuffSelected); _EL_   PASTE_ACTION.setEnabled(isEnabled() && isEditable() && isPasteAvailable()); _EL_   DELETE_ACTION.setEnabled(isEnabled() && stuffSelected); _EL_   SELECT_ALL_ACTION.setEnabled(isEnabled() && !allSelected); _EL_ } _EL_ ', 'public synchronized void trackHexImages(IHex hex,MediaTracker tracker){ _EL_   Image base=hexToImageCache.get(hex); _EL_   List<Image> superImgs=hexToImageListCache.get(hex); _EL_   List<Image> orthoImgs=orthoListCache.get(hex); _EL_   tracker.addImage(base,1); _EL_   if (superImgs != null) { _EL_     for (Iterator<Image> i=superImgs.iterator(); i.hasNext(); ) { _EL_       tracker.addImage(i.next(),1); _EL_     } _EL_   } _EL_   if (orthoImgs != null) { _EL_     for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) { _EL_       tracker.addImage(i.next(),1); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static Date parseText(String dateStr){ _EL_   try { _EL_     return mSimpleTextFormat.parse(dateStr); _EL_   } _EL_  catch (  ParseException e) { _EL_     e.printStackTrace(); _EL_     throw new RuntimeException("date formatDateTime error"); _EL_   } _EL_ } _EL_ ', 'public boolean isProcessed(Trace trace,Node node,Direction direction){ _EL_   boolean ret=false; _EL_   if (processor.getNodeType() == node.getType() && processor.getDirection() == direction) { _EL_     if (uriFilter == null || uriFilter.test(node.getUri())) { _EL_       ret=true; _EL_     } _EL_   } _EL_   if (log.isLoggable(Level.FINEST)) { _EL_     log.finest("ProcessManager/Processor: isProcessed trace=" + trace + " node="+ node+ " direction="+ direction+ "? "+ ret); _EL_   } _EL_   return ret; _EL_ } _EL_ ', 'private QuadEdge[] fetchTriangleToVisit(QuadEdge edge,Stack edgeStack,boolean includeFrame,Set visitedEdges){ _EL_   QuadEdge curr=edge; _EL_   int edgeCount=0; _EL_   boolean isFrame=false; _EL_   do { _EL_     triEdges[edgeCount]=curr; _EL_     if (isFrameEdge(curr))     isFrame=true; _EL_     QuadEdge sym=curr.sym(); _EL_     if (!visitedEdges.contains(sym))     edgeStack.push(sym); _EL_     visitedEdges.add(curr); _EL_     edgeCount++; _EL_     curr=curr.lNext(); _EL_   } _EL_  while (curr != edge); _EL_   if (isFrame && !includeFrame)   return null; _EL_   return triEdges; _EL_ } _EL_ ', 'public Collection engineGenerateCRLs(InputStream inStream) throws CRLException { _EL_   CRL crl; _EL_   List crls=new ArrayList(); _EL_   while ((crl=engineGenerateCRL(inStream)) != null) { _EL_     crls.add(crl); _EL_   } _EL_   return crls; _EL_ } _EL_ ', 'public void deleteEntityConfig(String realm,String federationId) throws WSFederationMetaException { _EL_   if (federationId == null) { _EL_     return; _EL_   } _EL_   if (realm == null) { _EL_     realm="/"; _EL_   } _EL_   String[] objs={federationId,realm}; _EL_   try { _EL_     Map oldAttrs=configInst.getConfiguration(realm,federationId); _EL_     Set oldValues=(Set)oldAttrs.get(ATTR_ENTITY_CONFIG); _EL_     if (oldValues == null || oldValues.isEmpty()) { _EL_       LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_DELETE_ENTITY_CONFIG,objs,null); _EL_       throw new WSFederationMetaException("entity_config_not_exist",objs); _EL_     } _EL_     IDPSSOConfigElement idpconfig=getIDPSSOConfig(realm,federationId); _EL_     if (idpconfig != null) { _EL_       removeFromCircleOfTrust(idpconfig,realm,federationId); _EL_     } _EL_     SPSSOConfigElement spconfig=getSPSSOConfig(realm,federationId); _EL_     if (spconfig != null) { _EL_       removeFromCircleOfTrust(spconfig,realm,federationId); _EL_     } _EL_     Set attr=new HashSet(); _EL_     attr.add(ATTR_ENTITY_CONFIG); _EL_     configInst.deleteConfiguration(realm,federationId,attr); _EL_     LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_DELETED,objs,null); _EL_     WSFederationMetaCache.putEntityConfig(realm,federationId,null); _EL_   } _EL_  catch (  ConfigurationException e) { _EL_     debug.error("WSFederationMetaManager.deleteEntityConfig:",e); _EL_     String[] data={e.getMessage(),federationId,realm}; _EL_     LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_DELETE_ENTITY_CONFIG,data,null); _EL_     throw new WSFederationMetaException(e); _EL_   } _EL_ } _EL_ ', 'public static synchronized DataSourceViewsManager sharedInstance(){ _EL_   if (sharedInstance == null)   sharedInstance=new DataSourceViewsManager(); _EL_   return sharedInstance; _EL_ } _EL_ ', 'private Long id(HttpServletRequest request){ _EL_   Long id=null; _EL_   String pathInfo=request.getPathInfo(); _EL_   if (pathInfo != null && pathInfo.length() > 1) { _EL_     String idString=pathInfo.substring(1); _EL_     id=Long.valueOf(idString); _EL_   } _EL_   return id; _EL_ } _EL_ ', 'public void uncompress(){ _EL_   data.position(0); _EL_   InflaterInputStream inflater=new InflaterInputStream(data.asInputStream()); _EL_   byte[] buffer=new byte[8192]; _EL_   IoBuffer tmp=IoBuffer.allocate(0); _EL_   tmp.setAutoExpand(true); _EL_   try { _EL_     while (inflater.available() > 0) { _EL_       int decompressed=inflater.read(buffer); _EL_       if (decompressed <= 0) { _EL_         break; _EL_       } _EL_       tmp.put(buffer,0,decompressed); _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     tmp.free(); _EL_     throw new RuntimeException("could not uncompress data",e); _EL_   } _EL_  finally { _EL_     if (inflater != null) { _EL_       try { _EL_         inflater.close(); _EL_       } _EL_  catch (      IOException e1) { _EL_       } _EL_     } _EL_   } _EL_   data.free(); _EL_   data=tmp; _EL_   data.flip(); _EL_   prepareIO(); _EL_ } _EL_ ', '@Override public void close() throws IOException { _EL_ synchronized (lock) { _EL_     if (!isClosed()) { _EL_       in.close(); _EL_       buf=null; _EL_     } _EL_   } _EL_ } _EL_ ', 'public int compareTo(CharBuffer otherBuffer){ _EL_   int compareRemaining=(remaining() < otherBuffer.remaining()) ? remaining() : otherBuffer.remaining(); _EL_   int thisPos=position; _EL_   int otherPos=otherBuffer.position; _EL_   char thisByte, otherByte; _EL_   while (compareRemaining > 0) { _EL_     thisByte=get(thisPos); _EL_     otherByte=otherBuffer.get(otherPos); _EL_     if (thisByte != otherByte) { _EL_       return thisByte < otherByte ? -1 : 1; _EL_     } _EL_     thisPos++; _EL_     otherPos++; _EL_     compareRemaining--; _EL_   } _EL_   return remaining() - otherBuffer.remaining(); _EL_ } _EL_ ', 'private static PolicyNotification extractPolicyNotification(String xml) throws PolicyEvaluationException { _EL_   PolicyNotification policyNotification=null; _EL_   try { _EL_     String notificationDataBlock=getNotificationDataBlock(xml); _EL_     if (notificationDataBlock != null) { _EL_       Document doc=XMLUtils.getXMLDocument(new ByteArrayInputStream(notificationDataBlock.getBytes())); _EL_       Node rootNode=XMLUtils.getRootNode(doc,NODE_POLICY_SERVICE); _EL_       if (rootNode != null) { _EL_         Node notificationNode=XMLUtils.getChildNode(rootNode,NODE_POLICY_NOTIFICATION); _EL_         if (notificationNode != null) { _EL_           policyNotification=PolicyNotification.parseXML(notificationNode); _EL_         } _EL_  else { _EL_           debug.error("ResultsCacheUtil." + "extractPolicyNotification():" + "cannot find notification node"); _EL_           throw new PolicyEvaluationException(ResBundleUtils.rbName,"invalid_root_element",null,null); _EL_         } _EL_       } _EL_  else { _EL_         debug.error("ResultsCacheUtil." + "extractPolicyNotification():"); _EL_       } _EL_     } _EL_  else { _EL_       debug.error("ResultsCacheUtil:" + "extractPolicyNotification():" + "notification data block is null"); _EL_     } _EL_   } _EL_  catch (  Exception xe) { _EL_     debug.error("ResultsCacheUtil.extractPolicyNotification():",xe); _EL_     throw new PolicyEvaluationException(ResBundleUtils.rbName,"xml_parsing_error",null,xe); _EL_   } _EL_   return policyNotification; _EL_ } _EL_ ', 'public synchronized void flush() throws IOException { _EL_   checkNotClosed(); _EL_   trimToSize(); _EL_   journalWriter.flush(); _EL_ } _EL_ ', 'private Object findParcel(@NonNull byte[] objectArray,@NonNull String className){ _EL_   try { _EL_     Class classTmp=getClassForName(className); _EL_     Constructor declaredConstructor=classTmp.getDeclaredConstructor(Parcel.class); _EL_     declaredConstructor.setAccessible(true); _EL_     return declaredConstructor.newInstance(WearBusTools.byteToParcel(objectArray)); _EL_   } _EL_  catch (  Exception e) { _EL_     Log.d(WearBusTools.BUSWEAR_TAG,"syncEvent error: " + e.getMessage()); _EL_   } _EL_   return null; _EL_ } _EL_ ', "private static final String decodeFieldName(final String pXmlFieldName){ _EL_   StringBuilder str=new StringBuilder(); _EL_   int fieldNameLength=pXmlFieldName.length(); _EL_   char currentChar; _EL_   for (int i=0; i < fieldNameLength; i++) { _EL_     currentChar=pXmlFieldName.charAt(i); _EL_     if (currentChar == '-') { _EL_       str.append(Character.toUpperCase(pXmlFieldName.charAt(++i))); _EL_     } _EL_  else { _EL_       str.append(currentChar); _EL_     } _EL_   } _EL_   return str.toString(); _EL_ } _EL_ ", 'public boolean isLoginSet(){ _EL_   return (username != null && (password != null && !username.equals("") && !password.equals(""))) || oauth; _EL_ } _EL_ ', 'public void addContentItem(ContentItem contentItem){ _EL_   if (contentItems == null) { _EL_     contentItems=new ArrayList<ContentItem>(); _EL_   } _EL_   contentItems.add(contentItem); _EL_ } _EL_ ', 'public static String canonicalizeClassName(String name){ _EL_   String classname=name.replace(\'/\',\'.\'); _EL_   classname=classname.replace(\'\\\\\',\'.\'); _EL_   if (classname.startsWith("class "))   classname=classname.substring(6); _EL_   if (classname.endsWith(".class"))   classname=classname.substring(0,classname.length() - 6); _EL_   return classname; _EL_ } _EL_ ', 'public boolean isHighlightWithInvisibleEdge(){ _EL_   return highlightWithInvisibleEdge; _EL_ } _EL_ ', 'private Configuration prepareJobForCancelling() throws Exception { _EL_   prepareFile("/testFile",1500); _EL_   executedTasks.set(0); _EL_   cancelledTasks.set(0); _EL_   failMapperId.set(0); _EL_   splitsCount.set(0); _EL_   Configuration cfg=new Configuration(); _EL_   setupFileSystems(cfg); _EL_   Job job=Job.getInstance(cfg); _EL_   job.setOutputKeyClass(Text.class); _EL_   job.setOutputValueClass(IntWritable.class); _EL_   job.setMapperClass(CancellingTestMapper.class); _EL_   job.setNumReduceTasks(0); _EL_   job.setInputFormatClass(InFormat.class); _EL_   FileInputFormat.setInputPaths(job,new Path("igfs://:" + getTestGridName(0) + "@/")); _EL_   FileOutputFormat.setOutputPath(job,new Path("igfs://:" + getTestGridName(0) + "@/output/")); _EL_   job.setJarByClass(getClass()); _EL_   return job.getConfiguration(); _EL_ } _EL_ ', 'public void removeChangingListener(OnWheelChangedListener listener){ _EL_   changingListeners.remove(listener); _EL_ } _EL_ ', 'public boolean isFlying(){ _EL_   return (flyThroughDialog != null); _EL_ } _EL_ ', 'public synchronized void init(){ _EL_   channelFactory=new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool()); _EL_   datagramChannelFactory=new NioDatagramChannelFactory(Executors.newCachedThreadPool()); _EL_   timer=new HashedWheelTimer(); _EL_ } _EL_ ', 'public static String removePattern(final String source,final String regex){ _EL_   return replacePattern(source,regex,StringUtils.EMPTY); _EL_ } _EL_ ', 'private void consumeNestedScroll(int dxUnconsumed,int dyUnconsumed,int dxFinalUnconsumed,int dyFinalUnconsumed){ _EL_   if (mOverScrollEffect == OverScrollEffect.BOUNCE && dyFinalUnconsumed != 0) { _EL_     mUnconsumedOverScrollOffset+=-dyFinalUnconsumed; _EL_     int maxOffset=mOverScrollOffsetLimit; _EL_     if (mUnconsumedOverScrollOffset > 0) { _EL_       mUnconsumedOverScrollOffset=Math.min(maxOffset,mUnconsumedOverScrollOffset); _EL_     } _EL_  else     if (mUnconsumedOverScrollOffset < 0) { _EL_       mUnconsumedOverScrollOffset=Math.max(-maxOffset,mUnconsumedOverScrollOffset); _EL_     } _EL_     setScrollingOffset(getUnconsumedScrollingOffset()); _EL_   } _EL_   pullEdgeEffects(dxUnconsumed,dyUnconsumed); _EL_ } _EL_ ', 'private void retrieveWaypoints(SearchQuery query,ArrayList<Waypoint> waypoints){ _EL_   String queryLikeSelection2="%" + query.textQuery + "%"; _EL_   String[] waypointSelectionArgs=new String[]{queryLikeSelection2,queryLikeSelection2,queryLikeSelection2}; _EL_   Cursor cursor=null; _EL_   try { _EL_     cursor=providerUtils.getWaypointCursor(WAYPOINT_SELECTION_QUERY,waypointSelectionArgs,WAYPOINT_SELECTION_ORDER,MAX_SCORED_WAYPOINTS); _EL_     if (cursor != null) { _EL_       waypoints.ensureCapacity(cursor.getCount()); _EL_       while (cursor.moveToNext()) { _EL_         Waypoint waypoint=providerUtils.createWaypoint(cursor); _EL_         if (LocationUtils.isValidLocation(waypoint.getLocation())) { _EL_           waypoints.add(waypoint); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   finally { _EL_     if (cursor != null) { _EL_       cursor.close(); _EL_     } _EL_   } _EL_ } _EL_ ', 'void release(){ _EL_   imageLoader.cancelPendingRequests(); _EL_   loading=new boolean[noxItems.size()]; _EL_ } _EL_ ', 'public void add(String name,long cnt){ _EL_   if (_values == null) { _EL_     _values=new ArrayList<>(30); _EL_   } _EL_   _values.add(new Count(this,name,cnt)); _EL_ } _EL_ ', "private static void decodeTextCompaction(int[] textCompactionData,int[] byteCompactionData,int length,StringBuilder result){ _EL_   Mode subMode=Mode.ALPHA; _EL_   Mode priorToShiftMode=Mode.ALPHA; _EL_   int i=0; _EL_   while (i < length) { _EL_     int subModeCh=textCompactionData[i]; _EL_     char ch=0; _EL_ switch (subMode) { _EL_ case ALPHA: _EL_       if (subModeCh < 26) { _EL_         ch=(char)('A' + subModeCh); _EL_       } _EL_  else { _EL_         if (subModeCh == 26) { _EL_           ch=' '; _EL_         } _EL_  else         if (subModeCh == LL) { _EL_           subMode=Mode.LOWER; _EL_         } _EL_  else         if (subModeCh == ML) { _EL_           subMode=Mode.MIXED; _EL_         } _EL_  else         if (subModeCh == PS) { _EL_           priorToShiftMode=subMode; _EL_           subMode=Mode.PUNCT_SHIFT; _EL_         } _EL_  else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) { _EL_           result.append((char)byteCompactionData[i]); _EL_         } _EL_  else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) { _EL_           subMode=Mode.ALPHA; _EL_         } _EL_       } _EL_     break; _EL_ case LOWER: _EL_   if (subModeCh < 26) { _EL_     ch=(char)('a' + subModeCh); _EL_   } _EL_  else { _EL_     if (subModeCh == 26) { _EL_       ch=' '; _EL_     } _EL_  else     if (subModeCh == AS) { _EL_       priorToShiftMode=subMode; _EL_       subMode=Mode.ALPHA_SHIFT; _EL_     } _EL_  else     if (subModeCh == ML) { _EL_       subMode=Mode.MIXED; _EL_     } _EL_  else     if (subModeCh == PS) { _EL_       priorToShiftMode=subMode; _EL_       subMode=Mode.PUNCT_SHIFT; _EL_     } _EL_  else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) { _EL_       result.append((char)byteCompactionData[i]); _EL_     } _EL_  else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) { _EL_       subMode=Mode.ALPHA; _EL_     } _EL_   } _EL_ break; _EL_ case MIXED: _EL_ if (subModeCh < PL) { _EL_ ch=MIXED_CHARS[subModeCh]; _EL_ } _EL_  else { _EL_ if (subModeCh == PL) { _EL_   subMode=Mode.PUNCT; _EL_ } _EL_  else if (subModeCh == 26) { _EL_   ch=' '; _EL_ } _EL_  else if (subModeCh == LL) { _EL_   subMode=Mode.LOWER; _EL_ } _EL_  else if (subModeCh == AL) { _EL_   subMode=Mode.ALPHA; _EL_ } _EL_  else if (subModeCh == PS) { _EL_   priorToShiftMode=subMode; _EL_   subMode=Mode.PUNCT_SHIFT; _EL_ } _EL_  else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) { _EL_   result.append((char)byteCompactionData[i]); _EL_ } _EL_  else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) { _EL_   subMode=Mode.ALPHA; _EL_ } _EL_ } _EL_ break; _EL_ case PUNCT: _EL_ if (subModeCh < PAL) { _EL_ ch=PUNCT_CHARS[subModeCh]; _EL_ } _EL_  else { _EL_ if (subModeCh == PAL) { _EL_ subMode=Mode.ALPHA; _EL_ } _EL_  else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) { _EL_ result.append((char)byteCompactionData[i]); _EL_ } _EL_  else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) { _EL_ subMode=Mode.ALPHA; _EL_ } _EL_ } _EL_ break; _EL_ case ALPHA_SHIFT: _EL_ subMode=priorToShiftMode; _EL_ if (subModeCh < 26) { _EL_ ch=(char)('A' + subModeCh); _EL_ } _EL_  else { _EL_ if (subModeCh == 26) { _EL_ ch=' '; _EL_ } _EL_  else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) { _EL_ subMode=Mode.ALPHA; _EL_ } _EL_ } _EL_ break; _EL_ case PUNCT_SHIFT: _EL_ subMode=priorToShiftMode; _EL_ if (subModeCh < PAL) { _EL_ ch=PUNCT_CHARS[subModeCh]; _EL_ } _EL_  else { _EL_ if (subModeCh == PAL) { _EL_ subMode=Mode.ALPHA; _EL_ } _EL_  else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) { _EL_ result.append((char)byteCompactionData[i]); _EL_ } _EL_  else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) { _EL_ subMode=Mode.ALPHA; _EL_ } _EL_ } _EL_ break; _EL_ } _EL_ if (ch != 0) { _EL_ result.append(ch); _EL_ } _EL_ i++; _EL_ } _EL_ } _EL_ ", 'public MediaConfig createChannelFileAttachment(String file,MediaConfig config){ _EL_   config.addCredentials(this); _EL_   String xml=POSTFILE(this.url + "/create-channel-attachment",file,config.name,config.toXML()); _EL_   Element root=parse(xml); _EL_   if (root == null) { _EL_     return null; _EL_   } _EL_   try { _EL_     MediaConfig media=new MediaConfig(); _EL_     media.parseXML(root); _EL_     return media; _EL_   } _EL_  catch (  Exception exception) { _EL_     this.exception=SDKException.parseFailure(exception); _EL_     throw this.exception; _EL_   } _EL_ } _EL_ ', 'public void addParam(AstNode param){ _EL_   assertNotNull(param); _EL_   if (params == null) { _EL_     params=new ArrayList<AstNode>(); _EL_   } _EL_   params.add(param); _EL_   param.setParent(this); _EL_ } _EL_ ', 'DeleteEvent(@NonNull JSONObject json) throws JSONException { _EL_   super(TYPE_DELETE,json); _EL_   if (TextUtils.isEmpty(mBlockId)) { _EL_     throw new JSONException(TYPENAME_DELETE + " requires " + JSON_BLOCK_ID); _EL_   } _EL_   mOldXml=json.optString(JSON_OLD_VALUE); _EL_   JSONArray ids=json.getJSONArray(JSON_IDS); _EL_   int count=ids.length(); _EL_   List<String> temp=new ArrayList<>(count); _EL_   for (int i=0; i < count; ++i) { _EL_     temp.add(ids.getString(i)); _EL_   } _EL_   mIds=Collections.unmodifiableList(temp); _EL_ } _EL_ ', 'public static boolean isFullCopyRestorable(Volume volume,DbClient dbClient){ _EL_   boolean result=false; _EL_   String replicaState=volume.getReplicaState(); _EL_   if (isVolumeFullCopy(volume,dbClient) && replicaState != null && !replicaState.isEmpty()) { _EL_     ReplicationState state=ReplicationState.getEnumValue(replicaState); _EL_     if (state != null && state == ReplicationState.SYNCHRONIZED) { _EL_       result=true; _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private final static String[] readQDStrings(String string,int[] pos) throws NamingException { _EL_   return readQDescrs(string,pos); _EL_ } _EL_ ', 'private static boolean isBufferTooLarge(ByteBuffer buf){ _EL_   return isBufferTooLarge(buf.capacity()); _EL_ } _EL_ ', 'public static String plnoun(final int quantity,final String noun){ _EL_   final String enoun=fullForm(noun); _EL_   if (quantity == 1) { _EL_     return singular(enoun); _EL_   } _EL_  else { _EL_     return plural(noun); _EL_   } _EL_ } _EL_ ', 'public void add(Video video){ _EL_   videoList.add(video); _EL_   notifyDataSetChanged(); _EL_ } _EL_ ', 'private static boolean isInHorizontalTargetZone(float x,float y,float handleXStart,float handleXEnd,float handleY,float targetRadius){ _EL_   if (x > handleXStart && x < handleXEnd && Math.abs(y - handleY) <= targetRadius) { _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void readTransportSystems(final int[] columnsIndices,final BufferedReader reader) throws IOException { _EL_   String line=reader.readLine(); _EL_   while (line != null && line.length() > 0) { _EL_     line=reader.readLine(); _EL_   } _EL_ } _EL_ ', 'public ComponentConfigBuilder addItemInMultifield(String multifieldLabel,int index,String itemType,String itemLabel,String value){ _EL_   String type=String.format("multifield#%s#%s",index,itemType); _EL_   String label=String.format("%s#%s",multifieldLabel,itemLabel); _EL_   config.add(new ConfigurationEntry(currentTab,type,label,value)); _EL_   return this; _EL_ } _EL_ ', 'public int size(){ _EL_   return names.size(); _EL_ } _EL_ ', 'public static IMultiPoint[] randomPoints(int n,int d,int scale){ _EL_   IMultiPoint points[]=new IMultiPoint[n]; _EL_   for (int i=0; i < n; i++) { _EL_     StringBuilder sb=new StringBuilder(); _EL_     for (int j=0; j < d; j++) { _EL_       sb.append(rGen.nextDouble() * scale); _EL_       if (j < d - 1) { _EL_         sb.append(","); _EL_       } _EL_     } _EL_     points[i]=new Hyperpoint(sb.toString()); _EL_   } _EL_   return points; _EL_ } _EL_ ', 'public void addHttpSessionToken(String site,String token){ _EL_   if (!site.contains(":")) { _EL_     site=site + (":80"); _EL_   } _EL_   HttpSessionTokensSet siteTokens=sessionTokens.get(site); _EL_   if (siteTokens == null) { _EL_     siteTokens=new HttpSessionTokensSet(); _EL_     sessionTokens.put(site,siteTokens); _EL_   } _EL_   log.info("Added new session token for site \'" + site + "\': "+ token); _EL_   siteTokens.addToken(token); _EL_   unmarkRemovedDefaultSessionToken(site,token); _EL_ } _EL_ ', 'public GradleDistribution deserializeFromString(String distributionString){ _EL_   Preconditions.checkNotNull(distributionString); _EL_   String localInstallationPrefix="GRADLE_DISTRIBUTION(LOCAL_INSTALLATION("; _EL_   if (distributionString.startsWith(localInstallationPrefix) && distributionString.endsWith("))")) { _EL_     String localInstallationDir=distributionString.substring(localInstallationPrefix.length(),distributionString.length() - 2); _EL_     return GradleDistribution.forLocalInstallation(new File(localInstallationDir)); _EL_   } _EL_   String remoteDistributionPrefix="GRADLE_DISTRIBUTION(REMOTE_DISTRIBUTION("; _EL_   if (distributionString.startsWith(remoteDistributionPrefix) && distributionString.endsWith("))")) { _EL_     String remoteDistributionUri=distributionString.substring(remoteDistributionPrefix.length(),distributionString.length() - 2); _EL_     return GradleDistribution.forRemoteDistribution(createURI(remoteDistributionUri)); _EL_   } _EL_   String versionPrefix="GRADLE_DISTRIBUTION(VERSION("; _EL_   if (distributionString.startsWith(versionPrefix) && distributionString.endsWith("))")) { _EL_     String version=distributionString.substring(versionPrefix.length(),distributionString.length() - 2); _EL_     return GradleDistribution.forVersion(version); _EL_   } _EL_   String wrapperString="GRADLE_DISTRIBUTION(WRAPPER)"; _EL_   if (distributionString.equals(wrapperString)) { _EL_     return GradleDistribution.fromBuild(); _EL_   } _EL_   String message=String.format("Cannot deserialize Gradle distribution string \'%s.\'",distributionString); _EL_   throw new RuntimeException(message); _EL_ } _EL_ ', 'private void pushContext(BaseContext c){ _EL_   contextStack.push(c); _EL_ } _EL_ ', 'public static double[] normalizeZscore(double[] x){ _EL_   double mn=mean(x,0); _EL_   double sd=standardDeviation(x,0); _EL_   for (int i=0; i < x.length; i++)   if (!Double.isNaN(x[i]))   x[i]=(x[i] - mn) / sd; _EL_   return x; _EL_ } _EL_ ', 'void addLocation(String location){ _EL_   if (fLocationList.contains(location)) { _EL_     return; _EL_   } _EL_   fLocationList.add(location); _EL_   fTableViewer.refresh(); _EL_   fTableViewer.setChecked(location,true); _EL_   fTableViewer.setSelection(new StructuredSelection(location)); _EL_   validateLocations(); _EL_ } _EL_ ', 'public JavaFormatter(String lineDelimiter,int initialIndentLevel,boolean useCodeFormatter,IJavaProject project){ _EL_   fLineDelimiter=lineDelimiter; _EL_   fUseCodeFormatter=useCodeFormatter; _EL_   fInitialIndentLevel=initialIndentLevel; _EL_   fProject=project; _EL_ } _EL_ ', 'private static void checkPathNeed(){ _EL_   if (samplingInterval == -1) { _EL_     lastPreloadTime=readMorePaths(); _EL_   } _EL_   if (!Double.isNaN(lastPreloadTime) && SimClock.getTime() >= lastPreloadTime - (samplingInterval * MIN_AHEAD_INTERVALS)) { _EL_     for (int i=0; i < nrofPreload && !Double.isNaN(lastPreloadTime); i++) { _EL_       lastPreloadTime=readMorePaths(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static int rgb(String hex){ _EL_   int color=(int)Long.parseLong(hex.replace("#",""),16); _EL_   int r=(color >> 16) & 0xFF; _EL_   int g=(color >> 8) & 0xFF; _EL_   int b=(color >> 0) & 0xFF; _EL_   return Color.rgb(r,g,b); _EL_ } _EL_ ', 'private synchronized void rebuildJournal() throws IOException { _EL_   if (journalWriter != null) { _EL_     journalWriter.close(); _EL_   } _EL_   Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Utils.US_ASCII)); _EL_   try { _EL_     writer.write(MAGIC); _EL_     writer.write("\\n"); _EL_     writer.write(VERSION_1); _EL_     writer.write("\\n"); _EL_     writer.write(Integer.toString(appVersion)); _EL_     writer.write("\\n"); _EL_     writer.write(Integer.toString(valueCount)); _EL_     writer.write("\\n"); _EL_     writer.write("\\n"); _EL_     for (    Entry entry : lruEntries.values()) { _EL_       if (entry.currentEditor != null) { _EL_         writer.write(DIRTY + \' \' + entry.key+ \'\\n\'); _EL_       } _EL_  else { _EL_         writer.write(CLEAN + \' \' + entry.key+ entry.getLengths()+ \'\\n\'); _EL_       } _EL_     } _EL_   } _EL_   finally { _EL_     writer.close(); _EL_   } _EL_   if (journalFile.exists()) { _EL_     renameTo(journalFile,journalFileBackup,true); _EL_   } _EL_   renameTo(journalFileTmp,journalFile,false); _EL_   journalFileBackup.delete(); _EL_   journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Utils.US_ASCII)); _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public void restore(String fileName) throws IOException, ClassNotFoundException { _EL_   ObjectInputStream ois=new ObjectInputStream(new FileInputStream(fileName)); _EL_   locations=(Map<V,Point>)ois.readObject(); _EL_   ois.close(); _EL_   initializeLocations(); _EL_   locked=true; _EL_   fireStateChanged(); _EL_ } _EL_ ', 'private void blackmanHarris4sMin(int size){ _EL_   int start=(windowFunction.length - size) / 2; _EL_   int stop=(windowFunction.length + size) / 2; _EL_   double scale=1.0 / (double)size / 0.36; _EL_   for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.35875 - 0.48829 * Math.cos(twoPI * i / size) + 0.14128 * Math.cos(2 * twoPI * i / size) - 0.01168 * Math.cos(3 * twoPI * i / size)); _EL_ } _EL_ ', 'private byte[] calculateCMSKeyChecksum(byte[] key){ _EL_   byte[] result=new byte[8]; _EL_   sha1.update(key,0,key.length); _EL_   sha1.doFinal(digest,0); _EL_   System.arraycopy(digest,0,result,0,8); _EL_   return result; _EL_ } _EL_ ', 'public int hashCode(){ _EL_   return _lowerNick.hashCode(); _EL_ } _EL_ ', 'Sentence parseSentence(final String text,final ConversationContext ctx){ _EL_   if (isEmpty()) { _EL_     return ConversationParser.parse(text,ctx); _EL_   } _EL_   String txt=text.trim(); _EL_   final Sentence sentence=new SentenceImplementation(ctx,txt); _EL_   txt=ConversationParser.detectSentenceType(txt,sentence); _EL_   if (typeMatching) { _EL_     readTypeMatchExpressions(txt,ctx,sentence); _EL_   } _EL_  else   if (exactMatching) { _EL_     readSimpleExpressions(txt,ctx,sentence); _EL_   } _EL_  else   if (similarMatching) { _EL_     readSimpleExpressions(txt,ctx,sentence); _EL_   } _EL_  else   if (jokerMatching) { _EL_     readJokerExpressions(txt,ctx,sentence); _EL_   } _EL_  else   if (caseInsensitive) { _EL_     readSimpleExpressions(txt,ctx,sentence); _EL_   } _EL_   return sentence; _EL_ } _EL_ ', 'public KafkaCluster usingDirectory(File dataDir){ _EL_   if (running)   throw new IllegalStateException("Unable to add a broker when the cluster is already running"); _EL_   if (dataDir != null && dataDir.exists() && !dataDir.isDirectory() && !dataDir.canWrite() && !dataDir.canRead()) { _EL_     throw new IllegalArgumentException("The directory must be readable and writable"); _EL_   } _EL_   this.dataDir=dataDir; _EL_   return this; _EL_ } _EL_ ', 'public static void registerOperators(String name,InputStream operatorsXML,ClassLoader classLoader){ _EL_   registerOperators(name,operatorsXML,classLoader,null); _EL_ } _EL_ ', 'private void doPermissionWorkBeforeAndroidM(@NonNull Activity activity,@NonNull String[] permissions,@Nullable PermissionsResultAction action){ _EL_   for (  String perm : permissions) { _EL_     if (action != null) { _EL_       if (!mPermissions.contains(perm)) { _EL_         action.onResult(perm,Permissions.NOT_FOUND); _EL_       } _EL_  else       if (ActivityCompat.checkSelfPermission(activity,perm) != PackageManager.PERMISSION_GRANTED) { _EL_         action.onResult(perm,Permissions.DENIED); _EL_       } _EL_  else { _EL_         action.onResult(perm,Permissions.GRANTED); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public void deleteSubGroupContainers(Set groupContainers) throws AMException, SSOException { _EL_   Iterator iter=groupContainers.iterator(); _EL_   while (iter.hasNext()) { _EL_     String groupContainerDN=(String)iter.next(); _EL_     AMGroupContainer groupContainer=new AMGroupContainerImpl(token,groupContainerDN); _EL_     groupContainer.delete(); _EL_   } _EL_ } _EL_ ', 'public static void init(String[] args){ _EL_   try { _EL_     compiler.initCompiler(args); _EL_     if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) { _EL_       optCompiler.initCompiler(args); _EL_     } _EL_   } _EL_  catch (  Throwable e) { _EL_     while (e != null) { _EL_       e.printStackTrace(); _EL_       e=e.getCause(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static String encode(Serializable o){ _EL_   ByteArrayOutputStream bos=new ByteArrayOutputStream(); _EL_   try { _EL_     ObjectOutputStream oos=new ObjectOutputStream(bos); _EL_     try { _EL_       oos.writeObject(o); _EL_       oos.flush(); _EL_     } _EL_   finally { _EL_       oos.close(); _EL_     } _EL_     return Base64.encodeBytes(bos.toByteArray()); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ } _EL_ ', 'public static Map<String,Object> createImage(DispatchContext dctx,Map<String,? extends Object> context){ _EL_   Map<String,Object> result=createImageMethod(dctx,context); _EL_   return result; _EL_ } _EL_ ', 'public void addProfiles(@NonNull IProfile... profiles){ _EL_   if (mAccountHeaderBuilder.mProfiles == null) { _EL_     mAccountHeaderBuilder.mProfiles=new ArrayList<>(); _EL_   } _EL_   Collections.addAll(mAccountHeaderBuilder.mProfiles,IdDistributor.checkIds(profiles)); _EL_   mAccountHeaderBuilder.updateHeaderAndList(); _EL_ } _EL_ ', 'private static boolean isIdentifierName(String k){ _EL_   int n=k.length(); _EL_   if (n == 0) { _EL_     return false; _EL_   } _EL_   if (!Character.isJavaIdentifierStart(k.charAt(0))) { _EL_     return false; _EL_   } _EL_   for (int i=1; i < n; ++i) { _EL_     if (!Character.isJavaIdentifierPart(k.charAt(i))) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'static boolean lessThanUnsignedLong(long x1,long x2){ _EL_   return (x1 + Long.MIN_VALUE) < (x2 + Long.MIN_VALUE); _EL_ } _EL_ ', 'private void moveSingleNode(Object source,Point newPoint){ _EL_   DisplayNode node=(DisplayNode)source; _EL_   int deltaX=newPoint.x - clickPoint.x; _EL_   int deltaY=newPoint.y - clickPoint.y; _EL_   int newX=node.getLocation().x + deltaX; _EL_   int newY=node.getLocation().y + deltaY; _EL_   node.setLocation(newX,newY); _EL_ } _EL_ ', 'public static <T>List<T> toList(T obj1,T obj2,T obj3){ _EL_   List<T> list=new LinkedList<T>(); _EL_   list.add(obj1); _EL_   list.add(obj2); _EL_   list.add(obj3); _EL_   return list; _EL_ } _EL_ ', 'public void addMacroRecord(MacroRecord record){ _EL_   if (record != null)   macroRecords.add(record); _EL_ } _EL_ ', '@SuppressWarnings("rawtypes") protected KafkaSpoutWrapper createKafkaSpout(Map conf,TopologyContext context,SpoutOutputCollector collector,final String topic,String schemeClsName,SpoutSpec spoutSpec,Map<String,StreamDefinition> sds) throws Exception { _EL_   String kafkaBrokerZkQuorum=config.getString("spout.kafkaBrokerZkQuorum"); _EL_   BrokerHosts hosts=null; _EL_   if (config.hasPath("spout.kafkaBrokerZkBasePath")) { _EL_     hosts=new ZkHosts(kafkaBrokerZkQuorum,config.getString("spout.kafkaBrokerZkBasePath")); _EL_   } _EL_  else { _EL_     hosts=new ZkHosts(kafkaBrokerZkQuorum); _EL_   } _EL_   String transactionZkRoot=DEFAULT_STORM_KAFKA_TRANSACTION_ZK_ROOT; _EL_   if (config.hasPath("spout.stormKafkaTransactionZkPath")) { _EL_     transactionZkRoot=config.getString("spout.stormKafkaTransactionZkPath"); _EL_   } _EL_   String zkStateTransactionRelPath=DEFAULT_STORM_KAFKA_TRANSACTION_ZK_RELATIVE_PATH; _EL_   if (config.hasPath("spout.stormKafkaEagleConsumer")) { _EL_     zkStateTransactionRelPath=config.getString("spout.stormKafkaEagleConsumer"); _EL_   } _EL_   SpoutConfig spoutConfig=new SpoutConfig(hosts,topic,transactionZkRoot,zkStateTransactionRelPath + "/" + topic+ "/"+ topologyId); _EL_   boolean stormKafkaUseSameZkQuorumWithKafkaBroker=config.getBoolean("spout.stormKafkaUseSameZkQuorumWithKafkaBroker"); _EL_   if (stormKafkaUseSameZkQuorumWithKafkaBroker) { _EL_     ZkServerPortUtils utils=new ZkServerPortUtils(kafkaBrokerZkQuorum); _EL_     spoutConfig.zkServers=utils.getZkHosts(); _EL_     spoutConfig.zkPort=utils.getZkPort(); _EL_   } _EL_  else { _EL_     ZkServerPortUtils utils=new ZkServerPortUtils(config.getString("spout.stormKafkaTransactionZkQuorum")); _EL_     spoutConfig.zkServers=utils.getZkHosts(); _EL_     spoutConfig.zkPort=utils.getZkPort(); _EL_   } _EL_   spoutConfig.stateUpdateIntervalMs=config.hasPath("spout.stormKafkaStateUpdateIntervalMs") ? config.getInt("spout.stormKafkaStateUpdateIntervalMs") : 2000; _EL_   spoutConfig.fetchSizeBytes=config.hasPath("spout.stormKafkaFetchSizeBytes") ? config.getInt("spout.stormKafkaFetchSizeBytes") : 1048586; _EL_   if (config.hasPath("spout.stormKafkaStartOffsetTime")) { _EL_     spoutConfig.startOffsetTime=config.getInt("spout.stormKafkaStartOffsetTime"); _EL_   } _EL_   spoutConfig.scheme=createMultiScheme(conf,topic,schemeClsName); _EL_   KafkaSpoutWrapper wrapper=new KafkaSpoutWrapper(spoutConfig,kafkaSpoutMetric); _EL_   SpoutOutputCollectorWrapper collectorWrapper=new SpoutOutputCollectorWrapper(this,collector,topic,spoutSpec,numOfRouterBolts,sds,this.serializer); _EL_   wrapper.open(conf,context,collectorWrapper); _EL_   if (LOG.isInfoEnabled()) { _EL_     LOG.info("create and open kafka wrapper: topic {}, scheme class{} ",topic,schemeClsName); _EL_   } _EL_   return wrapper; _EL_ } _EL_ ', 'public Builder addEmail(Email email){ _EL_   emails.add(email); _EL_   return this; _EL_ } _EL_ ', 'public static HashProvider best(HashParameters params){ _EL_   return best(params,EnumSet.of(HashSupport.STATEFUL)); _EL_ } _EL_ ', 'public byte[] readRawBytes(final int size) throws IOException { _EL_   if (size < 0) { _EL_     throw InvalidProtocolBufferNanoException.negativeSize(); _EL_   } _EL_   if (bufferPos + size > currentLimit) { _EL_     skipRawBytes(currentLimit - bufferPos); _EL_     throw InvalidProtocolBufferNanoException.truncatedMessage(); _EL_   } _EL_   if (size <= bufferSize - bufferPos) { _EL_     final byte[] bytes=new byte[size]; _EL_     System.arraycopy(buffer,bufferPos,bytes,0,size); _EL_     bufferPos+=size; _EL_     return bytes; _EL_   } _EL_  else { _EL_     throw InvalidProtocolBufferNanoException.truncatedMessage(); _EL_   } _EL_ } _EL_ ', 'public synchronized void loadFromFile(){ _EL_   entries.clear(); _EL_   Path file=Paths.get(fileName); _EL_   try (BufferedReader reader=Files.newBufferedReader(file,CHARSET)){ _EL_     String line; _EL_     do { _EL_       line=reader.readLine(); _EL_       AddressbookEntry parsedEntry=parseLine(line); _EL_       if (parsedEntry != null) { _EL_         entries.put(parsedEntry.getName(),parsedEntry); _EL_       } _EL_     } _EL_  while (line != null); _EL_   } _EL_  catch (  IOException ex) { _EL_     LOGGER.warning("Error reading addressbook: " + ex.getLocalizedMessage()); _EL_   } _EL_   LOGGER.info("Read " + entries.size() + " addressbook entries from "+ fileName); _EL_   scanCategories(); _EL_ } _EL_ ', 'public boolean remove(final int position){ _EL_   final AdapterTransaction removeTransaction=new RemoveTransaction<>(this,position); _EL_   final boolean success=removeTransaction.perform(); _EL_   mTransactions.offer(removeTransaction); _EL_   return success; _EL_ } _EL_ ', 'private void encodeTypes(List<Type> types,Map<String,Object> m,String key,Declaration from){ _EL_   if (types == null || types.isEmpty())   return; _EL_   List<Map<String,Object>> sats=new ArrayList<>(types.size()); _EL_   for (  Type st : types) { _EL_     sats.add(typeMap(st,from)); _EL_   } _EL_   m.put(key,sats); _EL_ } _EL_ ', 'public static void clearAssertionInformation(){ _EL_   _AssertInfos.clear(); _EL_   _AssertOccured=false; _EL_ } _EL_ ', 'public static Operator generateBranchPlan(AkibanInformationSchema ais,Table table){ _EL_   final Operator indexScan=generateIndexScan(ais,table); _EL_   final Schema schema=SchemaCache.globalSchema(ais); _EL_   PrimaryKey pkey=table.getPrimaryKeyIncludingInternal(); _EL_   IndexRowType indexType=schema.indexRowType(pkey.getIndex()); _EL_   return generateBranchPlan(table,indexScan,indexType); _EL_ } _EL_ ', 'protected void addToMaintenanceQueue(NodePortTuple npt){ _EL_   if (maintenanceQueue.contains(npt) == false) { _EL_     maintenanceQueue.add(npt); _EL_   } _EL_ } _EL_ ', 'public long startstack(){ _EL_   return Long.parseLong(fields[27]); _EL_ } _EL_ ', 'public boolean match(MimeType other){ _EL_   if (this == other)   return true; _EL_   if (type != null && other.type != null && !type.equals(other.type))   return false; _EL_   if (subtype != null && other.subtype != null && !subtype.equals(other.subtype))   return false; _EL_   return true; _EL_ } _EL_ ', 'protected List<VolumeDescriptor> createChangeVirtualPoolDescriptors(StorageSystem vplexSystem,Volume volume,VirtualPool newVpool,String taskId,List<Recommendation> recommendations,VirtualPoolCapabilityValuesWrapper capabilities,ControllerOperationValuesWrapper operationsWrapper) throws InternalException { _EL_   URI volumeVarrayURI=volume.getVirtualArray(); _EL_   VirtualArray volumeVarray=_dbClient.queryObject(VirtualArray.class,volumeVarrayURI); _EL_   s_logger.info("Virtual volume varray is {}",volumeVarrayURI); _EL_   URI volumeVpoolURI=volume.getVirtualPool(); _EL_   VirtualPool currentVpool=_dbClient.queryObject(VirtualPool.class,volumeVpoolURI); _EL_   List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>(); _EL_   VolumeDescriptor vplexVirtualVolumeDesc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,volume.getStorageController(),volume.getId(),volume.getPool(),null); _EL_   Map<String,Object> volumeParams=new HashMap<String,Object>(); _EL_   volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,volume.getId()); _EL_   volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,newVpool.getId()); _EL_   volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,volume.getVirtualPool()); _EL_   if (operationsWrapper != null) { _EL_     if (operationsWrapper.getMigrationSuspendBeforeCommit() != null) { _EL_       volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_COMMIT,operationsWrapper.getMigrationSuspendBeforeCommit()); _EL_     } _EL_     if (operationsWrapper.getMigrationSuspendBeforeDeleteSource() != null) { _EL_       volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE,operationsWrapper.getMigrationSuspendBeforeDeleteSource()); _EL_     } _EL_   } _EL_   vplexVirtualVolumeDesc.setParameters(volumeParams); _EL_   descriptors.add(vplexVirtualVolumeDesc); _EL_   if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVpool,newVpool)) { _EL_     Volume migSrcVolume=getAssociatedVolumeInVArray(volume,volumeVarrayURI); _EL_     descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,volumeVarray,newVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,false,capabilities)); _EL_   } _EL_   URI haVarrayURI=VirtualPoolChangeAnalyzer.getHaVarrayURI(currentVpool); _EL_   if (haVarrayURI != null) { _EL_     VirtualArray haVarray=_dbClient.queryObject(VirtualArray.class,haVarrayURI); _EL_     VirtualPool currentHaVpool=VirtualPoolChangeAnalyzer.getHaVpool(currentVpool,_dbClient); _EL_     VirtualPool newHaVpool=VirtualPoolChangeAnalyzer.getNewHaVpool(currentVpool,newVpool,_dbClient); _EL_     if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentHaVpool,newHaVpool)) { _EL_       Volume migSrcVolume=getAssociatedVolumeInVArray(volume,haVarrayURI); _EL_       descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,haVarray,newHaVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,true,capabilities)); _EL_     } _EL_   } _EL_   return descriptors; _EL_ } _EL_ ', 'public static boolean isJavaScriptEnabled(HttpServletRequest request){ _EL_   HttpSession session=request.getSession(); _EL_   Boolean javaScriptEnabled=(Boolean)session.getAttribute("javaScriptEnabled"); _EL_   if (javaScriptEnabled != null) { _EL_     return javaScriptEnabled.booleanValue(); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public boolean equals(Object obj){ _EL_   if (this == obj)   return true; _EL_   if (obj instanceof ECFieldFp) { _EL_     return (p.equals(((ECFieldFp)obj).p)); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public String name(){ _EL_   return theName; _EL_ } _EL_ ', 'private void generateLegalTimesTree(){ _EL_   int k0=KeyEvent.KEYCODE_0; _EL_   int k1=KeyEvent.KEYCODE_1; _EL_   int k2=KeyEvent.KEYCODE_2; _EL_   int k3=KeyEvent.KEYCODE_3; _EL_   int k4=KeyEvent.KEYCODE_4; _EL_   int k5=KeyEvent.KEYCODE_5; _EL_   int k6=KeyEvent.KEYCODE_6; _EL_   int k7=KeyEvent.KEYCODE_7; _EL_   int k8=KeyEvent.KEYCODE_8; _EL_   int k9=KeyEvent.KEYCODE_9; _EL_   mLegalTimesTree=new Node(); _EL_   if (mIs24HourMode) { _EL_     Node minuteFirstDigit=new Node(k0,k1,k2,k3,k4,k5); _EL_     Node minuteSecondDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9); _EL_     minuteFirstDigit.addChild(minuteSecondDigit); _EL_     Node firstDigit=new Node(k0,k1); _EL_     mLegalTimesTree.addChild(firstDigit); _EL_     Node secondDigit=new Node(k0,k1,k2,k3,k4,k5); _EL_     firstDigit.addChild(secondDigit); _EL_     secondDigit.addChild(minuteFirstDigit); _EL_     Node thirdDigit=new Node(k6,k7,k8,k9); _EL_     secondDigit.addChild(thirdDigit); _EL_     secondDigit=new Node(k6,k7,k8,k9); _EL_     firstDigit.addChild(secondDigit); _EL_     secondDigit.addChild(minuteFirstDigit); _EL_     firstDigit=new Node(k2); _EL_     mLegalTimesTree.addChild(firstDigit); _EL_     secondDigit=new Node(k0,k1,k2,k3); _EL_     firstDigit.addChild(secondDigit); _EL_     secondDigit.addChild(minuteFirstDigit); _EL_     secondDigit=new Node(k4,k5); _EL_     firstDigit.addChild(secondDigit); _EL_     secondDigit.addChild(minuteSecondDigit); _EL_     firstDigit=new Node(k3,k4,k5,k6,k7,k8,k9); _EL_     mLegalTimesTree.addChild(firstDigit); _EL_     firstDigit.addChild(minuteFirstDigit); _EL_   } _EL_  else { _EL_     Node ampm=new Node(getAmOrPmKeyCode(AM),getAmOrPmKeyCode(PM)); _EL_     Node firstDigit=new Node(k1); _EL_     mLegalTimesTree.addChild(firstDigit); _EL_     firstDigit.addChild(ampm); _EL_     Node secondDigit=new Node(k0,k1,k2); _EL_     firstDigit.addChild(secondDigit); _EL_     secondDigit.addChild(ampm); _EL_     Node thirdDigit=new Node(k0,k1,k2,k3,k4,k5); _EL_     secondDigit.addChild(thirdDigit); _EL_     thirdDigit.addChild(ampm); _EL_     Node fourthDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9); _EL_     thirdDigit.addChild(fourthDigit); _EL_     fourthDigit.addChild(ampm); _EL_     thirdDigit=new Node(k6,k7,k8,k9); _EL_     secondDigit.addChild(thirdDigit); _EL_     thirdDigit.addChild(ampm); _EL_     secondDigit=new Node(k3,k4,k5); _EL_     firstDigit.addChild(secondDigit); _EL_     thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9); _EL_     secondDigit.addChild(thirdDigit); _EL_     thirdDigit.addChild(ampm); _EL_     firstDigit=new Node(k2,k3,k4,k5,k6,k7,k8,k9); _EL_     mLegalTimesTree.addChild(firstDigit); _EL_     firstDigit.addChild(ampm); _EL_     secondDigit=new Node(k0,k1,k2,k3,k4,k5); _EL_     firstDigit.addChild(secondDigit); _EL_     thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9); _EL_     secondDigit.addChild(thirdDigit); _EL_     thirdDigit.addChild(ampm); _EL_   } _EL_ } _EL_ ', 'public StrBuilder insert(final int index,final Object obj){ _EL_   if (obj == null) { _EL_     return insert(index,nullText); _EL_   } _EL_   return insert(index,obj.toString()); _EL_ } _EL_ ', '@Override public void handleMouseMoved(ChartCanvas canvas,MouseEvent e){ _EL_   if (!canvas.isTooltipEnabled()) { _EL_     return; _EL_   } _EL_   String text=getTooltipText(canvas,e.getX(),e.getY()); _EL_   canvas.setTooltip(text,e.getScreenX(),e.getScreenY()); _EL_ } _EL_ ', 'public boolean disableVMAX3Compression(URI blockObjectURI,StorageSystem storageSystem){ _EL_   VirtualPool virtualPool=null; _EL_   StoragePool storagePool=null; _EL_   Volume volume=null; _EL_   if (URIUtil.isType(blockObjectURI,Volume.class)) { _EL_     volume=_dbClient.queryObject(Volume.class,blockObjectURI); _EL_   } _EL_  else   if (URIUtil.isType(blockObjectURI,BlockSnapshot.class)) { _EL_     BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockObjectURI); _EL_     volume=_dbClient.queryObject(Volume.class,snapshot.getParent()); _EL_   } _EL_  else   if (URIUtil.isType(blockObjectURI,BlockMirror.class)) { _EL_     BlockMirror mirror=_dbClient.queryObject(BlockMirror.class,blockObjectURI); _EL_     virtualPool=_dbClient.queryObject(VirtualPool.class,mirror.getVirtualPool()); _EL_     storagePool=_dbClient.queryObject(StoragePool.class,mirror.getPool()); _EL_   } _EL_   if (volume != null) { _EL_     virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool()); _EL_     storagePool=_dbClient.queryObject(StoragePool.class,volume.getPool()); _EL_   } _EL_   return (checkIfProviderSupportsCompressionOperations(storageSystem) && !virtualPool.getCompressionEnabled() && storagePool.getCompressionEnabled()); _EL_ } _EL_ ', 'public static LatLon rhumbEndPosition(LatLon p,double rhumbAzimuthRadians,double pathLengthRadians){ _EL_   if (p == null) { _EL_     throw new IllegalArgumentException("LatLon Is Null"); _EL_   } _EL_   return rhumbEndPosition(p,Angle.fromRadians(rhumbAzimuthRadians),Angle.fromRadians(pathLengthRadians)); _EL_ } _EL_ ', 'private static int indexOf(Object[] array,Object elt){ _EL_   return indexOf(array,array.length,elt); _EL_ } _EL_ ', 'public Dimension maximumLayoutSize(Container target){ _EL_   return new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE); _EL_ } _EL_ ', 'public void update(long n){ _EL_   uncounted.addAndGet(n); _EL_ } _EL_ ', 'private void logExpiration(Entry e){ _EL_   if (e.renewalsDone()) { _EL_     logger.log(Level.FINE,"Reached desired expiration for lease {0}",e.lease); _EL_   } _EL_  else { _EL_     logger.log(Levels.FAILED,"Lease {0} expired before reaching desired expiration",e.lease); _EL_   } _EL_ } _EL_ ', 'void removeRipple(Ripple ripple){ _EL_   final Ripple[] ripples=mExitingRipples; _EL_   final int count=mExitingRipplesCount; _EL_   final int index=getRippleIndex(ripple); _EL_   if (index >= 0) { _EL_     System.arraycopy(ripples,index + 1,ripples,index,count - (index + 1)); _EL_     ripples[count - 1]=null; _EL_     mExitingRipplesCount--; _EL_     invalidateSelf(); _EL_   } _EL_ } _EL_ ', "protected final void writeS(ByteBuffer buf,String text){ _EL_   if (text == null) { _EL_     buf.putChar('\\000'); _EL_   } _EL_  else { _EL_     final int len=text.length(); _EL_     for (int i=0; i < len; i++) { _EL_       buf.putChar(text.charAt(i)); _EL_     } _EL_     buf.putChar('\\000'); _EL_   } _EL_ } _EL_ ", '@Override public void onDrawEye(Eye eye){ _EL_   GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT); _EL_   Engine.checkGLError("mColorParam"); _EL_   if (!prefOrientationProviderString.equals("0")) { _EL_     if (firstOnDrawEye > 0) { _EL_       firstOnDrawEye--; _EL_       float[] m=new float[16]; _EL_       Matrix.invertM(m,0,mHeadViewSDK,0); _EL_       Matrix.multiplyMM(m,0,eye.getEyeView(),0,m,0); _EL_       if (eye.getType() == Eye.Type.RIGHT) { _EL_         mEyeRightView=m; _EL_       } _EL_  else       if (eye.getType() == Eye.Type.LEFT) { _EL_         mEyeLeftView=m; _EL_       } _EL_       return; _EL_     } _EL_     float[] m=new float[16]; _EL_     if (eye.getType() == Eye.Type.RIGHT) { _EL_       Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeRightView,0); _EL_     } _EL_  else { _EL_       Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeLeftView,0); _EL_     } _EL_     Matrix.multiplyMM(mView,0,m,0,mCamera,0); _EL_   } _EL_  else { _EL_     Matrix.multiplyMM(mView,0,eye.getEyeView(),0,mCamera,0); _EL_   } _EL_   float[] perspective=eye.getPerspective(Z_NEAR,Z_FAR); _EL_   GLES20.glEnable(GLES20.GL_DEPTH_TEST); _EL_   GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA); _EL_   GLES20.glEnable(GLES20.GL_BLEND); _EL_   if (prefShowEnv && bgEnv.isReady()) { _EL_     Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0); _EL_     Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0); _EL_     bgEnv.draw(eye.getType(),mModelViewProjection); _EL_   } _EL_   GLES20.glDisable(GLES20.GL_DEPTH_TEST); _EL_   Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0); _EL_   cameraPreview.draw(eye.getType(),mModelViewProjection); _EL_   Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0); _EL_   Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0); _EL_   screen.draw(eye.getType(),mModelViewProjection); _EL_   for (  ButtonThing button : buttonList) { _EL_     Matrix.multiplyMM(mModelView,0,mView,0,button.model,0); _EL_     Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0); _EL_     button.draw(eye.getType(),mModelViewProjection); _EL_   } _EL_   Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0); _EL_   aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection); _EL_ } _EL_ ', 'protected SourceRecords consumeRecordsByTopic(int numRecords) throws InterruptedException { _EL_   SourceRecords records=new SourceRecords(); _EL_   consumeRecords(numRecords,null); _EL_   return records; _EL_ } _EL_ ', 'public static boolean isValidVector(Vector2f vector){ _EL_   if (vector == null) { _EL_     return false; _EL_   } _EL_   if (Float.isNaN(vector.x) || Float.isNaN(vector.y)) { _EL_     return false; _EL_   } _EL_   if (Float.isInfinite(vector.x) || Float.isInfinite(vector.y)) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public boolean isObsessional(){ _EL_   return typeString.contains(SUFFIX_OBSESSIONAL); _EL_ } _EL_ ', 'public boolean remove(Object targetChild){ _EL_   return remove(targetChild,true); _EL_ } _EL_ ', 'private void notifyClassObservers(ClassDescriptor classDescriptor){ _EL_   for (  IClassObserver observer : classObserverList) { _EL_     observer.observeClass(classDescriptor); _EL_   } _EL_ } _EL_ ', 'public void dup2(){ _EL_   mv.visitInsn(Opcodes.DUP2); _EL_ } _EL_ ', 'static boolean isAppXml(String mime){ _EL_   return mime != null && (mime.equals("application/xml") || mime.equals("application/xml-dtd") || mime.equals("application/xml-external-parsed-entity")|| mime.startsWith("application/") && mime.endsWith("+xml")); _EL_ } _EL_ ', 'public static NativePage createNativePageForURL(String url,NativePage candidatePage,Tab tab,TabModelSelector tabModelSelector,Activity activity){ _EL_   return createNativePageForURL(url,candidatePage,tab,tabModelSelector,activity,tab.isIncognito()); _EL_ } _EL_ ', 'protected void throwParseException(ParseException e) throws ParseException { _EL_   if (locator != null) { _EL_     String elementLocation=""; _EL_     if (curHandler != null) { _EL_       elementLocation+=", element " + curHandler.qName; _EL_     } _EL_     String location="[Line " + String.valueOf(locator.getLineNumber()) + ", Column "+ String.valueOf(locator.getColumnNumber())+ elementLocation+ "] "; _EL_     LogUtils.logException(logger,Level.FINE,location,e); _EL_     throw new ParseException(location + e.getMessage(),e); _EL_   } _EL_  else { _EL_     LogUtils.logException(logger,Level.FINE,null,e); _EL_     throw e; _EL_   } _EL_ } _EL_ ', 'public static EPType singleValue(Class singleValueType){ _EL_   if (singleValueType != null && singleValueType.isArray()) { _EL_     return new ClassMultiValuedEPType(singleValueType,singleValueType.getComponentType()); _EL_   } _EL_   return new ClassEPType(singleValueType); _EL_ } _EL_ ', 'private static Class<?> convertFieldType(String fieldType){ _EL_   if (fieldTypeMap.containsKey(fieldType)) { _EL_     return fieldTypeMap.get(fieldType); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public Dictionary(Directory tempDir,String tempFileNamePrefix,InputStream affix,List<InputStream> dictionaries,boolean ignoreCase) throws IOException, ParseException { _EL_   this.ignoreCase=ignoreCase; _EL_   this.needsInputCleaning=ignoreCase; _EL_   this.needsOutputCleaning=false; _EL_   flagLookup.add(new BytesRef()); _EL_   Path aff=Files.createTempFile(tempPath,"affix","aff"); _EL_   OutputStream out=new BufferedOutputStream(Files.newOutputStream(aff)); _EL_   InputStream aff1=null; _EL_   InputStream aff2=null; _EL_   boolean success=false; _EL_   try { _EL_     final byte[] buffer=new byte[1024 * 8]; _EL_     int len; _EL_     while ((len=affix.read(buffer)) > 0) { _EL_       out.write(buffer,0,len); _EL_     } _EL_     out.close(); _EL_     aff1=new BufferedInputStream(Files.newInputStream(aff)); _EL_     String encoding=getDictionaryEncoding(aff1); _EL_     CharsetDecoder decoder=getJavaEncoding(encoding); _EL_     aff2=new BufferedInputStream(Files.newInputStream(aff)); _EL_     readAffixFile(aff2,decoder); _EL_     IntSequenceOutputs o=IntSequenceOutputs.getSingleton(); _EL_     Builder<IntsRef> b=new Builder<>(FST.INPUT_TYPE.BYTE4,o); _EL_     readDictionaryFiles(tempDir,tempFileNamePrefix,dictionaries,decoder,b); _EL_     words=b.finish(); _EL_     aliases=null; _EL_     morphAliases=null; _EL_     success=true; _EL_   } _EL_   finally { _EL_     IOUtils.closeWhileHandlingException(out,aff1,aff2); _EL_     if (success) { _EL_       Files.delete(aff); _EL_     } _EL_  else { _EL_       IOUtils.deleteFilesIgnoringExceptions(aff); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void collapseBuilding(Building bldg){ _EL_   buildings.removeElement(bldg); _EL_   Enumeration<Coords> bldgCoords=bldg.getCoords(); _EL_   while (bldgCoords.hasMoreElements()) { _EL_     final Coords coords=bldgCoords.nextElement(); _EL_     collapseBuilding(coords); _EL_   } _EL_ } _EL_ ', '@RpcMethod public void detachISO(String vmId,boolean isDeleteFile,AsyncMethodCallback<Host.AsyncClient.detach_iso_call> handler) throws RpcException { _EL_   ensureClient(); _EL_   DetachISORequest detachISORequest=new DetachISORequest(vmId); _EL_   detachISORequest.setDelete_file(isDeleteFile); _EL_   clientProxy.setTimeout(DETACH_ISO_TIMEOUT_MS); _EL_   logger.info("detach_iso vm {}, target {}, request {}",vmId,getHostIp(),detachISORequest); _EL_   try { _EL_     clientProxy.detach_iso(detachISORequest,handler); _EL_   } _EL_  catch (  TException e) { _EL_     throw new RpcException(e.getMessage()); _EL_   } _EL_ } _EL_ ', 'private String readNfcErrorMsg(ByteBuffer reply) throws IOException { _EL_   int errorType=reply.getInt(); _EL_   int errorCode=reply.getInt(); _EL_   int msgLen=reply.getInt(); _EL_   if (msgLen == 0) { _EL_     return ""; _EL_   } _EL_   ByteBuffer msgBuffer=ByteBuffer.allocate(msgLen); _EL_   readFully(msgBuffer); _EL_   String errorMsg=new String(msgBuffer.array(),0,msgLen - 1,Charsets.US_ASCII); _EL_   return String.format("NFC Error %d/%d: %s",errorType,errorCode,errorMsg); _EL_ } _EL_ ', 'public void addUndoableAction(UndoableAction action){ _EL_   undoStack.push(action); _EL_   redoStack.removeAllElements(); _EL_ } _EL_ ', 'public IntArrayList(int[] data){ _EL_   array=new int[(int)(data.length * 1.1) + 1]; _EL_   size=data.length; _EL_   System.arraycopy(data,0,array,0,size); _EL_ } _EL_ ', 'private void addPingTimeData(long sample){ _EL_   lastPingTimesLock.lock(); _EL_   try { _EL_     if (lastPingTimes == null) { _EL_       lastPingTimes=new long[PING_MOVING_AVERAGE_WINDOW]; _EL_       Arrays.fill(lastPingTimes,sample); _EL_     } _EL_  else { _EL_       System.arraycopy(lastPingTimes,1,lastPingTimes,0,lastPingTimes.length - 1); _EL_       lastPingTimes[lastPingTimes.length - 1]=sample; _EL_     } _EL_   } _EL_   finally { _EL_     lastPingTimesLock.unlock(); _EL_   } _EL_ } _EL_ ', 'protected void tearDown(){ _EL_   try { _EL_     ds.close(); _EL_     sds.close(); _EL_   } _EL_  catch (  Exception e) { _EL_   } _EL_ } _EL_ ', 'public void removeCustomSashFormListener(ICustomSashFormListener listener){ _EL_   if (customSashFormListeners != null) { _EL_     customSashFormListeners.remove(listener); _EL_   } _EL_ } _EL_ ', 'public static void writeStringToFile(File file,String data) throws IOException { _EL_   writeStringToFile(file,data,Charset.defaultCharset(),false); _EL_ } _EL_ ', 'protected void deleteSessionVariables(String sessionId,String... varNames){ _EL_   if (sessionId.equals("")) { _EL_     return; _EL_   } _EL_   Key key=keyFactory.newKey(sessionId); _EL_   Transaction transaction=datastore.newTransaction(); _EL_   try { _EL_     Entity stateEntity=transaction.get(key); _EL_     Entity.Builder builder=Entity.builder(stateEntity); _EL_     StringBuilder delNames=new StringBuilder(); _EL_     for (    String varName : varNames) { _EL_       delNames.append(varName + " "); _EL_       builder=builder.remove(varName); _EL_     } _EL_     datastore.update(builder.build()); _EL_   } _EL_  catch (  NullPointerException e) { _EL_   } _EL_  finally { _EL_     if (transaction.active()) { _EL_       transaction.rollback(); _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public void close() throws IOException { _EL_   if (mBufferCount > 0) { _EL_     try { _EL_       mQueue.write(mBuffer,0,mBufferCount); _EL_     } _EL_  catch (    InterruptedException e) { _EL_       throw new IOException("GzipAsynchOutputStream interrupted during write/3"); _EL_     } _EL_     mBufferCount=0; _EL_   } _EL_   mQueue.close(); _EL_   try { _EL_     mThread.join(); _EL_   } _EL_  catch (  InterruptedException e) { _EL_     throw new IOException("AsynchOutputStream interrupted during close"); _EL_   } _EL_  finally { _EL_     super.close(); _EL_   } _EL_   checkException(); _EL_ } _EL_ ', 'public static int parseStringAsInt(String in) throws IndexParseFieldException { _EL_   try { _EL_     return Integer.parseInt(in); _EL_   } _EL_  catch (  NumberFormatException e) { _EL_     throw new IndexParseFieldException(in,e); _EL_   } _EL_ } _EL_ ', 'public void writeAll(ResultSet rs,boolean includeColumnNames,boolean trim) throws SQLException, IOException { _EL_   if (includeColumnNames) { _EL_     writeColumnNames(rs); _EL_   } _EL_   while (rs.next()) { _EL_     writeNext(resultService.getColumnValues(rs,trim)); _EL_   } _EL_ } _EL_ ', 'private static void verifyDevice(IDevice d,long mac,Short vlan,Integer ip,long swId,int port){ _EL_   assertNotNull(d); _EL_   assertEquals(MacAddress.of(mac),d.getMACAddress()); _EL_   if (vlan == null)   assertArrayEquals(new VlanVid[]{VlanVid.ofVlan(-1)},d.getVlanId()); _EL_  else   assertArrayEquals(new VlanVid[]{VlanVid.ofVlan(vlan)},d.getVlanId()); _EL_   if (ip == null)   assertArrayEquals(new IPv4Address[]{IPv4Address.of(0)},d.getIPv4Addresses()); _EL_  else   assertArrayEquals(new IPv4Address[]{IPv4Address.of(ip)},d.getIPv4Addresses()); _EL_   SwitchPort expectedAp=new SwitchPort(DatapathId.of(swId),OFPort.of(port)); _EL_   assertArrayEquals(new SwitchPort[]{expectedAp},d.getAttachmentPoints()); _EL_ } _EL_ ', 'public ZoneRulesBuilder addWindow(ZoneOffset standardOffset,LocalDateTime until,TimeDefinition untilDefinition){ _EL_   Objects.requireNonNull(standardOffset,"standardOffset"); _EL_   Objects.requireNonNull(until,"until"); _EL_   Objects.requireNonNull(untilDefinition,"untilDefinition"); _EL_   TZWindow window=new TZWindow(standardOffset,until,untilDefinition); _EL_   if (windowList.size() > 0) { _EL_     TZWindow previous=windowList.get(windowList.size() - 1); _EL_     window.validateWindowOrder(previous); _EL_   } _EL_   windowList.add(window); _EL_   return this; _EL_ } _EL_ ', 'public boolean isTTFNativeFont(){ _EL_   return ttf; _EL_ } _EL_ ', 'private void registerProviders(){ _EL_   final DevMachine devMachine=appContext.getDevMachine(); _EL_   if (devMachine == null) { _EL_     return; _EL_   } _EL_   final Set<Macro> providers=getMacros(devMachine); _EL_   checkNotNull(providers); _EL_   if (providers.isEmpty()) { _EL_     return; _EL_   } _EL_   providerRegistry.register(providers); _EL_ } _EL_ ', 'public LongMap(int initialCapacity,float loadFactor){ _EL_   if (initialCapacity < 0)   throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity); _EL_   if (capacity > 1 << 30)   throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity); _EL_   capacity=MathUtils.nextPowerOfTwo(initialCapacity); _EL_   if (loadFactor <= 0)   throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor); _EL_   this.loadFactor=loadFactor; _EL_   threshold=(int)(capacity * loadFactor); _EL_   mask=capacity - 1; _EL_   hashShift=31 - Integer.numberOfTrailingZeros(capacity); _EL_   stashCapacity=Math.max(3,(int)Math.ceil(Math.log(capacity)) + 1); _EL_   pushIterations=Math.max(Math.min(capacity,32),(int)Math.sqrt(capacity) / 4); _EL_   keyTable=new long[capacity + stashCapacity]; _EL_   valueTable=(V[])new Object[keyTable.length]; _EL_ } _EL_ ', 'protected ASN1Set(ASN1Encodable obj){ _EL_   set.addElement(obj); _EL_ } _EL_ ', 'private static long signFromBit_antiCyclic(final double value){ _EL_   return Double.doubleToRawLongBits(value) >> 62 | 1; _EL_ } _EL_ ', 'private void analyzeClassFields(String className,int action){ _EL_   try { _EL_     Class<?> dynamicClass=Class.forName(className); _EL_     Field[] fields=dynamicClass.getDeclaredFields(); _EL_     for (    Field field : fields) { _EL_       if (isPrivateAndNonPrimitive(field)) { _EL_         oneToAnyConditions(className,field,action); _EL_         manyToAnyConditions(className,field,action); _EL_       } _EL_     } _EL_   } _EL_  catch (  ClassNotFoundException ex) { _EL_     ex.printStackTrace(); _EL_     throw new DatabaseGenerateException(DatabaseGenerateException.CLASS_NOT_FOUND + className); _EL_   } _EL_ } _EL_ ', 'public static void loadAll(final JFrame parent,final IDebugger debugger,final IAddress offset,final int size){ _EL_   checkArguments(parent,debugger,offset); _EL_   final CDumpAllWaiter waiter=new CDumpAllWaiter(debugger,offset,size); _EL_   CProgressDialog.showEndless(parent,"Loading memory" + " ...",waiter); _EL_   if (waiter.getException() != null) { _EL_     CUtilityFunctions.logException(waiter.getException()); _EL_     final String innerMessage="E00078: " + "Could not load memory section"; _EL_     final String innerDescription=CUtilityFunctions.createDescription(String.format("The memory section starting at address \'%s\' could not loaded.",offset.toHexString()),new String[]{"There was a problem with the connection to the debug client."},new String[]{"The memory data was not loaded."}); _EL_     NaviErrorDialog.show(parent,innerMessage,innerDescription,waiter.getException()); _EL_   } _EL_ } _EL_ ', 'public static boolean deleteDirectory(String directory,boolean useOSNativeDelete) throws IOException { _EL_   boolean result=false; _EL_   if (!useOSNativeDelete) { _EL_     File dir=new File(directory); _EL_     for (    File file : dir.listFiles()) { _EL_       if (file.delete()) { _EL_         log.debug("{} was deleted",file.getName()); _EL_       } _EL_  else { _EL_         log.debug("{} was not deleted",file.getName()); _EL_         file.deleteOnExit(); _EL_       } _EL_       file=null; _EL_     } _EL_     if (dir.delete()) { _EL_       log.debug("Directory was deleted"); _EL_       result=true; _EL_     } _EL_  else { _EL_       log.debug("Directory was not deleted, it may be deleted on exit"); _EL_       dir.deleteOnExit(); _EL_     } _EL_     dir=null; _EL_   } _EL_  else { _EL_     Process p=null; _EL_     Thread std=null; _EL_     try { _EL_       Runtime runTime=Runtime.getRuntime(); _EL_       log.debug("Execute runtime"); _EL_       if (File.separatorChar == \'\\\\\') { _EL_         p=runTime.exec("CMD /D /C \\"RMDIR /Q /S " + directory.replace(\'/\',\'\\\\\') + "\\""); _EL_       } _EL_  else { _EL_         p=runTime.exec("rm -rf " + directory.replace(\'\\\\\',File.separatorChar)); _EL_       } _EL_       std=stdOut(p); _EL_       while (std.isAlive()) { _EL_         try { _EL_           Thread.sleep(250); _EL_         } _EL_  catch (        Exception e) { _EL_         } _EL_       } _EL_       log.debug("Process threads wait exited"); _EL_       result=true; _EL_     } _EL_  catch (    Exception e) { _EL_       log.error("Error running delete script",e); _EL_     } _EL_  finally { _EL_       if (null != p) { _EL_         log.debug("Destroying process"); _EL_         p.destroy(); _EL_         p=null; _EL_       } _EL_       std=null; _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public static String findEditTable(String tables){ _EL_   if (!StringUtils.isEmpty(tables)) { _EL_     int spacepos=tables.indexOf(\' \'); _EL_     int commapos=tables.indexOf(\',\'); _EL_     if (spacepos > 0 && (spacepos < commapos || commapos < 0)) { _EL_       return tables.substring(0,spacepos); _EL_     } _EL_  else     if (commapos > 0 && (commapos < spacepos || spacepos < 0)) { _EL_       return tables.substring(0,commapos); _EL_     } _EL_     return tables; _EL_   } _EL_  else { _EL_     throw new IllegalStateException("Invalid tables"); _EL_   } _EL_ } _EL_ ', 'public void writeOperationsCarFile(){ _EL_   makeBackupFile(defaultOperationsFilename()); _EL_   try { _EL_     if (!checkFile(defaultOperationsFilename())) { _EL_       java.io.File file=new java.io.File(defaultOperationsFilename()); _EL_       java.io.File parentDir=file.getParentFile(); _EL_       if (!parentDir.exists()) { _EL_         if (!parentDir.mkdir()) { _EL_           log.error("Directory wasn\'t created"); _EL_         } _EL_       } _EL_       if (file.createNewFile()) { _EL_         log.debug("File created"); _EL_       } _EL_     } _EL_     writeFile(defaultOperationsFilename()); _EL_   } _EL_  catch (  Exception e) { _EL_     log.error("Exception while writing the new CSV operations file, may not be complete: " + e); _EL_   } _EL_ } _EL_ ', 'private boolean hasNewFollowers(List<Follower> followers){ _EL_   return !followers.isEmpty() && followers.get(0).newFollower; _EL_ } _EL_ ', 'private void onTrackPointElementStart(Attributes attributes) throws SAXException { _EL_   String latitude=attributes.getValue(ATT_LAT); _EL_   String longitude=attributes.getValue(ATT_LON); _EL_   if (latitude == null || longitude == null) { _EL_     throw new SAXException(createErrorMessage("Point with no longitude or latitude.")); _EL_   } _EL_   try { _EL_     latitudeValue=Double.parseDouble(latitude); _EL_     longitudeValue=Double.parseDouble(longitude); _EL_   } _EL_  catch (  NumberFormatException e) { _EL_     throw new SAXException(createErrorMessage("Unable to parse latitude/longitude: " + latitude + "/"+ longitude),e); _EL_   } _EL_ } _EL_ ', 'protected final void firePropertyChange(PropertyChangeEvent evt){ _EL_   pcs.firePropertyChange(evt); _EL_ } _EL_ ', 'static int checkDesc(final String desc,final int start,final boolean canBeVoid){ _EL_   if (desc == null || start >= desc.length()) { _EL_     throw new IllegalArgumentException("Invalid type descriptor (must not be null or empty)"); _EL_   } _EL_   int index; _EL_ switch (desc.charAt(start)) { _EL_ case \'V\': _EL_     if (canBeVoid) { _EL_       return start + 1; _EL_     } _EL_  else { _EL_       throw new IllegalArgumentException("Invalid descriptor: " + desc); _EL_     } _EL_ case \'Z\': _EL_ case \'C\': _EL_ case \'B\': _EL_ case \'S\': _EL_ case \'I\': _EL_ case \'F\': _EL_ case \'J\': _EL_ case \'D\': _EL_   return start + 1; _EL_ case \'[\': _EL_ index=start + 1; _EL_ while (index < desc.length() && desc.charAt(index) == \'[\') { _EL_ ++index; _EL_ } _EL_ if (index < desc.length()) { _EL_ return checkDesc(desc,index,false); _EL_ } _EL_  else { _EL_ throw new IllegalArgumentException("Invalid descriptor: " + desc); _EL_ } _EL_ case \'L\': _EL_ index=desc.indexOf(\';\',start); _EL_ if (index == -1 || index - start < 2) { _EL_ throw new IllegalArgumentException("Invalid descriptor: " + desc); _EL_ } _EL_ try { _EL_ checkInternalName(desc,start + 1,index,null); _EL_ } _EL_  catch (IllegalArgumentException unused) { _EL_ throw new IllegalArgumentException("Invalid descriptor: " + desc); _EL_ } _EL_ return index + 1; _EL_ default : _EL_ throw new IllegalArgumentException("Invalid descriptor: " + desc); _EL_ } _EL_ } _EL_ ', 'public static void sortFields(FieldBinding[] sortedFields,int left,int right){ _EL_   Arrays.sort(sortedFields,left,right,FIELD_COMPARATOR); _EL_ } _EL_ ', 'private void drawBackground(final Graphics g){ _EL_   g.setColor(m_bgColorOffset); _EL_   g.fillRect(-m_firstColumn * m_charWidth,0,m_offsetViewWidth,getHeight()); _EL_ } _EL_ ', 'public void addUniqueAttribute(final String elementName,final String attrName){ _EL_   if ((elementName != null) && (attrName != null)) { _EL_     _uniqueElementAttrMap.put(elementName,attrName); _EL_   } _EL_ } _EL_ ', 'private static DeleteVmResponse checkDeleteVmResponse(DeleteVmResponse deleteVmResponse) throws RpcException { _EL_   logger.info("Checking {}",deleteVmResponse); _EL_ switch (deleteVmResponse.getResult()) { _EL_ case OK: _EL_     break; _EL_ case SYSTEM_ERROR: _EL_   throw new SystemErrorException(deleteVmResponse.getError()); _EL_ case VM_NOT_FOUND: _EL_ throw new VmNotFoundException(deleteVmResponse.getError()); _EL_ case VM_NOT_POWERED_OFF: _EL_ throw new VmNotPoweredOffException(deleteVmResponse.getError()); _EL_ default : _EL_ throw new RpcException(String.format("Unknown response: %s",deleteVmResponse.getResult())); _EL_ } _EL_ return deleteVmResponse; _EL_ } _EL_ ', 'public BlazeValueFactory valueFactory(){ _EL_   return vf; _EL_ } _EL_ ', 'public StatefulRefreshToken(JsonValue token) throws InvalidGrantException { _EL_   super(token); _EL_   if (!OAUTH_REFRESH_TOKEN.equals(getTokenName())) { _EL_     throw new InvalidGrantException("Token is not an refresh token: " + getTokenId()); _EL_   } _EL_ } _EL_ ', 'public void putStyle(String styleId,StyleSelector styleSelector){ _EL_   try { _EL_     int id=Integer.parseInt(styleId); _EL_     mMaxStyleId=Math.max(mMaxStyleId,id); _EL_   } _EL_  catch (  NumberFormatException e) { _EL_   } _EL_   mStyles.put(styleId,styleSelector); _EL_ } _EL_ ', 'private static String extractClientName(String clientId,String host){ _EL_   String hostExcludedId=""; _EL_   if ((isIPv6(host) || isIPv4(host)) && clientId.startsWith(host)) { _EL_     hostExcludedId=clientId.substring(host.length()); _EL_   } _EL_  else { _EL_     int firstDotIndex=host.indexOf("."); _EL_     if (firstDotIndex != -1) { _EL_       String hostShortName=host.substring(0,firstDotIndex); _EL_       hostExcludedId=clientId.substring(hostShortName.length()); _EL_     } _EL_   } _EL_   String vmPIDAndKindRegex="\\\\(\\\\w+:\\\\w+\\\\)"; _EL_   String regex="(\\\\<ec\\\\>)?:[0-9]+(:\\\\w+){2}+"; _EL_   String name=NOT_AVAILABLE; _EL_   String temp=hostExcludedId; _EL_   int openIndex=temp.indexOf("("); _EL_   if (openIndex != -1) { _EL_     regex=vmPIDAndKindRegex + regex; _EL_   } _EL_   if (temp.matches(regex)) { _EL_     String[] splitted=temp.split(":"); _EL_     name=splitted[splitted.length - 1]; _EL_   } _EL_   return name; _EL_ } _EL_ ', 'public static <T>FastFuture<T> fromCompletableFuture(final CompletableFuture<T> cf){ _EL_   final FastFuture<T> f=new FastFuture<>(); _EL_   cf.thenAccept(null); _EL_   cf.exceptionally(null); _EL_   return f; _EL_ } _EL_ ', 'public static boolean isPlaceAction(InventoryAction action){ _EL_ switch (action) { _EL_ case SWAP_WITH_CURSOR: _EL_ case PLACE_ONE: _EL_ case PLACE_ALL: _EL_ case PLACE_SOME: _EL_     return true; _EL_ } _EL_ return false; _EL_ } _EL_ ', 'private void refreshMarkers(){ _EL_   removeAll(); _EL_   Map markerMap=new HashMap(); _EL_   List notices=textArea.getParserNotices(); _EL_   for (Iterator i=notices.iterator(); i.hasNext(); ) { _EL_     ParserNotice notice=(ParserNotice)i.next(); _EL_     if (notice.getLevel() <= levelThreshold || (notice instanceof TaskNotice)) { _EL_       Integer key=new Integer(notice.getLine()); _EL_       Marker m=(Marker)markerMap.get(key); _EL_       if (m == null) { _EL_         m=new Marker(notice); _EL_         m.addMouseListener(listener); _EL_         markerMap.put(key,m); _EL_         add(m); _EL_       } _EL_  else { _EL_         m.addNotice(notice); _EL_       } _EL_     } _EL_   } _EL_   if (getShowMarkedOccurrences() && textArea.getMarkOccurrences()) { _EL_     List occurrences=textArea.getMarkedOccurrences(); _EL_     for (Iterator i=occurrences.iterator(); i.hasNext(); ) { _EL_       DocumentRange range=(DocumentRange)i.next(); _EL_       int line=0; _EL_       try { _EL_         line=textArea.getLineOfOffset(range.getStartOffset()); _EL_       } _EL_  catch (      BadLocationException ble) { _EL_         continue; _EL_       } _EL_       ParserNotice notice=new MarkedOccurrenceNotice(range); _EL_       Integer key=new Integer(line); _EL_       Marker m=(Marker)markerMap.get(key); _EL_       if (m == null) { _EL_         m=new Marker(notice); _EL_         m.addMouseListener(listener); _EL_         markerMap.put(key,m); _EL_         add(m); _EL_       } _EL_  else { _EL_         if (!m.containsMarkedOccurence()) { _EL_           m.addNotice(notice); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   revalidate(); _EL_   repaint(); _EL_ } _EL_ ', 'private List<View> addView(View view,List<View> cache){ _EL_   if (cache == null) { _EL_     cache=new LinkedList<View>(); _EL_   } _EL_   cache.add(view); _EL_   return cache; _EL_ } _EL_ ', 'public static byte[] readInputStream(InputStream i) throws IOException { _EL_   ByteArrayOutputStream b=new ByteArrayOutputStream(); _EL_   copy(i,b); _EL_   return b.toByteArray(); _EL_ } _EL_ ', 'public static String toUTF8String(String s){ _EL_   return new String(s.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET)); _EL_ } _EL_ ', 'public static int encodeCacheFlags(Collection<GridClientCacheFlag> flagSet){ _EL_   int bits=0; _EL_   if (flagSet.contains(GridClientCacheFlag.SKIP_STORE))   bits|=1; _EL_   return bits; _EL_ } _EL_ ', 'public void add(DataSource source,boolean visible){ _EL_   add(data.size(),source,visible); _EL_ } _EL_ ', '@Override public void addValue(double value,double weight){ _EL_   m_WeightedSum+=value * weight; _EL_   m_WeightedSumSquared+=value * value * weight; _EL_   m_SumOfWeights+=weight; _EL_   if (m_TM.get(value) == null) { _EL_     m_TM.put(value,weight); _EL_   } _EL_  else { _EL_     m_TM.put(value,m_TM.get(value) + weight); _EL_   } _EL_ } _EL_ ', 'private JPanel buildRow(final String string,final JCheckBox checkBox){ _EL_   final JPanel panel=new JPanel(new BorderLayout()); _EL_   panel.add(new JLabel(string),BorderLayout.WEST); _EL_   panel.add(checkBox,BorderLayout.EAST); _EL_   checkBox.addItemListener(m_checkBoxListener); _EL_   return panel; _EL_ } _EL_ ', 'public static boolean isChildGroup(String group){ _EL_   return group.indexOf(GROUP_DELIMITER) != -1; _EL_ } _EL_ ', 'private void throwArrayIndexOutOfBoundsException(int itemIndex){ _EL_   throw new ArrayIndexOutOfBoundsException("Your item index can\'t be 0 or greater than space item size," + " your items size is " + spaceItems.size() + ", your current index is :"+ itemIndex); _EL_ } _EL_ ', 'private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeLocus){ _EL_   while (lastReferenceSequence <= stopBeforeLocus.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) { _EL_     if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex() && lastPosition + 1 >= stopBeforeLocus.getPosition()) { _EL_       return null; _EL_     } _EL_     final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition); _EL_     if (nextbit == -1) { _EL_       if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex()) { _EL_         lastPosition=stopBeforeLocus.getPosition(); _EL_         return null; _EL_       } _EL_       lastReferenceSequence++; _EL_       lastPosition=0; _EL_     } _EL_  else     if (lastReferenceSequence < stopBeforeLocus.getSequenceIndex() || nextbit < stopBeforeLocus.getPosition()) { _EL_       lastPosition=nextbit; _EL_       return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition); _EL_     } _EL_  else     if (nextbit >= stopBeforeLocus.getPosition()) { _EL_       return null; _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static void launchEmailIntent(final Activity activity,String addr,String text){ _EL_   Log.i(LOG_TAG,"Launch email intent from " + activity.getLocalClassName()); _EL_   Intent emailIntent=new Intent(Intent.ACTION_SEND); _EL_   emailIntent.putExtra(Intent.EXTRA_EMAIL,new String[]{addr}); _EL_   emailIntent.setType("text/plain"); _EL_   PackageManager emailpackageManager=activity.getPackageManager(); _EL_   List<ResolveInfo> emailresolveInfos=emailpackageManager.queryIntentActivities(emailIntent,0); _EL_   if (emailresolveInfos.size() > 0) { _EL_     activity.startActivity(emailIntent); _EL_   } _EL_ } _EL_ ', 'public int count(){ _EL_   return n; _EL_ } _EL_ ', 'public void add(int position,T item){ _EL_   mData.add(position,item); _EL_   notifyItemInserted(position); _EL_ } _EL_ ', 'public void addTranslator(ClassPool cp,Translator t) throws NotFoundException, CannotCompileException { _EL_   source=cp; _EL_   translator=t; _EL_   t.start(cp); _EL_ } _EL_ ', 'private void onMainContentScrolled(int currentY,int deltaY){ _EL_   if (deltaY > mActionBarAutoHideSensivity) { _EL_     deltaY=mActionBarAutoHideSensivity; _EL_   } _EL_  else   if (deltaY < -mActionBarAutoHideSensivity) { _EL_     deltaY=-mActionBarAutoHideSensivity; _EL_   } _EL_   if (Math.signum(deltaY) * Math.signum(mActionBarAutoHideSignal) < 0) { _EL_     mActionBarAutoHideSignal=deltaY; _EL_   } _EL_  else { _EL_     mActionBarAutoHideSignal+=deltaY; _EL_   } _EL_   boolean shouldShow=currentY < mActionBarAutoHideMinY || (mActionBarAutoHideSignal <= -mActionBarAutoHideSensivity); _EL_   autoShowOrHideActionBar(shouldShow); _EL_ } _EL_ ', 'public void writeLEChars(String s) throws IOException { _EL_   int length=s.length(); _EL_   for (int i=0; i < length; i++) { _EL_     int c=s.charAt(i); _EL_     out.write(c & 0xFF); _EL_     out.write((c >>> 8) & 0xFF); _EL_   } _EL_   written+=length * 2; _EL_ } _EL_ ', 'public static String readLine(){ _EL_   String line; _EL_   try { _EL_     line=scanner.nextLine(); _EL_   } _EL_  catch (  NoSuchElementException e) { _EL_     line=null; _EL_   } _EL_   return line; _EL_ } _EL_ ', 'public void addFooterView(View v,Object data,boolean isSelectable){ _EL_   FixedViewInfo info=new FixedViewInfo(); _EL_   info.view=v; _EL_   info.data=data; _EL_   info.isSelectable=isSelectable; _EL_   mFooterViewInfos.add(info); _EL_   if (mAdapter != null && mDataSetObserver != null) { _EL_     mDataSetObserver.onChanged(); _EL_   } _EL_ } _EL_ ', 'public void addCloseHook(CloseHook hook){ _EL_   if (closeHooks == null) { _EL_     closeHooks=new ArrayList<>(); _EL_   } _EL_   closeHooks.add(hook); _EL_ } _EL_ ', 'private void updateRange(double x,double y){ _EL_   mMinX=Math.min(mMinX,x); _EL_   mMaxX=Math.max(mMaxX,x); _EL_   mMinY=Math.min(mMinY,y); _EL_   mMaxY=Math.max(mMaxY,y); _EL_ } _EL_ ', "static boolean checkStandardUPCEANChecksum(CharSequence s) throws FormatException { _EL_   int length=s.length(); _EL_   if (length == 0) { _EL_     return false; _EL_   } _EL_   int sum=0; _EL_   for (int i=length - 2; i >= 0; i-=2) { _EL_     int digit=(int)s.charAt(i) - (int)'0'; _EL_     if (digit < 0 || digit > 9) { _EL_       throw FormatException.getFormatInstance(); _EL_     } _EL_     sum+=digit; _EL_   } _EL_   sum*=3; _EL_   for (int i=length - 1; i >= 0; i-=2) { _EL_     int digit=(int)s.charAt(i) - (int)'0'; _EL_     if (digit < 0 || digit > 9) { _EL_       throw FormatException.getFormatInstance(); _EL_     } _EL_     sum+=digit; _EL_   } _EL_   return sum % 10 == 0; _EL_ } _EL_ ", 'public void readConfig(String filename) throws FileNotFoundException { _EL_   if (filename == null || filename.equals(""))   return; _EL_   readConfig(new FileReader(filename)); _EL_ } _EL_ ', 'private void applyTradingBonus(Player player){ _EL_   player.incrementTradescore(); _EL_ } _EL_ ', 'public static String slurpURLNoExceptions(URL u){ _EL_   try { _EL_     return slurpURL(u); _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_     return null; _EL_   } _EL_ } _EL_ ', 'private static void createCombinedTrace(final TraceList newTrace,final List<TraceList> traces,final Set<BreakpointAddress> addresses){ _EL_   final Set<BreakpointAddress> visitedAddresses=new LinkedHashSet<BreakpointAddress>(); _EL_   for (  final TraceList trace : traces) { _EL_     for (    final ITraceEvent event : trace) { _EL_       final BreakpointAddress address=event.getOffset(); _EL_       if (!addresses.contains(address)) { _EL_         continue; _EL_       } _EL_       if (visitedAddresses.contains(address)) { _EL_         continue; _EL_       } _EL_       visitedAddresses.add(address); _EL_       newTrace.addEvent(event); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void interruptAll(){ _EL_ synchronized (knownActorTasks) { _EL_     for (    Future<Void> ft : knownActorTasks) { _EL_       ft.cancel(true); _EL_     } _EL_     threadGuard.interruptAll(); _EL_   } _EL_ } _EL_ ', 'private void drawTicks(Canvas canvas,double min,double max,double minAngle,double maxAngle,int centerX,int centerY,double longRadius,double shortRadius,double ticks,Paint paint,boolean labels){ _EL_   for (double i=min; i <= max; i+=ticks) { _EL_     double angle=getAngleForValue(i,minAngle,maxAngle,min,max); _EL_     double sinValue=Math.sin(angle); _EL_     double cosValue=Math.cos(angle); _EL_     int x1=Math.round(centerX + (float)(shortRadius * sinValue)); _EL_     int y1=Math.round(centerY + (float)(shortRadius * cosValue)); _EL_     int x2=Math.round(centerX + (float)(longRadius * sinValue)); _EL_     int y2=Math.round(centerY + (float)(longRadius * cosValue)); _EL_     canvas.drawLine(x1,y1,x2,y2,paint); _EL_     if (labels) { _EL_       paint.setTextAlign(Align.LEFT); _EL_       if (x1 <= x2) { _EL_         paint.setTextAlign(Align.RIGHT); _EL_       } _EL_       String text=i + ""; _EL_       if (Math.round(i) == (long)i) { _EL_         text=(long)i + ""; _EL_       } _EL_       canvas.drawText(text,x1,y1,paint); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void updateBaseMatrix(Drawable d){ _EL_   ImageView imageView=getImageView(); _EL_   if (null == imageView || null == d) { _EL_     return; _EL_   } _EL_   final float viewWidth=imageView.getWidth(); _EL_   final float viewHeight=imageView.getHeight(); _EL_   final int drawableWidth=d.getIntrinsicWidth(); _EL_   final int drawableHeight=d.getIntrinsicHeight(); _EL_   mBaseMatrix.reset(); _EL_   final float widthScale=viewWidth / drawableWidth; _EL_   final float heightScale=viewHeight / drawableHeight; _EL_   if (mScaleType == ScaleType.CENTER) { _EL_     mBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F,(viewHeight - drawableHeight) / 2F); _EL_   } _EL_  else   if (mScaleType == ScaleType.CENTER_CROP) { _EL_     float scale=Math.max(widthScale,heightScale); _EL_     mBaseMatrix.postScale(scale,scale); _EL_     mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F); _EL_   } _EL_  else   if (mScaleType == ScaleType.CENTER_INSIDE) { _EL_     float scale=Math.min(1.0f,Math.min(widthScale,heightScale)); _EL_     mBaseMatrix.postScale(scale,scale); _EL_     mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F); _EL_   } _EL_  else { _EL_     RectF mTempSrc=new RectF(0,0,drawableWidth,drawableHeight); _EL_     RectF mTempDst=new RectF(0,0,viewWidth,viewHeight); _EL_ switch (mScaleType) { _EL_ case FIT_CENTER: _EL_       mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.CENTER); _EL_     break; _EL_ case FIT_START: _EL_   mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.START); _EL_ break; _EL_ case FIT_END: _EL_ mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.END); _EL_ break; _EL_ case FIT_XY: _EL_ mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.FILL); _EL_ break; _EL_ default : _EL_ break; _EL_ } _EL_ } _EL_ resetMatrix(); _EL_ } _EL_ ', 'public static <T,K,L extends List<T>>BiFunction<Partition<T,K,L>,T,Boolean> alwaysInsert(){ _EL_   return null; _EL_ } _EL_ ', 'private static boolean inEncoding(char ch,String encoding){ _EL_   boolean isInEncoding; _EL_   try { _EL_     char cArray[]=new char[1]; _EL_     cArray[0]=ch; _EL_     String s=new String(cArray); _EL_     byte[] bArray=s.getBytes(encoding); _EL_     isInEncoding=inEncoding(ch,bArray); _EL_   } _EL_  catch (  Exception e) { _EL_     isInEncoding=false; _EL_     if (encoding == null)     isInEncoding=true; _EL_   } _EL_   return isInEncoding; _EL_ } _EL_ ', 'private void removeHighlights(){ _EL_   if (textArea != null) { _EL_     RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)textArea.getHighlighter(); _EL_     for (int i=0; i < tags.size(); i++) { _EL_       h.removeMarkOccurrencesHighlight(tags.get(i)); _EL_     } _EL_   } _EL_   tags.clear(); _EL_ } _EL_ ', 'public void addRole(String role){ _EL_   if (role != null) { _EL_     roles.add(role); _EL_   } _EL_ } _EL_ ', 'public CModulesCheckBoxPanel(final CModulesTableModel modulesTableModel){ _EL_   super(new BorderLayout()); _EL_   final JCheckBox checkBox=new JCheckBox("Show full module paths"); _EL_   checkBox.addItemListener(new InternalCheckboxListener()); _EL_   add(checkBox); _EL_   m_modulesTableModel=modulesTableModel; _EL_ } _EL_ ', 'public QDate(){ _EL_   this(_gmtTimeZone); _EL_ } _EL_ ', 'public final void append(FastStringBuffer value){ _EL_   if (value == null)   return; _EL_   int strlen=value.length(); _EL_   if (0 == strlen)   return; _EL_   int copyfrom=0; _EL_   char[] chunk=m_array[m_lastChunk]; _EL_   int available=m_chunkSize - m_firstFree; _EL_   while (strlen > 0) { _EL_     if (available > strlen)     available=strlen; _EL_     int sourcechunk=(copyfrom + value.m_chunkSize - 1) >>> value.m_chunkBits; _EL_     int sourcecolumn=copyfrom & value.m_chunkMask; _EL_     int runlength=value.m_chunkSize - sourcecolumn; _EL_     if (runlength > available)     runlength=available; _EL_     System.arraycopy(value.m_array[sourcechunk],sourcecolumn,m_array[m_lastChunk],m_firstFree,runlength); _EL_     if (runlength != available)     System.arraycopy(value.m_array[sourcechunk + 1],0,m_array[m_lastChunk],m_firstFree + runlength,available - runlength); _EL_     strlen-=available; _EL_     copyfrom+=available; _EL_     if (strlen > 0) { _EL_       int i=m_array.length; _EL_       if (m_lastChunk + 1 == i) { _EL_         char[][] newarray=new char[i + 16][]; _EL_         System.arraycopy(m_array,0,newarray,0,i); _EL_         m_array=newarray; _EL_       } _EL_       chunk=m_array[++m_lastChunk]; _EL_       if (chunk == null) { _EL_         if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) { _EL_           m_innerFSB=new FastStringBuffer(this); _EL_         } _EL_         chunk=m_array[m_lastChunk]=new char[m_chunkSize]; _EL_       } _EL_       available=m_chunkSize; _EL_       m_firstFree=0; _EL_     } _EL_   } _EL_   m_firstFree+=available; _EL_ } _EL_ ', 'protected MapleQuestRequirement(MapleQuest quest,ReadBin data) throws IOException { _EL_   this.quest=quest; _EL_   this.dayByDay=data.readByte() > 0; _EL_   this.normalAutoStart=data.readByte() > 0; _EL_   this.lvmin=data.readShort(); _EL_   this.lvmax=data.readShort(); _EL_   this.mbmin=data.readShort(); _EL_   this.charismaMin=data.readShort(); _EL_   this.charmMin=data.readShort(); _EL_   this.craftMin=data.readShort(); _EL_   this.insightMin=data.readShort(); _EL_   this.senseMin=data.readShort(); _EL_   this.willMin=data.readShort(); _EL_   this.pop=data.readShort(); _EL_   this.pettamenessmin=data.readShort(); _EL_   this.subJobFlag=data.readShort(); _EL_   this.npc=data.readInt(); _EL_   this.interval=data.readInt(); _EL_   this.end=data.readString(); _EL_   this.startscript=data.readString(); _EL_   this.endscript=data.readString(); _EL_   short size=data.readShort(); _EL_   for (int i=0; i < size; i++) { _EL_     int field=data.readInt(); _EL_     fieldEnter.add(field); _EL_   } _EL_   size=data.readShort(); _EL_   for (int i=0; i < size; i++) { _EL_     short job=data.readShort(); _EL_     jobs.add(job); _EL_   } _EL_   size=data.readShort(); _EL_   for (int i=0; i < size; i++) { _EL_     int id=data.readInt(); _EL_     boolean acquire=data.readByte() > 0; _EL_     skills.put(id,acquire); _EL_   } _EL_   size=data.readShort(); _EL_   for (int i=0; i < size; i++) { _EL_     int id=data.readInt(); _EL_     byte state=data.readByte(); _EL_     byte order=data.readByte(); _EL_     quests.put(id,state); _EL_   } _EL_   size=data.readShort(); _EL_   for (int i=0; i < size; i++) { _EL_     int id=data.readInt(); _EL_     int count=data.readInt(); _EL_     byte order=data.readByte(); _EL_     items.put(id,count); _EL_   } _EL_   size=data.readShort(); _EL_   for (int i=0; i < size; i++) { _EL_     int id=data.readInt(); _EL_     int count=data.readInt(); _EL_     mobs.put(id,count); _EL_   } _EL_   size=data.readShort(); _EL_   for (int i=0; i < size; i++) { _EL_     int id=data.readInt(); _EL_     pets.add(id); _EL_   } _EL_ } _EL_ ', 'public boolean isArmed(){ _EL_   return other.isArmed(); _EL_ } _EL_ ', 'public static AttribKey forHtmlAttrib(ElKey el,String localName){ _EL_   return new AttribKey(el,HTML_NS,localName); _EL_ } _EL_ ', 'SparseArray(Class<L> linearArrayType,int[] rowIndices,int[] colIndices,L realValues,L imagValues,int numRows,int numCols){ _EL_   validateUserSuppliedParameters(linearArrayType,rowIndices,colIndices,realValues,imagValues); _EL_   _baseComponentType=linearArrayType.getComponentType(); _EL_   _outputArrayType=(Class<L[]>)ArrayUtils.getArrayClass(_baseComponentType,2); _EL_   Map<SparseKey,SparseValue> sparseMap=createSparseMap(linearArrayType,rowIndices,colIndices,realValues,imagValues,numRows,numCols); _EL_   _numRows=numRows; _EL_   _numCols=numCols; _EL_   ArrayList<SparseKey> keys=new ArrayList<SparseKey>(sparseMap.keySet()); _EL_   Collections.sort(keys); _EL_   _rowIndices=new int[keys.size()]; _EL_   _colIndices=new int[keys.size()]; _EL_   _linearIndices=new int[keys.size()]; _EL_   _realValues=linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size())); _EL_   _imagValues=imagValues == null ? null : linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size())); _EL_   for (int i=0; i < keys.size(); i++) { _EL_     SparseKey key=keys.get(i); _EL_     _rowIndices[i]=key.row; _EL_     _colIndices[i]=key.col; _EL_     _linearIndices[i]=key.linearIndex; _EL_     SparseValue value=sparseMap.get(key); _EL_     setSparseValue(value,_realValues,_imagValues,i); _EL_   } _EL_ } _EL_ ', 'public static Tuple max(TupleSet tuples,String field,Comparator cmp){ _EL_   if (tuples instanceof Table) { _EL_     Table table=(Table)tuples; _EL_     ColumnMetadata md=table.getMetadata(field); _EL_     return table.getTuple(md.getMaximumRow()); _EL_   } _EL_  else { _EL_     return max(tuples.tuples(),field,cmp); _EL_   } _EL_ } _EL_ ', 'protected void updateRadioLinks(){ _EL_   m_CVBut.setEnabled(true); _EL_   m_CVText.setEnabled(m_CVBut.isSelected()); _EL_   m_CVLab.setEnabled(m_CVBut.isSelected()); _EL_   m_SeedText.setEnabled(m_CVBut.isSelected()); _EL_   m_SeedLab.setEnabled(m_CVBut.isSelected()); _EL_   if (m_AttributeEvaluatorEditor.getValue() instanceof AttributeTransformer) { _EL_     m_CVBut.setSelected(false); _EL_     m_CVBut.setEnabled(false); _EL_     m_CVText.setEnabled(false); _EL_     m_CVLab.setEnabled(false); _EL_     m_SeedText.setEnabled(false); _EL_     m_SeedLab.setEnabled(false); _EL_     m_TrainBut.setSelected(true); _EL_   } _EL_ } _EL_ ', 'private String idString(int id1,int id2){ _EL_   return "0x" + Integer.toHexString(id2 & 0x7F) + " 0x"+ Integer.toHexString(id1 & 0x7F)+ " ("+ ((id2 & 0x7F) * 128 + (id1 & 0x7F))+ ")"; _EL_ } _EL_ ', 'public EtagCache resetStats(){ _EL_   hits.set(0); _EL_   misses.set(0); _EL_   return this; _EL_ } _EL_ ', 'private void removeItemAtInt(int index,boolean updateChildrenOnMenuViews){ _EL_   if ((index < 0) || (index >= mItems.size()))   return; _EL_   mItems.remove(index); _EL_   if (updateChildrenOnMenuViews)   onItemsChanged(true); _EL_ } _EL_ ', 'private void showFilterDialog(Filter filter){ _EL_   int sortOrder=mAdapter.getCount() - 1; _EL_   if (filter == null) { _EL_     EditFilterActivity.createNewFilter(getActivity(),sortOrder); _EL_   } _EL_  else { _EL_     EditFilterActivity.editFilter(getActivity(),filter,sortOrder); _EL_   } _EL_ } _EL_ ', 'public static int numPixelsBetween(int x1,int y1,int x2,int y2){ _EL_   return (int)Math.sqrt(Math.pow((double)(x1 - x2),2.0) + Math.pow((double)(y1 - y2),2.0)); _EL_ } _EL_ ', 'private KeyStore createKeys(KeyStore keyStore,String keyAlgorithm,String publicAlias,String privateAlias,PrivateKeyEntry signer) throws Exception { _EL_   PrivateKey caKey; _EL_   X509Certificate caCert; _EL_   X509Certificate[] caCertChain; _EL_   if (signer == null) { _EL_     caKey=null; _EL_     caCert=null; _EL_     caCertChain=null; _EL_   } _EL_  else { _EL_     caKey=signer.getPrivateKey(); _EL_     caCert=(X509Certificate)signer.getCertificate(); _EL_     caCertChain=(X509Certificate[])signer.getCertificateChain(); _EL_   } _EL_   PrivateKey privateKey; _EL_   X509Certificate x509c; _EL_   if (publicAlias == null && privateAlias == null) { _EL_     privateKey=null; _EL_     x509c=null; _EL_   } _EL_  else { _EL_     int keySize; _EL_     if (keyAlgorithm.equals("RSA")) { _EL_       keySize=1024; _EL_     } _EL_  else     if (keyAlgorithm.equals("DSA")) { _EL_       keySize=512; _EL_     } _EL_  else     if (keyAlgorithm.equals("EC")) { _EL_       keySize=256; _EL_     } _EL_  else     if (keyAlgorithm.equals("EC_RSA")) { _EL_       keySize=256; _EL_       keyAlgorithm="EC"; _EL_     } _EL_  else { _EL_       throw new IllegalArgumentException("Unknown key algorithm " + keyAlgorithm); _EL_     } _EL_     KeyPairGenerator kpg=KeyPairGenerator.getInstance(keyAlgorithm); _EL_     kpg.initialize(keySize,new SecureRandom()); _EL_     KeyPair kp=kpg.generateKeyPair(); _EL_     privateKey=kp.getPrivate(); _EL_     PublicKey publicKey=kp.getPublic(); _EL_     X500Principal issuer=((caCert != null) ? caCert.getSubjectX500Principal() : subject); _EL_     PrivateKey signingKey=(caKey == null) ? privateKey : caKey; _EL_     x509c=createCertificate(publicKey,signingKey,subject,issuer,keyUsage,ca,extendedKeyUsages,criticalExtendedKeyUsages,subjectAltNames,permittedNameConstraints,excludedNameConstraints); _EL_   } _EL_   X509Certificate[] x509cc; _EL_   if (privateAlias == null) { _EL_     x509cc=null; _EL_   } _EL_  else   if (caCertChain == null) { _EL_     x509cc=new X509Certificate[]{x509c}; _EL_   } _EL_  else { _EL_     x509cc=new X509Certificate[caCertChain.length + 1]; _EL_     x509cc[0]=x509c; _EL_     System.arraycopy(caCertChain,0,x509cc,1,caCertChain.length); _EL_   } _EL_   if (privateAlias != null) { _EL_     keyStore.setKeyEntry(privateAlias,privateKey,keyPassword,x509cc); _EL_   } _EL_   if (publicAlias != null) { _EL_     keyStore.setCertificateEntry(publicAlias,x509c); _EL_   } _EL_   return keyStore; _EL_ } _EL_ ', 'static boolean allowsPopup(FormObject formObject){ _EL_ switch (formObject.getParameterConstant(PdfDictionary.Subtype)) { _EL_ case PdfDictionary.Text: _EL_ case PdfDictionary.Square: _EL_ case PdfDictionary.Highlight: _EL_ case PdfDictionary.Underline: _EL_ case PdfDictionary.StrickOut: _EL_ case PdfDictionary.Stamp: _EL_     return true; _EL_ default : _EL_   return false; _EL_ } _EL_ } _EL_ ', 'public static LocalGitRepo fromCurrentDir(String remoteUrl) throws ValidationException { _EL_   Git git; _EL_   File gitDir=new File("."); _EL_   try { _EL_     git=Git.open(gitDir); _EL_   } _EL_  catch (  RepositoryNotFoundException rnfe) { _EL_     String fullPathOfCurrentDir=pathOf(gitDir); _EL_     File gitRoot=getGitRootIfItExistsInOneOfTheParentDirectories(new File(fullPathOfCurrentDir)); _EL_     String summary; _EL_     List<String> messages=new ArrayList<String>(); _EL_     if (gitRoot == null) { _EL_       summary="Releases can only be performed from Git repositories."; _EL_       messages.add(summary); _EL_       messages.add(fullPathOfCurrentDir + " is not a Git repository."); _EL_     } _EL_  else { _EL_       summary="The release plugin can only be run from the root folder of your Git repository"; _EL_       messages.add(summary); _EL_       messages.add(fullPathOfCurrentDir + " is not the root of a Gir repository"); _EL_       messages.add("Try running the release plugin from " + pathOf(gitRoot)); _EL_     } _EL_     throw new ValidationException(summary,messages); _EL_   } _EL_ catch (  Exception e) { _EL_     throw new ValidationException("Could not open git repository. Is " + pathOf(gitDir) + " a git repository?",Arrays.asList("Exception returned when accessing the git repo:",e.toString())); _EL_   } _EL_   return new LocalGitRepo(git,remoteUrl); _EL_ } _EL_ ', 'public static Vector2 min(Vector2 o1,Vector2 o2){ _EL_   return new Vector2(Math.min(o1.x,o2.x),Math.min(o1.z,o2.z)); _EL_ } _EL_ ', 'public void serialize(KXmlSerializer serializer) throws IOException { _EL_   mDeviceInfo.serialize(serializer); _EL_   serializeHostInfo(serializer); _EL_   serializeTestSummary(serializer); _EL_   monkeyTag.serialize(serializer); _EL_   List<TestPackageResult> pkgs=new ArrayList<TestPackageResult>(mPackageMap.values()); _EL_   Collections.sort(pkgs,new PkgComparator()); _EL_   for (  TestPackageResult r : pkgs) { _EL_     r.serialize(serializer); _EL_   } _EL_ } _EL_ ', 'private void verifyBlockMirrorMigration() throws Exception { _EL_   log.info("Verifying BlockMirror migration."); _EL_   Iterator<BlockMirror> blockMirrorItr=_dbClient.queryIterativeObjects(BlockMirror.class,blockMirrorURIs); _EL_   List<BlockObject> blockObjects=new ArrayList<BlockObject>(); _EL_   while (blockMirrorItr.hasNext()) { _EL_     blockObjects.add(blockMirrorItr.next()); _EL_   } _EL_   verifyBlockObjects(blockObjects); _EL_ } _EL_ ', 'public LogFormatter(Logger log){ _EL_   if (log == null)   log=Logger.getLogger(Logger.GLOBAL_LOGGER_NAME); _EL_   Level lvl=null; _EL_   while (log != null) { _EL_     lvl=log.getLevel(); _EL_     if (lvl != null)     break; _EL_     log=log.getParent(); _EL_   } _EL_   ; _EL_   if (lvl == null)   lvl=Level.WARNING; _EL_   this.level=lvl; _EL_ } _EL_ ', 'private Element createIDPEntityDescriptor(boolean exportPrivateData) throws Exception { _EL_   Element entEle=doc.createElementNS(null,SAMLNames.ENTDESCRIPTOR); _EL_   String id=idmClient.getEntityID(tenantName); _EL_   String alias=idmClient.getLocalIDPAlias(tenantName); _EL_   if (id == null) { _EL_     id=tenantName; _EL_   } _EL_   entEle.setAttribute(SAMLNames.ENTID,id); _EL_   Element idpSSO=createIDPSSODescriptor(exportPrivateData); _EL_   entEle.appendChild(idpSSO); _EL_   if (exportPrivateData) { _EL_     if (alias == null || alias.isEmpty()) { _EL_       alias=id; _EL_     } _EL_     Element orgEle=createOrganization(tenantName,tenantName,alias,SAMLNames.ENGLISH); _EL_     entEle.appendChild(orgEle); _EL_   } _EL_   return entEle; _EL_ } _EL_ ', 'public void clear(){ _EL_   infoQueue.clear(); _EL_   while (!dataQueue.isEmpty()) { _EL_     allocator.release(dataQueue.remove()); _EL_   } _EL_   totalBytesDropped=0; _EL_   totalBytesWritten=0; _EL_   lastAllocation=null; _EL_   lastAllocationOffset=allocationLength; _EL_ } _EL_ ', 'public static ResultSet pointTable(double x,double y){ _EL_   GeometryFactory factory=new GeometryFactory(); _EL_   SimpleResultSet rs=new SimpleResultSet(); _EL_   rs.addColumn("THE_GEOM",Types.JAVA_OBJECT,"GEOMETRY",0,0); _EL_   rs.addRow(factory.createPoint(new Coordinate(x,y))); _EL_   return rs; _EL_ } _EL_ ', 'static Map<TargetType,List<TypeCompound>> partitionByTargetType(Collection<TypeCompound> annos,List<TypeCompound> unmatched,TargetType... targetTypes){ _EL_   final Map<TargetType,List<TypeCompound>> targetTypeToAnnos=new HashMap<>(); _EL_   for (  TargetType targetType : targetTypes) { _EL_     targetTypeToAnnos.put(targetType,new ArrayList<TypeCompound>(10)); _EL_   } _EL_   for (  final TypeCompound anno : annos) { _EL_     final List<TypeCompound> annoSet=targetTypeToAnnos.get(anno.getPosition().type); _EL_     if (annoSet != null) { _EL_       annoSet.add(anno); _EL_     } _EL_  else     if (unmatched != null) { _EL_       unmatched.add(anno); _EL_     } _EL_   } _EL_   return targetTypeToAnnos; _EL_ } _EL_ ', '@NotNull private File resolveName(@NotNull String name) throws IOException { _EL_   File file; _EL_   if (name.startsWith(ROOT)) { _EL_     file=new File(myTemplateRootFolder,name.substring(ROOT.length())); _EL_   } _EL_  else   if (myLastTemplateFolders != null) { _EL_     file=new File(myLastTemplateFolders.peek(),name); _EL_   } _EL_  else { _EL_     file=new File(myTemplateRootFolder,name); _EL_   } _EL_   return file.getCanonicalFile(); _EL_ } _EL_ ', 'public static String[] decodeArray(String encodedArray){ _EL_   String[] items=encodedArray.split("_\\\\."); _EL_   ArrayList<String> list=new ArrayList<String>(); _EL_   for (int i=0; i < items.length; i++) { _EL_     String item=items[i]; _EL_     item=gsub("__","_",item); _EL_     if (!item.equals("")) { _EL_       list.add(item); _EL_     } _EL_   } _EL_   return list.toArray(new String[list.size()]); _EL_ } _EL_ ', 'public boolean computeAngleOffset(){ _EL_   if (mFinished) { _EL_     return false; _EL_   } _EL_   long systemClock=AnimationUtils.currentAnimationTimeMillis(); _EL_   long timePassed=systemClock - mStartTime; _EL_   if (timePassed < mDuration) { _EL_ switch (mMode) { _EL_ case SCROLL_MODE: _EL_       float sc=(float)timePassed / mDuration; _EL_     mCurrAngle=mStartAngle + Math.round(mDeltaAngle * sc); _EL_   break; _EL_ case FLING_MODE: _EL_ float timePassedSeconds=timePassed / 1000.0f; _EL_ float distance; _EL_ if (mVelocity < 0) { _EL_ distance=mCoeffVelocity * mVelocity * timePassedSeconds - (mDeceleration * timePassedSeconds * timePassedSeconds / 2.0f); _EL_ } _EL_  else { _EL_ distance=-mCoeffVelocity * mVelocity * timePassedSeconds - (mDeceleration * timePassedSeconds * timePassedSeconds / 2.0f); _EL_ } _EL_ mCurrAngle=mStartAngle - Math.signum(mVelocity) * Math.round(distance); _EL_ break; _EL_ } _EL_ return true; _EL_ } _EL_  else { _EL_ mFinished=true; _EL_ return false; _EL_ } _EL_ } _EL_ ', 'private void sendResource(final UUID uuid,final Object resource,final long length,final InputStream is) throws IOException { _EL_   assert uuid != null; _EL_   assert resource != null; _EL_   assert length >= 0; _EL_   assert is != null; _EL_   assert !sentStatus; _EL_   long bytesWritten=0L; _EL_   final long begin=System.nanoTime(); _EL_   final OutputStream os=s.getOutputStream(); _EL_   try { _EL_ { _EL_       final DataOutputStream dos=new DataOutputStream(os); _EL_       dos.write(new byte[]{StatusEnum.OK.get()}); _EL_       dos.writeLong(length); _EL_       dos.flush(); _EL_       bytesWritten+=1 + Bytes.SIZEOF_LONG; _EL_       sentStatus=true; _EL_     } _EL_     final long checksum; _EL_ { _EL_       final int BUFSIZE=Bytes.kilobyte32 * 2; _EL_       final CheckedInputStream cis=new CheckedInputStream(new BufferedInputStream(is),new Adler32()); _EL_       final byte[] buff=new byte[BUFSIZE]; _EL_       while (true) { _EL_         final int read=cis.read(buff,0,BUFSIZE); _EL_         if (read <= 0)         break; _EL_         os.write(buff,0,read); _EL_         bytesWritten+=read; _EL_       } _EL_       checksum=cis.getChecksum().getValue(); _EL_     } _EL_ { _EL_       final DataOutputStream dos=new DataOutputStream(os); _EL_       dos.writeLong(checksum); _EL_       bytesWritten+=Bytes.SIZEOF_LONG; _EL_       dos.flush(); _EL_     } _EL_     os.flush(); _EL_     if (log.isInfoEnabled())     log.info("Sent: uuid=" + uuid + ", resource="+ resource+ ", length="+ length+ ", checksum="+ checksum+ ", elapsed="+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin)+ "ms"); _EL_   } _EL_   finally { _EL_     try { _EL_       os.close(); _EL_     } _EL_  catch (    Throwable t) { _EL_     } _EL_     counters.bytesWritten.add(bytesWritten); _EL_     counters.elapsedWriteNanos.add(System.nanoTime() - begin); _EL_ synchronized (counters.maxWriteSizeLock) { _EL_       counters.maxWriteSize=Math.max(counters.maxWriteSize,bytesWritten); _EL_     } _EL_   } _EL_ } _EL_ ', 'public long sigignore(){ _EL_   return Long.parseLong(fields[32]); _EL_ } _EL_ ', 'public String render(ValueExpr theExpr) throws Exception { _EL_   theExpr.visit(this); _EL_   return mBuffer.toString(); _EL_ } _EL_ ', 'public DSignCsr(JFrame parent,PKCS10CertificationRequest pkcs10Csr,File csrFile,PrivateKey signPrivateKey,KeyPairType signKeyPairType,X509Certificate verificationCertificate,Provider provider) throws CryptoException { _EL_   super(parent,Dialog.ModalityType.DOCUMENT_MODAL); _EL_   this.pkcs10Csr=pkcs10Csr; _EL_   this.csrFile=csrFile; _EL_   this.signPrivateKey=signPrivateKey; _EL_   this.signKeyPairType=signKeyPairType; _EL_   this.verificationCertificate=verificationCertificate; _EL_   this.provider=provider; _EL_   setTitle(res.getString("DSignCsr.Title")); _EL_   initComponents(); _EL_ } _EL_ ', 'protected static void init(){ _EL_   String notificationfactoryClassName=null; _EL_   try { _EL_     notificationfactoryClassName=System.getProperty(NOTIFICATION_FACTORY_NAME); _EL_   } _EL_  catch (  SecurityException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_   if (notificationfactoryClassName != null) { _EL_     Class<?> nfc; _EL_     try { _EL_       nfc=Class.forName(notificationfactoryClassName); _EL_       factory=(INotificationManagerFactory)nfc.newInstance(); _EL_     } _EL_  catch (    ClassNotFoundException|InstantiationException|IllegalAccessException e) { _EL_       throw new RuntimeException(e); _EL_     } _EL_   } _EL_  else { _EL_     factory=new SyslogNotificationFactory(); _EL_   } _EL_ } _EL_ ', 'private int awaitDone(boolean timed,long nanos) throws InterruptedException { _EL_   final long deadline=timed ? System.nanoTime() + nanos : 0L; _EL_   WaitNode q=null; _EL_   boolean queued=false; _EL_   for (; ; ) { _EL_     if (Thread.interrupted()) { _EL_       removeWaiter(q); _EL_       throw new InterruptedException(); _EL_     } _EL_     int s=state; _EL_     if (s > COMPLETING) { _EL_       if (q != null)       q.thread=null; _EL_       return s; _EL_     } _EL_  else     if (s == COMPLETING)     Thread.yield(); _EL_  else     if (q == null)     q=new WaitNode(); _EL_  else     if (!queued)     queued=UNSAFE.compareAndSwapObject(this,waitersOffset,q.next=waiters,q); _EL_  else     if (timed) { _EL_       nanos=deadline - System.nanoTime(); _EL_       if (nanos <= 0L) { _EL_         removeWaiter(q); _EL_         return state; _EL_       } _EL_       LockSupport.parkNanos(this,nanos); _EL_     } _EL_  else     LockSupport.park(this); _EL_   } _EL_ } _EL_ ', 'public static double clamp(double value,double low,double high){ _EL_   return Math.min(Math.max(value,low),high); _EL_ } _EL_ ', 'public static String parseVolumeHostDirectory(String volume){ _EL_   if (StringUtils.isEmpty(volume)) { _EL_     return volume; _EL_   } _EL_   if (!volume.contains(HOST_CONTAINER_DIR_DELIMITER)) { _EL_     return volume; _EL_   } _EL_   String[] hostContainerDir=volume.split(HOST_CONTAINER_DIR_DELIMITER); _EL_   if (hostContainerDir.length != 2) { _EL_     throw new IllegalArgumentException("Invalid volume directory."); _EL_   } _EL_   String hostDir=hostContainerDir[0]; _EL_   return hostDir; _EL_ } _EL_ ', 'private String fmtTime(double time){ _EL_   return Utilities.pad(timeFormatter.format(time) + "s",10); _EL_ } _EL_ ', 'public synchronized boolean addAll(Collection<? extends E> c){ _EL_   modCount++; _EL_   Object[] a=c.toArray(); _EL_   int numNew=a.length; _EL_   ensureCapacityHelper(elementCount + numNew); _EL_   System.arraycopy(a,0,elementData,elementCount,numNew); _EL_   elementCount+=numNew; _EL_   return numNew != 0; _EL_ } _EL_ ', '@Override public void update(DefaultApplicationState transState){ _EL_   newCheckpoint(transState.getState(),transState.getStateHash(),transState.getLastCheckpointCID()); _EL_   setLastCheckpointCID(transState.getLastCheckpointCID()); _EL_ } _EL_ ', 'public static byte[] stringToUtf8Bytes(String string){ _EL_   int len=string.length(); _EL_   byte[] bytes=new byte[len * 3]; _EL_   int outAt=0; _EL_   for (int i=0; i < len; i++) { _EL_     char c=string.charAt(i); _EL_     if ((c != 0) && (c < 0x80)) { _EL_       bytes[outAt]=(byte)c; _EL_       outAt++; _EL_     } _EL_  else     if (c < 0x800) { _EL_       bytes[outAt]=(byte)(((c >> 6) & 0x1f) | 0xc0); _EL_       bytes[outAt + 1]=(byte)((c & 0x3f) | 0x80); _EL_       outAt+=2; _EL_     } _EL_  else { _EL_       bytes[outAt]=(byte)(((c >> 12) & 0x0f) | 0xe0); _EL_       bytes[outAt + 1]=(byte)(((c >> 6) & 0x3f) | 0x80); _EL_       bytes[outAt + 2]=(byte)((c & 0x3f) | 0x80); _EL_       outAt+=3; _EL_     } _EL_   } _EL_   byte[] result=new byte[outAt]; _EL_   System.arraycopy(bytes,0,result,0,outAt); _EL_   return result; _EL_ } _EL_ ', 'private List<Pair<String,Object>> toPairList(final Map<String,Object> bindings){ _EL_   final List<Pair<String,Object>> blist=new ArrayList<Pair<String,Object>>(); _EL_   for (  final Map.Entry<String,Object> pair : bindings.entrySet()) { _EL_     blist.add(new Pair<String,Object>(pair.getKey(),pair.getValue())); _EL_   } _EL_   return blist; _EL_ } _EL_ ', '@Override public boolean validateLabel(String label){ _EL_   Objects.requireNonNull(label,"label cannot be null"); _EL_   return !labels.contains(label); _EL_ } _EL_ ', 'public void addMessageObserver(final MessageObserver observer){ _EL_   if (observer == null) { _EL_     throw new NullPointerException(); _EL_   } _EL_  else   if (messageObservers == null) { _EL_     initMessageObserverList(); _EL_   } _EL_   messageObservers.add(observer); _EL_ } _EL_ ', 'public void show(char initialChar){ _EL_   initialString=initialString.append(initialChar); _EL_   show(); _EL_   if (SWT.getPlatform() != "carbon") { _EL_     setEditText(initialString.toString()); _EL_   } _EL_ } _EL_ ', 'public E remove(int index){ _EL_   hashCodeUpToDate=false; _EL_   modCount++; _EL_   E oldValue=elementData(index); _EL_   int numMoved=size - index - 1; _EL_   if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved); _EL_   elementData[--size]=null; _EL_   return oldValue; _EL_ } _EL_ ', 'public static DoubleVector rnorm(int n,double mean,double sd,Random random){ _EL_   if (sd < 0.0)   throw new IllegalArgumentException("standard deviation < 0.0"); _EL_   if (sd == 0.0)   return new DoubleVector(n,mean); _EL_   DoubleVector v=new DoubleVector(n); _EL_   for (int i=0; i < n; i++)   v.set(i,(random.nextGaussian() + mean) / sd); _EL_   return v; _EL_ } _EL_ ', "private PdfObject readCompressedStream(PdfObject rootObj,int pointer,final PdfFileReader currentPdfFile,final ObjectReader objectReader,final PdfObject linearObj) throws PdfException { _EL_   while (pointer != -1) { _EL_     movePointer(pointer); _EL_     final byte[] raw=objectReader.readObjectData(-1,null); _EL_     final StringBuilder objectName=new StringBuilder(); _EL_     char current1, last=' '; _EL_     int matched=0, i1=0; _EL_     while (i1 < raw.length) { _EL_       current1=(char)raw[i1]; _EL_       if (current1 == 10 || current1 == 13) { _EL_         current1=' '; _EL_       } _EL_       if (current1 == ' ' && last == ' ') { _EL_         matched=0; _EL_       } _EL_  else       if (current1 == pattern.charAt(matched)) { _EL_         matched++; _EL_       } _EL_  else { _EL_         matched=0; _EL_         objectName.append(current1); _EL_       } _EL_       if (matched == 3) { _EL_         break; _EL_       } _EL_       last=current1; _EL_       i1++; _EL_     } _EL_     objectName.append('R'); _EL_     final PdfObject pdfObject=new CompressedObject(objectName.toString()); _EL_     pdfObject.setCompressedStream(true); _EL_     final ObjectDecoder objectDecoder=new ObjectDecoder(currentPdfFile); _EL_     objectDecoder.readDictionaryAsObject(pdfObject,0,raw); _EL_     final int[] fieldSizes=pdfObject.getIntArray(PdfDictionary.W); _EL_     byte[] xrefs=pdfObject.getDecodedStream(); _EL_     if (xrefs == null) { _EL_       xrefs=currentPdfFile.readStream(pdfObject,true,true,false,false,true,null); _EL_     } _EL_     final int[] Index=pdfObject.getIntArray(PdfDictionary.Index); _EL_     if (Index == null) { _EL_       CompressedObjects.readCompressedOffsets(0,0,pdfObject.getInt(PdfDictionary.Size),fieldSizes,xrefs,offset,pdf_datafile); _EL_     } _EL_  else { _EL_       final int count=Index.length; _EL_       int pntr=0; _EL_       for (int aa=0; aa < count; aa+=2) { _EL_         pntr=CompressedObjects.readCompressedOffsets(pntr,Index[aa],Index[aa + 1],fieldSizes,xrefs,offset,pdf_datafile); _EL_       } _EL_     } _EL_     if (rootObj == null) { _EL_       rootObj=pdfObject.getDictionary(PdfDictionary.Root); _EL_       encryptObj=pdfObject.getDictionary(PdfDictionary.Encrypt); _EL_       if (encryptObj != null) { _EL_         final byte[][] IDs=pdfObject.getStringArray(PdfDictionary.ID); _EL_         if (IDs != null && this.ID == null) { _EL_           this.ID=IDs[0]; _EL_         } _EL_       } _EL_       infoObject=pdfObject.getDictionary(PdfDictionary.Info); _EL_     } _EL_     if (linearObj != null) { _EL_       pointer=-1; _EL_     } _EL_  else { _EL_       pointer=pdfObject.getInt(PdfDictionary.Prev); _EL_       if (pointer != -1 && !isCompressedStream(pointer,(int)eof)) { _EL_         return readLegacyReferenceTable(rootObj,pointer,(int)eof,currentPdfFile); _EL_       } _EL_     } _EL_   } _EL_   return rootObj; _EL_ } _EL_ ", 'public boolean isKnownSub(String subName){ _EL_   return KNOWN_SUBS.contains(subName); _EL_ } _EL_ ', 'public String diff_text1(LinkedList<Diff> diffs){ _EL_   StringBuilder text=new StringBuilder(); _EL_   for (  Diff aDiff : diffs) { _EL_     if (aDiff.operation != Operation.INSERT) { _EL_       text.append(aDiff.text); _EL_     } _EL_   } _EL_   return text.toString(); _EL_ } _EL_ ', 'public boolean isStored(){ _EL_   return Integer.signum(id) != -1; _EL_ } _EL_ ', 'public static BigInteger sizeOfDirectoryAsBigInteger(File directory){ _EL_   checkDirectory(directory); _EL_   final File[] files=directory.listFiles(); _EL_   if (files == null) { _EL_     return BigInteger.ZERO; _EL_   } _EL_   BigInteger size=BigInteger.ZERO; _EL_   for (  final File file : files) { _EL_     try { _EL_       if (!isSymlink(file)) { _EL_         size=size.add(BigInteger.valueOf(sizeOf(file))); _EL_       } _EL_     } _EL_  catch (    IOException ioe) { _EL_     } _EL_   } _EL_   return size; _EL_ } _EL_ ', 'public boolean isSearchLightBit(int bit){ _EL_   if (nodeType != SMINI) { _EL_     log.error("Invalid query of Searchlights bits - not SMINI node"); _EL_     return (false); _EL_   } _EL_   if ((bit < 0) || (bit > 47)) { _EL_     log.error("Invalid bit number in query of SMINI Searchlights bits: " + Integer.toString(bit)); _EL_     return (false); _EL_   } _EL_   if (locSearchLightBits[bit] == 1) { _EL_     return (true); _EL_   } _EL_   return (false); _EL_ } _EL_ ', 'public AgeFileFilter(Date cutoffDate,boolean acceptOlder){ _EL_   this(cutoffDate.getTime(),acceptOlder); _EL_ } _EL_ ', 'public void calcMajorTick(){ _EL_   majorTick=10; _EL_   majorTickCount=(int)Math.round(log10(maxTick / minTick)) + 1; _EL_ } _EL_ ', 'public void put(String sample,HiddenAttribute attribute,Object value){ _EL_   put(sample,attribute.toString(),value); _EL_ } _EL_ ', 'public boolean unsetOrdering(Object first,Object second){ _EL_   DigraphNode firstPONode=(DigraphNode)poNodes.get(first); _EL_   DigraphNode secondPONode=(DigraphNode)poNodes.get(second); _EL_   return firstPONode.removeEdge(secondPONode) || secondPONode.removeEdge(firstPONode); _EL_ } _EL_ ', 'public void write(ClassFile classFile,File f) throws IOException { _EL_   FileOutputStream f_out=new FileOutputStream(f); _EL_   try { _EL_     write(classFile,f_out); _EL_   } _EL_   finally { _EL_     f_out.close(); _EL_   } _EL_ } _EL_ ', 'public Shape greatCircleLineShape(){ _EL_   GeneralPath path=null; _EL_   if (llpts != null && llpts.length >= 4 && llpts.length % 2 == 0) { _EL_     double y1=llpts[0]; _EL_     double x1=llpts[1]; _EL_     path=new GeneralPath(GeneralPath.WIND_EVEN_ODD,llpts.length / 2); _EL_     boolean firstCoords=true; _EL_     for (int i=2; i < llpts.length; i+=2) { _EL_       double y2=llpts[i]; _EL_       double x2=llpts[i + 1]; _EL_       double radDist=GreatCircle.sphericalDistance(y1,x1,y2,x2); _EL_       int nsegs=(int)(ProjMath.radToDeg(radDist) * segsPerDeg); _EL_       if (nsegs == 0) { _EL_         nsegs=1; _EL_       } _EL_       double[] coords=GreatCircle.greatCircle(y1,x1,y2,x2,nsegs,false); _EL_       if (returnDegrees) { _EL_         ProjMath.arrayRadToDeg(coords); _EL_       } _EL_       for (int j=0; j <= coords.length - 1; j+=2) { _EL_         if (firstCoords) { _EL_           path.moveTo(coords[j + 1],coords[j]); _EL_           firstCoords=false; _EL_         } _EL_  else { _EL_           path.lineTo(coords[j + 1],coords[j]); _EL_         } _EL_       } _EL_       x1=x2; _EL_       y1=y2; _EL_     } _EL_     if (returnDegrees) { _EL_       path.lineTo(ProjMath.radToDeg(x1),ProjMath.radToDeg(y1)); _EL_     } _EL_  else { _EL_       path.lineTo(x1,y1); _EL_     } _EL_   } _EL_   return path; _EL_ } _EL_ ', 'public Connection(final InetSocketAddress peerAddress){ _EL_   this(peerAddress,(Handshaker)null); _EL_ } _EL_ ', 'protected void acceptDrop(int dropOperation){ _EL_   DropTargetContextPeer peer=getDropTargetContextPeer(); _EL_   if (peer != null) { _EL_     peer.acceptDrop(dropOperation); _EL_   } _EL_ } _EL_ ', 'public Date modifiedDate(String path) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException { _EL_ synchronized (lock) { _EL_     if (!connected) { _EL_       throw new IllegalStateException("Client not connected"); _EL_     } _EL_     if (!authenticated) { _EL_       throw new IllegalStateException("Client not authenticated"); _EL_     } _EL_     communication.sendFTPCommand("MDTM " + path); _EL_     FTPReply r=communication.readFTPReply(); _EL_     touchAutoNoopTimer(); _EL_     if (!r.isSuccessCode()) { _EL_       throw new FTPException(r); _EL_     } _EL_     String[] messages=r.getMessages(); _EL_     if (messages.length != 1) { _EL_       throw new FTPIllegalReplyException(); _EL_     } _EL_  else { _EL_       try { _EL_         return MDTM_DATE_FORMAT.parse(messages[0]); _EL_       } _EL_  catch (      ParseException e) { _EL_         throw new FTPIllegalReplyException(); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public ControlFlowGraph run(CompilationUnitTree root,ProcessingEnvironment env,MethodTree tree,ClassTree classTree){ _EL_   UnderlyingAST underlyingAST=new CFGMethod(tree,classTree); _EL_   return run(root,env,underlyingAST); _EL_ } _EL_ ', 'private boolean isValidEngine(){ _EL_   if (hasFlag(~(CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE| SUPERHEAVY_ENGINE| SUPPORT_VEE_ENGINE))) { _EL_     problem.append("Flags:" + engineFlags); _EL_     return false; _EL_   } _EL_   if (hasFlag(SUPPORT_VEE_ENGINE) && (engineType != STEAM) && (engineType != COMBUSTION_ENGINE)&& (engineType != BATTERY)&& (engineType != FUEL_CELL)&& (engineType != SOLAR)&& (engineType != FISSION)&& (engineType != NORMAL_ENGINE)&& (engineType != NONE)) { _EL_     problem.append("Invalid Engine type for support vehicle engines!"); _EL_     return false; _EL_   } _EL_   if ((((int)Math.ceil(engineRating / 5) > ENGINE_RATINGS.length) || (engineRating < 0)) && !hasFlag(SUPPORT_VEE_ENGINE)) { _EL_     problem.append("Rating:" + engineRating); _EL_     return false; _EL_   } _EL_   if ((engineRating > 400) && !hasFlag(SUPPORT_VEE_ENGINE)) { _EL_     engineFlags|=LARGE_ENGINE; _EL_   } _EL_ switch (engineType) { _EL_ case COMBUSTION_ENGINE: _EL_ case NORMAL_ENGINE: _EL_ case XL_ENGINE: _EL_ case XXL_ENGINE: _EL_ case FUEL_CELL: _EL_ case NONE: _EL_ case MAGLEV: _EL_ case BATTERY: _EL_ case SOLAR: _EL_     break; _EL_ case COMPACT_ENGINE: _EL_   if (hasFlag(LARGE_ENGINE)) { _EL_     problem.append(Messages.getString("Engine.invalidCompactLarge")); _EL_     return false; _EL_   } _EL_ break; _EL_ case LIGHT_ENGINE: _EL_ case FISSION: _EL_ if (hasFlag(CLAN_ENGINE)) { _EL_ problem.append(Messages.getString("Engine.invalidSphereOnly")); _EL_ return false; _EL_ } _EL_ break; _EL_ default : _EL_ problem.append("Type:" + engineType); _EL_ return false; _EL_ } _EL_ return true; _EL_ } _EL_ ', 'static public void assertEquals(String message,float expected,float actual,float delta){ _EL_   if (Float.isInfinite(expected)) { _EL_     if (!(expected == actual))     failNotEquals(message,new Float(expected),new Float(actual)); _EL_   } _EL_  else   if (!(Math.abs(expected - actual) <= delta))   failNotEquals(message,new Float(expected),new Float(actual)); _EL_ } _EL_ ', 'private void calculateD(double[] b){ _EL_   int length=mExtremalIndices.size() - 1; _EL_   mD=new double[length]; _EL_   for (int k=0; k < length; k++) { _EL_     mD[k]=b[k] * (mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(k)] - mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(length)]); _EL_   } _EL_ } _EL_ ', 'public static byte[] base64decode(String coded){ _EL_   if (null == coded)   return null; _EL_   byte[] src=coded.getBytes(); _EL_   int len=src.length; _EL_   int dlen=len - (len / 77); _EL_   dlen=(dlen >>> 2) + (dlen >>> 1); _EL_   int rem=0; _EL_   if (61 == src[len - 1])   rem++; _EL_   if (61 == src[len - 2])   rem++; _EL_   dlen-=rem; _EL_   byte[] dst=new byte[dlen]; _EL_   int pos=0; _EL_   int dpos=0; _EL_   int col=0; _EL_   len-=4; _EL_   while (pos < len) { _EL_     byte b0=_base64de[src[pos++]]; _EL_     byte b1=_base64de[src[pos++]]; _EL_     byte b2=_base64de[src[pos++]]; _EL_     byte b3=_base64de[src[pos++]]; _EL_     if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException("Invalid character at or around position " + pos); _EL_     dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03)); _EL_     dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f)); _EL_     dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f)); _EL_     col+=4; _EL_     if (76 == col) { _EL_       if (10 != src[pos++])       throw new RuntimeException("No linefeed found at position " + (pos - 1)); _EL_       col=0; _EL_     } _EL_   } _EL_   byte b0=_base64de[src[pos++]]; _EL_   byte b1=_base64de[src[pos++]]; _EL_   byte b2=_base64de[src[pos++]]; _EL_   byte b3=_base64de[src[pos++]]; _EL_   if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException("Invalid character at or around position " + pos); _EL_   dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03)); _EL_   if (2 == rem)   return dst; _EL_   dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f)); _EL_   if (1 == rem)   return dst; _EL_   dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f)); _EL_   return dst; _EL_ } _EL_ ', 'private static Properties loadProperties(String propertiesFile){ _EL_   Properties properties=new Properties(); _EL_   try (InputStream is=new FileInputStream(propertiesFile)){ _EL_     properties.load(is); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new RuntimeException("failed to load properties",e); _EL_   } _EL_   return properties; _EL_ } _EL_ ', 'public TextEditor replaceAll(Pattern pattern,Replacement replacement){ _EL_   Matcher m=pattern.matcher(text); _EL_   int lastIndex=0; _EL_   StringBuilder sb=new StringBuilder(); _EL_   while (m.find()) { _EL_     sb.append(text.subSequence(lastIndex,m.start())); _EL_     sb.append(replacement.replacement(m)); _EL_     lastIndex=m.end(); _EL_   } _EL_   sb.append(text.subSequence(lastIndex,text.length())); _EL_   text=sb; _EL_   return this; _EL_ } _EL_ ', '@SuppressWarnings({"unchecked"}) @Override default LazyFutureStream<U> concat(final Stream<? extends U> other){ _EL_   return fromStream(Stream.concat(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.ORDERED),false),StreamSupport.stream(Spliterators.spliteratorUnknownSize(other.iterator(),Spliterator.ORDERED),false))); _EL_ } _EL_ ', 'public StandardXYItemLabelGenerator(){ _EL_   this(DEFAULT_ITEM_LABEL_FORMAT,NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance()); _EL_ } _EL_ ', 'public Vector2(double direction){ _EL_   this.x=Math.cos(direction); _EL_   this.y=Math.sin(direction); _EL_ } _EL_ ', 'public double adjustedPow10(double val){ _EL_   boolean negFlag=(val < 0.0); _EL_   if (negFlag) { _EL_     val=-val; _EL_   } _EL_   double res; _EL_   if (val < 1.0) { _EL_     res=(Math.pow(10,val + 1.0) - 10.0) / 9.0; _EL_   } _EL_  else { _EL_     res=Math.pow(10,val); _EL_   } _EL_   return negFlag ? (-res) : res; _EL_ } _EL_ ', '@Override public void clear(){ _EL_   columnList.forEach(null); _EL_ } _EL_ ', 'public static void proxyPort(final int port){ _EL_   final String portValue=Integer.toString(port); _EL_   setProperty("http.proxyPort",portValue); _EL_   setProperty("https.proxyPort",portValue); _EL_ } _EL_ ', 'public static String fetchClusterName(String clusterCgName){ _EL_   String clusterName=null; _EL_   if (clusterCgName != null && !clusterCgName.isEmpty()) { _EL_     String[] tmp=clusterCgName.split(SPLITTER); _EL_     clusterName=tmp[0]; _EL_   } _EL_   return clusterName; _EL_ } _EL_ ', 'private void fetchMyServiceCardsFromServer(){ _EL_   RetroCallback retroCallback; _EL_   retroCallback=new RetroCallback(this); _EL_   retroCallback.setRequestId(HttpConstants.ApiResponseCodes.GET_MY_SERVICES); _EL_   retroCallbackList.add(retroCallback); _EL_   mYeloApi.getMyServiceCards(retroCallback); _EL_ } _EL_ ', 'public DViewAsymmetricKeyFields(JDialog parent,String title,RSAPublicKey rsaPublicKey){ _EL_   super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL); _EL_   key=rsaPublicKey; _EL_   initFields(); _EL_ } _EL_ ', 'public List<ColourChange> sampleConditionalMigrationEvents2(int parentColour,double parentHeight,int childColour,double childHeight,double[] m){ _EL_   List<ColourChange> colourChanges=new ArrayList<ColourChange>(); _EL_   if (parentHeight < childHeight) { _EL_     throw new IllegalArgumentException("sampleConditionalMigrationEvents: parentHeight=" + parentHeight + " childHeight="+ childHeight+ ", not good."); _EL_   } _EL_   try { _EL_     int currentColour=parentColour; _EL_     double currentHeight=parentHeight; _EL_     while (true) { _EL_       ColourChange nextEvent=randomConditionalMigrationEvent(currentColour,currentHeight,childColour,childHeight,m); _EL_       currentHeight=nextEvent.getTime(); _EL_       currentColour=nextEvent.getColourAbove(); _EL_       colourChanges.add(nextEvent); _EL_     } _EL_   } _EL_  catch (  NoEventException nee) { _EL_   } _EL_   reverseColourChangeList(colourChanges,parentColour); _EL_   return colourChanges; _EL_ } _EL_ ', 'public static boolean isAttribute(Object objValue){ _EL_   if (objValue instanceof String) { _EL_     String stringValue=(String)objValue; _EL_     if (stringValue.startsWith(ATTRIBUTE_START) && stringValue.endsWith(ATTRIBUTE_END)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static String decodeASCII(final byte[] key,final int off,final int len){ _EL_   final byte[] b=new byte[len]; _EL_   System.arraycopy(key,off,b,0,len); _EL_   for (int i=0; i < len; i++) { _EL_     b[i]=decodeByte(b[i]); _EL_   } _EL_   try { _EL_     return new String(b,"US-ASCII"); _EL_   } _EL_  catch (  UnsupportedEncodingException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ } _EL_ ', '@Override public void valueChanged(TreeSelectionEvent e){ _EL_   if (preventEvent) { _EL_     return; _EL_   } _EL_   if (mainFrame != null) { _EL_     List<Operator> selectedOperators=getSelectedOperators(); _EL_     if (selectedOperators != null && !selectedOperators.isEmpty()) { _EL_       mainFrame.selectOperators(selectedOperators); _EL_     } _EL_   } _EL_ } _EL_ ', 'public synchronized void removePropertyChangeListener(PropertyChangeListener listener){ _EL_   listeners.remove(listener); _EL_ } _EL_ ', 'final boolean transferAfterCancelledWait(Node node){ _EL_   if (compareAndSetWaitStatus(node,Node.CONDITION,0)) { _EL_     enq(node); _EL_     return true; _EL_   } _EL_   while (!isOnSyncQueue(node))   Thread.yield(); _EL_   return false; _EL_ } _EL_ ', 'private static Intent createShareIntent(Context context,final String shareText){ _EL_   final Intent shareIntent=new Intent(Intent.ACTION_SEND); _EL_   shareIntent.putExtra(android.content.Intent.EXTRA_SUBJECT,context.getString(R.string.share_subject)); _EL_   shareIntent.putExtra(android.content.Intent.EXTRA_TEXT,shareText); _EL_   shareIntent.setType("text/plain"); _EL_   return shareIntent; _EL_ } _EL_ ', 'public static <U>AtomicIntegerFieldUpdater<U> newUpdater(Class<U> tclass,String fieldName){ _EL_   if (UnsafeHolder.isAvailable()) { _EL_     return new AtomicIntegerFieldUpdaterImpl<U>(tclass,fieldName); _EL_   } _EL_   return AtomicIntegerFieldUpdater.newUpdater(tclass,fieldName); _EL_ } _EL_ ', 'private boolean tryStep(final double t0,final double[] y0,final double step,final int k,final double[] scale,final double[][] f,final double[] yMiddle,final double[] yEnd) throws MathIllegalArgumentException, MathIllegalStateException { _EL_   final int n=sequence[k]; _EL_   final double subStep=step / n; _EL_   final double subStep2=2 * subStep; _EL_   double t=t0 + subStep; _EL_   for (int i=0; i < y0.length; ++i) { _EL_     yEnd[i]=y0[i] + subStep * f[0][i]; _EL_   } _EL_   f[1]=computeDerivatives(t,yEnd); _EL_   final double[] yTmp=y0.clone(); _EL_   for (int j=1; j < n; ++j) { _EL_     if (2 * j == n) { _EL_       System.arraycopy(yEnd,0,yMiddle,0,y0.length); _EL_     } _EL_     t+=subStep; _EL_     for (int i=0; i < y0.length; ++i) { _EL_       final double middle=yEnd[i]; _EL_       yEnd[i]=yTmp[i] + subStep2 * f[j][i]; _EL_       yTmp[i]=middle; _EL_     } _EL_     f[j + 1]=computeDerivatives(t,yEnd); _EL_     if (performTest && (j <= maxChecks) && (k < maxIter)) { _EL_       double initialNorm=0.0; _EL_       for (int l=0; l < scale.length; ++l) { _EL_         final double ratio=f[0][l] / scale[l]; _EL_         initialNorm+=ratio * ratio; _EL_       } _EL_       double deltaNorm=0.0; _EL_       for (int l=0; l < scale.length; ++l) { _EL_         final double ratio=(f[j + 1][l] - f[0][l]) / scale[l]; _EL_         deltaNorm+=ratio * ratio; _EL_       } _EL_       if (deltaNorm > 4 * FastMath.max(1.0e-15,initialNorm)) { _EL_         return false; _EL_       } _EL_     } _EL_   } _EL_   for (int i=0; i < y0.length; ++i) { _EL_     yEnd[i]=0.5 * (yTmp[i] + yEnd[i] + subStep * f[n][i]); _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static RowLimitSpec buildRowLimitSpec(EsperEPL2GrammarParser.RowLimitContext ctx){ _EL_   Object numRows; _EL_   Object offset; _EL_   if (ctx.o != null) { _EL_     numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1); _EL_     offset=parseNumOrVariableIdent(ctx.n2,ctx.i2); _EL_   } _EL_  else   if (ctx.c != null) { _EL_     offset=parseNumOrVariableIdent(ctx.n1,ctx.i1); _EL_     numRows=parseNumOrVariableIdent(ctx.n2,ctx.i2); _EL_   } _EL_  else { _EL_     numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1); _EL_     offset=null; _EL_   } _EL_   Integer numRowsInt=null; _EL_   String numRowsVariable=null; _EL_   if (numRows instanceof String) { _EL_     numRowsVariable=(String)numRows; _EL_   } _EL_  else { _EL_     numRowsInt=(Integer)numRows; _EL_   } _EL_   Integer offsetInt=null; _EL_   String offsetVariable=null; _EL_   if (offset instanceof String) { _EL_     offsetVariable=(String)offset; _EL_   } _EL_  else { _EL_     offsetInt=(Integer)offset; _EL_   } _EL_   return new RowLimitSpec(numRowsInt,offsetInt,numRowsVariable,offsetVariable); _EL_ } _EL_ ', 'public final int first_common_layer(BrdItem p_other){ _EL_   int max_first_layer=Math.max(first_layer(),p_other.first_layer()); _EL_   int min_last_layer=Math.min(last_layer(),p_other.last_layer()); _EL_   if (max_first_layer > min_last_layer) { _EL_     return -1; _EL_   } _EL_   return max_first_layer; _EL_ } _EL_ ', 'public ItemStack removeItems(ItemStack drive,ItemStack stack,int amountWanted){ _EL_   if (getMaxKilobits(drive) == -1)   return null; _EL_   int stored=getAmountStored(drive,stack); _EL_   int amountGiven=Math.min(amountWanted,stored); _EL_   if (amountGiven > 0) { _EL_     setAmountStored(drive,stack,stored - amountGiven); _EL_     stack.stackSize+=amountGiven; _EL_     markDirty(drive); _EL_   } _EL_   return stack; _EL_ } _EL_ ', 'public void saveIndexes(){ _EL_   ArrayList toSave=new ArrayList(); _EL_ synchronized (this) { _EL_     Object[] valueTable=this.indexes.valueTable; _EL_     for (int i=0, l=valueTable.length; i < l; i++) { _EL_       Index index=(Index)valueTable[i]; _EL_       if (index != null)       toSave.add(index); _EL_     } _EL_   } _EL_   boolean allSaved=true; _EL_   for (int i=0, length=toSave.size(); i < length; i++) { _EL_     Index index=(Index)toSave.get(i); _EL_     ReadWriteMonitor monitor=index.monitor; _EL_     if (monitor == null)     continue; _EL_     try { _EL_       monitor.enterRead(); _EL_       if (index.hasChanged()) { _EL_         if (monitor.exitReadEnterWrite()) { _EL_           try { _EL_             saveIndex(index); _EL_           } _EL_  catch (          IOException e) { _EL_             if (JobManager.VERBOSE) { _EL_               Util.verbose("-> got the following exception while saving:",System.err); _EL_               e.printStackTrace(); _EL_             } _EL_             allSaved=false; _EL_           } _EL_  finally { _EL_             monitor.exitWriteEnterRead(); _EL_           } _EL_         } _EL_  else { _EL_           allSaved=false; _EL_         } _EL_       } _EL_     } _EL_   finally { _EL_       monitor.exitRead(); _EL_     } _EL_   } _EL_   if (this.participantsContainers != null && this.participantUpdated) { _EL_     writeParticipantsIndexNamesFile(); _EL_     this.participantUpdated=false; _EL_   } _EL_   this.needToSave=!allSaved; _EL_ } _EL_ ', 'public void addItem(Artist artist,int position){ _EL_   if (artist == null)   throw new NullPointerException("The item cannot be null"); _EL_   if (position < getItemCount() || position > getItemCount())   throw new IllegalArgumentException("The position must be between 0 and lastIndex + 1"); _EL_   artists.add(position,artist); _EL_   notifyItemInserted(position); _EL_ } _EL_ ', 'public Process executeAsync(final CommandLine command,Map<String,String> environment) throws IOException { _EL_   if (workingDirectory != null && !workingDirectory.exists()) { _EL_     throw new IOException(workingDirectory + " doesn\'t exist."); _EL_   } _EL_   return executeInternal(command,environment,workingDirectory,streamHandler,null); _EL_ } _EL_ ', 'public void expandAndSelectIfExists(RepositoryLocation location){ _EL_   if (location.parent() != null) { _EL_     expandIfExists(location.parent(),location.getName()); _EL_   } _EL_  else { _EL_     expandIfExists(location,null); _EL_   } _EL_   scrollPathToVisible(getSelectionPath()); _EL_ } _EL_ ', 'public void nextToken(){ _EL_   previousLine=line; _EL_   previousColumn=column; _EL_   while (pos < matcher.regionStart()) { _EL_     if (text.charAt(pos) == \'\\n\') { _EL_       ++line; _EL_       column=0; _EL_     } _EL_  else { _EL_       ++column; _EL_     } _EL_     ++pos; _EL_   } _EL_   if (matcher.regionStart() == matcher.regionEnd()) { _EL_     currentToken=""; _EL_   } _EL_  else { _EL_     matcher.usePattern(TOKEN); _EL_     if (matcher.lookingAt()) { _EL_       currentToken=matcher.group(); _EL_       matcher.region(matcher.end(),matcher.regionEnd()); _EL_     } _EL_  else { _EL_       currentToken=String.valueOf(text.charAt(pos)); _EL_       matcher.region(pos + 1,matcher.regionEnd()); _EL_     } _EL_     skipWhitespace(); _EL_   } _EL_ } _EL_ ', 'public static void saveProvisioningValidity(Context context,long validity){ _EL_   if (validity <= 0L) { _EL_     return; _EL_   } _EL_   long next=System.currentTimeMillis() + validity; _EL_   SharedPreferences preferences=context.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE); _EL_   SharedPreferences.Editor editor=preferences.edit(); _EL_   editor.putLong(REGISTRY_PROVISIONING_VALIDITY,validity); _EL_   editor.putLong(REGISTRY_PROVISIONING_EXPIRATION,next); _EL_   editor.commit(); _EL_ } _EL_ ', 'public void encode(OutputStream out) throws IOException { _EL_   DerOutputStream tmp=new DerOutputStream(); _EL_   if (this.extensionValue == null) { _EL_     this.extensionId=PKIXExtensions.ReasonCode_Id; _EL_     this.critical=false; _EL_     encodeThis(); _EL_   } _EL_   super.encode(tmp); _EL_   out.write(tmp.toByteArray()); _EL_ } _EL_ ', 'public DriverTask unexportVolumesFromInitiators(List<Initiator> initiators,List<StorageVolume> volumes){ _EL_   LOG.info("Unexporting volumes from initiators"); _EL_   DriverTask task=new DellSCDriverTask("unexportVolumes"); _EL_   ScServer server=null; _EL_   StringBuilder errBuffer=new StringBuilder(); _EL_   int volumesUnmapped=0; _EL_   for (  StorageVolume volume : volumes) { _EL_     String ssn=volume.getStorageSystemId(); _EL_     boolean isSnapshot=StringUtils.countMatches(volume.getNativeId(),".") == 2; _EL_     try { _EL_       StorageCenterAPI api=connectionManager.getConnection(ssn); _EL_       ScVolume scVol=null; _EL_       if (isSnapshot) { _EL_         scVol=api.findReplayView(volume.getNativeId()); _EL_         if (scVol != null) { _EL_           api.deleteVolume(scVol.instanceId); _EL_           volumesUnmapped++; _EL_           continue; _EL_         } _EL_       } _EL_  else { _EL_         scVol=api.getVolume(volume.getNativeId()); _EL_       } _EL_       if (scVol == null) { _EL_         throw new DellSCDriverException(String.format("Unable to find volume %s",volume.getNativeId())); _EL_       } _EL_       if (server == null) { _EL_         server=findScServer(api,ssn,initiators); _EL_       } _EL_       if (server == null) { _EL_         throw new DellSCDriverException(SERVER_CREATE_FAIL_MSG); _EL_       } _EL_       ScMappingProfile[] mappingProfiles=api.findMappingProfiles(server.instanceId,scVol.instanceId); _EL_       for (      ScMappingProfile mappingProfile : mappingProfiles) { _EL_         api.deleteMappingProfile(mappingProfile.instanceId); _EL_       } _EL_       volumesUnmapped++; _EL_       LOG.info("Volume \'{}\' unexported from server \'{}\'",scVol.name,server.name); _EL_     } _EL_  catch (    StorageCenterAPIException|DellSCDriverException dex) { _EL_       String error=String.format("Error unmapping volume %s: %s",volume.getDisplayName(),dex); _EL_       LOG.error(error); _EL_       errBuffer.append(String.format("%s%n",error)); _EL_       if (SERVER_CREATE_FAIL_MSG.equals(dex.getMessage())) { _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   task.setMessage(errBuffer.toString()); _EL_   if (volumesUnmapped == volumes.size()) { _EL_     task.setStatus(TaskStatus.READY); _EL_   } _EL_  else   if (volumesUnmapped == 0) { _EL_     task.setStatus(TaskStatus.FAILED); _EL_   } _EL_  else { _EL_     task.setStatus(TaskStatus.PARTIALLY_FAILED); _EL_   } _EL_   return task; _EL_ } _EL_ ', 'public void createClusterAsync(final String projectId,final ClusterCreateSpec clusterCreateSpec,final FutureCallback<Task> responseCallback) throws IOException { _EL_   String path=String.format("%s/%s/clusters",getBasePath(),projectId); _EL_   createObjectAsync(path,serializeObjectAsJson(clusterCreateSpec),responseCallback); _EL_ } _EL_ ', 'public static void writeUnsafe(PacketOutputStream out,String value,boolean noBackslashEscapes) throws IOException { _EL_   byte[] bytes=value.getBytes("UTF-8"); _EL_   out.writeUnsafe(QUOTE); _EL_   writeBytesEscapedUnsafe(out,bytes,bytes.length,noBackslashEscapes); _EL_   out.writeUnsafe(QUOTE); _EL_ } _EL_ ', 'private Sha256Hash calculateHash(){ _EL_   try { _EL_     ByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(HEADER_SIZE); _EL_     writeHeader(bos); _EL_     return new Sha256Hash(Utils.reverseBytes(doubleDigest(bos.toByteArray()))); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ } _EL_ ', 'private void addPropertyType(URI p,Resource t){ _EL_   OwlProperty prop=getProperty(p); _EL_   if (t.equals(OWL.TRANSITIVEPROPERTY)) { _EL_     prop.setTransitive(); _EL_   } _EL_  else   if (t.equals(OWL.SYMMETRICPROPERTY)) { _EL_     prop.setSymmetric(); _EL_   } _EL_  else   if (t.equals(OWL2.ASYMMETRICPROPERTY)) { _EL_     prop.setAsymmetric(); _EL_   } _EL_  else   if (t.equals(OWL.FUNCTIONALPROPERTY)) { _EL_     prop.setFunctional(); _EL_   } _EL_  else   if (t.equals(OWL.INVERSEFUNCTIONALPROPERTY)) { _EL_     prop.setInverseFunctional(); _EL_   } _EL_  else   if (t.equals(OWL2.IRREFLEXIVEPROPERTY)) { _EL_     prop.setIrreflexive(); _EL_   } _EL_ } _EL_ ', 'public static void equals(Object object1,Object object2){ _EL_   checkAssertion(object1.equals(object2),null); _EL_ } _EL_ ', 'public static String writeActionsToString(OFInstructionWriteActions inst,Logger log) throws Exception { _EL_   return ActionUtils.actionsToString(inst.getActions(),log); _EL_ } _EL_ ', 'public static String encodeLines(byte[] in,int iOff,int iLen,int lineLen,String lineSeparator){ _EL_   int blockLen=(lineLen * 3) / 4; _EL_   if (blockLen <= 0)   throw new IllegalArgumentException(); _EL_   int lines=(iLen + blockLen - 1) / blockLen; _EL_   int bufLen=((iLen + 2) / 3) * 4 + lines * lineSeparator.length(); _EL_   StringBuilder buf=new StringBuilder(bufLen); _EL_   int ip=0; _EL_   while (ip < iLen) { _EL_     int l=Math.min(iLen - ip,blockLen); _EL_     buf.append(encode(in,iOff + ip,l)); _EL_     buf.append(lineSeparator); _EL_     ip+=l; _EL_   } _EL_   return buf.toString(); _EL_ } _EL_ ', 'final int rllong(DataInputStream dis) throws IOException { _EL_   int b1, b2, b3, b4; _EL_   int i=0; _EL_   i=dis.readInt(); _EL_   b1=(i & 0xFF) << 24; _EL_   b2=(i & 0xFF00) << 8; _EL_   b3=(i & 0xFF0000) >> 8; _EL_   b4=(i & 0xFF000000) >>> 24; _EL_   i=(b1 | b2 | b3| b4); _EL_   return i; _EL_ } _EL_ ', 'public Dependencies resolveFromFile(File file,String className,SootClass sc){ _EL_   DexlibWrapper wrapper=cache.get(file); _EL_   if (wrapper == null) { _EL_     wrapper=new DexlibWrapper(file); _EL_     cache.put(file,wrapper); _EL_     wrapper.initialize(); _EL_   } _EL_   Dependencies deps=wrapper.makeSootClass(sc,className); _EL_   addSourceFileTag(sc,"dalvik_source_" + file.getName()); _EL_   return deps; _EL_ } _EL_ ', 'public static String buildResponseUrl(String tenant,LogoutState logoutState){ _EL_   String retval=null; _EL_   LogoutResponse samlResponse=logoutState.generateResponseForTenant(tenant,logoutState.getMessageSource(),logoutState.getLocale()); _EL_   if (samlResponse != null) { _EL_     log.info("SAML SLO Response is " + samlResponse.toString()); _EL_     retval=logoutState.generateResponseUrlForTenant(samlResponse,tenant); _EL_   } _EL_   return retval; _EL_ } _EL_ ', 'private void initTokenizer(StreamTokenizer tokenizer){ _EL_   tokenizer.resetSyntax(); _EL_   tokenizer.whitespaceChars(0,(\' \' - 1)); _EL_   tokenizer.wordChars(\' \',\'\\u00FF\'); _EL_   tokenizer.whitespaceChars(\',\',\',\'); _EL_   tokenizer.whitespaceChars(\':\',\':\'); _EL_   tokenizer.commentChar(\'|\'); _EL_   tokenizer.whitespaceChars(\'\\t\',\'\\t\'); _EL_   tokenizer.quoteChar(\'"\'); _EL_   tokenizer.quoteChar(\'\\\'\'); _EL_   tokenizer.eolIsSignificant(true); _EL_ } _EL_ ', 'protected void illegalMessageReceived(OFMessage m){ _EL_   String msg=getSwitchStateMessage(m,"Switch should never send this message in the current state"); _EL_   throw new SwitchStateException(msg); _EL_ } _EL_ ', 'public void open(int port) throws IOException { _EL_   connection=new DatagramSocket(port); _EL_   connection.setSoTimeout(timeout); _EL_ } _EL_ ', 'public String globalInfo(){ _EL_   return "A SplitEvaluator that produces results for a classification " + "scheme on a numeric class attribute."; _EL_ } _EL_ ', 'public void disable(RichFormatterFeature feature){ _EL_   features.remove(feature); _EL_ } _EL_ ', '@SafeVarargs public final void add(T... newItems){ _EL_   add(Arrays.asList(newItems)); _EL_ } _EL_ ', 'public static Recipe fromCursor(Cursor cursor){ _EL_   Recipe recipe=new Recipe(null); _EL_   for (int c=0; c < cursor.getColumnCount(); c++) { _EL_     String columnName=cursor.getColumnName(c); _EL_     if (columnName.equals(RecipeTable.ID_COLUMN)) { _EL_       recipe.id=cursor.getString(c); _EL_     } _EL_  else     if (columnName.equals(RecipeTable.TITLE_COLUMN)) { _EL_       recipe.setTitle(cursor.getString(c)); _EL_     } _EL_  else     if (columnName.equals(RecipeTable.DESCRIPTION_COLUMN)) { _EL_       recipe.setDescription(cursor.getString(c)); _EL_     } _EL_  else     if (columnName.equals(RecipeTable.PHOTO_COLUMN)) { _EL_       recipe.setPhoto(cursor.getString(c)); _EL_     } _EL_  else     if (columnName.equals(RecipeTable.PREP_TIME_COLUMN)) { _EL_       recipe.setPrepTime(cursor.getString(c)); _EL_     } _EL_   } _EL_   return recipe; _EL_ } _EL_ ', 'public boolean isLocked(){ _EL_   return !queue.isEmpty(); _EL_ } _EL_ ', 'public long cguest_time(){ _EL_   return Long.parseLong(fields[43]); _EL_ } _EL_ ', 'private static ClassInfo findOrCreateClass(String t){ _EL_   if (!t.endsWith("[]")) { _EL_     return ClassInfo.findOrCreateClass(t); _EL_   } _EL_  else { _EL_     String baseType=t.substring(0,t.indexOf("[]")); _EL_     int level=(t.length() - t.indexOf("[]")) / 2; _EL_     String s=""; _EL_     for (int i=0; i < level; ++i)     s+="["; _EL_     if (baseType.equals("int"))     s+="I"; _EL_  else     if (baseType.equals("boolean"))     s+="B"; _EL_  else     s+="L" + baseType + ";"; _EL_     return ClassInfo.findOrCreateClass(s); _EL_   } _EL_ } _EL_ ', 'private void resetNotes(){ _EL_   if (errorInStatus1) { _EL_     if (editMode) { _EL_       statusText1.setText(editStatus1); _EL_     } _EL_  else { _EL_       statusText1.setText(stdStatus1); _EL_     } _EL_     errorInStatus1=false; _EL_   } _EL_   resetNotes2(); _EL_ } _EL_ ', '@HLEFunction(nid=0x7ED29E40,version=150) public int sceRtcSetTick(TPointer timeAddr,TPointer64 ticksAddr){ _EL_   long ticks=ticksAddr.getValue() - rtcMagicOffset; _EL_   ScePspDateTime time=ScePspDateTime.fromMicros(ticks); _EL_   time.write(timeAddr); _EL_   return 0; _EL_ } _EL_ ', 'private void populateNavDrawer(){ _EL_   mNavDrawerItems.clear(); _EL_   mNavDrawerItems.add(NAVDRAWER_ITEM_HOME); _EL_   mNavDrawerItems.add(NAVDRAWER_ITEM_SEPARATOR); _EL_   mNavDrawerItems.add(NAVDRAWER_ITEM_MY_FOLLOWING); _EL_   mNavDrawerItems.add(NAVDRAWER_ITEM_MY_SHOTS); _EL_   mNavDrawerItems.add(NAVDRAWER_ITEM_MY_BUCKETS); _EL_   mNavDrawerItems.add(NAVDRAWER_ITEM_MY_PROJECTS); _EL_   mNavDrawerItems.add(NAVDRAWER_ITEM_MY_TEAMS); _EL_   mNavDrawerItems.add(NAVDRAWER_ITEM_MY_LIKES); _EL_   mNavDrawerItems.add(NAVDRAWER_ITEM_SEPARATOR_SPECIAL); _EL_   mNavDrawerItems.add(NAVDRAWER_ITEM_SETTINGS); _EL_   createNavDrawerItems(); _EL_ } _EL_ ', 'private BigInteger oddModPow(BigInteger y,BigInteger z){ _EL_   if (y.equals(ONE))   return this; _EL_   if (signum == 0)   return ZERO; _EL_   int[] base=mag.clone(); _EL_   int[] exp=y.mag; _EL_   int[] mod=z.mag; _EL_   int modLen=mod.length; _EL_   if ((modLen & 1) != 0) { _EL_     int[] x=new int[modLen + 1]; _EL_     System.arraycopy(mod,0,x,1,modLen); _EL_     mod=x; _EL_     modLen++; _EL_   } _EL_   int wbits=0; _EL_   int ebits=bitLength(exp,exp.length); _EL_   if ((ebits != 17) || (exp[0] != 65537)) { _EL_     while (ebits > bnExpModThreshTable[wbits]) { _EL_       wbits++; _EL_     } _EL_   } _EL_   int tblmask=1 << wbits; _EL_   int[][] table=new int[tblmask][]; _EL_   for (int i=0; i < tblmask; i++)   table[i]=new int[modLen]; _EL_   long n0=(mod[modLen - 1] & LONG_MASK) + ((mod[modLen - 2] & LONG_MASK) << 32); _EL_   long inv=-MutableBigInteger.inverseMod64(n0); _EL_   int[] a=leftShift(base,base.length,modLen << 5); _EL_   MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod); _EL_   b2.normalize(); _EL_   MutableBigInteger r=a2.divide(b2,q); _EL_   table[0]=r.toIntArray(); _EL_   if (table[0].length < modLen) { _EL_     int offset=modLen - table[0].length; _EL_     int[] t2=new int[modLen]; _EL_     System.arraycopy(table[0],0,t2,offset,table[0].length); _EL_     table[0]=t2; _EL_   } _EL_   int[] b=montgomerySquare(table[0],mod,modLen,inv,null); _EL_   int[] t=Arrays.copyOf(b,modLen); _EL_   for (int i=1; i < tblmask; i++) { _EL_     table[i]=montgomeryMultiply(t,table[i - 1],mod,modLen,inv,null); _EL_   } _EL_   int bitpos=1 << ((ebits - 1) & (32 - 1)); _EL_   int buf=0; _EL_   int elen=exp.length; _EL_   int eIndex=0; _EL_   for (int i=0; i <= wbits; i++) { _EL_     buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0); _EL_     bitpos>>>=1; _EL_     if (bitpos == 0) { _EL_       eIndex++; _EL_       bitpos=1 << (32 - 1); _EL_       elen--; _EL_     } _EL_   } _EL_   int multpos=ebits; _EL_   ebits--; _EL_   boolean isone=true; _EL_   multpos=ebits - wbits; _EL_   while ((buf & 1) == 0) { _EL_     buf>>>=1; _EL_     multpos++; _EL_   } _EL_   int[] mult=table[buf >>> 1]; _EL_   buf=0; _EL_   if (multpos == ebits)   isone=false; _EL_   while (true) { _EL_     ebits--; _EL_     buf<<=1; _EL_     if (elen != 0) { _EL_       buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0; _EL_       bitpos>>>=1; _EL_       if (bitpos == 0) { _EL_         eIndex++; _EL_         bitpos=1 << (32 - 1); _EL_         elen--; _EL_       } _EL_     } _EL_     if ((buf & tblmask) != 0) { _EL_       multpos=ebits - wbits; _EL_       while ((buf & 1) == 0) { _EL_         buf>>>=1; _EL_         multpos++; _EL_       } _EL_       mult=table[buf >>> 1]; _EL_       buf=0; _EL_     } _EL_     if (ebits == multpos) { _EL_       if (isone) { _EL_         b=mult.clone(); _EL_         isone=false; _EL_       } _EL_  else { _EL_         t=b; _EL_         a=montgomeryMultiply(t,mult,mod,modLen,inv,a); _EL_         t=a; _EL_         a=b; _EL_         b=t; _EL_       } _EL_     } _EL_     if (ebits == 0)     break; _EL_     if (!isone) { _EL_       t=b; _EL_       a=montgomerySquare(t,mod,modLen,inv,a); _EL_       t=a; _EL_       a=b; _EL_       b=t; _EL_     } _EL_   } _EL_   int[] t2=new int[2 * modLen]; _EL_   System.arraycopy(b,0,t2,modLen,modLen); _EL_   b=montReduce(t2,mod,modLen,(int)inv); _EL_   t2=Arrays.copyOf(b,modLen); _EL_   return new BigInteger(1,t2); _EL_ } _EL_ ', 'public int nextToken(){ _EL_   while (index < length && Character.isWhitespace(expr[index])) { _EL_     index++; _EL_   } _EL_   tokenVal=null; _EL_   if (index == length)   return TOKEN_END; _EL_   int start=index; _EL_   char currentChar=expr[index]; _EL_   char nextChar=(char)0; _EL_   index++; _EL_   if (index < length)   nextChar=expr[index]; _EL_ switch (currentChar) { _EL_ case \'(\': _EL_     return TOKEN_LBRACE; _EL_ case \')\': _EL_   return TOKEN_RBRACE; _EL_ case \'=\': _EL_ return TOKEN_EQ; _EL_ case \'!\': _EL_ if (nextChar == \'=\') { _EL_ index++; _EL_ return TOKEN_NOT_EQ; _EL_ } _EL_ return TOKEN_NOT; _EL_ case \'|\': _EL_ if (nextChar == \'|\') { _EL_ index++; _EL_ return TOKEN_OR; _EL_ } _EL_ break; _EL_ case \'&\': _EL_ if (nextChar == \'&\') { _EL_ index++; _EL_ return TOKEN_AND; _EL_ } _EL_ break; _EL_ case \'>\': _EL_ if (nextChar == \'=\') { _EL_ index++; _EL_ return TOKEN_GE; _EL_ } _EL_ return TOKEN_GT; _EL_ case \'<\': _EL_ if (nextChar == \'=\') { _EL_ index++; _EL_ return TOKEN_LE; _EL_ } _EL_ return TOKEN_LT; _EL_ default : _EL_ break; _EL_ } _EL_ int end=index; _EL_ if (currentChar == \'"\' || currentChar == \'\\\'\') { _EL_ char endChar=currentChar; _EL_ boolean escaped=false; _EL_ start++; _EL_ for (; index < length; index++) { _EL_ if (expr[index] == \'\\\\\' && !escaped) { _EL_ escaped=true; _EL_ continue; _EL_ } _EL_ if (expr[index] == endChar && !escaped) break; _EL_ escaped=false; _EL_ } _EL_ end=index; _EL_ index++; _EL_ } _EL_  else if (currentChar == \'/\') { _EL_ char endChar=currentChar; _EL_ boolean escaped=false; _EL_ for (; index < length; index++) { _EL_ if (expr[index] == \'\\\\\' && !escaped) { _EL_ escaped=true; _EL_ continue; _EL_ } _EL_ if (expr[index] == endChar && !escaped) break; _EL_ escaped=false; _EL_ } _EL_ end=++index; _EL_ } _EL_  else { _EL_ for (; index < length; index++) { _EL_ if (isMetaChar(expr[index])) break; _EL_ } _EL_ end=index; _EL_ } _EL_ this.tokenVal=new String(expr,start,end - start); _EL_ return TOKEN_STRING; _EL_ } _EL_ ', 'public static Byte[] valuesOf(byte[] array){ _EL_   Byte[] dest=new Byte[array.length]; _EL_   for (int i=0; i < array.length; i++) { _EL_     dest[i]=Byte.valueOf(array[i]); _EL_   } _EL_   return dest; _EL_ } _EL_ ', 'public void auditCallhome(OperationTypeEnum auditType,String operationalStatus,String description,Object... descparams){ _EL_   _auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus,description,descparams); _EL_ } _EL_ ', 'public static float mean(float[] data,int startIndex,int endIndex){ _EL_   float mean=0; _EL_   int total=0; _EL_   startIndex=Math.max(startIndex,0); _EL_   startIndex=Math.min(startIndex,data.length - 1); _EL_   endIndex=Math.max(endIndex,0); _EL_   endIndex=Math.min(endIndex,data.length - 1); _EL_   if (startIndex > endIndex)   startIndex=endIndex; _EL_   for (int i=startIndex; i <= endIndex; i++) { _EL_     if (Float.isNaN(data[i]))     throw new IllegalArgumentException("NaN not allowed in mean calculation"); _EL_     mean+=data[i]; _EL_     total++; _EL_   } _EL_   mean/=total; _EL_   return mean; _EL_ } _EL_ ', 'protected MediaType selectMediaType(ServerWebExchange exchange,List<MediaType> producibleTypes){ _EL_   List<MediaType> acceptableTypes=getAcceptableTypes(exchange); _EL_   producibleTypes=getProducibleTypes(exchange,producibleTypes); _EL_   Set<MediaType> compatibleMediaTypes=new LinkedHashSet<>(); _EL_   for (  MediaType acceptable : acceptableTypes) { _EL_     for (    MediaType producible : producibleTypes) { _EL_       if (acceptable.isCompatibleWith(producible)) { _EL_         compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable,producible)); _EL_       } _EL_     } _EL_   } _EL_   List<MediaType> result=new ArrayList<>(compatibleMediaTypes); _EL_   MediaType.sortBySpecificityAndQuality(result); _EL_   for (  MediaType mediaType : compatibleMediaTypes) { _EL_     if (mediaType.isConcrete()) { _EL_       return mediaType; _EL_     } _EL_  else     if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) { _EL_       return MediaType.APPLICATION_OCTET_STREAM; _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public void ensureCapacity(int mincap){ _EL_   if (mincap > array.length) { _EL_     int newcap=((array.length * 3) >> 1) + 1; _EL_     int[] olddata=array; _EL_     array=new int[newcap < mincap ? mincap : newcap]; _EL_     System.arraycopy(olddata,0,array,0,size); _EL_   } _EL_ } _EL_ ', 'public void invalidateAndUnmap(ByteBuffer... bufs) throws IOException { _EL_   if (cleaner != null) { _EL_     invalidated=true; _EL_     barrier.lazySet(0); _EL_     Thread.yield(); _EL_     for (    ByteBuffer b : bufs) { _EL_       cleaner.freeBuffer(resourceDescription,b); _EL_     } _EL_   } _EL_ } _EL_ ', 'public int addDir(File file){ _EL_   if (!file.exists()) { _EL_     return 0; _EL_   } _EL_   String[] names=getNames(getFiles(file,".class")); _EL_   loadClass(file,names); _EL_   return 1; _EL_ } _EL_ ', 'private boolean isMineshafterPresent(){ _EL_   try { _EL_     Class.forName("mineshafter.MineServer"); _EL_     return true; _EL_   } _EL_  catch (  Exception e) { _EL_     return false; _EL_   } _EL_ } _EL_ ', '@Override public boolean equals(Object obj){ _EL_   if (obj == this) { _EL_     return true; _EL_   } _EL_   if (!(obj instanceof BubbleXYItemLabelGenerator)) { _EL_     return false; _EL_   } _EL_   if (!super.equals(obj)) { _EL_     return false; _EL_   } _EL_   BubbleXYItemLabelGenerator that=(BubbleXYItemLabelGenerator)obj; _EL_   if (!ObjectUtilities.equal(this.zFormat,that.zFormat)) { _EL_     return false; _EL_   } _EL_   if (!ObjectUtilities.equal(this.zDateFormat,that.zDateFormat)) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static boolean hasElementChild(Node node){ _EL_   NodeList nl=node.getChildNodes(); _EL_   Node child=null; _EL_   int length=nl.getLength(); _EL_   for (int i=0; i < length; i++) { _EL_     child=nl.item(i); _EL_     if (child.getNodeType() == Node.ELEMENT_NODE) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void delItem(int index){ _EL_ synchronized (getMenuTreeLock()) { _EL_     if (selectedIndex == index) { _EL_       selectItem(null,false); _EL_     } _EL_  else     if (selectedIndex > index) { _EL_       selectedIndex--; _EL_     } _EL_     if (index < items.size()) { _EL_       items.remove(index); _EL_     } _EL_  else { _EL_       if (log.isLoggable(PlatformLogger.Level.FINE)) { _EL_         log.fine("WARNING: Attempt to remove non-existing menu item, index : " + index + ", item count : "+ items.size()); _EL_       } _EL_     } _EL_   } _EL_   updateSize(); _EL_ } _EL_ ', 'public static int countCSSPrimitiveNames(){ _EL_   return ALL_PRIMITIVE_PROPERTY_NAMES.size(); _EL_ } _EL_ ', 'public void printString(String v) throws IOException { _EL_   printString(v,0,v.length()); _EL_ } _EL_ ', 'private void displayAllStringDefinedInStringXml(){ _EL_   SimpleIconFontTextView textView=(SimpleIconFontTextView)findViewById(R.id.text_view_2); _EL_   List<String> list=new ArrayList<>(); _EL_   list.add(getString(R.string.cubeicon_gems_logo)); _EL_   list.add(getString(R.string.cubeicon_android)); _EL_   list.add(getString(R.string.cubeicon_heart)); _EL_   String text=TextUtils.join(" ",list); _EL_   textView.setText(text); _EL_ } _EL_ ', 'private static Intent createMapActivityIntent(Context context,URLSpan[] urlSpans){ _EL_   for (int span_i=0; span_i < urlSpans.length; span_i++) { _EL_     URLSpan urlSpan=urlSpans[span_i]; _EL_     String urlString=urlSpan.getURL(); _EL_     if (urlString.startsWith(GEO_PREFIX)) { _EL_       Intent geoIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(urlString)); _EL_       geoIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); _EL_       return geoIntent; _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'private StringBuilder generateParameters(){ _EL_   StringBuilder parameters=new StringBuilder(); _EL_   if (filterMap == null && expandParameters == null) { _EL_     return parameters; _EL_   } _EL_   parameters.append(\'?\'); _EL_   int filterParameterCounter=0; _EL_   if (filterMap != null && !filterMap.isEmpty()) { _EL_     parameters.append(FILTER_PREFIX); _EL_     for (    Map.Entry<String,String> filterEntry : filterMap.entrySet()) { _EL_       parameters.append(String.format("%s eq \'%s\'",filterEntry.getKey(),filterEntry.getValue())); _EL_       if (++filterParameterCounter < filterMap.size()) { _EL_         parameters.append(" and "); _EL_       } _EL_     } _EL_     if (expandParameters != null) { _EL_       parameters.append("&"); _EL_     } _EL_   } _EL_   if (expandParameters != null) { _EL_     parameters.append(EXPAND_PREFIX); _EL_     Iterator iterator=expandParameters.iterator(); _EL_     parameters.append(String.format("%s",iterator.next())); _EL_     while (iterator.hasNext()) { _EL_       parameters.append(String.format(",%s",iterator.next())); _EL_     } _EL_   } _EL_   return parameters; _EL_ } _EL_ ', 'public void writeExif(Bitmap bmap,OutputStream exifOutStream) throws IOException { _EL_   if (bmap == null || exifOutStream == null) { _EL_     throw new IllegalArgumentException(NULL_ARGUMENT_STRING); _EL_   } _EL_   OutputStream s=getExifWriterStream(exifOutStream); _EL_   bmap.compress(Bitmap.CompressFormat.JPEG,90,s); _EL_   s.flush(); _EL_ } _EL_ ', "public static @CheckForNull @SlashedClassName String fromFieldSignature(String signature){ _EL_   if (signature.charAt(0) != 'L') { _EL_     return null; _EL_   } _EL_   return signature.substring(1,signature.length() - 1); _EL_ } _EL_ ", '@RequiresPermission(Manifest.permission.CAMERA) public CameraSource start() throws IOException { _EL_ synchronized (mCameraLock) { _EL_     if (mCamera != null) { _EL_       return this; _EL_     } _EL_     mCamera=createCamera(); _EL_     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) { _EL_       mDummySurfaceTexture=new SurfaceTexture(DUMMY_TEXTURE_NAME); _EL_       mCamera.setPreviewTexture(mDummySurfaceTexture); _EL_     } _EL_  else { _EL_       mDummySurfaceView=new SurfaceView(mContext); _EL_       mCamera.setPreviewDisplay(mDummySurfaceView.getHolder()); _EL_     } _EL_     mCamera.startPreview(); _EL_     mProcessingThread=new Thread(mFrameProcessor); _EL_     mFrameProcessor.setActive(true); _EL_     mProcessingThread.start(); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public synchronized void clear(){ _EL_   mCategories.clear(); _EL_   mValues.clear(); _EL_ } _EL_ ', 'private static void updateWindowUI(Window window){ _EL_   SwingUtilities.updateComponentTreeUI(window); _EL_   Window ownedWins[]=window.getOwnedWindows(); _EL_   for (  Window ownedWin : ownedWins) { _EL_     updateWindowUI(ownedWin); _EL_   } _EL_ } _EL_ ', 'public static ShoppingCartItem makeItem(Integer cartLocation,GenericValue product,BigDecimal selectedAmount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,Boolean triggerExternalOpsBool,Boolean triggerPriceRulesBool,GenericValue parentProduct,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException { _EL_   return makeItem(cartLocation,product,selectedAmount,quantity,unitPrice,reservStart,reservLength,reservPersons,null,null,shipBeforeDate,shipAfterDate,additionalProductFeatureAndAppls,attributes,prodCatalogId,configWrapper,itemType,itemGroup,dispatcher,cart,triggerExternalOpsBool,triggerPriceRulesBool,parentProduct,skipInventoryChecks,skipProductChecks); _EL_ } _EL_ ', 'protected final void updateBorderText(final String text){ _EL_   Preconditions.checkNotNull(text,"IE01842: Text argument can not be null"); _EL_   m_titledBorder.setTitle(text); _EL_   updateUI(); _EL_ } _EL_ ', 'private void addClasses(Class<?>[] classes,HashSet<Class<?>> result,String fieldName){ _EL_   if (classes == null || classes.length == 0)   Error.classesAbsent(fieldName,configuredClass); _EL_   for (  Class<?> classe : classes)   result.add(classe); _EL_ } _EL_ ', 'public void resetReferences(){ _EL_   if (_refs != null)   _refs.clear(); _EL_ } _EL_ ', 'public static BigInteger decodeMPI(byte[] mpi,boolean hasLength){ _EL_   byte[] buf; _EL_   if (hasLength) { _EL_     int length=(int)readUint32BE(mpi,0); _EL_     buf=new byte[length]; _EL_     System.arraycopy(mpi,4,buf,0,length); _EL_   } _EL_  else   buf=mpi; _EL_   if (buf.length == 0)   return BigInteger.ZERO; _EL_   boolean isNegative=(buf[0] & 0x80) == 0x80; _EL_   if (isNegative)   buf[0]&=0x7f; _EL_   BigInteger result=new BigInteger(buf); _EL_   return isNegative ? result.negate() : result; _EL_ } _EL_ ', 'public void schemaChanged(String serviceName,String version){ _EL_ synchronized (mapRealmToFormat) { _EL_     mapRealmToFormat.remove(ROOT); _EL_   } _EL_ } _EL_ ', 'public void sort(DTMIterator v,Vector keys,XPathContext support) throws javax.xml.transform.TransformerException { _EL_   m_keys=keys; _EL_   int n=v.getLength(); _EL_   Vector nodes=new Vector(); _EL_   for (int i=0; i < n; i++) { _EL_     NodeCompareElem elem=new NodeCompareElem(v.item(i)); _EL_     nodes.addElement(elem); _EL_   } _EL_   Vector scratchVector=new Vector(); _EL_   mergesort(nodes,scratchVector,0,n - 1,support); _EL_   for (int i=0; i < n; i++) { _EL_     v.setItem(((NodeCompareElem)nodes.elementAt(i)).m_node,i); _EL_   } _EL_   v.setCurrentPos(0); _EL_ } _EL_ ', 'protected DateTimeData parse(String str) throws SchemaDateTimeException { _EL_   DateTimeData date=new DateTimeData(str,this); _EL_   int len=str.length(); _EL_   date.year=YEAR; _EL_   date.day=DAY; _EL_   if (str.charAt(0) != \'-\' || str.charAt(1) != \'-\') { _EL_     throw new SchemaDateTimeException("Invalid format for gMonth: " + str); _EL_   } _EL_   int stop=4; _EL_   date.month=parseInt(str,2,stop); _EL_   if (str.length() >= stop + 2 && str.charAt(stop) == \'-\' && str.charAt(stop + 1) == \'-\') { _EL_     stop+=2; _EL_   } _EL_   if (stop < len) { _EL_     if (!isNextCharUTCSign(str,stop,len)) { _EL_       throw new SchemaDateTimeException("Error in month parsing: " + str); _EL_     } _EL_  else { _EL_       getTimeZone(str,date,stop,len); _EL_     } _EL_   } _EL_   validateDateTime(date); _EL_   saveUnnormalized(date); _EL_   if (date.utc != 0 && date.utc != \'Z\') { _EL_     normalize(date); _EL_   } _EL_   date.position=1; _EL_   return date; _EL_ } _EL_ ', 'private void addToQueue(SerialMessage serialMessage){ _EL_   if (serialMessage == null) { _EL_     return; _EL_   } _EL_   if (!msgQueue.contains(serialMessage) && msgQueue.remainingCapacity() > 1) { _EL_     msgQueue.add(serialMessage); _EL_   } _EL_   sendMessage(); _EL_ } _EL_ ', 'private DBID stringToDBID(String query){ _EL_   return DBIDUtil.importInteger(Integer.valueOf(query)); _EL_ } _EL_ ', 'final public void println(long v){ _EL_   Writer out=this.out; _EL_   if (out == null)   return; _EL_   print(v); _EL_   try { _EL_     out.write(_newline,0,_newline.length); _EL_   } _EL_  catch (  IOException e) { _EL_     log.log(Level.FINE,e.toString(),e); _EL_   } _EL_ } _EL_ ', 'public ThriftServiceMetadata(Class<?> serviceType){ _EL_   requireNonNull(serviceType,"serviceType"); _EL_   interfaces=init(null,Collections.singleton(serviceType)); _EL_ } _EL_ ', 'public WritableRaster createCompatibleWritableRaster(int w,int h){ _EL_   if (w <= 0 || h <= 0) { _EL_     throw new RasterFormatException("negative " + ((w <= 0) ? "width" : "height")); _EL_   } _EL_   SampleModel sm=sampleModel.createCompatibleSampleModel(w,h); _EL_   return new BytePackedRaster(sm,new Point(0,0)); _EL_ } _EL_ ', 'public static Response invalidEntity(ConstraintViolationException e){ _EL_   StringBuilder errorMessage=new StringBuilder(); _EL_   boolean firstPass=true; _EL_   for (  ConstraintViolation error : e.getConstraintViolations()) { _EL_     if (!firstPass) { _EL_       errorMessage.append(", "); _EL_     } _EL_     errorMessage.append(String.format("%s %s (was %s)",error.getPropertyPath(),error.getMessage(),error.getInvalidValue())); _EL_     firstPass=false; _EL_   } _EL_   ExternalException externalException=new ExternalException(ErrorCode.INVALID_ENTITY,errorMessage.toString(),null); _EL_   return externalException(externalException); _EL_ } _EL_ ', 'public void init(String prefix,java.net.URL url){ _EL_   try { _EL_     java.io.InputStream in=url.openStream(); _EL_     Properties props=new Properties(); _EL_     props.load(in); _EL_     init(getLayers(prefix,props)); _EL_   } _EL_  catch (  java.net.MalformedURLException murle) { _EL_     logger.warning("LayerHandler.init(URL): " + url + " is not a valid URL"); _EL_   } _EL_ catch (  java.io.IOException e) { _EL_     logger.warning("LayerHandler.init(URL): Caught an IOException"); _EL_   } _EL_ } _EL_ ', 'public Node selectFirst(String query){ _EL_   List<Node> selectedNodes=select(query); _EL_   if (selectedNodes.isEmpty()) { _EL_     return null; _EL_   } _EL_   return selectedNodes.get(0); _EL_ } _EL_ ', 'public static String[] stringArrayFromProperties(Properties p,String propName,String tok){ _EL_   String[] ret=null; _EL_   String raw=p.getProperty(propName); _EL_   if (raw != null && raw.length() > 0) { _EL_     try { _EL_       StringTokenizer token=new StringTokenizer(raw,tok); _EL_       int numPaths=token.countTokens(); _EL_       ret=new String[numPaths]; _EL_       for (int i=0; i < numPaths; i++) { _EL_         ret[i]=token.nextToken(); _EL_       } _EL_       return ret; _EL_     } _EL_  catch (    java.util.NoSuchElementException e) { _EL_       e.printStackTrace(); _EL_     } _EL_   } _EL_   return ret; _EL_ } _EL_ ', 'private static int compareLocales(Locale primary,Locale other){ _EL_   final String lang=primary.getLanguage(); _EL_   if ((lang == null) || !lang.equals(other.getLanguage())) { _EL_     return 0; _EL_   } _EL_   final String country=primary.getCountry(); _EL_   if ((country == null) || !country.equals(other.getCountry())) { _EL_     return 1; _EL_   } _EL_   final String variant=primary.getVariant(); _EL_   if ((variant == null) || !variant.equals(other.getVariant())) { _EL_     return 2; _EL_   } _EL_   return 3; _EL_ } _EL_ ', 'public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){ _EL_   return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false; _EL_ } _EL_ ', 'public boolean equals(Object obj){ _EL_   if (obj instanceof MSort) { _EL_     MSort ms=(MSort)obj; _EL_     if (data == ms.data)     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static void endTransaction(final CConnection connection) throws SQLException { _EL_   endTransaction(connection.getConnection()); _EL_ } _EL_ ', 'public CCrossReferencesPanel(){ _EL_   super(new BorderLayout()); _EL_   m_table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); _EL_   add(new JScrollPane(m_table)); _EL_   m_table.addMouseListener(new InternalMouseListener()); _EL_ } _EL_ ', 'private void changeOpenAMDebugFolder(String newOpenAMDebugFolder){ _EL_   SystemPropertiesManager.initializeProperties(DebugConstants.CONFIG_DEBUG_DIRECTORY,newOpenAMDebugFolder); _EL_ } _EL_ ', 'protected String computeFullUrl(URL baseUrl,String link){ _EL_   if (link == null || link.length() == 0) { _EL_     return null; _EL_   } _EL_   if (!link.startsWith("http")) { _EL_     if (link.startsWith("/")) { _EL_       link=baseUrl.getProtocol() + "://" + baseUrl.getAuthority()+ link; _EL_     } _EL_  else { _EL_       if (link.contains(":")) { _EL_         return null; _EL_       } _EL_       String path=baseUrl.getPath(); _EL_       if (!path.endsWith("/")) { _EL_         int sep=path.lastIndexOf("/"); _EL_         String file=path.substring(sep + 1); _EL_         if (file.contains(".") || file.contains("?"))         path=path.substring(0,sep); _EL_       } _EL_       link=baseUrl.getProtocol() + "://" + baseUrl.getAuthority()+ path+ "/"+ link; _EL_     } _EL_   } _EL_   link=normalizeUrlEnding(link); _EL_   String l=link.toLowerCase(Locale.ROOT); _EL_   if (l.endsWith(".jpg") || l.endsWith(".jpeg") || l.endsWith(".png")|| l.endsWith(".gif")) { _EL_     return null; _EL_   } _EL_   return link; _EL_ } _EL_ ', 'private void loadManifest(){ _EL_   if (_isManifestRead)   return; _EL_ synchronized (this) { _EL_     if (_isManifestRead)     return; _EL_     try { _EL_       _manifest=_jarPath.getManifest(); _EL_       if (_manifest == null)       return; _EL_       Attributes attr=_manifest.getMainAttributes(); _EL_       if (attr != null)       addManifestPackage("",attr); _EL_       Map<String,Attributes> entries=_manifest.getEntries(); _EL_       for (      Map.Entry<String,Attributes> entry : entries.entrySet()) { _EL_         String pkg=entry.getKey(); _EL_         attr=entry.getValue(); _EL_         if (attr == null)         continue; _EL_         addManifestPackage(pkg,attr); _EL_       } _EL_     } _EL_  catch (    IOException e) { _EL_       log.log(Level.WARNING,e.toString(),e); _EL_     } _EL_  finally { _EL_       _isManifestRead=true; _EL_     } _EL_   } _EL_ } _EL_ ', 'public ReferenceBinding[] convertToRawTypes(ReferenceBinding[] originalTypes,boolean forceErasure,boolean forceRawEnclosingType){ _EL_   if (originalTypes == null)   return null; _EL_   ReferenceBinding[] convertedTypes=originalTypes; _EL_   for (int i=0, length=originalTypes.length; i < length; i++) { _EL_     ReferenceBinding originalType=originalTypes[i]; _EL_     ReferenceBinding convertedType=(ReferenceBinding)convertToRawType(forceErasure ? originalType.erasure() : originalType,forceRawEnclosingType); _EL_     if (convertedType != originalType) { _EL_       if (convertedTypes == originalTypes) { _EL_         System.arraycopy(originalTypes,0,convertedTypes=new ReferenceBinding[length],0,i); _EL_       } _EL_       convertedTypes[i]=convertedType; _EL_     } _EL_  else     if (convertedTypes != originalTypes) { _EL_       convertedTypes[i]=originalType; _EL_     } _EL_   } _EL_   return convertedTypes; _EL_ } _EL_ ', 'public void addColumn(int idx,Column column){ _EL_   if (column != null) { _EL_     columns.add(idx,column); _EL_   } _EL_ } _EL_ ', 'public void readData(DataInput din) throws IOException { _EL_   reference=din.readUnsignedShort(); _EL_   andMask=din.readUnsignedShort(); _EL_   orMask=din.readUnsignedShort(); _EL_ } _EL_ ', 'boolean removeDisplay(Display display){ _EL_   return m_displays.remove(display); _EL_ } _EL_ ', 'public double nextGaussian(){ _EL_   if (mHaveNextNextGaussian) { _EL_     mHaveNextNextGaussian=false; _EL_     return mNextNextGaussian; _EL_   } _EL_  else { _EL_     double v1, v2, s; _EL_     do { _EL_       v1=2 * nextDouble() - 1; _EL_       v2=2 * nextDouble() - 1; _EL_       s=v1 * v1 + v2 * v2; _EL_     } _EL_  while (s >= 1 || s == 0); _EL_     final double multiplier=StrictMath.sqrt(-2 * StrictMath.log(s) / s); _EL_     mNextNextGaussian=v2 * multiplier; _EL_     mHaveNextNextGaussian=true; _EL_     return v1 * multiplier; _EL_   } _EL_ } _EL_ ', 'private void updateContactHeaderPort(int localPort,SIPMessage message){ _EL_   if (message != null && message.getContactHeader() != null) { _EL_     ContactHeader contactHeader=message.getContactHeader(); _EL_     Address contactAddress=contactHeader.getAddress(); _EL_     contactAddress.setPort(localPort); _EL_   } _EL_ } _EL_ ', 'public static AndroidHttpClient newInstance(String userAgent){ _EL_   return newInstance(userAgent,null); _EL_ } _EL_ ', '@Nullable GridCacheMvccCandidate addEntry(GridLocalCacheEntry entry) throws GridCacheEntryRemovedException { _EL_   GridCacheMvccCandidate c=entry.addLocal(threadId,lockVer,null,null,timeout,!inTx(),inTx(),implicitSingle(),true); _EL_   entries.add(entry); _EL_   if (c == null && timeout < 0) { _EL_     if (log.isDebugEnabled())     log.debug("Failed to acquire lock with negative timeout: " + entry); _EL_     onFailed(); _EL_     return null; _EL_   } _EL_   if (c != null) { _EL_     entry.readyLocal(c); _EL_   } _EL_   return c; _EL_ } _EL_ ', '@Override public void visitVertex(StreetRouter.State state){ _EL_   Integer edgeIdx=state.backEdge; _EL_   if (!(edgeIdx == null || edgeIdx == -1)) { _EL_     EdgeStore.Edge edge=edgeStore.getCursor(edgeIdx); _EL_     GeoJsonFeature feature=new GeoJsonFeature(edge.getGeometry()); _EL_     feature.addProperty("weight",state.weight); _EL_     feature.addProperty("mode",state.streetMode); _EL_     feature.addProperty("backEdge",state.backEdge); _EL_     features.add(feature); _EL_   } _EL_ } _EL_ ', 'public static void deleteFileOrLog(File file){ _EL_   if (!file.delete()) { _EL_     logger.warn(FAILED_DELETING_FILE + file.getPath()); _EL_   } _EL_ } _EL_ ', 'public synchronized void remove(int index){ _EL_   super.remove(index); _EL_   mMaxValues.remove(index); _EL_ } _EL_ ', 'public GitlabGroupMember addGroupMember(GitlabGroup group,GitlabUser user,GitlabAccessLevel accessLevel) throws IOException { _EL_   return addGroupMember(group.getId(),user.getId(),accessLevel); _EL_ } _EL_ ', 'protected Logger(String name,String resourceBundleName){ _EL_   super(name,resourceBundleName); _EL_ } _EL_ ', '@Override public void increment(double coord,short val){ _EL_   int bin=getBinNr(coord); _EL_   if (bin < 0) { _EL_     if (size - bin > data.length) { _EL_       short[] tmpdata=new short[growSize(data.length,size - bin)]; _EL_       System.arraycopy(data,0,tmpdata,-bin,size); _EL_       data=tmpdata; _EL_     } _EL_  else { _EL_       System.arraycopy(data,0,data,-bin,size); _EL_       Arrays.fill(data,0,-bin,(short)0); _EL_     } _EL_     data[0]=val; _EL_     assert (data.length >= size - bin); _EL_     offset-=bin; _EL_     size-=bin; _EL_   } _EL_  else   if (bin >= data.length) { _EL_     short[] tmpdata=new short[growSize(data.length,bin + 1)]; _EL_     System.arraycopy(data,0,tmpdata,0,size); _EL_     tmpdata[bin]=val; _EL_     data=tmpdata; _EL_     size=bin + 1; _EL_     max=Double.MAX_VALUE; _EL_   } _EL_  else { _EL_     if (bin >= size) { _EL_       size=bin + 1; _EL_     } _EL_     data[bin]+=val; _EL_   } _EL_ } _EL_ ', 'default Document putAll(Map<? extends CharSequence,Object> fields){ _EL_   if (fields != null) { _EL_     for (    Map.Entry<? extends CharSequence,Object> entry : fields.entrySet()) { _EL_       set(entry.getKey(),entry.getValue()); _EL_     } _EL_   } _EL_   return this; _EL_ } _EL_ ', 'private boolean containsIgnoreCase(List<String> stringlist,String match){ _EL_   for (  String s : stringlist) { _EL_     if (s.equalsIgnoreCase(match)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static double computeMAD(double[] x,double median){ _EL_   for (int i=0; i < x.length; i++) { _EL_     x[i]=Math.abs(x[i] - median); _EL_   } _EL_   double mad=QuickSelect.median(x); _EL_   if (!(mad > 0.)) { _EL_     double min=Double.POSITIVE_INFINITY; _EL_     for (    double xi : x) { _EL_       if (xi > 0. && xi < min) { _EL_         min=xi; _EL_       } _EL_     } _EL_     if (min < Double.POSITIVE_INFINITY) { _EL_       mad=min; _EL_     } _EL_  else { _EL_       mad=1.0; _EL_     } _EL_   } _EL_   return mad; _EL_ } _EL_ ', 'public static void sessionStop(){ _EL_   if (mProcess == null)   return; _EL_   mProcess.destroy(); _EL_   mProcess=null; _EL_ } _EL_ ', 'public static void keepAlive(final boolean keepAlive){ _EL_   setProperty("http.keepAlive",Boolean.toString(keepAlive)); _EL_ } _EL_ ', 'public static Request newUploadVideoRequest(Session session,File file,Callback callback) throws FileNotFoundException { _EL_   ParcelFileDescriptor descriptor=ParcelFileDescriptor.open(file,ParcelFileDescriptor.MODE_READ_ONLY); _EL_   Bundle parameters=new Bundle(1); _EL_   parameters.putParcelable(file.getName(),descriptor); _EL_   return new Request(session,MY_VIDEOS,parameters,HttpMethod.POST,callback); _EL_ } _EL_ ', 'private static byte[] readCheckedBytes(byte[] buffer,int dataSize) throws InvalidProtocolBufferNanoException { _EL_   CheckedMessage wrapper=new CheckedMessage(); _EL_   MessageNano.mergeFrom(wrapper,buffer,0,dataSize); _EL_   CRC32 checksum=new CRC32(); _EL_   checksum.update(wrapper.payload); _EL_   if (wrapper.checksum != checksum.getValue()) { _EL_     throw new InvalidProtocolBufferNanoException("checksum does not match"); _EL_   } _EL_   return wrapper.payload; _EL_ } _EL_ ', 'private void validateWill(String dest,Object payload){ _EL_   if ((dest == null) || (payload == null)) { _EL_     throw new IllegalArgumentException(); _EL_   } _EL_   MqttTopic.validate(dest,false); _EL_ } _EL_ ', 'public BerInputStream(InputStream in,int initialSize) throws IOException { _EL_   this.in=in; _EL_   buffer=new byte[initialSize]; _EL_   next(); _EL_   if (length != INDEFINIT_LENGTH) { _EL_     if (buffer.length < (length + offset)) { _EL_       byte[] newBuffer=new byte[length + offset]; _EL_       System.arraycopy(buffer,0,newBuffer,0,offset); _EL_       buffer=newBuffer; _EL_     } _EL_   } _EL_  else { _EL_     isIndefinedLength=true; _EL_     throw new ASN1Exception("Decoding indefinite length encoding is not supported"); _EL_   } _EL_ } _EL_ ', 'private Member nextMember(Member.Type type){ _EL_   return new TestMember(type,new Address("localhost",++port),new Address("localhost",port + 1000)); _EL_ } _EL_ ', 'public void addToBeLoaded(final String url){ _EL_   if (toBeLoaded == null) { _EL_     toBeLoaded=new ArrayList<String>(); _EL_   } _EL_   if (StringUtils.isNotBlank(url)) { _EL_     toBeLoaded.add(url); _EL_   } _EL_ } _EL_ ', 'default Document putAll(Iterator<Field> fields){ _EL_   while (fields.hasNext()) { _EL_     Field field=fields.next(); _EL_     setValue(field.getName(),field.getValue()); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public AppraiseGitReviewClient(Repository repo){ _EL_   this.repo=repo; _EL_   this.author=new PersonIdent(repo); _EL_ } _EL_ ', 'protected SOAPRequest createSOAPRequest(final String methodName,final SOAPMethodRequestWriter requestWriter){ _EL_   final PostMethod method=new PostMethod(endpoint.toString()); _EL_   method.setContentChunked(false); _EL_   setRequestHeaders(method,methodName); _EL_   final SOAPRequestEntity requestEntity=buildRequestEntity(methodName,requestWriter); _EL_   requestEntity.setSOAPHeaderProvider(soapHeaderProvider); _EL_   final BufferedSOAPRequestEntity bufferedEntity=new BufferedSOAPRequestEntity(requestEntity); _EL_   method.setRequestEntity(bufferedEntity); _EL_   return new SOAPRequest(method,requestEntity); _EL_ } _EL_ ', 'public String toURI(){ _EL_   CharArrayBuffer buffer=new CharArrayBuffer(32); _EL_   buffer.append(this.schemeName); _EL_   buffer.append("://"); _EL_   buffer.append(this.hostname); _EL_   if (this.port != -1) { _EL_     buffer.append(\':\'); _EL_     buffer.append(Integer.toString(this.port)); _EL_   } _EL_   return buffer.toString(); _EL_ } _EL_ ', 'public static boolean inTargetDir(File file){ _EL_   return inTargetDir(file.toPath()); _EL_ } _EL_ ', 'public final boolean skipAny(char c,CharSequence csq){ _EL_   int i=index; _EL_   int n=csq.length(); _EL_   for (; (i < n) && (csq.charAt(i) == c); i++) { _EL_   } _EL_   if (i == index)   return false; _EL_   index=i; _EL_   return true; _EL_ } _EL_ ', 'private void generateUniformIntegerExamples(Instances format,int numInstances,SubspaceClusterDefinition cl,String cName){ _EL_   Instance example=null; _EL_   int numAtts=m_NumAttributes; _EL_   if (getClassFlag()) { _EL_     numAtts++; _EL_   } _EL_   example=new DenseInstance(numAtts); _EL_   example.setDataset(format); _EL_   boolean[] attributes=cl.getAttributes(); _EL_   double[] minValue=cl.getMinValue(); _EL_   double[] maxValue=cl.getMaxValue(); _EL_   int[] minInt=new int[minValue.length]; _EL_   int[] maxInt=new int[maxValue.length]; _EL_   int[] intValue=new int[maxValue.length]; _EL_   int[] numInt=new int[minValue.length]; _EL_   int num=1; _EL_   for (int i=0; i < minValue.length; i++) { _EL_     minInt[i]=(int)Math.ceil(minValue[i]); _EL_     maxInt[i]=(int)Math.floor(maxValue[i]); _EL_     numInt[i]=(maxInt[i] - minInt[i] + 1); _EL_     num=num * numInt[i]; _EL_   } _EL_   int numEach=numInstances / num; _EL_   int rest=numInstances - numEach * num; _EL_   for (int i=0; i < m_NumAttributes; i++) { _EL_     if (attributes[i]) { _EL_       example.setValue(i,minInt[i]); _EL_       intValue[i]=minInt[i]; _EL_     } _EL_  else { _EL_       example.setMissing(i); _EL_     } _EL_   } _EL_   if (getClassFlag()) { _EL_     example.setClassValue(cName); _EL_   } _EL_   int added=0; _EL_   int attr=0; _EL_   do { _EL_     for (int k=0; k < numEach; k++) { _EL_       format.add(example); _EL_       example=(Instance)example.copy(); _EL_       added++; _EL_     } _EL_     if (rest > 0) { _EL_       format.add(example); _EL_       example=(Instance)example.copy(); _EL_       added++; _EL_       rest--; _EL_     } _EL_     if (added >= numInstances) { _EL_       break; _EL_     } _EL_     boolean done=false; _EL_     do { _EL_       if (attributes[attr] && (intValue[attr] + 1 <= maxInt[attr])) { _EL_         intValue[attr]++; _EL_         done=true; _EL_       } _EL_  else { _EL_         attr++; _EL_       } _EL_     } _EL_  while (!done); _EL_     example.setValue(attr,intValue[attr]); _EL_   } _EL_  while (added < numInstances); _EL_ } _EL_ ', 'public synchronized boolean removeAll(Collection c){ _EL_   Object[] elements=getArray(); _EL_   int len=elements.length; _EL_   if (len != 0) { _EL_     int newlen=0; _EL_     Object[] temp=new Object[len]; _EL_     for (int i=0; i < len; ++i) { _EL_       Object element=elements[i]; _EL_       if (!c.contains(element))       temp[newlen++]=element; _EL_     } _EL_     if (newlen != len) { _EL_       setArray(copyOfRange(temp,0,newlen,Object[].class)); _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public Phone createPhone(String value){ _EL_   PhoneField phoneImpl=new PhoneField(); _EL_   try { _EL_     phoneImpl.setValue(value); _EL_   } _EL_  catch (  SdpException s) { _EL_     s.printStackTrace(); _EL_   } _EL_   return phoneImpl; _EL_ } _EL_ ', 'private ListResourceBundle loadResourceBundle(String resourceBundle) throws MissingResourceException { _EL_   m_resourceBundleName=resourceBundle; _EL_   Locale locale=getLocale(); _EL_   ListResourceBundle lrb; _EL_   try { _EL_     ResourceBundle rb=ResourceBundle.getBundle(m_resourceBundleName,locale); _EL_     lrb=(ListResourceBundle)rb; _EL_   } _EL_  catch (  MissingResourceException e) { _EL_     try { _EL_       lrb=(ListResourceBundle)ResourceBundle.getBundle(m_resourceBundleName,new Locale("en","US")); _EL_     } _EL_  catch (    MissingResourceException e2) { _EL_       throw new MissingResourceException("Could not load any resource bundles." + m_resourceBundleName,m_resourceBundleName,""); _EL_     } _EL_   } _EL_   m_resourceBundle=lrb; _EL_   return lrb; _EL_ } _EL_ ', 'private String convertToHtml(final String string){ _EL_   return "<pre><br/>" + string.replaceAll("\\n","<br/>") + "<br/></pre>"; _EL_ } _EL_ ', 'private synchronized void addLock(FileLock lock) throws OverlappingFileLockException { _EL_   long lockEnd=lock.position() + lock.size(); _EL_   for (  FileLock existingLock : locks) { _EL_     if (existingLock.position() > lockEnd) { _EL_       break; _EL_     } _EL_     if (existingLock.overlaps(lock.position(),lock.size())) { _EL_       throw new OverlappingFileLockException(); _EL_     } _EL_   } _EL_   locks.add(lock); _EL_ } _EL_ ', 'public static void UF7(double[] x,double[] f,int nx){ _EL_   int count1=0; _EL_   int count2=0; _EL_   double sum1=0.0; _EL_   double sum2=0.0; _EL_   double yj; _EL_   for (int j=2; j <= nx; j++) { _EL_     yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx); _EL_     if (j % 2 == 0) { _EL_       sum2+=yj * yj; _EL_       count2++; _EL_     } _EL_  else { _EL_       sum1+=yj * yj; _EL_       count1++; _EL_     } _EL_   } _EL_   yj=Math.pow(x[0],0.2); _EL_   f[0]=yj + 2.0 * sum1 / (double)count1; _EL_   f[1]=1.0 - yj + 2.0 * sum2 / (double)count2; _EL_ } _EL_ ', 'private void reloadModelWithNewValue(final Long newValue){ _EL_   final long newValueAsPrimitive=newValue == null ? getModelUpdatePeriod() : newValue; _EL_   for (  final PropertyChangeListener listener : modelUpdatePeriodListeners) { _EL_     final PropertyChangeEvent event=new PropertyChangeEvent(this,"model",getModelUpdatePeriod(),newValueAsPrimitive); _EL_     listener.propertyChange(event); _EL_   } _EL_ } _EL_ ', 'public static final String moveToUCIString(Move m){ _EL_   String ret=squareToString(m.from); _EL_   ret+=squareToString(m.to); _EL_ switch (m.promoteTo) { _EL_ case Piece.WQUEEN: _EL_ case Piece.BQUEEN: _EL_     ret+="q"; _EL_   break; _EL_ case Piece.WROOK: _EL_ case Piece.BROOK: _EL_ ret+="r"; _EL_ break; _EL_ case Piece.WBISHOP: _EL_ case Piece.BBISHOP: _EL_ ret+="b"; _EL_ break; _EL_ case Piece.WKNIGHT: _EL_ case Piece.BKNIGHT: _EL_ ret+="n"; _EL_ break; _EL_ default : _EL_ break; _EL_ } _EL_ return ret; _EL_ } _EL_ ', 'public Image createAcceleratedImage(Component target,int width,int height){ _EL_   ColorModel model=getColorModel(Transparency.OPAQUE); _EL_   WritableRaster wr=model.createCompatibleWritableRaster(width,height); _EL_   return new OffScreenImage(target,model,wr,model.isAlphaPremultiplied()); _EL_ } _EL_ ', 'public void displayState(){ _EL_   PrintWriter xout=context.get(Log.outKey); _EL_   xout.println("File Object History : " + fileObjectHistory); _EL_   xout.println("Open Type Names     : " + openTypeNames); _EL_   xout.println("Gen. Src Names      : " + generatedSourceNames); _EL_   xout.println("Gen. Cls Names      : " + generatedClasses.keySet()); _EL_   xout.println("Agg. Gen. Src Names : " + aggregateGeneratedSourceNames); _EL_   xout.println("Agg. Gen. Cls Names : " + aggregateGeneratedClassNames); _EL_ } _EL_ ', 'public boolean isFlat(){ _EL_   return TYPE_FLAT.equals(getType()); _EL_ } _EL_ ', '@Deprecated private List<CharSequence> buildLimitedNetworksList(){ _EL_   final Context context=getActivity(); _EL_   final ArrayList<CharSequence> limited=Lists.newArrayList(); _EL_   if (hasSubscription(context)) { _EL_     final String subscriberId=getActiveSubscriberId(context); _EL_     if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobileAll(subscriberId))) { _EL_       limited.add(getText(R.string.data_usage_list_mobile)); _EL_     } _EL_     if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile3gLower(subscriberId))) { _EL_       limited.add(getText(R.string.data_usage_tab_3g)); _EL_     } _EL_     if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile4g(subscriberId))) { _EL_       limited.add(getText(R.string.data_usage_tab_4g)); _EL_     } _EL_   } _EL_   if (mPolicyEditor.hasLimitedPolicy(buildTemplateWifiWildcard())) { _EL_     limited.add(getText(R.string.data_usage_tab_wifi)); _EL_   } _EL_   if (mPolicyEditor.hasLimitedPolicy(buildTemplateEthernet())) { _EL_     limited.add(getText(R.string.data_usage_tab_ethernet)); _EL_   } _EL_   return limited; _EL_ } _EL_ ', 'public synchronized void addAllSeries(List<XYSeries> series){ _EL_   mSeries.addAll(series); _EL_ } _EL_ ', '@Override public int compare(NewSplitEmittedTerm term1,NewSplitEmittedTerm term2){ _EL_   return term1.compareTo(term2); _EL_ } _EL_ ', 'public AABB merge(AABB other){ _EL_   minX=Math.min(minX,other.minX); _EL_   maxX=Math.max(maxX,other.maxX); _EL_   minY=Math.min(minY,other.minY); _EL_   maxY=Math.max(maxY,other.maxY); _EL_   minZ=Math.min(minZ,other.minZ); _EL_   maxZ=Math.max(maxZ,other.maxZ); _EL_   return this; _EL_ } _EL_ ', 'public static String generateAutoTag(int stackOffset){ _EL_   StackTraceElement[] currentStack=getCurrentStack(); _EL_   StackTraceElement element=currentStack[stackOffset]; _EL_   String className=element.getClassName(); _EL_   String pkgPath[]=className.split("\\\\."); _EL_   if (pkgPath.length > 0) { _EL_     className=pkgPath[pkgPath.length - 1]; _EL_   } _EL_   StringBuilder sbInnerClass=new StringBuilder(); _EL_   int index; _EL_   String strLoop=className; _EL_   while ((index=strLoop.lastIndexOf("$")) != -1) { _EL_     String piece=strLoop.substring(index + 1); _EL_     sbInnerClass.insert(0,piece); _EL_     if (!piece.matches("[0-9$]+")) { _EL_       break; _EL_     } _EL_     sbInnerClass.insert(0,"$"); _EL_     strLoop=strLoop.substring(0,index); _EL_   } _EL_   if (sbInnerClass.length() > 0 && sbInnerClass.charAt(0) == \'$\') { _EL_     sbInnerClass.deleteCharAt(0); _EL_   } _EL_   String innerClassName=sbInnerClass.toString(); _EL_   if (TextUtils.isDigitsOnly(innerClassName)) { _EL_     innerClassName=null; _EL_   } _EL_   return TextUtils.isEmpty(innerClassName) ? className : innerClassName; _EL_ } _EL_ ', 'public void flushPending() throws SAXException { _EL_   if (m_needToCallStartDocument) { _EL_     startDocumentInternal(); _EL_     m_needToCallStartDocument=false; _EL_   } _EL_   if (m_elemContext.m_startTagOpen) { _EL_     closeStartTag(); _EL_     m_elemContext.m_startTagOpen=false; _EL_   } _EL_   if (m_cdataTagOpen) { _EL_     closeCDATA(); _EL_     m_cdataTagOpen=false; _EL_   } _EL_   if (m_writer != null) { _EL_     try { _EL_       m_writer.flush(); _EL_     } _EL_  catch (    IOException e) { _EL_     } _EL_   } _EL_ } _EL_ ', '@PostConstruct public void init(){ _EL_   configurationViews.add(defaultDistributionSetTypeLayout); _EL_   configurationViews.add(authenticationConfigurationView); _EL_   configurationViews.add(pollingConfigurationView); _EL_ } _EL_ ', 'public ExtendedType(int nodetype,String namespace,String localName){ _EL_   this.nodetype=nodetype; _EL_   this.namespace=namespace; _EL_   this.localName=localName; _EL_   this.hash=nodetype + namespace.hashCode() + localName.hashCode(); _EL_ } _EL_ ', 'private static void validateNewAddition(Vector paths,ExpressionOwner owner,LocPathIterator path) throws RuntimeException { _EL_   assertion(owner.getExpression() == path,"owner.getExpression() != path!!!"); _EL_   int n=paths.size(); _EL_   for (int i=0; i < n; i++) { _EL_     ExpressionOwner ew=(ExpressionOwner)paths.elementAt(i); _EL_     assertion(ew != owner,"duplicate owner on the list!!!"); _EL_     assertion(ew.getExpression() != path,"duplicate expression on the list!!!"); _EL_   } _EL_ } _EL_ ', '@Override public void start(){ _EL_   for (int i=0; i < threadCount; ++i) { _EL_     Set<SystemStreamPartition> threadSsps=new HashSet<SystemStreamPartition>(); _EL_     for (    SystemStreamPartition ssp : ssps) { _EL_       if (Math.abs(ssp.hashCode()) % threadCount == i) { _EL_         threadSsps.add(ssp); _EL_       } _EL_     } _EL_     Thread thread=new Thread(new MockSystemConsumerRunnable(threadSsps),"MockSystemConsumer-" + i); _EL_     thread.setDaemon(true); _EL_     threads.add(thread); _EL_     thread.start(); _EL_   } _EL_ } _EL_ ', 'private List<double[]> initializeWeightsND(){ _EL_   int N=50; _EL_   List<double[]> candidates=new ArrayList<double[]>(numberOfPoints * N); _EL_   for (int i=0; i < numberOfPoints * N; i++) { _EL_     double[] weight=new double[numberOfObjectives]; _EL_     for (int j=0; j < numberOfObjectives; j++) { _EL_       weight[j]=PRNG.nextDouble(); _EL_     } _EL_     double sum=StatUtils.sum(weight); _EL_     for (int j=0; j < numberOfObjectives; j++) { _EL_       weight[j]/=sum; _EL_     } _EL_     candidates.add(weight); _EL_   } _EL_   List<double[]> weights=new ArrayList<double[]>(numberOfPoints * N); _EL_   for (int i=0; i < numberOfObjectives; i++) { _EL_     double[] weight=new double[numberOfObjectives]; _EL_     weight[i]=1.0; _EL_     weights.add(weight); _EL_   } _EL_   while (weights.size() < numberOfPoints) { _EL_     double[] weight=null; _EL_     double distance=Double.NEGATIVE_INFINITY; _EL_     for (int i=0; i < candidates.size(); i++) { _EL_       double d=Double.POSITIVE_INFINITY; _EL_       for (int j=0; j < weights.size(); j++) { _EL_         d=Math.min(d,MathArrays.distance(candidates.get(i),weights.get(j))); _EL_       } _EL_       if (d > distance) { _EL_         weight=candidates.get(i); _EL_         distance=d; _EL_       } _EL_     } _EL_     weights.add(weight); _EL_     candidates.remove(weight); _EL_   } _EL_   return weights; _EL_ } _EL_ ', 'public void undo(){ _EL_   try { _EL_     if (undoManager != null)     undoManager.undoOrRedo(); _EL_   } _EL_  catch (  CannotUndoException ignored) { _EL_   } _EL_ catch (  CannotRedoException ignored) { _EL_   } _EL_ } _EL_ ', 'public void removeColumn(Column column){ _EL_   if (column != null) { _EL_     columns.remove(column); _EL_   } _EL_ } _EL_ ', 'public String info(){ _EL_   StringBuilder sb=new StringBuilder("Report: size: " + tableSize + ", elements: "+ elements+ ", loadFactor: "+ loadFactor+ ", threshold: "+ threshold); _EL_   sb.append(", empty bins:" + numEmpty); _EL_   int size=0; _EL_   int min=elements; _EL_   int max=-1; _EL_   for (int i=0; i < tableSize; i++) { _EL_     LinkedList<String> list=bins[i]; _EL_     if (list != null) { _EL_       int sz=list.size(); _EL_       size+=sz; _EL_       if (sz < min) { _EL_         min=sz; _EL_       } _EL_       if (sz > max) { _EL_         max=sz; _EL_       } _EL_     } _EL_   } _EL_   float avg=size; _EL_   int base=(tableSize - numEmpty); _EL_   if (base == 0) { _EL_     sb.append(", average:0"); _EL_     sb.append(", minListSize:0"); _EL_     sb.append(", maxListSize:0"); _EL_   } _EL_  else { _EL_     avg/=base; _EL_     sb.append(", average:" + avg); _EL_     sb.append(", minListSize:" + min); _EL_     sb.append(", maxListSize:" + max); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'public boolean peekSample(MediaCodec.BufferInfo out_bufferInfo){ _EL_   update(); _EL_   boolean result=false; _EL_   if (!mAvailableOutputBuffers.isEmpty()) { _EL_     int index=mAvailableOutputBuffers.peek(); _EL_     MediaCodec.BufferInfo info=mOutputBufferInfo[index]; _EL_     out_bufferInfo.set(info.offset,info.size,info.presentationTimeUs,info.flags); _EL_     result=true; _EL_   } _EL_   return result; _EL_ } _EL_ ', '@Override public AbstractScannedResult scanBlocklet(BlocksChunkHolder blocksChunkHolder) throws QueryExecutionException { _EL_   try { _EL_     fillScannedResult(blocksChunkHolder); _EL_   } _EL_  catch (  FilterUnsupportedException e) { _EL_     throw new QueryExecutionException(e.getMessage()); _EL_   } _EL_   return scannedResult; _EL_ } _EL_ ', '@Override public int hashCode(){ _EL_   return subconditions.hashCode() - operator.hashCode(); _EL_ } _EL_ ', 'public AnnotationDrawer(final AnnotationsModel model,final ProcessRendererModel rendererModel){ _EL_   this.model=model; _EL_   this.rendererModel=rendererModel; _EL_   this.displayCache=new HashMap<>(); _EL_   this.cachedID=new HashMap<>(); _EL_   pane=new JEditorPane("text/html",""); _EL_   pane.setBorder(null); _EL_   pane.setOpaque(false); _EL_ } _EL_ ', '@Override public void insertString(final int offs,final String str,final AttributeSet attr){ _EL_   if (offs < 0) { _EL_     return; _EL_   } _EL_   if (str.length() > 1) { _EL_     int i; _EL_     for (i=0; i < str.length(); i++) { _EL_       if (str.charAt(i) == \'\\n\') { _EL_         remainingTextString=str.substring(i + 1); _EL_         remainingTextAttr=attr; _EL_         inputKeyListener.keyPressed(new KeyEvent(new Container(),KeyEvent.KEY_PRESSED,0,0,KeyEvent.VK_ENTER,\'\\n\')); _EL_         break; _EL_       } _EL_  else { _EL_         insertChar(offs + i,"" + str.charAt(i)); _EL_       } _EL_     } _EL_   } _EL_  else   if (str.length() == 1) { _EL_     insertChar(offs,str); _EL_   } _EL_ } _EL_ ', 'protected int readCodePoint() throws IOException { _EL_   int next=reader.read(); _EL_   if (Character.isHighSurrogate((char)next)) { _EL_     next=Character.toCodePoint((char)next,(char)reader.read()); _EL_   } _EL_   return next; _EL_ } _EL_ ', 'public static int putInt(byte[] bytes,int offset,int val){ _EL_   if (littleEndian) { _EL_     val=Integer.reverseBytes(val); _EL_   } _EL_   theUnsafe.putInt(bytes,offset + BYTE_ARRAY_BASE_OFFSET,val); _EL_   return offset + Bytes.SIZEOF_INT; _EL_ } _EL_ ', 'public Item(Drawable symbol,String labelText,Font font){ _EL_   double fontSize=font.getSize2D(); _EL_   setLayout(new EdgeLayout(fontSize,0.0)); _EL_   this.symbol=symbol; _EL_   add(symbol,Location.WEST); _EL_   label=new Label(labelText); _EL_   label.setFont(font); _EL_   label.setAlignmentX(0.0); _EL_   label.setAlignmentY(0.5); _EL_   add(label,Location.CENTER); _EL_ } _EL_ ', 'public int consume(){ _EL_   int consumedAmount; _EL_   if (Math.abs(left) < Math.abs(getRegen())) { _EL_     consumedAmount=left; _EL_     left=0; _EL_   } _EL_  else { _EL_     consumedAmount=getRegen(); _EL_     left-=getRegen(); _EL_   } _EL_   return consumedAmount; _EL_ } _EL_ ', 'private Delegate delegate() throws HadoopIgfsCommunicationException { _EL_   Exception errShmem=null; _EL_   Exception errTcp=null; _EL_   Delegate curDelegate=delegateRef.get(); _EL_   if (curDelegate != null)   return curDelegate; _EL_   boolean skipInProc=parameter(conf,PARAM_IGFS_ENDPOINT_NO_EMBED,authority,false); _EL_   if (!skipInProc) { _EL_     IgfsEx igfs=getIgfsEx(endpoint.grid(),endpoint.igfs()); _EL_     if (igfs != null) { _EL_       HadoopIgfsEx hadoop=null; _EL_       try { _EL_         hadoop=new HadoopIgfsInProc(igfs,log,userName); _EL_         curDelegate=new Delegate(hadoop,hadoop.handshake(logDir)); _EL_       } _EL_  catch (      IOException|IgniteCheckedException e) { _EL_         if (e instanceof HadoopIgfsCommunicationException)         if (hadoop != null)         hadoop.close(true); _EL_         if (log.isDebugEnabled())         log.debug("Failed to connect to in-process IGFS, fallback to IPC mode.",e); _EL_       } _EL_     } _EL_   } _EL_   boolean skipLocShmem=parameter(conf,PARAM_IGFS_ENDPOINT_NO_LOCAL_SHMEM,authority,false); _EL_   if (curDelegate == null && !skipLocShmem && !U.isWindows()) { _EL_     HadoopIgfsEx hadoop=null; _EL_     try { _EL_       hadoop=new HadoopIgfsOutProc(endpoint.port(),endpoint.grid(),endpoint.igfs(),log,userName); _EL_       curDelegate=new Delegate(hadoop,hadoop.handshake(logDir)); _EL_     } _EL_  catch (    IOException|IgniteCheckedException e) { _EL_       if (e instanceof HadoopIgfsCommunicationException)       hadoop.close(true); _EL_       if (log.isDebugEnabled())       log.debug("Failed to connect to IGFS using shared memory [port=" + endpoint.port() + \']\',e); _EL_       errShmem=e; _EL_     } _EL_   } _EL_   boolean skipLocTcp=parameter(conf,PARAM_IGFS_ENDPOINT_NO_LOCAL_TCP,authority,false); _EL_   if (curDelegate == null && !skipLocTcp) { _EL_     HadoopIgfsEx hadoop=null; _EL_     try { _EL_       hadoop=new HadoopIgfsOutProc(LOCALHOST,endpoint.port(),endpoint.grid(),endpoint.igfs(),log,userName); _EL_       curDelegate=new Delegate(hadoop,hadoop.handshake(logDir)); _EL_     } _EL_  catch (    IOException|IgniteCheckedException e) { _EL_       if (e instanceof HadoopIgfsCommunicationException)       hadoop.close(true); _EL_       if (log.isDebugEnabled())       log.debug("Failed to connect to IGFS using TCP [host=" + endpoint.host() + ", port="+ endpoint.port()+ \']\',e); _EL_       errTcp=e; _EL_     } _EL_   } _EL_   if (curDelegate == null && (skipLocTcp || !F.eq(LOCALHOST,endpoint.host()))) { _EL_     HadoopIgfsEx hadoop=null; _EL_     try { _EL_       hadoop=new HadoopIgfsOutProc(endpoint.host(),endpoint.port(),endpoint.grid(),endpoint.igfs(),log,userName); _EL_       curDelegate=new Delegate(hadoop,hadoop.handshake(logDir)); _EL_     } _EL_  catch (    IOException|IgniteCheckedException e) { _EL_       if (e instanceof HadoopIgfsCommunicationException)       hadoop.close(true); _EL_       if (log.isDebugEnabled())       log.debug("Failed to connect to IGFS using TCP [host=" + endpoint.host() + ", port="+ endpoint.port()+ \']\',e); _EL_       errTcp=e; _EL_     } _EL_   } _EL_   if (curDelegate != null) { _EL_     if (!delegateRef.compareAndSet(null,curDelegate))     curDelegate.doomed=true; _EL_     return curDelegate; _EL_   } _EL_  else { _EL_     SB errMsg=new SB("Failed to connect to IGFS [endpoint=igfs://" + authority + ", attempts=["); _EL_     if (errShmem != null)     errMsg.a("[type=SHMEM, port=" + endpoint.port() + ", err="+ errShmem+ "], "); _EL_     errMsg.a("[type=TCP, host=" + endpoint.host() + ", port="+ endpoint.port()+ ", err="+ errTcp+ "]] "); _EL_     errMsg.a("(ensure that IGFS is running and have IPC endpoint enabled; ensure that " + "ignite-shmem-1.0.0.jar is in Hadoop classpath if you use shared memory endpoint)."); _EL_     throw new HadoopIgfsCommunicationException(errMsg.toString()); _EL_   } _EL_ } _EL_ ', 'public FromClause add(OuterJoinQualifier outerJoinQualifier){ _EL_   outerJoinQualifiers.add(outerJoinQualifier); _EL_   return this; _EL_ } _EL_ ', 'private static final File[] encode(String src){ _EL_   if (src == null || src.length() == 0) { _EL_     return (new File[0]); _EL_   } _EL_   StringTokenizer tokenizer=new StringTokenizer(src,";"); _EL_   File[] dirs=new File[tokenizer.countTokens()]; _EL_   for (int i=0; i < dirs.length; i++) { _EL_     dirs[i]=new File(tokenizer.nextToken()); _EL_   } _EL_   return dirs; _EL_ } _EL_ ', 'public E poll(long timeout,TimeUnit unit) throws InterruptedException { _EL_   long nanos=unit.toNanos(timeout); _EL_   final ReentrantLock lock=this.lock; _EL_   lock.lockInterruptibly(); _EL_   long t=now(); _EL_   TenantQueue.Item item=null; _EL_   try { _EL_     for (; ; ) { _EL_       TenantQueue q=nextQueue(t); _EL_       if (q == null) { _EL_         if (nanos <= 0)         return null; _EL_  else         nanos=available.awaitNanos(nanos); _EL_       } _EL_  else { _EL_         long delay=q.next - t; _EL_         if (delay <= 0) { _EL_           item=q.poll(t); _EL_           return item == null ? null : item.element; _EL_         } _EL_         if (nanos <= 0)         return null; _EL_         if (nanos < delay || leader != null)         nanos=available.awaitNanos(nanos); _EL_  else { _EL_           Thread thisThread=Thread.currentThread(); _EL_           leader=thisThread; _EL_           try { _EL_             long timeLeft=available.awaitNanos(delay); _EL_             nanos-=delay - timeLeft; _EL_           } _EL_   finally { _EL_             if (leader == thisThread)             leader=null; _EL_           } _EL_         } _EL_       } _EL_       t=System.nanoTime(); _EL_     } _EL_   } _EL_   finally { _EL_     if (leader == null && hasNext())     available.signal(); _EL_     lock.unlock(); _EL_     done(item,t); _EL_   } _EL_ } _EL_ ', 'public void addSwipeListener(SwipeListener listener){ _EL_   if (mListeners == null) { _EL_     mListeners=new ArrayList<SwipeListener>(); _EL_   } _EL_   mListeners.add(listener); _EL_ } _EL_ ', 'public int size(){ _EL_   return patterns.size(); _EL_ } _EL_ ', 'private SublimeBaseMenuItem addInternal(int pivotID,Positioned positioned,SublimeBaseMenuItem newItem){ _EL_   int newItemGroupId=newItem.getGroupId(); _EL_   checkExistenceOfGroup(newItemGroupId); _EL_   int pivotIndex=findItemIndex(pivotID); _EL_   SublimeBaseMenuItem pivot=mItems.get(pivotIndex); _EL_   if (newItem.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) { _EL_     checkIfGroupHeaderAlreadyExistsForGroup(newItemGroupId); _EL_     int index=findGroupIndex(newItemGroupId); _EL_     if (index >= 0) { _EL_       mItems.add(index,newItem); _EL_     } _EL_  else { _EL_       if (positioned == Positioned.BEFORE) { _EL_         if (pivot.getGroupId() == NO_GROUP_ID || pivot.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) { _EL_           mItems.add(pivotIndex,newItem); _EL_         } _EL_  else { _EL_           mItems.add(newItem); _EL_         } _EL_       } _EL_  else       if (positioned == Positioned.AFTER) { _EL_         if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(newItemGroupId)) { _EL_           mItems.add(pivotIndex + 1,newItem); _EL_         } _EL_  else { _EL_           mItems.add(newItem); _EL_         } _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     if (newItemGroupId != NO_GROUP_ID) { _EL_       int lastGroupIndex=findLastGroupIndex(newItemGroupId); _EL_       if (lastGroupIndex == mItems.size()) { _EL_         if (positioned == Positioned.BEFORE) { _EL_           if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findGroupIndex(pivot.getGroupId())) { _EL_             mItems.add(pivotIndex,newItem); _EL_           } _EL_  else { _EL_             mItems.add(newItem); _EL_           } _EL_         } _EL_  else         if (positioned == Positioned.AFTER) { _EL_           if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) { _EL_             mItems.add(pivotIndex + 1,newItem); _EL_           } _EL_  else { _EL_             mItems.add(newItem); _EL_           } _EL_         } _EL_       } _EL_  else { _EL_         if (newItemGroupId == pivot.getGroupId()) { _EL_           if (positioned == Positioned.BEFORE) { _EL_             if (pivot.getItemType() != SublimeBaseMenuItem.ItemType.GROUP_HEADER) { _EL_               mItems.add(pivotIndex,newItem); _EL_             } _EL_  else { _EL_               mItems.add(lastGroupIndex + 1,newItem); _EL_             } _EL_           } _EL_  else           if (positioned == Positioned.AFTER) { _EL_             mItems.add(pivotIndex + 1,newItem); _EL_           } _EL_         } _EL_  else { _EL_           mItems.add(lastGroupIndex + 1,newItem); _EL_         } _EL_       } _EL_     } _EL_  else { _EL_       if (positioned == Positioned.BEFORE) { _EL_         if (pivot.getGroupId() == NO_GROUP_ID || findGroupIndex(pivot.getGroupId()) == pivotIndex) { _EL_           mItems.add(pivotIndex,newItem); _EL_         } _EL_  else { _EL_           mItems.add(newItem); _EL_         } _EL_       } _EL_  else       if (positioned == Positioned.AFTER) { _EL_         if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) { _EL_           mItems.add(pivotIndex + 1,newItem); _EL_         } _EL_  else { _EL_           mItems.add(newItem); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   onItemsChanged(); _EL_   return newItem; _EL_ } _EL_ ', 'public static void writeUint8(OutputStream theOs,int theValue) throws IOException { _EL_   theOs.write(theValue); _EL_ } _EL_ ', '@Override public void addHeader(final String header,final String value){ _EL_   mHeadersOptions.add(new HeaderOption(header,value)); _EL_ } _EL_ ', 'public void store() throws SAMLException { _EL_   try { _EL_     keyProvider.store(); _EL_   } _EL_  catch (  KeyStoreException e) { _EL_     throw new SAMLException(e.getMessage()); _EL_   } _EL_ catch (  CertificateException e) { _EL_     throw new SAMLException(e.getMessage()); _EL_   } _EL_ catch (  NoSuchAlgorithmException e) { _EL_     throw new SAMLException(e.getMessage()); _EL_   } _EL_ catch (  IOException e) { _EL_     throw new SAMLException(e.getMessage()); _EL_   } _EL_ } _EL_ ', 'static void appendToPointerHierarchy(final BaseType type,final BaseType pointer){ _EL_   Preconditions.checkNotNull(type,"Error: type argument can not be null."); _EL_   Preconditions.checkNotNull(pointer,"Error: pointer argument can not be null."); _EL_   Preconditions.checkArgument(type != pointer,"Error: Can not establish pointer relation between identical types."); _EL_   Preconditions.checkArgument(pointer.pointedToBy != type,"Error: Can not establish circular pointer relation."); _EL_   Preconditions.checkArgument(type.pointsTo != pointer,"Error: Can not establish circular pointer relation."); _EL_   pointer.pointsTo=type; _EL_   type.pointedToBy=pointer; _EL_ } _EL_ ', 'public Optional<T> last(){ _EL_   Iterator<T> iterator=iterator(); _EL_   T value=null; _EL_   while (iterator.hasNext())   value=iterator.next(); _EL_   return Optional.of(value); _EL_ } _EL_ ', 'public static void threadSleep(long millis){ _EL_   try { _EL_     Thread.sleep(millis); _EL_   } _EL_  catch (  InterruptedException ex) { _EL_     Log.e("Exception",StringUtils.exceptionStackTraceToString(ex)); _EL_   } _EL_ } _EL_ ', 'public int indexOf(Node elem,int index){ _EL_   runTo(-1); _EL_   if (null == m_map)   return -1; _EL_   for (int i=index; i < m_firstFree; i++) { _EL_     Node node=m_map[i]; _EL_     if ((null != node) && node.equals(elem))     return i; _EL_   } _EL_   return -1; _EL_ } _EL_ ', 'static boolean isPackageAccess(final int modifiers){ _EL_   return (modifiers & ACCESS_TEST) == 0; _EL_ } _EL_ ', 'public void write(final String filename){ _EL_   PrintStream stream; _EL_   try { _EL_     stream=new PrintStream(new File(filename)); _EL_   } _EL_  catch (  FileNotFoundException e) { _EL_     e.printStackTrace(); _EL_     return; _EL_   } _EL_   write(stream); _EL_   stream.close(); _EL_ } _EL_ ', 'ManagedWindowDecorator(Window window,String windowId){ _EL_   this.window=window; _EL_   name="system." + windowId; _EL_ } _EL_ ', 'public static void log(String message,Object... args){ _EL_   if (loggingEnabled) { _EL_     Log.d(TAG,args.length == 0 ? message : String.format(message,args)); _EL_   } _EL_ } _EL_ ', 'protected void processUpdates(Queue<DeviceUpdate> updates){ _EL_   if (updates == null)   return; _EL_   DeviceUpdate update=null; _EL_   while (null != (update=updates.poll())) { _EL_     if (logger.isTraceEnabled()) { _EL_       logger.trace("Dispatching device update: {}",update); _EL_     } _EL_     if (update.change == DeviceUpdate.Change.DELETE) { _EL_       deviceSyncManager.removeDevice(update.device); _EL_     } _EL_  else { _EL_       deviceSyncManager.storeDevice(update.device); _EL_     } _EL_     List<IDeviceListener> listeners=deviceListeners.getOrderedListeners(); _EL_     notifyListeners(listeners,update); _EL_   } _EL_ } _EL_ ', 'boolean handleRemoteCanRebalance(long size){ _EL_   return false; _EL_ } _EL_ ', 'public static File toSLDFile(final File file){ _EL_   final String path=file.getAbsolutePath(); _EL_   final String base=path.substring(0,path.length() - 4); _EL_   String newPath=base + ".sld"; _EL_   File sld=new File(newPath); _EL_   if (sld.exists()) { _EL_     return sld; _EL_   } _EL_   newPath=base + ".SLD"; _EL_   sld=new File(newPath); _EL_   if (sld.exists()) { _EL_     return sld; _EL_   } _EL_   return null; _EL_ } _EL_ ', 'private String insertProperties(String template,Map<String,String> properties){ _EL_   for (  Entry<String,String> entry : properties.entrySet()) { _EL_     template=template.replace(entry.getKey(),entry.getValue()); _EL_   } _EL_   return template; _EL_ } _EL_ ', 'public static void changeFont(JComponent comp,int style){ _EL_   Font font=comp.getFont(); _EL_   comp.setFont(font.deriveFont(style)); _EL_ } _EL_ ', 'public static void saveX509Cert(String certStr,File certFile) throws IOException { _EL_   BufferedWriter writer=new BufferedWriter(new FileWriter(certFile)); _EL_   writer.write(BEGIN_CERT); _EL_   writer.newLine(); _EL_   writer.write(certStr); _EL_   writer.newLine(); _EL_   writer.write(END_CERT); _EL_   writer.newLine(); _EL_   writer.close(); _EL_ } _EL_ ', 'public static Object invokeStatic(Class clazz,String methodName) throws NoSuchMethodException { _EL_   try { _EL_     Method method=clazz.getMethod(methodName,new Class[0]); _EL_     Object result=method.invoke(null,new Object[0]); _EL_     return result; _EL_   } _EL_  catch (  IllegalAccessException e) { _EL_     throw new NoSuchMethodException(methodName + " is not accessible"); _EL_   } _EL_ catch (  InvocationTargetException e) { _EL_     throw new InternalError(e.getMessage()); _EL_   } _EL_ } _EL_ ', '@Deprecated public boolean isFillBelowLine(){ _EL_   return mFillBelowLine.size() > 0; _EL_ } _EL_ ', 'public void onPatchServiceResult(boolean isUpgradePatch){ _EL_   if (!isRetryEnable) { _EL_     TinkerLog.w(TAG,"onPatchServiceResult retry disabled, just return"); _EL_     return; _EL_   } _EL_   if (!isUpgradePatch) { _EL_     TinkerLog.w(TAG,"onPatchServiceResult is not upgrade patch, just return"); _EL_     return; _EL_   } _EL_   if (retryInfoFile.exists()) { _EL_     SharePatchFileUtil.safeDeleteFile(retryInfoFile); _EL_   } _EL_   if (tempPatchFile.exists()) { _EL_     SharePatchFileUtil.safeDeleteFile(tempPatchFile); _EL_   } _EL_ } _EL_ ', 'public static _Fields findByThriftId(int fieldId){ _EL_ switch (fieldId) { _EL_ case 1: _EL_     return NOTE_ID; _EL_ case 2: _EL_   return CLASS_NAME; _EL_ case 3: _EL_ return INTERPRETER_CONTEXT; _EL_ default : _EL_ return null; _EL_ } _EL_ } _EL_ ', 'public static boolean isStanza(Packet packet){ _EL_   if (packet instanceof Message)   return true; _EL_   if (packet instanceof IQ)   return true; _EL_   if (packet instanceof Presence)   return true; _EL_   return false; _EL_ } _EL_ ', 'private boolean needsUpdate(Long bundleVersion,String beanVersion){ _EL_   if (beanVersion.contains("OAD")) { _EL_     Log.i(TAG,"Bundle version: " + bundleVersion); _EL_     Log.i(TAG,"Bean version: " + beanVersion); _EL_     return true; _EL_   } _EL_  else { _EL_     try { _EL_       long parsedVersion=Long.parseLong(beanVersion.split(" ")[0]); _EL_       Log.i(TAG,"Bundle version: " + bundleVersion); _EL_       Log.i(TAG,"Bean version: " + parsedVersion); _EL_       if (bundleVersion > parsedVersion) { _EL_         return true; _EL_       } _EL_  else { _EL_         Log.i(TAG,"No update required!"); _EL_       } _EL_     } _EL_  catch (    NumberFormatException e) { _EL_       Log.e(TAG,"Couldn\'t parse Bean Version: " + beanVersion); _EL_       fail(BeanError.UNPARSABLE_FW_VERSION); _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void loadLogicalTablesWithGranularities(Map<String,TableGroup> nameGroupMap,Set<? extends Granularity> validGrains,ResourceDictionaries dictionaries){ _EL_   for (  Map.Entry<String,TableGroup> entry : nameGroupMap.entrySet()) { _EL_     String logicalTableName=entry.getKey(); _EL_     TableGroup group=entry.getValue(); _EL_     loadLogicalTableWithGranularities(logicalTableName,group,validGrains,dictionaries); _EL_   } _EL_ } _EL_ ', 'protected int readBlock(){ _EL_   blockSize=read(); _EL_   int n=0; _EL_   if (blockSize > 0) { _EL_     try { _EL_       int count=0; _EL_       while (n < blockSize) { _EL_         count=in.read(block,n,blockSize - n); _EL_         if (count == -1)         break; _EL_         n+=count; _EL_       } _EL_     } _EL_  catch (    IOException e) { _EL_     } _EL_     if (n < blockSize) { _EL_       status=STATUS_FORMAT_ERROR; _EL_     } _EL_   } _EL_   return n; _EL_ } _EL_ ', '@Override public void addNewSubscription(final Subscription newSubscription){ _EL_   final String clientID=newSubscription.getClientId(); _EL_   List<ClientTopicCouple> clientSubscriptions=subscriptions.get(clientID); _EL_   if (clientSubscriptions == null) { _EL_     clientSubscriptions=new ArrayList<>(); _EL_     subscriptions.put(clientID,clientSubscriptions); _EL_   } _EL_   clientSubscriptions.add(newSubscription.asClientTopicCouple()); _EL_ } _EL_ ', 'public X509CertPathImpl(List<? extends java.security.cert.Certificate> certs) throws CertificateException { _EL_   super("X.509"); _EL_   final int size=certs.size(); _EL_   certificates=new ArrayList<X509Certificate>(size); _EL_   for (int i=0; i < size; i++) { _EL_     final java.security.cert.Certificate cert=certs.get(i); _EL_     if (!(cert instanceof X509Certificate)) { _EL_       throw new CertificateException("Certificate " + i + " is not an X.509 certificate"); _EL_     } _EL_     certificates.add((X509Certificate)cert); _EL_   } _EL_ } _EL_ ', 'public Process(final String xmlString) throws IOException, XMLException { _EL_   initContext(); _EL_   StringReader in=new StringReader(xmlString); _EL_   readProcess(in); _EL_   in.close(); _EL_ } _EL_ ', 'public ConsulTopologyFraction(){ _EL_   this.url=DEFAULT_URL; _EL_ } _EL_ ', 'public String shortenName(String name,int desiredLength){ _EL_   int originalLength=name.length(); _EL_   if ((desiredLength <= 0) || (originalLength <= desiredLength)) { _EL_     return name; _EL_   } _EL_   int delta=originalLength - desiredLength; _EL_   int startCut=desiredLength / 2; _EL_   StringBuffer result=new StringBuffer(); _EL_   result.append(name.substring(0,startCut)); _EL_   if (((startCut == 0) || (name.charAt(startCut - 1) != \'_\')) && ((startCut + delta + 1 == originalLength) || (name.charAt(startCut + delta + 1) != \'_\'))) { _EL_     result.append("_"); _EL_   } _EL_   result.append(name.substring(startCut + delta + 1,originalLength)); _EL_   return result.toString(); _EL_ } _EL_ ', 'public static Color blend(Color color1,Color color2,double weight){ _EL_   double w2=MathUtils.limit(weight,0.0,1.0); _EL_   double w1=1.0 - w2; _EL_   int r=(int)Math.round(w1 * color1.getRed() + w2 * color2.getRed()); _EL_   int g=(int)Math.round(w1 * color1.getGreen() + w2 * color2.getGreen()); _EL_   int b=(int)Math.round(w1 * color1.getBlue() + w2 * color2.getBlue()); _EL_   int a=(int)Math.round(w1 * color1.getAlpha() + w2 * color2.getAlpha()); _EL_   return new Color(r,g,b,a); _EL_ } _EL_ ', 'public long kstkeip(){ _EL_   return Long.parseLong(fields[29]); _EL_ } _EL_ ', 'private void decideUILookAndFeel(MainOptions options){ _EL_   try { _EL_     boolean systemPlaf=false; _EL_     systemPlaf=options.system_plaf; _EL_     String systemPlafReq=System.getenv("systemplaf"); _EL_     if (systemPlafReq != null && systemPlafReq.equalsIgnoreCase("true"))     systemPlaf=true; _EL_     if (systemPlaf)     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); _EL_   } _EL_  catch (  Exception exc) { _EL_     exc.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'public static BufferedImage toBufferedImage(Image img,int type){ _EL_   if (img instanceof BufferedImage) { _EL_     return (BufferedImage)img; _EL_   } _EL_   BufferedImage bimage=new BufferedImage(img.getWidth(null),img.getHeight(null),type); _EL_   Graphics2D bGr=bimage.createGraphics(); _EL_   bGr.drawImage(img,0,0,null); _EL_   bGr.dispose(); _EL_   return bimage; _EL_ } _EL_ ', 'public static byte[] hexStringToByteArray(String strA){ _EL_   ByteArrayOutputStream result=new ByteArrayOutputStream(); _EL_   byte sum=(byte)0x00; _EL_   boolean nextCharIsUpper=true; _EL_   for (int i=0; i < strA.length(); i++) { _EL_     char c=strA.charAt(i); _EL_ switch (Character.toUpperCase(c)) { _EL_ case \'0\': _EL_       if (nextCharIsUpper) { _EL_         sum=(byte)0x00; _EL_         nextCharIsUpper=false; _EL_       } _EL_  else { _EL_         sum|=(byte)0x00; _EL_         result.write(sum); _EL_         nextCharIsUpper=true; _EL_       } _EL_     break; _EL_ case \'1\': _EL_   if (nextCharIsUpper) { _EL_     sum=(byte)0x10; _EL_     nextCharIsUpper=false; _EL_   } _EL_  else { _EL_     sum|=(byte)0x01; _EL_     result.write(sum); _EL_     nextCharIsUpper=true; _EL_   } _EL_ break; _EL_ case \'2\': _EL_ if (nextCharIsUpper) { _EL_ sum=(byte)0x20; _EL_ nextCharIsUpper=false; _EL_ } _EL_  else { _EL_ sum|=(byte)0x02; _EL_ result.write(sum); _EL_ nextCharIsUpper=true; _EL_ } _EL_ break; _EL_ case \'3\': _EL_ if (nextCharIsUpper) { _EL_ sum=(byte)0x30; _EL_ nextCharIsUpper=false; _EL_ } _EL_  else { _EL_ sum|=(byte)0x03; _EL_ result.write(sum); _EL_ nextCharIsUpper=true; _EL_ } _EL_ break; _EL_ case \'4\': _EL_ if (nextCharIsUpper) { _EL_ sum=(byte)0x40; _EL_ nextCharIsUpper=false; _EL_ } _EL_  else { _EL_ sum|=(byte)0x04; _EL_ result.write(sum); _EL_ nextCharIsUpper=true; _EL_ } _EL_ break; _EL_ case \'5\': _EL_ if (nextCharIsUpper) { _EL_ sum=(byte)0x50; _EL_ nextCharIsUpper=false; _EL_ } _EL_  else { _EL_ sum|=(byte)0x05; _EL_ result.write(sum); _EL_ nextCharIsUpper=true; _EL_ } _EL_ break; _EL_ case \'6\': _EL_ if (nextCharIsUpper) { _EL_ sum=(byte)0x60; _EL_ nextCharIsUpper=false; _EL_ } _EL_  else { _EL_ sum|=(byte)0x06; _EL_ result.write(sum); _EL_ nextCharIsUpper=true; _EL_ } _EL_ break; _EL_ case \'7\': _EL_ if (nextCharIsUpper) { _EL_ sum=(byte)0x70; _EL_ nextCharIsUpper=false; _EL_ } _EL_  else { _EL_ sum|=(byte)0x07; _EL_ result.write(sum); _EL_ nextCharIsUpper=true; _EL_ } _EL_ break; _EL_ case \'8\': _EL_ if (nextCharIsUpper) { _EL_ sum=(byte)0x80; _EL_ nextCharIsUpper=false; _EL_ } _EL_  else { _EL_ sum|=(byte)0x08; _EL_ result.write(sum); _EL_ nextCharIsUpper=true; _EL_ } _EL_ break; _EL_ case \'9\': _EL_ if (nextCharIsUpper) { _EL_ sum=(byte)0x90; _EL_ nextCharIsUpper=false; _EL_ } _EL_  else { _EL_ sum|=(byte)0x09; _EL_ result.write(sum); _EL_ nextCharIsUpper=true; _EL_ } _EL_ break; _EL_ case \'A\': _EL_ if (nextCharIsUpper) { _EL_ sum=(byte)0xA0; _EL_ nextCharIsUpper=false; _EL_ } _EL_  else { _EL_ sum|=(byte)0x0A; _EL_ result.write(sum); _EL_ nextCharIsUpper=true; _EL_ } _EL_ break; _EL_ case \'B\': _EL_ if (nextCharIsUpper) { _EL_ sum=(byte)0xB0; _EL_ nextCharIsUpper=false; _EL_ } _EL_  else { _EL_ sum|=(byte)0x0B; _EL_ result.write(sum); _EL_ nextCharIsUpper=true; _EL_ } _EL_ break; _EL_ case \'C\': _EL_ if (nextCharIsUpper) { _EL_ sum=(byte)0xC0; _EL_ nextCharIsUpper=false; _EL_ } _EL_  else { _EL_ sum|=(byte)0x0C; _EL_ result.write(sum); _EL_ nextCharIsUpper=true; _EL_ } _EL_ break; _EL_ case \'D\': _EL_ if (nextCharIsUpper) { _EL_ sum=(byte)0xD0; _EL_ nextCharIsUpper=false; _EL_ } _EL_  else { _EL_ sum|=(byte)0x0D; _EL_ result.write(sum); _EL_ nextCharIsUpper=true; _EL_ } _EL_ break; _EL_ case \'E\': _EL_ if (nextCharIsUpper) { _EL_ sum=(byte)0xE0; _EL_ nextCharIsUpper=false; _EL_ } _EL_  else { _EL_ sum|=(byte)0x0E; _EL_ result.write(sum); _EL_ nextCharIsUpper=true; _EL_ } _EL_ break; _EL_ case \'F\': _EL_ if (nextCharIsUpper) { _EL_ sum=(byte)0xF0; _EL_ nextCharIsUpper=false; _EL_ } _EL_  else { _EL_ sum|=(byte)0x0F; _EL_ result.write(sum); _EL_ nextCharIsUpper=true; _EL_ } _EL_ break; _EL_ default : _EL_ break; _EL_ } _EL_ } _EL_ if (!nextCharIsUpper) { _EL_ throw new RuntimeException("The String did not contain an equal number of hex digits"); _EL_ } _EL_ return result.toByteArray(); _EL_ } _EL_ ', 'public List<Node> listAvailableTerminals(Class<?> type){ _EL_   List<Node> result=new ArrayList<Node>(); _EL_   for (  Node node : availableNodes) { _EL_     if ((node.getNumberOfArguments() == 0) && type.isAssignableFrom(node.getReturnType())) { _EL_       result.add(node); _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public void removeSensorSelectionListener(SensorSelectionListener listener){ _EL_   listenerList.remove(SensorSelectionListener.class,listener); _EL_ } _EL_ ', 'public void register(GridCacheTtlManager mgr){ _EL_ synchronized (mux) { _EL_     if (cleanupWorker == null)     startCleanupWorker(); _EL_     mgrs.add(mgr); _EL_   } _EL_ } _EL_ ', 'public static java.sql.Time toSqlTime(int hour,int minute,int second){ _EL_   java.util.Date newDate=toDate(0,0,0,hour,minute,second); _EL_   if (newDate != null) { _EL_     return new java.sql.Time(newDate.getTime()); _EL_   } _EL_  else { _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public void initializeKeyStore(){ _EL_   try { _EL_     Logger logger=(com.sun.identity.log.Logger)Logger.getLogger(logName); _EL_     resetCurrentFileList(logName); _EL_     addToCurrentFileList(logName,logName,logName); _EL_     String logPath=lmanager.getProperty(LogConstants.LOG_LOCATION); _EL_     if (!logPath.endsWith("/"))     logPath+="/"; _EL_     String fileName=logName; _EL_     String loggerFileName=logPath + PREFIX + "log."+ fileName; _EL_     String verifierFileName=logPath + PREFIX + "ver."+ fileName; _EL_     Debug.message(logName + ":Logger Keystore name = " + loggerFileName); _EL_     Debug.message(logName + ":Verifier Keystore name= " + verifierFileName); _EL_     helper.initializeSecureLogHelper(loggerFileName,logPassword,verifierFileName,logPassword); _EL_     Debug.message(logName + ":Initialized SecureLogHelper"); _EL_     helper.initializeVerifier(verifierFileName,logPassword,verPassword); _EL_     Debug.message(logName + ":Done init of SecureLogHelper and Verifier"); _EL_   } _EL_  catch (  Exception e) { _EL_     Debug.error(logName + ":Logger: exception thrown while initializing secure logger",e); _EL_   } _EL_ } _EL_ ', 'public void discard(ServiceRegistrar reg){ _EL_ synchronized (registrars) { _EL_     if (terminated) { _EL_       throw new IllegalStateException("discovery terminated"); _EL_     } _EL_     if (reg == null)     return; _EL_     sendDiscarded(reg,null); _EL_   } _EL_ } _EL_ ', 'public boolean isFinalState(int state){ _EL_   return (state < 0) ? false : fFinalStateFlags[state]; _EL_ } _EL_ ', 'public static String generateScaleMarkers(int proteinLength,int maxNumScaleMarkers){ _EL_   if (maxNumScaleMarkers < 2) { _EL_     maxNumScaleMarkers=2; _EL_   } _EL_   int scale=calcScale(proteinLength,maxNumScaleMarkers); _EL_   StringBuilder sb=new StringBuilder("0"); _EL_   int index=0; _EL_   int numRemaining=proteinLength; _EL_   while (index <= proteinLength) { _EL_     index+=scale; _EL_     numRemaining-=scale; _EL_     sb.append(","); _EL_     if ((numRemaining > 0) && (numRemaining < scale)) { _EL_       if (numRemaining < (scale / 2)) { _EL_         sb.append(proteinLength); _EL_         break; _EL_       } _EL_     } _EL_     if (index >= proteinLength) { _EL_       sb.append(proteinLength); _EL_     } _EL_  else { _EL_       sb.append(index); _EL_     } _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'public void writeFigTreeBlock(Map<String,Object> settings) throws IOException { _EL_   writer.println("\\nbegin figtree;"); _EL_   for (  String key : settings.keySet()) { _EL_     Object value=settings.get(key); _EL_     writer.println("\\tset " + key + "="+ createString(value)+ ";"); _EL_   } _EL_   writer.println("end;\\n"); _EL_ } _EL_ ', 'public int hashCode(){ _EL_   return font.hashCode() ^ glyphs.length; _EL_ } _EL_ ', 'public boolean equals(Object obj){ _EL_   if (obj == this) { _EL_     return true; _EL_   } _EL_   if (obj instanceof Map == false) { _EL_     return false; _EL_   } _EL_   Map map=(Map)obj; _EL_   if (map.size() != size()) { _EL_     return false; _EL_   } _EL_   MapIterator it=mapIterator(); _EL_   try { _EL_     while (it.hasNext()) { _EL_       Object key=it.next(); _EL_       Object value=it.getValue(); _EL_       if (value == null) { _EL_         if (map.get(key) != null || map.containsKey(key) == false) { _EL_           return false; _EL_         } _EL_       } _EL_  else { _EL_         if (value.equals(map.get(key)) == false) { _EL_           return false; _EL_         } _EL_       } _EL_     } _EL_   } _EL_  catch (  ClassCastException ignored) { _EL_     return false; _EL_   } _EL_ catch (  NullPointerException ignored) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', '@Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException { _EL_   fInDTD=true; _EL_   try { _EL_     if (fLexicalHandler != null) { _EL_       fLexicalHandler.startDTD(rootElement,publicId,systemId); _EL_     } _EL_   } _EL_  catch (  SAXException e) { _EL_     throw new XNIException(e); _EL_   } _EL_   if (fDeclHandler != null) { _EL_     fDeclaredAttrs=new SymbolHash(); _EL_   } _EL_ } _EL_ ', 'public void writeExif(byte[] jpeg,String exifOutFileName) throws FileNotFoundException, IOException { _EL_   if (jpeg == null || exifOutFileName == null) { _EL_     throw new IllegalArgumentException(NULL_ARGUMENT_STRING); _EL_   } _EL_   OutputStream s=null; _EL_   try { _EL_     s=getExifWriterStream(exifOutFileName); _EL_     s.write(jpeg,0,jpeg.length); _EL_     s.flush(); _EL_   } _EL_  catch (  IOException e) { _EL_     closeSilently(s); _EL_     throw e; _EL_   } _EL_   s.close(); _EL_ } _EL_ ', 'public void cleanStart(){ _EL_   Connection conn=getConnection(true,true); _EL_   if (conn == null)   throw new IllegalStateException("No Database"); _EL_   dropDatabase(conn); _EL_   createUser(conn); _EL_   createDatabase(conn); _EL_   try { _EL_     if (conn != null)     conn.close(); _EL_   } _EL_  catch (  SQLException e2) { _EL_     log.log(Level.SEVERE,"close connection",e2); _EL_   } _EL_   conn=null; _EL_ } _EL_ ', 'static TemplateModelException newMethodArgInvalidValueException(String methodName,int argIdx,Object... details){ _EL_   return new _TemplateModelException(methodName,"(...) argument #",Integer.valueOf(argIdx + 1)," had invalid value: ",details); _EL_ } _EL_ ', 'private void loadMap(String extension,String mimeType){ _EL_   if (!mimeTypeToExtensionMap.containsKey(mimeType)) { _EL_     mimeTypeToExtensionMap.put(mimeType,extension); _EL_   } _EL_   extensionToMimeTypeMap.put(extension,mimeType); _EL_   if (isImageType(mimeType)) { _EL_     imageMimeTypeSet.add(mimeType); _EL_   } _EL_ } _EL_ ', 'private String convertTimestamp(){ _EL_   String result=timestampFormat.replaceAll(VALID_DATEFORMAT_CHAR_PATTERN + "+","\\\\\\\\S+"); _EL_   result=result.replaceAll(Pattern.quote("."),"\\\\\\\\."); _EL_   return result; _EL_ } _EL_ ', 'public static String encode(byte[] bytes){ _EL_   int len=bytes.length; _EL_   final StringBuffer encoded=new StringBuffer((len + 2) / 3 * 4); _EL_   int i=0; _EL_   int j=len; _EL_   while (j >= 3) { _EL_     encoded.append(to64((((bytes[i] & 0xff) << 16) | (int)((bytes[i + 1] & 0xff) << 8) | (int)(bytes[i + 2] & 0xff)),4)); _EL_     i+=3; _EL_     j-=3; _EL_   } _EL_   if (j == 2) { _EL_     encoded.append(to64(((bytes[i] & 0xff) << 8) | ((bytes[i + 1] & 0xff)),3)); _EL_   } _EL_   if (j == 1) { _EL_     encoded.append(to64(((bytes[i] & 0xff)),2)); _EL_   } _EL_   return encoded.toString(); _EL_ } _EL_ ', 'final public void print(double v){ _EL_   Writer out=this.out; _EL_   if (out == null)   return; _EL_   try { _EL_     String s=String.valueOf(v); _EL_     out.write(s,0,s.length()); _EL_   } _EL_  catch (  IOException e) { _EL_     log.log(Level.FINE,e.toString(),e); _EL_   } _EL_ } _EL_ ', 'private static boolean containsChroot(String zkHost){ _EL_   return zkHost.contains("/"); _EL_ } _EL_ ', 'public static void onDatabase(MongoClient client,String dbName,Consumer<MongoDatabase> dbOperation){ _EL_   if (contains(client.listDatabaseNames(),dbName)) { _EL_     dbOperation.accept(client.getDatabase(dbName)); _EL_   } _EL_ } _EL_ ', 'protected int createHashCode(){ _EL_   int result=uri.hashCode() ^ prefix.hashCode(); _EL_   if (result == 0) { _EL_     result=0xbabe; _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public static PlaceholderFragment newInstance(int sectionNumber){ _EL_   PlaceholderFragment fragment=new PlaceholderFragment(); _EL_   Bundle args=new Bundle(); _EL_   args.putInt(ARG_SECTION_NUMBER,sectionNumber); _EL_   fragment.setArguments(args); _EL_   return fragment; _EL_ } _EL_ ', 'public ResultFileReader(Problem problem,File file) throws IOException { _EL_   super(); _EL_   this.problem=problem; _EL_   reader=new BufferedReader(new FileReader(file)); _EL_   line=reader.readLine(); _EL_ } _EL_ ', '@Override public void onFailure(IMqttToken asyncActionToken,Throwable exception){ _EL_   exception.printStackTrace(); _EL_   Log.e("TrafficService","Error connecting: " + exception.getMessage()); _EL_   onDisconnect(false); _EL_ } _EL_ ', '@Override public boolean exclude(String identifier){ _EL_   return blacklist.contains(identifier); _EL_ } _EL_ ', 'public static boolean checkCommunicationError(Exception exc){ _EL_   Throwable rootCause=SolrException.getRootCause(exc); _EL_   boolean wasCommError=(rootCause instanceof ConnectException || rootCause instanceof ConnectTimeoutException || rootCause instanceof NoHttpResponseException|| rootCause instanceof SocketException); _EL_   return wasCommError; _EL_ } _EL_ ', 'public boolean isReliable(){ _EL_   return true; _EL_ } _EL_ ', 'private void push(final int type){ _EL_   if (outputStack == null) { _EL_     outputStack=new int[10]; _EL_   } _EL_   int n=outputStack.length; _EL_   if (outputStackTop >= n) { _EL_     int[] t=new int[Math.max(outputStackTop + 1,2 * n)]; _EL_     System.arraycopy(outputStack,0,t,0,n); _EL_     outputStack=t; _EL_   } _EL_   outputStack[outputStackTop++]=type; _EL_   int top=owner.inputStackTop + outputStackTop; _EL_   if (top > owner.outputStackMax) { _EL_     owner.outputStackMax=top; _EL_   } _EL_ } _EL_ ', 'static private String SHORT_Max_Plus(){ _EL_   long tempValue=Short.MAX_VALUE + 1; _EL_   return String.valueOf(tempValue); _EL_ } _EL_ ', 'public void firePropertyChange(String name,Object oldValue,Object newValue){ _EL_   beanContextChildSupport.firePropertyChange(name,oldValue,newValue); _EL_ } _EL_ ', 'static Map addElementToMap(String key,Set values,Map toMap){ _EL_   if ((key != null) && (toMap != null)) { _EL_     toMap.put(key,values); _EL_   } _EL_   return toMap; _EL_ } _EL_ ', 'public void saveBootProp() throws IOException { _EL_   if (!bootProp.equals(bootPropOrg)) { _EL_     final String propFile=jarFolder + "jar.properties"; _EL_     final OutputStream os=new FileOutputStream(propFile); _EL_     try { _EL_       bootProp.store(os,"Stendhal Boot Configuration"); _EL_     } _EL_   finally { _EL_       os.close(); _EL_     } _EL_   } _EL_ } _EL_ ', 'private int append(FileSystem fs,Configuration conf,Path src,PrintWriter writer,int currentRecordNumber) throws IOException { _EL_   BufferedReader reader=new BufferedReader(new InputStreamReader(fs.open(src))); _EL_   try { _EL_     String line=reader.readLine(); _EL_     while (line != null) { _EL_       if (line.startsWith("Recno:: ")) { _EL_         line="Recno:: " + currentRecordNumber++; _EL_       } _EL_       writer.println(line); _EL_       line=reader.readLine(); _EL_     } _EL_     return currentRecordNumber; _EL_   } _EL_   finally { _EL_     reader.close(); _EL_   } _EL_ } _EL_ ', 'public int difference(String s1,String s2) throws EncoderException { _EL_   return SoundexUtils.difference(this,s1,s2); _EL_ } _EL_ ', 'public static String morpha(String text,boolean tags){ _EL_   if (text.isEmpty()) { _EL_     return ""; _EL_   } _EL_   String[] textParts=whitespace.split(text); _EL_   StringBuilder result=new StringBuilder(); _EL_   try { _EL_     for (    String textPart : textParts) { _EL_       Morpha morpha=new Morpha(new StringReader(textPart),tags); _EL_       if (result.length() != 0) { _EL_         result.append(" "); _EL_       } _EL_       result.append(morpha.next()); _EL_     } _EL_   } _EL_  catch (  Error e) { _EL_     return text; _EL_   } _EL_ catch (  java.io.IOException e) { _EL_     return text; _EL_   } _EL_   return result.toString(); _EL_ } _EL_ ', 'public static void deleteFile(File file) throws AdeUsageException { _EL_   if (!file.delete()) { _EL_     throw new AdeUsageException(FAILED_DELETING_FILE + file.getPath()); _EL_   } _EL_ } _EL_ ', 'public Shape createCheckMark(final int x,final int y,final int w,final int h){ _EL_   double xf=w / 12.0; _EL_   double hf=h / 12.0; _EL_   path.reset(); _EL_   path.moveTo(x,y + 7.0 * hf); _EL_   path.lineTo(x + 2.0 * xf,y + 7.0 * hf); _EL_   path.lineTo(x + 4.75 * xf,y + 10.0 * hf); _EL_   path.lineTo(x + 9.0 * xf,y); _EL_   path.lineTo(x + 11.0 * xf,y); _EL_   path.lineTo(x + 5.0 * xf,y + 12.0 * hf); _EL_   path.closePath(); _EL_   return path; _EL_ } _EL_ ', '@Override public synchronized void initialize(){ _EL_   if (!mRootDirectory.exists()) { _EL_     if (!mRootDirectory.mkdirs()) { _EL_       VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath()); _EL_     } _EL_     return; _EL_   } _EL_   File[] files=mRootDirectory.listFiles(); _EL_   if (files == null) { _EL_     return; _EL_   } _EL_   for (  File file : files) { _EL_     FileInputStream fis=null; _EL_     try { _EL_       fis=new FileInputStream(file); _EL_       CacheHeader entry=CacheHeader.readHeader(fis); _EL_       entry.size=file.length(); _EL_       putEntry(entry.key,entry); _EL_     } _EL_  catch (    IOException e) { _EL_       if (file != null) { _EL_         file.delete(); _EL_       } _EL_     } _EL_  finally { _EL_       try { _EL_         if (fis != null) { _EL_           fis.close(); _EL_         } _EL_       } _EL_  catch (      IOException ignored) { _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public TCPChannelClient(ExecutorService executor,TCPChannelEvents eventListener,String ip,int port){ _EL_   this.executor=executor; _EL_   executorThreadCheck=new ThreadUtils.ThreadChecker(); _EL_   executorThreadCheck.detachThread(); _EL_   this.eventListener=eventListener; _EL_   InetAddress address; _EL_   try { _EL_     address=InetAddress.getByName(ip); _EL_   } _EL_  catch (  UnknownHostException e) { _EL_     reportError("Invalid IP address."); _EL_     return; _EL_   } _EL_   if (address.isAnyLocalAddress()) { _EL_     socket=new TCPSocketServer(address,port); _EL_   } _EL_  else { _EL_     socket=new TCPSocketClient(address,port); _EL_   } _EL_   socket.start(); _EL_ } _EL_ ', 'public RemoverManager track(Remover remover){ _EL_   if (handlers == null) { _EL_     handlers=new ArrayList<>(); _EL_   } _EL_   handlers.add(remover); _EL_   return this; _EL_ } _EL_ ', 'public void actionPerformed(java.awt.event.ActionEvent e){ _EL_   Object source=e.getSource(); _EL_   if (!(source instanceof JMenuItem))   return; _EL_   JMenuItem mi=(JMenuItem)source; _EL_   String name=mi.getText(); _EL_   OMGraphicHandlerLayer targetLayer=(OMGraphicHandlerLayer)layers.get(name); _EL_   if (targetLayer == null) { _EL_     Debug.message("defaultdndcatcher","ERROR> DefaultDnDCatcher::actionPerformed: " + "no layer found with name " + name); _EL_     return; _EL_   } _EL_   targetLayer.doAction((OMGraphic)transferData,new OMAction(OMAction.UPDATE_GRAPHIC_MASK)); _EL_ } _EL_ ', 'private void addEntry(){ _EL_   model.addNewEntry(); _EL_   removeButton.setEnabled(false); _EL_ } _EL_ ', 'public UUID(long mostSigBits,long leastSigBits){ _EL_   this.mostSigBits=mostSigBits; _EL_   this.leastSigBits=leastSigBits; _EL_   init(); _EL_ } _EL_ ', 'public static PrettyPrint indentWithSpaces(int number){ _EL_   if (number < 0) { _EL_     throw new IllegalArgumentException("number is negative"); _EL_   } _EL_   char[] chars=new char[number]; _EL_   Arrays.fill(chars,\' \'); _EL_   return new PrettyPrint(chars); _EL_ } _EL_ ', 'private static void renderHandler(FacesContext context,UIComponent component,Collection<ClientBehaviorContext.Parameter> params,String handlerName,Object handlerValue,String behaviorEventName,String submitTarget,boolean needsSubmit,boolean includeExec) throws IOException { _EL_   ResponseWriter writer=context.getResponseWriter(); _EL_   String userHandler=getNonEmptyUserHandler(handlerValue); _EL_   List<ClientBehavior> behaviors=getClientBehaviors(component,behaviorEventName); _EL_   if ((null != behaviors) && (behaviors.size() > 0) && Util.componentIsDisabled(component)) { _EL_     behaviors=null; _EL_   } _EL_   if (params == null) { _EL_     params=Collections.emptyList(); _EL_   } _EL_   String handler=null; _EL_ switch (getHandlerType(behaviors,params,userHandler,needsSubmit,includeExec)) { _EL_ case USER_HANDLER_ONLY: _EL_     handler=userHandler; _EL_   break; _EL_ case SINGLE_BEHAVIOR_ONLY: _EL_ handler=getSingleBehaviorHandler(context,component,behaviors.get(0),params,behaviorEventName,submitTarget,needsSubmit); _EL_ break; _EL_ case SUBMIT_ONLY: _EL_ handler=getSubmitHandler(context,component,params,submitTarget,true); _EL_ break; _EL_ case CHAIN: _EL_ handler=getChainedHandler(context,component,behaviors,params,behaviorEventName,userHandler,submitTarget,needsSubmit); _EL_ break; _EL_ default : _EL_ assert (false); _EL_ } _EL_ writer.writeAttribute(handlerName,handler,null); _EL_ } _EL_ ', 'public String constructTSDBMetricName(){ _EL_   StringBuilder sb=new StringBuilder(getScope()); _EL_   if (_namespace != null && !_namespace.isEmpty()) { _EL_     sb.append(getNamespace()); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', '@Override protected void registerNewSelector() throws IOException { _EL_ synchronized (selector) { _EL_     Set<SelectionKey> keys=selector.keys(); _EL_     Selector newSelector=null; _EL_     if (selectorProvider == null) { _EL_       newSelector=Selector.open(); _EL_     } _EL_  else { _EL_       newSelector=selectorProvider.openSelector(); _EL_     } _EL_     for (    SelectionKey key : keys) { _EL_       SelectableChannel ch=key.channel(); _EL_       NioSession session=(NioSession)key.attachment(); _EL_       SelectionKey newKey=ch.register(newSelector,key.interestOps(),session); _EL_       session.setSelectionKey(newKey); _EL_     } _EL_     selector.close(); _EL_     selector=newSelector; _EL_   } _EL_ } _EL_ ', 'public static <T>List<T> select(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... parameters) throws IOException, SQLException { _EL_   PreparedStatement stmt=null; _EL_   ResultSet rs=null; _EL_   try { _EL_     stmt=connection.prepareStatement(rawSqlQuery); _EL_     for (int index=0; index < parameters.length; index++) { _EL_       JdbcUtils.bindParameter(stmt,index + 1,parameters[index]); _EL_     } _EL_     rs=stmt.executeQuery(); _EL_     List<T> result=Lists.newLinkedList(); _EL_     while (rs.next()) { _EL_       result.add(rowProcessor.process(rs)); _EL_     } _EL_     return result; _EL_   } _EL_   finally { _EL_     JdbcUtils.closeResultSet(rs); _EL_     JdbcUtils.closeStatement(stmt); _EL_   } _EL_ } _EL_ ', 'public static long nowInNanos(){ _EL_   return System.nanoTime(); _EL_ } _EL_ ', 'public Future<SyncReply> sendRequest(int xid,SyncMessage request) throws RemoteStoreException { _EL_   ensureConnected(); _EL_   RemoteSyncFuture future=new RemoteSyncFuture(xid,connectionGeneration); _EL_   futureMap.put(Integer.valueOf(xid),future); _EL_   if (futureMap.size() > MAX_PENDING_REQUESTS) { _EL_ synchronized (futureNotify) { _EL_       while (futureMap.size() > MAX_PENDING_REQUESTS) { _EL_         try { _EL_           futureNotify.wait(); _EL_         } _EL_  catch (        InterruptedException e) { _EL_           throw new RemoteStoreException("Could not send request",e); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   channel.writeAndFlush(request); _EL_   return future; _EL_ } _EL_ ', 'public void enableDependency(Capability c){ _EL_   if (doNotCheckCapabilities()) { _EL_     return; _EL_   } _EL_   if (c == Capability.NOMINAL_ATTRIBUTES) { _EL_     enableDependency(Capability.BINARY_ATTRIBUTES); _EL_   } _EL_  else   if (c == Capability.BINARY_ATTRIBUTES) { _EL_     enableDependency(Capability.UNARY_ATTRIBUTES); _EL_   } _EL_  else   if (c == Capability.UNARY_ATTRIBUTES) { _EL_     enableDependency(Capability.EMPTY_NOMINAL_ATTRIBUTES); _EL_   } _EL_  else   if (c == Capability.NOMINAL_CLASS) { _EL_     enableDependency(Capability.BINARY_CLASS); _EL_   } _EL_   m_Dependencies.add(c); _EL_ } _EL_ ', 'public IVariable[] extractRobotDebugVariables(final int stackTraceId,final Map<String,Object> newVariables){ _EL_   final RobotDebugVariablesContext currentVariablesContext=findCurrentVariablesContext(stackTraceId); _EL_   Map<String,IVariable> previousVariablesMap=initPreviousVariablesState(currentVariablesContext); _EL_   final Map<String,IVariable> nonGlobalVariablesMap=new LinkedHashMap<>(); _EL_   if (previousVariablesMap == null) { _EL_     initNewNonGlobalVariables(newVariables,nonGlobalVariablesMap); _EL_   } _EL_  else { _EL_     initVariablesComparingWithPreviousState(newVariables,previousVariablesMap,nonGlobalVariablesMap); _EL_   } _EL_   final LinkedList<IVariable> currentVariablesList=createCurrentVariablesList(nonGlobalVariablesMap); _EL_   saveCurrentVariablesState(stackTraceId,currentVariablesContext,nonGlobalVariablesMap); _EL_   return currentVariablesList.toArray(new IVariable[currentVariablesList.size()]); _EL_ } _EL_ ', 'public ResourcesPoet addInteger(String name,String value){ _EL_   Element bool=document.createElement("integer"); _EL_   bool.setAttribute("name",name); _EL_   bool.appendChild(document.createTextNode(String.valueOf(value))); _EL_   resourceElement.appendChild(bool); _EL_   return this; _EL_ } _EL_ ', 'private static boolean hasResponseBody(int requestMethod,int responseCode){ _EL_   return requestMethod != Request.Method.HEAD && !(HttpStatus.SC_CONTINUE <= responseCode && responseCode < HttpStatus.SC_OK) && responseCode != HttpStatus.SC_NO_CONTENT && responseCode != HttpStatus.SC_NOT_MODIFIED; _EL_ } _EL_ ', 'public boolean shouldExecuteAction(){ _EL_   if (delay <= 0) { _EL_     return true; _EL_   } _EL_   long timePassed=System.currentTimeMillis() - lastActionExecuted; _EL_   if (timePassed > delay * 100) { _EL_     lastActionExecuted=System.currentTimeMillis(); _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static int moveByWord(String text,int column,boolean forward,boolean returnCursorAtEnd){ _EL_   int curColumn=column; _EL_   int length=text.length(); _EL_   int direction=forward ? 1 : -1; _EL_   boolean farWordEnd=((direction == 1 && returnCursorAtEnd) || (direction == -1 && !returnCursorAtEnd)); _EL_   boolean foundEarlyMatch=false; _EL_   if (!UnicodeUtils.isWhitespace(text.charAt(curColumn))) { _EL_     curColumn=skipNonwhitespaceSimilar(text,curColumn,forward); _EL_     if (farWordEnd && curColumn - direction != column) { _EL_       curColumn-=direction; _EL_       foundEarlyMatch=true; _EL_     } _EL_   } _EL_   if (!foundEarlyMatch && curColumn >= 0 && curColumn < length) { _EL_     curColumn=skipWhitespace(text,curColumn,forward); _EL_     if (farWordEnd && curColumn >= 0 && curColumn < length) { _EL_       curColumn=skipNonwhitespaceSimilar(text,curColumn,forward) - direction; _EL_     } _EL_   } _EL_   if (curColumn < 0 || curColumn >= length) { _EL_     return -1; _EL_   } _EL_   return curColumn; _EL_ } _EL_ ', 'protected void handleOrDeferMessage(DistributionMessage msg){ _EL_ synchronized (startupLock) { _EL_     if (beingSick || playingDead) { _EL_       if (msg.containsRegionContentChange() || msg instanceof PartitionMessageWithDirectReply) { _EL_         startupMessages.add(new StartupEvent(msg)); _EL_         return; _EL_       } _EL_     } _EL_     if (!processingEvents) { _EL_       startupMessages.add(new StartupEvent(msg)); _EL_       return; _EL_     } _EL_   } _EL_   dispatchMessage(msg); _EL_ } _EL_ ', 'public boolean zoneExportRemoveVolumes(List<NetworkZoningParam> zoningParams,Collection<URI> volumeURIs,String stepId){ _EL_   NetworkZoningParam zoningParam=zoningParams.get(0); _EL_   _log.info(String.format("Entering zoneExportRemoveVolumes for ExportGroup: %s Volumes: %s",zoningParam.getExportGroupDisplay(),volumeURIs.toString())); _EL_   return doZoneExportMasksDelete(zoningParams,volumeURIs,stepId); _EL_ } _EL_ ', 'private void shutdown(){ _EL_   if (nbestListWriter != null) { _EL_     logger.info("Closing n-best writer"); _EL_     nbestListWriter.close(); _EL_   } _EL_   if (alignmentWriter != null) { _EL_     logger.info("Closing alignment writer"); _EL_     alignmentWriter.close(); _EL_   } _EL_ } _EL_ ', 'protected void zoomImageToPosition(float scale,float centerX,float centerY,long durationMs){ _EL_   if (scale > getMaxScale()) { _EL_     scale=getMaxScale(); _EL_   } _EL_   final float oldScale=getCurrentScale(); _EL_   final float deltaScale=scale - oldScale; _EL_   post(mZoomImageToPositionRunnable=new ZoomImageToPosition(CropImageView.this,durationMs,oldScale,deltaScale,centerX,centerY)); _EL_ } _EL_ ', 'public Boolean isHidden(File f){ _EL_   String name=f.getName(); _EL_   if ((name != null) && !name.equals("") && (name.charAt(0) == \'.\')) { _EL_     return Boolean.TRUE; _EL_   } _EL_  else { _EL_     return Boolean.FALSE; _EL_   } _EL_ } _EL_ ', 'private boolean scrollViewCanScrollVertically(ScrollView scrollView,int direction){ _EL_   final int offset=Math.max(0,scrollView.getScrollY()); _EL_   final int range=computeVerticalScrollRange(scrollView) - scrollView.getHeight(); _EL_   if (range == 0)   return false; _EL_   if (direction < 0) { _EL_     return offset > 0; _EL_   } _EL_  else { _EL_     return offset < range - 1; _EL_   } _EL_ } _EL_ ', 'public JarInfo loadJar() throws IOException { _EL_   ZipInputStream zis=null; _EL_   Manifest mf=null; _EL_   boolean empty=true; _EL_   try { _EL_     zis=new ZipInputStream(jarStream); _EL_     ZipEntry ent=null; _EL_     while ((ent=zis.getNextEntry()) != null) { _EL_       empty=false; _EL_       String name=ent.getName(); _EL_       if (Manifest.isManifestName(name)) { _EL_         ByteArrayOutputStream baos=new ByteArrayOutputStream(); _EL_         byte buffer[]=new byte[1024]; _EL_         for (; ; ) { _EL_           int len=zis.read(buffer); _EL_           if (len < 0) { _EL_             break; _EL_           } _EL_           baos.write(buffer,0,len); _EL_         } _EL_         byte[] buf=baos.toByteArray(); _EL_         mf=new Manifest(buf); _EL_       } _EL_     } _EL_   } _EL_  catch (  IOException ex) { _EL_     throw ex; _EL_   } _EL_ catch (  Throwable th) { _EL_     th.printStackTrace(); _EL_     throw new IOException("loadJar caught: " + th); _EL_   } _EL_  finally { _EL_     if (zis != null) { _EL_       try { _EL_         zis.close(); _EL_       } _EL_  catch (      Exception ex) { _EL_       } _EL_     } _EL_   } _EL_   if (empty) { _EL_     throw new IOException("JAR file is corrupt or empty"); _EL_   } _EL_   JarInfo ji=createJarInfo(mf); _EL_   return ji; _EL_ } _EL_ ', 'public void addRow(Assignment head,double prob){ _EL_   if (prob < 0.0f || prob > 1.02f) { _EL_     return; _EL_   } _EL_   headVars.addAll(head.getVariables()); _EL_   table.put(head,prob); _EL_ } _EL_ ', 'public byte[] createJarFromFileContent(final String fileName,final String content) throws IOException { _EL_   ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream(); _EL_   JarOutputStream jarOutputStream=new JarOutputStream(byteArrayOutputStream); _EL_   JarEntry entry=new JarEntry(fileName); _EL_   entry.setTime(System.currentTimeMillis()); _EL_   jarOutputStream.putNextEntry(entry); _EL_   jarOutputStream.write(content.getBytes()); _EL_   jarOutputStream.closeEntry(); _EL_   jarOutputStream.close(); _EL_   return byteArrayOutputStream.toByteArray(); _EL_ } _EL_ ', 'private boolean goTo(long day,boolean animate,boolean setSelected,boolean forceScroll){ _EL_   if (setSelected) { _EL_     mSelectedDay.setTimeInMillis(day); _EL_   } _EL_   mTempDay.setTimeInMillis(day); _EL_   final int position=getPositionFromDay(day); _EL_   View child; _EL_   int i=0; _EL_   int top=0; _EL_   do { _EL_     child=getChildAt(i++); _EL_     if (child == null) { _EL_       break; _EL_     } _EL_     top=child.getTop(); _EL_   } _EL_  while (top < 0); _EL_   int selectedPosition; _EL_   if (child != null) { _EL_     selectedPosition=getPositionForView(child); _EL_   } _EL_  else { _EL_     selectedPosition=0; _EL_   } _EL_   if (setSelected) { _EL_     mAdapter.setSelectedDay(mSelectedDay); _EL_   } _EL_   if (position != selectedPosition || forceScroll) { _EL_     setMonthDisplayed(mTempDay); _EL_     mPreviousScrollState=OnScrollListener.SCROLL_STATE_FLING; _EL_     if (animate) { _EL_       smoothScrollToPositionFromTop(position,LIST_TOP_OFFSET,GOTO_SCROLL_DURATION); _EL_       return true; _EL_     } _EL_  else { _EL_       postSetSelection(position); _EL_     } _EL_   } _EL_  else   if (setSelected) { _EL_     setMonthDisplayed(mSelectedDay); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public boolean search(V v){ _EL_   int h=hashMethod.hash(v); _EL_   LinkedList<V> list=(LinkedList<V>)table[h]; _EL_   if (list == null) { _EL_     return false; _EL_   } _EL_   return list.contains(v); _EL_ } _EL_ ', 'public void closeJDBCConnection(Connection conn){ _EL_   try { _EL_     if (conn != null) { _EL_       conn.close(); _EL_     } _EL_   } _EL_  catch (  SQLException sqle) { _EL_     subclassLogWrapper("Unexpected exception while closing database connection."); _EL_   } _EL_ } _EL_ ', 'public void addListener(ColorMapListener listener){ _EL_   listeners.add(listener); _EL_ } _EL_ ', 'private static String appendIfMissing(final String str,final CharSequence suffix,final boolean ignoreCase,final CharSequence... suffixes){ _EL_   if (str == null || isEmpty(suffix) || endsWith(str,suffix,ignoreCase)) { _EL_     return str; _EL_   } _EL_   if (suffixes != null && suffixes.length > 0) { _EL_     for (    final CharSequence s : suffixes) { _EL_       if (endsWith(str,s,ignoreCase)) { _EL_         return str; _EL_       } _EL_     } _EL_   } _EL_   return str + suffix.toString(); _EL_ } _EL_ ', 'private JSONArray requestAllFileSystems() throws IOException, JSONException { _EL_   JSONArray ret=new JSONArray(); _EL_   for (  Filesystem fs : filesystems) { _EL_     ret.put(fs.getRootEntry()); _EL_   } _EL_   return ret; _EL_ } _EL_ ', 'ExternalProblem(Process process){ _EL_   this(process.getInputStream(),process.getOutputStream()); _EL_   RedirectStream.redirect(process.getErrorStream(),System.err); _EL_ } _EL_ ', 'protected static boolean networkMonitorExist(String nwMonName){ _EL_   String classMethod="OpenSSOMonitoringUtil.networkMonitorExist: "; _EL_   if (debug.messageEnabled()) { _EL_     debug.message(classMethod + "checking " + nwMonName); _EL_   } _EL_   if ((nwMonName == null) || (nwMonName.length() == 0)) { _EL_     if (debug.warningEnabled()) { _EL_       debug.warning(classMethod + "isNull"); _EL_     } _EL_     return false; _EL_   } _EL_   Set<String> ntwStats=NetworkMonitor.getInstanceNames(); _EL_   String ss=nwMonName.toLowerCase(); _EL_   if (ntwStats.contains(ss)) { _EL_     return true; _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'protected boolean error_recovery(boolean debug) throws java.lang.Exception { _EL_   if (debug)   debug_message("# Attempting error recovery"); _EL_   if (!find_recovery_config(debug)) { _EL_     if (debug)     debug_message("# Error recovery fails"); _EL_     return false; _EL_   } _EL_   read_lookahead(); _EL_   for (; ; ) { _EL_     if (debug)     debug_message("# Trying to parse ahead"); _EL_     if (try_parse_ahead(debug)) { _EL_       break; _EL_     } _EL_     if (lookahead[0].sym == EOF_sym()) { _EL_       if (debug)       debug_message("# Error recovery fails at EOF"); _EL_       return false; _EL_     } _EL_     if (debug)     debug_message("# Consuming Symbol #" + lookahead[0].sym); _EL_     restart_lookahead(); _EL_   } _EL_   if (debug)   debug_message("# Parse-ahead ok, going back to normal parse"); _EL_   parse_lookahead(debug); _EL_   return true; _EL_ } _EL_ ', 'public void andWith(List<QueryPredicate> predicates){ _EL_   children.addAll(predicates); _EL_ } _EL_ ', 'public void addRoll(MMRandom rng){ _EL_   int result=rng.randomInt(this.faces) + this.min; _EL_   all.addElement(new Integer(result)); _EL_   this.total+=result; _EL_   if (keep != -1 && all.size() >= keep) { _EL_     this.total=0; _EL_     Collections.sort(all,Collections.reverseOrder()); _EL_     for (int i=0; i < keep; i++) { _EL_       this.total+=all.get(i); _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean checkCanonicalUserOptions(){ _EL_   boolean result; _EL_   OptionHandler handler; _EL_   String[] userOptions; _EL_   String[] userOptionsCheck; _EL_   print("Canonical user options..."); _EL_   try { _EL_     handler=getDefaultHandler(); _EL_     handler.setOptions(getUserOptions()); _EL_     if (getDebug()) { _EL_       print("\\n  Getting canonical user options: "); _EL_     } _EL_     userOptions=handler.getOptions(); _EL_     if (getDebug()) { _EL_       println(printOptions(userOptions)); _EL_     } _EL_     if (getDebug()) { _EL_       println("  Setting canonical user options"); _EL_     } _EL_     handler.setOptions(userOptions.clone()); _EL_     if (getDebug()) { _EL_       println("  Checking canonical user options"); _EL_     } _EL_     userOptionsCheck=handler.getOptions(); _EL_     compareOptions(userOptions,userOptionsCheck); _EL_     println("yes"); _EL_     result=true; _EL_   } _EL_  catch (  Exception e) { _EL_     println("no"); _EL_     result=false; _EL_     if (getDebug()) { _EL_       println(e); _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public static void closeQuietly(final Closeable closeable){ _EL_   if (closeable != null) { _EL_     try { _EL_       closeable.close(); _EL_     } _EL_  catch (    final RuntimeException rethrown) { _EL_       throw rethrown; _EL_     } _EL_ catch (    final Exception ignored) { _EL_     } _EL_   } _EL_ } _EL_ ', 'public static void pushEncryptedMessage(final TextSecureEnvelope envelope){ _EL_   while (true) { _EL_     try { _EL_       queue.put(envelope); _EL_       return; _EL_     } _EL_  catch (    final InterruptedException e) { _EL_     } _EL_   } _EL_ } _EL_ ', 'public static int randomRangeInt(int min,int max){ _EL_   return (int)(Math.random() < 0.5 ? ((1 - Math.random()) * (max - min) + min) : (Math.random() * (max - min) + min)); _EL_ } _EL_ ', 'public void pushDrawList(PspGeList list){ _EL_ synchronized (drawListQueue) { _EL_     drawListQueue.add(list); _EL_   } _EL_ } _EL_ ', 'private void populateTaskList(Volume source,Map<BlockMirror,Volume> groupMirrorSourceMap,TaskList taskList,String taskId,ResourceOperationTypeEnum operationType){ _EL_   Set<URI> groupSet=new HashSet<URI>(); _EL_   addTask(taskList,source,taskId,operationType); _EL_   for (  Entry<BlockMirror,Volume> entry : groupMirrorSourceMap.entrySet()) { _EL_     BlockMirror mirror=entry.getKey(); _EL_     Volume mirrorSource=entry.getValue(); _EL_     if (source.isInCG() && null != taskList.getTaskList()) { _EL_       groupSet.add(mirrorSource.getConsistencyGroup()); _EL_     } _EL_   } _EL_   List<BlockConsistencyGroup> groups=_dbClient.queryObject(BlockConsistencyGroup.class,groupSet); _EL_   for (  BlockConsistencyGroup group : groups) { _EL_     addTask(taskList,group,taskId,operationType); _EL_   } _EL_ } _EL_ ', 'public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY,int overX,int overY){ _EL_   if (mFlywheel && !isFinished()) { _EL_     float oldVelocityX=mScrollerX.mCurrVelocity; _EL_     float oldVelocityY=mScrollerY.mCurrVelocity; _EL_     if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) { _EL_       velocityX+=oldVelocityX; _EL_       velocityY+=oldVelocityY; _EL_     } _EL_   } _EL_   mMode=FLING_MODE; _EL_   mScrollerX.fling(startX,velocityX,minX,maxX,overX); _EL_   mScrollerY.fling(startY,velocityY,minY,maxY,overY); _EL_ } _EL_ ', 'private static char[] zzUnpackCMap(String packed){ _EL_   char[] map=new char[0x10000]; _EL_   int i=0; _EL_   int j=0; _EL_   while (i < 178) { _EL_     int count=packed.charAt(i++); _EL_     char value=packed.charAt(i++); _EL_     do     map[j++]=value; _EL_  while (--count > 0); _EL_   } _EL_   return map; _EL_ } _EL_ ', 'public void closeStream(){ _EL_   CarbonUtil.closeStreams(stream); _EL_   executorService.shutdown(); _EL_ } _EL_ ', 'public double patience(int k,F f,int N){ _EL_   double pf=p(f); _EL_   BinomialDistribution dist=new BinomialDistribution(null,N,pf); _EL_   double p0=Math.pow(1 - pf,N); _EL_   return 1 - (dist.cumulativeProbability(k - 1) - p0) / (1 - p0); _EL_ } _EL_ ', 'public static List seriesNameListFromDataArray(Object[][] data){ _EL_   int seriesCount=data.length; _EL_   List seriesNameList=new java.util.ArrayList(seriesCount); _EL_   for (int i=0; i < seriesCount; i++) { _EL_     seriesNameList.add("Series " + (i + 1)); _EL_   } _EL_   return seriesNameList; _EL_ } _EL_ ', '@Override public int read(char b[],int off,int len) throws IOException { _EL_   ensureOpen(); _EL_   if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) { _EL_     throw new IndexOutOfBoundsException(); _EL_   } _EL_  else   if (len == 0) { _EL_     return 0; _EL_   } _EL_   if (pos >= count) { _EL_     return -1; _EL_   } _EL_   if (pos + len > count) { _EL_     len=count - pos; _EL_   } _EL_   if (len <= 0) { _EL_     return 0; _EL_   } _EL_   System.arraycopy(buf,pos,b,off,len); _EL_   pos+=len; _EL_   return len; _EL_ } _EL_ ', 'public static void CF6(double[] x,double[] f,double[] c,int nx){ _EL_   double sum1=0.0; _EL_   double sum2=0.0; _EL_   double yj; _EL_   for (int j=2; j <= nx; j++) { _EL_     if (j % 2 == 1) { _EL_       yj=x[j - 1] - 0.8 * x[0] * Math.cos(6.0 * PI * x[0] + j * PI / nx); _EL_       sum1+=yj * yj; _EL_     } _EL_  else { _EL_       yj=x[j - 1] - 0.8 * x[0] * Math.sin(6.0 * PI * x[0] + j * PI / nx); _EL_       sum2+=yj * yj; _EL_     } _EL_   } _EL_   f[0]=x[0] + sum1; _EL_   f[1]=(1.0 - x[0]) * (1.0 - x[0]) + sum2; _EL_   c[0]=x[1] - 0.8 * x[0] * Math.sin(6.0 * x[0] * PI + 2.0 * PI / nx) - MYSIGN((x[0] - 0.5) * (1.0 - x[0])) * Math.sqrt(Math.abs((x[0] - 0.5) * (1.0 - x[0]))); _EL_   c[1]=x[3] - 0.8 * x[0] * Math.sin(6.0 * x[0] * PI + 4.0 * PI / nx) - MYSIGN(0.25 * Math.sqrt(1 - x[0]) - 0.5 * (1.0 - x[0])) * Math.sqrt(Math.abs(0.25 * Math.sqrt(1 - x[0]) - 0.5 * (1.0 - x[0]))); _EL_ } _EL_ ', 'public static void f(String tag,String msg,Object... args){ _EL_   if (sLevel > LEVEL_FATAL) { _EL_     return; _EL_   } _EL_   if (args.length > 0) { _EL_     msg=String.format(msg,args); _EL_   } _EL_   Log.wtf(tag,msg); _EL_ } _EL_ ', 'private static void expandNumberAt(String numberString,int startIndex,WordRelation wordRelation){ _EL_   expandNumber(numberString.substring(startIndex,numberString.length()),wordRelation); _EL_ } _EL_ ', 'public static boolean nullEquals(String s1,String s2){ _EL_   return (s1 == null ? s2 == null : s1.equals(s2)); _EL_ } _EL_ ', '@Override public void run(){ _EL_   MultipleObjectsBundle data=generator.loadData(); _EL_   if (LOG.isVerbose()) { _EL_     LOG.verbose("Writing output ..."); _EL_   } _EL_   try { _EL_     if (outputFile.exists() && LOG.isVerbose()) { _EL_       LOG.verbose("The file " + outputFile + " already exists, "+ "the generator result will be APPENDED."); _EL_     } _EL_     try (OutputStreamWriter outStream=new FileWriter(outputFile,true)){ _EL_       writeClusters(outStream,data); _EL_     } _EL_    } _EL_  catch (  IOException e) { _EL_     throw new AbortException("IO Error in data generator.",e); _EL_   } _EL_   if (LOG.isVerbose()) { _EL_     LOG.verbose("Done."); _EL_   } _EL_ } _EL_ ', 'private boolean usedAllRule17Directors(Set<String> allocatedDirectors,PortAllocationContext context){ _EL_   Set<String> rule17Directors=getRule17Directors(context); _EL_   for (  String director : allocatedDirectors) { _EL_     rule17Directors.remove(director); _EL_   } _EL_   return rule17Directors.isEmpty(); _EL_ } _EL_ ', 'public void stop(){ _EL_ synchronized (privateInstanceLock) { _EL_     if (connectionAcceptThread == null) { _EL_       return; _EL_     } _EL_   } _EL_   isStopped.set(true); _EL_   try { _EL_     connectionAcceptThread.interrupt(); _EL_     connectionAcceptThread.join(); _EL_   } _EL_  catch (  InterruptedException e) { _EL_   } _EL_   try { _EL_     serverSocket.close(); _EL_   } _EL_  catch (  IOException e) { _EL_   } _EL_ } _EL_ ', 'private static String expandSystemIdStrictOn(String systemId,String baseSystemId) throws URI.MalformedURIException { _EL_   URI systemURI=new URI(systemId,true); _EL_   if (systemURI.isAbsoluteURI()) { _EL_     return systemId; _EL_   } _EL_   URI baseURI=null; _EL_   if (baseSystemId == null || baseSystemId.length() == 0) { _EL_     baseURI=getUserDir(); _EL_   } _EL_  else { _EL_     baseURI=new URI(baseSystemId,true); _EL_     if (!baseURI.isAbsoluteURI()) { _EL_       baseURI.absolutize(getUserDir()); _EL_     } _EL_   } _EL_   systemURI.absolutize(baseURI); _EL_   return systemURI.toString(); _EL_ } _EL_ ', 'public static void free(DMessage msg){ _EL_   int index=size2Index(msg.getSize()); _EL_   msg.clear(); _EL_   if (index < 0)   ; _EL_  else   if (m_cache[index] != null)   ; _EL_  else   m_cache[index]=msg; _EL_ } _EL_ ', 'protected static Long convertUuidToLong(UUID uuid){ _EL_   if (uuid == null) { _EL_     return null; _EL_   } _EL_   Long convertedUuid; _EL_   if (uuid.version() == 1) { _EL_     convertedUuid=uuid.timestamp(); _EL_   } _EL_  else { _EL_     convertedUuid=uuid.getMostSignificantBits(); _EL_   } _EL_   return convertedUuid; _EL_ } _EL_ ', 'public void addVMArguments(String vmArgumentName,String vmArgumentValue){ _EL_   VmArgumentData vmArg=new VmArgumentData(vmArgumentName,vmArgumentValue); _EL_   vmSet.add(vmArg); _EL_ } _EL_ ', 'private void applyTo(ClassVisitor v,Field f){ _EL_   if (Log.isLoggingOn()) { _EL_     Log.logLine(String.format("Visiting field %s",f.toGenericString())); _EL_   } _EL_   v.visit(f); _EL_ } _EL_ ', 'protected LocPathIterator changePartToRef(final QName uniquePseudoVarName,WalkingIterator wi,final int numSteps,final boolean isGlobal){ _EL_   Variable var=new Variable(); _EL_   var.setQName(uniquePseudoVarName); _EL_   var.setIsGlobal(isGlobal); _EL_   if (isGlobal) { _EL_     ElemTemplateElement elem=getElemFromExpression(wi); _EL_     StylesheetRoot root=elem.getStylesheetRoot(); _EL_     Vector vars=root.getVariablesAndParamsComposed(); _EL_     var.setIndex(vars.size() - 1); _EL_   } _EL_   AxesWalker walker=wi.getFirstWalker(); _EL_   for (int i=0; i < numSteps; i++) { _EL_     assertion(null != walker,"Walker should not be null!"); _EL_     walker=walker.getNextWalker(); _EL_   } _EL_   if (null != walker) { _EL_     FilterExprWalker few=new FilterExprWalker(wi); _EL_     few.setInnerExpression(var); _EL_     few.exprSetParent(wi); _EL_     few.setNextWalker(walker); _EL_     walker.setPrevWalker(few); _EL_     wi.setFirstWalker(few); _EL_     return wi; _EL_   } _EL_  else { _EL_     FilterExprIteratorSimple feis=new FilterExprIteratorSimple(var); _EL_     feis.exprSetParent(wi.exprGetParent()); _EL_     return feis; _EL_   } _EL_ } _EL_ ', "@Deprecated @Override public String readLine() throws IOException { _EL_   StringBuilder b=new StringBuilder(0); _EL_   int chr; _EL_   while ((chr=read()) >= 0) { _EL_     if (chr != '\\n') { _EL_       b.append((char)chr); _EL_     } _EL_  else { _EL_       return b.toString(); _EL_     } _EL_   } _EL_   return b.toString(); _EL_ } _EL_ ", 'private void addToScene(final Node items){ _EL_   collection.add(items); _EL_ } _EL_ ', 'public String documentationHomePageUrl(){ _EL_   return properties.getProperty("doc.homepage.url"); _EL_ } _EL_ ', 'public static boolean hasTaxonomyInfo(SequencesReader reader){ _EL_   final File taxonFile=new File(reader.path(),TAXONOMY_FILE); _EL_   final File mappingFile=new File(reader.path(),TAXONOMY_TO_SEQUENCE_FILE); _EL_   if (taxonFile.exists() && mappingFile.exists()) { _EL_     return true; _EL_   } _EL_  else   if (taxonFile.exists() || mappingFile.exists()) { _EL_     throw new NoTalkbackSlimException("Reference SDF does not contain both taxonomy and sequences lookup"); _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public void replace(ClassNode type,int n){ _EL_   remove(n); _EL_   push(type); _EL_ } _EL_ ', 'private static Boolean isInsidePolygon(final GeoPoint point,final List<GeoPoint> polyPoints){ _EL_   final double latitude=point.getLatitude(); _EL_   final double longitude=point.getLongitude(); _EL_   final double sinLatitude=Math.sin(latitude); _EL_   final double cosLatitude=Math.cos(latitude); _EL_   final double sinLongitude=Math.sin(longitude); _EL_   final double cosLongitude=Math.cos(longitude); _EL_   double arcDistance=0.0; _EL_   Double prevAngle=null; _EL_   for (  final GeoPoint polyPoint : polyPoints) { _EL_     final Double angle=computeAngle(polyPoint,sinLatitude,cosLatitude,sinLongitude,cosLongitude); _EL_     if (angle == null) { _EL_       return null; _EL_     } _EL_     if (prevAngle != null) { _EL_       double angleDelta=angle - prevAngle; _EL_       if (angleDelta < -Math.PI) { _EL_         angleDelta+=Math.PI * 2.0; _EL_       } _EL_       if (angleDelta > Math.PI) { _EL_         angleDelta-=Math.PI * 2.0; _EL_       } _EL_       if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) { _EL_         return null; _EL_       } _EL_       arcDistance+=angleDelta; _EL_     } _EL_     prevAngle=angle; _EL_   } _EL_   if (prevAngle != null) { _EL_     final Double lastAngle=computeAngle(polyPoints.get(0),sinLatitude,cosLatitude,sinLongitude,cosLongitude); _EL_     if (lastAngle == null) { _EL_       return null; _EL_     } _EL_     double angleDelta=lastAngle - prevAngle; _EL_     if (angleDelta < -Math.PI) { _EL_       angleDelta+=Math.PI * 2.0; _EL_     } _EL_     if (angleDelta > Math.PI) { _EL_       angleDelta-=Math.PI * 2.0; _EL_     } _EL_     if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) { _EL_       return null; _EL_     } _EL_     arcDistance+=angleDelta; _EL_   } _EL_   if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) { _EL_     return null; _EL_   } _EL_   return arcDistance > 0.0; _EL_ } _EL_ ', 'private Node deleteMax(Node x){ _EL_   if (x.right == null)   return x.left; _EL_   x.right=deleteMax(x.right); _EL_   x.size=1 + size(x.left) + size(x.right); _EL_   x.height=1 + Math.max(height(x.left),height(x.right)); _EL_   return balance(x); _EL_ } _EL_ ', 'public Week(Date time){ _EL_   this(time,TimeZone.getDefault(),Locale.getDefault()); _EL_ } _EL_ ', 'public BinaryOut(String filename){ _EL_   try { _EL_     OutputStream os=new FileOutputStream(filename); _EL_     out=new BufferedOutputStream(os); _EL_   } _EL_  catch (  IOException e) { _EL_     e.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException { _EL_   ObjectStreamClass newClassDesc=new ObjectStreamClass(); _EL_   String name=input.readUTF(); _EL_   if (name.length() == 0) { _EL_     throw new IOException("The stream is corrupted"); _EL_   } _EL_   newClassDesc.setName(name); _EL_   newClassDesc.setSerialVersionUID(input.readLong()); _EL_   newClassDesc.setFlags(input.readByte()); _EL_   if (descriptorHandle == -1) { _EL_     descriptorHandle=nextHandle(); _EL_   } _EL_   registerObjectRead(newClassDesc,descriptorHandle,false); _EL_   readFieldDescriptors(newClassDesc); _EL_   return newClassDesc; _EL_ } _EL_ ', 'public static boolean createNewFile(File targetFile){ _EL_   if (targetFile.exists())   targetFile.delete(); _EL_   try { _EL_     return targetFile.createNewFile(); _EL_   } _EL_  catch (  IOException e) { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'protected int executePrepareStatement(List<Column> columns,PreparedStatement statement) throws SQLException { _EL_   int bindNo=1; _EL_   for (  Column c : columns) { _EL_     setColumnValue(statement,bindNo,c); _EL_     bindNo++; _EL_   } _EL_   return statement.executeUpdate(); _EL_ } _EL_ ', 'public Config(SamlAuthorityConfiguration samlAuthorityConfig,TokenRestrictions tokenRestrictions,Collection<List<Certificate>> validCerts,long clockTolerance,Collection<IDPConfig> inExternalIdps){ _EL_   Validate.notNull(samlAuthorityConfig); _EL_   Validate.notNull(tokenRestrictions); _EL_   Validate.notEmpty(validCerts); _EL_   List<Certificate> authorityCert=samlAuthorityConfig.getSigningCertificateChain(); _EL_   boolean authorityCertInValidCerts=false; _EL_   for (  List<Certificate> currentChain : validCerts) { _EL_     Validate.notEmpty(currentChain); _EL_     Validate.noNullElements(currentChain); _EL_     if (!authorityCertInValidCerts && currentChain.equals(authorityCert)) { _EL_       authorityCertInValidCerts=true; _EL_     } _EL_   } _EL_   Validate.isTrue(authorityCertInValidCerts,"signing certificate chain is not in valid chains."); _EL_   Validate.isTrue(clockTolerance >= 0); _EL_   this.samlAuthorityConfig=samlAuthorityConfig; _EL_   this.validCerts=validCerts; _EL_   this.clockTolerance=clockTolerance; _EL_   this.tokenRestrictions=tokenRestrictions; _EL_   HashMap<String,IDPConfig> idpsSet=new HashMap<String,IDPConfig>(); _EL_   if (inExternalIdps != null) { _EL_     for (    IDPConfig conf : inExternalIdps) { _EL_       if (conf != null) { _EL_         idpsSet.put(conf.getEntityID(),conf); _EL_       } _EL_     } _EL_   } _EL_   this.externalIdps=Collections.unmodifiableMap(idpsSet); _EL_ } _EL_ ', 'public static void checkNotEmpty(String string){ _EL_   if (string.isEmpty()) { _EL_     throw new NullPointerException(); _EL_   } _EL_ } _EL_ ', 'public void cancelUnnamedTasks(){ _EL_   if (unnamedTaskExecutor != null) { _EL_     unnamedTaskExecutor.shutdownNow(); _EL_   } _EL_ } _EL_ ', 'public static double[] minmax(List<Double> values){ _EL_   if (values.size() == 0) { _EL_     return new double[2]; _EL_   } _EL_   double min=values.get(0); _EL_   double max=min; _EL_   int length=values.size(); _EL_   for (int i=1; i < length; i++) { _EL_     double value=values.get(i); _EL_     min=Math.min(min,value); _EL_     max=Math.max(max,value); _EL_   } _EL_   return new double[]{min,max}; _EL_ } _EL_ ', 'private void updateParamsForAuth(String[] authNames,List<Pair> queryParams,Map<String,String> headerParams){ _EL_   for (  String authName : authNames) { _EL_     Authentication auth=authentications.get(authName); _EL_     if (auth == null)     throw new RuntimeException("Authentication undefined: " + authName); _EL_     auth.applyToParams(queryParams,headerParams); _EL_   } _EL_ } _EL_ ', 'private void removeBookmarkTrackingIcons(){ _EL_   if (trackingIcons != null) { _EL_     for (Iterator i=trackingIcons.iterator(); i.hasNext(); ) { _EL_       GutterIconImpl ti=(GutterIconImpl)i.next(); _EL_       if (ti.getIcon() == bookmarkIcon) { _EL_         i.remove(); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public SimpleMetricGroup(GroupName name,Stream<? extends Metric> i){ _EL_   this(name,i.collect(Collectors.<Metric>toList())); _EL_ } _EL_ ', 'public boolean isInside(Point point){ _EL_   return bounds.contains(point); _EL_ } _EL_ ', 'private void resolveProtocols(ClassLoader loader){ _EL_   ServiceLoader<ProtocolManagerFactory> serviceLoader=ServiceLoader.load(ProtocolManagerFactory.class,loader); _EL_   loadProtocolManagerFactories(serviceLoader); _EL_ } _EL_ ', 'public static List<InetAddress> hostAddresses(){ _EL_   List<InetAddress> addrList=new ArrayList<>(); _EL_   Enumeration<NetworkInterface> IFCs=null; _EL_   try { _EL_     IFCs=NetworkInterface.getNetworkInterfaces(); _EL_   } _EL_  catch (  SocketException ex) { _EL_     log.error("Unable to get network interfaces.",ex); _EL_   } _EL_   if (IFCs != null) { _EL_     while (IFCs.hasMoreElements()) { _EL_       NetworkInterface IFC=IFCs.nextElement(); _EL_       try { _EL_         if (IFC.isUp()) { _EL_           Enumeration<InetAddress> addresses=IFC.getInetAddresses(); _EL_           while (addresses.hasMoreElements()) { _EL_             InetAddress address=addresses.nextElement(); _EL_             if (!address.isLoopbackAddress() && !address.isLinkLocalAddress()) { _EL_               addrList.add(address); _EL_             } _EL_           } _EL_         } _EL_       } _EL_  catch (      SocketException ex) { _EL_         log.error("Unable to read network interface {}.",IFC.toString(),ex); _EL_       } _EL_     } _EL_   } _EL_   return addrList; _EL_ } _EL_ ', 'public final static int caculateInSampleSize(BitmapFactory.Options options,int rqsW,int rqsH){ _EL_   final int height=options.outHeight; _EL_   final int width=options.outWidth; _EL_   int inSampleSize=1; _EL_   if (rqsW == 0 || rqsH == 0)   return 1; _EL_   if (height > rqsH || width > rqsW) { _EL_     final int heightRatio=Math.round((float)height / (float)rqsH); _EL_     final int widthRatio=Math.round((float)width / (float)rqsW); _EL_     inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio; _EL_   } _EL_   return inSampleSize; _EL_ } _EL_ ', 'public boolean hasStatus(final StatusID status){ _EL_   return statuses.contains(status); _EL_ } _EL_ ', 'static synchronized void computePRF_SSLv3(byte[] out,byte[] secret,byte[] seed){ _EL_   if (sha == null) { _EL_     init(); _EL_   } _EL_   int pos=0; _EL_   int iteration=1; _EL_   byte[] digest; _EL_   while (pos < out.length) { _EL_     byte[] pref=new byte[iteration]; _EL_     Arrays.fill(pref,(byte)(64 + iteration++)); _EL_     sha.update(pref); _EL_     sha.update(secret); _EL_     sha.update(seed); _EL_     md5.update(secret); _EL_     md5.update(sha.digest()); _EL_     digest=md5.digest(); _EL_     if (pos + 16 > out.length) { _EL_       System.arraycopy(digest,0,out,pos,out.length - pos); _EL_       pos=out.length; _EL_     } _EL_  else { _EL_       System.arraycopy(digest,0,out,pos,16); _EL_       pos+=16; _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public boolean add(E o){ _EL_   if (null == o) { _EL_     throw new NullPointerException(); _EL_   } _EL_   if (offer(o)) { _EL_     return true; _EL_   } _EL_   throw new IllegalStateException(); _EL_ } _EL_ ', 'public Object putResource(Object key,Object value){ _EL_   return (objectCache.put(key,value)); _EL_ } _EL_ ', "public UidRange[] parseUidRange() throws DecodingException { _EL_   CharacterValidator validator=new MessageSetCharValidator(); _EL_   String nextWord=consumeWord(validator,true); _EL_   int commaPos=nextWord.indexOf(','); _EL_   if (commaPos == -1) { _EL_     return new UidRange[]{parseUidRange(nextWord)}; _EL_   } _EL_   ArrayList<UidRange> rangeList=new ArrayList<UidRange>(); _EL_   int pos=0; _EL_   while (commaPos != -1) { _EL_     String range=nextWord.substring(pos,commaPos); _EL_     UidRange set=parseUidRange(range); _EL_     rangeList.add(set); _EL_     pos=commaPos + 1; _EL_     commaPos=nextWord.indexOf(',',pos); _EL_   } _EL_   String range=nextWord.substring(pos); _EL_   rangeList.add(parseUidRange(range)); _EL_   List<UidRange> merged=UidRange.mergeRanges(rangeList); _EL_   return merged.toArray(new UidRange[merged.size()]); _EL_ } _EL_ ", 'private String replaceSuffix(String value,String toReplace,String changeTo){ _EL_   String vvalue; _EL_   if ((value == null) || (toReplace == null) || (changeTo == null)) { _EL_     return value; _EL_   } _EL_   vvalue=removeSuffix(value,toReplace); _EL_   if (value.equals(vvalue)) { _EL_     return value; _EL_   } _EL_  else { _EL_     return vvalue + changeTo; _EL_   } _EL_ } _EL_ ', 'private void executeClaimedTask(ClaimedTask claimedTask){ _EL_   if (!claimedTask.setStartTime(new Date())) { _EL_     _log.info("Claimed task is overdue; range not scanned: {}",claimedTask.getTask()); _EL_     return; _EL_   } _EL_   ScanRangeTask task=claimedTask.getTask(); _EL_   boolean releaseTask=false; _EL_   try { _EL_     _scanWorkflow.renewScanRangeTasks(ImmutableList.of(task),QUEUE_RENEW_TTL); _EL_     releaseTask=asyncRangeScan(task); _EL_   } _EL_   finally { _EL_     unclaimTask(claimedTask,releaseTask); _EL_     _backgroundService.submit(_startScansIfAvailableRunnable); _EL_   } _EL_ } _EL_ ', 'private static boolean createNaviDirectory(){ _EL_   final File dir=new File(ConfigHelper.getConfigurationDirectory(Constants.COMPANY_NAME,Constants.PROJECT_NAME)); _EL_   return dir.exists() || dir.mkdir(); _EL_ } _EL_ ', 'public void updateButtonActionPerformed(){ _EL_   if (!readReceiveDelay()) { _EL_     return; _EL_   } _EL_   if (!readPulseWidth()) { _EL_     return; _EL_   } _EL_   if (!checkConsistency()) { _EL_     return; _EL_   } _EL_   if (curNode.getNodeType() != nodeType) { _EL_     curNode.setNodeType(nodeType); _EL_   } _EL_   setNodeParameters(); _EL_   changedNode=true; _EL_   editMode=false; _EL_   curNode=null; _EL_   addButton.setVisible(true); _EL_   editButton.setVisible(true); _EL_   deleteButton.setVisible(true); _EL_   doneButton.setVisible(true); _EL_   updateButton.setVisible(false); _EL_   cancelButton.setVisible(false); _EL_   nodeAddrField.setVisible(true); _EL_   nodeAddrStatic.setVisible(false); _EL_   statusText2.setText(stdStatus2); _EL_   statusText3.setText(stdStatus3); _EL_   statusText1.setText(rb.getString("FeedBackUpdate") + " " + Integer.toString(nodeAddress)); _EL_   errorInStatus1=true; _EL_ } _EL_ ', 'public static Class toClass(ClassFile cf,ClassLoader loader,ProtectionDomain domain) throws CannotCompileException { _EL_   try { _EL_     byte[] b=toBytecode(cf); _EL_     Method method; _EL_     Object[] args; _EL_     if (domain == null) { _EL_       method=defineClass1; _EL_       args=new Object[]{cf.getName(),b,new Integer(0),new Integer(b.length)}; _EL_     } _EL_  else { _EL_       method=defineClass2; _EL_       args=new Object[]{cf.getName(),b,new Integer(0),new Integer(b.length),domain}; _EL_     } _EL_     return toClass2(method,loader,args); _EL_   } _EL_  catch (  RuntimeException e) { _EL_     throw e; _EL_   } _EL_ catch (  java.lang.reflect.InvocationTargetException e) { _EL_     throw new CannotCompileException(e.getTargetException()); _EL_   } _EL_ catch (  Exception e) { _EL_     throw new CannotCompileException(e); _EL_   } _EL_ } _EL_ ', 'public Iterator<Target> targetIterator(){ _EL_   return targetList.iterator(); _EL_ } _EL_ ', 'private void fitSizeOfScrolledContent(){ _EL_   Point p=scrollComposite.getSize(); _EL_   main.setSize(main.computeSize(p.x,SWT.DEFAULT)); _EL_ } _EL_ ', 'public int hashCode(){ _EL_   return name.hashCode(); _EL_ } _EL_ ', 'private static Map<String,SnmpOid> buildPoolIndexMap(SnmpCachedData cached){ _EL_   if (cached == null)   return Collections.emptyMap(); _EL_   final SnmpOid[] indexes=cached.indexes; _EL_   final Object[] datas=cached.datas; _EL_   final int len=indexes.length; _EL_   final Map<String,SnmpOid> m=new HashMap<>(len); _EL_   for (int i=0; i < len; i++) { _EL_     final SnmpOid index=indexes[i]; _EL_     if (index == null)     continue; _EL_     final MemoryPoolMXBean mpm=(MemoryPoolMXBean)datas[i]; _EL_     if (mpm == null)     continue; _EL_     final String name=mpm.getName(); _EL_     if (name == null)     continue; _EL_     m.put(name,index); _EL_   } _EL_   return m; _EL_ } _EL_ ', 'public DCryptoStrength(JFrame parent) throws CryptoException { _EL_   super(parent,res.getString("DCryptoStrength.Title"),ModalityType.DOCUMENT_MODAL); _EL_   initComponents(); _EL_ } _EL_ ', 'private Component createSeparator(){ _EL_   JSeparator sep=new JSeparator(SwingConstants.VERTICAL); _EL_   sep.setPreferredSize(new Dimension(2,30)); _EL_   sep.setMinimumSize(new Dimension(2,30)); _EL_   return sep; _EL_ } _EL_ ', 'public void add(final T object){ _EL_ synchronized (mLock) { _EL_     mList.add(object); _EL_   } _EL_   notifyDataSetChanged(); _EL_ } _EL_ ', 'public void build(RealmResults<T> results){ _EL_   int xIndex=0; _EL_   for (  T object : results) { _EL_     mValues.add(buildEntryFromResultObject(object,xIndex++)); _EL_   } _EL_ } _EL_ ', 'public static double[][] computeWeightMatrix(final int quanth,final int quants,final int quantb){ _EL_   final int dim=quanth * quants * quantb; _EL_   assert (dim > 0); _EL_   final double[][] m=new double[dim][dim]; _EL_   for (int x=0; x < dim; x++) { _EL_     final int hx=x / (quantb * quants); _EL_     final int sx=(x / quantb) % quants; _EL_     final int bx=x % quantb; _EL_     for (int y=x; y < dim; y++) { _EL_       final int hy=y / (quantb * quants); _EL_       final int sy=(y / quantb) % quants; _EL_       final int by=y % quantb; _EL_       final double chx=Math.cos((hx + .5) / quanth * MathUtil.TWOPI); _EL_       final double chy=Math.cos((hy + .5) / quanth * MathUtil.TWOPI); _EL_       final double shx=MathUtil.cosToSin((hx + .5) / quanth * MathUtil.TWOPI,chx); _EL_       final double shy=MathUtil.cosToSin((hy + .5) / quanth * MathUtil.TWOPI,chy); _EL_       final double cos=chx * (sx + .5) / quants - chy * (sy + .5) / quants; _EL_       final double sin=shx * (sx + .5) / quants - shy * (sy + .5) / quants; _EL_       final double db=(bx - by) / (double)quantb; _EL_       final double val=1. - Math.sqrt((db * db + sin * sin + cos * cos) / 5); _EL_       m[x][y]=m[y][x]=val; _EL_     } _EL_   } _EL_   return m; _EL_ } _EL_ ', 'public static void openFileIntent(Context context,File openFile){ _EL_   if (context != null && openFile.exists()) { _EL_     try { _EL_       Intent intent=getFileIntent(context,openFile); _EL_       context.startActivity(intent); _EL_     } _EL_  catch (    Exception e) { _EL_       GlobalUtils.logThis(TAG,"openFileIntent Exception",e); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static PlainText plain(short text){ _EL_   return plain(Integer.toString(text)); _EL_ } _EL_ ', 'public AttributeInfo copy(ConstPool newCp,Map classnames){ _EL_   Copier copier=new Copier(info,constPool,newCp,classnames); _EL_   try { _EL_     copier.parameters(); _EL_     return new ParameterAnnotationsAttribute(newCp,getName(),copier.close()); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new RuntimeException(e.toString()); _EL_   } _EL_ } _EL_ ', 'private String createComponentChanges(){ _EL_   StringBuilder builder=new StringBuilder(); _EL_   for (  ServiceCatalogDiff serviceCatalogDiff : diffList) { _EL_     builder.append(createApiChanges(serviceCatalogDiff)); _EL_   } _EL_   return builder.toString(); _EL_ } _EL_ ', 'public static synchronized void it(String description,UnsafeBlock block){ _EL_   it(description,identity(),block); _EL_ } _EL_ ', 'void addString(int c){ _EL_   if (strpos == str.length) { _EL_     char newstr[]=new char[str.length + 128]; _EL_     System.arraycopy(str,0,newstr,0,str.length); _EL_     str=newstr; _EL_   } _EL_   str[strpos++]=(char)c; _EL_ } _EL_ ', '@Override public int hashCode(){ _EL_   return oid.hashCode(); _EL_ } _EL_ ', 'public CholeskyDecomposition(Matrix Arg){ _EL_   double[][] A=Arg.getArray(); _EL_   n=Arg.getRowDimension(); _EL_   L=new double[n][n]; _EL_   isspd=(Arg.getColumnDimension() == n); _EL_   for (int j=0; j < n; j++) { _EL_     double[] Lrowj=L[j]; _EL_     double d=0.0; _EL_     for (int k=0; k < j; k++) { _EL_       double[] Lrowk=L[k]; _EL_       double s=0.0; _EL_       for (int i=0; i < k; i++) { _EL_         s+=Lrowk[i] * Lrowj[i]; _EL_       } _EL_       Lrowj[k]=s=(A[j][k] - s) / L[k][k]; _EL_       d=d + s * s; _EL_       isspd=isspd & (A[k][j] == A[j][k]); _EL_     } _EL_     d=A[j][j] - d; _EL_     isspd=isspd & (d > 0.0); _EL_     L[j][j]=Math.sqrt(Math.max(d,0.0)); _EL_     for (int k=j + 1; k < n; k++) { _EL_       L[j][k]=0.0; _EL_     } _EL_   } _EL_ } _EL_ ', 'public static _Fields findByThriftId(int fieldId){ _EL_ switch (fieldId) { _EL_ case 1: _EL_     return TRUE_AS_OF_SECS; _EL_ case 2: _EL_   return SOURCE; _EL_ case 3: _EL_ return SYSTEM; _EL_ default : _EL_ return null; _EL_ } _EL_ } _EL_ ', 'public void addProperty(String key,String value){ _EL_   carbonProperties.setProperty(key,value); _EL_ } _EL_ ', 'protected JavaElementDelta createDeltaTree(IJavaElement element,JavaElementDelta delta){ _EL_   JavaElementDelta childDelta=delta; _EL_   ArrayList ancestors=getAncestors(element); _EL_   if (ancestors == null) { _EL_     if (equalsAndSameParent(delta.getElement(),getElement())) { _EL_       this.kind=delta.kind; _EL_       this.changeFlags=delta.changeFlags; _EL_       this.movedToHandle=delta.movedToHandle; _EL_       this.movedFromHandle=delta.movedFromHandle; _EL_     } _EL_   } _EL_  else { _EL_     for (int i=0, size=ancestors.size(); i < size; i++) { _EL_       IJavaElement ancestor=(IJavaElement)ancestors.get(i); _EL_       JavaElementDelta ancestorDelta=new JavaElementDelta(ancestor); _EL_       ancestorDelta.addAffectedChild(childDelta); _EL_       childDelta=ancestorDelta; _EL_     } _EL_   } _EL_   return childDelta; _EL_ } _EL_ ', 'public int size(){ _EL_   if (hmap == null) { _EL_     return 0; _EL_   } _EL_   return hmap.size(); _EL_ } _EL_ ', 'public static String replace(String inString,String oldPattern,String newPattern){ _EL_   if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) { _EL_     return inString; _EL_   } _EL_   StringBuilder sb=new StringBuilder(); _EL_   int pos=0; _EL_   int index=inString.indexOf(oldPattern); _EL_   int patLen=oldPattern.length(); _EL_   while (index >= 0) { _EL_     sb.append(inString.substring(pos,index)); _EL_     sb.append(newPattern); _EL_     pos=index + patLen; _EL_     index=inString.indexOf(oldPattern,pos); _EL_   } _EL_   sb.append(inString.substring(pos)); _EL_   return sb.toString(); _EL_ } _EL_ ', 'public boolean coordinateInZone(Id<ActivityFacility> zoneID,Coord coordinate){ _EL_   Point point=MGC.xy2Point(coordinate.getX(),coordinate.getY()); _EL_   return pointInZone(zoneID,point); _EL_ } _EL_ ', 'public String associatorTipText(){ _EL_   return "The base associator to be used."; _EL_ } _EL_ ', 'public XwavesLabelfileReader(Reader reader) throws IOException { _EL_   this.reader=new BufferedReader(reader); _EL_   parseLabels(); _EL_   reader.close(); _EL_ } _EL_ ', 'public static double parseDoubleDefault(String s,double def){ _EL_   if (s == null) { _EL_     return def; _EL_   } _EL_   try { _EL_     return Double.parseDouble(s); _EL_   } _EL_  catch (  NumberFormatException e) { _EL_     return def; _EL_   } _EL_ } _EL_ ', 'public static void registerApp(int application,String appName) throws AppIDException { _EL_   if ((application & APP_ID_MASK) != application) { _EL_     throw new InvalidAppIDValueException(application); _EL_   } _EL_   String oldApp=appIdMap.putIfAbsent(application,appName); _EL_   if (oldApp != null && !oldApp.equals(appName)) { _EL_     throw new AppIDInUseException(application,oldApp,appName); _EL_   } _EL_ } _EL_ ', 'public void print(char c){ _EL_   writer.print(c); _EL_ } _EL_ ', 'public void initBlockViews(){ _EL_   if (mWorkspaceView != null) { _EL_     List<Block> rootBlocks=mWorkspace.getRootBlocks(); _EL_     ConnectionManager connManager=mWorkspace.getConnectionManager(); _EL_     for (int i=0; i < rootBlocks.size(); i++) { _EL_       BlockGroup bg=mViewFactory.buildBlockGroupTree(rootBlocks.get(i),connManager,mTouchHandler); _EL_       mWorkspaceView.addView(bg); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected void clearAllTrails(SSOTokenID tokenID){ _EL_   boolean removed=false; _EL_   String key=tokenID.toString(); _EL_ synchronized (mapTokenIDs) { _EL_     removed=(mapTokenIDs.remove(key) != null); _EL_   } _EL_ } _EL_ ', 'public DNetscapeCaRevocationUrl(JDialog parent,byte[] value) throws IOException { _EL_   super(parent); _EL_   setTitle(res.getString("DNetscapeCaRevocationUrl.Title")); _EL_   initComponents(); _EL_   prepopulateWithValue(value); _EL_ } _EL_ ', 'public static int[] parseNumberList(String listStr,int minVal,int maxVal,boolean allowZero){ _EL_   int[] values; _EL_   if (listStr.indexOf(",") < 0) { _EL_     values=new int[1]; _EL_     values[0]=parseIntRange(listStr,minVal,maxVal,allowZero); _EL_   } _EL_  else { _EL_     String[] valueStrs=listStr.split(","); _EL_     int len=valueStrs.length; _EL_     values=new int[len]; _EL_     for (int i=0; i < len; i++) { _EL_       values[i]=parseIntRange(valueStrs[i],minVal,maxVal,allowZero); _EL_     } _EL_   } _EL_   return values; _EL_ } _EL_ ', 'public DirectoryOrFileNotFoundException(String entity,String name){ _EL_   super(String.format(_errorMessage,entity,name)); _EL_ } _EL_ ', "private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){ _EL_   int i; _EL_   if (av == null) { _EL_ switch (b[v] & 0xFF) { _EL_ case 'e': _EL_       return v + 5; _EL_ case '@': _EL_     return readAnnotationValues(v + 3,buf,true,null); _EL_ case '[': _EL_   return readAnnotationValues(v + 1,buf,false,null); _EL_ default : _EL_ return v + 3; _EL_ } _EL_ } _EL_ switch (b[v++] & 0xFF) { _EL_ case 'I': _EL_ case 'J': _EL_ case 'F': _EL_ case 'D': _EL_ av.visit(name,readConst(readUnsignedShort(v),buf)); _EL_ v+=2; _EL_ break; _EL_ case 'B': _EL_ av.visit(name,new Byte((byte)readInt(items[readUnsignedShort(v)]))); _EL_ v+=2; _EL_ break; _EL_ case 'Z': _EL_ av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE); _EL_ v+=2; _EL_ break; _EL_ case 'S': _EL_ av.visit(name,new Short((short)readInt(items[readUnsignedShort(v)]))); _EL_ v+=2; _EL_ break; _EL_ case 'C': _EL_ av.visit(name,new Character((char)readInt(items[readUnsignedShort(v)]))); _EL_ v+=2; _EL_ break; _EL_ case 's': _EL_ av.visit(name,readUTF8(v,buf)); _EL_ v+=2; _EL_ break; _EL_ case 'e': _EL_ av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf)); _EL_ v+=4; _EL_ break; _EL_ case 'c': _EL_ av.visit(name,Type.getType(readUTF8(v,buf))); _EL_ v+=2; _EL_ break; _EL_ case '@': _EL_ v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf))); _EL_ break; _EL_ case '[': _EL_ int size=readUnsignedShort(v); _EL_ v+=2; _EL_ if (size == 0) { _EL_ return readAnnotationValues(v - 2,buf,false,av.visitArray(name)); _EL_ } _EL_ switch (this.b[v++] & 0xFF) { _EL_ case 'B': _EL_ byte[] bv=new byte[size]; _EL_ for (i=0; i < size; i++) { _EL_ bv[i]=(byte)readInt(items[readUnsignedShort(v)]); _EL_ v+=3; _EL_ } _EL_ av.visit(name,bv); _EL_ --v; _EL_ break; _EL_ case 'Z': _EL_ boolean[] zv=new boolean[size]; _EL_ for (i=0; i < size; i++) { _EL_ zv[i]=readInt(items[readUnsignedShort(v)]) != 0; _EL_ v+=3; _EL_ } _EL_ av.visit(name,zv); _EL_ --v; _EL_ break; _EL_ case 'S': _EL_ short[] sv=new short[size]; _EL_ for (i=0; i < size; i++) { _EL_ sv[i]=(short)readInt(items[readUnsignedShort(v)]); _EL_ v+=3; _EL_ } _EL_ av.visit(name,sv); _EL_ --v; _EL_ break; _EL_ case 'C': _EL_ char[] cv=new char[size]; _EL_ for (i=0; i < size; i++) { _EL_ cv[i]=(char)readInt(items[readUnsignedShort(v)]); _EL_ v+=3; _EL_ } _EL_ av.visit(name,cv); _EL_ --v; _EL_ break; _EL_ case 'I': _EL_ int[] iv=new int[size]; _EL_ for (i=0; i < size; i++) { _EL_ iv[i]=readInt(items[readUnsignedShort(v)]); _EL_ v+=3; _EL_ } _EL_ av.visit(name,iv); _EL_ --v; _EL_ break; _EL_ case 'J': _EL_ long[] lv=new long[size]; _EL_ for (i=0; i < size; i++) { _EL_ lv[i]=readLong(items[readUnsignedShort(v)]); _EL_ v+=3; _EL_ } _EL_ av.visit(name,lv); _EL_ --v; _EL_ break; _EL_ case 'F': _EL_ float[] fv=new float[size]; _EL_ for (i=0; i < size; i++) { _EL_ fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)])); _EL_ v+=3; _EL_ } _EL_ av.visit(name,fv); _EL_ --v; _EL_ break; _EL_ case 'D': _EL_ double[] dv=new double[size]; _EL_ for (i=0; i < size; i++) { _EL_ dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)])); _EL_ v+=3; _EL_ } _EL_ av.visit(name,dv); _EL_ --v; _EL_ break; _EL_ default : _EL_ v=readAnnotationValues(v - 3,buf,false,av.visitArray(name)); _EL_ } _EL_ } _EL_ return v; _EL_ } _EL_ ", 'public static SIPHeader parseSIPHeader(String header) throws ParseException { _EL_   int start=0; _EL_   int end=header.length() - 1; _EL_   try { _EL_     while (header.charAt(start) <= 0x20)     start++; _EL_     while (header.charAt(end) <= 0x20)     end--; _EL_   } _EL_  catch (  ArrayIndexOutOfBoundsException e) { _EL_     throw new ParseException("Empty header.",0); _EL_   } _EL_   StringBuilder buffer=new StringBuilder(end + 1); _EL_   int i=start; _EL_   int lineStart=start; _EL_   boolean endOfLine=false; _EL_   while (i <= end) { _EL_     char c=header.charAt(i); _EL_     if (c == \'\\r\' || c == \'\\n\') { _EL_       if (!endOfLine) { _EL_         buffer.append(header.substring(lineStart,i)); _EL_         endOfLine=true; _EL_       } _EL_     } _EL_  else { _EL_       if (endOfLine) { _EL_         endOfLine=false; _EL_         if (c == \' \' || c == \'\\t\') { _EL_           buffer.append(\' \'); _EL_           lineStart=i + 1; _EL_         } _EL_  else { _EL_           lineStart=i; _EL_         } _EL_       } _EL_     } _EL_     i++; _EL_   } _EL_   buffer.append(header.substring(lineStart,i)); _EL_   buffer.append(\'\\n\'); _EL_   HeaderParser hp=ParserFactory.createParser(buffer.toString()); _EL_   if (hp == null)   throw new ParseException("could not create parser",0); _EL_   return hp.parse(); _EL_ } _EL_ ', 'private static int convertSRGBtoLinearRGB(int color){ _EL_   float input, output; _EL_   input=color / 255.0f; _EL_   if (input <= 0.04045f) { _EL_     output=input / 12.92f; _EL_   } _EL_  else { _EL_     output=(float)Math.pow((input + 0.055) / 1.055,2.4); _EL_   } _EL_   return Math.round(output * 255.0f); _EL_ } _EL_ ', 'static float rotateY(float pX,float pY,float cX,float cY,float angleInDegrees){ _EL_   double angle=Math.toRadians(angleInDegrees); _EL_   return (float)(Math.sin(angle) * (pX - cX) + Math.cos(angle) * (pY - cY) + cY); _EL_ } _EL_ ', 'public void addSplitEdges(List edgeList){ _EL_   addEndpoints(); _EL_   Iterator it=iterator(); _EL_   EdgeIntersection eiPrev=(EdgeIntersection)it.next(); _EL_   while (it.hasNext()) { _EL_     EdgeIntersection ei=(EdgeIntersection)it.next(); _EL_     Edge newEdge=createSplitEdge(eiPrev,ei); _EL_     edgeList.add(newEdge); _EL_     eiPrev=ei; _EL_   } _EL_ } _EL_ ', 'public IOUtils(){ _EL_   super(); _EL_ } _EL_ ', 'public MemBasedCache(int maxCacheSizeInBytes){ _EL_   mMaxCacheSizeInBytes=maxCacheSizeInBytes; _EL_   mDataEntries=new LinkedHashMap<String,CacheHeader>(16,.75f,true); _EL_ } _EL_ ', 'public void updateMaxTextWidths(float requiredWidth,float matchContentsWidth){ _EL_   mMaxRequiredWidth=Math.max(mMaxRequiredWidth,requiredWidth); _EL_   mMaxMatchContentsWidth=Math.max(mMaxMatchContentsWidth,matchContentsWidth); _EL_ } _EL_ ', 'public void enableOverview(boolean b){ _EL_   if (overviewItem != null) { _EL_     overviewItem.setEnabled(b); _EL_   } _EL_ } _EL_ ', 'public void mouseEntered(MouseEvent e){ _EL_   if (Debug.debugging("mousemodedetail")) { _EL_     Debug.output(getID() + "|NavMouseMode.mouseEntered()"); _EL_   } _EL_   super.mouseEntered(e); _EL_   autoZoom=true; _EL_ } _EL_ ', 'public PageOfCollections fetchPage(PageOfCollections page,SolrZkClient zkClient) throws KeeperException, InterruptedException { _EL_   List<String> children=getCollections(zkClient); _EL_   page.selected=children; _EL_   if (page.start == 0 && page.rows == -1 && page.filter == null && children.size() > 10) { _EL_     page.rows=20; _EL_     page.start=0; _EL_   } _EL_   if (page.filterType == FilterType.name && page.filter != null)   children=page.applyNameFilter(children); _EL_   if (page.filterType != FilterType.status)   page.selectPage(children); _EL_   return page; _EL_ } _EL_ ', 'public void accept(final AnnotationVisitor av){ _EL_   if (av != null) { _EL_     if (values != null) { _EL_       for (int i=0; i < values.size(); i+=2) { _EL_         String name=(String)values.get(i); _EL_         Object value=values.get(i + 1); _EL_         accept(av,name,value); _EL_       } _EL_     } _EL_     av.visitEnd(); _EL_   } _EL_ } _EL_ ', 'public IdsQueryBuilder addIds(String... ids){ _EL_   values.addAll(Arrays.asList(ids)); _EL_   return this; _EL_ } _EL_ ', 'private void stop(HttpServletRequest request,HttpServletResponse response) throws IOException { _EL_   PrintWriter out=response.getWriter(); _EL_   String label=request.getParameter("stop"); _EL_   Monitor mon=removeMon(label,null,DEFAULT_UNITS); _EL_   if (mon == null) { _EL_     out.println(ERROR + ": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel"); _EL_   } _EL_  else { _EL_     mon.stop(); _EL_     out.println(OK + ": stop successfully called on - " + mon); _EL_   } _EL_ } _EL_ ', 'public void invoke(InputStream is,OutputStream os,SerializerFactory serializerFactory) throws Exception { _EL_   boolean isDebug=false; _EL_   if (isDebugInvoke()) { _EL_     isDebug=true; _EL_     PrintWriter dbg=createDebugPrintWriter(); _EL_     HessianDebugInputStream dIs=new HessianDebugInputStream(is,dbg); _EL_     dIs.startTop2(); _EL_     is=dIs; _EL_     HessianDebugOutputStream dOs=new HessianDebugOutputStream(os,dbg); _EL_     dOs.startTop2(); _EL_     os=dOs; _EL_   } _EL_   HessianInputFactory.HeaderType header=_inputFactory.readHeader(is); _EL_   AbstractHessianInput in; _EL_   AbstractHessianOutput out; _EL_ switch (header) { _EL_ case CALL_1_REPLY_1: _EL_     in=_hessianFactory.createHessianInput(is); _EL_   out=_hessianFactory.createHessianOutput(os); _EL_ break; _EL_ case CALL_1_REPLY_2: _EL_ in=_hessianFactory.createHessianInput(is); _EL_ out=_hessianFactory.createHessian2Output(os); _EL_ break; _EL_ case HESSIAN_2: _EL_ in=_hessianFactory.createHessian2Input(is); _EL_ in.readCall(); _EL_ out=_hessianFactory.createHessian2Output(os); _EL_ break; _EL_ default : _EL_ throw new IllegalStateException(header + " is an unknown Hessian call"); _EL_ } _EL_ if (serializerFactory != null) { _EL_ in.setSerializerFactory(serializerFactory); _EL_ out.setSerializerFactory(serializerFactory); _EL_ } _EL_ try { _EL_ invoke(_service,in,out); _EL_ } _EL_   finally { _EL_ in.close(); _EL_ out.close(); _EL_ if (isDebug) os.close(); _EL_ } _EL_ } _EL_ ', 'private void commitLocalTransaction() throws CommitFailedException { _EL_   if (_tx == null) { _EL_     return; _EL_   } _EL_   if (_logger.isLoggable(Level.FINEST)) { _EL_     _logger.log(Level.FINEST,"Committing local transaction: " + _tx); _EL_   } _EL_   try { _EL_     _tx.commit(); _EL_   } _EL_  catch (  Exception e) { _EL_     if (_logger.isLoggable(Level.SEVERE)) { _EL_       _logger.log(Level.SEVERE,"Failed to commit local transaction: " + _tx,e); _EL_     } _EL_     throw new CommitFailedException(e); _EL_   } _EL_ } _EL_ ', 'public static Entry addObjectClass(Entry entry){ _EL_   Attribute attribute=entry.getAttribute(CoreTokenConstants.OBJECT_CLASS); _EL_   if (attribute == null) { _EL_     entry.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN); _EL_   } _EL_   return entry; _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public List<Boundary> populateArea(final Long wardId){ _EL_   HierarchyType hType=heirarchyTypeService.getHierarchyTypeByName(hierarchyTypeName); _EL_   ; _EL_   List<Boundary> areaList=new LinkedList<Boundary>(); _EL_   final BoundaryType childBoundaryType=boundaryTypeService.getBoundaryTypeByNameAndHierarchyType("Area",hType); _EL_   final Boundary parentBoundary=boundaryService.getBoundaryById(wardId); _EL_   areaList=new LinkedList(crossHeirarchyService.getCrossHierarchyChildrens(parentBoundary,childBoundaryType)); _EL_   LOGGER.info("***********Ajax AreaList: " + areaList.toString()); _EL_   return areaList; _EL_ } _EL_ ', 'public SimpleString concat(final char c){ _EL_   byte[] bytes=new byte[data.length + 2]; _EL_   System.arraycopy(data,0,bytes,0,data.length); _EL_   bytes[data.length]=(byte)(c & 0xFF); _EL_   bytes[data.length + 1]=(byte)(c >> 8 & 0xFF); _EL_   return new SimpleString(bytes); _EL_ } _EL_ ', 'public static double probToLogOdds(double prob){ _EL_   if (gr(prob,1) || (sm(prob,0))) { _EL_     throw new IllegalArgumentException("probToLogOdds: probability must " + "be in [0,1] " + prob); _EL_   } _EL_   double p=SMALL + (1.0 - 2 * SMALL) * prob; _EL_   return Math.log(p / (1 - p)); _EL_ } _EL_ ', 'private void signalNotEmpty(){ _EL_   final ReentrantLock takeLock=this.takeLock; _EL_   takeLock.lock(); _EL_   try { _EL_     notEmpty.signal(); _EL_   } _EL_   finally { _EL_     takeLock.unlock(); _EL_   } _EL_ } _EL_ ', 'public int nodeCount(){ _EL_   return nodes == null ? 0 : nodes.size(); _EL_ } _EL_ ', 'public void addToGlobalBlacklist(String host){ _EL_   addToGlobalBlacklist(host,System.currentTimeMillis() + this.globalBlacklistTimeout); _EL_ } _EL_ ', 'public boolean addNode(Lop node){ _EL_   if (nodes.contains(node))   return false; _EL_   nodes.add(node); _EL_   return true; _EL_ } _EL_ ', 'private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException { _EL_   s.defaultWriteObject(); _EL_   for (Node<K,V> n=findFirst(); n != null; n=n.next) { _EL_     V v=n.getValidValue(); _EL_     if (v != null) { _EL_       s.writeObject(n.key); _EL_       s.writeObject(v); _EL_     } _EL_   } _EL_   s.writeObject(null); _EL_ } _EL_ ', 'public static final double sigma(double a){ _EL_   return 1.0 / (1.0 + Math.exp(-a)); _EL_ } _EL_ ', 'public void insertOrRefresh(final KBucketEntry newEntry){ _EL_   if (newEntry == null)   return; _EL_   List<KBucketEntry> entriesRef=entries; _EL_   for (  KBucketEntry existing : entriesRef) { _EL_     if (existing.equals(newEntry)) { _EL_       existing.mergeInTimestamps(newEntry); _EL_       return; _EL_     } _EL_     if (existing.matchIPorID(newEntry)) { _EL_       DHT.logInfo("new node " + newEntry + " claims same ID or IP as "+ existing+ ", might be impersonation attack or IP change. ignoring until old entry times out"); _EL_       return; _EL_     } _EL_   } _EL_   if (newEntry.verifiedReachable()) { _EL_     if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) { _EL_       modifyMainBucket(null,newEntry); _EL_       return; _EL_     } _EL_     if (replaceBadEntry(newEntry))     return; _EL_     KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1); _EL_     if (youngest.getCreationTime() > newEntry.getCreationTime() || newEntry.getRTT() * 2.5 < youngest.getRTT()) { _EL_       modifyMainBucket(youngest,newEntry); _EL_       insertInReplacementBucket(youngest); _EL_       return; _EL_     } _EL_   } _EL_   insertInReplacementBucket(newEntry); _EL_ } _EL_ ', 'public void translate(double x,double y){ _EL_   currentTransform.translate(x,y); _EL_   try { _EL_     writeTransform(new AffineTransform(1,0,0,1,x,y)); _EL_   } _EL_  catch (  IOException e) { _EL_     handleException(e); _EL_   } _EL_ } _EL_ ', 'public static boolean isSupportedAddRPProtectionVirtualPoolChange(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff){ _EL_   s_logger.info(String.format("Checking isSupportedAddRPProtectionVirtualPoolChange from [%s] to [%s]...",currentVpool.getLabel(),newVpool.getLabel())); _EL_   if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) { _EL_     return false; _EL_   } _EL_   if (volume.checkForRp() || VirtualPool.vPoolSpecifiesProtection(currentVpool)) { _EL_     notSuppReasonBuff.append("Can\'t add RecoverPoint Protection since it already exists."); _EL_     return false; _EL_   } _EL_   if (!VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && VirtualPool.vPoolSpecifiesRPVPlex(newVpool)) { _EL_     notSuppReasonBuff.append("Can\'t add RecoverPoint+VPLEX Protection directly to non-VPLEX volume. Import to VPLEX first."); _EL_     return false; _EL_   } _EL_   if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && !VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(currentVpool) && VirtualPool.vPoolSpecifiesMetroPoint(newVpool)) { _EL_     notSuppReasonBuff.append("Can\'t add MetroPoint Protection directly to VPLEX Local volume. " + "Upgrade from VPLEX Local to VPLEX Distributed first."); _EL_     return false; _EL_   } _EL_   String[] include=new String[]{TYPE,VARRAYS,REF_VPOOL,MIRROR_VPOOL,FAST_EXPANSION,ACLS,INACTIVE,PROTOCOLS,PROVISIONING_TYPE,USE_MATCHED_POOLS,ARRAY_INFO,DRIVE_TYPE,AUTO_TIER_POLICY_NAME,HOST_IO_LIMIT_IOPS,HOST_IO_LIMIT_BANDWIDTH,VMAX_COMPRESSION_ENABLED,IS_THIN_VOLUME_PRE_ALLOCATION_ENABLED,ASSIGNED_STORAGE_POOLS}; _EL_   Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,include,null,null); _EL_   if (!changes.isEmpty()) { _EL_     notSuppReasonBuff.append("These target virtual pool differences are invalid: "); _EL_     fillInNotSupportedReasons(changes,notSuppReasonBuff); _EL_     return false; _EL_   } _EL_   include=new String[]{PROTECTION_VARRAY_SETTINGS}; _EL_   changes=analyzeChanges(currentVpool,newVpool,include,null,null); _EL_   if (changes.isEmpty()) { _EL_     notSuppReasonBuff.append("These target virtual pool differences are required: "); _EL_     fillInNotSupportedReasons(changes,notSuppReasonBuff); _EL_     return false; _EL_   } _EL_   if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && (VirtualPool.vPoolSpecifiesRPVPlex(newVpool) || VirtualPool.vPoolSpecifiesMetroPoint(newVpool))) { _EL_     VirtualPoolChangeOperationEnum op=vplexCommonChecks(volume,currentVpool,newVpool,dbClient,notSuppReasonBuff,include); _EL_     if (op == null || !op.equals(VirtualPoolChangeOperationEnum.RP_PROTECTED)) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', "private static void writeSpaces(Writer out,int amt) throws IOException { _EL_   while (amt > 0) { _EL_     out.write(' '); _EL_     amt--; _EL_   } _EL_ } _EL_ ", 'public static double relativeOverlap(SpatialComparable box1,SpatialComparable box2){ _EL_   final int dim=assertSameDimensionality(box1,box2); _EL_   double overlap=1.; _EL_   double vol1=1.; _EL_   double vol2=1.; _EL_   for (int i=0; i < dim; i++) { _EL_     final double box1min=box1.getMin(i); _EL_     final double box1max=box1.getMax(i); _EL_     final double box2min=box2.getMin(i); _EL_     final double box2max=box2.getMax(i); _EL_     final double omax=Math.min(box1max,box2max); _EL_     final double omin=Math.max(box1min,box2min); _EL_     if (omax <= omin) { _EL_       return 0.; _EL_     } _EL_     overlap*=omax - omin; _EL_     vol1*=box1max - box1min; _EL_     vol2*=box2max - box2min; _EL_   } _EL_   return overlap / (vol1 + vol2); _EL_ } _EL_ ', 'protected void handleAutoDraw(){ _EL_   if (isToolItemSelected(ToolBarItemKey.AUTO_DRAW)) { _EL_     onAutoDraw(); _EL_   } _EL_ } _EL_ ', 'protected final void _loadToHaveAtLeast(int minAvailable) throws IOException { _EL_   if (_inputStream == null) { _EL_     throw _constructError("Needed to read " + minAvailable + " bytes, reached end-of-input"); _EL_   } _EL_   int amount=_inputEnd - _inputPtr; _EL_   _currInputProcessed+=_inputPtr; _EL_   if (amount > 0 && _inputPtr > 0) { _EL_     System.arraycopy(_inputBuffer,_inputPtr,_inputBuffer,0,amount); _EL_     _inputEnd=amount; _EL_   } _EL_  else { _EL_     _inputEnd=0; _EL_   } _EL_   _inputPtr=0; _EL_   while (_inputEnd < minAvailable) { _EL_     int count=_inputStream.read(_inputBuffer,_inputEnd,_inputBuffer.length - _inputEnd); _EL_     if (count < 1) { _EL_       _closeInput(); _EL_       if (count == 0) { _EL_         throw new IOException("InputStream.read() returned 0 characters when trying to read " + amount + " bytes"); _EL_       } _EL_       throw _constructError("Needed to read " + minAvailable + " bytes, missed "+ minAvailable+ " before end-of-input"); _EL_     } _EL_     _inputEnd+=count; _EL_   } _EL_ } _EL_ ', 'public Z21Message(byte[] a,int l){ _EL_   super(String.valueOf(a)); _EL_   setBinary(true); _EL_ } _EL_ ', 'public static Properties parsePropertyList(String list) throws PropertyStringFormatException { _EL_   return parsePropertyList(list,propertySeparators,keyValueSeparators); _EL_ } _EL_ ', 'public boolean packageHasAnnotation(Annotation annotation){ _EL_   try { _EL_     Package pkg=type.getPackage(); _EL_     if (pkg == null) { _EL_       return false; _EL_     } _EL_     String className=pkg.getName() + ".package-info"; _EL_     Class<?> packageType=Class.forName(className); _EL_     AnnotationAccessor accessor=new AnnotationAccessor(supportedAnnotations,packageType,ignoreAnnotationFailure); _EL_     return accessor.typeHas(annotation); _EL_   } _EL_  catch (  ClassNotFoundException e) { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'private String buildToolTip(final CTaggedGraphNodesContainerNode node){ _EL_   final StringBuilder tooltip=new StringBuilder("<html>"); _EL_   boolean first=true; _EL_   for (  final NaviNode graphnode : node.getGraphNodes()) { _EL_     if (!first) { _EL_       tooltip.append("<br>"); _EL_     } _EL_     tooltip.append(CNodesDisplayString.getDisplayString(graphnode)); _EL_     first=false; _EL_   } _EL_   return tooltip + "</html>"; _EL_ } _EL_ ', 'public boolean removeOnItemClickListener(OnItemClickListener itemClickListener){ _EL_   return clickListeners.remove(itemClickListener); _EL_ } _EL_ ', '@Override protected int lookForSelectablePosition(int position,boolean lookDown){ _EL_   final ListAdapter adapter=mAdapter; _EL_   if (adapter == null || isInTouchMode()) { _EL_     return INVALID_POSITION; _EL_   } _EL_   final int count=adapter.getCount(); _EL_   if (!mAreAllItemsSelectable) { _EL_     if (lookDown) { _EL_       position=Math.max(0,position); _EL_       while (position < count && !adapter.isEnabled(position)) { _EL_         position++; _EL_       } _EL_     } _EL_  else { _EL_       position=Math.min(position,count - 1); _EL_       while (position >= 0 && !adapter.isEnabled(position)) { _EL_         position--; _EL_       } _EL_     } _EL_     if (position < 0 || position >= count) { _EL_       return INVALID_POSITION; _EL_     } _EL_     return position; _EL_   } _EL_  else { _EL_     if (position < 0 || position >= count) { _EL_       return INVALID_POSITION; _EL_     } _EL_     return position; _EL_   } _EL_ } _EL_ ', 'public static String padRight(final String s,final int length){ _EL_   final int pad=length - s.length(); _EL_   return pad > 0 ? s + getSpaceString(pad) : s; _EL_ } _EL_ ', 'private static String[] collationMatchingRuleNames(final List<String> localeNames,final int numSuffix,final String symbolicSuffix){ _EL_   final List<String> names=new ArrayList<>(); _EL_   for (  String localeName : localeNames) { _EL_     if (symbolicSuffix.isEmpty()) { _EL_       names.add(localeName); _EL_     } _EL_  else { _EL_       names.add(localeName + "." + numSuffix); _EL_       names.add(localeName + "." + symbolicSuffix); _EL_     } _EL_   } _EL_   return names.toArray(new String[names.size()]); _EL_ } _EL_ ', 'public static boolean isCacheSafe(Class<?> clazz,ClassLoader classLoader){ _EL_   Assert.notNull(clazz,"Class must not be null"); _EL_   ClassLoader target=clazz.getClassLoader(); _EL_   if (target == null) { _EL_     return false; _EL_   } _EL_   ClassLoader cur=classLoader; _EL_   if (cur == target) { _EL_     return true; _EL_   } _EL_   while (cur != null) { _EL_     cur=cur.getParent(); _EL_     if (cur == target) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'static Part from(String encoded,String decoded){ _EL_   if (encoded == null) { _EL_     return NULL; _EL_   } _EL_   if (encoded.length() == 0) { _EL_     return EMPTY; _EL_   } _EL_   if (decoded == null) { _EL_     return NULL; _EL_   } _EL_   if (decoded.length() == 0) { _EL_     return EMPTY; _EL_   } _EL_   return new Part(encoded,decoded); _EL_ } _EL_ ', 'private int[] createEpochMonths(int epochDay,int minYear,int maxYear,Map<Integer,int[]> years){ _EL_   int numMonths=(maxYear - minYear + 1) * 12 + 1; _EL_   int epochMonth=0; _EL_   int[] epochMonths=new int[numMonths]; _EL_   minMonthLength=Integer.MAX_VALUE; _EL_   maxMonthLength=Integer.MIN_VALUE; _EL_   for (int year=minYear; year <= maxYear; year++) { _EL_     int[] months=years.get(year); _EL_     for (int month=0; month < 12; month++) { _EL_       int length=months[month]; _EL_       epochMonths[epochMonth++]=epochDay; _EL_       if (length < 29 || length > 32) { _EL_         throw new IllegalArgumentException("Invalid month length in year: " + minYear); _EL_       } _EL_       epochDay+=length; _EL_       minMonthLength=Math.min(minMonthLength,length); _EL_       maxMonthLength=Math.max(maxMonthLength,length); _EL_     } _EL_   } _EL_   epochMonths[epochMonth++]=epochDay; _EL_   if (epochMonth != epochMonths.length) { _EL_     throw new IllegalStateException("Did not fill epochMonths exactly: ndx = " + epochMonth + " should be "+ epochMonths.length); _EL_   } _EL_   return epochMonths; _EL_ } _EL_ ', 'public Subscription register(Object mBean,MBeanDescription description){ _EL_   return register(mBean,description.getMBeanName(getNextId())); _EL_ } _EL_ ', 'void checkAfterUnmarshalled(){ _EL_   assertEquals(shortVal.shortValue(),0x1122); _EL_   assertEquals(longVal,0x8877665544332211L); _EL_   assertNull(aArr); _EL_   assertNull(strVal); _EL_   assertEquals(doubleVal,123.456); _EL_ } _EL_ ', '@SuppressWarnings("unchecked") protected Object fromReflectionType(final Object value){ _EL_   FieldDescriptor descriptor=getDescriptor(); _EL_   if (descriptor.isRepeated()) { _EL_     if (descriptor.getJavaType() == FieldDescriptor.JavaType.MESSAGE || descriptor.getJavaType() == FieldDescriptor.JavaType.ENUM) { _EL_       final List result=new ArrayList(); _EL_       for (      final Object element : (List)value) { _EL_         result.add(singularFromReflectionType(element)); _EL_       } _EL_       return result; _EL_     } _EL_  else { _EL_       return value; _EL_     } _EL_   } _EL_  else { _EL_     return singularFromReflectionType(value); _EL_   } _EL_ } _EL_ ', 'public void registerManufacturerSpecificBuilder(int companyId,ADManufacturerSpecificBuilder builder){ _EL_   if (companyId < 0 || 0xFFFF < companyId) { _EL_     String message=String.format("\'companyId\' is out of the valid range: %d",companyId); _EL_     throw new IllegalArgumentException(message); _EL_   } _EL_   if (builder == null) { _EL_     return; _EL_   } _EL_   Integer key=Integer.valueOf(companyId); _EL_   List<ADManufacturerSpecificBuilder> builders=mMSBuilders.get(key); _EL_   if (builders == null) { _EL_     builders=new ArrayList<ADManufacturerSpecificBuilder>(); _EL_     mMSBuilders.put(key,builders); _EL_   } _EL_   builders.add(0,builder); _EL_ } _EL_ ', 'private void forceOverflow(){ _EL_   forceOverflow(); _EL_ } _EL_ ', 'public int find(String string){ _EL_   if (string == null) { _EL_     return -1; _EL_   } _EL_   for (int i=0; i != m_stringOffsets.length; ++i) { _EL_     int offset=m_stringOffsets[i]; _EL_     int length=getShort(m_strings,offset); _EL_     if (length != string.length()) { _EL_       continue; _EL_     } _EL_     int j=0; _EL_     for (; j != length; ++j) { _EL_       offset+=2; _EL_       if (string.charAt(j) != getShort(m_strings,offset)) { _EL_         break; _EL_       } _EL_     } _EL_     if (j == length) { _EL_       return i; _EL_     } _EL_   } _EL_   return -1; _EL_ } _EL_ ', 'public String prepOperand(String label,DataType dt,ValueType vt,boolean literal){ _EL_   StringBuilder sb=new StringBuilder(); _EL_   sb.append(label); _EL_   sb.append(Lop.DATATYPE_PREFIX); _EL_   sb.append(dt); _EL_   sb.append(Lop.VALUETYPE_PREFIX); _EL_   sb.append(vt); _EL_   sb.append(Lop.LITERAL_PREFIX); _EL_   sb.append(literal); _EL_   return sb.toString(); _EL_ } _EL_ ', 'public static EjbJarXmlVersion valueOf(DocumentType docType) throws NullPointerException { _EL_   return valueOf(docType.getPublicId()); _EL_ } _EL_ ', 'public static void print(int x){ _EL_   out.print(x); _EL_   out.flush(); _EL_ } _EL_ ', 'public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException { _EL_   try { _EL_     AuthPropertiesModel model=(AuthPropertiesModel)getModel(); _EL_     Map original=model.getValues(); _EL_     AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE); _EL_     model.setValues(ps.getAttributeValues(original,true,model)); _EL_     setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","authentication.profile.updated"); _EL_   } _EL_  catch (  AMConsoleException a) { _EL_     setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",a.getMessage()); _EL_   } _EL_   forwardTo(); _EL_ } _EL_ ', 'private void buildDescriptionPanel(final Composite parent){ _EL_   descriptionLabel=new StyledText(parent,SWT.READ_ONLY); _EL_   descriptionLabel.setText(""); _EL_   descriptionLabel.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true,1,1)); _EL_ } _EL_ ', 'public HttpMethodClient(){ _EL_   this(5000,10000,3 * 60000); _EL_ } _EL_ ', 'String decodeTextValue(byte[] data) throws IOException { _EL_   boolean isCompressed=((data.length > 1) && (data[0] == TEXT_COMPRESSION_HEADER[0]) && (data[1] == TEXT_COMPRESSION_HEADER[1])); _EL_   if (isCompressed) { _EL_     StringBuilder textBuf=new StringBuilder(data.length); _EL_     int dataStart=TEXT_COMPRESSION_HEADER.length; _EL_     int dataEnd=dataStart; _EL_     boolean inCompressedMode=true; _EL_     while (dataEnd < data.length) { _EL_       if (data[dataEnd] == (byte)0x00) { _EL_         decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf); _EL_         inCompressedMode=!inCompressedMode; _EL_         ++dataEnd; _EL_         dataStart=dataEnd; _EL_       } _EL_  else { _EL_         ++dataEnd; _EL_       } _EL_     } _EL_     decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf); _EL_     return textBuf.toString(); _EL_   } _EL_   return decodeUncompressedText(data,getCharset()); _EL_ } _EL_ ', 'private <S,T>Set<T> extract(final Collection<S> collection,final Extractor<S,T> extractor){ _EL_   final Set<T> values=new HashSet<T>(collection.size()); _EL_   for (  final S instance : collection) { _EL_     values.add(extractor.getValue(instance)); _EL_   } _EL_   return values; _EL_ } _EL_ ', 'public static boolean isZTE(){ _EL_   return sBuildModel.startsWith("zte"); _EL_ } _EL_ ', 'static public String normalizeToEncoding(String origString_,Charset encoding_){ _EL_   String normString=origString_; _EL_   CharsetEncoder encoder=encoding_.newEncoder(); _EL_   if (!encoder.canEncode(origString_)) { _EL_     final int length=origString_.length(); _EL_     char[] normSeq=new char[(origString_.length())]; _EL_     int charNum=0; _EL_     for (int offset=0; offset < length; ) { _EL_       Pair<Character,Integer> replacement=normalizeCodepoint(origString_,encoding_,offset); _EL_       Character replacedChar=replacement.getFirst(); _EL_       int codepoint=replacement.getSecond(); _EL_       if (null != replacedChar) { _EL_         normSeq[charNum]=replacedChar; _EL_         charNum++; _EL_       } _EL_       offset+=Character.charCount(codepoint); _EL_     } _EL_     normString=new String(normSeq); _EL_   } _EL_   return normString; _EL_ } _EL_ ', 'private FastConcurrentSkipListMap.Node<K,V> loNode(){ _EL_   if (lo == null)   return m.findFirst(); _EL_  else   if (loInclusive)   return m.findNear(lo,m.GT | m.EQ); _EL_  else   return m.findNear(lo,m.GT); _EL_ } _EL_ ', 'public Line3D(Stack<Vector3> points,float thickness,int[] colors,boolean createVBOs){ _EL_   super(); _EL_   mPoints=points; _EL_   mLineThickness=thickness; _EL_   mColors=colors; _EL_   if (colors != null && colors.length != points.size())   throw new RuntimeException("The number of line points and colors is not the same."); _EL_   init(createVBOs); _EL_ } _EL_ ', 'public static byte[] asUnsignedByteArray(BigInteger value){ _EL_   byte[] bytes=value.toByteArray(); _EL_   if (bytes[0] == 0) { _EL_     byte[] tmp=new byte[bytes.length - 1]; _EL_     System.arraycopy(bytes,1,tmp,0,tmp.length); _EL_     return tmp; _EL_   } _EL_   return bytes; _EL_ } _EL_ ', 'public static float approximateLength(float controlPoints[][]){ _EL_   float length=0; _EL_   for (int i=0; i < controlPoints.length - 1; i++) { _EL_     float xDif=controlPoints[i + 1][0] - controlPoints[i][0]; _EL_     float yDif=controlPoints[i + 1][1] - controlPoints[i][1]; _EL_     float zDif=controlPoints[i + 1][2] - controlPoints[i][2]; _EL_     length+=Math.sqrt(xDif * xDif + yDif * yDif + zDif * zDif); _EL_   } _EL_   return length; _EL_ } _EL_ ', 'protected int mapDragOperationFromModifiers(MouseEvent e){ _EL_   int mods=e.getModifiersEx(); _EL_   int btns=mods & ButtonMask; _EL_   if (!(btns == InputEvent.BUTTON1_DOWN_MASK || btns == InputEvent.BUTTON2_DOWN_MASK)) { _EL_     return DnDConstants.ACTION_NONE; _EL_   } _EL_   return SunDragSourceContextPeer.convertModifiersToDropAction(mods,getSourceActions()); _EL_ } _EL_ ', 'public UpdateClause addAssignment(Expression expression){ _EL_   assignments.add(new Assignment(expression)); _EL_   return this; _EL_ } _EL_ ', 'private boolean stepValue(){ _EL_   while (true) { _EL_     if (iter != null && iter.hasNext()) { _EL_       svcs=(ArrayList)iter.next(); _EL_       svcidx=svcs.size(); _EL_       return true; _EL_     } _EL_     if (!stepClass())     return false; _EL_     if (iter == null)     return true; _EL_   } _EL_ } _EL_ ', 'public void hasNetworkConnection(NetworkRequestCheckListener listener){ _EL_   if (hasNetworkConnection()) { _EL_     testNetworkRequest(listener); _EL_   } _EL_  else { _EL_     listener.onNoResponse(); _EL_   } _EL_ } _EL_ ', 'public void assignThreadForSubscriber(@NonNull Object subscriber){ _EL_   Looper looper=Looper.myLooper(); _EL_   if (looper != null) { _EL_     mSubscribersDefaultThreads.put(new IdentityWeakReferenceKey<>(subscriber),looper != Looper.getMainLooper() ? new Handler(looper) : mUiThreadHandler); _EL_   } _EL_  else { _EL_     mSubscribersDefaultThreads.remove(new IdentityWeakReferenceKey<>(subscriber)); _EL_   } _EL_ } _EL_ ', 'public static boolean typeCheck(Class type,Object instance){ _EL_   return type.isAssignableFrom(instance.getClass()) || isWrapperInstance(type,instance); _EL_ } _EL_ ', 'public synchronized void init(){ _EL_   ArrayList<Warrant> tempList=new ArrayList<Warrant>(); _EL_   List<String> systemNameList=_manager.getSystemNameList(); _EL_   Iterator<String> iter=systemNameList.iterator(); _EL_   while (iter.hasNext()) { _EL_     Warrant w=_manager.getBySystemName(iter.next()); _EL_     if (!_warList.contains(w)) { _EL_       w.addPropertyChangeListener(this); _EL_     } _EL_  else { _EL_       _warList.remove(w); _EL_     } _EL_     tempList.add(w); _EL_   } _EL_   for (int i=0; i < _warList.size(); i++) { _EL_     Warrant w=_warList.get(i); _EL_     if (!_warNX.contains(w)) { _EL_       w.removePropertyChangeListener(this); _EL_     } _EL_   } _EL_   for (int i=0; i < _warNX.size(); i++) { _EL_     tempList.add(_warNX.get(i)); _EL_   } _EL_   _warList=tempList; _EL_ } _EL_ ', 'public void addCommand(Command cmd,int offset){ _EL_   menuBar.addCommand(cmd,offset); _EL_ } _EL_ ', 'private double normalDens(double x,double mean,double stdDev){ _EL_   double diff=x - mean; _EL_   return (1 / (m_normConst * stdDev)) * Math.exp(-(diff * diff / (2 * stdDev * stdDev))); _EL_ } _EL_ ', 'private static void drawShape(GL2 gl,Shape s){ _EL_   PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness); _EL_   float[] lastMoveTo=new float[6]; _EL_   float[] f=new float[6]; _EL_   while (!it.isDone()) { _EL_     int res=it.currentSegment(f); _EL_ switch (res) { _EL_ case PathIterator.SEG_CLOSE: _EL_       GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]); _EL_     break; _EL_ case PathIterator.SEG_MOVETO: _EL_   GLPanel.V(gl,f[0],f[1]); _EL_ System.arraycopy(f,0,lastMoveTo,0,6); _EL_ break; _EL_ case PathIterator.SEG_LINETO: _EL_ GLPanel.V(gl,f[0],f[1]); _EL_ break; _EL_ case PathIterator.SEG_CUBICTO: _EL_ CubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]); _EL_ drawShape(gl,c); _EL_ break; _EL_ default : _EL_ throw new Error("Error while drawing AWT shape. " + "Path iterator setment not handled:" + res); _EL_ } _EL_ it.next(); _EL_ } _EL_ } _EL_ ', '@Override protected void tearDown() throws NamingException, JMSException { _EL_   NamingEnumeration<Binding> iter=context.listBindings(""); _EL_   while (iter.hasMore()) { _EL_     Binding binding=iter.next(); _EL_     Object connFactory=binding.getObject(); _EL_     if (connFactory instanceof ActiveMQConnectionFactory) { _EL_     } _EL_   } _EL_ } _EL_ ', 'protected List<URI> load(final InputStream in) throws SAXException, IOException { _EL_   SAXParser saxParser; _EL_   final SAXParserFactory factory=SAXParserFactory.newInstance(); _EL_   try { _EL_     saxParser=factory.newSAXParser(); _EL_   } _EL_  catch (  final ParserConfigurationException ex) { _EL_     throw new SAXException(ex); _EL_   } _EL_   groups=new LinkedList<URI>(); _EL_   saxParser.parse(in,this); _EL_   return groups; _EL_ } _EL_ ', 'public final void lazySet(long newValue){ _EL_   unsafe.putOrderedLong(this,valueOffset,newValue); _EL_ } _EL_ ', '@Deprecated public static String Collection2String(Collection<?> in,String separator){ _EL_   if (in == null) { _EL_     return null; _EL_   } _EL_   return Iterator2String(in.iterator(),separator); _EL_ } _EL_ ', 'public static byte[] decodeBase64(String base64Str){ _EL_   return DatatypeConverter.parseBase64Binary(base64Str); _EL_ } _EL_ ', 'protected void removeAllPremoveDrops(){ _EL_   for (  PremoveInfo info : premoves.toArray(new PremoveInfo[0])) { _EL_     if (info.isPremoveDrop) { _EL_       premoves.remove(info); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void stop(){ _EL_   _throttle.setSpeedSetting(-0.5F); _EL_   _throttle.setSpeedSetting(0.0F); _EL_   stopLabel.setIcon(stopIcon); _EL_   stopLabel.setIconTextGap(_gap); _EL_   pack(); _EL_ } _EL_ ', 'public void encode(OutputStream out) throws IOException { _EL_   DerOutputStream tmp=new DerOutputStream(); _EL_   dnName.encode(tmp); _EL_   out.write(tmp.toByteArray()); _EL_ } _EL_ ', 'public void makeDirty(){ _EL_   betaChanged=true; _EL_   newMode=true; _EL_   precisionChanged=true; _EL_   regressionInterface.makeDirty(instance); _EL_ } _EL_ ', 'private ArrayList<E> toArrayList(){ _EL_   ArrayList<E> list=new ArrayList<E>(); _EL_   for (Node<E> p=first(); p != null; p=succ(p)) { _EL_     E item=p.item; _EL_     if (item != null)     list.add(item); _EL_   } _EL_   return list; _EL_ } _EL_ ', 'public boolean remove(HttpConnection connection){ _EL_   TimeValues times=connectionToTimes.remove(connection); _EL_   if (times == null) { _EL_     log.warn("Removing a connection that never existed!"); _EL_     return true; _EL_   } _EL_  else { _EL_     return System.currentTimeMillis() <= times.timeExpires; _EL_   } _EL_ } _EL_ ', 'public static double sampleSkewStandardError(int size){ _EL_   int n=size; _EL_   return Math.sqrt(6.0 * n * (n - 1) / ((n - 2) * (n + 1) * (n + 3))); _EL_ } _EL_ ', 'public void runScript(Reader reader) throws IOException, SQLException { _EL_   try { _EL_     boolean originalAutoCommit=connection.getAutoCommit(); _EL_     try { _EL_       if (originalAutoCommit != this.autoCommit) { _EL_         connection.setAutoCommit(this.autoCommit); _EL_       } _EL_       runScript(connection,reader); _EL_     } _EL_   finally { _EL_       connection.setAutoCommit(originalAutoCommit); _EL_     } _EL_   } _EL_  catch (  IOException|SQLException e) { _EL_     throw e; _EL_   } _EL_ catch (  Exception e) { _EL_     throw new RuntimeException("Error running script.  Cause: " + e,e); _EL_   } _EL_ } _EL_ ', 'public double doOperation() throws OperatorFailedException { _EL_   double logq; _EL_   final NodeRef root=tree.getRoot(); _EL_   final double oldTreeHeight=tree.getNodeHeight(root); _EL_   NodeRef i; _EL_   do { _EL_     i=tree.getNode(MathUtils.nextInt(tree.getNodeCount())); _EL_   } _EL_  while (root == i); _EL_   final NodeRef iP=tree.getParent(i); _EL_   final NodeRef CiP=getOtherChild(tree,iP,i); _EL_   final NodeRef PiP=tree.getParent(iP); _EL_   final double delta=getDelta(); _EL_   final double oldHeight=tree.getNodeHeight(iP); _EL_   final double newHeight=oldHeight + delta; _EL_   if (delta > 0) { _EL_     if (PiP != null && tree.getNodeHeight(PiP) < newHeight) { _EL_       NodeRef newParent=PiP; _EL_       NodeRef newChild=iP; _EL_       while (tree.getNodeHeight(newParent) < newHeight) { _EL_         newChild=newParent; _EL_         newParent=tree.getParent(newParent); _EL_         if (newParent == null)         break; _EL_       } _EL_       tree.beginTreeEdit(); _EL_       if (tree.isRoot(newChild)) { _EL_         tree.removeChild(iP,CiP); _EL_         tree.removeChild(PiP,iP); _EL_         tree.addChild(iP,newChild); _EL_         tree.addChild(PiP,CiP); _EL_         tree.setRoot(iP); _EL_         if (tree.hasNodeTraits()) { _EL_           tree.swapAllTraits(newChild,iP); _EL_         } _EL_         if (tree.hasRates()) { _EL_           final double rootNodeRate=tree.getNodeRate(newChild); _EL_           tree.setNodeRate(newChild,tree.getNodeRate(iP)); _EL_           tree.setNodeRate(iP,rootNodeRate); _EL_         } _EL_       } _EL_  else { _EL_         tree.removeChild(iP,CiP); _EL_         tree.removeChild(PiP,iP); _EL_         tree.removeChild(newParent,newChild); _EL_         tree.addChild(iP,newChild); _EL_         tree.addChild(PiP,CiP); _EL_         tree.addChild(newParent,iP); _EL_       } _EL_       tree.setNodeHeight(iP,newHeight); _EL_       tree.endTreeEdit(); _EL_       final int possibleSources=intersectingEdges(tree,newChild,oldHeight,null); _EL_       logq=-Math.log(possibleSources); _EL_     } _EL_  else { _EL_       tree.setNodeHeight(iP,newHeight); _EL_       logq=0.0; _EL_     } _EL_   } _EL_  else { _EL_     if (tree.getNodeHeight(i) > newHeight) { _EL_       return Double.NEGATIVE_INFINITY; _EL_     } _EL_     if (tree.getNodeHeight(CiP) > newHeight) { _EL_       List<NodeRef> newChildren=new ArrayList<NodeRef>(); _EL_       final int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren); _EL_       if (newChildren.size() == 0) { _EL_         return Double.NEGATIVE_INFINITY; _EL_       } _EL_       final int childIndex=MathUtils.nextInt(newChildren.size()); _EL_       NodeRef newChild=newChildren.get(childIndex); _EL_       NodeRef newParent=tree.getParent(newChild); _EL_       tree.beginTreeEdit(); _EL_       if (tree.isRoot(iP)) { _EL_         tree.removeChild(iP,CiP); _EL_         tree.removeChild(newParent,newChild); _EL_         tree.addChild(iP,newChild); _EL_         tree.addChild(newParent,iP); _EL_         tree.setRoot(CiP); _EL_         if (tree.hasNodeTraits()) { _EL_           tree.swapAllTraits(iP,CiP); _EL_         } _EL_         if (tree.hasRates()) { _EL_           final double rootNodeRate=tree.getNodeRate(iP); _EL_           tree.setNodeRate(iP,tree.getNodeRate(CiP)); _EL_           tree.setNodeRate(CiP,rootNodeRate); _EL_         } _EL_       } _EL_  else { _EL_         tree.removeChild(iP,CiP); _EL_         tree.removeChild(PiP,iP); _EL_         tree.removeChild(newParent,newChild); _EL_         tree.addChild(iP,newChild); _EL_         tree.addChild(PiP,CiP); _EL_         tree.addChild(newParent,iP); _EL_       } _EL_       tree.setNodeHeight(iP,newHeight); _EL_       tree.endTreeEdit(); _EL_       logq=Math.log(possibleDestinations); _EL_     } _EL_  else { _EL_       tree.setNodeHeight(iP,newHeight); _EL_       logq=0.0; _EL_     } _EL_   } _EL_   if (swapInRandomRate) { _EL_     final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount())); _EL_     if (j != i) { _EL_       final double tmp=tree.getNodeRate(i); _EL_       tree.setNodeRate(i,tree.getNodeRate(j)); _EL_       tree.setNodeRate(j,tmp); _EL_     } _EL_   } _EL_   if (swapInRandomTrait) { _EL_     final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount())); _EL_     if (j != i) { _EL_       tree.swapAllTraits(i,j); _EL_     } _EL_   } _EL_   if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException("invalid slide"); _EL_   if (scaledDirichletBranches) { _EL_     if (oldTreeHeight != tree.getNodeHeight(tree.getRoot()))     throw new OperatorFailedException("Temporarily disabled."); _EL_   } _EL_   return logq; _EL_ } _EL_ ', 'MarkerSegment findMarkerSegment(Class cls,boolean first){ _EL_   if (first) { _EL_     Iterator iter=markerSequence.iterator(); _EL_     while (iter.hasNext()) { _EL_       MarkerSegment seg=(MarkerSegment)iter.next(); _EL_       if (cls.isInstance(seg)) { _EL_         return seg; _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     ListIterator iter=markerSequence.listIterator(markerSequence.size()); _EL_     while (iter.hasPrevious()) { _EL_       MarkerSegment seg=(MarkerSegment)iter.previous(); _EL_       if (cls.isInstance(seg)) { _EL_         return seg; _EL_       } _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static Map<String,Object> createContentAssocMethod(DispatchContext dctx,Map<String,? extends Object> rcontext) throws GenericServiceException, GenericEntityException { _EL_   Map<String,Object> context=UtilMisc.makeMapWritable(rcontext); _EL_   List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_CREATE"); _EL_   List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context); _EL_   context.put("targetOperationList",targetOperationList); _EL_   context.put("contentPurposeList",contentPurposeList); _EL_   Locale locale=(Locale)context.get("locale"); _EL_   Delegator delegator=dctx.getDelegator(); _EL_   LocalDispatcher dispatcher=dctx.getDispatcher(); _EL_   Map<String,Object> result=FastMap.newInstance(); _EL_   String contentIdFrom=(String)context.get("contentIdFrom"); _EL_   String contentIdTo=(String)context.get("contentIdTo"); _EL_   String contentId=(String)context.get("contentId"); _EL_   int contentIdCount=0; _EL_   if (UtilValidate.isNotEmpty(contentIdFrom))   contentIdCount++; _EL_   if (UtilValidate.isNotEmpty(contentIdTo))   contentIdCount++; _EL_   if (UtilValidate.isNotEmpty(contentId))   contentIdCount++; _EL_   if (contentIdCount < 2) { _EL_     Debug.logError("Not 2 out of ContentId/To/From.","ContentServices"); _EL_     return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentCreateContentAssocMethodError",locale)); _EL_   } _EL_   if (UtilValidate.isNotEmpty(contentIdFrom)) { _EL_     if (UtilValidate.isEmpty(contentIdTo))     contentIdTo=contentId; _EL_   } _EL_   if (UtilValidate.isNotEmpty(contentIdTo)) { _EL_     if (UtilValidate.isEmpty(contentIdFrom))     contentIdFrom=contentId; _EL_   } _EL_   GenericValue contentAssoc=delegator.makeValue("ContentAssoc",FastMap.newInstance()); _EL_   contentAssoc.put("contentId",contentIdFrom); _EL_   contentAssoc.put("contentIdTo",contentIdTo); _EL_   contentAssoc.put("contentAssocTypeId",context.get("contentAssocTypeId")); _EL_   contentAssoc.put("contentAssocPredicateId",context.get("contentAssocPredicateIdFrom")); _EL_   contentAssoc.put("dataSourceId",context.get("dataSourceId")); _EL_   Timestamp fromDate=(Timestamp)context.get("fromDate"); _EL_   if (fromDate == null) { _EL_     contentAssoc.put("fromDate",UtilDateTime.nowTimestamp()); _EL_   } _EL_  else { _EL_     contentAssoc.put("fromDate",fromDate); _EL_   } _EL_   Timestamp thruDate=(Timestamp)context.get("thruDate"); _EL_   if (thruDate == null) { _EL_     contentAssoc.put("thruDate",null); _EL_   } _EL_  else { _EL_     contentAssoc.put("thruDate",thruDate); _EL_   } _EL_   contentAssoc.put("sequenceNum",context.get("sequenceNum")); _EL_   contentAssoc.put("mapKey",context.get("mapKey")); _EL_   String upperCoordinateStr=(String)context.get("upperCoordinate"); _EL_   if (UtilValidate.isEmpty(upperCoordinateStr)) { _EL_     contentAssoc.put("upperCoordinate",null); _EL_   } _EL_  else { _EL_     contentAssoc.put("upperCoordinate",upperCoordinateStr); _EL_   } _EL_   String leftCoordinateStr=(String)context.get("leftCoordinate"); _EL_   if (UtilValidate.isEmpty(leftCoordinateStr)) { _EL_     contentAssoc.put("leftCoordinate",null); _EL_   } _EL_  else { _EL_     contentAssoc.put("leftCoordinate",leftCoordinateStr); _EL_   } _EL_   GenericValue userLogin=(GenericValue)context.get("userLogin"); _EL_   String userLoginId=(String)userLogin.get("userLoginId"); _EL_   String createdByUserLogin=userLoginId; _EL_   String lastModifiedByUserLogin=userLoginId; _EL_   Timestamp createdDate=UtilDateTime.nowTimestamp(); _EL_   Timestamp lastModifiedDate=UtilDateTime.nowTimestamp(); _EL_   contentAssoc.put("createdByUserLogin",createdByUserLogin); _EL_   contentAssoc.put("lastModifiedByUserLogin",lastModifiedByUserLogin); _EL_   contentAssoc.put("createdDate",createdDate); _EL_   contentAssoc.put("lastModifiedDate",lastModifiedDate); _EL_   Map<String,Object> serviceInMap=FastMap.newInstance(); _EL_   String permissionStatus=null; _EL_   serviceInMap.put("userLogin",context.get("userLogin")); _EL_   serviceInMap.put("targetOperationList",targetOperationList); _EL_   serviceInMap.put("contentPurposeList",contentPurposeList); _EL_   serviceInMap.put("entityOperation",context.get("entityOperation")); _EL_   serviceInMap.put("contentAssocPredicateId",context.get("contentAssocPredicateId")); _EL_   serviceInMap.put("contentIdTo",contentIdTo); _EL_   serviceInMap.put("contentIdFrom",contentIdFrom); _EL_   serviceInMap.put("statusId",context.get("statusId")); _EL_   serviceInMap.put("privilegeEnumId",context.get("privilegeEnumId")); _EL_   serviceInMap.put("roleTypeList",context.get("roleTypeList")); _EL_   serviceInMap.put("displayFailCond",context.get("displayFailCond")); _EL_   Map<String,Object> permResults=null; _EL_   permResults=dispatcher.runSync("checkAssocPermission",serviceInMap); _EL_   permissionStatus=(String)permResults.get("permissionStatus"); _EL_   if (permissionStatus != null && permissionStatus.equals("granted")) { _EL_     contentAssoc.create(); _EL_   } _EL_  else { _EL_     String errorMsg=(String)permResults.get(ModelService.ERROR_MESSAGE); _EL_     result.put(ModelService.ERROR_MESSAGE,errorMsg); _EL_     return ServiceUtil.returnFailure(errorMsg); _EL_   } _EL_   result.put("contentIdTo",contentIdTo); _EL_   result.put("contentIdFrom",contentIdFrom); _EL_   result.put("fromDate",contentAssoc.get("fromDate")); _EL_   result.put("contentAssocTypeId",contentAssoc.get("contentAssocTypeId")); _EL_   return result; _EL_ } _EL_ ', 'public void reset(boolean clear){ _EL_   gotVersion=false; _EL_   gotHeaderLength=false; _EL_   gotHeader=false; _EL_   gotBody=false; _EL_   gotBodyBoundary=false; _EL_   headerLength=0; _EL_   bodyLength=0; _EL_   bodyBytesReceived=0; _EL_   if (clear) { _EL_     bufferOffset=0; _EL_     buffer.clear(); _EL_     bodyFile=null; _EL_     if (bodyStream != null) { _EL_       try { _EL_         bodyStream.close(); _EL_       } _EL_  catch (      IOException e) { _EL_         e.printStackTrace(); _EL_       } _EL_       bodyStream=null; _EL_     } _EL_   } _EL_ } _EL_ ', 'void removeAt(final int removeIndex){ _EL_   final Object[] items=this.items; _EL_   if (removeIndex == takeIndex) { _EL_     items[takeIndex]=null; _EL_     takeIndex=inc(takeIndex); _EL_     count--; _EL_     if (itrs != null)     itrs.elementDequeued(); _EL_   } _EL_  else { _EL_     final int putIndex=this.putIndex; _EL_     for (int i=removeIndex; ; ) { _EL_       int next=inc(i); _EL_       if (next != putIndex) { _EL_         items[i]=items[next]; _EL_         i=next; _EL_       } _EL_  else { _EL_         items[i]=null; _EL_         this.putIndex=i; _EL_         break; _EL_       } _EL_     } _EL_     count--; _EL_     if (itrs != null)     itrs.removedAt(removeIndex); _EL_   } _EL_   notFull.signal(); _EL_ } _EL_ ', 'private void saveAndClose(boolean save){ _EL_   content.setEnabled(false); _EL_   if (timer != null) { _EL_     timer.cancel(); _EL_     timer=null; _EL_   } _EL_   if (timerNextSync != null) { _EL_     timerNextSync.cancel(); _EL_     timerNextSync=null; _EL_   } _EL_   if (save) { _EL_     Log.d(LOG_TAG,"saveAndClose with SAVE"); _EL_     saveData(null); _EL_   } _EL_  else { _EL_     Log.d(LOG_TAG,"saveAndClose WITHOUT save"); _EL_   } _EL_   Intent data=new Intent(); _EL_   data.setAction(Intent.ACTION_VIEW); _EL_   data.putExtra(PARAM_NOTE,note); _EL_   data.putExtra(PARAM_NOTE_POSITION,notePosition); _EL_   setResult(RESULT_OK,data); _EL_   finish(); _EL_ } _EL_ ', 'public static <T>void blockingSubscribePrint(Observable<T> observable,String name){ _EL_   CountDownLatch latch=new CountDownLatch(1); _EL_   subscribePrint(observable.finallyDo(null),name); _EL_   try { _EL_     latch.await(); _EL_   } _EL_  catch (  InterruptedException e) { _EL_   } _EL_ } _EL_ ', 'public static final double calcNiceNumber(final double RANGE,final boolean ROUND){ _EL_   double niceFraction; _EL_   double exponent=Math.floor(Math.log10(RANGE)); _EL_   double fraction=RANGE / Math.pow(10,exponent); _EL_   if (ROUND) { _EL_     if (Double.compare(fraction,1.5) < 0) { _EL_       niceFraction=1; _EL_     } _EL_  else     if (Double.compare(fraction,3) < 0) { _EL_       niceFraction=2; _EL_     } _EL_  else     if (Double.compare(fraction,7) < 0) { _EL_       niceFraction=5; _EL_     } _EL_  else { _EL_       niceFraction=10; _EL_     } _EL_   } _EL_  else { _EL_     if (Double.compare(fraction,1) <= 0) { _EL_       niceFraction=1; _EL_     } _EL_  else     if (Double.compare(fraction,2) <= 0) { _EL_       niceFraction=2; _EL_     } _EL_  else     if (Double.compare(fraction,5) <= 0) { _EL_       niceFraction=5; _EL_     } _EL_  else { _EL_       niceFraction=10; _EL_     } _EL_   } _EL_   return niceFraction * Math.pow(10,exponent); _EL_ } _EL_ ', 'private final Object internalReplace(Object k,Object v,Object cv){ _EL_   int h=spread(k.hashCode()); _EL_   Object oldVal=null; _EL_   for (Node[] tab=table; ; ) { _EL_     Node f; _EL_     int i, fh; _EL_     Object fk; _EL_     if (tab == null || (f=tabAt(tab,i=(tab.length - 1) & h)) == null)     break; _EL_  else     if ((fh=f.hash) == MOVED) { _EL_       if ((fk=f.key) instanceof TreeBin) { _EL_         TreeBin t=(TreeBin)fk; _EL_         boolean validated=false; _EL_         boolean deleted=false; _EL_         t.acquire(0); _EL_         try { _EL_           if (tabAt(tab,i) == f) { _EL_             validated=true; _EL_             TreeNode p=t.getTreeNode(h,k,t.root); _EL_             if (p != null) { _EL_               Object pv=p.val; _EL_               if (cv == null || cv == pv || cv.equals(pv)) { _EL_                 oldVal=pv; _EL_                 if ((p.val=v) == null) { _EL_                   deleted=true; _EL_                   t.deleteTreeNode(p); _EL_                 } _EL_               } _EL_             } _EL_           } _EL_         } _EL_   finally { _EL_           t.release(0); _EL_         } _EL_         if (validated) { _EL_           if (deleted)           counter.add(-1L); _EL_           break; _EL_         } _EL_       } _EL_  else       tab=(Node[])fk; _EL_     } _EL_  else     if ((fh & HASH_BITS) != h && f.next == null)     break; _EL_  else     if ((fh & LOCKED) != 0) { _EL_       checkForResize(); _EL_       f.tryAwaitLock(tab,i); _EL_     } _EL_  else     if (f.casHash(fh,fh | LOCKED)) { _EL_       boolean validated=false; _EL_       boolean deleted=false; _EL_       try { _EL_         if (tabAt(tab,i) == f) { _EL_           validated=true; _EL_           for (Node e=f, pred=null; ; ) { _EL_             Object ek, ev; _EL_             if ((e.hash & HASH_BITS) == h && ((ev=e.val) != null) && ((ek=e.key) == k || k.equals(ek))) { _EL_               if (cv == null || cv == ev || cv.equals(ev)) { _EL_                 oldVal=ev; _EL_                 if ((e.val=v) == null) { _EL_                   deleted=true; _EL_                   Node en=e.next; _EL_                   if (pred != null)                   pred.next=en; _EL_  else                   setTabAt(tab,i,en); _EL_                 } _EL_               } _EL_               break; _EL_             } _EL_             pred=e; _EL_             if ((e=e.next) == null)             break; _EL_           } _EL_         } _EL_       } _EL_   finally { _EL_         if (!f.casHash(fh | LOCKED,fh)) { _EL_           f.hash=fh; _EL_ synchronized (f) { _EL_             f.notifyAll(); _EL_           } _EL_           ; _EL_         } _EL_       } _EL_       if (validated) { _EL_         if (deleted)         counter.add(-1L); _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   return oldVal; _EL_ } _EL_ ', 'public void sendMetric(final String name,final double value){ _EL_   logger.debug(String.format("sendMetric(%s, %f)",name,value)); _EL_   if (telemetryClient != null) { _EL_     telemetryClient.trackMetric(name,value); _EL_   } _EL_ } _EL_ ', 'public static URL findResourceBase(String baseResource,ClassLoader loader){ _EL_   URL url=loader.getResource(baseResource); _EL_   return findResourceBase(url,baseResource); _EL_ } _EL_ ', 'public StatArchiveReader(String archiveName) throws IOException { _EL_   this(new File[]{new File(archiveName)},null,false); _EL_ } _EL_ ', 'private static void initAdbSocketAddr(){ _EL_   try { _EL_     sAdbServerPort=getAdbServerPort(); _EL_     InetAddress hostAddr=InetAddress.getByName(DEFAULT_ADB_HOST); _EL_     sSocketAddr=new InetSocketAddress(hostAddr,sAdbServerPort); _EL_   } _EL_  catch (  UnknownHostException e) { _EL_   } _EL_ } _EL_ ', 'public int read(long fileOffset,byte[] buffer,int offset,int length) throws IOException { _EL_   _file.seek(fileOffset); _EL_   return _file.read(buffer,offset,length); _EL_ } _EL_ ', 'private boolean matchesAnyTag(String tagName){ _EL_   return tagNames.contains(tagName); _EL_ } _EL_ ', 'public boolean isExpanded(int row){ _EL_   TreeUI tree=getUI(); _EL_   if (tree != null) { _EL_     TreePath path=tree.getPathForRow(this,row); _EL_     if (path != null) { _EL_       Boolean value=expandedState.get(path); _EL_       return (value != null && value.booleanValue()); _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private static int labelEnd(String s){ _EL_   int colonIndex=s.indexOf(":"); _EL_   int semicolonIndex=s.indexOf(";"); _EL_   if ((semicolonIndex == -1) || (colonIndex < semicolonIndex)) { _EL_     return colonIndex; _EL_   } _EL_  else { _EL_     return -1; _EL_   } _EL_ } _EL_ ', 'public void addListener(AnimatorListener listener){ _EL_   if (mListeners == null) { _EL_     mListeners=new ArrayList<AnimatorListener>(); _EL_   } _EL_   mListeners.add(listener); _EL_ } _EL_ ', 'public HttpMethodInfo(Method method,Object handler,Object[] args,MultivaluedMap<String,Object> formParameters,Response responder){ _EL_   this.method=method; _EL_   this.handler=handler; _EL_   this.args=Arrays.copyOf(args,args.length); _EL_   this.formParameters=formParameters; _EL_   this.responder=responder; _EL_ } _EL_ ', 'public static boolean equals(byte[][] field1,byte[][] field2){ _EL_   int index1=0; _EL_   int length1=field1 == null ? 0 : field1.length; _EL_   int index2=0; _EL_   int length2=field2 == null ? 0 : field2.length; _EL_   while (true) { _EL_     while (index1 < length1 && field1[index1] == null) { _EL_       index1++; _EL_     } _EL_     while (index2 < length2 && field2[index2] == null) { _EL_       index2++; _EL_     } _EL_     boolean atEndOf1=index1 >= length1; _EL_     boolean atEndOf2=index2 >= length2; _EL_     if (atEndOf1 && atEndOf2) { _EL_       return true; _EL_     } _EL_  else     if (atEndOf1 != atEndOf2) { _EL_       return false; _EL_     } _EL_  else     if (!Arrays.equals(field1[index1],field2[index2])) { _EL_       return false; _EL_     } _EL_     index1++; _EL_     index2++; _EL_   } _EL_ } _EL_ ', 'private void drawText(int x1,int y1,int s,boolean e_or_n,Graphics g){ _EL_   Color oldColor=g.getColor(); _EL_   g.setPaintMode(); _EL_   if (m_FontColor == null) { _EL_     g.setColor(Color.black); _EL_   } _EL_  else { _EL_     g.setColor(m_FontColor); _EL_   } _EL_   String st; _EL_   if (e_or_n) { _EL_     Edge e=m_edges[s].m_edge; _EL_     for (int noa=0; (st=e.getLine(noa)) != null; noa++) { _EL_       g.drawString(st,(m_edges[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight()); _EL_     } _EL_   } _EL_  else { _EL_     Node e=m_nodes[s].m_node; _EL_     for (int noa=0; (st=e.getLine(noa)) != null; noa++) { _EL_       g.drawString(st,(m_nodes[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight()); _EL_     } _EL_   } _EL_   g.setColor(oldColor); _EL_ } _EL_ ', 'public void update(List<Race> races){ _EL_   if (currentRace == null) { _EL_     return; _EL_   } _EL_   if (races.contains(currentRace)) { _EL_     setRace(races.get(races.indexOf(currentRace))); _EL_   } _EL_ } _EL_ ', 'protected void sendDataToReceiver(ResultReceiver receiver,Intent originalIntent,Serializable data){ _EL_   if (receiver != null && data != null) { _EL_     Bundle bundle=new Bundle(); _EL_     bundle.putParcelable(ServiceReceiver.EXTRA_ORIGINAL_INTENT,originalIntent); _EL_     bundle.putSerializable(ServiceReceiver.EXTRA_DATA,data); _EL_     receiver.send(ServiceReceiver.STATUS_DATA,bundle); _EL_   } _EL_ } _EL_ ', 'private static Object matchOrReplace(Context cx,Scriptable scope,Scriptable thisObj,Object[] args,RegExpImpl reImpl,GlobData data,boolean forceFlat){ _EL_   NativeRegExp re; _EL_   String str=ScriptRuntime.toString(thisObj); _EL_   data.str=str; _EL_   Scriptable topScope=ScriptableObject.getTopLevelScope(scope); _EL_   if (args.length == 0) { _EL_     Object compiled=NativeRegExp.compileRE(cx,"","",false); _EL_     re=new NativeRegExp(topScope,compiled); _EL_   } _EL_  else   if (args[0] instanceof NativeRegExp) { _EL_     re=(NativeRegExp)args[0]; _EL_   } _EL_  else { _EL_     String src=ScriptRuntime.toString(args[0]); _EL_     String opt; _EL_     if (data.optarg < args.length) { _EL_       args[0]=src; _EL_       opt=ScriptRuntime.toString(args[data.optarg]); _EL_     } _EL_  else { _EL_       opt=null; _EL_     } _EL_     Object compiled=NativeRegExp.compileRE(cx,src,opt,forceFlat); _EL_     re=new NativeRegExp(topScope,compiled); _EL_   } _EL_   data.global=(re.getFlags() & NativeRegExp.JSREG_GLOB) != 0; _EL_   int[] indexp={0}; _EL_   Object result=null; _EL_   if (data.mode == RA_SEARCH) { _EL_     result=re.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST); _EL_     if (result != null && result.equals(Boolean.TRUE))     result=Integer.valueOf(reImpl.leftContext.length); _EL_  else     result=Integer.valueOf(-1); _EL_   } _EL_  else   if (data.global) { _EL_     re.lastIndex=0; _EL_     for (int count=0; indexp[0] <= str.length(); count++) { _EL_       result=re.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST); _EL_       if (result == null || !result.equals(Boolean.TRUE))       break; _EL_       if (data.mode == RA_MATCH) { _EL_         match_glob(data,cx,scope,count,reImpl); _EL_       } _EL_  else { _EL_         if (data.mode != RA_REPLACE)         Kit.codeBug(); _EL_         SubString lastMatch=reImpl.lastMatch; _EL_         int leftIndex=data.leftIndex; _EL_         int leftlen=lastMatch.index - leftIndex; _EL_         data.leftIndex=lastMatch.index + lastMatch.length; _EL_         replace_glob(data,cx,scope,reImpl,leftIndex,leftlen); _EL_       } _EL_       if (reImpl.lastMatch.length == 0) { _EL_         if (indexp[0] == str.length())         break; _EL_         indexp[0]++; _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     result=re.executeRegExp(cx,scope,reImpl,str,indexp,((data.mode == RA_REPLACE) ? NativeRegExp.TEST : NativeRegExp.MATCH)); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public void tableSwitch(final int[] keys,final TableSwitchGenerator generator,final boolean useTable){ _EL_   for (int i=1; i < keys.length; ++i) { _EL_     if (keys[i] < keys[i - 1]) { _EL_       throw new IllegalArgumentException("keys must be sorted ascending"); _EL_     } _EL_   } _EL_   Label def=newLabel(); _EL_   Label end=newLabel(); _EL_   if (keys.length > 0) { _EL_     int len=keys.length; _EL_     int min=keys[0]; _EL_     int max=keys[len - 1]; _EL_     int range=max - min + 1; _EL_     if (useTable) { _EL_       Label[] labels=new Label[range]; _EL_       Arrays.fill(labels,def); _EL_       for (int i=0; i < len; ++i) { _EL_         labels[keys[i] - min]=newLabel(); _EL_       } _EL_       mv.visitTableSwitchInsn(min,max,def,labels); _EL_       for (int i=0; i < range; ++i) { _EL_         Label label=labels[i]; _EL_         if (label != def) { _EL_           mark(label); _EL_           generator.generateCase(i + min,end); _EL_         } _EL_       } _EL_     } _EL_  else { _EL_       Label[] labels=new Label[len]; _EL_       for (int i=0; i < len; ++i) { _EL_         labels[i]=newLabel(); _EL_       } _EL_       mv.visitLookupSwitchInsn(def,keys,labels); _EL_       for (int i=0; i < len; ++i) { _EL_         mark(labels[i]); _EL_         generator.generateCase(keys[i],end); _EL_       } _EL_     } _EL_   } _EL_   mark(def); _EL_   generator.generateDefault(); _EL_   mark(end); _EL_ } _EL_ ', 'public void print(PrintWriter output,int w,int d){ _EL_   DecimalFormat format=new DecimalFormat(); _EL_   format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US)); _EL_   format.setMinimumIntegerDigits(1); _EL_   format.setMaximumFractionDigits(d); _EL_   format.setMinimumFractionDigits(d); _EL_   format.setGroupingUsed(false); _EL_   print(output,format,w + 2); _EL_ } _EL_ ', 'public void removeBiomeType(BiomeDictionary.Type type){ _EL_   ArrayList<BiomeGenBase> entryList=new ArrayList<BiomeGenBase>(); _EL_   entryList.addAll(Arrays.asList(BiomeDictionary.getBiomesForType(type))); _EL_   for (  BiomeGenBase biome : entryList) { _EL_     Iterator<BiomeEntry> iterator=allowedBiomes.iterator(); _EL_     while (iterator.hasNext()) { _EL_       if (BiomeDictionary.areBiomesEquivalent(iterator.next().biome,biome))       iterator.remove(); _EL_     } _EL_   } _EL_ } _EL_ ', 'static SizeRequirements calculateTiledRequirements(LayoutIterator iter,SizeRequirements r){ _EL_   long minimum=0; _EL_   long maximum=0; _EL_   long preferred=0; _EL_   int lastMargin=0; _EL_   int totalSpacing=0; _EL_   int n=iter.getCount(); _EL_   for (int i=0; i < n; i++) { _EL_     iter.setIndex(i); _EL_     int margin0=lastMargin; _EL_     int margin1=(int)iter.getLeadingCollapseSpan(); _EL_     totalSpacing+=Math.max(margin0,margin1); _EL_     preferred+=(int)iter.getPreferredSpan(0); _EL_     minimum+=iter.getMinimumSpan(0); _EL_     maximum+=iter.getMaximumSpan(0); _EL_     lastMargin=(int)iter.getTrailingCollapseSpan(); _EL_   } _EL_   totalSpacing+=lastMargin; _EL_   totalSpacing+=2 * iter.getBorderWidth(); _EL_   minimum+=totalSpacing; _EL_   preferred+=totalSpacing; _EL_   maximum+=totalSpacing; _EL_   if (r == null) { _EL_     r=new SizeRequirements(); _EL_   } _EL_   r.minimum=(minimum > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)minimum; _EL_   r.preferred=(preferred > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)preferred; _EL_   r.maximum=(maximum > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)maximum; _EL_   return r; _EL_ } _EL_ ', 'public static void writePaddedInteger(Writer out,long value,int size) throws IOException { _EL_   int intValue=(int)value; _EL_   if (intValue == value) { _EL_     writePaddedInteger(out,intValue,size); _EL_   } _EL_  else   if (size <= 19) { _EL_     out.write(Long.toString(value)); _EL_   } _EL_  else { _EL_     if (value < 0) { _EL_       out.write(\'-\'); _EL_       if (value != Long.MIN_VALUE) { _EL_         value=-value; _EL_       } _EL_  else { _EL_         for (; size > 19; size--) { _EL_           out.write(\'0\'); _EL_         } _EL_         out.write("9223372036854775808"); _EL_         return; _EL_       } _EL_     } _EL_     int digits=(int)(Math.log(value) / LOG_10) + 1; _EL_     for (; size > digits; size--) { _EL_       out.write(\'0\'); _EL_     } _EL_     out.write(Long.toString(value)); _EL_   } _EL_ } _EL_ ', 'private static LDAPFilter createORFilter(FilterSet filterSet) throws LDAPException, IOException { _EL_   List<JAXBElement<?>> list=filterSet.getFilterGroup(); _EL_   ArrayList<RawFilter> filters=new ArrayList<>(list.size()); _EL_   for (  JAXBElement<?> filter : list) { _EL_     filters.add(createFilter(filter)); _EL_   } _EL_   return LDAPFilter.createORFilter(filters); _EL_ } _EL_ ', 'private void sendBlob(String index,byte[] blob){ _EL_   sendInstruction(new GuacamoleInstruction("blob",index,DatatypeConverter.printBase64Binary(blob))); _EL_ } _EL_ ', 'protected void defineLabels(){ _EL_   labelsValues=calcLabels(); _EL_   if (handleValues)   labels=getLabelsFromValues(); _EL_  else   labels=getLabelsFromData(); _EL_   nLabels=labels.size(); _EL_ } _EL_ ', 'public static Set<Interval> mergeIntervalToSet(Set<Interval> intervals,Interval intervalToMerge){ _EL_   LinkedHashSet<Interval> copyOfOriginalSet=new LinkedHashSet<>(intervals); _EL_   copyOfOriginalSet.add(intervalToMerge); _EL_   return mergeIntervalSet(copyOfOriginalSet); _EL_ } _EL_ ', 'public void addNode(TopologicalNode node){ _EL_   nodeList.add(node); _EL_ } _EL_ ', 'public void printText(String text){ _EL_   view.print(text,text.endsWith("\\r")); _EL_   for (  ActionDelegate actionDelegate : actionDelegates) { _EL_     actionDelegate.onConsoleOutput(this); _EL_   } _EL_ } _EL_ ', '@Override public void trim(){ _EL_   if (counter < x.length) { _EL_     int[] y=new int[counter]; _EL_     System.arraycopy(x,0,y,0,counter); _EL_     x=y; _EL_     resizeValues(counter); _EL_   } _EL_ } _EL_ ', 'private void divide(int[] idx,double[] data,ArrayList<int[]> ret,int start,int end,int depth){ _EL_   if (depth == 0) { _EL_     int[] a=Arrays.copyOfRange(idx,start,end); _EL_     Arrays.sort(a); _EL_     ret.add(a); _EL_     return; _EL_   } _EL_   final int count=end - start; _EL_   if (count == 0) { _EL_     for (int j=1 << depth; j > 0; --j) { _EL_       ret.add(new int[0]); _EL_     } _EL_     return; _EL_   } _EL_   double m=0.; _EL_   for (int i=start; i < end; i++) { _EL_     m+=data[i]; _EL_   } _EL_   m/=count; _EL_   int pos=Arrays.binarySearch(data,start,end,m); _EL_   if (pos >= 0) { _EL_     final int opt=(start + end) >> 1; _EL_     while (data[pos] == m) { _EL_       if (pos < opt) { _EL_         pos++; _EL_       } _EL_  else       if (pos > opt) { _EL_         pos--; _EL_       } _EL_  else { _EL_         break; _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     pos=(-pos - 1); _EL_   } _EL_   divide(idx,data,ret,start,pos,depth - 1); _EL_   divide(idx,data,ret,pos,end,depth - 1); _EL_ } _EL_ ', 'void assertThreadsStayAlive(long millis,Thread... threads){ _EL_   try { _EL_     delay(millis); _EL_     for (    Thread thread : threads)     assertTrue(thread.isAlive()); _EL_   } _EL_  catch (  InterruptedException fail) { _EL_     threadFail("Unexpected InterruptedException"); _EL_   } _EL_ } _EL_ ', '@OnMessage public void onMessage(String message,Session session){ _EL_   callInternal("onMessage",session,message); _EL_ } _EL_ ', 'public final boolean insert_via(BrdViaInfo p_via_info,PlaPointInt p_location,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){ _EL_   shove_fail_clear(); _EL_   changed_area_clear(); _EL_   boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,p_location,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth); _EL_   if (!r_ok)   return false; _EL_   NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY; _EL_   TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP); _EL_   changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null); _EL_   return true; _EL_ } _EL_ ', 'public static byte[] toByteArray(String str){ _EL_   int len=str.length(); _EL_   StringTokenizer st=new StringTokenizer(str,":"); _EL_   String[] newStrArray=new String[st.countTokens()]; _EL_   int j=0; _EL_   while (st.hasMoreTokens()) { _EL_     newStrArray[j]=st.nextToken(); _EL_     j++; _EL_   } _EL_   byte[] ret=new byte[newStrArray.length]; _EL_   int tmp; _EL_   for (int i=0; i < newStrArray.length; i++) { _EL_     tmp=Integer.parseInt(newStrArray[i],16); _EL_     ret[i]=(byte)(tmp - 128); _EL_   } _EL_   return ret; _EL_ } _EL_ ', "private char[] fFormatDigits(final double x){ _EL_   String sx; _EL_   int i, j, k; _EL_   final int n1In; _EL_   final int n2In; _EL_   int expon=0; _EL_   boolean minusSign=false; _EL_   if (x > 0.0) { _EL_     sx=Double.toString(x); _EL_   } _EL_  else   if (x < 0.0) { _EL_     sx=Double.toString(-x); _EL_     minusSign=true; _EL_   } _EL_  else { _EL_     sx=Double.toString(x); _EL_     if (sx.charAt(0) == '-') { _EL_       minusSign=true; _EL_       sx=sx.substring(1); _EL_     } _EL_   } _EL_   final int ePos=sx.indexOf('E'); _EL_   final int rPos=sx.indexOf('.'); _EL_   if (rPos != -1) { _EL_     n1In=rPos; _EL_   } _EL_  else   if (ePos != -1) { _EL_     n1In=ePos; _EL_   } _EL_  else { _EL_     n1In=sx.length(); _EL_   } _EL_   if (rPos != -1) { _EL_     if (ePos != -1) { _EL_       n2In=ePos - rPos - 1; _EL_     } _EL_  else { _EL_       n2In=sx.length() - rPos - 1; _EL_     } _EL_   } _EL_  else { _EL_     n2In=0; _EL_   } _EL_   if (ePos != -1) { _EL_     int ie=ePos + 1; _EL_     expon=0; _EL_     if (sx.charAt(ie) == '-') { _EL_       for (++ie; ie < sx.length(); ie++) { _EL_         if (sx.charAt(ie) != '0') { _EL_           break; _EL_         } _EL_       } _EL_       if (ie < sx.length()) { _EL_         expon=-Integer.parseInt(sx.substring(ie)); _EL_       } _EL_     } _EL_  else { _EL_       if (sx.charAt(ie) == '+') { _EL_         ++ie; _EL_       } _EL_       for (; ie < sx.length(); ie++) { _EL_         if (sx.charAt(ie) != '0') { _EL_           break; _EL_         } _EL_       } _EL_       if (ie < sx.length()) { _EL_         expon=Integer.parseInt(sx.substring(ie)); _EL_       } _EL_     } _EL_   } _EL_   final int p; _EL_   if (precisionSet) { _EL_     p=precision; _EL_   } _EL_  else { _EL_     p=defaultDigits - 1; _EL_   } _EL_   final char[] ca1=sx.toCharArray(); _EL_   final char[] ca2=new char[n1In + n2In]; _EL_   final char[] ca3; _EL_   final char[] ca4; _EL_   final char[] ca5; _EL_   for (j=0; j < n1In; j++) { _EL_     ca2[j]=ca1[j]; _EL_   } _EL_   i=j + 1; _EL_   for (k=0; k < n2In; j++, i++, k++) { _EL_     ca2[j]=ca1[i]; _EL_   } _EL_   if (n1In + expon <= 0) { _EL_     ca3=new char[-expon + n2In]; _EL_     for (j=0, k=0; k < (-n1In - expon); k++, j++) { _EL_       ca3[j]='0'; _EL_     } _EL_     for (i=0; i < (n1In + n2In); i++, j++) { _EL_       ca3[j]=ca2[i]; _EL_     } _EL_   } _EL_  else { _EL_     ca3=ca2; _EL_   } _EL_   boolean carry=false; _EL_   if (p < -expon + n2In) { _EL_     if (expon < 0) { _EL_       i=p; _EL_     } _EL_  else { _EL_       i=p + n1In; _EL_     } _EL_     carry=checkForCarry(ca3,i); _EL_     if (carry) { _EL_       carry=startSymbolicCarry(ca3,i - 1,0); _EL_     } _EL_   } _EL_   if (n1In + expon <= 0) { _EL_     ca4=new char[2 + p]; _EL_     if (!carry) { _EL_       ca4[0]='0'; _EL_     } _EL_  else { _EL_       ca4[0]='1'; _EL_     } _EL_     if (alternateForm || !precisionSet || precision != 0) { _EL_       ca4[1]='.'; _EL_       for (i=0, j=2; i < Math.min(p,ca3.length); i++, j++) { _EL_         ca4[j]=ca3[i]; _EL_       } _EL_       for (; j < ca4.length; j++) { _EL_         ca4[j]='0'; _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     if (!carry) { _EL_       if (alternateForm || !precisionSet || precision != 0) { _EL_         ca4=new char[n1In + expon + p+ 1]; _EL_       } _EL_  else { _EL_         ca4=new char[n1In + expon]; _EL_       } _EL_       j=0; _EL_     } _EL_  else { _EL_       if (alternateForm || !precisionSet || precision != 0) { _EL_         ca4=new char[n1In + expon + p+ 2]; _EL_       } _EL_  else { _EL_         ca4=new char[n1In + expon + 1]; _EL_       } _EL_       ca4[0]='1'; _EL_       j=1; _EL_     } _EL_     for (i=0; i < Math.min(n1In + expon,ca3.length); i++, j++) { _EL_       ca4[j]=ca3[i]; _EL_     } _EL_     for (; i < n1In + expon; i++, j++) { _EL_       ca4[j]='0'; _EL_     } _EL_     if (alternateForm || !precisionSet || precision != 0) { _EL_       ca4[j]='.'; _EL_       j++; _EL_       for (k=0; i < ca3.length && k < p; i++, j++, k++) { _EL_         ca4[j]=ca3[i]; _EL_       } _EL_       for (; j < ca4.length; j++) { _EL_         ca4[j]='0'; _EL_       } _EL_     } _EL_   } _EL_   int nZeros=0; _EL_   if (!leftJustify && leadingZeros) { _EL_     int xThousands=0; _EL_     if (thousands) { _EL_       int xlead=0; _EL_       if (ca4[0] == '+' || ca4[0] == '-' || ca4[0] == ' ') { _EL_         xlead=1; _EL_       } _EL_       int xdp=xlead; _EL_       for (; xdp < ca4.length; xdp++) { _EL_         if (ca4[xdp] == '.') { _EL_           break; _EL_         } _EL_       } _EL_       xThousands=(xdp - xlead) / 3; _EL_     } _EL_     if (fieldWidthSet) { _EL_       nZeros=fieldWidth - ca4.length; _EL_     } _EL_     if ((!minusSign && (leadingSign || leadingSpace)) || minusSign) { _EL_       nZeros--; _EL_     } _EL_     nZeros-=xThousands; _EL_     if (nZeros < 0) { _EL_       nZeros=0; _EL_     } _EL_   } _EL_   j=0; _EL_   if ((!minusSign && (leadingSign || leadingSpace)) || minusSign) { _EL_     ca5=new char[ca4.length + nZeros + 1]; _EL_     j++; _EL_   } _EL_  else { _EL_     ca5=new char[ca4.length + nZeros]; _EL_   } _EL_   if (!minusSign) { _EL_     if (leadingSign) { _EL_       ca5[0]='+'; _EL_     } _EL_     if (leadingSpace) { _EL_       ca5[0]=' '; _EL_     } _EL_   } _EL_  else { _EL_     ca5[0]='-'; _EL_   } _EL_   for (i=0; i < nZeros; i++, j++) { _EL_     ca5[j]='0'; _EL_   } _EL_   for (i=0; i < ca4.length; i++, j++) { _EL_     ca5[j]=ca4[i]; _EL_   } _EL_   int lead=0; _EL_   if (ca5[0] == '+' || ca5[0] == '-' || ca5[0] == ' ') { _EL_     lead=1; _EL_   } _EL_   int dp=lead; _EL_   for (; dp < ca5.length; dp++) { _EL_     if (ca5[dp] == '.') { _EL_       break; _EL_     } _EL_   } _EL_   final int nThousands=(dp - lead) / 3; _EL_   if (dp < ca5.length) { _EL_     ca5[dp]=dfs.getDecimalSeparator(); _EL_   } _EL_   char[] ca6=ca5; _EL_   if (thousands && nThousands > 0) { _EL_     ca6=new char[ca5.length + nThousands + lead]; _EL_     ca6[0]=ca5[0]; _EL_     for (i=lead, k=lead; i < dp; i++) { _EL_       if (i > 0 && (dp - i) % 3 == 0) { _EL_         ca6[k]=dfs.getGroupingSeparator(); _EL_         ca6[k + 1]=ca5[i]; _EL_         k+=2; _EL_       } _EL_  else { _EL_         ca6[k]=ca5[i]; _EL_         k++; _EL_       } _EL_     } _EL_     for (; i < ca5.length; i++, k++) { _EL_       ca6[k]=ca5[i]; _EL_     } _EL_   } _EL_   return ca6; _EL_ } _EL_ ", 'int maxLength(){ _EL_   FontMetrics fm=getFontMetrics(getFont()); _EL_   int m=0; _EL_   int end=items.size(); _EL_   for (int i=0; i < end; i++) { _EL_     int l=fm.stringWidth(((String)items.elementAt(i))); _EL_     m=Math.max(m,l); _EL_   } _EL_   return m; _EL_ } _EL_ ', 'public PlaPointInt round_to_the_left(PlaDirection p_dir){ _EL_   PlaPointFloat dir=p_dir.to_float(); _EL_   double rounded_x; _EL_   if (dir.v_y > 0) { _EL_     rounded_x=Math.floor(v_x); _EL_   } _EL_  else   if (dir.v_y < 0) { _EL_     rounded_x=Math.ceil(v_x); _EL_   } _EL_  else { _EL_     rounded_x=Math.round(v_x); _EL_   } _EL_   double rounded_y; _EL_   if (dir.v_x > 0) { _EL_     rounded_y=Math.ceil(v_y); _EL_   } _EL_  else   if (dir.v_x < 0) { _EL_     rounded_y=Math.floor(v_y); _EL_   } _EL_  else { _EL_     rounded_y=Math.round(v_y); _EL_   } _EL_   return new PlaPointInt(rounded_x,rounded_y); _EL_ } _EL_ ', 'protected HttpHost determineProxy(HttpHost target,HttpRequest request,HttpContext context) throws HttpException { _EL_   ProxySelector psel=this.proxySelector; _EL_   if (psel == null)   psel=ProxySelector.getDefault(); _EL_   if (psel == null)   return null; _EL_   URI targetURI=null; _EL_   try { _EL_     targetURI=new URI(target.toURI()); _EL_   } _EL_  catch (  URISyntaxException usx) { _EL_     throw new HttpException("Cannot convert host to URI: " + target,usx); _EL_   } _EL_   List<Proxy> proxies=psel.select(targetURI); _EL_   Proxy p=chooseProxy(proxies,target,request,context); _EL_   HttpHost result=null; _EL_   if (p.type() == Proxy.Type.HTTP) { _EL_     if (!(p.address() instanceof InetSocketAddress)) { _EL_       throw new HttpException("Unable to handle non-Inet proxy address: " + p.address()); _EL_     } _EL_     final InetSocketAddress isa=(InetSocketAddress)p.address(); _EL_     result=new HttpHost(getHost(isa),isa.getPort()); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private void addReference(final int sourcePosition,final int referencePosition){ _EL_   if (srcAndRefPositions == null) { _EL_     srcAndRefPositions=new int[6]; _EL_   } _EL_   if (referenceCount >= srcAndRefPositions.length) { _EL_     int[] a=new int[srcAndRefPositions.length + 6]; _EL_     System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length); _EL_     srcAndRefPositions=a; _EL_   } _EL_   srcAndRefPositions[referenceCount++]=sourcePosition; _EL_   srcAndRefPositions[referenceCount++]=referencePosition; _EL_ } _EL_ ', 'public Object[] toArray(){ _EL_   return Arrays.copyOf(elementData,size); _EL_ } _EL_ ', 'public boolean isRunning(){ _EL_   return mThread != null && mThread.isAlive(); _EL_ } _EL_ ', 'public static byte[] unwrapVCF(File sourceFile,File tmpFile) throws FileNotFoundException, IOException { _EL_   ZipArchiveInputStream in=null; _EL_   FileOutputStream fos=null; _EL_   String hmacString=null; _EL_   try { _EL_     in=new ZipArchiveInputStream(new FileInputStream(sourceFile)); _EL_     ArchiveEntry entry; _EL_     in.getNextEntry(); _EL_     fos=new FileOutputStream(tmpFile); _EL_     IOUtils.copy(in,fos); _EL_     entry=in.getNextEntry(); _EL_     hmacString=entry.getName(); _EL_     return Utils.hexToBytes(hmacString); _EL_   } _EL_  catch (  StringIndexOutOfBoundsException e) { _EL_     logger.error("Error parsing hmac: " + hmacString + " is no valid hex String",e); _EL_     throw e; _EL_   } _EL_ catch (  Exception e) { _EL_     logger.error("Error unwrapping VCF file",e); _EL_     throw e; _EL_   } _EL_  finally { _EL_     if (fos != null) { _EL_       fos.flush(); _EL_       fos.close(); _EL_     } _EL_     if (in != null) { _EL_       in.close(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public SELECT(@NonNull String... columns){ _EL_   if (columns == null) { _EL_     throw new NullPointerException("SELECT: Columns are null"); _EL_   } _EL_   if (columns.length == 0)   throw new IllegalArgumentException("At least on column is required"); _EL_   StringBuilder builder=new StringBuilder("SELECT "); _EL_   for (int i=0; i < columns.length; i++) { _EL_     builder.append(columns[i]); _EL_     if (i != (columns.length - 1))     builder.append(", "); _EL_   } _EL_   sql=builder.toString(); _EL_ } _EL_ ', 'public JKSSignatureToken(InputStream ksStream,String ksPassword){ _EL_   try { _EL_     keyStore=KeyStore.getInstance(KeyStore.getDefaultType()); _EL_     password=(ksPassword == null) ? null : ksPassword.toCharArray(); _EL_     keyStore.load(ksStream,password); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new DSSException(e); _EL_   } _EL_  finally { _EL_     if (ksStream != null) { _EL_       try { _EL_         ksStream.close(); _EL_       } _EL_  catch (      IOException e) { _EL_         logger.error(e.getMessage(),e); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'protected void writeLocation(String loc) throws IOException { _EL_   hadAnnotations|=(loc != null); _EL_   locOut.writeObject(loc); _EL_ } _EL_ ', 'protected int __offset(int vtable_offset){ _EL_   int vtable=bb_pos - bb.getInt(bb_pos); _EL_   return vtable_offset < bb.getShort(vtable) ? bb.getShort(vtable + vtable_offset) : 0; _EL_ } _EL_ ', 'public static String selectText(XPathExpression expr,Node context){ _EL_   try { _EL_     return (String)expr.evaluate(context,XPathConstants.STRING); _EL_   } _EL_  catch (  XPathExpressionException e) { _EL_     throw new XmlException(e); _EL_   } _EL_ } _EL_ ', 'public static HttpHeaders toArmeria(io.netty.handler.codec.http.HttpHeaders inHeaders){ _EL_   if (inHeaders.isEmpty()) { _EL_     return HttpHeaders.EMPTY_HEADERS; _EL_   } _EL_   final HttpHeaders out=new DefaultHttpHeaders(true,inHeaders.size()); _EL_   toArmeria(inHeaders,out); _EL_   return out; _EL_ } _EL_ ', 'public static int calculateRMSLevel(short[] audioData,int numframes){ _EL_   long lSum=0; _EL_   int numread=0; _EL_   for (  short s : audioData) { _EL_     lSum=lSum + s; _EL_     numread++; _EL_     if (numread == numframes)     break; _EL_   } _EL_   double dAvg=lSum / numframes; _EL_   double sumMeanSquare=0d; _EL_   numread=0; _EL_   for (  short anAudioData : audioData) { _EL_     sumMeanSquare=sumMeanSquare + Math.pow(anAudioData - dAvg,2d); _EL_     numread++; _EL_     if (numread == numframes)     break; _EL_   } _EL_   double averageMeanSquare=sumMeanSquare / numframes; _EL_   return (int)(Math.pow(averageMeanSquare,0.5d) + 0.5); _EL_ } _EL_ ', 'private void initProgram(){ _EL_   glUseProgram(this.program); _EL_   vec3ArrayUniform=glGetUniformLocation(this.program,"cols"); _EL_   chosenUniform=glGetUniformLocation(this.program,"chosen"); _EL_   glUseProgram(0); _EL_ } _EL_ ', 'public boolean engineContainsAlias(String alias){ _EL_   return entries.containsKey(alias.toLowerCase(Locale.ENGLISH)); _EL_ } _EL_ ', 'public void bindKeyStore(final KeyStoreService keyStoreService){ _EL_   this.keyStore=keyStoreService; _EL_ } _EL_ ', 'protected void drawConnectorCenters(Canvas c){ _EL_   List<Connection> connections=mBlock.getAllConnections(); _EL_   Paint paint=new Paint(); _EL_   paint.setStyle(Paint.Style.FILL); _EL_   for (int i=0; i < connections.size(); i++) { _EL_     Connection conn=connections.get(i); _EL_     if (conn.inDragMode()) { _EL_       if (conn.isConnected()) { _EL_         paint.setColor(Color.RED); _EL_       } _EL_  else { _EL_         paint.setColor(Color.MAGENTA); _EL_       } _EL_     } _EL_  else { _EL_       if (conn.isConnected()) { _EL_         paint.setColor(Color.GREEN); _EL_       } _EL_  else { _EL_         paint.setColor(Color.CYAN); _EL_       } _EL_     } _EL_     mTempWorkspacePoint.set(conn.getPosition().x - mBlock.getPosition().x,conn.getPosition().y - mBlock.getPosition().y); _EL_     mHelper.workspaceToVirtualViewDelta(mTempWorkspacePoint,mTempConnectionPosition); _EL_     if (mHelper.useRtl()) { _EL_       mTempConnectionPosition.x+=mBlockViewSize.x; _EL_     } _EL_     c.drawCircle(mTempConnectionPosition.x,mTempConnectionPosition.y,10,paint); _EL_   } _EL_ } _EL_ ', 'private synchronized void loadTrustManager(){ _EL_   try { _EL_     TrustManagerFactory tmf=TrustManagerFactory.getInstance(X509_ALGORITHM); _EL_     tmf.init(keystore); _EL_     for (    TrustManager trustManager : tmf.getTrustManagers()) { _EL_       if (trustManager instanceof X509TrustManager) { _EL_         defaultViPRTrustManager=(X509TrustManager)trustManager; _EL_         log.debug("found a X509TrustManager instance"); _EL_         break; _EL_       } _EL_     } _EL_     log.info("renew trust manager. the # of certificates in trust store is {}",defaultViPRTrustManager.getAcceptedIssuers().length); _EL_   } _EL_  catch (  GeneralSecurityException e) { _EL_     log.error(e.getMessage(),e); _EL_   } _EL_ } _EL_ ', 'private boolean isOutsideDocElem(){ _EL_   return (null == m_docFrag) && m_elemStack.size() == 0 && (null == m_currentNode || m_currentNode.getNodeType() == Node.DOCUMENT_NODE); _EL_ } _EL_ ', 'public ThreadPool(String name,int poolSize){ _EL_   this.poolSize=poolSize; _EL_   this.poolName=name; _EL_   taskList=new LinkedList<Runnable>(); _EL_   threads=new WorkerThread[poolSize]; _EL_   createThreads(); _EL_ } _EL_ ', 'private static Object invokeOrDie(final Method method,final Object object,final Object... params){ _EL_   try { _EL_     return method.invoke(object,params); _EL_   } _EL_  catch (  IllegalAccessException e) { _EL_     throw new RuntimeException("Couldn\'t use Java reflection to implement protocol message " + "reflection.",e); _EL_   } _EL_ catch (  InvocationTargetException e) { _EL_     final Throwable cause=e.getCause(); _EL_     if (cause instanceof RuntimeException) { _EL_       throw (RuntimeException)cause; _EL_     } _EL_  else     if (cause instanceof Error) { _EL_       throw (Error)cause; _EL_     } _EL_  else { _EL_       throw new RuntimeException("Unexpected exception thrown by generated accessor method.",cause); _EL_     } _EL_   } _EL_ } _EL_ ', 'public final void addHelperTextColor(@ColorInt final int color){ _EL_   if (!helperTextColors.contains(color)) { _EL_     helperTextColors.add(color); _EL_     verifyPasswordStrength(); _EL_   } _EL_ } _EL_ ', 'ListBasedTokenStream(AttributeSource attributeSource,List<AttributeSource> tokens){ _EL_   super(attributeSource.getAttributeFactory()); _EL_   this.tokens=tokens; _EL_   addAttributes(attributeSource); _EL_ } _EL_ ', '@SuppressWarnings("rawtypes") protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException { _EL_   String cname=classDesc.getName(); _EL_   return ClassFinder.resolveClass(cname,this.loader); _EL_ } _EL_ ', 'public Map<String,Object> makeValid(Map<String,? extends Object> source,String mode){ _EL_   return makeValid(source,mode,true,null); _EL_ } _EL_ ', 'public static int find(byte[] a,int fromIndex,int toIndex,byte[] key){ _EL_   int result=-1; _EL_   int sublen=key.length; _EL_   int maxpos, first, sp=0; _EL_   maxpos=Math.min(toIndex,a.length) - sublen; _EL_   for (first=fromIndex; sp != sublen && first <= maxpos; first++) { _EL_     first=find(a,first,maxpos,key[0]); _EL_     if ((first < 0) || (first > maxpos)) { _EL_       break; _EL_     } _EL_     for (sp=1; sp < sublen; sp++) { _EL_       if (a[first + sp] != key[sp]) { _EL_         sp=sublen; _EL_       } _EL_     } _EL_   } _EL_   if (sublen == 0) { _EL_     result=0; _EL_   } _EL_  else   if (sp == sublen) { _EL_     result=(first - 1); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private void addSyntheticEdge(Collection<GraphEdge> result,GraphEdge original,GraphNode head,GraphNode tail){ _EL_   result.add(new GraphEdge(head,tail,original.getRelation())); _EL_ } _EL_ ', 'public void addStates(State[] s){ _EL_   for (int i=0; i < s.length; i++)   states.addElement(s[i]); _EL_ } _EL_ ', 'private static byte[] WindowsRegEnumKeyEx1(int hKey,int subKeyIndex,int maxKeyLength){ _EL_   byte[] result=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength); _EL_   if (result != null) { _EL_     return result; _EL_   } _EL_  else { _EL_     long sleepTime=INIT_SLEEP_TIME; _EL_     for (int i=0; i < MAX_ATTEMPTS; i++) { _EL_       try { _EL_         Thread.sleep(sleepTime); _EL_       } _EL_  catch (      InterruptedException e) { _EL_         return result; _EL_       } _EL_       sleepTime*=2; _EL_       result=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength); _EL_       if (result != null) { _EL_         return result; _EL_       } _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public Tasker addTask(Task task){ _EL_   tasks.add(task); _EL_   lastAddedTask=task; _EL_   return this; _EL_ } _EL_ ', 'private void initComputeProgram(){ _EL_   glUseProgram(computeProgram); _EL_   IntBuffer workGroupSize=BufferUtils.createIntBuffer(3); _EL_   glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize); _EL_   workGroupSizeX=workGroupSize.get(0); _EL_   workGroupSizeY=workGroupSize.get(1); _EL_   timeUniform=glGetUniformLocation(computeProgram,"time"); _EL_   blendFactorUniform=glGetUniformLocation(computeProgram,"blendFactor"); _EL_   bounceCountUniform=glGetUniformLocation(computeProgram,"bounceCount"); _EL_   IntBuffer params=BufferUtils.createIntBuffer(1); _EL_   int loc=glGetUniformLocation(computeProgram,"framebufferImage"); _EL_   glGetUniformiv(computeProgram,loc,params); _EL_   framebufferImageBinding=params.get(0); _EL_   loc=glGetUniformLocation(computeProgram,"worldPositionImage"); _EL_   glGetUniformiv(computeProgram,loc,params); _EL_   worldPositionImageBinding=params.get(0); _EL_   loc=glGetUniformLocation(computeProgram,"worldNormalImage"); _EL_   glGetUniformiv(computeProgram,loc,params); _EL_   worldNormalImageBinding=params.get(0); _EL_   glUseProgram(0); _EL_ } _EL_ ', 'public static Object objectFromByteBuffer(byte[] buffer) throws Exception { _EL_   if (buffer == null)   return null; _EL_   ByteArrayInputStream inStream=new ByteArrayInputStream(buffer); _EL_   ObjectInputStream in=new ObjectInputStreamExt(inStream); _EL_   Object retval=in.readObject(); _EL_   in.close(); _EL_   return retval; _EL_ } _EL_ ', 'public DefaultActionGroup(@NotNull AnAction... actions){ _EL_   this(Arrays.asList(actions)); _EL_ } _EL_ ', 'public int add(T dl,int row){ _EL_   _list.add(row,dl); _EL_   fireTableRowsInserted(row,row); _EL_   return row; _EL_ } _EL_ ', 'public NumericLiteral(Object x){ _EL_   if (x instanceof Number) { _EL_     m_number=(Number)x; _EL_     m_type=TypeLib.getPrimitiveType(m_number.getClass()); _EL_   } _EL_  else { _EL_     throw new IllegalArgumentException("Invalid type!"); _EL_   } _EL_ } _EL_ ', '@SuppressLint("DrawAllocation") @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){ _EL_   int widthMode=MeasureSpec.getMode(widthMeasureSpec); _EL_   int heightMode=MeasureSpec.getMode(heightMeasureSpec); _EL_   int maxWidth=MeasureSpec.getSize(widthMeasureSpec); _EL_   int maxHeight=MeasureSpec.getSize(heightMeasureSpec); _EL_   if (widthMode == MeasureSpec.UNSPECIFIED)   maxWidth=Integer.MAX_VALUE; _EL_   if (heightMode == MeasureSpec.UNSPECIFIED)   maxHeight=Integer.MAX_VALUE; _EL_   int paddingLeft=getPaddingLeft(); _EL_   int paddingTop=getPaddingTop(); _EL_   int paddingRight=getPaddingRight(); _EL_   int paddingBottom=getPaddingBottom(); _EL_   int maxRightBound=maxWidth - paddingRight; _EL_   int maxBottomBound=maxHeight - paddingBottom; _EL_   int left; _EL_   int top; _EL_   int right; _EL_   int bottom; _EL_   int rightBound=paddingLeft; _EL_   int maxRightNoPadding=rightBound; _EL_   int bottomBound; _EL_   int lastMaxBottom=paddingTop; _EL_   int maxBottom=lastMaxBottom; _EL_   int childWidth; _EL_   int childHeight; _EL_   int lineStartIndex=0; _EL_   int lineEndIndex; _EL_   rectList.clear(); _EL_   int childCount=getChildCount(); _EL_   for (int index=0; index < childCount; index++) { _EL_     final View child=getChildAt(index); _EL_     child.measure(MeasureSpec.UNSPECIFIED,MeasureSpec.UNSPECIFIED); _EL_     if (child.getVisibility() == View.GONE)     continue; _EL_     final LayoutParams lp=(LayoutParams)child.getLayoutParams(); _EL_     childWidth=child.getMeasuredWidth(); _EL_     childHeight=child.getMeasuredHeight(); _EL_     left=rightBound + lp.leftMargin; _EL_     right=left + childWidth; _EL_     rightBound=right + lp.rightMargin; _EL_     if (rightBound > maxRightBound) { _EL_       lineEndIndex=index; _EL_       adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,lineEndIndex); _EL_       if (maxBottom >= maxBottomBound)       break; _EL_       if (lineEndIndex == lineStartIndex) { _EL_         child.measure(MeasureSpec.makeMeasureSpec(maxWidth - paddingLeft - paddingRight- lp.leftMargin- lp.rightMargin,MeasureSpec.AT_MOST),MeasureSpec.UNSPECIFIED); _EL_         childWidth=child.getMeasuredWidth(); _EL_         childHeight=child.getMeasuredHeight(); _EL_       } _EL_       left=paddingLeft + lp.leftMargin; _EL_       right=left + childWidth; _EL_       rightBound=right + lp.rightMargin; _EL_       lastMaxBottom=maxBottom; _EL_       top=lastMaxBottom + lp.topMargin; _EL_       bottom=top + childHeight; _EL_       bottomBound=bottom + lp.bottomMargin; _EL_       lineStartIndex=index; _EL_     } _EL_  else { _EL_       top=lastMaxBottom + lp.topMargin; _EL_       bottom=top + childHeight; _EL_       bottomBound=bottom + lp.bottomMargin; _EL_     } _EL_     if (rightBound > maxRightNoPadding)     maxRightNoPadding=rightBound; _EL_     if (bottomBound > maxBottom)     maxBottom=bottomBound; _EL_     Rect rect=new Rect(); _EL_     rect.left=left; _EL_     rect.top=top; _EL_     rect.right=right; _EL_     rect.bottom=bottom; _EL_     rectList.add(rect); _EL_   } _EL_   adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,rectList.size()); _EL_   int measuredWidth; _EL_   int measuredHeight; _EL_   if (widthMode == MeasureSpec.EXACTLY)   measuredWidth=maxWidth; _EL_  else   measuredWidth=maxRightNoPadding + paddingRight; _EL_   if (heightMode == MeasureSpec.EXACTLY)   measuredHeight=maxHeight; _EL_  else { _EL_     measuredHeight=maxBottom + paddingBottom; _EL_     if (heightMode == MeasureSpec.AT_MOST)     measuredHeight=measuredHeight > maxHeight ? maxHeight : measuredHeight; _EL_   } _EL_   setMeasuredDimension(measuredWidth,measuredHeight); _EL_ } _EL_ ', 'private final boolean compareAndSetHead(Node update){ _EL_   return unsafe.compareAndSwapObject(this,headOffset,null,update); _EL_ } _EL_ ', 'private void ensureBufferCapacity(int desiredCapacity){ _EL_   int capacity=pixelBuffer.length; _EL_   while (capacity < desiredCapacity) { _EL_     capacity*=2; _EL_   } _EL_   if (capacity > pixelBuffer.length) { _EL_     pixelBuffer=new byte[capacity]; _EL_   } _EL_ } _EL_ ', 'protected Set<DependencyKind> removeDependency(Node n){ _EL_   Set<DependencyKind> removedKinds=new HashSet<>(); _EL_   for (  DependencyKind dk : DependencyKind.values()) { _EL_     Set<Node> depsByKind=deps.get(dk); _EL_     if (depsByKind == null)     continue; _EL_     if (depsByKind.remove(n)) { _EL_       removedKinds.add(dk); _EL_     } _EL_   } _EL_   return removedKinds; _EL_ } _EL_ ', 'public static <K,V>ConcurrentMap<K,V> newConcurrentMapWithAggressiveConcurrency(){ _EL_   return new ConcurrentHashMap<>(16,0.75f,aggressiveConcurrencyLevel); _EL_ } _EL_ ', 'protected char skipAllWhitespace(Reader r) throws IOException { _EL_   char c; _EL_   do { _EL_     c=(char)r.read(); _EL_   } _EL_  while (Character.isWhitespace(c) && c != (char)-1); _EL_   return c; _EL_ } _EL_ ', 'public Map<String,String> parse(final String str,char separator){ _EL_   if (str == null) { _EL_     return new HashMap<>(); _EL_   } _EL_   return parse(str.toCharArray(),separator); _EL_ } _EL_ ', 'public PriorityQueue(Collection<? extends E> c){ _EL_   if (c instanceof PriorityQueue) { _EL_     getFromPriorityQueue((PriorityQueue<? extends E>)c); _EL_   } _EL_  else   if (c instanceof SortedSet) { _EL_     getFromSortedSet((SortedSet<? extends E>)c); _EL_   } _EL_  else { _EL_     initSize(c); _EL_     addAll(c); _EL_   } _EL_ } _EL_ ', 'private String resourceId(){ _EL_   return subSchemaPath.isEmpty() ? null : lastSchemaNodeName(); _EL_ } _EL_ ', '@Override public boolean isInitial(){ _EL_   return init; _EL_ } _EL_ ', 'public static void performSaveAs(String schemaPrefixFileName,String selFilePath,ContainerConfig containerConfig){ _EL_   try { _EL_     File fileWithDefaultConfiguration=createContainerSchemaFile(schemaPrefixFileName,selFilePath); _EL_     updateFile(containerConfig,fileWithDefaultConfiguration.getPath(),schemaPrefixFileName); _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'public boolean isAborted(){ _EL_   return isAborted.get(); _EL_ } _EL_ ', 'public void append(int key,E value){ _EL_   if (mSize != 0 && key <= mKeys[mSize - 1]) { _EL_     put(key,value); _EL_     return; _EL_   } _EL_   if (mGarbage && mSize >= mKeys.length) { _EL_     gc(); _EL_   } _EL_   int pos=mSize; _EL_   if (pos >= mKeys.length) { _EL_     int n=idealIntArraySize(pos + 1); _EL_     int[] nkeys=new int[n]; _EL_     Object[] nvalues=new Object[n]; _EL_     System.arraycopy(mKeys,0,nkeys,0,mKeys.length); _EL_     System.arraycopy(mValues,0,nvalues,0,mValues.length); _EL_     mKeys=nkeys; _EL_     mValues=nvalues; _EL_   } _EL_   mKeys[pos]=key; _EL_   mValues[pos]=value; _EL_   mSize=pos + 1; _EL_ } _EL_ ', 'public static void print(boolean x){ _EL_   out.print(x); _EL_   out.flush(); _EL_ } _EL_ ', 'public IpcSharedMemorySpace(String tokFileName,int writerPid,int readerPid,int size,boolean reader,IgniteLogger parent) throws IgniteCheckedException { _EL_   assert size > 0 : "Size cannot be less than 1 byte"; _EL_   log=parent.getLogger(IpcSharedMemorySpace.class); _EL_   opSize=size; _EL_   shmemPtr=IpcSharedMemoryUtils.allocateSystemResources(tokFileName,size,DEBUG && log.isDebugEnabled()); _EL_   shmemId=IpcSharedMemoryUtils.sharedMemoryId(shmemPtr); _EL_   semId=IpcSharedMemoryUtils.semaphoreId(shmemPtr); _EL_   isReader=reader; _EL_   this.tokFileName=tokFileName; _EL_   this.readerPid=readerPid; _EL_   this.writerPid=writerPid; _EL_   if (DEBUG && log.isDebugEnabled())   log.debug("Shared memory space has been created: " + this); _EL_ } _EL_ ', '@Override public void close(){ _EL_   try { _EL_     if (connection != null) { _EL_       connection.close(); _EL_     } _EL_   } _EL_  catch (  SQLException e) { _EL_     e.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'public Version addQualifier(String qualifier){ _EL_   List<String> newQualifiers=new ArrayList<>(this.qualifiers); _EL_   newQualifiers.add(qualifier); _EL_   return new Version(major,minor,patch,newQualifiers.toArray(new String[newQualifiers.size()])); _EL_ } _EL_ ', 'public int loadSigned16(int addr){ _EL_   return loadSigned16(addr,AccessSource.CODE); _EL_ } _EL_ ', 'public static String arrayToHexString(byte[] array){ _EL_   return arrayToHexString(array,0,array.length); _EL_ } _EL_ ', 'public DefaultHeatMapDataset(int xSamples,int ySamples,double minX,double maxX,double minY,double maxY){ _EL_   if (xSamples < 1) { _EL_     throw new IllegalArgumentException("Requires \'xSamples\' > 0"); _EL_   } _EL_   if (ySamples < 1) { _EL_     throw new IllegalArgumentException("Requires \'ySamples\' > 0"); _EL_   } _EL_   if (Double.isInfinite(minX) || Double.isNaN(minX)) { _EL_     throw new IllegalArgumentException("\'minX\' cannot be INF or NaN."); _EL_   } _EL_   if (Double.isInfinite(maxX) || Double.isNaN(maxX)) { _EL_     throw new IllegalArgumentException("\'maxX\' cannot be INF or NaN."); _EL_   } _EL_   if (Double.isInfinite(minY) || Double.isNaN(minY)) { _EL_     throw new IllegalArgumentException("\'minY\' cannot be INF or NaN."); _EL_   } _EL_   if (Double.isInfinite(maxY) || Double.isNaN(maxY)) { _EL_     throw new IllegalArgumentException("\'maxY\' cannot be INF or NaN."); _EL_   } _EL_   this.xSamples=xSamples; _EL_   this.ySamples=ySamples; _EL_   this.minX=minX; _EL_   this.maxX=maxX; _EL_   this.minY=minY; _EL_   this.maxY=maxY; _EL_   this.zValues=new double[xSamples][]; _EL_   for (int x=0; x < xSamples; x++) { _EL_     this.zValues[x]=new double[ySamples]; _EL_   } _EL_ } _EL_ ', 'public static void assertEqualsAnyOrder(EventBean[][] expected,EventBean[][] actual){ _EL_   if (compareArraySize(expected,actual)) { _EL_     return; _EL_   } _EL_   int numMatches=0; _EL_   boolean[] foundReceived=new boolean[actual.length]; _EL_   for (  EventBean[] expectedObject : expected) { _EL_     boolean found=false; _EL_     for (int i=0; i < actual.length; i++) { _EL_       if (foundReceived[i]) { _EL_         continue; _EL_       } _EL_       boolean match=compareEqualsExactOrder(actual[i],expectedObject); _EL_       if (match) { _EL_         found=true; _EL_         numMatches++; _EL_         foundReceived[i]=true; _EL_         break; _EL_       } _EL_     } _EL_     if (!found) { _EL_       log.error(".assertEqualsAnyOrder Not found in received results is expected=" + Arrays.toString(expectedObject)); _EL_       log.error(".assertEqualsAnyOrder received=" + Arrays.toString(actual)); _EL_     } _EL_     ScopeTestHelper.assertTrue(found); _EL_   } _EL_   ScopeTestHelper.assertEquals(numMatches,expected.length); _EL_ } _EL_ ', 'private void collectText(){ _EL_   if (textNodeCount > 1) { _EL_     firstTextNode.setText(textBuffer.toString()); _EL_   } _EL_   textNodeCount=0; _EL_ } _EL_ ', '@SuppressWarnings({"rawtypes","unchecked"}) public static <T extends Annotation>T unproxy(T annotation){ _EL_   Function unproxyFunction=getUnproxyFunction(annotation.annotationType()); _EL_   return (T)unproxyFunction.apply(annotation); _EL_ } _EL_ ', 'public static List<Node> parseExpression(Context context,HashSet<String> configNamespaces,String text){ _EL_   return parseExpression(context,configNamespaces,text,0,false); _EL_ } _EL_ ', 'public void addTickMarkSection(final Section SECTION){ _EL_   if (null == SECTION)   return; _EL_   tickMarkSections.add(SECTION); _EL_   Collections.sort(tickMarkSections,new SectionComparator()); _EL_   fireUpdateEvent(REDRAW_EVENT); _EL_ } _EL_ ', 'protected static double calcQ_i(double f,double lambda){ _EL_   return lambda * Math.exp(-lambda * f); _EL_ } _EL_ ', 'public CharBuffer delete(int start,int end){ _EL_   int length=length(); _EL_   if (start < 0 || end < start || length < start)   throw new StringIndexOutOfBoundsException(); _EL_   end=Math.min(length,end); _EL_   int tail=length - end; _EL_   char[] buffer=buffer(); _EL_   for (int i=0; i < tail; i++) { _EL_     buffer[start + i]=buffer[end + i]; _EL_   } _EL_   length(length - (end - start)); _EL_   return this; _EL_ } _EL_ ', 'public void addPlotter(final Plotter plotter){ _EL_   plotters.add(plotter); _EL_ } _EL_ ', 'public void addListener(SpeedrunsLiveListener listener){ _EL_   listeners.add(listener); _EL_ } _EL_ ', 'public boolean find(int start){ _EL_   if (start < 0 || start > input.length()) { _EL_     throw new IndexOutOfBoundsException("start=" + start + "; length="+ input.length()); _EL_   } _EL_ synchronized (this) { _EL_     matchFound=findImpl(address,input,start,matchOffsets); _EL_   } _EL_   return matchFound; _EL_ } _EL_ ', 'public int action(String fault,String action){ _EL_   Integer current=get(fault); _EL_   if (current == null)   throw new IllegalArgumentException(fault); _EL_   boolean no=action.startsWith("no"); _EL_   if (no)   action=action.substring(2); _EL_   Integer bit=getAction(action); _EL_   if (bit == null)   throw new IllegalArgumentException(action); _EL_   int old=current.intValue(); _EL_   int mask=bit.intValue(); _EL_   int n=(old & (~mask)); _EL_   n=(no) ? n : (n | mask); _EL_   put(fault,new Integer(n)); _EL_   return n; _EL_ } _EL_ ', 'public static boolean containsWhitespace(CharSequence str){ _EL_   if (!hasLength(str)) { _EL_     return false; _EL_   } _EL_   int strLen=str.length(); _EL_   for (int i=0; i < strLen; i++) { _EL_     if (Character.isWhitespace(str.charAt(i))) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static <T>T decodeFromBase64(Coder<T> coder,String encodedValue) throws CoderException { _EL_   return decodeFromSafeStream(coder,new ByteArrayInputStream(Base64.decodeBase64(encodedValue)),Coder.Context.OUTER); _EL_ } _EL_ ', 'public void validate(Set setData) throws ValidationException { _EL_   for (Iterator iter=setData.iterator(); iter.hasNext(); ) { _EL_     performValidation((String)iter.next()); _EL_   } _EL_ } _EL_ ', 'public String add(Object... values){ _EL_   double result=0; _EL_   for (int i=0; i < values.length; i++) { _EL_     result+=FunctionHandler.getDouble(values[i]); _EL_   } _EL_   return Double.toString(result); _EL_ } _EL_ ', 'public List<String> listMyDBs(String owner,boolean restricted){ _EL_   Connection conn=null; _EL_   try { _EL_     conn=getConnection(); _EL_     return listMyDBs(conn,owner,restricted); _EL_   } _EL_  catch (  Exception ex) { _EL_     logger.log(Level.SEVERE,"Exception",ex); _EL_   } _EL_  finally { _EL_     DBUtils.close(conn); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'protected void doFunction(float[] inputs,int inputOffset,float[] outputs,int outputOffset){ _EL_   float input=inputs[inputOffset]; _EL_   for (int i=0; i < getNumOutputs(); i++) { _EL_     outputs[i + outputOffset]=getC0(i) + (float)(Math.pow(input,getN()) * (getC1(i) - getC0(i))); _EL_   } _EL_ } _EL_ ', 'public void put(String key,long value){ _EL_   if (key != null) { _EL_     urlParams.put(key,String.valueOf(value)); _EL_   } _EL_ } _EL_ ', 'public int compare(Object o1,Object o2){ _EL_   return comparator.compare(o1,o2); _EL_ } _EL_ ', 'public void addCheckBoxActionListener(ActionListener al){ _EL_   m_enableDistributedExperiment.addActionListener(al); _EL_ } _EL_ ', 'private Rect calcBounds(int index,Paint paint){ _EL_   Rect bounds=new Rect(); _EL_   CharSequence title=getTitle(index); _EL_   bounds.right=(int)paint.measureText(title,0,title.length()); _EL_   bounds.bottom=(int)(paint.descent() - paint.ascent()); _EL_   return bounds; _EL_ } _EL_ ', 'GF256Poly addOrSubtract(GF256Poly other){ _EL_   if (!field.equals(other.field)) { _EL_     throw new IllegalArgumentException("GF256Polys do not have same GF256 field"); _EL_   } _EL_   if (isZero()) { _EL_     return other; _EL_   } _EL_   if (other.isZero()) { _EL_     return this; _EL_   } _EL_   int[] smallerCoefficients=this.coefficients; _EL_   int[] largerCoefficients=other.coefficients; _EL_   if (smallerCoefficients.length > largerCoefficients.length) { _EL_     int[] temp=smallerCoefficients; _EL_     smallerCoefficients=largerCoefficients; _EL_     largerCoefficients=temp; _EL_   } _EL_   int[] sumDiff=new int[largerCoefficients.length]; _EL_   int lengthDiff=largerCoefficients.length - smallerCoefficients.length; _EL_   System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff); _EL_   for (int i=lengthDiff; i < largerCoefficients.length; i++) { _EL_     sumDiff[i]=GF256.addOrSubtract(smallerCoefficients[i - lengthDiff],largerCoefficients[i]); _EL_   } _EL_   return new GF256Poly(field,sumDiff); _EL_ } _EL_ ', 'public static long firstFieldOffset(Class clazz){ _EL_   long minSize=roundUpTo8(headerSize(clazz)); _EL_   while (clazz != Object.class) { _EL_     for (    Field f : clazz.getDeclaredFields()) { _EL_       if ((f.getModifiers() & Modifier.STATIC) == 0) { _EL_         long offset=unsafe.objectFieldOffset(f); _EL_         if (offset < minSize) { _EL_           minSize=offset; _EL_         } _EL_       } _EL_     } _EL_     clazz=clazz.getSuperclass(); _EL_   } _EL_   return minSize; _EL_ } _EL_ ', 'public static void w(String tag,String msg,Object... args){ _EL_   if (sLevel > LEVEL_WARNING) { _EL_     return; _EL_   } _EL_   if (args.length > 0) { _EL_     msg=String.format(msg,args); _EL_   } _EL_   Log.w(tag,msg); _EL_ } _EL_ ', 'private int processPollFds() throws IOException { _EL_   if (pollFds.get(0).revents == POLLIN) { _EL_     byte[] buffer=new byte[8]; _EL_     while (IoBridge.read(wakeupIn,buffer,0,1) > 0) { _EL_     } _EL_   } _EL_   int readyKeyCount=0; _EL_   for (int i=1; i < pollFds.size(); ++i) { _EL_     StructPollfd pollFd=pollFds.get(i); _EL_     if (pollFd.revents == 0) { _EL_       continue; _EL_     } _EL_     if (pollFd.fd == null) { _EL_       break; _EL_     } _EL_     SelectionKeyImpl key=(SelectionKeyImpl)pollFd.userData; _EL_     pollFd.fd=null; _EL_     pollFd.userData=null; _EL_     int ops=key.interestOpsNoCheck(); _EL_     int selectedOps=0; _EL_     if ((pollFd.revents & POLLHUP) != 0) { _EL_       selectedOps|=ops; _EL_     } _EL_     if ((pollFd.revents & POLLIN) != 0) { _EL_       selectedOps|=ops & (OP_ACCEPT | OP_READ); _EL_     } _EL_     if ((pollFd.revents & POLLOUT) != 0) { _EL_       if (key.isConnected()) { _EL_         selectedOps|=ops & OP_WRITE; _EL_       } _EL_  else { _EL_         selectedOps|=ops & OP_CONNECT; _EL_       } _EL_     } _EL_     if (selectedOps != 0) { _EL_       boolean wasSelected=mutableSelectedKeys.contains(key); _EL_       if (wasSelected && key.readyOps() != selectedOps) { _EL_         key.setReadyOps(key.readyOps() | selectedOps); _EL_         ++readyKeyCount; _EL_       } _EL_  else       if (!wasSelected) { _EL_         key.setReadyOps(selectedOps); _EL_         mutableSelectedKeys.add(key); _EL_         ++readyKeyCount; _EL_       } _EL_     } _EL_   } _EL_   return readyKeyCount; _EL_ } _EL_ ', '@Override public void actionPerformed(ActionEvent event){ _EL_   String command=event.getActionCommand(); _EL_   if (command.equals("SelectLabelFont")) { _EL_     attemptLabelFontSelection(); _EL_   } _EL_  else   if (command.equals("SelectLabelPaint")) { _EL_     attemptModifyLabelPaint(); _EL_   } _EL_  else   if (command.equals("SelectTickLabelFont")) { _EL_     attemptTickLabelFontSelection(); _EL_   } _EL_ } _EL_ ', 'public static void upgradeServerInstance(SSOToken ssoToken,String instanceName,String instanceId,Map<String,String> upgradedValues) throws SMSException, SSOException, ConfigurationException, IOException { _EL_   ServiceConfig sc=getServerConfig(ssoToken,instanceName); _EL_   if (sc != null) { _EL_     Map map=sc.getAttributes(); _EL_     map.remove(ATTR_PARENT_SITE_ID); _EL_     Set newSet=getPropertiesSet(upgradedValues); _EL_     map.put(ATTR_SERVER_CONFIG,newSet); _EL_     sc.setAttributes(map); _EL_   } _EL_  else { _EL_     throw new ConfigurationException("Unable to upgrade server " + "default properties: no properties found!"); _EL_   } _EL_ } _EL_ ', 'public static <T>T instance(Class<T> clazz){ _EL_   try { _EL_     return clazz.newInstance(); _EL_   } _EL_  catch (  InstantiationException|IllegalAccessException e) { _EL_     throw new IllegalStateException(e); _EL_   } _EL_ } _EL_ ', "private void pop(final String desc){ _EL_   char c=desc.charAt(0); _EL_   if (c == '(') { _EL_     pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1); _EL_   } _EL_  else   if (c == 'J' || c == 'D') { _EL_     pop(2); _EL_   } _EL_  else { _EL_     pop(1); _EL_   } _EL_ } _EL_ ", 'public GenericSipMsrpSession createMsrpSession(ContactId contact,String featureTag,String[] acceptTypes,String[] acceptWrappedTypes){ _EL_   if (sLogger.isActivated()) { _EL_     sLogger.info("Initiate a MSRP session with contact " + contact); _EL_   } _EL_   return new OriginatingSipMsrpSession(this,contact,featureTag,mRcsSettings,System.currentTimeMillis(),mContactManager,acceptTypes,acceptWrappedTypes); _EL_ } _EL_ ', 'public ForumPostConfig create(ForumPostConfig config){ _EL_   config.addCredentials(this); _EL_   String xml=POST(this.url + "/create-forum-post",config.toXML()); _EL_   Element root=parse(xml); _EL_   if (root == null) { _EL_     return null; _EL_   } _EL_   try { _EL_     ForumPostConfig post=new ForumPostConfig(); _EL_     post.parseXML(root); _EL_     return post; _EL_   } _EL_  catch (  Exception exception) { _EL_     this.exception=SDKException.parseFailure(exception); _EL_     throw this.exception; _EL_   } _EL_ } _EL_ ', 'private void changeValue(AbstractStorageLabel<Object> label,Object newValue){ _EL_   if (!Objects.equals(label.getValue(),newValue)) { _EL_ synchronized (labelEditListeners) { _EL_       for (      LabelEditListener listener : labelEditListeners) { _EL_         listener.preLabelValueChange(label); _EL_       } _EL_     } _EL_     label.setValue(newValue); _EL_ synchronized (labelEditListeners) { _EL_       for (      LabelEditListener listener : labelEditListeners) { _EL_         listener.postLabelValueChange(label); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public void write(byte[] b,int offset,int length) throws IOException { _EL_   if (entry.getMethod() == DEFLATED) { _EL_     if (length > 0) { _EL_       if (!def.finished()) { _EL_         def.setInput(b,offset,length); _EL_         while (!def.needsInput()) { _EL_           deflate(); _EL_         } _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     writeOut(b,offset,length); _EL_     written+=length; _EL_   } _EL_   crc.update(b,offset,length); _EL_ } _EL_ ', 'public void updatePoint(float x,float y){ _EL_   if (Math.sqrt(x * x + y * y) > 1.5)   if (listener != null) { _EL_     listener.onAngleChangedListener(getAngle(x,-y)); _EL_   } _EL_ } _EL_ ', '@Override public int clampViewPositionHorizontal(View child,int left,int dx){ _EL_   if (mDraggedView == null) { _EL_     return 0; _EL_   } _EL_   final int leftBound=0 - MAX_OVERFLOW - (mColumnSizeSide / 2); _EL_   final int rightBound=getWidth() + MAX_OVERFLOW + (mColumnSizeSide / 2); _EL_   return Math.min(Math.max(left,leftBound),rightBound); _EL_ } _EL_ ', 'HttpRequestWrapper(HttpServletRequest request){ _EL_   super(request); _EL_ } _EL_ ', 'private int convertToPanelX(double xval){ _EL_   double temp=(xval - m_minX) / m_rangeX; _EL_   temp=temp * m_panelWidth; _EL_   return (int)temp; _EL_ } _EL_ ', 'private Set<String> primaryKeys(PreparedStatement stmt,String owner,String tbl) throws SQLException { _EL_   Set<String> pkCols=new HashSet<>(); _EL_   stmt.setString(1,owner); _EL_   stmt.setString(2,tbl); _EL_   try (ResultSet pkRs=stmt.executeQuery()){ _EL_     while (pkRs.next())     pkCols.add(pkRs.getString(1)); _EL_   } _EL_    return pkCols; _EL_ } _EL_ ', 'public static long readUINT32(InputStream stream) throws IOException { _EL_   long result=0; _EL_   for (int i=0; i <= 24; i+=8) { _EL_     result|=(long)stream.read() << i; _EL_   } _EL_   return result; _EL_ } _EL_ ', 'protected void add(CSVRecord record){ _EL_   records.add(Objects.requireNonNull(record)); _EL_ } _EL_ ', 'private E awaitMatch(Node s,Node pred,E e,boolean timed,long nanos){ _EL_   final long deadline=timed ? System.nanoTime() + nanos : 0L; _EL_   Thread w=Thread.currentThread(); _EL_   int spins=-1; _EL_   ThreadLocalRandom randomYields=null; _EL_   for (; ; ) { _EL_     Object item=s.item; _EL_     if (item != e) { _EL_       s.forgetContents(); _EL_       return LinkedTransferQueue.<E>cast(item); _EL_     } _EL_     if ((w.isInterrupted() || (timed && nanos <= 0)) && s.casItem(e,s)) { _EL_       unsplice(pred,s); _EL_       return e; _EL_     } _EL_     if (spins < 0) { _EL_       if ((spins=spinsFor(pred,s.isData)) > 0)       randomYields=ThreadLocalRandom.current(); _EL_     } _EL_  else     if (spins > 0) { _EL_       --spins; _EL_       if (randomYields.nextInt(CHAINED_SPINS) == 0)       Thread.yield(); _EL_     } _EL_  else     if (s.waiter == null) { _EL_       s.waiter=w; _EL_     } _EL_  else     if (timed) { _EL_       nanos=deadline - System.nanoTime(); _EL_       if (nanos > 0L)       LockSupport.parkNanos(this,nanos); _EL_     } _EL_  else { _EL_       LockSupport.park(this); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static String join(char[] self,String separator){ _EL_   StringBuilder buffer=new StringBuilder(); _EL_   boolean first=true; _EL_   if (separator == null)   separator=""; _EL_   for (  char next : self) { _EL_     if (first) { _EL_       first=false; _EL_     } _EL_  else { _EL_       buffer.append(separator); _EL_     } _EL_     buffer.append(next); _EL_   } _EL_   return buffer.toString(); _EL_ } _EL_ ', 'private <T>BindingAmp<T> findObjectBinding(Key<T> key){ _EL_   Objects.requireNonNull(key); _EL_   if (key.qualifiers().length != 1) { _EL_     throw new IllegalArgumentException(); _EL_   } _EL_   return (BindingAmp)findBinding(Key.of(Object.class,key.qualifiers()[0])); _EL_ } _EL_ ', 'private void initComputeProgram(){ _EL_   glUseProgram(computeProgram); _EL_   IntBuffer workGroupSize=BufferUtils.createIntBuffer(3); _EL_   glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize); _EL_   workGroupSizeX=workGroupSize.get(0); _EL_   workGroupSizeY=workGroupSize.get(1); _EL_   timeUniform=glGetUniformLocation(computeProgram,"time"); _EL_   blendFactorUniform=glGetUniformLocation(computeProgram,"blendFactor"); _EL_   lightRadiusUniform=glGetUniformLocation(computeProgram,"lightRadius"); _EL_   IntBuffer props=BufferUtils.createIntBuffer(1); _EL_   IntBuffer params=BufferUtils.createIntBuffer(1); _EL_   props.put(0,GL_BUFFER_BINDING); _EL_   int objectsResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,"Objects"); _EL_   glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,objectsResourceIndex,props,null,params); _EL_   objectsSsboBinding=params.get(0); _EL_   int trianglesResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,"Triangles"); _EL_   glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,trianglesResourceIndex,props,null,params); _EL_   trianglesSsboBinding=params.get(0); _EL_   int loc=glGetUniformLocation(computeProgram,"framebufferImage"); _EL_   glGetUniformiv(computeProgram,loc,params); _EL_   framebufferImageBinding=params.get(0); _EL_   loc=glGetUniformLocation(computeProgram,"worldPositionImage"); _EL_   glGetUniformiv(computeProgram,loc,params); _EL_   worldPositionImageBinding=params.get(0); _EL_   loc=glGetUniformLocation(computeProgram,"worldNormalImage"); _EL_   glGetUniformiv(computeProgram,loc,params); _EL_   worldNormalImageBinding=params.get(0); _EL_   glUseProgram(0); _EL_ } _EL_ ', 'public boolean ifTaskCompletedSuccessOrFailureFromResponse(ResponseOnSingeRequest myResponse){ _EL_   boolean isCompleted=false; _EL_   try { _EL_     if (myResponse == null || myResponse.isFailObtainResponse()) { _EL_       return isCompleted; _EL_     } _EL_     String responseBody=myResponse.getResponseBody(); _EL_     if (responseBody.matches(successRegex) || responseBody.matches(failureRegex)) { _EL_       isCompleted=true; _EL_     } _EL_   } _EL_  catch (  Exception t) { _EL_     logger.error("fail" + t); _EL_   } _EL_   return isCompleted; _EL_ } _EL_ ', 'public void centerHorizontal(ArrayList<Integer> nodes){ _EL_   if (m_bNeedsUndoAction) { _EL_     addUndoAction(new centerHorizontalAction(nodes)); _EL_   } _EL_   int nMinY=-1; _EL_   int nMaxY=-1; _EL_   for (int iNode=0; iNode < nodes.size(); iNode++) { _EL_     int nY=getPositionY(nodes.get(iNode)); _EL_     if (nY < nMinY || iNode == 0) { _EL_       nMinY=nY; _EL_     } _EL_     if (nY > nMaxY || iNode == 0) { _EL_       nMaxY=nY; _EL_     } _EL_   } _EL_   for (int iNode=0; iNode < nodes.size(); iNode++) { _EL_     int nNode=nodes.get(iNode); _EL_     m_nPositionY.set(nNode,(nMinY + nMaxY) / 2); _EL_   } _EL_ } _EL_ ', 'protected void appendText(final String text){ _EL_   if (text != null) { _EL_     textBody.append(text); _EL_   } _EL_ } _EL_ ', 'public void onRestoreInstanceState(Bundle savedInstanceState){ _EL_   mSelectedPositions.addAll(savedInstanceState.getIntegerArrayList(TAG)); _EL_   Log.d(TAG,"Restore selection " + mSelectedPositions); _EL_ } _EL_ ', 'public Hour(int hour,Day day){ _EL_   ParamChecks.nullNotPermitted(day,"day"); _EL_   this.hour=(byte)hour; _EL_   this.day=day; _EL_   peg(Calendar.getInstance()); _EL_ } _EL_ ', 'public static boolean isConnectedUsingWifi(){ _EL_   Context context=FeApp.getAppContext(); _EL_   ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE); _EL_   NetworkInfo ni=cm.getActiveNetworkInfo(); _EL_   return ni != null && ni.isConnected() == true && ni.getType() == ConnectivityManager.TYPE_WIFI; _EL_ } _EL_ ', 'public boolean isEmpty(){ _EL_   return extOrdering.isEmpty(); _EL_ } _EL_ ', 'public Process(final File file,final ProgressListener progressListener) throws IOException, XMLException { _EL_   this.processLocation=new FileProcessLocation(file); _EL_   initContext(); _EL_   Reader in=null; _EL_   try { _EL_     in=new InputStreamReader(new FileInputStream(file),"UTF-8"); _EL_     readProcess(in,progressListener); _EL_   } _EL_  catch (  IOException e) { _EL_     throw e; _EL_   } _EL_  finally { _EL_     if (in != null) { _EL_       in.close(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static String extractMusicIDFromMediaID(@NonNull String mediaID){ _EL_   int pos=mediaID.indexOf(LEAF_SEPARATOR); _EL_   if (pos >= 0) { _EL_     return mediaID.substring(pos + 1); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public SimplexNoiseGenerator(Random rand){ _EL_   super(rand); _EL_   offsetW=rand.nextDouble() * 256; _EL_ } _EL_ ', 'public static long[] values(Long[] array){ _EL_   long[] dest=new long[array.length]; _EL_   for (int i=0; i < array.length; i++) { _EL_     Long v=array[i]; _EL_     if (v != null) { _EL_       dest[i]=v.longValue(); _EL_     } _EL_   } _EL_   return dest; _EL_ } _EL_ ', 'protected void initLookup(){ _EL_   m_lookup=new HashMap(); _EL_   for (int i=0; i < m_names.length; ++i) { _EL_     m_lookup.put(m_names[i],new Integer(i)); _EL_   } _EL_ } _EL_ ', 'public void readData(DataInput din) throws IOException { _EL_   din.readShort(); _EL_   count=din.readUnsignedShort(); _EL_   registers=new InputRegister[count]; _EL_   for (int i=0; i < count; i++) { _EL_     registers[i]=new SimpleInputRegister(din.readShort()); _EL_   } _EL_ } _EL_ ', 'public void adjustIndentation(int delta){ _EL_   if (delta < 0) { _EL_     indentationLevel=Math.max(0,indentationLevel + delta); _EL_   } _EL_  else { _EL_     indentationLevel+=delta; _EL_   } _EL_ } _EL_ ', 'public int capacity(){ _EL_   return capacity.get(); _EL_ } _EL_ ', 'protected static token do_code_string() throws java.io.IOException { _EL_   StringBuffer result=new StringBuffer(); _EL_   advance(); _EL_   advance(); _EL_   while (!(next_char == \':\' && next_char2 == \'}\')) { _EL_     if (next_char == EOF_CHAR) { _EL_       emit_error("Specification file ends inside a code string"); _EL_       break; _EL_     } _EL_     result.append(new Character((char)next_char)); _EL_     advance(); _EL_   } _EL_   advance(); _EL_   advance(); _EL_   return new str_token(sym.CODE_STRING,result.toString()); _EL_ } _EL_ ', 'public String random(Object omin,Object omax){ _EL_   int min=FunctionHandler.getInt(omin); _EL_   int max=FunctionHandler.getInt(omax); _EL_   if (max > min) { _EL_     return Integer.toString(rnd.nextInt(max - min) + min); _EL_   } _EL_   return "0"; _EL_ } _EL_ ', 'public static File searchPaths(Iterable<? extends File> paths,String relFile){ _EL_   for (  File path : paths) { _EL_     File f=new File(path,relFile); _EL_     if (f.exists()) { _EL_       return path; _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public boolean hasUnsupportedCriticalExtension(){ _EL_   Set extns=getCriticalExtensionOIDs(); _EL_   return extns != null && !extns.isEmpty(); _EL_ } _EL_ ', 'public boolean softSignin() throws IOException { _EL_   if (url == null) { _EL_     throw new IllegalStateException("Null host"); _EL_   } _EL_   checkResolveHost(); _EL_   if (sessionId != null) { _EL_     if (checkAuthorized(getAuthCheckUrl(sessionId))) { _EL_       LOGGER.fine("Skipping soft init; session ID already exists - " + sessionId); _EL_       return true; _EL_     } _EL_  else { _EL_       sessionId=null; _EL_     } _EL_   } _EL_   long id=loadSessionId(); _EL_   if (id == 0) { _EL_     return false; _EL_   } _EL_   boolean authorized=checkAuthorized(getAuthCheckUrl(id)); _EL_   if (authorized) { _EL_     LOGGER.info("Authorized with session ID: " + id); _EL_     this.sessionId=id; _EL_   } _EL_   return authorized; _EL_ } _EL_ ', 'protected static boolean approxUnit(final StringBuilder sbuf,final int amount,final int size,final String name){ _EL_   int count=amount / size; _EL_   int remainder; _EL_   if (count == 0) { _EL_     return false; _EL_   } _EL_   remainder=amount - (count * size); _EL_   if (remainder >= (size * 95 / 100)) { _EL_     count++; _EL_     sbuf.append(count); _EL_   } _EL_  else   if (remainder >= (size * 3 / 4)) { _EL_     count++; _EL_     sbuf.append("just under "); _EL_     sbuf.append(count); _EL_   } _EL_  else   if (remainder >= (size * 1 / 4)) { _EL_     sbuf.append("about "); _EL_     sbuf.append(count); _EL_     sbuf.append(" and a half"); _EL_     count=2; _EL_   } _EL_  else   if (remainder >= (size * 5 / 100)) { _EL_     sbuf.append("just over "); _EL_     sbuf.append(count); _EL_   } _EL_  else { _EL_     sbuf.append(count); _EL_   } _EL_   sbuf.append(\' \'); _EL_   sbuf.append(Grammar.plnoun(count,name)); _EL_   return true; _EL_ } _EL_ ', 'public static Element createElement(Document doc,String tag,String nsURI,String prefix){ _EL_   String qName=(prefix == null || prefix.length() == 0) ? tag : prefix + ":" + tag; _EL_   return doc.createElementNS(nsURI,qName); _EL_ } _EL_ ', 'public static void modifyFile(File file,Function<String,String> modifier) throws IOException { _EL_   String content=new String(Files.toByteArray(file),StandardCharsets.UTF_8); _EL_   String result=modifier.apply(content); _EL_   Files.write(result.getBytes(StandardCharsets.UTF_8),file); _EL_ } _EL_ ', 'protected double LLToWorldReturningLon(double lat,double lon,Point2D lp){ _EL_   double phi_deg=lat; _EL_   double phi=ProjMath.degToRad(phi_deg); _EL_   double lamba_deg=lon; _EL_   double lamba=ProjMath.degToRad(lamba_deg); _EL_   double dlamda=lamba - lamdaf; _EL_   if (dlamda > Math.PI) { _EL_     dlamda-=MoreMath.TWO_PI_D; _EL_   } _EL_  else   if (dlamda < -Math.PI) { _EL_     dlamda+=MoreMath.TWO_PI_D; _EL_   } _EL_   double e=ellps.ecc; _EL_   double r=0.0d; _EL_   if (!MoreMath.approximately_equal(Math.abs(phi),MoreMath.HALF_PI,EPS10)) { _EL_     double t=lambTsfn(phi,Math.sin(phi),e); _EL_     r=ellps.radius * F * Math.pow(t,n); _EL_   } _EL_   double theta=n * dlamda; _EL_   double easting=falseEasting + r * Math.sin(theta - alpha); _EL_   double northing=falseNorthing + rf - r * Math.cos(theta - alpha); _EL_   lp.setLocation(easting,northing); _EL_   return dlamda; _EL_ } _EL_ ', 'protected boolean removeTurntable(LayoutTurntable o){ _EL_   if (!noWarnTurntable) { _EL_     int selectedValue=JOptionPane.showOptionDialog(this,rb.getString("Question4r"),Bundle.getMessage("WarningTitle"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage("ButtonYes"),Bundle.getMessage("ButtonNo"),rb.getString("ButtonYesPlus")},Bundle.getMessage("ButtonNo")); _EL_     if (selectedValue == 1) { _EL_       return (false); _EL_     } _EL_     if (selectedValue == 2) { _EL_       noWarnTurntable=true; _EL_     } _EL_   } _EL_   if (selectedObject == o) { _EL_     selectedObject=null; _EL_   } _EL_   if (prevSelectedObject == o) { _EL_     prevSelectedObject=null; _EL_   } _EL_   for (int j=0; j < o.getNumberRays(); j++) { _EL_     TrackSegment t=o.getRayConnectOrdered(j); _EL_     if (t != null) { _EL_       substituteAnchor(o.getRayCoordsIndexed(j),o,t); _EL_     } _EL_   } _EL_   for (int i=0; i < turntableList.size(); i++) { _EL_     LayoutTurntable lx=turntableList.get(i); _EL_     if (lx == o) { _EL_       turntableList.remove(i); _EL_       o.remove(); _EL_       setDirty(true); _EL_       repaint(); _EL_       return (true); _EL_     } _EL_   } _EL_   return (false); _EL_ } _EL_ ', 'public INDArray asMatrix(BufferedImage image){ _EL_   if (channels == 3) { _EL_     return toBgr(image); _EL_   } _EL_  else { _EL_     image=scalingIfNeed(image,true); _EL_     int w=image.getWidth(); _EL_     int h=image.getHeight(); _EL_     INDArray ret=Nd4j.create(h,w); _EL_     for (int i=0; i < h; i++) { _EL_       for (int j=0; j < w; j++) { _EL_         ret.putScalar(new int[]{i,j},image.getRGB(i,j)); _EL_       } _EL_     } _EL_     return ret; _EL_   } _EL_ } _EL_ ', 'public FileSystemUtils(){ _EL_   super(); _EL_ } _EL_ ', 'public int scheduledQueueSize(){ _EL_   return schedulerQueueSize.get(); _EL_ } _EL_ ', 'public DGeneralNameChooser(JFrame parent,String title,GeneralName generalName){ _EL_   super(parent,title,ModalityType.DOCUMENT_MODAL); _EL_   initComponents(generalName); _EL_ } _EL_ ', 'public void destroyScene(){ _EL_   clearAnimations(); _EL_   clearCameras(); _EL_   clearLights(); _EL_   clearPlugins(); _EL_   clearChildren(); _EL_   clearFrameCallbacks(); _EL_ } _EL_ ', 'static byte[] discardNonBase64(byte[] data){ _EL_   byte groomedData[]=new byte[data.length]; _EL_   int bytesCopied=0; _EL_   for (int i=0; i < data.length; i++) { _EL_     if (isBase64(data[i])) { _EL_       groomedData[bytesCopied++]=data[i]; _EL_     } _EL_   } _EL_   byte packedData[]=new byte[bytesCopied]; _EL_   System.arraycopy(groomedData,0,packedData,0,bytesCopied); _EL_   return packedData; _EL_ } _EL_ ', 'private static long limitDuration(long leaseDuration,long limit){ _EL_   if (leaseDuration == Lease.ANY || leaseDuration > limit)   leaseDuration=limit; _EL_  else   if (leaseDuration < 0)   throw new IllegalArgumentException("negative lease duration"); _EL_   return leaseDuration; _EL_ } _EL_ ', 'static String pathToCookiePath(String path){ _EL_   if (path == null) { _EL_     return "/"; _EL_   } _EL_   int lastSlash=path.lastIndexOf(\'/\'); _EL_   return path.substring(0,lastSlash + 1); _EL_ } _EL_ ', 'public static String formatSimpleDecimal(double d){ _EL_   return simpleFormat.format(d); _EL_ } _EL_ ', 'protected AbstractCategoryItemLabelGenerator(String labelFormat,DateFormat formatter){ _EL_   ParamChecks.nullNotPermitted(labelFormat,"labelFormat"); _EL_   ParamChecks.nullNotPermitted(formatter,"formatter"); _EL_   this.labelFormat=labelFormat; _EL_   this.numberFormat=null; _EL_   this.percentFormat=NumberFormat.getPercentInstance(); _EL_   this.dateFormat=formatter; _EL_   this.nullValueString="-"; _EL_ } _EL_ ', 'public void delItems(int s,int e){ _EL_   boolean hsbWasVisible=hsbVis; _EL_   boolean vsbWasVisible=vsbVis; _EL_   int oldLastDisplayed=lastItemDisplayed(); _EL_   if (log.isLoggable(PlatformLogger.Level.FINE)) { _EL_     log.fine("Deleting from " + s + " to "+ e); _EL_   } _EL_   if (log.isLoggable(PlatformLogger.Level.FINEST)) { _EL_     log.finest("Last displayed item: " + oldLastDisplayed + ", items in window "+ itemsInWindow()+ ", size "+ items.size()); _EL_   } _EL_   if (items.size() == 0) { _EL_     return; _EL_   } _EL_   if (s > e) { _EL_     int tmp=s; _EL_     s=e; _EL_     e=tmp; _EL_   } _EL_   if (s < 0) { _EL_     s=0; _EL_   } _EL_   if (e >= items.size()) { _EL_     e=items.size() - 1; _EL_   } _EL_   boolean repaintNeeded=(s >= getFirstVisibleItem() && s <= getLastVisibleItem()); _EL_   for (int i=s; i <= e; i++) { _EL_     items.removeElementAt(s); _EL_     int j=posInSel(i); _EL_     if (j != -1) { _EL_       int newsel[]=new int[selected.length - 1]; _EL_       System.arraycopy(selected,0,newsel,0,j); _EL_       System.arraycopy(selected,j + 1,newsel,j,selected.length - (j + 1)); _EL_       selected=newsel; _EL_     } _EL_   } _EL_   int diff=(e - s) + 1; _EL_   for (int i=0; i < selected.length; i++) { _EL_     if (selected[i] > e) { _EL_       selected[i]-=diff; _EL_     } _EL_   } _EL_   int options=PAINT_VSCROLL; _EL_   if (getFocusIndex() > e) { _EL_     setFocusIndex(getFocusIndex() - (e - s + 1)); _EL_     options|=PAINT_FOCUS; _EL_   } _EL_  else   if (getFocusIndex() >= s && getFocusIndex() <= e) { _EL_     int focusBound=(items.size() > 0) ? 0 : -1; _EL_     setFocusIndex(Math.max(s - 1,focusBound)); _EL_     options|=PAINT_FOCUS; _EL_   } _EL_   if (log.isLoggable(PlatformLogger.Level.FINEST)) { _EL_     log.finest("Multiple selections: " + multipleSelections); _EL_   } _EL_   if (vsb.getValue() >= s) { _EL_     if (vsb.getValue() <= e) { _EL_       vsb.setValue(e + 1 - diff); _EL_     } _EL_  else { _EL_       vsb.setValue(vsb.getValue() - diff); _EL_     } _EL_   } _EL_   int oldMaxLength=maxLength; _EL_   maxLength=maxLength(); _EL_   if (maxLength != oldMaxLength) { _EL_     options|=PAINT_HSCROLL; _EL_   } _EL_   layout(); _EL_   repaintNeeded|=(vsbWasVisible ^ vsbVis) || (hsbWasVisible ^ hsbVis); _EL_   if (repaintNeeded) { _EL_     options|=PAINT_ALL; _EL_   } _EL_   repaint(s,oldLastDisplayed,options); _EL_ } _EL_ ', 'static long makeId(SnmpOid oid){ _EL_   long id=0; _EL_   long[] arcs=oid.longValue(false); _EL_   id|=arcs[0] << 56; _EL_   id|=arcs[1] << 48; _EL_   id|=arcs[2] << 40; _EL_   id|=arcs[3] << 32; _EL_   id|=arcs[4] << 24; _EL_   id|=arcs[5] << 16; _EL_   id|=arcs[6] << 8; _EL_   id|=arcs[7]; _EL_   return id; _EL_ } _EL_ ', 'private void cacheAttribute(String attrId,byte[][] values){ _EL_   String cacheKey=name + "|" + attrId; _EL_   valueCache.put(cacheKey,values); _EL_ } _EL_ ', 'void read(Reader policy) throws ParsingException, IOException { _EL_   if (!(policy instanceof BufferedReader)) { _EL_     policy=new BufferedReader(policy); _EL_   } _EL_   st=new StreamTokenizer(policy); _EL_   st.resetSyntax(); _EL_   st.wordChars(\'a\',\'z\'); _EL_   st.wordChars(\'A\',\'Z\'); _EL_   st.wordChars(\'.\',\'.\'); _EL_   st.wordChars(\'0\',\'9\'); _EL_   st.wordChars(\'_\',\'_\'); _EL_   st.wordChars(\'$\',\'$\'); _EL_   st.wordChars(128 + 32,255); _EL_   st.whitespaceChars(0,\' \'); _EL_   st.commentChar(\'/\'); _EL_   st.quoteChar(\'\\\'\'); _EL_   st.quoteChar(\'"\'); _EL_   st.lowerCaseMode(false); _EL_   st.ordinaryChar(\'/\'); _EL_   st.slashSlashComments(true); _EL_   st.slashStarComments(true); _EL_   st.parseNumbers(); _EL_   Hashtable<String,Vector<String>> processedPermissions=null; _EL_   lookahead=st.nextToken(); _EL_   while (lookahead != StreamTokenizer.TT_EOF) { _EL_     if (peek("grant")) { _EL_       GrantEntry ge=parseGrantEntry(processedPermissions); _EL_       if (ge != null)       grantEntries.addElement(ge); _EL_     } _EL_  else { _EL_       throw new ParsingException(st.lineno(),"expected grant " + "statement"); _EL_     } _EL_     match(";"); _EL_   } _EL_ } _EL_ ', 'protected void injectIntoVolumeInformationContainer(Map<String,StringSet> volumeInformation,String infoKey,String altKey,CIMInstance volumeInstance){ _EL_   Object value=getCIMPropertyValue(volumeInstance,infoKey); _EL_   if (null == value) { _EL_     value=getCIMPropertyValue(volumeInstance,altKey); _EL_   } _EL_   String charactersticName=SupportedVolumeInformation.getVolumeInformation(infoKey); _EL_   if (null != value && null != charactersticName) { _EL_     StringSet valueSet=new StringSet(); _EL_     if (value instanceof String) { _EL_       valueSet.add(value.toString()); _EL_     } _EL_  else     if (value instanceof String[]) { _EL_       valueSet.addAll(Arrays.asList((String[])value)); _EL_     } _EL_     volumeInformation.put(charactersticName,valueSet); _EL_   } _EL_ } _EL_ ', '@Override public void onDetachedFromRecyclerView(RecyclerView recyclerView){ _EL_   super.onDetachedFromRecyclerView(recyclerView); _EL_   mAttachedRecyclerViewPool.remove(recyclerView); _EL_ } _EL_ ', 'private void loadFile(String filename,AbstractFileLoader... loaders){ _EL_   ArffSortedTableModel model; _EL_   this.m_Filename=filename; _EL_   createTitle(); _EL_   if (filename.equals("")) { _EL_     model=null; _EL_   } _EL_  else { _EL_     model=new ArffSortedTableModel(filename,loaders); _EL_     model.setShowAttributeIndex(getShowAttributeIndex()); _EL_   } _EL_   m_TableArff.setModel(model); _EL_   setChanged(false); _EL_   createName(); _EL_ } _EL_ ', 'private void destinationTypeChanged(){ _EL_   if (m_Exp == null)   return; _EL_   String str=""; _EL_   if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) { _EL_     m_ResultsDestinationPathLabel.setText("URL:"); _EL_     str=m_destinationDatabaseURL; _EL_     m_BrowseDestinationButton.setEnabled(true); _EL_     m_BrowseDestinationButton.setText("User..."); _EL_   } _EL_  else { _EL_     m_ResultsDestinationPathLabel.setText("Filename:"); _EL_     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) { _EL_       int ind=m_destinationFilename.lastIndexOf(".csv"); _EL_       if (ind > -1) { _EL_         m_destinationFilename=m_destinationFilename.substring(0,ind) + ".arff"; _EL_       } _EL_     } _EL_     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) { _EL_       int ind=m_destinationFilename.lastIndexOf(".arff"); _EL_       if (ind > -1) { _EL_         m_destinationFilename=m_destinationFilename.substring(0,ind) + ".csv"; _EL_       } _EL_     } _EL_     str=m_destinationFilename; _EL_     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) { _EL_       int ind=str.lastIndexOf(".csv"); _EL_       if (ind > -1) { _EL_         str=str.substring(0,ind) + ".arff"; _EL_       } _EL_     } _EL_     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) { _EL_       int ind=str.lastIndexOf(".arff"); _EL_       if (ind > -1) { _EL_         str=str.substring(0,ind) + ".csv"; _EL_       } _EL_     } _EL_     m_BrowseDestinationButton.setEnabled(true); _EL_     m_BrowseDestinationButton.setText("Browse..."); _EL_   } _EL_   if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) { _EL_     DatabaseResultListener drl=null; _EL_     try { _EL_       drl=new DatabaseResultListener(); _EL_     } _EL_  catch (    Exception e) { _EL_       e.printStackTrace(); _EL_     } _EL_     drl.setDatabaseURL(m_destinationDatabaseURL); _EL_     m_Exp.setResultListener(drl); _EL_   } _EL_  else { _EL_     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) { _EL_       InstancesResultListener irl=new InstancesResultListener(); _EL_       if (!m_destinationFilename.equals("")) { _EL_         irl.setOutputFile(new File(m_destinationFilename)); _EL_       } _EL_       m_Exp.setResultListener(irl); _EL_     } _EL_  else     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) { _EL_       CSVResultListener crl=new CSVResultListener(); _EL_       if (!m_destinationFilename.equals("")) { _EL_         crl.setOutputFile(new File(m_destinationFilename)); _EL_       } _EL_       m_Exp.setResultListener(crl); _EL_     } _EL_   } _EL_   m_ResultsDestinationPathTField.setText(str); _EL_   m_Support.firePropertyChange("",null,null); _EL_ } _EL_ ', 'public static InputStream tryGzipInput(InputStream in) throws IOException { _EL_   if (!in.markSupported()) { _EL_     PushbackInputStream pb=new PushbackInputStream(in,16); _EL_     in=pb; _EL_     byte[] magic={0,0}; _EL_     pb.read(magic); _EL_     pb.unread(magic); _EL_     if (magic[0] == 31 && magic[1] == -117) { _EL_       return new GZIPInputStream(pb); _EL_     } _EL_     return in; _EL_   } _EL_   in.mark(16); _EL_   boolean isgzip=(in.read() == 31 && in.read() == -117); _EL_   in.reset(); _EL_   if (isgzip) { _EL_     in=new GZIPInputStream(in); _EL_   } _EL_   return in; _EL_ } _EL_ ', '@Override public int hashCode(){ _EL_   if (location != null)   return location.hashCode(); _EL_  else   return 0; _EL_ } _EL_ ', 'public static Subject createAMIdentitySubject(PolicyManager pm,AMIdentity user) throws PolicyException { _EL_   SubjectTypeManager mgr=pm.getSubjectTypeManager(); _EL_   Subject subject=mgr.getSubject("AMIdentitySubject"); _EL_   Set<String> set=new HashSet<String>(); _EL_   set.add(user.getUniversalId()); _EL_   subject.setValues(set); _EL_   return subject; _EL_ } _EL_ ', 'protected void expandFor(int index,double d){ _EL_   if (index < size)   return; _EL_   int oldSize=size, capacity=vector.length; _EL_   size=index + 1; _EL_   if (capacity >= size)   return; _EL_   while (capacity < size)   capacity*=2; _EL_   double[] t=new double[capacity]; _EL_   System.arraycopy(vector,0,t,0,oldSize); _EL_   if (d != 0)   Arrays.fill(t,oldSize,size,d); _EL_   vector=t; _EL_ } _EL_ ', 'private void doNormalCommandLineList(List<String> commandLineList,List<String> jointOptions,Path classpath){ _EL_   commandLineList.add("--classpath"); _EL_   commandLineList.add(classpath.toString()); _EL_   if (jointCompilation) { _EL_     commandLineList.add("-j"); _EL_     commandLineList.addAll(jointOptions); _EL_   } _EL_   if (destDir != null) { _EL_     commandLineList.add("-d"); _EL_     commandLineList.add(destDir.getPath()); _EL_   } _EL_   if (encoding != null) { _EL_     commandLineList.add("--encoding"); _EL_     commandLineList.add(encoding); _EL_   } _EL_   if (stacktrace) { _EL_     commandLineList.add("-e"); _EL_   } _EL_   if (parameters) { _EL_     commandLineList.add("--parameters"); _EL_   } _EL_   if (useIndy) { _EL_     commandLineList.add("--indy"); _EL_   } _EL_   if (scriptBaseClass != null) { _EL_     commandLineList.add("-b"); _EL_     commandLineList.add(scriptBaseClass); _EL_   } _EL_   if (configscript != null) { _EL_     commandLineList.add("--configscript"); _EL_     commandLineList.add(configscript); _EL_   } _EL_ } _EL_ ', 'private synchronized void loadHexImage(IHex hex){ _EL_   hexTileset.assignMatch(hex,boardview); _EL_   hexTileset.trackHexImages(hex,tracker); _EL_ } _EL_ ', 'public void triangulate(PointSet ps){ _EL_   _triangulations.clear(); _EL_   _triangulations.add(ps); _EL_   start(); _EL_ } _EL_ ', 'private void writeJavaFieldSpec(JavaFieldSpec spec,Document document,Element parentElement){ _EL_   Element parameter=document.createElement("parameter"); _EL_   parameter.appendChild(parentElement); _EL_   parameter.setAttribute("package",spec.getPackageName()); _EL_   parameter.setAttribute("class",spec.getClassName()); _EL_   parameter.setAttribute("field",spec.getFieldName()); _EL_ } _EL_ ', 'private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException { _EL_   s.defaultReadObject(); _EL_   init(getMask(actions)); _EL_ } _EL_ ', 'protected static final String addEscapes(String str){ _EL_   StringBuilder retval=new StringBuilder(); _EL_   char ch; _EL_   for (int i=0; i < str.length(); i++) { _EL_ switch (str.charAt(i)) { _EL_ case 0: _EL_       continue; _EL_ case \'\\b\': _EL_     retval.append("\\\\b"); _EL_   continue; _EL_ case \'\\t\': _EL_ retval.append("\\\\t"); _EL_ continue; _EL_ case \'\\n\': _EL_ retval.append("\\\\n"); _EL_ continue; _EL_ case \'\\f\': _EL_ retval.append("\\\\f"); _EL_ continue; _EL_ case \'\\r\': _EL_ retval.append("\\\\r"); _EL_ continue; _EL_ case \'\\"\': _EL_ retval.append("\\\\\\""); _EL_ continue; _EL_ case \'\\\'\': _EL_ retval.append("\\\\\\\'"); _EL_ continue; _EL_ case \'\\\\\': _EL_ retval.append("\\\\\\\\"); _EL_ continue; _EL_ default : _EL_ if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) { _EL_ String s="0000" + Integer.toString(ch,16); _EL_ retval.append("\\\\u" + s.substring(s.length() - 4,s.length())); _EL_ } _EL_  else { _EL_ retval.append(ch); _EL_ } _EL_ continue; _EL_ } _EL_ } _EL_ return retval.toString(); _EL_ } _EL_ ', 'public static void addFile(String s) throws IOException { _EL_   File f=new File(s); _EL_   addFile(f); _EL_ } _EL_ ', '@SafeVarargs public final void insert(int rowIndex,T... newItems){ _EL_   insert(rowIndex,Arrays.asList(newItems)); _EL_ } _EL_ ', '@Deprecated public void put(Collection<Integer> data){ _EL_   for (  Integer value : data) { _EL_     final int val=value.intValue(); _EL_     min=val < min ? val : min; _EL_     max=val > max ? val : max; _EL_   } _EL_ } _EL_ ', 'public IntBuffer majorVersionBuffer(){ _EL_   int[] holder=new int[1]; _EL_   holder[0]=getMajorVersion(); _EL_   IntBuffer ib=IntBuffer.wrap(holder); _EL_   ib.limit(1); _EL_   return ib; _EL_ } _EL_ ', 'public static byte[] createDataToSign(byte[] digest){ _EL_   byte[] prefix=getDigestInfoPrefix(digest); _EL_   byte[] digestInfo=new byte[prefix.length + digest.length]; _EL_   System.arraycopy(prefix,0,digestInfo,0,prefix.length); _EL_   System.arraycopy(digest,0,digestInfo,prefix.length,digest.length); _EL_   return digestInfo; _EL_ } _EL_ ', 'public HttpRequest ifModifiedSince(final long value){ _EL_   connection.setIfModifiedSince(value); _EL_   return this; _EL_ } _EL_ ', 'public static String tmpJournal(){ _EL_   final File file=Code.wrapThrow(null); _EL_   file.deleteOnExit(); _EL_   return file.getAbsolutePath(); _EL_ } _EL_ ', 'public static Object newInstance(Class<?> cl,int[] dims){ _EL_   if (dims.length == 0) { _EL_     dims=new int[]{1}; _EL_   } _EL_   return Array.newInstance(cl,dims); _EL_ } _EL_ ', 'public void playTogether(Collection<Animator> items){ _EL_   if (items != null && items.size() > 0) { _EL_     mNeedsSort=true; _EL_     Builder builder=null; _EL_     for (    Animator anim : items) { _EL_       if (builder == null) { _EL_         builder=play(anim); _EL_       } _EL_  else { _EL_         builder.with(anim); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'protected static void printErrorMessage(Exception e){ _EL_   if (e instanceof AbortException) { _EL_     LoggingConfiguration.setVerbose(Level.VERBOSE); _EL_     LOG.verbose(e.getMessage()); _EL_   } _EL_  else   if (e instanceof UnspecifiedParameterException) { _EL_     LOG.error(e.getMessage()); _EL_   } _EL_  else   if (e instanceof ParameterException) { _EL_     LOG.error(e.getMessage()); _EL_   } _EL_  else { _EL_     LOG.exception(e); _EL_   } _EL_ } _EL_ ', 'public String requestStatistics(){ _EL_   sb.setLength(0); _EL_   makeStringBuffer(sb); _EL_   return sb.toString(); _EL_ } _EL_ ', 'public static String slurpURLNoExceptions(URL u,String encoding){ _EL_   try { _EL_     return slurpURL(u,encoding); _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public static MoveParticipant[] loadMoveParticipants(RefactoringStatus status,RefactoringProcessor processor,Object element,MoveArguments arguments,IParticipantDescriptorFilter filter,String[] affectedNatures,SharableParticipants shared){ _EL_   RefactoringParticipant[] participants=fgMoveExtensions.getParticipants(status,processor,element,arguments,filter,affectedNatures,shared); _EL_   MoveParticipant[] result=new MoveParticipant[participants.length]; _EL_   System.arraycopy(participants,0,result,0,participants.length); _EL_   return result; _EL_ } _EL_ ', 'private long[] determinePreferenceVector(Relation<V> relation,ModifiableDBIDs[] neighborIDs,StringBuilder msg){ _EL_   if (strategy.equals(Strategy.APRIORI)) { _EL_     return determinePreferenceVectorByApriori(relation,neighborIDs,msg); _EL_   } _EL_  else   if (strategy.equals(Strategy.MAX_INTERSECTION)) { _EL_     return determinePreferenceVectorByMaxIntersection(neighborIDs,msg); _EL_   } _EL_  else { _EL_     throw new IllegalStateException("Should never happen!"); _EL_   } _EL_ } _EL_ ', 'private void paintForegroundDisabled(Graphics2D g,int width,int height){ _EL_   Shape s=decodeArrowPath(width,height); _EL_   g.setPaint(disabledColor); _EL_   g.fill(s); _EL_ } _EL_ ', 'private void onUser(@NotNull TLAbsUser absUser){ _EL_   User currentUser=null; _EL_   User user=null; _EL_   if (absUser instanceof TLUser) { _EL_     final TLUser tlUser=(TLUser)absUser; _EL_     if (tlUser.isMutualContact()) { _EL_       currentUser=(User)databaseManager.getUserById(tlUser.getId()); _EL_       user=onUserContact(currentUser,tlUser); _EL_     } _EL_  else     if (tlUser.isDeleted()) { _EL_       currentUser=(User)databaseManager.getUserById(tlUser.getId()); _EL_       user=onUserDelete(currentUser,tlUser); _EL_     } _EL_  else     if (tlUser.isContact()) { _EL_       currentUser=(User)databaseManager.getUserById(tlUser.getId()); _EL_       user=onUserRequest(currentUser,tlUser); _EL_     } _EL_  else     if (tlUser.isSelf() || !tlUser.isBot()) { _EL_       currentUser=(User)databaseManager.getUserById(tlUser.getId()); _EL_       user=onUserForeign(currentUser,tlUser); _EL_     } _EL_  else { _EL_       BotLogger.info(LOGTAG,"Bot received"); _EL_     } _EL_   } _EL_   if ((currentUser == null) && (user != null)) { _EL_     databaseManager.addUser(user); _EL_   } _EL_  else   if (user != null) { _EL_     databaseManager.updateUser(user); _EL_   } _EL_ } _EL_ ', '@Override public boolean hasNext(){ _EL_   log.log(Level.FINE,"hasNext()"); _EL_   boolean result=(nextEvent != null); _EL_   log.log(Level.FINE,"hasNext(): {0}",result); _EL_   return result; _EL_ } _EL_ ', 'private void initialize(ModelValidator validator,MClient client){ _EL_   if (client == null)   m_globalValidators.add(validator); _EL_   m_validators.add(validator); _EL_   validator.initialize(this,client); _EL_ } _EL_ ', 'void crossOver(BayesNetRepresentation other){ _EL_   boolean[] bits=new boolean[m_bits.length]; _EL_   for (int i=0; i < m_bits.length; i++) { _EL_     bits[i]=m_bits[i]; _EL_   } _EL_   int iCrossOverPoint=m_bits.length; _EL_   do { _EL_     for (int i=iCrossOverPoint; i < m_bits.length; i++) { _EL_       m_bits[i]=bits[i]; _EL_     } _EL_     iCrossOverPoint=m_random.nextInt(m_bits.length); _EL_     for (int i=iCrossOverPoint; i < m_bits.length; i++) { _EL_       m_bits[i]=other.m_bits[i]; _EL_     } _EL_   } _EL_  while (hasCycles()); _EL_   calcGlobalScore(); _EL_ } _EL_ ', 'public void reset(){ _EL_   engineReset(); _EL_   state=INITIAL; _EL_ } _EL_ ', 'public Perspective createUserPerspective(final String name,final boolean show){ _EL_   Perspective perspective=model.addPerspective(name,true); _EL_   perspective.store(context); _EL_   if (show) { _EL_     showPerspective(name); _EL_   } _EL_   return perspective; _EL_ } _EL_ ', 'public static double phred(double error){ _EL_   return -10 * Math.log10(error); _EL_ } _EL_ ', 'public static String of(CtClass type){ _EL_   StringBuffer sbuf=new StringBuffer(); _EL_   toDescriptor(sbuf,type); _EL_   return sbuf.toString(); _EL_ } _EL_ ', '@SafeVarargs public final Token<TokenType> expect(TokenType... expected) throws SimpleParserException { _EL_   if (hasType(expected))   return this; _EL_   throw new SimpleParserException(line,column,"Expected " + Arrays.toString(expected) + ", but got "+ toString()); _EL_ } _EL_ ', '@Deprecated public boolean isAssignableFrom(Type from){ _EL_   if (from == null) { _EL_     return false; _EL_   } _EL_   if (type.equals(from)) { _EL_     return true; _EL_   } _EL_   if (type instanceof Class<?>) { _EL_     return rawType.isAssignableFrom($Gson$Types.getRawType(from)); _EL_   } _EL_  else   if (type instanceof ParameterizedType) { _EL_     return isAssignableFrom(from,(ParameterizedType)type,new HashMap<String,Type>()); _EL_   } _EL_  else   if (type instanceof GenericArrayType) { _EL_     return rawType.isAssignableFrom($Gson$Types.getRawType(from)) && isAssignableFrom(from,(GenericArrayType)type); _EL_   } _EL_  else { _EL_     throw buildUnexpectedTypeError(type,Class.class,ParameterizedType.class,GenericArrayType.class); _EL_   } _EL_ } _EL_ ', 'EgDemandDetails insertPenalty(final BigDecimal chqBouncePenalty,final Module module){ _EL_   EgDemandDetails demandDetail=null; _EL_   if (chqBouncePenalty != null && chqBouncePenalty.compareTo(BigDecimal.ZERO) > 0) { _EL_     final Installment currInstallment=getCurrentInstallment(module); _EL_     final EgDemandReasonMaster egDemandReasonMaster=demandGenericDao.getDemandReasonMasterByCode(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,module); _EL_     if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException(" Penalty Demand reason Master is null in method  insertPenalty"); _EL_     final EgDemandReason egDemandReason=demandGenericDao.getDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster,currInstallment,module); _EL_     if (egDemandReason == null)     throw new ApplicationRuntimeException(" Penalty Demand reason is null in method  insertPenalty "); _EL_     demandDetail=EgDemandDetails.fromReasonAndAmounts(chqBouncePenalty,egDemandReason,BigDecimal.ZERO); _EL_   } _EL_   return demandDetail; _EL_ } _EL_ ', 'public SampleInfo(ByteBuffer bb) throws IOException { _EL_   numberOfChannels=bb.getInt(); _EL_   sampleRate=bb.getInt(); _EL_   coeffMin=bb.getFloat(); _EL_   coeffRange=bb.getFloat(); _EL_   postEmphasis=bb.getFloat(); _EL_   residualFold=bb.getInt(); _EL_ } _EL_ ', 'public void handleMaintenance(Operation maintOp){ _EL_   performPendingRequestMaintenance(); _EL_   checkAndScheduleSynchronization(this.cachedGroupState.membershipUpdateTimeMicros); _EL_   maintOp.complete(); _EL_ } _EL_ ', 'public <T>T time(Callable<T> event) throws Exception { _EL_   final long startTime=clock.tick(); _EL_   try { _EL_     return event.call(); _EL_   } _EL_   finally { _EL_     update(clock.tick() - startTime); _EL_   } _EL_ } _EL_ ', 'public static boolean isPostJDK7(String bytecodeVersion){ _EL_   return JDK7.equals(bytecodeVersion) || JDK8.equals(bytecodeVersion); _EL_ } _EL_ ', 'public PutIndexTemplateRequest mapping(String type,Object... source){ _EL_   mapping(type,PutMappingRequest.buildFromSimplifiedDef(type,source)); _EL_   return this; _EL_ } _EL_ ', 'private static char[] zzUnpackCMap(String packed){ _EL_   char[] map=new char[0x10000]; _EL_   int i=0; _EL_   int j=0; _EL_   while (i < 160) { _EL_     int count=packed.charAt(i++); _EL_     char value=packed.charAt(i++); _EL_     do     map[j++]=value; _EL_  while (--count > 0); _EL_   } _EL_   return map; _EL_ } _EL_ ', 'private InputStream findTemplate(String path,String template){ _EL_   try { _EL_     File file=new File(path,template); _EL_     if (file.canRead()) { _EL_       return new BufferedInputStream(new FileInputStream(file.getAbsolutePath())); _EL_     } _EL_  else { _EL_       return null; _EL_     } _EL_   } _EL_  catch (  FileNotFoundException fnfe) { _EL_     return null; _EL_   } _EL_ } _EL_ ', '@Override public synchronized void initialize(){ _EL_   if (!mRootDirectory.exists()) { _EL_     if (!mRootDirectory.mkdirs()) { _EL_       VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath()); _EL_     } _EL_     return; _EL_   } _EL_   File[] files=mRootDirectory.listFiles(); _EL_   if (files == null) { _EL_     return; _EL_   } _EL_   for (  File file : files) { _EL_     BufferedInputStream fis=null; _EL_     try { _EL_       fis=new BufferedInputStream(new FileInputStream(file)); _EL_       CacheHeader entry=CacheHeader.readHeader(fis); _EL_       entry.size=file.length(); _EL_       putEntry(entry.key,entry); _EL_     } _EL_  catch (    IOException e) { _EL_       if (file != null) { _EL_         file.delete(); _EL_       } _EL_     } _EL_  finally { _EL_       try { _EL_         if (fis != null) { _EL_           fis.close(); _EL_         } _EL_       } _EL_  catch (      IOException ignored) { _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public void addListener(CircularProgressViewListener listener){ _EL_   if (listener != null)   listeners.add(listener); _EL_ } _EL_ ', '@Override public void render(final int type,final Graphics2D g2,final float scaling,final boolean isFormGlyph){ _EL_   glyphDisplay.setScalingValues(0,0,scaling); _EL_   final float OLDglyphScale=glyphScale; _EL_   if (isFormGlyph) { _EL_     glyphScale=scaling * glyphScale; _EL_   } _EL_   AffineTransform aff=null; _EL_   if (glyphScale != 1f) { _EL_     aff=g2.getTransform(); _EL_     g2.scale(glyphScale,glyphScale); _EL_   } _EL_   glyphDisplay.setG2(g2); _EL_   glyphDisplay.paint(null,null,null); _EL_   if (aff != null) { _EL_     g2.setTransform(aff); _EL_   } _EL_   glyphScale=OLDglyphScale; _EL_ } _EL_ ', 'public List<String> reset(List<String> replace){ _EL_   ArrayList<String> copy=new ArrayList<String>(retainedVars.size()); _EL_   copy.addAll(retainedVars); _EL_   retainedVars.clear(); _EL_   if (replace != null) { _EL_     retainedVars.addAll(replace); _EL_   } _EL_   return copy; _EL_ } _EL_ ', 'protected void release(){ _EL_   AppContext tempAppContext=null; _EL_ synchronized (grabReleaseSynchronizer) { _EL_     if (usageCount > 1) { _EL_       --usageCount; _EL_     } _EL_  else { _EL_ synchronized (threadGroupSynchronizer) { _EL_         tempAppContext=resetAppContext(); _EL_       } _EL_     } _EL_   } _EL_   if (tempAppContext != null) { _EL_     try { _EL_       tempAppContext.dispose(); _EL_     } _EL_  catch (    IllegalThreadStateException e) { _EL_     } _EL_   } _EL_ } _EL_ ', 'public synchronized void deleteAllTables(){ _EL_   List<String> tableNames=new ArrayList<String>(tableLookup.keySet()); _EL_   for (  String s : tableNames) { _EL_     deleteTable(s); _EL_   } _EL_ } _EL_ ', 'public PetCategory findOne(String id){ _EL_   log.debug("Request to get PetCategory : {}",id); _EL_   PetCategory petCategory=petCategoryRepository.findOne(UUID.fromString(id)); _EL_   return petCategory; _EL_ } _EL_ ', 'private void markRemovedDefaultSessionToken(String site,String token){ _EL_   if (removedDefaultTokens == null)   removedDefaultTokens=new HashMap<>(1); _EL_   HashSet<String> removedSet=removedDefaultTokens.get(site); _EL_   if (removedSet == null) { _EL_     removedSet=new HashSet<>(1); _EL_     removedDefaultTokens.put(site,removedSet); _EL_   } _EL_   removedSet.add(token); _EL_ } _EL_ ', 'public Exchange(final Request request,final Origin origin){ _EL_   this.currentRequest=request; _EL_   this.origin=origin; _EL_   this.timestamp=System.currentTimeMillis(); _EL_ } _EL_ ', 'public static float computeDiscardAlpha(float amount,float range){ _EL_   if (Math.abs(amount) < 1.0f)   return 1.0f; _EL_   float t=amount / range; _EL_   t=MathUtils.clamp(t,-1.0f,1.0f); _EL_   return 1.f - Math.abs(t); _EL_ } _EL_ ', 'public static final FileTime unixTimeToFileTime(long utime){ _EL_   return FileTime.from(utime,TimeUnit.SECONDS); _EL_ } _EL_ ', 'public static CipherTextIvMac encrypt(String plaintext,SecretKeys secretKeys,String encoding) throws UnsupportedEncodingException, GeneralSecurityException { _EL_   return encrypt(plaintext.getBytes(encoding),secretKeys); _EL_ } _EL_ ', 'public void removeAddress(AddressEntity address){ _EL_   addresses.remove(address); _EL_ } _EL_ ', '@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){ _EL_   int widthSpecMode=MeasureSpec.getMode(widthMeasureSpec); _EL_   int heightSpecMode=MeasureSpec.getMode(heightMeasureSpec); _EL_   int parentWidth=MeasureSpec.getSize(widthMeasureSpec); _EL_   int parentHeight=MeasureSpec.getSize(heightMeasureSpec); _EL_   boolean resizeWidth=widthSpecMode != MeasureSpec.EXACTLY; _EL_   boolean resizeHeight=heightSpecMode != MeasureSpec.EXACTLY; _EL_   int width=parentWidth; _EL_   int height=parentHeight; _EL_   if (sWidth > 0 && sHeight > 0) { _EL_     if (resizeWidth && resizeHeight) { _EL_       width=sWidth(); _EL_       height=sHeight(); _EL_     } _EL_  else     if (resizeHeight) { _EL_       height=(int)((((double)sHeight() / (double)sWidth()) * width)); _EL_     } _EL_  else     if (resizeWidth) { _EL_       width=(int)((((double)sWidth() / (double)sHeight()) * height)); _EL_     } _EL_   } _EL_   width=Math.max(width,getSuggestedMinimumWidth()); _EL_   height=Math.max(height,getSuggestedMinimumHeight()); _EL_   setMeasuredDimension(width,height); _EL_ } _EL_ ', 'protected void fireEndElem(String name) throws org.xml.sax.SAXException { _EL_   if (m_tracer != null) { _EL_     flushMyWriter(); _EL_     m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENDELEMENT,name,(Attributes)null); _EL_   } _EL_ } _EL_ ', 'public Spanned[] history(){ _EL_   int i=0; _EL_   Spanned[] array=new Spanned[history.size()]; _EL_   for (  String s : history) { _EL_     if (s != null) { _EL_       array[i]=Html.fromHtml(s); _EL_       i++; _EL_     } _EL_   } _EL_   return array; _EL_ } _EL_ ', 'public static String format(String message,Object[] arguments){ _EL_   return MessageFormat.format(message,arguments); _EL_ } _EL_ ', 'private void insertProsodySettings(Utterance utterance,Element element){ _EL_   Element prosody=(Element)DomUtils.getAncestor(element,MaryXML.PROSODY); _EL_   if (prosody == null) { _EL_     return; _EL_   } _EL_   Element voice=(Element)DomUtils.getAncestor(element,MaryXML.VOICE); _EL_   if (voice != null && DomUtils.isAncestor(prosody,voice)) { _EL_     return; _EL_   } _EL_   Element paragraph=(Element)DomUtils.getAncestor(element,MaryXML.PARAGRAPH); _EL_   if (paragraph != null && DomUtils.isAncestor(prosody,paragraph)) { _EL_     return; _EL_   } _EL_   for (  String att : PROSODY_ATTRIBUTES) { _EL_     String val=prosody.getAttribute(att); _EL_     if (!val.equals("")) { _EL_       utterance.setString(att,val); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static boolean createFolder(@SuppressWarnings("UnusedParameters") Context mContext,String path,String folderName){ _EL_   File SDCardRoot=new File(path,folderName); _EL_   if (!SDCardRoot.exists()) { _EL_     return SDCardRoot.mkdir(); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private void translateMatrixAfterRotate(int axis,float trans,float prevImageSize,float imageSize,int prevViewSize,int viewSize,int drawableSize){ _EL_   if (imageSize < viewSize) { _EL_     m[axis]=(viewSize - (drawableSize * m[Matrix.MSCALE_X])) * 0.5f; _EL_   } _EL_  else   if (trans > 0) { _EL_     m[axis]=-((imageSize - viewSize) * 0.5f); _EL_   } _EL_  else { _EL_     float percentage=(Math.abs(trans) + (0.5f * prevViewSize)) / prevImageSize; _EL_     m[axis]=-((percentage * imageSize) - (viewSize * 0.5f)); _EL_   } _EL_ } _EL_ ', 'private CharSequence createTickerText(String title,String body){ _EL_   SpannableStringBuilder spannableStringBuilder=new SpannableStringBuilder(); _EL_   spannableStringBuilder.append(title); _EL_   spannableStringBuilder.append("\\n"); _EL_   spannableStringBuilder.append(body); _EL_   spannableStringBuilder.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),0,title.length(),Spannable.SPAN_INCLUSIVE_INCLUSIVE); _EL_   return spannableStringBuilder; _EL_ } _EL_ ', 'private void addProtocolIfNotExists(Set<String> protocols,String protocolType){ _EL_   if (!protocols.contains(protocolType)) { _EL_     protocols.add(protocolType); _EL_   } _EL_ } _EL_ ', 'void add(Object key){ _EL_   table.put(key,key); _EL_ } _EL_ ', 'public Configuration loadConfigFromResource(Resource resource){ _EL_   PropertiesConfiguration result=new PropertiesConfiguration(); _EL_   try { _EL_     result.load(resource.getInputStream()); _EL_     return result; _EL_   } _EL_  catch (  ConfigurationException|IOException e) { _EL_     LOG.error(CONFIGURATION_LOAD_ERROR.format(resource.getFilename()),e); _EL_     throw new SystemConfigException(CONFIGURATION_LOAD_ERROR.format(resource.getFilename()),e); _EL_   } _EL_ } _EL_ ', 'private static final PublicKey constructPublicKey(byte[] encodedKey,String encodedKeyAlgorithm) throws InvalidKeyException, NoSuchAlgorithmException { _EL_   PublicKey key=null; _EL_   try { _EL_     KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm,SunJCE.getInstance()); _EL_     X509EncodedKeySpec keySpec=new X509EncodedKeySpec(encodedKey); _EL_     key=keyFactory.generatePublic(keySpec); _EL_   } _EL_  catch (  NoSuchAlgorithmException nsae) { _EL_     try { _EL_       KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm); _EL_       X509EncodedKeySpec keySpec=new X509EncodedKeySpec(encodedKey); _EL_       key=keyFactory.generatePublic(keySpec); _EL_     } _EL_  catch (    NoSuchAlgorithmException nsae2) { _EL_       throw new NoSuchAlgorithmException("No installed providers " + "can create keys for the " + encodedKeyAlgorithm + "algorithm"); _EL_     } _EL_ catch (    InvalidKeySpecException ikse2) { _EL_       InvalidKeyException ike=new InvalidKeyException("Cannot construct public key"); _EL_       ike.initCause(ikse2); _EL_       throw ike; _EL_     } _EL_   } _EL_ catch (  InvalidKeySpecException ikse) { _EL_     InvalidKeyException ike=new InvalidKeyException("Cannot construct public key"); _EL_     ike.initCause(ikse); _EL_     throw ike; _EL_   } _EL_   return key; _EL_ } _EL_ ', 'public int numHits(String query) throws ParseException, IOException { _EL_   Integer count; _EL_   if ((count=(Integer)m_hitCountCache.get(query)) == null) { _EL_     Hits hits=search(query); _EL_     count=new Integer(hits.length()); _EL_     m_hitCountCache.put(query,count); _EL_   } _EL_   return count.intValue(); _EL_ } _EL_ ', 'public static boolean expressionIsTrue(double leftSide,Operator operator,double rightSide){ _EL_   final String expression=leftSide + operator.getMathematicalOperator() + rightSide; _EL_   return expressionIsTrue(expression); _EL_ } _EL_ ', 'public MockResponse addHeader(String name,Object value){ _EL_   return addHeader(name + ": " + String.valueOf(value)); _EL_ } _EL_ ', 'final public void println(char v){ _EL_   Writer out=this.out; _EL_   if (out == null)   return; _EL_   try { _EL_     out.write(v); _EL_     out.write(_newline,0,_newline.length); _EL_   } _EL_  catch (  IOException e) { _EL_     log.log(Level.FINE,e.toString(),e); _EL_   } _EL_ } _EL_ ', "public static String extractIndentString(String line,int tabWidth,int indentWidth){ _EL_   if (tabWidth < 0 || indentWidth < 0 || line == null) { _EL_     throw new IllegalArgumentException(); _EL_   } _EL_   int size=line.length(); _EL_   int end=0; _EL_   int spaceEquivs=0; _EL_   int characters=0; _EL_   for (int i=0; i < size; i++) { _EL_     char c=line.charAt(i); _EL_     if (c == '\\t') { _EL_       spaceEquivs=calculateSpaceEquivalents(tabWidth,spaceEquivs); _EL_       characters++; _EL_     } _EL_  else     if (isIndentChar(c)) { _EL_       spaceEquivs++; _EL_       characters++; _EL_     } _EL_  else { _EL_       break; _EL_     } _EL_     if (spaceEquivs >= indentWidth) { _EL_       end+=characters; _EL_       characters=0; _EL_       if (indentWidth == 0) { _EL_         spaceEquivs=0; _EL_       } _EL_  else { _EL_         spaceEquivs=spaceEquivs % indentWidth; _EL_       } _EL_     } _EL_   } _EL_   if (end == 0) { _EL_     return Util.EMPTY_STRING; _EL_   } _EL_  else   if (end == size) { _EL_     return line; _EL_   } _EL_  else { _EL_     return line.substring(0,end); _EL_   } _EL_ } _EL_ ", 'private void preInsert(MkMaxEntry q,MkMaxEntry nodeEntry,KNNHeap knns_q){ _EL_   if (LOG.isDebugging()) { _EL_     LOG.debugFine("preInsert " + q + " - "+ nodeEntry+ "\\n"); _EL_   } _EL_   double knnDist_q=knns_q.getKNNDistance(); _EL_   MkMaxTreeNode<O> node=getNode(nodeEntry); _EL_   double knnDist_node=0.; _EL_   if (node.isLeaf()) { _EL_     for (int i=0; i < node.getNumEntries(); i++) { _EL_       MkMaxEntry p=node.getEntry(i); _EL_       double dist_pq=distance(p.getRoutingObjectID(),q.getRoutingObjectID()); _EL_       if (dist_pq <= knnDist_q) { _EL_         knns_q.insert(dist_pq,p.getRoutingObjectID()); _EL_         if (knns_q.size() >= getKmax()) { _EL_           knnDist_q=knns_q.getKNNDistance(); _EL_           q.setKnnDistance(knnDist_q); _EL_         } _EL_       } _EL_       if (dist_pq <= p.getKnnDistance()) { _EL_         KNNList knns_p=knnq.getKNNForDBID(p.getRoutingObjectID(),getKmax() - 1); _EL_         if (knns_p.size() + 1 < getKmax()) { _EL_           p.setKnnDistance(Double.NaN); _EL_         } _EL_  else { _EL_           double knnDist_p=Math.max(dist_pq,knns_p.getKNNDistance()); _EL_           p.setKnnDistance(knnDist_p); _EL_         } _EL_       } _EL_       knnDist_node=Math.max(knnDist_node,p.getKnnDistance()); _EL_     } _EL_   } _EL_  else { _EL_     List<DoubleIntPair> entries=getSortedEntries(node,q.getRoutingObjectID()); _EL_     for (    DoubleIntPair distEntry : entries) { _EL_       MkMaxEntry dirEntry=node.getEntry(distEntry.second); _EL_       double entry_knnDist=dirEntry.getKnnDistance(); _EL_       if (distEntry.second < entry_knnDist || distEntry.second < knnDist_q) { _EL_         preInsert(q,dirEntry,knns_q); _EL_         knnDist_q=knns_q.getKNNDistance(); _EL_       } _EL_       knnDist_node=Math.max(knnDist_node,dirEntry.getKnnDistance()); _EL_     } _EL_   } _EL_   if (LOG.isDebugging()) { _EL_     LOG.debugFine(nodeEntry + "set knn dist " + knnDist_node); _EL_   } _EL_   nodeEntry.setKnnDistance(knnDist_node); _EL_ } _EL_ ', 'private static boolean addIfMatches(List<String> container,String statusLine,char x,char y){ _EL_   if (matches(statusLine,x,y)) { _EL_     final String filename=statusLine.substring(3); _EL_     if (!container.contains(filename)) { _EL_       container.add(filename); _EL_     } _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static String encodeFromString(String plain,String charset) throws CoderException, UnsupportedEncodingException { _EL_   return encode(plain.getBytes(charset)); _EL_ } _EL_ ', 'public void slide(SLIDE slide){ _EL_   if (slide == SLIDE.UP) { _EL_     if (!isPanelShown()) { _EL_       int position=0; _EL_       if (items != null) { _EL_         position=items.size() / 2; _EL_       } _EL_       slideUp(position); _EL_     } _EL_   } _EL_  else { _EL_     hidePanelPickerUI(); _EL_   } _EL_ } _EL_ ', 'public DrawerBuilder addStickyDrawerItems(@NonNull IDrawerItem... stickyDrawerItems){ _EL_   if (this.mStickyDrawerItems == null) { _EL_     this.mStickyDrawerItems=new ArrayList<>(); _EL_   } _EL_   Collections.addAll(this.mStickyDrawerItems,IdDistributor.checkIds(stickyDrawerItems)); _EL_   return this; _EL_ } _EL_ ', 'public void reset(){ _EL_   ns.removeAllElements(); _EL_   ks.setLength(0); _EL_   cur=tt.root; _EL_   run(); _EL_ } _EL_ ', '@LayoutlibDelegate static float sin(float angle){ _EL_   return (float)Math.sin(angle); _EL_ } _EL_ ', 'public static void renderFlattenedAnnotation(final PdfObject form,final DynamicVectorRenderer current,final int pageNumber,final int rotation){ _EL_   final BufferedImage image=AnnotationFactory.getIcon(form); _EL_   if (image != null) { _EL_     final GraphicsState gs=new GraphicsState(); _EL_     final int iconHeight=image.getHeight(); _EL_     final int iconWidth=image.getWidth(); _EL_     final float[] rect=form.getFloatArray(PdfDictionary.Rect); _EL_     if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) { _EL_       rect[2]=rect[0] + iconWidth; _EL_       rect[1]=rect[3] - iconHeight; _EL_       form.setFloatArray(PdfDictionary.Rect,rect); _EL_     } _EL_ switch (rotation % 360) { _EL_ case 0: _EL_       gs.CTM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}}; _EL_     gs.x=rect[0]; _EL_   gs.y=rect[3] - iconHeight; _EL_ gs.CTM[2][0]=rect[0]; _EL_ gs.CTM[2][1]=rect[3] - iconHeight; _EL_ break; _EL_ case 90: _EL_ gs.CTM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}}; _EL_ gs.x=rect[0] + iconHeight; _EL_ gs.y=rect[3]; _EL_ gs.CTM[2][0]=rect[0] + iconHeight; _EL_ gs.CTM[2][1]=rect[3]; _EL_ break; _EL_ case 180: _EL_ gs.CTM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}}; _EL_ gs.x=rect[0]; _EL_ gs.y=rect[3] + iconHeight; _EL_ gs.CTM[2][0]=rect[0]; _EL_ gs.CTM[2][1]=rect[3] + iconHeight; _EL_ break; _EL_ case 270: _EL_ gs.CTM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}}; _EL_ gs.x=rect[0] - iconHeight; _EL_ gs.y=rect[3]; _EL_ gs.CTM[2][0]=rect[0] - iconHeight; _EL_ gs.CTM[2][1]=rect[3]; _EL_ break; _EL_ } _EL_ if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) { _EL_ current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken); _EL_ current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Darken); _EL_ } _EL_ current.drawImage(pageNumber,image,gs,false,form.getObjectRefAsString(),-1); _EL_ if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) { _EL_ current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal); _EL_ current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Normal); _EL_ } _EL_ } _EL_ } _EL_ ', 'public byte[] extractData(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException { _EL_   return null; _EL_ } _EL_ ', 'public static String makeRelatedSessionID(String encryptedID,SessionID prototype) throws SessionException { _EL_   prototype.parseSessionString(); _EL_   return makeSessionID(encryptedID,prototype.getExtension(),prototype.tail); _EL_ } _EL_ ', 'public static GeneralPath cardinalSpline(float pts[],int start,int npoints,float slack,boolean closed){ _EL_   GeneralPath path=new GeneralPath(); _EL_   path.moveTo(pts[start],pts[start + 1]); _EL_   return cardinalSpline(path,pts,start,npoints,slack,closed,0f,0f); _EL_ } _EL_ ', 'public static Automaton determinize(Automaton a,int maxDeterminizedStates){ _EL_   if (a.isDeterministic()) { _EL_     return a; _EL_   } _EL_   if (a.getNumStates() <= 1) { _EL_     return a; _EL_   } _EL_   Automaton.Builder b=new Automaton.Builder(); _EL_   SortedIntSet.FrozenIntSet initialset=new SortedIntSet.FrozenIntSet(0,0); _EL_   b.createState(); _EL_   LinkedList<SortedIntSet.FrozenIntSet> worklist=new LinkedList<>(); _EL_   Map<SortedIntSet.FrozenIntSet,Integer> newstate=new HashMap<>(); _EL_   worklist.add(initialset); _EL_   b.setAccept(0,a.isAccept(0)); _EL_   newstate.put(initialset,0); _EL_   final PointTransitionSet points=new PointTransitionSet(); _EL_   final SortedIntSet statesSet=new SortedIntSet(5); _EL_   Transition t=new Transition(); _EL_   while (worklist.size() > 0) { _EL_     SortedIntSet.FrozenIntSet s=worklist.removeFirst(); _EL_     for (int i=0; i < s.values.length; i++) { _EL_       final int s0=s.values[i]; _EL_       int numTransitions=a.getNumTransitions(s0); _EL_       a.initTransition(s0,t); _EL_       for (int j=0; j < numTransitions; j++) { _EL_         a.getNextTransition(t); _EL_         points.add(t); _EL_       } _EL_     } _EL_     if (points.count == 0) { _EL_       continue; _EL_     } _EL_     points.sort(); _EL_     int lastPoint=-1; _EL_     int accCount=0; _EL_     final int r=s.state; _EL_     for (int i=0; i < points.count; i++) { _EL_       final int point=points.points[i].point; _EL_       if (statesSet.upto > 0) { _EL_         assert lastPoint != -1; _EL_         statesSet.computeHash(); _EL_         Integer q=newstate.get(statesSet); _EL_         if (q == null) { _EL_           q=b.createState(); _EL_           if (q >= maxDeterminizedStates) { _EL_             throw new TooComplexToDeterminizeException(a,maxDeterminizedStates); _EL_           } _EL_           final SortedIntSet.FrozenIntSet p=statesSet.freeze(q); _EL_           worklist.add(p); _EL_           b.setAccept(q,accCount > 0); _EL_           newstate.put(p,q); _EL_         } _EL_  else { _EL_           assert (accCount > 0 ? true : false) == b.isAccept(q) : "accCount=" + accCount + " vs existing accept="+ b.isAccept(q)+ " states="+ statesSet; _EL_         } _EL_         b.addTransition(r,q,lastPoint,point - 1); _EL_       } _EL_       int[] transitions=points.points[i].ends.transitions; _EL_       int limit=points.points[i].ends.next; _EL_       for (int j=0; j < limit; j+=3) { _EL_         int dest=transitions[j]; _EL_         statesSet.decr(dest); _EL_         accCount-=a.isAccept(dest) ? 1 : 0; _EL_       } _EL_       points.points[i].ends.next=0; _EL_       transitions=points.points[i].starts.transitions; _EL_       limit=points.points[i].starts.next; _EL_       for (int j=0; j < limit; j+=3) { _EL_         int dest=transitions[j]; _EL_         statesSet.incr(dest); _EL_         accCount+=a.isAccept(dest) ? 1 : 0; _EL_       } _EL_       lastPoint=point; _EL_       points.points[i].starts.next=0; _EL_     } _EL_     points.reset(); _EL_     assert statesSet.upto == 0 : "upto=" + statesSet.upto; _EL_   } _EL_   Automaton result=b.finish(); _EL_   assert result.isDeterministic(); _EL_   return result; _EL_ } _EL_ ', 'public boolean matches(String seq){ _EL_   return queue.regionMatches(true,pos,seq,0,seq.length()); _EL_ } _EL_ ', 'public static int compare(Comparable c1,Comparable c2,boolean nullGreater){ _EL_   if (c1 == c2) { _EL_     return 0; _EL_   } _EL_  else   if (c1 == null) { _EL_     return (nullGreater ? 1 : -1); _EL_   } _EL_  else   if (c2 == null) { _EL_     return (nullGreater ? -1 : 1); _EL_   } _EL_   return c1.compareTo(c2); _EL_ } _EL_ ', 'public boolean checkRootBySuperUserApk(){ _EL_   File suApk=new File(SU_APK); _EL_   if (suApk != null && suApk.exists()) { _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'boolean trackMotionScroll(int deltaY,int incrementalDeltaY){ _EL_   final int childCount=getChildCount(); _EL_   if (childCount == 0) { _EL_     return true; _EL_   } _EL_   final int firstTop=getScrollChildTop(); _EL_   final int lastBottom=getScrollChildBottom(); _EL_   final Rect listPadding=mListPadding; _EL_   final int end=getHeight() - listPadding.bottom; _EL_   final int spaceAbove=listPadding.top - getFillChildTop(); _EL_   final int spaceBelow=getFillChildBottom() - end; _EL_   final int height=getHeight() - getPaddingBottom() - getPaddingTop(); _EL_   if (deltaY < 0) { _EL_     deltaY=Math.max(-(height - 1),deltaY); _EL_   } _EL_  else { _EL_     deltaY=Math.min(height - 1,deltaY); _EL_   } _EL_   if (incrementalDeltaY < 0) { _EL_     incrementalDeltaY=Math.max(-(height - 1),incrementalDeltaY); _EL_   } _EL_  else { _EL_     incrementalDeltaY=Math.min(height - 1,incrementalDeltaY); _EL_   } _EL_   final int firstPosition=mFirstPosition; _EL_   if (firstPosition == 0 && firstTop >= listPadding.top && deltaY >= 0) { _EL_     return true; _EL_   } _EL_   if (firstPosition + childCount == mItemCount && lastBottom <= end && deltaY <= 0) { _EL_     return true; _EL_   } _EL_   final boolean down=incrementalDeltaY < 0; _EL_   final int headerViewsCount=getHeaderViewsCount(); _EL_   final int footerViewsStart=mItemCount - getFooterViewsCount(); _EL_   int start=0; _EL_   int count=0; _EL_   if (down) { _EL_     final int top=listPadding.top - incrementalDeltaY; _EL_     for (int i=0; i < childCount; i++) { _EL_       final View child=getChildAt(i); _EL_       if (child.getBottom() >= top) { _EL_         break; _EL_       } _EL_  else { _EL_         count++; _EL_         int position=firstPosition + i; _EL_         if (position >= headerViewsCount && position < footerViewsStart) { _EL_           mRecycler.addScrapView(child); _EL_           if (ViewDebug.TRACE_RECYCLER) { _EL_             ViewDebug.trace(child,ViewDebug.RecyclerTraceType.MOVE_TO_SCRAP_HEAP,firstPosition + i,-1); _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     final int bottom=getHeight() - listPadding.bottom - incrementalDeltaY; _EL_     for (int i=childCount - 1; i >= 0; i--) { _EL_       final View child=getChildAt(i); _EL_       if (child.getTop() <= bottom) { _EL_         break; _EL_       } _EL_  else { _EL_         start=i; _EL_         count++; _EL_         int position=firstPosition + i; _EL_         if (position >= headerViewsCount && position < footerViewsStart) { _EL_           mRecycler.addScrapView(child); _EL_           if (ViewDebug.TRACE_RECYCLER) { _EL_             ViewDebug.trace(child,ViewDebug.RecyclerTraceType.MOVE_TO_SCRAP_HEAP,firstPosition + i,-1); _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_   mMotionViewNewTop=mMotionViewOriginalTop + deltaY; _EL_   mBlockLayoutRequests=true; _EL_   if (count > 0) { _EL_     detachViewsFromParent(start,count); _EL_   } _EL_   tryOffsetChildrenTopAndBottom(incrementalDeltaY); _EL_   if (down) { _EL_     mFirstPosition+=count; _EL_   } _EL_   invalidate(); _EL_   final int absIncrementalDeltaY=Math.abs(incrementalDeltaY); _EL_   if (spaceAbove < absIncrementalDeltaY || spaceBelow < absIncrementalDeltaY) { _EL_     fillGap(down); _EL_   } _EL_   mBlockLayoutRequests=false; _EL_   invokeOnItemScrollListener(); _EL_   awakenScrollBars(); _EL_   return false; _EL_ } _EL_ ', 'public static <E>E syncRest(final Iterator<? extends Object> iterator,final Callable<E> task) throws Exception { _EL_   if (iterator.hasNext()) { _EL_ synchronized (iterator.next()) { _EL_       return syncRest(iterator,task); _EL_     } _EL_   } _EL_  else { _EL_     return task.call(); _EL_   } _EL_ } _EL_ ', 'private static Component findByName(Container root,String componentName){ _EL_   if (verbose) { _EL_     log("findByName(" + root + ", "+ componentName+ ")"); _EL_   } _EL_   int count=root.getComponentCount(); _EL_   for (int iter=0; iter < count; iter++) { _EL_     Component c=root.getComponentAt(iter); _EL_     String n=c.getName(); _EL_     if (n != null && n.equals(componentName)) { _EL_       return c; _EL_     } _EL_     if (c instanceof Container) { _EL_       c=findByName((Container)c,componentName); _EL_       if (c != null) { _EL_         return c; _EL_       } _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public void writeField(final String name,final float value) throws java.io.IOException { _EL_   writeField(name,Float.toString(value)); _EL_ } _EL_ ', 'private List extractColumnKeys(String line){ _EL_   List keys=new java.util.ArrayList(); _EL_   int fieldIndex=0; _EL_   int start=0; _EL_   for (int i=0; i < line.length(); i++) { _EL_     if (line.charAt(i) == this.fieldDelimiter) { _EL_       if (fieldIndex > 0) { _EL_         String key=line.substring(start,i); _EL_         keys.add(removeStringDelimiters(key)); _EL_       } _EL_       start=i + 1; _EL_       fieldIndex++; _EL_     } _EL_   } _EL_   String key=line.substring(start,line.length()); _EL_   keys.add(removeStringDelimiters(key)); _EL_   return keys; _EL_ } _EL_ ', 'protected void drawRhombus(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){ _EL_   int halfWidth=w / 2; _EL_   int halfHeight=h / 2; _EL_   Polygon rhombus=new Polygon(); _EL_   rhombus.addPoint(x + halfWidth,y); _EL_   rhombus.addPoint(x + w,y + halfHeight); _EL_   rhombus.addPoint(x + halfWidth,y + h); _EL_   rhombus.addPoint(x,y + halfHeight); _EL_   drawPolygon(rhombus,fillColor,fillPaint,penColor,shadow); _EL_ } _EL_ ', 'private void convertAndFillByteBufferListToByteArrayList(List<byte[]> dictionaryValues,List<ByteBuffer> dictionaryValueBufferList){ _EL_   for (  ByteBuffer buffer : dictionaryValueBufferList) { _EL_     int length=buffer.limit(); _EL_     byte[] value=new byte[length]; _EL_     buffer.get(value,0,value.length); _EL_     dictionaryValues.add(value); _EL_   } _EL_ } _EL_ ', 'static Object instantiate(Class<?> sibling,String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException { _EL_   ClassLoader cl=sibling.getClassLoader(); _EL_   Class<?> cls=ClassFinder.findClass(className,cl); _EL_   return cls.newInstance(); _EL_ } _EL_ ', 'private byte[] generateDerivedKey(int bytesNeeded){ _EL_   byte[] buf=new byte[digest.getDigestSize()]; _EL_   byte[] key=new byte[bytesNeeded]; _EL_   int offset=0; _EL_   for (; ; ) { _EL_     digest.update(password,0,password.length); _EL_     digest.update(salt,0,salt.length); _EL_     digest.doFinal(buf,0); _EL_     int len=(bytesNeeded > buf.length) ? buf.length : bytesNeeded; _EL_     System.arraycopy(buf,0,key,offset,len); _EL_     offset+=len; _EL_     bytesNeeded-=len; _EL_     if (bytesNeeded == 0) { _EL_       break; _EL_     } _EL_     digest.reset(); _EL_     digest.update(buf,0,buf.length); _EL_   } _EL_   return key; _EL_ } _EL_ ', 'public static int computeStringWidth(FontMetrics fm,String str){ _EL_   return SwingUtilities2.stringWidth(null,fm,str); _EL_ } _EL_ ', 'public void actionPerformed(ActionEvent ae){ _EL_   String command=ae.getActionCommand(); _EL_   if (command == DisplayPaletteCmd) { _EL_     if (Debug.debugging("layer")) { _EL_       Debug.output(getName() + " displaying palette"); _EL_     } _EL_     showPalette(); _EL_   } _EL_  else   if (command == HidePaletteCmd) { _EL_     if (Debug.debugging("layer")) { _EL_       Debug.output(getName() + " hiding palette"); _EL_     } _EL_     hidePalette(); _EL_   } _EL_  else   if (command == DisplayPropertiesCmd) { _EL_     Inspector inspector=new Inspector(); _EL_     inspector.inspectPropertyConsumer(this); _EL_   } _EL_ } _EL_ ', '@JsonCreator public DataSourceMetadata(@JsonProperty("name") String name,@JsonProperty("properties") Map<String,String> properties,@JsonProperty("segments") List<DataSegment> segments){ _EL_   this.name=name; _EL_   this.properties=Collections.unmodifiableMap(properties); _EL_   this.segments=Collections.unmodifiableList(segments); _EL_ } _EL_ ', 'public EMail createEMail(String value){ _EL_   EmailField emailImpl=new EmailField(); _EL_   try { _EL_     emailImpl.setValue(value); _EL_   } _EL_  catch (  SdpException s) { _EL_     s.printStackTrace(); _EL_   } _EL_   return emailImpl; _EL_ } _EL_ ', 'public AddressLookup(String serverUrl,String serialNo,String password){ _EL_   this.serverUrl=serverUrl.trim(); _EL_   this.clientID=serialNo.trim(); _EL_   this.accessCode=password.trim(); _EL_ } _EL_ ', 'public void addChangeListener(ChangeListener l){ _EL_   m_ChangeListeners.add(l); _EL_ } _EL_ ', '@Override public void openElement(String tagName){ _EL_   XMLElement newElement=new XMLElement(); _EL_   newElement.setName(tagName); _EL_   current.addChild(newElement); _EL_   stack.push(current); _EL_   current=newElement; _EL_ } _EL_ ', 'public Format(String pFormatString){ _EL_   String formatVars[]=pFormatString.split("/"); _EL_   mId=Integer.parseInt(formatVars[0]); _EL_ } _EL_ ', 'public boolean equals(Object interval){ _EL_   if (intervals == null) { _EL_     return false; _EL_   } _EL_   return intervals.contains(interval); _EL_ } _EL_ ', 'public void start(){ _EL_   if (setState(EnumSet.of(TaskState.INITIAL,TaskState.QUEUED),TaskState.RUNNING)) { _EL_     DHT.logDebug("Starting Task: " + toString()); _EL_     startTime=System.currentTimeMillis(); _EL_     try { _EL_       serializedUpdate.run(); _EL_     } _EL_  catch (    Exception e) { _EL_       DHT.log(e,LogLevel.Error); _EL_     } _EL_   } _EL_ } _EL_ ', 'public JournalIndex(final IRawStore store,final Checkpoint checkpoint,final IndexMetadata metadata,final boolean readOnly){ _EL_   super(store,checkpoint,metadata,readOnly); _EL_ } _EL_ ', 'private void accesBreakpointInstruction(ArrayList<Instruction> instructions,int lineNumber,int op,BPINSTRUCTION_STATUS status){ _EL_   for (int i=0; i < instructions.size(); i++) { _EL_     Instruction currInst=instructions.get(i); _EL_     if (op == 0) { _EL_       if (currInst instanceof MRJobInstruction) { _EL_         MRJobInstruction currMRInst=(MRJobInstruction)currInst; _EL_         if (currMRInst.findMRInstructions(lineNumber)) { _EL_           BreakPointInstruction breakpoint=new BreakPointInstruction(); _EL_           breakpoint.setLocation(currInst); _EL_           breakpoint.setInstID(instID++); _EL_           breakpoint.setBPInstructionLocation(location); _EL_           instructions.add(i,breakpoint); _EL_           DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber); _EL_           return; _EL_         } _EL_       } _EL_  else       if (currInst instanceof CPInstruction || currInst instanceof SPInstruction) { _EL_         if (currInst.getLineNum() == lineNumber) { _EL_           BreakPointInstruction breakpoint=new BreakPointInstruction(); _EL_           breakpoint.setLocation(currInst); _EL_           breakpoint.setInstID(instID++); _EL_           breakpoint.setBPInstructionLocation(location); _EL_           instructions.add(i,breakpoint); _EL_           DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber); _EL_           return; _EL_         } _EL_       } _EL_  else       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) { _EL_         BreakPointInstruction breakpoint=(BreakPointInstruction)currInst; _EL_         breakpoint.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED); _EL_         breakpoint.setBPInstructionLocation(location); _EL_         instructions.set(i,breakpoint); _EL_         DMLBreakpointManager.updateBreakpoint(lineNumber,status); _EL_         return; _EL_       } _EL_     } _EL_  else { _EL_       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) { _EL_         if (op == 1) { _EL_           BreakPointInstruction breakpoint=(BreakPointInstruction)currInst; _EL_           breakpoint.setLocation(currInst); _EL_           breakpoint.setInstID(currInst.getInstID()); _EL_           breakpoint.setBPInstructionStatus(status); _EL_           breakpoint.setBPInstructionLocation(location); _EL_           instructions.set(i,breakpoint); _EL_           DMLBreakpointManager.updateBreakpoint(lineNumber,status); _EL_         } _EL_  else { _EL_           instructions.remove(i); _EL_           DMLBreakpointManager.removeBreakpoint(lineNumber,status); _EL_         } _EL_         return; _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'private void closeFile(){ _EL_   if (plogStream != null) { _EL_     try { _EL_       plogStream.close(); _EL_       logger.info("File " + plogFilename + " closed."); _EL_     } _EL_  catch (    IOException e) { _EL_       logger.warn("Unable to close file cleanly: " + plogFilename); _EL_     } _EL_  finally { _EL_       plogStream=null; _EL_     } _EL_   } _EL_ } _EL_ ', 'private BuddyPanelController(){ _EL_   buddyPanel=new JPanel(); _EL_   buddyPanel.setLayout(new SBoxLayout(SBoxLayout.VERTICAL)); _EL_   model=new BuddyListModel(); _EL_   JList<Buddy> list=new BuddyPanel(model); _EL_   buddyPanel.add(list,SLayout.EXPAND_X); _EL_ } _EL_ ', 'private void removeGapsWithEdgeConcentration(int nodesLevel[]){ _EL_   final int temp=m_nodes.size(), temp2=graphMatrix[0].length; _EL_   int tempCnt=1; _EL_   for (int n=0; n < temp; n++) { _EL_     for (int i=0; i < temp2; i++) { _EL_       if (graphMatrix[n][i] > 0) { _EL_         if (nodesLevel[i] > nodesLevel[n] + 1) { _EL_           int tempLevel=nodesLevel[n]; _EL_           boolean tempNodePresent=false; _EL_           int k=temp; _EL_           int tempnode=n; _EL_           while (tempLevel < nodesLevel[i] - 1) { _EL_             tempNodePresent=false; _EL_             for (; k < graphMatrix.length; k++) { _EL_               if (graphMatrix[tempnode][k] > 0) { _EL_                 tempNodePresent=true; _EL_                 break; _EL_               } _EL_             } _EL_             if (tempNodePresent) { _EL_               tempnode=k; _EL_               k=k + 1; _EL_               tempLevel++; _EL_             } _EL_  else { _EL_               if (tempnode != n) { _EL_                 tempnode=k - 1; _EL_               } _EL_               break; _EL_             } _EL_           } _EL_           if (m_nodes.get(tempnode).nodeType == SINGULAR_DUMMY) { _EL_             m_nodes.get(tempnode).nodeType=PLURAL_DUMMY; _EL_           } _EL_           if (tempNodePresent) { _EL_             graphMatrix[tempnode][i]=graphMatrix[n][i]; _EL_             graphMatrix[i][tempnode]=-graphMatrix[n][i]; _EL_             graphMatrix[n][i]=0; _EL_             graphMatrix[i][n]=0; _EL_             continue; _EL_           } _EL_           int len=graphMatrix.length; _EL_           int tempMatrix[][]=new int[graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)][graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)]; _EL_           int level=nodesLevel[tempnode] + 1; _EL_           copyMatrix(graphMatrix,tempMatrix); _EL_           String s1=new String("S" + tempCnt++); _EL_           m_nodes.add(new GraphNode(s1,s1,SINGULAR_DUMMY)); _EL_           int temp3[]=new int[nodeLevels[level].length + 1]; _EL_           System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length); _EL_           temp3[temp3.length - 1]=m_nodes.size() - 1; _EL_           nodeLevels[level]=temp3; _EL_           temp3=new int[m_nodes.size() + 1]; _EL_           System.arraycopy(nodesLevel,0,temp3,0,nodesLevel.length); _EL_           temp3[m_nodes.size() - 1]=level; _EL_           nodesLevel=temp3; _EL_           level++; _EL_           int m; _EL_           for (m=len; m < len + nodesLevel[i] - nodesLevel[tempnode] - 1 - 1; m++) { _EL_             String s2=new String("S" + tempCnt++); _EL_             m_nodes.add(new GraphNode(s2,s2,SINGULAR_DUMMY)); _EL_             temp3=new int[nodeLevels[level].length + 1]; _EL_             System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length); _EL_             temp3[temp3.length - 1]=m_nodes.size() - 1; _EL_             nodeLevels[level]=temp3; _EL_             temp3=new int[m_nodes.size() + 1]; _EL_             System.arraycopy(nodesLevel,0,temp3,0,nodesLevel.length); _EL_             temp3[m_nodes.size() - 1]=level; _EL_             nodesLevel=temp3; _EL_             level++; _EL_             tempMatrix[m][m + 1]=tempMatrix[n][i]; _EL_             if (m > len) { _EL_               tempMatrix[m][m - 1]=-1 * tempMatrix[n][i]; _EL_             } _EL_           } _EL_           tempMatrix[m][i]=tempMatrix[n][i]; _EL_           tempMatrix[tempnode][len]=tempMatrix[n][i]; _EL_           tempMatrix[len][tempnode]=-1 * tempMatrix[n][i]; _EL_           tempMatrix[i][m]=-1 * tempMatrix[n][i]; _EL_           if (m > len) { _EL_             tempMatrix[m][m - 1]=-1 * tempMatrix[n][i]; _EL_           } _EL_           tempMatrix[n][i]=0; _EL_           tempMatrix[i][n]=0; _EL_           graphMatrix=tempMatrix; _EL_         } _EL_  else { _EL_           graphMatrix[i][n]=-1 * graphMatrix[n][i]; _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'private final boolean parkAndCheckInterrupt(){ _EL_   LockSupport.park(this); _EL_   return Thread.interrupted(); _EL_ } _EL_ ', 'public static CLPlatform[] listGPUPoweredPlatforms(){ _EL_   CLPlatform[] platforms=listPlatforms(); _EL_   List<CLPlatform> out=new ArrayList<CLPlatform>(platforms.length); _EL_   for (  CLPlatform platform : platforms) { _EL_     if (platform.listGPUDevices(true).length > 0)     out.add(platform); _EL_   } _EL_   return out.toArray(new CLPlatform[out.size()]); _EL_ } _EL_ ', 'public ActionRequestHelper dependsOn(ActionRequestHelper dependency){ _EL_   mDependencies.add(dependency); _EL_   return this; _EL_ } _EL_ ', 'static boolean isDate(Object obj){ _EL_   return obj instanceof Date && obj.getClass() == Date.class; _EL_ } _EL_ ', 'public static String toXml(final Config toConvert,Boolean prettyXml) throws JAXBException, IOException { _EL_   String retVal=""; _EL_   try (StringWriter writer=new StringWriter()){ _EL_     toXml(toConvert,writer,prettyXml); _EL_     retVal=writer.toString(); _EL_     return retVal; _EL_   } _EL_  } _EL_ ', 'private static List<Vector2D> buildQuadrilateral(final Vector2D... points){ _EL_   List<Vector2D> quadrilateral=new ArrayList<Vector2D>(); _EL_   for (  Vector2D p : points) { _EL_     if (!quadrilateral.contains(p)) { _EL_       quadrilateral.add(p); _EL_     } _EL_   } _EL_   return quadrilateral; _EL_ } _EL_ ', 'private void heapifyUp(int twopos,Comparable<Object> cur){ _EL_   while (twopos > 0) { _EL_     final int parent=(twopos - 1) >>> 1; _EL_     Comparable<Object> par=twoheap[parent]; _EL_     if (cur.compareTo(par) <= 0) { _EL_       break; _EL_     } _EL_     twoheap[twopos]=par; _EL_     twopos=parent; _EL_   } _EL_   twoheap[twopos]=cur; _EL_ } _EL_ ', 'void write(Environment env,DataOutputStream out,ConstantPool tab) throws IOException { _EL_   out.writeByte(CONSTANT_NAMEANDTYPE); _EL_   out.writeShort(tab.index(name)); _EL_   out.writeShort(tab.index(type)); _EL_ } _EL_ ', 'public static void initializeProperties(Properties properties,boolean reset,boolean withDefaults){ _EL_   Properties defaultProp=null; _EL_   if (withDefaults) { _EL_     SSOToken appToken=AccessController.doPrivileged(AdminTokenAction.getInstance()); _EL_     defaultProp=ServerConfiguration.getDefaults(appToken); _EL_   } _EL_   PropertiesHolder oldProps; _EL_   PropertiesHolder newProps; _EL_   do { _EL_     oldProps=propertiesHolderRef.get(); _EL_     final Properties combined=new Properties(); _EL_     if (defaultProp != null) { _EL_       combined.putAll(defaultProp); _EL_     } _EL_     if (!reset) { _EL_       combined.putAll(oldProps.properties); _EL_     } _EL_     combined.putAll(properties); _EL_     newProps=new PropertiesHolder(Maps.fromProperties(combined)); _EL_   } _EL_  while (!propertiesHolderRef.compareAndSet(oldProps,newProps)); _EL_ } _EL_ ', 'public void addNetworkListener(final NetworkListener listener){ _EL_   networkListeners.add(listener); _EL_ } _EL_ ', 'public static void appendContentPrefix(HttpServletRequest request,Appendable urlBuffer) throws IOException { _EL_   appendContentPrefix(request,urlBuffer,null); _EL_ } _EL_ ', 'public void addErrorListener(final ErrorListener errorListener){ _EL_   if (errorListeners == null) { _EL_     errorListeners=new ArrayList<ErrorListener>(); _EL_   } _EL_   errorListeners.add(errorListener); _EL_ } _EL_ ', 'public static void importBaseTypes(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException { _EL_   final String query="INSERT INTO " + CTableNames.BASE_TYPES_TABLE + " SELECT "+ moduleId+ ", id, name, size, pointer, signed "+ "FROM "+ String.format(CTableNames.RAW_BASE_TYPES,rawModuleId); _EL_   connection.executeUpdate(query,true); _EL_   final String updateSequence=String.format("SELECT setval(\'bn_base_types_id_seq\', " + "COALESCE((SELECT MAX(id) + 1 FROM %s), 1), false) from %s",CTableNames.BASE_TYPES_TABLE,CTableNames.BASE_TYPES_TABLE); _EL_   connection.executeQuery(updateSequence,true); _EL_ } _EL_ ', '@SuppressWarnings("deprecation") public Object readMatrixOld(Element node) throws Exception { _EL_   weka.core.Matrix matrix; _EL_   weka.core.matrix.Matrix matrixNew; _EL_   if (DEBUG) { _EL_     trace(new Throwable(),node.getAttribute(ATT_NAME)); _EL_   } _EL_   m_CurrentNode=node; _EL_   matrixNew=(weka.core.matrix.Matrix)readMatrix(node); _EL_   matrix=new weka.core.Matrix(matrixNew.getArrayCopy()); _EL_   return matrix; _EL_ } _EL_ ', 'public void recordFileSystemOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,Object... extParam){ _EL_   try { _EL_     boolean opStatus=(Operation.Status.ready == status) ? true : false; _EL_     String evType; _EL_     evType=opType.getEvType(opStatus); _EL_     String evDesc=opType.getDescription(); _EL_     String opStage=AuditLogManager.AUDITOP_END; _EL_     _logger.info("opType: {} detail: {}",opType.toString(),evType.toString() + \':\' + evDesc); _EL_     URI uri=(URI)extParam[0]; _EL_     recordBourneFileSystemEvent(dbClient,evType,status,evDesc,uri); _EL_     auditFile(dbClient,opType,opStatus,opStage,uri.toString()); _EL_   } _EL_  catch (  Exception e) { _EL_     _logger.error("Failed to record filesystem operation {}, err:",opType.toString(),e); _EL_   } _EL_ } _EL_ ', 'public CoreTokenException(int errorCode){ _EL_   this.errorCode=errorCode; _EL_   this.message=getLocalizedMessage(Locale.getDefault()); _EL_ } _EL_ ', 'public DExamineSsl(JFrame parent,KseFrame kseFrame){ _EL_   super(parent,res.getString("DExamineSsl.Title"),Dialog.ModalityType.DOCUMENT_MODAL); _EL_   this.kseFrame=kseFrame; _EL_   initComponents(); _EL_ } _EL_ ', 'static void normalize(StringBuilder number){ _EL_   String normalizedNumber=normalize(number.toString()); _EL_   number.replace(0,number.length(),normalizedNumber); _EL_ } _EL_ ', 'public double[] skipTo(final int index) throws MathIllegalArgumentException { _EL_   if (index == 0) { _EL_     Arrays.fill(x,0); _EL_   } _EL_  else { _EL_     final int i=index - 1; _EL_     final long grayCode=i ^ (i >> 1); _EL_     for (int j=0; j < dimension; j++) { _EL_       long result=0; _EL_       for (int k=1; k <= BITS; k++) { _EL_         final long shift=grayCode >> (k - 1); _EL_         if (shift == 0) { _EL_           break; _EL_         } _EL_         final long ik=shift & 1; _EL_         result^=ik * direction[j][k]; _EL_       } _EL_       x[j]=result; _EL_     } _EL_   } _EL_   count=index; _EL_   return nextVector(); _EL_ } _EL_ ', 'public void removeOrganizationConfiguration(String orgName,String groupName,boolean checkLegacyMode) throws SMSException, SSOException { _EL_   if ((groupName == null) || groupName.length() == 0) { _EL_     groupName=SMSUtils.DEFAULT; _EL_   } _EL_   String orgdn=DNMapper.orgNameToDN(orgName); _EL_   validateSCM(); _EL_   String odn=scm.constructServiceConfigDN(groupName,CreateServiceConfig.ORG_CONFIG_NODE,orgdn); _EL_   CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,odn); _EL_   if (cEntry.isNewEntry()) { _EL_     return; _EL_   } _EL_   if (checkLegacyMode && ServiceManager.isCoexistenceMode() && groupName.equalsIgnoreCase(SMSUtils.DEFAULT)) { _EL_     OrgConfigViaAMSDK amsdk=new OrgConfigViaAMSDK(token,DNMapper.realmNameToAMSDKName(orgdn),orgdn); _EL_     amsdk.unassignService(serviceName); _EL_   } _EL_   if (!cEntry.isNewEntry()) { _EL_     SMSEntry entry=cEntry.getClonedSMSEntry(); _EL_     entry.delete(token); _EL_     cEntry.refresh(entry); _EL_   } _EL_ } _EL_ ', 'public void removeGroupListener(final GroupListener listener){ _EL_   groupListeners.remove(listener); _EL_ } _EL_ ', 'public SetChangelogMapping(String source,String taskName,int changelogPartitionNumber){ _EL_   super(source); _EL_   setType(TYPE); _EL_   setKey(taskName); _EL_   putMessageValue(CHANGELOG_VALUE_KEY,String.valueOf(changelogPartitionNumber)); _EL_ } _EL_ ', '@Override protected String extractKey(final String name){ _EL_   final String key=unescape(name.substring(0,name.length() - 4)); _EL_   return key.equals("\\0") ? null : key; _EL_ } _EL_ ', 'private static float spacing(MotionEvent event){ _EL_   float x=event.getX(0) - event.getX(1); _EL_   float y=event.getY(0) - event.getY(1); _EL_   return (float)Math.sqrt(x * x + y * y); _EL_ } _EL_ ', 'public boolean grabInput(){ _EL_   if (grabLog.isLoggable(PlatformLogger.Level.FINE)) { _EL_     grabLog.fine("Grab input on {0}",this); _EL_   } _EL_   XToolkit.awtLock(); _EL_   try { _EL_     if (XAwtState.getGrabWindow() == this && XAwtState.isManualGrab()) { _EL_       grabLog.fine("    Already Grabbed"); _EL_       return true; _EL_     } _EL_     XBaseWindow prevGrabWindow=XAwtState.getGrabWindow(); _EL_     final int eventMask=(int)(XConstants.ButtonPressMask | XConstants.ButtonReleaseMask | XConstants.EnterWindowMask| XConstants.LeaveWindowMask| XConstants.PointerMotionMask| XConstants.ButtonMotionMask); _EL_     final int ownerEvents=1; _EL_     if (!XToolkit.getSunAwtDisableGrab()) { _EL_       int ptrGrab=XlibWrapper.XGrabPointer(XToolkit.getDisplay(),getContentWindow(),ownerEvents,eventMask,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.None,(XWM.isMotif() ? XToolkit.arrowCursor : XConstants.None),XConstants.CurrentTime); _EL_       if (ptrGrab != XConstants.GrabSuccess) { _EL_         XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime); _EL_         XAwtState.setGrabWindow(null); _EL_         grabLog.fine("    Grab Failure - mouse"); _EL_         return false; _EL_       } _EL_       int keyGrab=XlibWrapper.XGrabKeyboard(XToolkit.getDisplay(),getContentWindow(),ownerEvents,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.CurrentTime); _EL_       if (keyGrab != XConstants.GrabSuccess) { _EL_         XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime); _EL_         XlibWrapper.XUngrabKeyboard(XToolkit.getDisplay(),XConstants.CurrentTime); _EL_         XAwtState.setGrabWindow(null); _EL_         grabLog.fine("    Grab Failure - keyboard"); _EL_         return false; _EL_       } _EL_     } _EL_     if (prevGrabWindow != null) { _EL_       prevGrabWindow.ungrabInputImpl(); _EL_     } _EL_     XAwtState.setGrabWindow(this); _EL_     grabLog.fine("    Grab - success"); _EL_     return true; _EL_   } _EL_   finally { _EL_     XToolkit.awtUnlock(); _EL_   } _EL_ } _EL_ ', 'public synchronized void deleteObservers(){ _EL_   observers.clear(); _EL_ } _EL_ ', 'public MessageCapture(final Logger logger,final boolean captureEntity){ _EL_   this(logger,captureEntity,false); _EL_ } _EL_ ', 'public static void insertIntoCombo(JComboBox combo,Object item){ _EL_   MutableComboBoxModel model=(MutableComboBoxModel)combo.getModel(); _EL_   if (model.getSize() == 0) { _EL_     model.insertElementAt(item,0); _EL_     return; _EL_   } _EL_   Object o=model.getElementAt(0); _EL_   if (o.equals(item)) { _EL_     return; _EL_   } _EL_   model.removeElement(item); _EL_   model.insertElementAt(item,0); _EL_   combo.setSelectedIndex(0); _EL_ } _EL_ ', 'private boolean pythonErrorIn(String output){ _EL_   boolean isError=false; _EL_   String[] outputMultiline=output.split("\\n"); _EL_   Matcher errorMatcher; _EL_   for (  String row : outputMultiline) { _EL_     errorMatcher=errorInLastLine.matcher(row); _EL_     if (errorMatcher.find() == true) { _EL_       isError=true; _EL_       break; _EL_     } _EL_   } _EL_   return isError; _EL_ } _EL_ ', 'public static String numberToString(Number number) throws JSONException { _EL_   if (number == null) { _EL_     throw new JSONException("Number must be non-null"); _EL_   } _EL_   double doubleValue=number.doubleValue(); _EL_   JSON.checkDouble(doubleValue); _EL_   if (number.equals(NEGATIVE_ZERO)) { _EL_     return "-0"; _EL_   } _EL_   long longValue=number.longValue(); _EL_   if (doubleValue == (double)longValue) { _EL_     return Long.toString(longValue); _EL_   } _EL_   return number.toString(); _EL_ } _EL_ ', 'public Set<T> keySet(){ _EL_   return Collections.unmodifiableSet(map.keySet()); _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public PropagationImp(Stack<CompositeTransaction> lineage,boolean serial,long timeout){ _EL_   serial_=serial; _EL_   lineage_=(Stack<CompositeTransaction>)lineage.clone(); _EL_   timeout_=timeout; _EL_ } _EL_ ', 'private static String indent(final int height){ _EL_   return CoreBaseBOp.indent(height); _EL_ } _EL_ ', 'public static String surround(String string,String prefix,String suffix){ _EL_   if (string.startsWith(prefix) == false) { _EL_     string=prefix + string; _EL_   } _EL_   if (string.endsWith(suffix) == false) { _EL_     string+=suffix; _EL_   } _EL_   return string; _EL_ } _EL_ ', 'void scheduleToTimerPool(){ _EL_   if (sessionPollerPool.isPollingEnabled()) { _EL_     long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxIdleTime() * 60)) * 1000; _EL_     if (sessionPollerPool.getCacheBasedPolling()) { _EL_       timeoutTime=Math.min((session.getLatestRefreshTime() + (session.getMaxCachingTime() * 60)) * 1000,timeoutTime); _EL_     } _EL_     rescheduleIfWillTimeOutBeforeExecution(timeoutTime); _EL_   } _EL_  else { _EL_     if ((sessionPollerPool.isSessionCleanupEnabled()) && willExpire(session.getMaxSessionTime())) { _EL_       long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxSessionTime() * 60)) * 1000; _EL_       rescheduleIfWillTimeOutBeforeExecution(timeoutTime); _EL_     } _EL_   } _EL_ } _EL_ ', 'public CipherParameters decrypt(byte[] in,int keyLen){ _EL_   return decrypt(in,0,in.length,keyLen); _EL_ } _EL_ ', 'private static void logOsInfo(){ _EL_   Logger.appendLog("[Main][I]User Os is " + Cfg.getOs()); _EL_   Logger.appendLog("[Main][I]Os name : " + Os.getOsName()); _EL_   Logger.appendLog("[Main][I]User Platform is : " + Os.platform()); _EL_   Logger.appendLog("[Main][I]JAVA version : " + System.getProperty("java.version")); _EL_   Logger.appendLog("[Main][I]Available cores (cpu) = " + HostInfo.availableCpus()); _EL_   Logger.appendLog("[Main][I]Max allocated memory = " + HostInfo.getMaxMemory() + " bytes"); _EL_ } _EL_ ', 'private void beforeValue() throws JSONException { _EL_   if (stack.isEmpty()) { _EL_     return; _EL_   } _EL_   Scope context=peek(); _EL_   if (context == Scope.EMPTY_ARRAY) { _EL_     replaceTop(Scope.NONEMPTY_ARRAY); _EL_     newline(); _EL_   } _EL_  else   if (context == Scope.NONEMPTY_ARRAY) { _EL_     out.append(\',\'); _EL_     newline(); _EL_   } _EL_  else   if (context == Scope.DANGLING_KEY) { _EL_     out.append(indent == null ? ":" : ": "); _EL_     replaceTop(Scope.NONEMPTY_OBJECT); _EL_   } _EL_  else   if (context != Scope.NULL) { _EL_     throw new JSONException("Nesting problem"); _EL_   } _EL_ } _EL_ ', 'public static byte[] hash(String input){ _EL_   if (!TextUtils.isEmpty(input)) { _EL_     try { _EL_       byte[] inputBytes=input.getBytes("UTF-8"); _EL_       return hash(inputBytes); _EL_     } _EL_  catch (    UnsupportedEncodingException e) { _EL_       Log.e(TAG,"problem hashing \\"" + input + "\\" "+ e.getMessage(),e); _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static String generateTransportZoneNativeGuid(String transportType,String deviceType,String fabricId){ _EL_   return String.format("%s+%s+%s",transportType,_deviceTypeMap.get(deviceType),fabricId); _EL_ } _EL_ ', '@Override public boolean equalsValue(final Object other){ _EL_   return Objects.equals(this.value,other); _EL_ } _EL_ ', 'public static void error(String msg,Throwable t){ _EL_   debugInst.debug(IDebug.ERROR,msg,t); _EL_ } _EL_ ', 'public void removeEventListener(SIPTransactionEventListener oldListener){ _EL_   eventListeners.remove(oldListener); _EL_ } _EL_ ', 'public static ExecutionSystem newExecutionSystem(URI uri,Map<String,?> env) throws IOException { _EL_   return newExecutionSystem(uri,env,null); _EL_ } _EL_ ', 'public static boolean isCommand(IElementType type){ _EL_   return type == SQFTypes.COMMAND_TOKEN || type == SQFTypes.COMMAND || type == SQFTypes.CASE || type == SQFTypes.CASE_COMMAND; _EL_ } _EL_ ', 'public void send(XTraceReport report){ _EL_   outgoing.offer(report); _EL_ } _EL_ ', '@Contract(pure=true) public static boolean startsWithConcatenation(@NotNull String string,@NotNull String... prefixes){ _EL_   int offset=0; _EL_   for (  String prefix : prefixes) { _EL_     int prefixLen=prefix.length(); _EL_     if (!string.regionMatches(offset,prefix,0,prefixLen)) { _EL_       return false; _EL_     } _EL_     offset+=prefixLen; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private void emitClass(DocComment comment){ _EL_   String tagName=(comment.getType() == DocComment.CLASS) ? "classRec" : "interfaceRec"; _EL_   xml.append("\\n<"); _EL_   xml.append(tagName); _EL_   xml.append(" name=\'"); _EL_   xml.append(comment.getName()); _EL_   xml.append("\' fullname=\'"); _EL_   xml.append(comment.getFullname()); _EL_   String sourcefile=comment.getSourceFile(); _EL_   if (sourcefile != null) { _EL_     xml.append("\' sourcefile=\'"); _EL_     xml.append(sourcefile); _EL_   } _EL_   xml.append("\' namespace=\'"); _EL_   xml.append(comment.getNamespace()); _EL_   xml.append("\' access=\'"); _EL_   xml.append(comment.getAccess()); _EL_   xml.append("\' "); _EL_   if (comment.getType() == DocComment.INTERFACE) { _EL_     String[] baseClasses=comment.getBaseclasses(); _EL_     if (baseClasses != null) { _EL_       xml.append("baseClasses=\'"); _EL_       for (int i=0; i < baseClasses.length; i++) { _EL_         String baseclass=baseClasses[i]; _EL_         if (baseclass != null) { _EL_           if (i != 0)           xml.append(";"); _EL_           xml.append(baseclass); _EL_         } _EL_       } _EL_       xml.append("\' "); _EL_     } _EL_   } _EL_  else { _EL_     xml.append("baseclass=\'"); _EL_     xml.append(comment.getBaseClass()); _EL_     xml.append("\' "); _EL_     String[] interfaces=comment.getInterfaces(); _EL_     if (interfaces != null) { _EL_       xml.append("interfaces=\'"); _EL_       for (int i=0; i < interfaces.length; i++) { _EL_         String inter=interfaces[i]; _EL_         if (inter != null) { _EL_           if (i != 0)           xml.append(";"); _EL_           xml.append(inter); _EL_         } _EL_       } _EL_       xml.append("\' "); _EL_     } _EL_   } _EL_   xml.append("isFinal=\'"); _EL_   xml.append(comment.isFinal()); _EL_   xml.append("\' "); _EL_   xml.append("isDynamic=\'"); _EL_   xml.append(comment.isDynamic()); _EL_   xml.append("\' "); _EL_   xml.append(">"); _EL_   String desc=comment.getDescription(); _EL_   if (desc != null)   appendTag("description",comment.getDescription()); _EL_   emitTags(comment.getAllTags()); _EL_   if (comment.getMetadata() != null)   emitMetadata(comment.getMetadata()); _EL_   xml.append("\\n</"); _EL_   xml.append(tagName); _EL_   xml.append(">"); _EL_ } _EL_ ', 'public int executeUpdate(String sql) throws SQLException { _EL_   return Util.truncateAndConvertToInt(executeLargeUpdate(sql)); _EL_ } _EL_ ', '@LayoutlibDelegate static long currentThreadTimeMillis(){ _EL_   return System.currentTimeMillis(); _EL_ } _EL_ ', 'public static Entry makeEntry(List<String> ldifLines){ _EL_   return makeEntry(ldifLines.toArray(new String[ldifLines.size()])); _EL_ } _EL_ ', 'void clearParserHighlights(){ _EL_   for (int i=0; i < parserHighlights.size(); i++) { _EL_     Object tag=parserHighlights.get(i); _EL_     if (tag instanceof LayeredHighlightInfo) { _EL_       LayeredHighlightInfo lhi=(LayeredHighlightInfo)tag; _EL_       if (lhi.width > 0 && lhi.height > 0) { _EL_         textArea.repaint(lhi.x,lhi.y,lhi.width,lhi.height); _EL_       } _EL_     } _EL_  else { _EL_       HighlightInfo info=(HighlightInfo)tag; _EL_       TextUI ui=textArea.getUI(); _EL_       ui.damageRange(textArea,info.getStartOffset(),info.getEndOffset()); _EL_     } _EL_   } _EL_   parserHighlights.clear(); _EL_ } _EL_ ', 'public int format(int val,byte[] buf,int off,int len){ _EL_   if (val == Integer.MIN_VALUE) { _EL_     if (len > ByteFormatter.NUMBER_BASE) { _EL_       return format("-2147483648",buf,off,len); _EL_     } _EL_  else { _EL_       truncationFiller(buf,off,len); _EL_       return off + len; _EL_     } _EL_   } _EL_   int pos=Math.abs(val); _EL_   int ndig=1; _EL_   int dmax=ByteFormatter.NUMBER_BASE; _EL_   while (ndig < ByteFormatter.NUMBER_BASE && pos >= dmax) { _EL_     ndig++; _EL_     dmax*=ByteFormatter.NUMBER_BASE; _EL_   } _EL_   if (val < 0) { _EL_     ndig++; _EL_   } _EL_   if (ndig > len || ndig > buf.length - off) { _EL_     truncationFiller(buf,off,len); _EL_     return off + len; _EL_   } _EL_   off+=ndig; _EL_   int xoff=off - 1; _EL_   do { _EL_     buf[xoff]=ByteFormatter.DIGITS[pos % ByteFormatter.NUMBER_BASE]; _EL_     xoff--; _EL_     pos/=ByteFormatter.NUMBER_BASE; _EL_   } _EL_  while (pos > 0); _EL_   if (val < 0) { _EL_     buf[xoff]=(byte)\'-\'; _EL_   } _EL_   return off; _EL_ } _EL_ ', 'public void append(char c[]){ _EL_   int maxlength=buffer.length - pos; _EL_   if (c.length < maxlength) { _EL_     System.arraycopy(c,0,buffer,pos,c.length); _EL_     pos+=c.length; _EL_   } _EL_  else { _EL_     System.arraycopy(c,0,buffer,pos,maxlength); _EL_     curr.next=new Entity(buffer); _EL_     curr=curr.next; _EL_     length+=buffer.length; _EL_     buffer=new char[(buffer.length > c.length - maxlength) ? buffer.length : c.length - maxlength]; _EL_     if (c.length > maxlength) { _EL_       System.arraycopy(c,maxlength,buffer,0,c.length - maxlength); _EL_       pos=c.length - maxlength; _EL_     } _EL_  else { _EL_       pos=0; _EL_     } _EL_   } _EL_ } _EL_ ', 'public static boolean hasPermission(Security security,GenericValue userLogin,GenericValue orderHeader){ _EL_   if (userLogin == null || orderHeader == null)   return false; _EL_   if (security.hasEntityPermission("ORDERMGR","_VIEW",userLogin)) { _EL_     return true; _EL_   } _EL_  else   if (security.hasEntityPermission("ORDERMGR","_ROLEVIEW",userLogin)) { _EL_     List<GenericValue> orderRoles=null; _EL_     try { _EL_       orderRoles=orderHeader.getRelated("OrderRole",UtilMisc.toMap("partyId",userLogin.getString("partyId")),null,false); _EL_     } _EL_  catch (    GenericEntityException e) { _EL_       Debug.logError(e,"Cannot get OrderRole from OrderHeader",module); _EL_     } _EL_     if (UtilValidate.isNotEmpty(orderRoles)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public final boolean isExceptionHandlerEquivalent(BasicBlock other){ _EL_   if (exceptionHandlers != other.exceptionHandlers) { _EL_     Enumeration<BasicBlock> e1=getExceptionHandlers(); _EL_     Enumeration<BasicBlock> e2=other.getExceptionHandlers(); _EL_     while (e1.hasMoreElements()) { _EL_       if (!e2.hasMoreElements())       return false; _EL_       if (e1.nextElement() != e2.nextElement())       return false; _EL_     } _EL_     if (e2.hasMoreElements())     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public int checksum(){ _EL_   return calculateChecksum(compile_checksum.toString()); _EL_ } _EL_ ', 'public static boolean installNormal(Context context,String filePath){ _EL_   Intent i=new Intent(Intent.ACTION_VIEW); _EL_   File file=new File(filePath); _EL_   if (!file.exists() || !file.isFile() || file.length() <= 0) { _EL_     return false; _EL_   } _EL_   i.setDataAndType(Uri.parse("file://" + filePath),"application/vnd.android.package-archive"); _EL_   i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); _EL_   context.startActivity(i); _EL_   return true; _EL_ } _EL_ ', 'private void createInsertList(final IItem item,List<IItem> tempList,List<IItem> insertList,int depth,int removed){ _EL_   if (!tempList.contains(item)) { _EL_     tempList.add(item); _EL_     if (depth == 0) { _EL_       insertList.add(item); _EL_     } _EL_     if (item.getItems() != null) { _EL_       depth++; _EL_       for (      IItem child : item.getItems()) { _EL_         createInsertList(child,tempList,insertList,depth,removed); _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     insertList.remove(item); _EL_     removed++; _EL_   } _EL_ } _EL_ ', '@SuppressWarnings("UnusedReturnValue") public int readOutlineFileMetadata(final PdfObject OutlinesObj,final PdfObjectReader currentPdfFile){ _EL_   final int count=OutlinesObj.getInt(PdfDictionary.Count); _EL_   final PdfObject FirstObj=OutlinesObj.getDictionary(PdfDictionary.First); _EL_   currentPdfFile.checkResolved(FirstObj); _EL_   if (FirstObj != null) { _EL_     final Element root=OutlineDataXML.createElement("root"); _EL_     OutlineDataXML.appendChild(root); _EL_     final int level=0; _EL_     readOutlineLevel(root,currentPdfFile,FirstObj,level,false); _EL_   } _EL_   return count; _EL_ } _EL_ ', 'private int decodeRunLength(int k){ _EL_   if ((k & 1) == 1) { _EL_     return ((k >>> 1) & 63) ^ 63; _EL_   } _EL_  else { _EL_     return Integer.numberOfLeadingZeros(k << p + (31 - sp)) + 1; _EL_   } _EL_ } _EL_ ', 'private static byte[] streamToBytes(InputStream in,int length) throws IOException { _EL_   byte[] bytes=new byte[length]; _EL_   int count; _EL_   int pos=0; _EL_   while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) { _EL_     pos+=count; _EL_   } _EL_   if (pos != length) { _EL_     throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes"); _EL_   } _EL_   return bytes; _EL_ } _EL_ ', 'public NoDuplicateValueGlobalConstraint(AbstractParameter<?,?>... parameters){ _EL_   this.parameters=Arrays.asList(parameters); _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public RhythmOverlay inflateOverlay(String configString){ _EL_   List<String> configStrings=Arrays.asList(configString.split("\\\\r?\\\\n")); _EL_   return inflateOverlayInternal(configStrings,Collections.EMPTY_MAP,0); _EL_ } _EL_ ', 'public FancyLoader(ClassLoader parent){ _EL_   super(parent); _EL_   try { _EL_     mDexClass=parent.loadClass("dalvik.system.DexFile"); _EL_   } _EL_  catch (  ClassNotFoundException cnfe) { _EL_   } _EL_ } _EL_ ', 'protected void loadValue(String sValue){ _EL_   try { _EL_     value=Byte.parseByte(sValue.trim()); _EL_   } _EL_  catch (  NumberFormatException nfe) { _EL_     revertToDefault(); _EL_   } _EL_ } _EL_ ', 'public static byte[] toByteArray(Bitmap bitmap,Bitmap.CompressFormat format,int quality){ _EL_   ByteArrayOutputStream out=null; _EL_   try { _EL_     out=new ByteArrayOutputStream(); _EL_     bitmap.compress(format,quality,out); _EL_     return out.toByteArray(); _EL_   } _EL_   finally { _EL_     CloseableUtils.close(out); _EL_   } _EL_ } _EL_ ', 'public void continueButtonActionPerformed(java.awt.event.ActionEvent e){ _EL_   if (testRunning && testSuspended) { _EL_     testSuspended=false; _EL_     if (wrapTest) { _EL_       statusText1.setText("Running Wraparound Test"); _EL_       statusText1.setVisible(true); _EL_     } _EL_   } _EL_ } _EL_ ', '@HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFlush(@CheckArgument("checkPtpId") int id,int timeout,int nonblock){ _EL_   return 0; _EL_ } _EL_ ', 'public void reset(){ _EL_   displayCache.clear(); _EL_   cachedID.clear(); _EL_ } _EL_ ', 'private void copyDirectory(File source,File dest) throws IOException { _EL_   for (  File f : source.listFiles()) { _EL_     File sourceFile=new File(source,f.getName()); _EL_     File destFile=new File(dest,f.getName()); _EL_     if (f.isDirectory()) { _EL_       destFile.mkdirs(); _EL_       copyDirectory(sourceFile,destFile); _EL_     } _EL_  else     copyFile(sourceFile,destFile); _EL_   } _EL_ } _EL_ ', 'private synchronized void rebuildJournal() throws IOException { _EL_   if (mJournalWriter != null) { _EL_     mJournalWriter.close(); _EL_   } _EL_   Writer writer=new BufferedWriter(new FileWriter(mJournalFileTmp),IO_BUFFER_SIZE); _EL_   writer.write(MAGIC); _EL_   writer.write("\\n"); _EL_   writer.write(VERSION_1); _EL_   writer.write("\\n"); _EL_   writer.write(Integer.toString(mAppVersion)); _EL_   writer.write("\\n"); _EL_   writer.write("\\n"); _EL_   for (  CacheEntry cacheEntry : mLruEntries.values()) { _EL_     if (cacheEntry.isUnderEdit()) { _EL_       writer.write(sACTION_LIST[ACTION_DIRTY] + \' \' + cacheEntry.getKey()+ " "+ cacheEntry.getSize()+ \'\\n\'); _EL_     } _EL_  else { _EL_       writer.write(sACTION_LIST[ACTION_CLEAN] + \' \' + cacheEntry.getKey()+ " "+ cacheEntry.getSize()+ \'\\n\'); _EL_     } _EL_   } _EL_   writer.close(); _EL_   mJournalFileTmp.renameTo(mJournalFile); _EL_   mJournalWriter=new BufferedWriter(new FileWriter(mJournalFile,true),IO_BUFFER_SIZE); _EL_ } _EL_ ', 'private static List<Command> loadRewrites(String str){ _EL_   assert str != null; _EL_   List<Command> commands=new ArrayList<>(); _EL_   for (  String line : str.split("\\n")) { _EL_     addLine(commands,line); _EL_   } _EL_   return commands; _EL_ } _EL_ ', 'public void httpRequest(HttpRequestEvent e) throws java.io.IOException { _EL_   String request=e.getRequest(); _EL_   if (Debug.debugging("shis")) { _EL_     Debug.output("SHIS: Handling request - \\"" + request + "\\""); _EL_   } _EL_   if (request.charAt(0) == \'/\') { _EL_     request=request.substring(0,request.length()); _EL_   } _EL_   int index=0; _EL_   index=request.indexOf(\'?\'); _EL_   if (index != -1) { _EL_     request=request.substring(index + 1,request.length()); _EL_     Debug.message("shis","SHIS: GET Request received"); _EL_   } _EL_  else { _EL_     Debug.message("shis","SHIS: Probably a POST Request received"); _EL_   } _EL_   try { _EL_     iServer.handleRequest(request,e.getOutputStream()); _EL_   } _EL_  catch (  IOException ioe) { _EL_     Debug.error("SHIS: caught IOException - \\n" + ioe.getMessage()); _EL_   } _EL_ catch (  MapRequestFormatException exception) { _EL_     String message="OpenMap SimpleHttpImageServer encountered an problem with your request:\\n\\n" + exception.getMessage() + "\\n\\n"+ ErrorMessage; _EL_     HttpConnection.writeHttpResponse(e.getOutputStream(),HttpConnection.CONTENT_PLAIN,message); _EL_   } _EL_ } _EL_ ', 'public String format(double val){ _EL_   DecimalFormat df=getDoubleFormat(); _EL_   if (df != null) { _EL_     return df.format(val); _EL_   } _EL_   return Double.toString(val); _EL_ } _EL_ ', 'public static Colour attemptToGetAsColour(String part){ _EL_   Colour col=null; _EL_   try { _EL_     col=Colour.valueOf(part.toUpperCase()); _EL_   } _EL_  catch (  Exception e) { _EL_   } _EL_   return col; _EL_ } _EL_ ', 'public final ArrayList<Move> removeNonOptimal(Position pos,ArrayList<Move> moveList){ _EL_   ArrayList<Move> optimalMoves=new ArrayList<Move>(); _EL_   ArrayList<Move> unknownMoves=new ArrayList<Move>(); _EL_   final int MATE0=100000; _EL_   int bestScore=-1000000; _EL_   UndoInfo ui=new UndoInfo(); _EL_   for (  Move m : moveList) { _EL_     pos.makeMove(m,ui); _EL_     int pliesToDraw=Math.max(100 - pos.halfMoveClock,1); _EL_     GtbProbeResult res=gtbProbe(pos); _EL_     pos.unMakeMove(m,ui); _EL_     if (res.result == GtbProbeResult.UNKNOWN) { _EL_       unknownMoves.add(m); _EL_     } _EL_  else { _EL_       int wScore; _EL_       if (res.result == GtbProbeResult.WMATE) { _EL_         if (res.pliesToMate <= pliesToDraw)         wScore=MATE0 - res.pliesToMate; _EL_  else         wScore=1; _EL_       } _EL_  else       if (res.result == GtbProbeResult.BMATE) { _EL_         if (res.pliesToMate <= pliesToDraw)         wScore=-(MATE0 - res.pliesToMate); _EL_  else         wScore=-1; _EL_       } _EL_  else { _EL_         wScore=0; _EL_       } _EL_       int score=pos.whiteMove ? wScore : -wScore; _EL_       if (score > bestScore) { _EL_         optimalMoves.clear(); _EL_         optimalMoves.add(m); _EL_         bestScore=score; _EL_       } _EL_  else       if (score == bestScore) { _EL_         optimalMoves.add(m); _EL_       } _EL_  else { _EL_       } _EL_     } _EL_   } _EL_   for (  Move m : unknownMoves)   optimalMoves.add(m); _EL_   return (optimalMoves.size() < moveList.size()) ? optimalMoves : null; _EL_ } _EL_ ', 'public int rank(){ _EL_   double eps=Math.pow(2.0,-52.0); _EL_   double tol=Math.max(m,n) * s[0] * eps; _EL_   int r=0; _EL_   for (int i=0; i < s.length; i++) { _EL_     if (s[i] > tol) { _EL_       r++; _EL_     } _EL_   } _EL_   return r; _EL_ } _EL_ ', 'public static void executeRandomModifiableVariableModification(ModifiableVariableHolder object){ _EL_   Field field=object.getRandomModifiableVariableField(); _EL_   executeModifiableVariableModification(object,field); _EL_ } _EL_ ', 'public static boolean save(File file,String content){ _EL_   boolean result; _EL_   BufferedWriter writer; _EL_   writer=null; _EL_   try { _EL_     writer=new BufferedWriter(new FileWriter(file)); _EL_     writer.write(content); _EL_     writer.flush(); _EL_     result=true; _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_     result=false; _EL_   } _EL_  finally { _EL_     if (writer != null) { _EL_       try { _EL_         writer.close(); _EL_       } _EL_  catch (      Exception e) { _EL_       } _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private void deleteOldTemp(File fileCfg){ _EL_   BufferedReader reader=null; _EL_   try { _EL_     int count=0; _EL_     reader=new BufferedReader(new FileReader(fileCfg)); _EL_     String sLine; _EL_     while ((sLine=reader.readLine()) != null) { _EL_       File file=new File(sLine); _EL_       if (!file.exists()) { _EL_         continue; _EL_       } _EL_       if (file.delete()) { _EL_         count++; _EL_       } _EL_  else { _EL_         hsDeleteOnExit.add(file); _EL_       } _EL_     } _EL_     logDebug(LogArea.CONFIG,"Deleted %d old temp files listed in %s",count,fileCfg.getAbsolutePath()); _EL_   } _EL_  catch (  IOException e) { _EL_   } _EL_  finally { _EL_     if (reader != null) { _EL_       try { _EL_         reader.close(); _EL_       } _EL_  catch (      IOException e) { _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public BufferedImage JPEGToRGBImage(final byte[] data,final int ww,final int hh,final int pX,final int pY){ _EL_   BufferedImage image=null; _EL_   Raster ras=JPEGDecoder.getRasterFromJPEG(data,"JPEG"); _EL_   if (ras != null) { _EL_     ras=cleanupRaster(ras,pX,pY,componentCount); _EL_     final int w=ras.getWidth(); _EL_     final int h=ras.getHeight(); _EL_     final DataBufferByte rgb=(DataBufferByte)ras.getDataBuffer(); _EL_     image=createImage(w,h,rgb.getData()); _EL_   } _EL_   return image; _EL_ } _EL_ ', 'public void despawn(VisibleObject object){ _EL_   despawn(object,true); _EL_ } _EL_ ', 'public String eventTopic(String eventId){ _EL_   if (eventId == null) { _EL_     eventId="+"; _EL_   } _EL_   return evtTopic.replace("{EVENTID}",eventId); _EL_ } _EL_ ', 'public MatchResult match(){ _EL_   if (!matchSuccessful) { _EL_     throw new IllegalStateException(); _EL_   } _EL_   return matcher.toMatchResult(); _EL_ } _EL_ ', '@SuppressWarnings("rawtypes") public static void createProjectConstraint(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException { _EL_   for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) { _EL_     ZipEntry entry=(ZipEntry)zipEnumerate.nextElement(); _EL_     String entryName=normalizeEntryName(entry); _EL_     if (entryName.startsWith(CONSTRAINTS)) { _EL_       String filename=FilenameUtils.getName(entry.getName()); _EL_       ConstraintSet constraintSet=new ConstraintSet(); _EL_       constraintSet.setProject(aProject); _EL_       constraintSet.setName(filename); _EL_       aRepository.createConstraintSet(constraintSet); _EL_       aRepository.writeConstraintSet(constraintSet,zip.getInputStream(entry)); _EL_       LOG.info("Imported constraint [" + filename + "] for project ["+ aProject.getName()+ "] with id ["+ aProject.getId()+ "]"); _EL_     } _EL_   } _EL_ } _EL_ ', 'public String decode(String pString) throws DecoderException { _EL_   if (pString == null) { _EL_     return null; _EL_   } _EL_   try { _EL_     return decode(pString,getDefaultCharset()); _EL_   } _EL_  catch (  UnsupportedEncodingException e) { _EL_     throw new DecoderException(e.getMessage()); _EL_   } _EL_ } _EL_ ', 'public Operation copyTo(Extent target){ _EL_   BlockTransformExtent extent=new BlockTransformExtent(original,transform,worldData.getBlockRegistry()); _EL_   ForwardExtentCopy copy=new ForwardExtentCopy(extent,original.getRegion(),original.getOrigin(),target,original.getOrigin()); _EL_   copy.setTransform(transform); _EL_   return copy; _EL_ } _EL_ ', 'private float colorToAngle(int color){ _EL_   float[] colors=new float[3]; _EL_   Color.colorToHSV(color,colors); _EL_   return (float)Math.toRadians(-colors[0]); _EL_ } _EL_ ', 'private Size parseOldBoundedSize(String token,boolean setMax){ _EL_   int semicolonIndex=token.indexOf(\';\'); _EL_   String sizeToken1=token.substring(4,semicolonIndex); _EL_   String sizeToken2=token.substring(semicolonIndex + 1,token.length() - 1); _EL_   Size size1=parseAtomicSize(sizeToken1); _EL_   Size size2=parseAtomicSize(sizeToken2); _EL_   if (isConstant(size1)) { _EL_     if (size2 instanceof Sizes.ComponentSize) { _EL_       return new BoundedSize(size2,setMax ? null : size1,setMax ? size1 : null); _EL_     } _EL_     throw new IllegalArgumentException("Bounded sizes must not be both constants."); _EL_   } _EL_   if (isConstant(size2)) { _EL_     return new BoundedSize(size1,setMax ? null : size2,setMax ? size2 : null); _EL_   } _EL_   throw new IllegalArgumentException("Bounded sizes must not be both logical."); _EL_ } _EL_ ', 'private static a createImageLink(String AD_Language,String name,String js_command,boolean enabled,boolean pressed){ _EL_   a img=new a("#",createImage(AD_Language,name)); _EL_   if (!pressed || !enabled)   img.setID("imgButtonLink"); _EL_  else   img.setID("imgButtonPressedLink"); _EL_   if (js_command == null)   js_command="\'Submit\'"; _EL_   if (js_command.length() > 0 && enabled) { _EL_     if (js_command.startsWith("startPopup"))     img.setOnClick(js_command); _EL_  else     img.setOnClick("SubmitForm(\'" + name + "\', "+ js_command+ ",\'toolbar\');return false;"); _EL_   } _EL_   img.setClass("ToolbarButton"); _EL_   img.setOnMouseOver("window.status=\'" + name + "\';return true;"); _EL_   img.setOnMouseOut("window.status=\'\';return true;"); _EL_   img.setOnBlur("this.hideFocus=false"); _EL_   return img; _EL_ } _EL_ ', 'public Namespace(PrincipalUser creator,String qualifier,PrincipalUser owner,Set<PrincipalUser> users){ _EL_   super(creator); _EL_   setQualifier(qualifier); _EL_   setOwner(owner); _EL_   if (users != null && !users.isEmpty()) { _EL_     setUsers(users); _EL_   } _EL_   addUser(owner); _EL_ } _EL_ ', 'public void update(long dt,float ratioY){ _EL_   double step=2 * Math.PI / POINTS_PER_CIRCLE; _EL_   angle+=dt * BUBBLE_D_ANGLE; _EL_   float fromX=startX + (float)(0.05f * Math.sin(angle)); _EL_   float toX=fromX + size; _EL_   float fromY=this.fromY + dt * speed; _EL_   float toY=fromY + size; _EL_   centerY+=dt * virtualSpeed; _EL_   getColor()[3]=(TOP_Y - centerY / TOP_Y); _EL_   vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX)); _EL_   vertexBuffer.put(1,Utils.normalizeGl(centerY * ratioY,fromY,toY)); _EL_   for (int i=1; i <= POINTS_PER_CIRCLE; i++) { _EL_     vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX)); _EL_     vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratioY,fromY,toY)); _EL_   } _EL_   this.fromY=fromY; _EL_ } _EL_ ', '@Override public synchronized void clear(){ _EL_   File[] files=mRootDirectory.listFiles(); _EL_   if (files != null) { _EL_     for (    File file : files) { _EL_       file.delete(); _EL_     } _EL_   } _EL_   mEntries.clear(); _EL_   VolleyLog.d("Cache cleared."); _EL_ } _EL_ ', 'private void updatePodcastPublicationDateAndLastMediaUrl(Episode episode,Podcast podcast){ _EL_   Date podcastPublicationDate=podcast.getPublicationDate(); _EL_   boolean episodePubDateIsMoreRecent=episode.getPublicationDate() != null && (podcastPublicationDate == null || podcastPublicationDate.before(episode.getPublicationDate())); _EL_   if (episodePubDateIsMoreRecent) { _EL_     podcast.setPublicationDate(episode.getPublicationDate()); _EL_     podcast.setLastEpisodeMediaUrl(episode.getMediaUrl()); _EL_   } _EL_ } _EL_ ', 'public static <O>KNNQuery<O> precomputedKNNQuery(Database database,Relation<O> relation,DistanceQuery<O> dq,int k){ _EL_   KNNQuery<O> knnq=database.getKNNQuery(dq,k,DatabaseQuery.HINT_HEAVY_USE,DatabaseQuery.HINT_OPTIMIZED_ONLY,DatabaseQuery.HINT_NO_CACHE); _EL_   if (knnq instanceof PreprocessorKNNQuery) { _EL_     return knnq; _EL_   } _EL_   MaterializeKNNPreprocessor<O> preproc=new MaterializeKNNPreprocessor<>(relation,dq.getDistanceFunction(),k); _EL_   preproc.initialize(); _EL_   return preproc.getKNNQuery(dq,k); _EL_ } _EL_ ', 'public static SortedSet<Integer> adjustPosition(Set<Integer> positions,int startPosition,int endPosition,int adjustBy){ _EL_   SortedSet<Integer> newPositions=new TreeSet<>(); _EL_   for (  Integer entry : positions) { _EL_     int position=entry; _EL_     if (position < startPosition || position > endPosition) { _EL_       newPositions.add(position); _EL_     } _EL_  else     if (adjustBy > 0) { _EL_       newPositions.add(position + adjustBy); _EL_     } _EL_  else     if (adjustBy < 0) { _EL_       if (position > startPosition + adjustBy && position <= startPosition) { _EL_         ; _EL_       } _EL_  else { _EL_         newPositions.add(position + adjustBy); _EL_       } _EL_     } _EL_   } _EL_   return newPositions; _EL_ } _EL_ ', 'private static void addId(final StringBuilder buf,final byte[] id){ _EL_   buf.append("\\\\Q"); _EL_   boolean backslash=false; _EL_   for (  final byte b : id) { _EL_     buf.append((char)(b & 0xFF)); _EL_     if (b == \'E\' && backslash) { _EL_       buf.append("\\\\\\\\E\\\\Q"); _EL_     } _EL_  else { _EL_       backslash=b == \'\\\\\'; _EL_     } _EL_   } _EL_   buf.append("\\\\E"); _EL_ } _EL_ ', 'private ResolvedMigration createAvailableMigration(int version){ _EL_   ResolvedMigration migration=new ResolvedMigration(); _EL_   migration.setVersion(MigrationVersion.fromVersion(Integer.toString(version))); _EL_   migration.setDescription("abc"); _EL_   migration.setScript("x"); _EL_   migration.setType(MigrationType.CQL); _EL_   return migration; _EL_ } _EL_ ', 'public void comment(String data) throws SAXException { _EL_   m_docIsEmpty=false; _EL_   final int length=data.length(); _EL_   if (length > m_charsBuff.length) { _EL_     m_charsBuff=new char[length * 2 + 1]; _EL_   } _EL_   data.getChars(0,length,m_charsBuff,0); _EL_   comment(m_charsBuff,0,length); _EL_ } _EL_ ', 'public boolean drawImage(Image img,AffineTransform xform,ImageObserver observer){ _EL_   if (img == null) { _EL_     return true; _EL_   } _EL_   if (xform == null || xform.isIdentity()) { _EL_     return drawImage(img,0,0,null,observer); _EL_   } _EL_   if (isHiDPIImage(img)) { _EL_     final int w=img.getWidth(null); _EL_     final int h=img.getHeight(null); _EL_     final AffineTransform tx=new AffineTransform(transform); _EL_     transform(xform); _EL_     boolean result=drawHiDPIImage(img,0,0,w,h,0,0,w,h,null,observer); _EL_     transform.setTransform(tx); _EL_     invalidateTransform(); _EL_     return result; _EL_   } _EL_   try { _EL_     return imagepipe.transformImage(this,img,xform,observer); _EL_   } _EL_  catch (  InvalidPipeException e) { _EL_     try { _EL_       revalidateAll(); _EL_       return imagepipe.transformImage(this,img,xform,observer); _EL_     } _EL_  catch (    InvalidPipeException e2) { _EL_       return false; _EL_     } _EL_   } _EL_  finally { _EL_     surfaceData.markDirty(); _EL_   } _EL_ } _EL_ ', 'public void beginDisplay(DisplayEvent event) throws ModelControlException { _EL_   super.beginDisplay(event,false); _EL_   resetButtonState(TBL_BUTTON_DELETE); _EL_   AgentsModel model=(AgentsModel)getModel(); _EL_   String agentType=getDisplayIDType(); _EL_   Object[] param={agentType}; _EL_   ptModel.setPageTitleText(model.getLocalizedString("agenttype." + agentType)); _EL_   ptModel.setPageTitleHelpMessage(model.getLocalizedString("agenttype." + agentType + ".help")); _EL_   tblModel.setTitle(MessageFormat.format(model.getLocalizedString("table.agents.title.name"),param)); _EL_   tblModel.setTitleLabel(MessageFormat.format(model.getLocalizedString("table.agents.summary"),param)); _EL_   tblModel.setSummary(MessageFormat.format(model.getLocalizedString("table.agents.summary"),param)); _EL_   tblGroupModel.setTitle(MessageFormat.format(model.getLocalizedString("table.agent.groups.title.name"),param)); _EL_   tblGroupModel.setTitleLabel(MessageFormat.format(model.getLocalizedString("table.agent.groups.summary"),param)); _EL_   tblGroupModel.setSummary(MessageFormat.format(model.getLocalizedString("table.agent.groups.summary"),param)); _EL_   getAgentNames(); _EL_   CCButton b=(CCButton)getChild(TBL_BUTTON_DELETE); _EL_   b.setDisabled(true); _EL_   b=(CCButton)getChild(TBL_BUTTON_DELETE_GROUP); _EL_   b.setDisabled(true); _EL_ } _EL_ ', 'public void select_all(){ _EL_   Arrays.fill(sel_array,true); _EL_ } _EL_ ', 'public NvpBuilder addRaw(final String name,final String value){ _EL_   npv.put(name,value); _EL_   return this; _EL_ } _EL_ ', 'public final long readUnsignedInt() throws IOException { _EL_   mPosition+=4; _EL_   d.readFully(w,0,4); _EL_   return ((long)(w[3]) << 24 | (w[2] & 0xff) << 16 | (w[1] & 0xff) << 8 | (w[0] & 0xff)) & 0X00000000FFFFFFFFL; _EL_ } _EL_ ', 'public List<CountryRO> viewAddressCountryOptions(final ShoppingCart cart,final Shop shop,final String addressType){ _EL_   final List<Country> countries=addressBookFacade.getAllCountries(shop.getCode(),addressType); _EL_   return map(countries,CountryRO.class,Country.class); _EL_ } _EL_ ', 'public void addPauseListener(AnimatorPauseListener listener){ _EL_   if (mPauseListeners == null) { _EL_     mPauseListeners=new ArrayList<AnimatorPauseListener>(); _EL_   } _EL_   mPauseListeners.add(listener); _EL_ } _EL_ ', '@Override public void makeImmutable(){ _EL_   if (mutable) { _EL_     if (attrs != null) { _EL_       Iterator iter=attrs.iterator(); _EL_       while (iter.hasNext()) { _EL_         Attribute attr=(Attribute)iter.next(); _EL_         attr.makeImmutable(); _EL_       } _EL_       attrs=Collections.unmodifiableList(attrs); _EL_     } _EL_     if (encAttrs != null) { _EL_       encAttrs=Collections.unmodifiableList(encAttrs); _EL_     } _EL_     mutable=false; _EL_   } _EL_ } _EL_ ', '@Override public boolean batchFinished() throws Exception { _EL_   if (getInputFormat() == null) { _EL_     throw new IllegalStateException("No input instance format defined"); _EL_   } _EL_   Instances toFilter=getInputFormat(); _EL_   if (!isFirstBatchDone()) { _EL_     Instances toFilterIgnoringAttributes=removeIgnored(toFilter); _EL_     File file=getSerializedClustererFile(); _EL_     if (!file.isDirectory()) { _EL_       ObjectInputStream ois=new ObjectInputStream(new FileInputStream(file)); _EL_       m_ActualClusterer=(Clusterer)ois.readObject(); _EL_       Instances header=null; _EL_       try { _EL_         header=(Instances)ois.readObject(); _EL_       } _EL_  catch (      Exception e) { _EL_       } _EL_       ois.close(); _EL_       if ((header != null) && (!header.equalHeaders(toFilterIgnoringAttributes))) { _EL_         throw new WekaException("Training header of clusterer and filter dataset don\'t match:\\n" + header.equalHeadersMsg(toFilterIgnoringAttributes)); _EL_       } _EL_     } _EL_  else { _EL_       m_ActualClusterer=AbstractClusterer.makeCopy(m_Clusterer); _EL_       m_ActualClusterer.buildClusterer(toFilterIgnoringAttributes); _EL_     } _EL_     Instances filtered=new Instances(toFilter,0); _EL_     ArrayList<String> nominal_values=new ArrayList<String>(m_ActualClusterer.numberOfClusters()); _EL_     for (int i=0; i < m_ActualClusterer.numberOfClusters(); i++) { _EL_       nominal_values.add("cluster" + (i + 1)); _EL_     } _EL_     filtered.insertAttributeAt(new Attribute("cluster",nominal_values),filtered.numAttributes()); _EL_     setOutputFormat(filtered); _EL_   } _EL_   for (int i=0; i < toFilter.numInstances(); i++) { _EL_     convertInstance(toFilter.instance(i)); _EL_   } _EL_   flushInput(); _EL_   m_NewBatch=true; _EL_   m_FirstBatchDone=true; _EL_   return (numPendingOutput() != 0); _EL_ } _EL_ ', 'public void addComponent(T component){ _EL_   components.add(component); _EL_ } _EL_ ', 'public static UiResult openUrl(URI uri){ _EL_   return openUrl(uri.toString()); _EL_ } _EL_ ', 'public final void invalidateLine(int line){ _EL_   repaint(0,textArea.lineToY(line) + fm.getMaxDescent() + fm.getLeading(),getWidth(),fm.getHeight()); _EL_ } _EL_ ', 'public ByteBandedRaster(SampleModel sampleModel,Point origin){ _EL_   this(sampleModel,sampleModel.createDataBuffer(),new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null); _EL_ } _EL_ ', 'private void initialize(URI p_other){ _EL_   m_scheme=p_other.getScheme(); _EL_   m_userinfo=p_other.getUserinfo(); _EL_   m_host=p_other.getHost(); _EL_   m_port=p_other.getPort(); _EL_   m_path=p_other.getPath(); _EL_   m_queryString=p_other.getQueryString(); _EL_   m_fragment=p_other.getFragment(); _EL_ } _EL_ ', 'private E unlinkLast(){ _EL_   Node<E> l=last; _EL_   if (l == null)   return null; _EL_   Node<E> p=l.prev; _EL_   E item=l.item; _EL_   l.item=null; _EL_   l.prev=l; _EL_   last=p; _EL_   if (p == null)   first=null; _EL_  else   p.next=null; _EL_   --count; _EL_   notFull.signal(); _EL_   return item; _EL_ } _EL_ ', 'static boolean isRefreshNotificationRegistered(NotificationListener client,RefreshNotificationType type){ _EL_   boolean isRegistered=false; _EL_   Map<RefreshNotificationType,Integer> notifications=null; _EL_ synchronized (refreshClients) { _EL_     notifications=(Map<RefreshNotificationType,Integer>)refreshClients.get(client); _EL_   } _EL_   if (notifications != null) { _EL_     Integer timerNotificationId=notifications.get(type); _EL_     if (timerNotificationId != null) { _EL_       isRegistered=true; _EL_     } _EL_   } _EL_   return isRegistered; _EL_ } _EL_ ', 'private Collection<String> readProcessOutput(Process proc) throws IOException { _EL_   BufferedReader rdr=new BufferedReader(new InputStreamReader(proc.getInputStream())); _EL_   Collection<String> res=new ArrayList<>(); _EL_   String s; _EL_   while ((s=rdr.readLine()) != null)   res.add(s); _EL_   return res; _EL_ } _EL_ ', 'public void fillHeaderAndFooter(final HttpServletRequest request,final HttpServletResponse response,final Map<String,Object> dataModel) throws Exception { _EL_   fillHeader(request,response,dataModel); _EL_   fillFooter(dataModel); _EL_ } _EL_ ', 'public void addOperand(ISpacePredicate operand){ _EL_   if (_operandsList == null)   _operandsList=new ArrayList<ISpacePredicate>(); _EL_   _operandsList.add(operand); _EL_ } _EL_ ', 'public BigDecimal calculateTotalCollectedAmt(final BillReceiptInfo bri,final List<EgBillDetails> billDetList) throws InvalidAccountHeadException { _EL_   return bri.getTotalAmount(); _EL_ } _EL_ ', 'public void skip(int count) throws IOException { _EL_   int skipCount=Math.min(limit - position,count); _EL_   while (true) { _EL_     position+=skipCount; _EL_     count-=skipCount; _EL_     if (count == 0)     break; _EL_     skipCount=Math.min(count,capacity); _EL_     require(skipCount); _EL_   } _EL_ } _EL_ ', 'public void removeAllIms(){ _EL_   ims.clear(); _EL_ } _EL_ ', 'static String escapeStringForASCII(String s){ _EL_   String out=""; _EL_   char[] cArray=s.toCharArray(); _EL_   for (int i=0; i < cArray.length; i++) { _EL_     char c=cArray[i]; _EL_     if (c > 127) { _EL_       out+="\\\\U"; _EL_       String hex=Integer.toHexString(c); _EL_       while (hex.length() < 4)       hex="0" + hex; _EL_       out+=hex; _EL_     } _EL_  else     if (c == \'\\\\\') { _EL_       out+="\\\\\\\\"; _EL_     } _EL_  else     if (c == \'\\"\') { _EL_       out+="\\\\\\""; _EL_     } _EL_  else     if (c == \'\\b\') { _EL_       out+="\\\\b"; _EL_     } _EL_  else     if (c == \'\\n\') { _EL_       out+="\\\\n"; _EL_     } _EL_  else     if (c == \'\\r\') { _EL_       out+="\\\\r"; _EL_     } _EL_  else     if (c == \'\\t\') { _EL_       out+="\\\\t"; _EL_     } _EL_  else { _EL_       out+=c; _EL_     } _EL_   } _EL_   return out; _EL_ } _EL_ ', 'public void copyReader(String encoding,Reader r) throws IOException { _EL_   super.setContentEncoding(encoding); _EL_   String s=readString(r); _EL_   content=s.getBytes(encoding); _EL_ } _EL_ ', 'private void clearDictionaryCache(){ _EL_   Map<String,Dictionary> dictionaryCaches=surrogateKeyGen.getDictionaryCaches(); _EL_   List<Dictionary> reverseDictionaries=new ArrayList<>(dictionaryCaches.values()); _EL_   for (int i=0; i < reverseDictionaries.size(); i++) { _EL_     Dictionary dictionary=reverseDictionaries.get(i); _EL_     dictionary.clear(); _EL_   } _EL_ } _EL_ ', 'public static String toTypeString(Object[] arguments,int maxSize){ _EL_   if (arguments == null) { _EL_     return "null"; _EL_   } _EL_   StringBuilder argBuf=new StringBuilder(); _EL_   for (int i=0; i < arguments.length; i++) { _EL_     if (maxSize != -1 && argBuf.length() > maxSize) { _EL_       argBuf.append("..."); _EL_       break; _EL_     } _EL_  else { _EL_       if (i > 0) { _EL_         argBuf.append(", "); _EL_       } _EL_       argBuf.append(arguments[i] != null ? typeName(arguments[i]) : "null"); _EL_     } _EL_   } _EL_   return argBuf.toString(); _EL_ } _EL_ ', 'public boolean renameFile(File oldFile,File newFile){ _EL_ synchronized (fileCache) { _EL_     if (oldFile.renameTo(newFile)) { _EL_       validateFileCache(); _EL_       return true; _EL_     } _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public Future<?> execute(CameraCommand command){ _EL_   if (mClosed) { _EL_     return Futures.immediateFuture(null); _EL_   } _EL_ synchronized (mLock) { _EL_     if (mExecutor == null) { _EL_       mExecutor=mExecutorProvider.get(); _EL_     } _EL_     checkNotNull(mExecutor); _EL_     return mExecutor.submit(new CommandRunnable(command)); _EL_   } _EL_ } _EL_ ', 'public static EnumSet<KindName> kindNames(int kind){ _EL_   EnumSet<KindName> kinds=EnumSet.noneOf(KindName.class); _EL_   if ((kind & VAL) != 0)   kinds.add(((kind & VAL) == VAR) ? KindName.VAR : KindName.VAL); _EL_   if ((kind & MTH) != 0)   kinds.add(KindName.METHOD); _EL_   if ((kind & TYP) != 0)   kinds.add(KindName.CLASS); _EL_   if ((kind & PCK) != 0)   kinds.add(KindName.PACKAGE); _EL_   return kinds; _EL_ } _EL_ ', 'public int length(){ _EL_   return text.length(); _EL_ } _EL_ ', 'public static String serializeDigestResponse(Map<String,String> paramMap){ _EL_   StringBuilder sb=new StringBuilder("Digest "); _EL_   boolean prefixComma=false; _EL_   for (  Map.Entry<String,String> entry : paramMap.entrySet()) { _EL_     if (!prefixComma) { _EL_       prefixComma=true; _EL_     } _EL_  else { _EL_       sb.append(", "); _EL_     } _EL_     sb.append(entry.getKey()); _EL_     sb.append("="); _EL_     sb.append(entry.getValue()); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'public void populateCombos(Activity activity,final Listener listener){ _EL_   List<String> services=getServices(activity.getPackageManager()); _EL_   populateCombos(activity,services,listener); _EL_ } _EL_ ', 'protected JsonEncoding findEncoding(MediaType mediaType,MultivaluedMap<String,Object> httpHeaders){ _EL_   return JsonEncoding.UTF8; _EL_ } _EL_ ', 'static BufferedImage convertImage(BufferedImage image){ _EL_ switch (image.getType()) { _EL_ case BufferedImage.TYPE_INT_ARGB_PRE: _EL_     return image; _EL_ case BufferedImage.TYPE_4BYTE_ABGR: _EL_   image.coerceData(true); _EL_ return image; _EL_ } _EL_ BufferedImage convertedImage=new BufferedImage(image.getWidth(),image.getHeight(),BufferedImage.TYPE_INT_ARGB_PRE); _EL_ Graphics2D g=convertedImage.createGraphics(); _EL_ g.setColor(new java.awt.Color(0f,0f,0f,0f)); _EL_ g.fillRect(0,0,image.getWidth(),image.getHeight()); _EL_ g.drawImage(image,0,0,null); _EL_ g.dispose(); _EL_ return convertedImage; _EL_ } _EL_ ', 'public long start(){ _EL_   startTime=System.currentTimeMillis(); _EL_   return startTime; _EL_ } _EL_ ', 'private boolean isHHSign(String str){ _EL_   boolean sign=true; _EL_   try { _EL_     char r=(char)Integer.parseInt(str,16); _EL_   } _EL_  catch (  NumberFormatException e) { _EL_     sign=false; _EL_   } _EL_   return sign; _EL_ } _EL_ ', 'public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){ _EL_   String subSignature=method.getSubSignature(); _EL_   if (subSignature.equals("java.lang.Object allocateInstance(java.lang.Class)")) { _EL_     sun_misc_Unsafe_allocateInstance(method,thisVar,returnVar,params); _EL_     return; _EL_   } _EL_ { _EL_     defaultMethod(method,thisVar,returnVar,params); _EL_     return; _EL_   } _EL_ } _EL_ ', 'public void cacheResolvedMethod(Class clas,Class[] types,Method method){ _EL_   if (Interpreter.DEBUG)   Interpreter.debug("cacheResolvedMethod putting: " + clas + " "+ method); _EL_   SignatureKey sk=new SignatureKey(clas,method.getName(),types); _EL_   if (Modifier.isStatic(method.getModifiers()))   resolvedStaticMethods.put(sk,method); _EL_  else   resolvedObjectMethods.put(sk,method); _EL_ } _EL_ ', 'public static void close(@CheckForNull OutputStream outputStream){ _EL_   if (outputStream == null) { _EL_     return; _EL_   } _EL_   try { _EL_     outputStream.close(); _EL_   } _EL_  catch (  IOException e) { _EL_   } _EL_ } _EL_ ', '@Override public Node item(int index){ _EL_   return (nodes != null && index < nodes.size()) ? (Node)(nodes.get(index)) : null; _EL_ } _EL_ ', "private int charToVisibleWidth(char c,@JdkConstants.FontStyle int fontType,int currentX){ _EL_   if (c == '\\n') { _EL_     return 0; _EL_   } _EL_   if (c == '\\t') { _EL_     return EditorUtil.nextTabStop(currentX,this) - currentX; _EL_   } _EL_   return EditorUtil.charWidth(c,fontType,this); _EL_ } _EL_ ", 'public static void createDir(File target) throws AdeUsageException { _EL_   if (!target.exists() && !target.mkdir() && !target.exists()) { _EL_     throw new AdeUsageException("Failed creating directory " + target.getPath()); _EL_   } _EL_ } _EL_ ', 'public GTSEncoder(long baseTimestamp){ _EL_   this.baseTimestamp=baseTimestamp; _EL_   this.stream=new ByteArrayOutputStream(); _EL_   this.wrappingKey=null; _EL_ } _EL_ ', 'public static String encode(final Coordinate[] coords){ _EL_   long lastLat=0; _EL_   long lastLng=0; _EL_   final StringBuffer result=new StringBuffer(); _EL_   for (  final Coordinate point : coords) { _EL_     long lat=Math.round(point.y * 1e5); _EL_     long lng=Math.round(point.x * 1e5); _EL_     long dLat=lat - lastLat; _EL_     long dLng=lng - lastLng; _EL_     encode(dLat,result); _EL_     encode(dLng,result); _EL_     lastLat=lat; _EL_     lastLng=lng; _EL_   } _EL_   return result.toString(); _EL_ } _EL_ ', 'private void extractWeightValues(List<Synapse> synapses){ _EL_   int exWeights=0; _EL_   int inWeights=0; _EL_   for (  Synapse s : synapses) { _EL_     double w=s.getStrength(); _EL_     if (w > 0) { _EL_       exWeights++; _EL_     } _EL_  else { _EL_       inWeights++; _EL_     } _EL_   } _EL_   weights[0]=new double[exWeights]; _EL_   weights[1]=new double[inWeights]; _EL_   exWeights=0; _EL_   inWeights=0; _EL_   if (weights[0].length != 0) { _EL_     for (    Synapse s : synapses) { _EL_       double w=s.getStrength(); _EL_       if (w > 0) { _EL_         weights[0][exWeights++]=w; _EL_       } _EL_  else { _EL_         weights[1][inWeights++]=w; _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean isValidNumber(PhoneNumber number){ _EL_   String regionCode=getRegionCodeForNumber(number); _EL_   return isValidNumberForRegion(number,regionCode); _EL_ } _EL_ ', 'private String trimUrl(String uri){ _EL_   if (uri == null)   return ""; _EL_   if (uri.endsWith("/"))   uri=uri.substring(0,uri.length() - 1); _EL_   return uri; _EL_ } _EL_ ', 'public Pair<Integer,List<Long>> next(){ _EL_   try { _EL_     classesProcessed++; _EL_     Integer key=iterator.next(); _EL_     long pos=classificationBlockRMA2.getPos(key); _EL_     int count=classificationBlockRMA2.getSum(key); _EL_     classDumpReader.seek(pos); _EL_     List<Long> list=new LinkedList<>(); _EL_     for (int i=0; i < count; i++)     list.add(classDumpReader.readLong()); _EL_     return new Pair<>(key,list); _EL_   } _EL_  catch (  Exception e) { _EL_     Basic.caught(e); _EL_     error=true; _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public static String addAlpha(String originalColor,double alpha){ _EL_   long alphaFixed=Math.round(alpha * 255); _EL_   String alphaHex=Long.toHexString(alphaFixed); _EL_   if (alphaHex.length() == 1) { _EL_     alphaHex="0" + alphaHex; _EL_   } _EL_   originalColor=originalColor.replace("#","#" + alphaHex); _EL_   return originalColor; _EL_ } _EL_ ', 'public synchronized boolean add(E e,boolean hasNext){ _EL_   while (mInternalQueue.size() >= mMaxSize && !mClosed) { _EL_     notifyAll(); _EL_     try { _EL_       wait(TIMEOUT); _EL_     } _EL_  catch (    InterruptedException e1) { _EL_       mClosed=true; _EL_       ProgramState.checkAbort(); _EL_       throw new IllegalStateException("Interrupted but program not aborting?",e1); _EL_     } _EL_     ProgramState.checkAbort(); _EL_   } _EL_   if (mClosed) { _EL_     return true; _EL_   } _EL_   final boolean wasEmpty=mInternalQueue.isEmpty(); _EL_   mHasNext=hasNext; _EL_   mInternalQueue.add(e); _EL_   if (wasEmpty) { _EL_     notifyAll(); _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public void addPart(int index,PduPart part){ _EL_   if (null == part) { _EL_     throw new NullPointerException(); _EL_   } _EL_   putPartToMaps(part); _EL_   mParts.add(index,part); _EL_ } _EL_ ', "public StrBuilder insert(int index,boolean value){ _EL_   validateIndex(index); _EL_   if (value) { _EL_     ensureCapacity(size + 4); _EL_     System.arraycopy(buffer,index,buffer,index + 4,size - index); _EL_     buffer[index++]='t'; _EL_     buffer[index++]='r'; _EL_     buffer[index++]='u'; _EL_     buffer[index]='e'; _EL_     size+=4; _EL_   } _EL_  else { _EL_     ensureCapacity(size + 5); _EL_     System.arraycopy(buffer,index,buffer,index + 5,size - index); _EL_     buffer[index++]='f'; _EL_     buffer[index++]='a'; _EL_     buffer[index++]='l'; _EL_     buffer[index++]='s'; _EL_     buffer[index]='e'; _EL_     size+=5; _EL_   } _EL_   return this; _EL_ } _EL_ ", 'public boolean hasNatureAndWeapon(Nature nature,String weapon){ _EL_   return this.nature == nature && ((weapon == null && this.weapon == null) || (weapon != null && weapon.equals(this.weapon))); _EL_ } _EL_ ', 'public void dump(String infoMsg){ _EL_   storage.getOnlineMembers(); _EL_   storage.getOfflineMembers(); _EL_   storage.getOfflineAndEqualMembers(); _EL_   storage.getMyInitializingID(); _EL_   storage.getMyPersistentID(); _EL_   final StringBuilder buf=new StringBuilder(2000); _EL_   if (infoMsg != null) { _EL_     buf.append(infoMsg); _EL_     buf.append(": "); _EL_   } _EL_   buf.append("\\nMY PERSISTENT ID:\\n"); _EL_   buf.append(storage.getMyPersistentID()); _EL_   buf.append("\\nMY INITIALIZING ID:\\n"); _EL_   buf.append(storage.getMyInitializingID()); _EL_   buf.append("\\nONLINE MEMBERS:\\n"); _EL_   for (  PersistentMemberID id : storage.getOnlineMembers()) { _EL_     buf.append("\\t"); _EL_     buf.append(id); _EL_     buf.append("\\n"); _EL_   } _EL_   buf.append("\\nOFFLINE MEMBERS:\\n"); _EL_   for (  PersistentMemberID id : storage.getOfflineMembers()) { _EL_     buf.append("\\t"); _EL_     buf.append(id); _EL_     buf.append("\\n"); _EL_   } _EL_   buf.append("\\nOFFLINE AND EQUAL MEMBERS:\\n"); _EL_   for (  PersistentMemberID id : storage.getOfflineAndEqualMembers()) { _EL_     buf.append("\\t"); _EL_     buf.append(id); _EL_     buf.append("\\n"); _EL_   } _EL_   logger.debug(buf.toString()); _EL_ } _EL_ ', 'private Node<K,V> findNode(Object key){ _EL_   if (key == null)   throw new NullPointerException(); _EL_   Comparator<? super K> cmp=comparator; _EL_   outer:   for (; ; ) { _EL_     for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) { _EL_       Object v; _EL_       int c; _EL_       if (n == null)       break outer; _EL_       Node<K,V> f=n.next; _EL_       if (n != b.next)       break; _EL_       if ((v=n.value) == null) { _EL_         n.helpDelete(b,f); _EL_         break; _EL_       } _EL_       if (b.value == null || v == n)       break; _EL_       if ((c=cpr(cmp,key,n.key)) == 0)       return n; _EL_       if (c < 0)       break outer; _EL_       b=n; _EL_       n=f; _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'static Sort parseSort(long timestampSec,IndexState state,List<Object> fields,List<String> sortFieldNames,Map<String,FieldDef> dynamicFields){ _EL_   List<SortField> sortFields=new ArrayList<SortField>(); _EL_   for (  Object _sub : fields) { _EL_     Request sub=(Request)_sub; _EL_     String fieldName=sub.getString("field"); _EL_     SortField sf; _EL_     if (sortFieldNames != null) { _EL_       sortFieldNames.add(fieldName); _EL_     } _EL_     if (fieldName.equals("docid")) { _EL_       sf=SortField.FIELD_DOC; _EL_     } _EL_  else     if (fieldName.equals("score")) { _EL_       sf=SortField.FIELD_SCORE; _EL_     } _EL_  else { _EL_       FieldDef fd; _EL_       if (dynamicFields != null) { _EL_         fd=dynamicFields.get(fieldName); _EL_       } _EL_  else { _EL_         fd=null; _EL_       } _EL_       if (fd == null) { _EL_         fd=state.getField(fieldName); _EL_       } _EL_       if (fd == null) { _EL_         sub.fail("field","field \\"" + fieldName + "\\" was not registered and was not specified as a dynamicField"); _EL_         fd=null; _EL_       } _EL_       if (fd.valueSource != null) { _EL_         sf=fd.valueSource.getSortField(sub.getBoolean("reverse")); _EL_       } _EL_  else       if (fd.valueType == FieldDef.FieldValueType.LAT_LON) { _EL_         if (fd.fieldType.docValuesType() == DocValuesType.NONE) { _EL_           sub.fail("field","field \\"" + fieldName + "\\" was not registered with sort=true"); _EL_         } _EL_         Request sub2=sub.getStruct("origin"); _EL_         sf=LatLonDocValuesField.newDistanceSort(fieldName,sub2.getDouble("latitude"),sub2.getDouble("longitude")); _EL_       } _EL_  else { _EL_         if ((fd.fieldType != null && fd.fieldType.docValuesType() == DocValuesType.NONE) || (fd.fieldType == null && fd.valueSource == null)) { _EL_           sub.fail("field","field \\"" + fieldName + "\\" was not registered with sort=true"); _EL_         } _EL_         if (fd.multiValued) { _EL_           String selectorString=sub.getEnum("selector"); _EL_           if (fd.valueType == FieldDef.FieldValueType.ATOM) { _EL_             SortedSetSelector.Type selector; _EL_             if (selectorString.equals("min")) { _EL_               selector=SortedSetSelector.Type.MIN; _EL_             } _EL_  else             if (selectorString.equals("max")) { _EL_               selector=SortedSetSelector.Type.MAX; _EL_             } _EL_  else             if (selectorString.equals("middle_min")) { _EL_               selector=SortedSetSelector.Type.MIDDLE_MIN; _EL_             } _EL_  else             if (selectorString.equals("middle_max")) { _EL_               selector=SortedSetSelector.Type.MIDDLE_MAX; _EL_             } _EL_  else { _EL_               assert false; _EL_               selector=null; _EL_             } _EL_             sf=new SortedSetSortField(fieldName,sub.getBoolean("reverse"),selector); _EL_           } _EL_  else           if (fd.valueType == FieldDef.FieldValueType.INT) { _EL_             sf=new SortedNumericSortField(fieldName,SortField.Type.INT,sub.getBoolean("reverse"),parseNumericSelector(sub,selectorString)); _EL_           } _EL_  else           if (fd.valueType == FieldDef.FieldValueType.LONG) { _EL_             sf=new SortedNumericSortField(fieldName,SortField.Type.LONG,sub.getBoolean("reverse"),parseNumericSelector(sub,selectorString)); _EL_           } _EL_  else           if (fd.valueType == FieldDef.FieldValueType.FLOAT) { _EL_             sf=new SortedNumericSortField(fieldName,SortField.Type.FLOAT,sub.getBoolean("reverse"),parseNumericSelector(sub,selectorString)); _EL_           } _EL_  else           if (fd.valueType == FieldDef.FieldValueType.DOUBLE) { _EL_             sf=new SortedNumericSortField(fieldName,SortField.Type.DOUBLE,sub.getBoolean("reverse"),parseNumericSelector(sub,selectorString)); _EL_           } _EL_  else { _EL_             sub.fail("field","cannot sort by multiValued field \\"" + fieldName + "\\": type is "+ fd.valueType); _EL_             assert false; _EL_             sf=null; _EL_           } _EL_         } _EL_  else { _EL_           SortField.Type sortType; _EL_           if (fd.valueType == FieldDef.FieldValueType.ATOM) { _EL_             sortType=SortField.Type.STRING; _EL_           } _EL_  else           if (fd.valueType == FieldDef.FieldValueType.LONG || fd.valueType == FieldDef.FieldValueType.DATE_TIME) { _EL_             sortType=SortField.Type.LONG; _EL_           } _EL_  else           if (fd.valueType == FieldDef.FieldValueType.INT) { _EL_             sortType=SortField.Type.INT; _EL_           } _EL_  else           if (fd.valueType == FieldDef.FieldValueType.DOUBLE) { _EL_             sortType=SortField.Type.DOUBLE; _EL_           } _EL_  else           if (fd.valueType == FieldDef.FieldValueType.FLOAT) { _EL_             sortType=SortField.Type.FLOAT; _EL_           } _EL_  else { _EL_             sub.fail("field","cannot sort by field \\"" + fieldName + "\\": type is "+ fd.valueType); _EL_             assert false; _EL_             sortType=null; _EL_           } _EL_           sf=new SortField(fieldName,sortType,sub.getBoolean("reverse")); _EL_         } _EL_       } _EL_       boolean hasMissingLast=sub.hasParam("missingLast"); _EL_       boolean missingLast=sub.getBoolean("missingLast"); _EL_       if (fd.valueType == FieldDef.FieldValueType.ATOM) { _EL_         if (missingLast) { _EL_           sf.setMissingValue(SortField.STRING_LAST); _EL_         } _EL_  else { _EL_           sf.setMissingValue(SortField.STRING_FIRST); _EL_         } _EL_       } _EL_  else       if (fd.valueType == FieldDef.FieldValueType.INT) { _EL_         sf.setMissingValue(missingLast ? Integer.MAX_VALUE : Integer.MIN_VALUE); _EL_       } _EL_  else       if (fd.valueType == FieldDef.FieldValueType.LONG) { _EL_         sf.setMissingValue(missingLast ? Long.MAX_VALUE : Long.MIN_VALUE); _EL_       } _EL_  else       if (fd.valueType == FieldDef.FieldValueType.FLOAT) { _EL_         sf.setMissingValue(missingLast ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY); _EL_       } _EL_  else       if (fd.valueType == FieldDef.FieldValueType.DOUBLE) { _EL_         sf.setMissingValue(missingLast ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY); _EL_       } _EL_  else       if (hasMissingLast) { _EL_         sub.fail("missingLast","field=" + fieldName + ": can only specify missingLast for string and numeric field types: got SortField type "+ sf.getType()); _EL_       } _EL_     } _EL_     sortFields.add(sf); _EL_   } _EL_   return new Sort(sortFields.toArray(new SortField[sortFields.size()])); _EL_ } _EL_ ', '@NotNull private Optional<TypeConversion> findConversionFromDbValue(@NotNull Type source,@NotNull Type target){ _EL_   if (isAssignable(target,source))   return Optional.of(TypeConversion.identity()); _EL_   Optional<TypeConversion> directConversion=typeConversionRegistry.findConversionFromDbValue(source,target); _EL_   if (directConversion.isPresent())   return directConversion; _EL_   Optional<TypeConversion> arrayConversion=findArrayConversion(source,target); _EL_   if (arrayConversion.isPresent())   return arrayConversion; _EL_   Optional<TypeConversion> optionalConversion=findOptionalConversion(source,target); _EL_   if (optionalConversion.isPresent())   return optionalConversion; _EL_   Optional<TypeConversion> enumConversion=findEnumConversion(target); _EL_   if (enumConversion.isPresent())   return enumConversion; _EL_   return Optional.empty(); _EL_ } _EL_ ', 'private boolean advanceApiUpTo(TreeSet<AreaPanelInfo> sortedApiTree,AreaPanelInfo api,int time){ _EL_   AreaPanel ap=api.ap(); _EL_   TimeTree rootTt=ap.getTimeTree(); _EL_   TimeTree tt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(time,true); _EL_   if (tt == null || tt.id == api.currTtId)   return false; _EL_   sortedApiTree.remove(api); _EL_   if (api.setTt(tt,Integer.MAX_VALUE))   sortedApiTree.add(api); _EL_   return true; _EL_ } _EL_ ', '@RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("userroles") @Valid UserRoles userRoles,BindingResult bindingResult,Principal principal){ _EL_   RestWrapper restWrapper=null; _EL_   if (bindingResult.hasErrors()) { _EL_     BindingResultError bindingResultError=new BindingResultError(); _EL_     return bindingResultError.errorMessage(bindingResult); _EL_   } _EL_   try { _EL_     com.wipro.ats.bdre.md.dao.jpa.UserRoles jpaUserRoles=new com.wipro.ats.bdre.md.dao.jpa.UserRoles(); _EL_     jpaUserRoles.setUserRoleId(userRoles.getUserRoleId()); _EL_     jpaUserRoles.setRole(userRoles.getRole()); _EL_     Users users=new Users(); _EL_     users.setUsername(userRoles.getUsername()); _EL_     jpaUserRoles.setUsers(users); _EL_     userRolesDAO.update(jpaUserRoles); _EL_     restWrapper=new RestWrapper(userRoles,RestWrapper.OK); _EL_     LOGGER.info("Record with ID:" + userRoles.getUserRoleId() + " updated in UserRoles by User:"+ principal.getName()+ userRoles); _EL_   } _EL_  catch (  Exception e) { _EL_     LOGGER.error(e); _EL_     restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR); _EL_   } _EL_   return restWrapper; _EL_ } _EL_ ', 'public static void printThreadInfo(PrintWriter stream,String title){ _EL_   final int STACK_DEPTH=20; _EL_   boolean contention=threadBean.isThreadContentionMonitoringEnabled(); _EL_   long[] threadIds=threadBean.getAllThreadIds(); _EL_   stream.println("Process Thread Dump: " + title); _EL_   stream.println(threadIds.length + " active threads"); _EL_   for (  long tid : threadIds) { _EL_     ThreadInfo info=threadBean.getThreadInfo(tid,STACK_DEPTH); _EL_     if (info == null) { _EL_       stream.println("  Inactive"); _EL_       continue; _EL_     } _EL_     stream.println("Thread " + getTaskName(info.getThreadId(),info.getThreadName()) + ":"); _EL_     Thread.State state=info.getThreadState(); _EL_     stream.println("  State: " + state); _EL_     stream.println("  Blocked count: " + info.getBlockedCount()); _EL_     stream.println("  Waited count: " + info.getWaitedCount()); _EL_     if (contention) { _EL_       stream.println("  Blocked time: " + info.getBlockedTime()); _EL_       stream.println("  Waited time: " + info.getWaitedTime()); _EL_     } _EL_     if (state == Thread.State.WAITING) { _EL_       stream.println("  Waiting on " + info.getLockName()); _EL_     } _EL_  else     if (state == Thread.State.BLOCKED) { _EL_       stream.println("  Blocked on " + info.getLockName()); _EL_       stream.println("  Blocked by " + getTaskName(info.getLockOwnerId(),info.getLockOwnerName())); _EL_     } _EL_     stream.println("  Stack:"); _EL_     for (    StackTraceElement frame : info.getStackTrace()) { _EL_       stream.println("    " + frame.toString()); _EL_     } _EL_   } _EL_   stream.flush(); _EL_ } _EL_ ', 'public void addDelete(IResource delete){ _EL_   if (fDelete == null)   fDelete=new ArrayList<IResource>(2); _EL_   fDelete.add(delete); _EL_   if (fIgnoreCount == 0) { _EL_     internalAdd(new DeleteDescription(delete)); _EL_   } _EL_ } _EL_ ', 'public void addContainer(ImageContainer container){ _EL_   mContainers.add(container); _EL_ } _EL_ ', '@Override public void writeExternal(ObjectOutput out) throws IOException { _EL_   super.writeExternal(out); _EL_   out.writeObject(approximation); _EL_ } _EL_ ', 'public void add(String methodName,List<Expression> parameters){ _EL_   chain.add(new DotExpressionItem(methodName,parameters,false)); _EL_ } _EL_ ', 'public static Request request(){ _EL_   return threadLocal.get(); _EL_ } _EL_ ', 'public static String createHash(String password) throws NoSuchAlgorithmException, InvalidKeySpecException { _EL_   return createHash(password.toCharArray()); _EL_ } _EL_ ', 'public int hashCode(){ _EL_   long bits=Double.doubleToLongBits(m00); _EL_   bits=bits * 31 + Double.doubleToLongBits(m01); _EL_   bits=bits * 31 + Double.doubleToLongBits(m02); _EL_   bits=bits * 31 + Double.doubleToLongBits(m10); _EL_   bits=bits * 31 + Double.doubleToLongBits(m11); _EL_   bits=bits * 31 + Double.doubleToLongBits(m12); _EL_   return (((int)bits) ^ ((int)(bits >> 32))); _EL_ } _EL_ ', 'public void unsubscribe(AWSIotMessage message) throws AWSIotException { _EL_   try { _EL_     unsubscribeTopic(message); _EL_   } _EL_  catch (  AwsIotRetryableException e) { _EL_     if (client.getMaxOfflineQueueSize() > 0 && unsubscribeQueue.size() < client.getMaxOfflineQueueSize()) { _EL_       unsubscribeQueue.add(message); _EL_     } _EL_  else { _EL_       LOGGER.info("Failed to unsubscribe to " + message.getTopic()); _EL_       throw new AWSIotException(e); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void clientDisconnect(){ _EL_   try { _EL_     OutHttpApp responseStream=_responseStream; _EL_     if (responseStream != null) { _EL_       responseStream.close(); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     log.log(Level.FINER,e.toString(),e); _EL_   } _EL_   ConnectionTcp conn=connTcp(); _EL_   if (conn != null) { _EL_     conn.clientDisconnect(); _EL_   } _EL_   killKeepalive("client disconnect"); _EL_ } _EL_ ', 'public boolean endsWith(Name n){ _EL_   if (n instanceof CompoundName) { _EL_     return (impl.endsWith(n.size(),n.getAll())); _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'private int calculateTotalHeight(float starSize,int numberOfStars,float starsSeparation,boolean padding){ _EL_   return Math.round(starSize) + (padding ? getPaddingTop() + getPaddingBottom() : 0); _EL_ } _EL_ ', 'private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){ _EL_   try { _EL_     PackageManager pm=context.getPackageManager(); _EL_     List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER); _EL_     if (handlers == null || handlers.size() == 0) { _EL_       return false; _EL_     } _EL_     for (    ResolveInfo resolveInfo : handlers) { _EL_       IntentFilter filter=resolveInfo.filter; _EL_       if (filter == null)       continue; _EL_       if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue; _EL_       if (resolveInfo.activityInfo == null)       continue; _EL_       return true; _EL_     } _EL_   } _EL_  catch (  RuntimeException e) { _EL_     Log.e(TAG,"Runtime exception while getting specialized handlers"); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static Sentence make(final Connective connective,final Sentence... children2){ _EL_   return make(connective,Arrays.asList(children2)); _EL_ } _EL_ ', 'public synchronized void init(){ _EL_   init=true; _EL_   for (  String mapName : store.getMapNames()) { _EL_     if (mapName.startsWith("temp.")) { _EL_       MVMap<Object,Integer> temp=openTempMap(mapName); _EL_       store.removeMap(temp); _EL_     } _EL_   } _EL_ synchronized (undoLog) { _EL_     if (undoLog.size() > 0) { _EL_       for (      Long key : undoLog.keySet()) { _EL_         int transactionId=getTransactionId(key); _EL_         openTransactions.set(transactionId); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public synchronized void updateIconsForPkg(String packageName,UserHandleCompat user){ _EL_   removeIconsForPkg(packageName,user); _EL_   try { _EL_     PackageInfo info=mPackageManager.getPackageInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES); _EL_     long userSerial=mUserManager.getSerialNumberForUser(user); _EL_     for (    LauncherActivityInfoCompat app : mLauncherApps.getActivityList(packageName,user)) { _EL_       addIconToDBAndMemCache(app,info,userSerial); _EL_     } _EL_   } _EL_  catch (  NameNotFoundException e) { _EL_     Log.d(TAG,"Package not found",e); _EL_     return; _EL_   } _EL_ } _EL_ ', 'protected DateTimeData parse(String str) throws SchemaDateTimeException { _EL_   DateTimeData date=new DateTimeData(str,this); _EL_   int len=str.length(); _EL_   int end=indexOf(str,0,len,\'T\'); _EL_   int dateEnd=getDate(str,0,end,date); _EL_   getTime(str,end + 1,len,date); _EL_   if (dateEnd != end) { _EL_     throw new RuntimeException(str + " is an invalid dateTime dataype value. " + "Invalid character(s) seprating date and time values."); _EL_   } _EL_   validateDateTime(date); _EL_   saveUnnormalized(date); _EL_   if (date.utc != 0 && date.utc != \'Z\') { _EL_     normalize(date); _EL_   } _EL_   return date; _EL_ } _EL_ ', 'void addAttributeValues(String attrName,Set values) throws SMSException { _EL_   if (attrName != null && values != null && !values.isEmpty()) { _EL_     Map attrs=getAttributes(); _EL_     Set origValues=(Set)attrs.get(attrName); _EL_     Set newValues=new HashSet(values); _EL_     if (origValues != null && !origValues.isEmpty()) { _EL_       newValues.addAll(origValues); _EL_     } _EL_     Map newAttrs=new HashMap(); _EL_     newAttrs.put(attrName,newValues); _EL_     setAttributes(newAttrs); _EL_   } _EL_ } _EL_ ', 'public void finishFragments(){ _EL_   for (  Fragment comment : closingFragments) { _EL_     finishFragment(comment); _EL_   } _EL_   closingFragments.clear(); _EL_ } _EL_ ', 'private final void _writeUTF8Segments(byte[] utf8,int offset,int totalLen) throws IOException, JsonGenerationException { _EL_   do { _EL_     int len=Math.min(_outputMaxContiguous,totalLen); _EL_     _writeUTF8Segment(utf8,offset,len); _EL_     offset+=len; _EL_     totalLen-=len; _EL_   } _EL_  while (totalLen > 0); _EL_ } _EL_ ', 'public static String hexToStringNoException(final String data){ _EL_   try { _EL_     return ConversionUtils.arrayToString(Hex.decodeHex(data.toCharArray())); _EL_   } _EL_  catch (  DecoderException e) { _EL_     return "[invalid hex]"; _EL_   } _EL_ } _EL_ ', 'private boolean traverse(Tree tree,NodeRef node,int[] operatorNumber,boolean flip){ _EL_   boolean update=false; _EL_   int nodeNum=node.getNumber(); _EL_   NodeRef parent=tree.getParent(node); _EL_   if (operatorNumber != null) { _EL_     operatorNumber[0]=-1; _EL_   } _EL_   if (parent != null && updateNode[nodeNum]) { _EL_     final double branchRate=branchRateModel.getBranchRate(tree,node); _EL_     final double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(node)); _EL_     if (branchTime < 0.0) { _EL_       throw new RuntimeException("Negative branch length: " + branchTime); _EL_     } _EL_     if (flip) { _EL_       matrixBufferHelper.flipOffset(nodeNum); _EL_     } _EL_     final int eigenIndex=0; _EL_     final int updateCount=branchUpdateCount[eigenIndex]; _EL_     matrixUpdateIndices[eigenIndex][updateCount]=matrixBufferHelper.getOffsetIndex(nodeNum); _EL_     branchLengths[eigenIndex][updateCount]=branchTime; _EL_     branchUpdateCount[eigenIndex]++; _EL_     update=true; _EL_   } _EL_   if (!tree.isExternal(node)) { _EL_     NodeRef child1=tree.getChild(node,0); _EL_     final int[] op1={-1}; _EL_     final boolean update1=traverse(tree,child1,op1,flip); _EL_     NodeRef child2=tree.getChild(node,1); _EL_     final int[] op2={-1}; _EL_     final boolean update2=traverse(tree,child2,op2,flip); _EL_     if (update1 || update2) { _EL_       int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE; _EL_       if (flip) { _EL_         partialBufferHelper.flipOffset(nodeNum); _EL_       } _EL_       final int[] operations=this.operations[operationListCount]; _EL_       operations[x]=partialBufferHelper.getOffsetIndex(nodeNum); _EL_       if (useScaleFactors) { _EL_         int n=nodeNum - tipCount; _EL_         if (recomputeScaleFactors) { _EL_           scaleBufferHelper.flipOffset(n); _EL_           scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n); _EL_           operations[x + 1]=scaleBufferIndices[n]; _EL_           operations[x + 2]=Beagle.NONE; _EL_         } _EL_  else { _EL_           operations[x + 1]=Beagle.NONE; _EL_           operations[x + 2]=scaleBufferIndices[n]; _EL_         } _EL_       } _EL_  else { _EL_         if (useAutoScaling) { _EL_           scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum); _EL_         } _EL_         operations[x + 1]=Beagle.NONE; _EL_         operations[x + 2]=Beagle.NONE; _EL_       } _EL_       operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber()); _EL_       operations[x + 4]=matrixBufferHelper.getOffsetIndex(child1.getNumber()); _EL_       operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber()); _EL_       operations[x + 6]=matrixBufferHelper.getOffsetIndex(child2.getNumber()); _EL_       operationCount[operationListCount]++; _EL_       update=true; _EL_     } _EL_   } _EL_   return update; _EL_ } _EL_ ', 'public static String rate2speed(double rate){ _EL_   return NUMBER_FORMAT0.format(rate) + " " + GENERAL_UNIT_KBPSEC; _EL_ } _EL_ ', 'public long next(){ _EL_   long result=-1l; _EL_   if (cache < 0L && bufferElements > 0) { _EL_     result=getNextFromBuffer(); _EL_     bufferElements--; _EL_   } _EL_  else { _EL_     result=cache; _EL_     cache=-1L; _EL_   } _EL_   if (!cs.isEmpty()) { _EL_     long first=cs.first(); _EL_     if (result > first || result == -1L) { _EL_       cs.remove(first); _EL_       cache=result; _EL_       result=first; _EL_     } _EL_   } _EL_   if (result == -1L) { _EL_     throw new NoSuchElementException(); _EL_   } _EL_   Assert.check(previous < result,EC.GENERAL); _EL_   previous=result; _EL_   readElements++; _EL_   return result; _EL_ } _EL_ ', 'public void requestContactCapabilities(Set<ContactId> contacts) throws RcsServiceNotRegisteredException, RcsServiceNotAvailableException, RcsGenericException { _EL_   if (mApi == null) { _EL_     throw new RcsServiceNotAvailableException(); _EL_   } _EL_   if (contacts == null || contacts.isEmpty()) { _EL_     throw new RcsIllegalArgumentException("contacts must not be null or empty!"); _EL_   } _EL_   try { _EL_     mApi.requestContactCapabilities2(new ArrayList<>(contacts)); _EL_   } _EL_  catch (  Exception e) { _EL_     RcsIllegalArgumentException.assertException(e); _EL_     RcsServiceNotRegisteredException.assertException(e); _EL_     throw new RcsGenericException(e); _EL_   } _EL_ } _EL_ ', 'public String findURIFromDoc(int owner){ _EL_   int n=m_sourceTree.size(); _EL_   for (int i=0; i < n; i++) { _EL_     SourceTree sTree=(SourceTree)m_sourceTree.elementAt(i); _EL_     if (owner == sTree.m_root)     return sTree.m_url; _EL_   } _EL_   return null; _EL_ } _EL_ ', 'static public final int random(int start,int end){ _EL_   return start + random.nextInt(end - start + 1); _EL_ } _EL_ ', 'public boolean offer(E event,int taskId) throws InterruptedException { _EL_   assertNotDone(); _EL_   if (predicate.match(event)) { _EL_     this.matched[taskId]=true; _EL_     for (    boolean match : matched) { _EL_       if (!match)       return true; _EL_     } _EL_     responseQueue.put(new EventHolder(event)); _EL_     done=true; _EL_     return true; _EL_   } _EL_  else   return false; _EL_ } _EL_ ', 'private static AlgorithmParameterSpec algorithmParameterSpec(){ _EL_   final SecureRandom random=new SecureRandom(); _EL_   final byte[] bytes=new byte[CcAes.BLOCK]; _EL_   random.nextBytes(bytes); _EL_   return new IvParameterSpec(bytes); _EL_ } _EL_ ', 'static ZoneOffsetTransitionRule readExternal(DataInput in) throws IOException { _EL_   int data=in.readInt(); _EL_   Month month=Month.of(data >>> 28); _EL_   int dom=((data & (63 << 22)) >>> 22) - 32; _EL_   int dowByte=(data & (7 << 19)) >>> 19; _EL_   DayOfWeek dow=dowByte == 0 ? null : DayOfWeek.of(dowByte); _EL_   int timeByte=(data & (31 << 14)) >>> 14; _EL_   TimeDefinition defn=TimeDefinition.values()[(data & (3 << 12)) >>> 12]; _EL_   int stdByte=(data & (255 << 4)) >>> 4; _EL_   int beforeByte=(data & (3 << 2)) >>> 2; _EL_   int afterByte=(data & 3); _EL_   LocalTime time=(timeByte == 31 ? LocalTime.ofSecondOfDay(in.readInt()) : LocalTime.of(timeByte % 24,0)); _EL_   ZoneOffset std=(stdByte == 255 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds((stdByte - 128) * 900)); _EL_   ZoneOffset before=(beforeByte == 3 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + beforeByte * 1800)); _EL_   ZoneOffset after=(afterByte == 3 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + afterByte * 1800)); _EL_   return ZoneOffsetTransitionRule.of(month,dom,dow,time,timeByte == 24,defn,std,before,after); _EL_ } _EL_ ', 'protected boolean isTokenChar(char ch){ _EL_   if (Character.isLetterOrDigit(ch))   return true; _EL_   if (Character.isISOControl(ch))   return false; _EL_   if (isHttpSeparator(ch))   return false; _EL_   return true; _EL_ } _EL_ ', 'public static String makeLogTag(Class cls){ _EL_   return makeLogTag(cls.getSimpleName()); _EL_ } _EL_ ', 'final public void println(String s){ _EL_   Writer out=this.out; _EL_   if (out == null)   return; _EL_   try { _EL_     if (s == null)     out.write(_nullChars,0,_nullChars.length); _EL_  else     out.write(s,0,s.length()); _EL_     out.write(_newline,0,_newline.length); _EL_   } _EL_  catch (  IOException e) { _EL_     log.log(Level.FINE,e.toString(),e); _EL_   } _EL_ } _EL_ ', 'private static URI refragUri(URI uri,String frag) throws URISyntaxException { _EL_   return new URI(uri.getScheme(),uri.getSchemeSpecificPart(),frag); _EL_ } _EL_ ', '@Override public void paint(final PPaintContext ppc){ _EL_   final Paint paint=getPaint(); _EL_   if (paint != null) { _EL_     final Graphics2D g2=ppc.getGraphics(); _EL_     final PBounds bounds=getUnionOfChildrenBounds(null); _EL_     if (fillBackground) { _EL_       g2.setPaint(backgroundColor); _EL_       g2.fillRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding); _EL_     } _EL_     if (drawOutline) { _EL_       g2.setPaint(lineColor); _EL_       g2.drawRoundRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding,ROUNDING_WIDTH_HEIGHT,ROUNDING_WIDTH_HEIGHT); _EL_     } _EL_   } _EL_ } _EL_ ', 'public final synchronized byte[] toByteArray(){ _EL_   ByteArrayOutputStream baos=null; _EL_   DataOutputStream dos=null; _EL_   try { _EL_     baos=new ByteArrayOutputStream(32768); _EL_     dos=new DataOutputStream(baos); _EL_     game.writeToStream(dos); _EL_     dos.flush(); _EL_     return baos.toByteArray(); _EL_   } _EL_  catch (  IOException e) { _EL_     return null; _EL_   } _EL_  finally { _EL_     if (dos != null)     try { _EL_       dos.close(); _EL_     } _EL_  catch (    IOException ex) { _EL_     } _EL_     if (baos != null)     try { _EL_       baos.close(); _EL_     } _EL_  catch (    IOException ex) { _EL_     } _EL_   } _EL_ } _EL_ ', 'public void addImport(@NotNull PsiElement importable,@NotNull PsiFile file,@Nullable PyImportElement importElement){ _EL_   myImports.add(new ImportCandidateHolder(importable,file,importElement,null)); _EL_ } _EL_ ', 'private Object[] unmarshalParametersChecked(DeserializationChecker checker,Method method,MarshalInputStream in) throws IOException, ClassNotFoundException { _EL_   int callID=methodCallIDCount.getAndIncrement(); _EL_   MyChecker myChecker=new MyChecker(checker,method,callID); _EL_   in.setStreamChecker(myChecker); _EL_   try { _EL_     Class<?>[] types=method.getParameterTypes(); _EL_     Object[] values=new Object[types.length]; _EL_     for (int i=0; i < types.length; i++) { _EL_       myChecker.setIndex(i); _EL_       values[i]=unmarshalValue(types[i],in); _EL_     } _EL_     myChecker.end(callID); _EL_     return values; _EL_   } _EL_   finally { _EL_     in.setStreamChecker(null); _EL_   } _EL_ } _EL_ ', 'private void loadDataFromService(){ _EL_   List<ExceptionSensorData> exData=null; _EL_   if ((null != fromDate) && (null != toDate)) { _EL_     exData=dataAccessService.getUngroupedExceptionOverview(template,limit,fromDate,toDate,resultComparator); _EL_   } _EL_  else { _EL_     exData=dataAccessService.getUngroupedExceptionOverview(template,limit,resultComparator); _EL_   } _EL_   exceptionSensorData.clear(); _EL_   if (null != exData) { _EL_     exceptionSensorData.addAll(exData); _EL_   } _EL_ } _EL_ ', 'public int syncQuery(String query){ _EL_   long start=System.currentTimeMillis(); _EL_   int modified=execute("update",UPDATE_COUNT_RESPONSE,query); _EL_   log.debug("Update query took {} millis and modified {} statements",System.currentTimeMillis() - start,modified); _EL_   return modified; _EL_ } _EL_ ', 'public static void fullReset(){ _EL_   resetRuntime(); _EL_ synchronized (readProperties) { _EL_     readProperties.clear(); _EL_   } _EL_ } _EL_ ', 'private BufferedImage toBufferedImage(final Image image){ _EL_   if (image instanceof BufferedImage) { _EL_     return (BufferedImage)image; _EL_   } _EL_   if (image instanceof VolatileImage) { _EL_     VolatileImage volatileImage=(VolatileImage)image; _EL_     return volatileImage.getSnapshot(); _EL_   } _EL_   GraphicsEnvironment graphicsEnvironment=GraphicsEnvironment.getLocalGraphicsEnvironment(); _EL_   GraphicsDevice graphicsDevice=graphicsEnvironment.getDefaultScreenDevice(); _EL_   GraphicsConfiguration graphicsConfiguration=graphicsDevice.getDefaultConfiguration(); _EL_   BufferedImage bufferedImage=graphicsConfiguration.createCompatibleImage(image.getWidth(null),image.getHeight(null)); _EL_   Graphics2D g=bufferedImage.createGraphics(); _EL_   g.drawImage(image,0,0,null); _EL_   g.dispose(); _EL_   return bufferedImage; _EL_ } _EL_ ', 'public final boolean isCancelled(){ _EL_   if (cancelled) { _EL_     pass("cancelled",cancelled); _EL_   } _EL_  else { _EL_     fail("cancelled"); _EL_   } _EL_   return cancelled; _EL_ } _EL_ ', '@Override protected void onMessageOnProducerThread(T msg){ _EL_   _lock.lock(); _EL_   try { _EL_     if (_pending.isEmpty()) { _EL_       _queue.schedule(_flushRunnable,_interval,_timeUnit); _EL_     } _EL_     _pending.add(msg); _EL_   } _EL_   finally { _EL_     _lock.unlock(); _EL_   } _EL_ } _EL_ ', 'public Builder untilDate(Date date){ _EL_   untilDate=QUERY_DATE.format(date); _EL_   return this; _EL_ } _EL_ ', 'private boolean isInThumbRange(float touchX,double normalizedThumbValue){ _EL_   return Math.abs(touchX - normalizedToScreen(normalizedThumbValue)) <= mThumbHalfWidth; _EL_ } _EL_ ', '@Override public boolean canBeCollidedWith(){ _EL_   return true; _EL_ } _EL_ ', 'public void update(long duration,TimeUnit unit){ _EL_   update(unit.toNanos(duration)); _EL_ } _EL_ ', 'public FileInputStream openRead() throws FileNotFoundException { _EL_   if (mBackupName.exists()) { _EL_     mBaseName.delete(); _EL_     mBackupName.renameTo(mBaseName); _EL_   } _EL_   return new FileInputStream(mBaseName); _EL_ } _EL_ ', 'public static Executor createTaskDistributor(){ _EL_   return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,"uil-pool-d-")); _EL_ } _EL_ ', 'public void dump(Writer writer){ _EL_   PrintWriter pw=new PrintWriter(new BufferedWriter(writer)); _EL_   pw.println("#========== Wave =========="); _EL_   pw.println("#Type: NULL"); _EL_   pw.println("#Sample_Rate: " + (int)audioFormat.getSampleRate()); _EL_   pw.println("#Num_of_Samples: " + samples.length / 2); _EL_   pw.println("#Num_of_Channels: " + audioFormat.getChannels()); _EL_   if (samples != null) { _EL_     for (int i=0; i < samples.length; i+=2) { _EL_       pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1])); _EL_     } _EL_   } _EL_   pw.flush(); _EL_ } _EL_ ', 'public void addFieldBuffered(VEditor editor,GridField mField){ _EL_   wrap=mField != null ? !mField.isSameLine() : false; _EL_   if (prevEditor != null && prevField != null)   addField(prevEditor,prevField); _EL_   prevEditor=editor; _EL_   prevField=mField; _EL_ } _EL_ ', 'public ExpandRoomFreespaceIncomplete add_incomplete_expansion_room(ShapeTile p_shape,int p_layer,ShapeTile p_contained_shape){ _EL_   ExpandRoomFreespaceIncomplete new_room=new ExpandRoomFreespaceIncomplete(p_shape,p_layer,p_contained_shape); _EL_   incomplete_expansion_rooms.add(new_room); _EL_   return new_room; _EL_ } _EL_ ', 'static double computeDesiredEllipsoidMagnitude(final PlanetModel planetModel,final double x,final double y,final double z){ _EL_   return 1.0 / Math.sqrt(x * x * planetModel.inverseAbSquared + y * y * planetModel.inverseAbSquared + z * z * planetModel.inverseCSquared); _EL_ } _EL_ ', 'public static String trim(CharSequence s){ _EL_   if (s == null) { _EL_     return null; _EL_   } _EL_   Matcher m=sTrimPattern.matcher(s); _EL_   return m.replaceAll("$1"); _EL_ } _EL_ ', 'private void validateVNXFileSMISProviderMandatoryDetails(StorageSystemRequestParam param){ _EL_   ArgValidator.checkFieldValidIP(param.getSmisProviderIP(),"smis_provider_ip"); _EL_   ArgValidator.checkFieldNotNull(param.getSmisPortNumber(),"smis_port_number"); _EL_   ArgValidator.checkFieldRange(param.getSmisPortNumber(),1,65535,"smis_port_number"); _EL_   ArgValidator.checkFieldNotEmpty(param.getSmisUserName(),"smis_user_name"); _EL_   ArgValidator.checkFieldNotEmpty(param.getSmisPassword(),"smis_password"); _EL_ } _EL_ ', 'public void createAccrualBasedJournalEntriesAndReversalsForLoanCharges(final Office office,final String currencyCode,final Integer accountTypeToBeDebited,final Integer accountTypeToBeCredited,final Long loanProductId,final Long loanId,final String transactionId,final Date transactionDate,final BigDecimal totalAmount,final Boolean isReversal,final List<ChargePaymentDTO> chargePaymentDTOs){ _EL_   GLAccount receivableAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeDebited,null); _EL_   final Map<GLAccount,BigDecimal> creditDetailsMap=new LinkedHashMap<>(); _EL_   for (  final ChargePaymentDTO chargePaymentDTO : chargePaymentDTOs) { _EL_     final Long chargeId=chargePaymentDTO.getChargeId(); _EL_     final GLAccount chargeSpecificAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeCredited,chargeId); _EL_     BigDecimal chargeSpecificAmount=chargePaymentDTO.getAmount(); _EL_     if (creditDetailsMap.containsKey(chargeSpecificAccount)) { _EL_       final BigDecimal existingAmount=creditDetailsMap.get(chargeSpecificAccount); _EL_       chargeSpecificAmount=chargeSpecificAmount.add(existingAmount); _EL_     } _EL_     creditDetailsMap.put(chargeSpecificAccount,chargeSpecificAmount); _EL_   } _EL_   BigDecimal totalCreditedAmount=BigDecimal.ZERO; _EL_   for (  final Map.Entry<GLAccount,BigDecimal> entry : creditDetailsMap.entrySet()) { _EL_     final GLAccount account=entry.getKey(); _EL_     final BigDecimal amount=entry.getValue(); _EL_     totalCreditedAmount=totalCreditedAmount.add(amount); _EL_     if (isReversal) { _EL_       createDebitJournalEntryForLoan(office,currencyCode,account,loanId,transactionId,transactionDate,amount); _EL_       createCreditJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount); _EL_     } _EL_  else { _EL_       createDebitJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount); _EL_       createCreditJournalEntryForLoan(office,currencyCode,account,loanId,transactionId,transactionDate,amount); _EL_     } _EL_   } _EL_   if (totalAmount.compareTo(totalCreditedAmount) != 0) { _EL_     throw new PlatformDataIntegrityException("Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction","Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction",totalCreditedAmount,totalAmount); _EL_   } _EL_ } _EL_ ', 'private ArtLocateResult calculate_next_trace(boolean p_layer_changed,boolean p_at_fanout_end){ _EL_   Collection<PlaPointFloat> corner_list=new LinkedList<PlaPointFloat>(); _EL_   corner_list.add(current_from_point); _EL_   if (!p_at_fanout_end) { _EL_     PlaPointFloat adjusted_start_corner=adjust_start_corner(); _EL_     if (adjusted_start_corner != current_from_point) { _EL_       PlaPointFloat add_corner=calculate_additional_corner(current_from_point,adjusted_start_corner,true,angle_restriction); _EL_       corner_list.add(add_corner); _EL_       corner_list.add(adjusted_start_corner); _EL_       previous_from_point=current_from_point; _EL_       current_from_point=adjusted_start_corner; _EL_     } _EL_   } _EL_   PlaPointFloat prev_corner=current_from_point; _EL_   for (int c_limit=0; c_limit < 1000; c_limit++) { _EL_     Collection<PlaPointFloat> next_corners=calculate_next_trace_corners(); _EL_     if (next_corners.isEmpty())     break; _EL_     for (    PlaPointFloat curr_next_corner : next_corners) { _EL_       if (curr_next_corner == prev_corner)       continue; _EL_       corner_list.add(curr_next_corner); _EL_       previous_from_point=current_from_point; _EL_       current_from_point=curr_next_corner; _EL_       prev_corner=curr_next_corner; _EL_     } _EL_   } _EL_   int next_layer=current_trace_layer; _EL_   if (p_layer_changed) { _EL_     current_from_door_index=current_target_door_index + 1; _EL_     ExpandRoomComplete next_room=backtrack_array[current_from_door_index].next_room; _EL_     if (next_room != null) { _EL_       next_layer=next_room.get_layer(); _EL_     } _EL_   } _EL_   PlaPointIntAlist rounded_corner_list=new PlaPointIntAlist(corner_list.size()); _EL_   PlaPointInt prev_point=null; _EL_   for (  PlaPointFloat a_float : corner_list) { _EL_     PlaPointInt curr_point=a_float.round(); _EL_     if (curr_point.equals(prev_point))     continue; _EL_     rounded_corner_list.add(curr_point); _EL_     prev_point=curr_point; _EL_   } _EL_   ArtLocateResult result=new ArtLocateResult(rounded_corner_list,current_trace_layer); _EL_   current_trace_layer=next_layer; _EL_   return result; _EL_ } _EL_ ', 'public static <ValueT>ByteBuffer toByteBuffer(ValueT obj) throws IOException { _EL_   byte[] bytes=null; _EL_   ByteArrayOutputStream bos=null; _EL_   ObjectOutputStream oos=null; _EL_   try { _EL_     bos=new ByteArrayOutputStream(); _EL_     oos=new ObjectOutputStream(bos); _EL_     oos.writeObject(obj); _EL_     oos.flush(); _EL_     bytes=bos.toByteArray(); _EL_   } _EL_   finally { _EL_     if (oos != null) { _EL_       oos.close(); _EL_     } _EL_     if (bos != null) { _EL_       bos.close(); _EL_     } _EL_   } _EL_   return ByteBuffer.wrap(bytes); _EL_ } _EL_ ', '@Override protected Sensor createNewSensor(String systemName,String userName){ _EL_   if (log.isDebugEnabled()) { _EL_     log.debug("createNewSensor " + systemName + " "+ userName); _EL_   } _EL_   Sensor s; _EL_   String sName=SerialAddress.normalizeSystemName(systemName); _EL_   if (sName.equals("")) { _EL_     log.error("Invalid Sensor system name - " + systemName); _EL_     return null; _EL_   } _EL_   s=getBySystemName(sName); _EL_   if (s != null) { _EL_     log.error("Sensor with this name already exists - " + systemName); _EL_     return null; _EL_   } _EL_   String altName=SerialAddress.convertSystemNameToAlternate(sName); _EL_   s=getBySystemName(altName); _EL_   if (s != null) { _EL_     log.error("Sensor with name \'" + systemName + "\' already exists as \'"+ altName+ "\'"); _EL_     return null; _EL_   } _EL_   int bit=SerialAddress.getBitFromSystemName(sName); _EL_   if ((bit <= 0) || (bit >= SENSORSPERNODE)) { _EL_     log.error("Sensor bit number, " + Integer.toString(bit) + ", is outside the supported range, 1-"+ Integer.toString(SENSORSPERNODE - 1)); _EL_     return null; _EL_   } _EL_   if (userName == null) { _EL_     s=new SerialSensor(sName); _EL_   } _EL_  else { _EL_     s=new SerialSensor(sName,userName); _EL_   } _EL_   SerialNode node=SerialAddress.getNodeFromSystemName(sName); _EL_   if (node == null) { _EL_     log.warn("Sensor " + sName + " refers to an undefined Serial Node."); _EL_     return s; _EL_   } _EL_   node.registerSensor(s,bit); _EL_   if (log.isDebugEnabled()) { _EL_     log.debug("register " + s.getSystemName() + " in node "+ node); _EL_   } _EL_   return s; _EL_ } _EL_ ', 'public void fill_shape(PlaPointFloat[] p_points,Graphics p_g,Color p_color,double p_translucency_factor){ _EL_   if (p_color == null)   return; _EL_   Graphics2D g2=(Graphics2D)p_g; _EL_   Polygon draw_polygon=new Polygon(); _EL_   for (int index=0; index < p_points.length; index++) { _EL_     Point2D curr_corner=coordinate_transform.board_to_screen(p_points[index]); _EL_     draw_polygon.addPoint((int)Math.round(curr_corner.getX()),(int)Math.round(curr_corner.getY())); _EL_   } _EL_   g2.setColor(p_color); _EL_   set_translucency(g2,p_translucency_factor); _EL_   g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON); _EL_   g2.fill(draw_polygon); _EL_ } _EL_ ', 'public void writeExif(InputStream jpegStream,OutputStream exifOutStream) throws IOException { _EL_   if (jpegStream == null || exifOutStream == null) { _EL_     throw new IllegalArgumentException(NULL_ARGUMENT_STRING); _EL_   } _EL_   OutputStream s=getExifWriterStream(exifOutStream); _EL_   doExifStreamIO(jpegStream,s); _EL_   s.flush(); _EL_ } _EL_ ', 'public static byte[] toIPv4AddressBytes(int ipAddress){ _EL_   return new byte[]{(byte)(ipAddress >>> 24),(byte)(ipAddress >>> 16),(byte)(ipAddress >>> 8),(byte)ipAddress}; _EL_ } _EL_ ', 'public Object take() throws InterruptedException, ForceReattemptException { _EL_   throw new UnsupportedOperationException(); _EL_ } _EL_ ', '@SuppressWarnings({"SuspiciousNameCombination"}) public static double normalCdf(double y){ _EL_   double f, h; _EL_   int j; _EL_   double dcphi, x, z, f1, f2, f3, f4, f5; _EL_   x=y; _EL_   if (Math.abs(x) > 15.) { _EL_     dcphi=0.; _EL_   } _EL_  else { _EL_     j=(int)Math.floor(Math.abs(x) * 16. + .5); _EL_     z=j * .0625; _EL_     h=Math.abs(x) - z; _EL_     f=r[j]; _EL_     f1=f * z - 1; _EL_     f2=f + z * f1; _EL_     f3=f1 * 2. + z * f2; _EL_     f4=f2 * 3 + z * f3; _EL_     f5=f3 * 4 + z * f4; _EL_     dcphi=f + h * (f1 * 120. + h * (f2 * 60. + h * (f3 * 20. + h * (f4 * 5. + h * f5)))) / 120.; _EL_     dcphi=dcphi * .3989422804014326779 * Math.exp(x * -.5 * x); _EL_   } _EL_   if (x < 0.) { _EL_     return dcphi; _EL_   } _EL_  else { _EL_     return (1.0 - dcphi); _EL_   } _EL_ } _EL_ ', 'private void destroy(){ _EL_   if (log.isLoggable(Level.FINEST)) { _EL_     log.finest(this + " destroying connection"); _EL_   } _EL_   try { _EL_     _socket.forceShutdown(); _EL_   } _EL_  catch (  Throwable e) { _EL_   } _EL_   try { _EL_     closeConnection(); _EL_   } _EL_  catch (  Throwable e) { _EL_     log.log(Level.FINER,e.toString(),e); _EL_   } _EL_   _port.removeConnection(this); _EL_ } _EL_ ', 'int atom() throws RESyntaxException { _EL_   int ret=node(RE.OP_ATOM,0); _EL_   int lenAtom=0; _EL_   atomLoop:   while (idx < len) { _EL_     if ((idx + 1) < len) { _EL_       char c=pattern.charAt(idx + 1); _EL_       if (pattern.charAt(idx) == \'\\\\\') { _EL_         int idxEscape=idx; _EL_         escape(); _EL_         if (idx < len) { _EL_           c=pattern.charAt(idx); _EL_         } _EL_         idx=idxEscape; _EL_       } _EL_ switch (c) { _EL_ case \'{\': _EL_ case \'?\': _EL_ case \'*\': _EL_ case \'+\': _EL_         if (lenAtom != 0) { _EL_           break atomLoop; _EL_         } _EL_     } _EL_   } _EL_ switch (pattern.charAt(idx)) { _EL_ case \']\': _EL_ case \'^\': _EL_ case \'$\': _EL_ case \'.\': _EL_ case \'[\': _EL_ case \'(\': _EL_ case \')\': _EL_ case \'|\': _EL_     break atomLoop; _EL_ case \'{\': _EL_ case \'?\': _EL_ case \'*\': _EL_ case \'+\': _EL_   if (lenAtom == 0) { _EL_     syntaxError("Missing operand to closure"); _EL_   } _EL_ break atomLoop; _EL_ case \'\\\\\': _EL_ { _EL_ int idxBeforeEscape=idx; _EL_ int c=escape(); _EL_ if ((c & ESC_MASK) == ESC_MASK) { _EL_   idx=idxBeforeEscape; _EL_   break atomLoop; _EL_ } _EL_ emit((char)c); _EL_ lenAtom++; _EL_ } _EL_ break; _EL_ default : _EL_ emit(pattern.charAt(idx++)); _EL_ lenAtom++; _EL_ break; _EL_ } _EL_ } _EL_ if (lenAtom == 0) { _EL_ internalError(); _EL_ } _EL_ instruction[ret + RE.offsetOpdata]=(char)lenAtom; _EL_ return ret; _EL_ } _EL_ ', '@Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){ _EL_   int visibleRow=state.getVisibleSeriesIndex(row); _EL_   if (visibleRow < 0) { _EL_     return; _EL_   } _EL_   Number dataValue=dataset.getValue(row,column); _EL_   if (dataValue == null) { _EL_     return; _EL_   } _EL_   double value=dataValue.doubleValue(); _EL_   PlotOrientation orientation=plot.getOrientation(); _EL_   double barW0=calculateBarW0(plot,orientation,dataArea,domainAxis,state,visibleRow,column); _EL_   RectangleEdge edge=plot.getRangeAxisEdge(); _EL_   double barL=rangeAxis.valueToJava2D(value,dataArea,edge); _EL_   Line2D line; _EL_   double x, y; _EL_   if (orientation.isHorizontal()) { _EL_     x=barL; _EL_     y=barW0 + state.getBarWidth() / 2.0; _EL_     line=new Line2D.Double(barL,barW0,barL,barW0 + state.getBarWidth()); _EL_   } _EL_  else { _EL_     x=barW0 + state.getBarWidth() / 2.0; _EL_     y=barL; _EL_     line=new Line2D.Double(barW0,barL,barW0 + state.getBarWidth(),barL); _EL_   } _EL_   if (state.getElementHinting()) { _EL_     beginElementGroup(g2,dataset.getRowKey(row),dataset.getColumnKey(column)); _EL_   } _EL_   Stroke itemStroke=getItemStroke(row,column); _EL_   Paint itemPaint=getItemPaint(row,column); _EL_   g2.setStroke(itemStroke); _EL_   g2.setPaint(itemPaint); _EL_   g2.draw(line); _EL_   if (state.getElementHinting()) { _EL_     endElementGroup(g2); _EL_   } _EL_   CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column); _EL_   if (generator != null && isItemLabelVisible(row,column)) { _EL_     drawItemLabel(g2,orientation,dataset,row,column,x,y,(value < 0.0)); _EL_   } _EL_   int datasetIndex=plot.indexOf(dataset); _EL_   updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,barW0,barL,orientation); _EL_   EntityCollection entities=state.getEntityCollection(); _EL_   if (entities != null) { _EL_     addItemEntity(entities,dataset,row,column,line.getBounds()); _EL_   } _EL_ } _EL_ ', 'public boolean isNetworkConnected(){ _EL_   ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE); _EL_   NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo(); _EL_   return networkInfo != null && networkInfo.isConnectedOrConnecting(); _EL_ } _EL_ ', '@Override public void onTabClosing(long time,int id){ _EL_   reset(); _EL_   forceAnimationToFinish(); _EL_   TabModel model=mTabModelSelector.getModelForTabId(id); _EL_   if (model != null) { _EL_     mClosedTab=createLayoutTab(id,model.isIncognito(),NO_CLOSE_BUTTON,NO_TITLE); _EL_     mClosedTab.setBorderAlpha(0.0f); _EL_     mLayoutTabs=new LayoutTab[]{mClosedTab}; _EL_     updateCacheVisibleIds(new LinkedList<Integer>(Arrays.asList(id))); _EL_   } _EL_  else { _EL_     mLayoutTabs=null; _EL_     mClosedTab=null; _EL_   } _EL_   super.onTabClosing(time,id); _EL_ } _EL_ ', 'public void put(String name,String supported,String authScheme,String level,boolean isDefault){ _EL_   SAMLv2AuthContext c=new SAMLv2AuthContext(); _EL_   c.name=name; _EL_   c.supported=supported; _EL_   if (authScheme.length() != 0 && authScheme != null) { _EL_     int index=authScheme.lastIndexOf("="); _EL_     c.value=authScheme.substring(index + 1); _EL_     c.key=authScheme.substring(0,index); _EL_   } _EL_  else { _EL_     c.value=""; _EL_     c.key=""; _EL_   } _EL_   c.level=level; _EL_   c.isDefault=isDefault; _EL_   collections.put(name,c); _EL_ } _EL_ ', 'public final void close(LsServerPacket closePacket,boolean forced){ _EL_ synchronized (guard) { _EL_     if (isWriteDisabled()) { _EL_       return; _EL_     } _EL_     log.debug("sending packet: " + closePacket + " and closing connection after that."); _EL_     pendingClose=true; _EL_     isForcedClosing=forced; _EL_     sendMsgQueue.clear(); _EL_     sendMsgQueue.addLast(closePacket); _EL_     enableWriteInterest(); _EL_   } _EL_ } _EL_ ', 'private void replaceCollapsedEdges(){ _EL_   List newEdges=new ArrayList(); _EL_   for (Iterator it=edgeList.iterator(); it.hasNext(); ) { _EL_     Edge e=(Edge)it.next(); _EL_     if (e.isCollapsed()) { _EL_       it.remove(); _EL_       newEdges.add(e.getCollapsedEdge()); _EL_     } _EL_   } _EL_   edgeList.addAll(newEdges); _EL_ } _EL_ ', 'public void timingEvent(float fraction){ _EL_   current.x=(int)(start.x + (end.x - start.x) * fraction); _EL_   current.y=(int)(start.y + (end.y - start.y) * fraction); _EL_   track.setCarPosition(current); _EL_ } _EL_ ', 'public SeaGlassTitlePane(JRootPane rootPane,SeaGlassRootPaneUI ui){ _EL_   this.rootPane=rootPane; _EL_   this.rootPaneUI=ui; _EL_   rootParent=(RootPaneContainer)rootPane.getParent(); _EL_   installTitlePane(); _EL_ } _EL_ ', 'public void writeLong(long value) throws IOException { _EL_   checkWritePrimitiveTypes(); _EL_   primitiveTypes.writeLong(value); _EL_ } _EL_ ', 'public static Charset forName(String charsetName){ _EL_   return forName(charsetName,null); _EL_ } _EL_ ', 'public NSNumber(int i){ _EL_   doubleValue=longValue=i; _EL_   type=INTEGER; _EL_ } _EL_ ', 'public static void dump(String message,StackTraceElement[] stackTrace){ _EL_   dump(message,Arrays.asList(stackTrace)); _EL_ } _EL_ ', 'public void execQuery(String sql,ExecQueryCallbackFunctionIF aListener) throws GenericEntityException { _EL_   if (_connection == null) { _EL_     getConnection(); _EL_   } _EL_   try { _EL_     if (Debug.verboseOn())     Debug.logVerbose("[SQLProcessor.execQuery]: " + sql,module); _EL_     executeQuery(sql); _EL_     boolean keepGoing=true; _EL_     while (keepGoing && _rs.next()) { _EL_       keepGoing=aListener.processNextRow(_rs); _EL_     } _EL_     if (_manualTX) { _EL_       _connection.commit(); _EL_     } _EL_   } _EL_  catch (  SQLException sqle) { _EL_     Debug.logWarning("[SQLProcessor.execQuery]: SQL Exception while executing the following:\\n" + sql + "\\nError was:",module); _EL_     Debug.logWarning(sqle.getMessage(),module); _EL_     throw new GenericEntityException("SQL Exception while executing the following:" + _sql,sqle); _EL_   } _EL_  finally { _EL_     close(); _EL_   } _EL_ } _EL_ ', 'private Name cacheName(String sig){ _EL_   StringBuilder buf=new StringBuilder(); _EL_   if (sig.startsWith("[")) { _EL_     buf=buf.append("array"); _EL_     while (sig.startsWith("[")) { _EL_       buf=buf.append(target.syntheticNameChar()); _EL_       sig=sig.substring(1); _EL_     } _EL_     if (sig.startsWith("L")) { _EL_       sig=sig.substring(0,sig.length() - 1); _EL_     } _EL_   } _EL_  else { _EL_     buf=buf.append("class" + target.syntheticNameChar()); _EL_   } _EL_   buf=buf.append(sig.replace(\'.\',target.syntheticNameChar())); _EL_   return names.fromString(buf.toString()); _EL_ } _EL_ ', 'public Matcher next() throws IOException { _EL_   readahead(); _EL_   if (matches == null) { _EL_     throw new NoSuchElementException(); _EL_   } _EL_   Matcher matcher=matches.next(); _EL_   if (discard) { _EL_     Pattern pattern=matcher.pattern(); _EL_     for (int n=0; n < patterns.length; n++) { _EL_       if (patterns[n] == pattern) { _EL_         patterns[n]=null; _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   return matcher; _EL_ } _EL_ ', 'default FieldDeclaration addPrivateField(Class<?> typeClass,String name){ _EL_   return addField(typeClass,name,Modifier.PRIVATE); _EL_ } _EL_ ', 'void ReconstructPrivateSubrs(int Font,IndexBaseItem[] fdPrivateBase,OffsetItem[] fdSubrs){ _EL_   for (int i=0; i < fonts[Font].fdprivateLengths.length; i++) { _EL_     if (fdSubrs[i] != null && fonts[Font].PrivateSubrsOffset[i] >= 0) { _EL_       OutputList.addLast(new SubrMarkerItem(fdSubrs[i],fdPrivateBase[i])); _EL_       if (NewLSubrsIndex[i] != null)       OutputList.addLast(new RangeItem(new RandomAccessFileOrArray(rasFactory.createSource(NewLSubrsIndex[i])),0,NewLSubrsIndex[i].length)); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void initGL(){ _EL_   mEglCore=new EglCore(null,EglCore.FLAG_RECORDABLE | EglCore.FLAG_TRY_GLES3); _EL_   mWindowSurface=new WindowSurface(mEglCore,mSurfaceTexture); _EL_   mWindowSurface.makeCurrent(); _EL_   mRecordSurface=new WindowSurface(mEglCore,mMediaRecorder.getSurface(),false); _EL_   initGLComponents(); _EL_ } _EL_ ', 'void clear(){ _EL_   if (mViewTypeCount == 1) { _EL_     final ArrayList<View> scrap=mCurrentScrap; _EL_     final int scrapCount=scrap.size(); _EL_     for (int i=0; i < scrapCount; i++) { _EL_       removeDetachedView(scrap.remove(scrapCount - 1 - i),false); _EL_     } _EL_   } _EL_  else { _EL_     final int typeCount=mViewTypeCount; _EL_     for (int i=0; i < typeCount; i++) { _EL_       final ArrayList<View> scrap=mScrapViews[i]; _EL_       final int scrapCount=scrap.size(); _EL_       for (int j=0; j < scrapCount; j++) { _EL_         removeDetachedView(scrap.remove(scrapCount - 1 - j),false); _EL_       } _EL_     } _EL_   } _EL_   if (mTransientStateViews != null) { _EL_     mTransientStateViews.clear(); _EL_   } _EL_ } _EL_ ', 'public int read(char cbuf[],int off,int len){ _EL_   int k; _EL_   if (position >= document.getLength()) { _EL_     return -1; _EL_   } _EL_   k=len; _EL_   if ((position + k) >= document.getLength())   k=document.getLength() - (int)position; _EL_   if (off + k >= cbuf.length)   k=cbuf.length - off; _EL_   try { _EL_     document.getText((int)position,k,segment); _EL_     position+=k; _EL_     System.arraycopy(segment.array,segment.offset,cbuf,off,k); _EL_     return k; _EL_   } _EL_  catch (  BadLocationException ble) { _EL_     return -1; _EL_   } _EL_ } _EL_ ', 'public static void mergeNodeChildren(TreeNode node){ _EL_   DefaultMutableTreeNode masterNode=(DefaultMutableTreeNode)node; _EL_   for (int i=0; i < masterNode.getChildCount(); i++) { _EL_     DefaultMutableTreeNode child=(DefaultMutableTreeNode)masterNode.getChildAt(i); _EL_     if (!child.isLeaf()) { _EL_       MergeHelpUtilities.mergeNodeChildren(DEFAULT_MERGE_TYPE,child); _EL_     } _EL_   } _EL_ } _EL_ ', 'private static Object createAndBindItem(ParameterAccess parameters,Class<?> itemType){ _EL_   try { _EL_     Object value=itemType.newInstance(); _EL_     bind(value,parameters); _EL_     return value; _EL_   } _EL_  catch (  InstantiationException|IllegalAccessException e) { _EL_     throw new BindingException("Failed to instantiate new instance of " + itemType,e); _EL_   } _EL_ } _EL_ ', 'public SimpleSetupPanel(Experiment exp){ _EL_   this(); _EL_   setExperiment(exp); _EL_ } _EL_ ', 'public static void addListener(Listener listener){ _EL_   listeners.addLast(listener); _EL_ } _EL_ ', 'private static void processArgs(String[] args){ _EL_   for (int i=0; i < args.length; i++) { _EL_     String arg=args[i]; _EL_     if (arg.equals("-o")) { _EL_       outputDir=args[++i]; _EL_     } _EL_  else     if (arg.equals("-spec")) { _EL_       unicodeData=args[++i]; _EL_     } _EL_  else     if (arg.equals("-language")) { _EL_       language=args[++i]; _EL_     } _EL_  else     if (arg.equals("-country")) { _EL_       country=args[++i]; _EL_     } _EL_  else     if (arg.equals("-valiant")) { _EL_       valiant=args[++i]; _EL_     } _EL_  else { _EL_       usage(); _EL_     } _EL_   } _EL_   localeName=getLocaleName(); _EL_ } _EL_ ', 'private void initXMLTree() throws Exception { _EL_   updateFilteredTokens(); _EL_   ArrayList elements=getElements(getFilteredTokens()); _EL_   if (elements.size() > 1) { _EL_     throw new Exception("More than one root elements encountered"); _EL_   } _EL_   setRootElement((XMLElement)elements.get(0)); _EL_ } _EL_ ', 'public boolean hasNameValue(String name){ _EL_   return nameValueMap.containsKey(name.toLowerCase()); _EL_ } _EL_ ', 'public boolean startsWith(CharSeq prefix){ _EL_   return str.startsWith(prefix.str); _EL_ } _EL_ ', 'protected final void firePropertyChange(String propertyName,long oldValue,long newValue){ _EL_   firePropertyChange(propertyName,Long.valueOf(oldValue),Long.valueOf(newValue)); _EL_ } _EL_ ', 'public void fadeToLayer(int index){ _EL_   mTransitionState=TRANSITION_STARTING; _EL_   Arrays.fill(mIsLayerOn,false); _EL_   mIsLayerOn[index]=true; _EL_   invalidateSelf(); _EL_ } _EL_ ', 'public static int hashCode(boolean[] field){ _EL_   return field == null || field.length == 0 ? 0 : Arrays.hashCode(field); _EL_ } _EL_ ', 'public AbstractSurfaceObject(AbstractSurfaceObject source){ _EL_   super(source); _EL_   this.visible=source.visible; _EL_   this.uniqueId=nextUniqueId(); _EL_   this.lastModifiedTime=System.currentTimeMillis(); _EL_   this.enableBatchPicking=source.enableBatchPicking; _EL_ } _EL_ ', 'public SootMethodAndClass parseSootMethodString(String parseString){ _EL_   if (!parseString.startsWith("<") || !parseString.endsWith(">")) { _EL_     throw new IllegalArgumentException("Illegal format of " + parseString + " (should use soot method representation)"); _EL_   } _EL_   String name=""; _EL_   String className=""; _EL_   String returnType=""; _EL_   Pattern pattern=Pattern.compile("<(.*?):"); _EL_   Matcher matcher=pattern.matcher(parseString); _EL_   if (matcher.find()) { _EL_     className=matcher.group(1); _EL_   } _EL_   pattern=Pattern.compile(": (.*?) "); _EL_   matcher=pattern.matcher(parseString); _EL_   if (matcher.find()) { _EL_     returnType=matcher.group(1); _EL_     parseString=parseString.substring(matcher.end(1)); _EL_   } _EL_   pattern=Pattern.compile(" (.*?)\\\\("); _EL_   matcher=pattern.matcher(parseString); _EL_   if (matcher.find()) { _EL_     name=matcher.group(1); _EL_   } _EL_   List<String> paramList=new ArrayList<String>(); _EL_   pattern=Pattern.compile("\\\\((.*?)\\\\)"); _EL_   matcher=pattern.matcher(parseString); _EL_   if (matcher.find()) { _EL_     String params=matcher.group(1); _EL_     for (    String param : params.split(","))     paramList.add(param.trim()); _EL_   } _EL_   return new SootMethodAndClass(name,className,returnType,paramList); _EL_ } _EL_ ', '@Override public void startup() throws Exception { _EL_   Log.d(Mary.LOG,"Register UnitSelection voices:"); _EL_   List<String> voiceNames=MaryProperties.getList("unitselection.voices.list"); _EL_   for (  String voiceName : voiceNames) { _EL_     long time=System.currentTimeMillis(); _EL_     Voice unitSelVoice=new UnitSelectionVoice(voiceName,this); _EL_     Log.d(Mary.LOG,"Voice \'" + unitSelVoice + "\'"); _EL_     Voice.registerVoice(unitSelVoice); _EL_     long newtime=System.currentTimeMillis() - time; _EL_     Log.i(Mary.LOG,"Loading of voice " + voiceName + " took "+ newtime+ " milliseconds"); _EL_   } _EL_   Log.i(Mary.LOG,"started."); _EL_ } _EL_ ', 'public int findStartOfColumn(int column){ _EL_   if (column == mColumns)   return getSpaceUsed(); _EL_   int currentColumn=0; _EL_   int currentCharIndex=0; _EL_   while (true) { _EL_     int newCharIndex=currentCharIndex; _EL_     char c=mText[newCharIndex++]; _EL_     boolean isHigh=Character.isHighSurrogate(c); _EL_     int codePoint=isHigh ? Character.toCodePoint(c,mText[newCharIndex++]) : c; _EL_     int wcwidth=WcWidth.width(codePoint); _EL_     if (wcwidth > 0) { _EL_       currentColumn+=wcwidth; _EL_       if (currentColumn == column) { _EL_         while (newCharIndex < mSpaceUsed) { _EL_           if (Character.isHighSurrogate(mText[newCharIndex])) { _EL_             if (WcWidth.width(Character.toCodePoint(mText[newCharIndex],mText[newCharIndex + 1])) <= 0) { _EL_               newCharIndex+=2; _EL_             } _EL_  else { _EL_               break; _EL_             } _EL_           } _EL_  else           if (WcWidth.width(mText[newCharIndex]) <= 0) { _EL_             newCharIndex++; _EL_           } _EL_  else { _EL_             break; _EL_           } _EL_         } _EL_         return newCharIndex; _EL_       } _EL_  else       if (currentColumn > column) { _EL_         return currentCharIndex; _EL_       } _EL_     } _EL_     currentCharIndex=newCharIndex; _EL_   } _EL_ } _EL_ ', 'public static Color decode(String color,Color defaultColor){ _EL_   if (color == null) { _EL_     return defaultColor; _EL_   } _EL_   Color c=getNamedColor(color); _EL_   if (c == null) { _EL_     try { _EL_       c=Color.decode(color); _EL_     } _EL_  catch (    NumberFormatException ex) { _EL_       return defaultColor; _EL_     } _EL_   } _EL_   return c; _EL_ } _EL_ ', 'public double distance(Vector o){ _EL_   return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z)); _EL_ } _EL_ ', 'public static long calculateElapsedGC(){ _EL_   long timeMillis=0; _EL_   for (  GarbageCollectorMXBean gcbean : gcbeans) { _EL_     timeMillis+=gcbean.getCollectionTime(); _EL_   } _EL_   return timeMillis; _EL_ } _EL_ ', 'public static <V>int addDistinctList(List<V> sourceList,List<V> entryList){ _EL_   if (sourceList == null || isEmpty(entryList)) { _EL_     return 0; _EL_   } _EL_   int sourceCount=sourceList.size(); _EL_   for (  V entry : entryList) { _EL_     if (!sourceList.contains(entry)) { _EL_       sourceList.add(entry); _EL_     } _EL_   } _EL_   return sourceList.size() - sourceCount; _EL_ } _EL_ ', 'public void startObject(int numfields){ _EL_   notNested(); _EL_   if (vtable == null || vtable.length < numfields)   vtable=new int[numfields]; _EL_   vtable_in_use=numfields; _EL_   Arrays.fill(vtable,0,vtable_in_use,0); _EL_   nested=true; _EL_   object_start=offset(); _EL_ } _EL_ ', 'public static String stringOfChar(char ch,int count){ _EL_   StringBuffer buf=new StringBuffer(); _EL_   for (int i=0; i < count; i++) { _EL_     buf.append(ch); _EL_   } _EL_   return buf.toString(); _EL_ } _EL_ ', 'private void addConnectionView(Connection connection){ _EL_   PlatformImpl.runAndWait(null); _EL_ } _EL_ ', 'public void addScriptFinishedListener(ScriptExecutionListener l){ _EL_   m_FinishedListeners.add(l); _EL_ } _EL_ ', 'public static double[] concatAllDouble(double[]... arrays){ _EL_   int totalLength=0; _EL_   final int subArrayCount=arrays.length; _EL_   for (int i=0; i < subArrayCount; ++i) { _EL_     totalLength+=arrays[i].length; _EL_   } _EL_   double[] result=Arrays.copyOf(arrays[0],totalLength); _EL_   int offset=arrays[0].length; _EL_   for (int i=1; i < subArrayCount; ++i) { _EL_     System.arraycopy(arrays[i],0,result,offset,arrays[i].length); _EL_     offset+=arrays[i].length; _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public synchronized void add(String category,double minValue,double maxValue){ _EL_   super.add(category,minValue); _EL_   mMaxValues.add(maxValue); _EL_ } _EL_ ', 'public static double calcRotationAngleInDegrees(PointF centerPt,PointF targetPt){ _EL_   double theta=Math.atan2(targetPt.y - centerPt.y,targetPt.x - centerPt.x); _EL_   double angle=Math.toDegrees(theta); _EL_   if (angle < 0) { _EL_     angle+=360; _EL_   } _EL_   return angle; _EL_ } _EL_ ', 'public int countIn(CharSequence sequence){ _EL_   int count=0; _EL_   for (int i=0; i < sequence.length(); i++) { _EL_     if (matches(sequence.charAt(i))) { _EL_       count++; _EL_     } _EL_   } _EL_   return count; _EL_ } _EL_ ', 'public DeltaCRLIndicatorExtension(int crlNum) throws IOException { _EL_   super(PKIXExtensions.DeltaCRLIndicator_Id,true,BigInteger.valueOf(crlNum),NAME,LABEL); _EL_ } _EL_ ', 'public static void v(String tag,String s,Object... args){ _EL_   if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,String.format(s,args)); _EL_ } _EL_ ', '@Override public SoftwarePIDController withTolerance(double tolerance){ _EL_   target=target.withTolerance(Math.abs(tolerance)); _EL_   return this; _EL_ } _EL_ ', 'protected final void dragDropFinished(final boolean success,final int operations,final int x,final int y){ _EL_   DragSourceEvent event=new DragSourceDropEvent(getDragSourceContext(),operations & sourceActions,success,x,y); _EL_   EventDispatcher dispatcher=new EventDispatcher(DISPATCH_FINISH,event); _EL_   SunToolkit.invokeLaterOnAppContext(SunToolkit.targetToAppContext(getComponent()),dispatcher); _EL_   startSecondaryEventLoop(); _EL_   setNativeContext(0); _EL_   dragImage=null; _EL_   dragImageOffset=null; _EL_ } _EL_ ', 'public void addSafeClass(SootClass clz){ _EL_   safeClasses.add(clz.getName()); _EL_ } _EL_ ', 'private boolean activeListHasRoom(){ _EL_   int maxDownloads=1; _EL_   return mActiveList.size() < maxDownloads; _EL_ } _EL_ ', 'public static final double parseTime(final String time,final char separator){ _EL_   if (time == null || time.length() == 0 || time.equals("undefined")) { _EL_     return Time.UNDEFINED_TIME; _EL_   } _EL_   boolean isNegative=(time.charAt(0) == \'-\'); _EL_   String[] strings=(isNegative ? StringUtils.explode(time.substring(1),separator) : StringUtils.explode(time,separator)); _EL_   double seconds=0; _EL_   if (strings.length == 1) { _EL_     seconds=Math.abs(Double.parseDouble(strings[0])); _EL_   } _EL_  else   if (strings.length == 2) { _EL_     int h=Integer.parseInt(strings[0]); _EL_     int m=Integer.parseInt(strings[1]); _EL_     if ((m < 0) || (m > 59)) { _EL_       throw new IllegalArgumentException("minutes are out of range in " + time); _EL_     } _EL_     seconds=Math.abs(h) * 3600 + m * 60; _EL_   } _EL_  else   if (strings.length == 3) { _EL_     int h=Integer.parseInt(strings[0]); _EL_     int m=Integer.parseInt(strings[1]); _EL_     double s=Double.parseDouble(strings[2]); _EL_     if ((m < 0) || (m > 59)) { _EL_       throw new IllegalArgumentException("minutes are out of range in " + time); _EL_     } _EL_     if ((s < 0) || (s >= 60)) { _EL_       throw new IllegalArgumentException("seconds are out of range in " + time); _EL_     } _EL_     seconds=Math.abs(h) * 3600 + m * 60 + s; _EL_   } _EL_  else { _EL_     throw new IllegalArgumentException("time format is not valid in " + time); _EL_   } _EL_   if (isNegative) { _EL_     seconds=-seconds; _EL_   } _EL_   return seconds; _EL_ } _EL_ ', 'public boolean isRunning(){ _EL_   return this.running; _EL_ } _EL_ ', 'protected static Map<String,Step> parse(Class<? extends RSLPStemmerBase> clazz,String resource){ _EL_   try { _EL_     InputStream is=clazz.getResourceAsStream(resource); _EL_     LineNumberReader r=new LineNumberReader(new InputStreamReader(is,StandardCharsets.UTF_8)); _EL_     Map<String,Step> steps=new HashMap<>(); _EL_     String step; _EL_     while ((step=readLine(r)) != null) { _EL_       Step s=parseStep(r,step); _EL_       steps.put(s.name,s); _EL_     } _EL_     r.close(); _EL_     return steps; _EL_   } _EL_  catch (  IOException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ } _EL_ ', 'public String betToString(){ _EL_   final StringBuilder sb=new StringBuilder(); _EL_   sb.append(amount); _EL_   sb.append(" "); _EL_   sb.append(itemName); _EL_   sb.append(" on "); _EL_   sb.append(target); _EL_   return sb.toString(); _EL_ } _EL_ ', 'private boolean checkMatchIp(Map<String,Object> rows){ _EL_   boolean matchEther=false; _EL_   String val=(String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE); _EL_   if (val != null) { _EL_     int type=0; _EL_     if (val.startsWith("0x")) { _EL_       type=Integer.parseInt(val.substring(2),16); _EL_     } _EL_  else { _EL_       try { _EL_         type=Integer.parseInt(val); _EL_       } _EL_  catch (      NumberFormatException e) { _EL_       } _EL_     } _EL_     if (type == 2048)     matchEther=true; _EL_   } _EL_   if ((rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_SRC) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_TOS)) && (matchEther == false))   return false; _EL_   return true; _EL_ } _EL_ ', 'private String classToEntryPath(Class<?> clazz){ _EL_   String name=""; _EL_   Class<?> parent; _EL_   while ((parent=clazz.getEnclosingClass()) != null) { _EL_     name="$" + clazz.getSimpleName() + name; _EL_     clazz=parent; _EL_   } _EL_   return classNameToEntryPath(clazz.getCanonicalName() + name); _EL_ } _EL_ ', 'public static String write(POSMikheevCounter counter){ _EL_   return POSBaseLineCounter.write(counter); _EL_ } _EL_ ', 'private Map<String,AnnotationMirror> annosInPackage(PackageElement packageElement){ _EL_   return createImportedAnnotationsMap(ElementFilter.typesIn(packageElement.getEnclosedElements())); _EL_ } _EL_ ', 'public OsmElement pasteFrom(){ _EL_   List<Way> ways=storage.getWays(); _EL_   List<Node> nodes=storage.getNodes(); _EL_   if (mode == Mode.CUT) { _EL_     reset(); _EL_     if (ways != null && ways.size() == 1) { _EL_       Way w=ways.get(0); _EL_       w.setState(savedState); _EL_       for (      Node nd : w.getNodes()) { _EL_         Log.d("PasteFrom","Restoring state for " + nd.getOsmId()); _EL_         nd.setState(savedNdState.get(nd)); _EL_       } _EL_       return w; _EL_     } _EL_  else     if (nodes != null && nodes.size() == 1) { _EL_       Node n=nodes.get(0); _EL_       n.setState(savedState); _EL_       return n; _EL_     } _EL_   } _EL_  else { _EL_     if (ways != null && ways.size() == 1) { _EL_       return ways.get(0); _EL_     } _EL_  else     if (nodes != null && nodes.size() == 1) { _EL_       return nodes.get(0); _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public final void updateCursor(){ _EL_   updatePending.set(false); _EL_   updateCursorImpl(); _EL_ } _EL_ ', 'public static boolean isMiddleMouseButton(MouseEvent anEvent){ _EL_   return ((anEvent.getModifiersEx() & InputEvent.BUTTON2_DOWN_MASK) != 0 || anEvent.getButton() == MouseEvent.BUTTON2); _EL_ } _EL_ ', 'public void addSuccessMessage(final String successMessage){ _EL_   successMessageList.add(successMessage); _EL_ } _EL_ ', 'private void startStoppedChanged(){ _EL_   clock.setStartStopped(startStoppedCheckBox.isSelected()); _EL_   changed=true; _EL_ } _EL_ ', 'public static Long nextLogSegmentSequenceNumber(List<LogSegmentMetadata> segmentListDesc){ _EL_   int lastAssignedLogSegmentIdx=-1; _EL_   Long lastAssignedLogSegmentSeqNo=null; _EL_   Long nextLogSegmentSeqNo=null; _EL_   for (int i=0; i < segmentListDesc.size(); i++) { _EL_     LogSegmentMetadata metadata=segmentListDesc.get(i); _EL_     if (LogSegmentMetadata.supportsLogSegmentSequenceNo(metadata.getVersion())) { _EL_       lastAssignedLogSegmentSeqNo=metadata.getLogSegmentSequenceNumber(); _EL_       lastAssignedLogSegmentIdx=i; _EL_       break; _EL_     } _EL_   } _EL_   if (null != lastAssignedLogSegmentSeqNo) { _EL_     nextLogSegmentSeqNo=lastAssignedLogSegmentSeqNo + lastAssignedLogSegmentIdx + 1; _EL_   } _EL_   return nextLogSegmentSeqNo; _EL_ } _EL_ ', 'public static void assertSpecificLang(String specificLang) throws XMPException { _EL_   if (specificLang == null || specificLang.length() == 0) { _EL_     throw new XMPException("Empty specific language",XMPError.BADPARAM); _EL_   } _EL_ } _EL_ ', 'public int onBlockExploded(){ _EL_   return (int)(fuseTime / 2 + Math.random() * fuseTime / 4); _EL_ } _EL_ ', '@Override public boolean hasQueuedReaderThreads(){ _EL_   return readerLock.hasQueuedThreads(); _EL_ } _EL_ ', 'public long inactiveTimeMillis(){ _EL_   return System.currentTimeMillis() - lastTimeMillis; _EL_ } _EL_ ', 'public static void check(boolean cond,Object value){ _EL_   if (!cond)   error(String.valueOf(value)); _EL_ } _EL_ ', 'public static SourceDataQuality fromXML(Element domElement){ _EL_   NodeList fields=domElement.getChildNodes(); _EL_   int fieldsCount=fields.getLength(); _EL_   String fieldName; _EL_   String fieldValueString; _EL_   Node fieldNode; _EL_   SourceDataQuality result=new SourceDataQuality(); _EL_   for (int i=0; i != fieldsCount; i++) { _EL_     fieldNode=fields.item(i); _EL_     if (fieldNode.getNodeType() == Node.ELEMENT_NODE) { _EL_       fieldName=fieldNode.getNodeName(); _EL_       Node fieldValueNode=fieldNode.getFirstChild(); _EL_       if (fieldValueNode != null) { _EL_         fieldValueString=fieldValueNode.getNodeValue(); _EL_       } _EL_  else { _EL_         fieldValueString=""; _EL_       } _EL_       if (fieldName.equals(XML_ELEMENT_QUALITY_CODE)) { _EL_         result.qualityCode=Short.parseShort(fieldValueString); _EL_       } _EL_  else       if (fieldName.equals(XML_ELEMENT_QUALITY_DESC)) { _EL_         result.description=fieldValueString; _EL_       } _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'QName toQName(Class<?> outputClass){ _EL_   String localPart; _EL_   String namespaceUri; _EL_   if (outputClass.isAnnotationPresent(XmlRootElement.class)) { _EL_     XmlRootElement annotation=outputClass.getAnnotation(XmlRootElement.class); _EL_     localPart=annotation.name(); _EL_     namespaceUri=annotation.namespace(); _EL_   } _EL_  else   if (outputClass.isAnnotationPresent(XmlType.class)) { _EL_     XmlType annotation=outputClass.getAnnotation(XmlType.class); _EL_     localPart=annotation.name(); _EL_     namespaceUri=annotation.namespace(); _EL_   } _EL_  else { _EL_     throw new IllegalArgumentException("Outputclass [" + outputClass + "] is "+ "neither annotated with @XmlRootElement nor @XmlType"); _EL_   } _EL_   if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(localPart)) { _EL_     localPart=ClassUtils.getShortNameAsProperty(outputClass); _EL_   } _EL_   if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespaceUri)) { _EL_     Package outputClassPackage=outputClass.getPackage(); _EL_     if (outputClassPackage != null && outputClassPackage.isAnnotationPresent(XmlSchema.class)) { _EL_       XmlSchema annotation=outputClassPackage.getAnnotation(XmlSchema.class); _EL_       namespaceUri=annotation.namespace(); _EL_     } _EL_  else { _EL_       namespaceUri=XMLConstants.NULL_NS_URI; _EL_     } _EL_   } _EL_   return new QName(namespaceUri,localPart); _EL_ } _EL_ ', 'private void adjustBottom(RectF rect,float bottom,RectF bounds,int viewHeight,float snapMargin,float aspectRatio,boolean leftMoves,boolean rightMoves){ _EL_   float newBottom=bottom; _EL_   if (newBottom > viewHeight) { _EL_     newBottom=viewHeight + (newBottom - viewHeight) / 1.05f; _EL_     mTouchOffset.y-=(newBottom - viewHeight) / 1.1f; _EL_   } _EL_   if (newBottom > bounds.bottom) { _EL_     mTouchOffset.y-=(newBottom - bounds.bottom) / 2f; _EL_   } _EL_   if (bounds.bottom - newBottom < snapMargin) { _EL_     newBottom=bounds.bottom; _EL_   } _EL_   if (newBottom - rect.top < mMinCropHeight) { _EL_     newBottom=rect.top + mMinCropHeight; _EL_   } _EL_   if (newBottom - rect.top > mMaxCropHeight) { _EL_     newBottom=rect.top + mMaxCropHeight; _EL_   } _EL_   if (bounds.bottom - newBottom < snapMargin) { _EL_     newBottom=bounds.bottom; _EL_   } _EL_   if (aspectRatio > 0) { _EL_     float newWidth=(newBottom - rect.top) * aspectRatio; _EL_     if (newWidth < mMinCropWidth) { _EL_       newBottom=Math.min(bounds.bottom,rect.top + mMinCropWidth / aspectRatio); _EL_       newWidth=(newBottom - rect.top) * aspectRatio; _EL_     } _EL_     if (newWidth > mMaxCropWidth) { _EL_       newBottom=Math.min(bounds.bottom,rect.top + mMaxCropWidth / aspectRatio); _EL_       newWidth=(newBottom - rect.top) * aspectRatio; _EL_     } _EL_     if (leftMoves && rightMoves) { _EL_       newBottom=Math.min(newBottom,Math.min(bounds.bottom,rect.top + bounds.width() / aspectRatio)); _EL_     } _EL_  else { _EL_       if (leftMoves && rect.right - newWidth < bounds.left) { _EL_         newBottom=Math.min(bounds.bottom,rect.top + (rect.right - bounds.left) / aspectRatio); _EL_         newWidth=(newBottom - rect.top) * aspectRatio; _EL_       } _EL_       if (rightMoves && rect.left + newWidth > bounds.right) { _EL_         newBottom=Math.min(newBottom,Math.min(bounds.bottom,rect.top + (bounds.right - rect.left) / aspectRatio)); _EL_       } _EL_     } _EL_   } _EL_   rect.bottom=newBottom; _EL_ } _EL_ ', 'private static String generateJWT(String secret,String jwtID,String iss,Integer ttl,Map<String,String> claims) throws HmacException { _EL_   try { _EL_     return signJWT(secret,jwtID,ttl,iss,claims); _EL_   } _EL_  catch (  JOSEException e) { _EL_     e.printStackTrace(); _EL_     throw new HmacException("Cannot generate JWT",e); _EL_   } _EL_ } _EL_ ', 'public void exportSymbols(String[] exportNames,Symbol[] symbols){ _EL_   if (exportedSymbols == null) { _EL_     exportedSymbols=new ArrayList(); _EL_   } _EL_   for (int i=0; i < exportNames.length && i < symbols.length; i++) { _EL_     exportedSymbols.add(new ExportedSymbol(symbols[i],exportNames[i])); _EL_   } _EL_ } _EL_ ', 'static boolean isFulfilling(int m){ _EL_   return (m & FULFILLING) != 0; _EL_ } _EL_ ', '@Override public synchronized void addDataSourceListener(DataSourceListener dsl){ _EL_   m_dataSourceListeners.addElement(dsl); _EL_   if (m_format != null) { _EL_     DataSetEvent e=new DataSetEvent(this,m_format); _EL_     dsl.acceptDataSet(e); _EL_   } _EL_ } _EL_ ', 'private static void read(InputStream in,byte[] buf,int pos,int n) throws IOException { _EL_   int read=0; _EL_   int res=0; _EL_   while (read < n) { _EL_     res=in.read(buf,read + pos,n - read); _EL_     if (res > 0) { _EL_       read+=res; _EL_     } _EL_  else { _EL_       throw new IOException("Read failed, got " + read + " of "+ n); _EL_     } _EL_   } _EL_ } _EL_ ', 'public double evaluate(VectorInstance x,VectorInstance y) throws Exception { _EL_   VectorInstance diff=x.subtract(y); _EL_   double result=-m_gamma * diff.dotProduct(diff); _EL_   return Math.exp(result); _EL_ } _EL_ ', 'public static void createErrorDialog(final String title,final String message){ _EL_   final Alert alert=new Alert(AlertType.ERROR); _EL_   alert.setTitle(title); _EL_   alert.setContentText(message); _EL_   alert.setHeaderText(null); _EL_   alert.showAndWait(); _EL_ } _EL_ ', 'protected void tag(String tag,ArrayList names,ArrayList values,int nattr,boolean close){ _EL_   spacing(); _EL_   m_out.print(\'<\'); _EL_   m_out.print(tag); _EL_   for (int i=0; i < nattr; ++i) { _EL_     m_out.print(\' \'); _EL_     m_out.print((String)names.get(i)); _EL_     m_out.print(\'=\'); _EL_     m_out.print(\'\\"\'); _EL_     escapeString((String)values.get(i)); _EL_     m_out.print(\'\\"\'); _EL_   } _EL_   if (close)   m_out.print(\'/\'); _EL_   m_out.print(\'>\'); _EL_   println(); _EL_   if (!close) { _EL_     m_tagStack.add(tag); _EL_   } _EL_ } _EL_ ', 'public static String parseDiskString(String input){ _EL_   String delims="[ ]+"; _EL_   String[] tokens=input.split(delims); _EL_   return tokens[0]; _EL_ } _EL_ ', 'protected void drawCloud(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){ _EL_   GeneralPath path=new GeneralPath(); _EL_   path.moveTo((float)(x + 0.25 * w),(float)(y + 0.25 * h)); _EL_   path.curveTo((float)(x + 0.05 * w),(float)(y + 0.25 * h),(float)x,(float)(y + 0.5 * h),(float)(x + 0.16 * w),(float)(y + 0.55 * h)); _EL_   path.curveTo((float)x,(float)(y + 0.66 * h),(float)(x + 0.18 * w),(float)(y + 0.9 * h),(float)(x + 0.31 * w),(float)(y + 0.8 * h)); _EL_   path.curveTo((float)(x + 0.4 * w),(float)(y + h),(float)(x + 0.7 * w),(float)(y + h),(float)(x + 0.8 * w),(float)(y + 0.8 * h)); _EL_   path.curveTo((float)(x + w),(float)(y + 0.8 * h),(float)(x + w),(float)(y + 0.6 * h),(float)(x + 0.875 * w),(float)(y + 0.5 * h)); _EL_   path.curveTo((float)(x + w),(float)(y + 0.3 * h),(float)(x + 0.8 * w),(float)(y + 0.1 * h),(float)(x + 0.625 * w),(float)(y + 0.2 * h)); _EL_   path.curveTo((float)(x + 0.5 * w),(float)(y + 0.05 * h),(float)(x + 0.3 * w),(float)(y + 0.05 * h),(float)(x + 0.25 * w),(float)(y + 0.25 * h)); _EL_   path.closePath(); _EL_   drawPath(path,fillColor,fillPaint,penColor,shadow); _EL_ } _EL_ ', 'private static boolean isTrusted(Object obj,TrustVerifier.Context ctx) throws RemoteException { _EL_   Object saved=state.get(); _EL_   try { _EL_     state.set(obj); _EL_     return ctx.isTrustedObject(obj); _EL_   } _EL_   finally { _EL_     state.set(saved); _EL_   } _EL_ } _EL_ ', 'public static PersistentSearchRequestControl newControl(final boolean isCritical,final boolean changesOnly,final boolean returnECs,final PersistentSearchChangeType... changeTypes){ _EL_   Reject.ifNull((Object)changeTypes); _EL_   return newControl(isCritical,changesOnly,returnECs,Arrays.asList(changeTypes)); _EL_ } _EL_ ', 'private void connectEqualized(SynapseGroup synapseGroup){ _EL_   currentOrderingIndices=new int[sourceNeurons.length]; _EL_   int numConnectsPerSrc; _EL_   int expectedNumSyns; _EL_   if (synapseGroup.isRecurrent() && !selfConnectionAllowed) { _EL_     numConnectsPerSrc=(int)(connectionDensity * (sourceNeurons.length - 1)); _EL_   } _EL_  else { _EL_     numConnectsPerSrc=(int)(connectionDensity * targetNeurons.length); _EL_   } _EL_   expectedNumSyns=numConnectsPerSrc * sourceNeurons.length; _EL_   synapseGroup.preAllocateSynapses(expectedNumSyns); _EL_   for (int i=0, n=sourceNeurons.length; i < n; i++) { _EL_     currentOrderingIndices[i]=numConnectsPerSrc; _EL_     Neuron src=sourceNeurons[i]; _EL_     Neuron tar; _EL_     for (int j=0; j < numConnectsPerSrc; j++) { _EL_       tar=targetNeurons[sparseOrdering[i][j]]; _EL_       Synapse s=new Synapse(src,tar); _EL_       synapseGroup.addNewSynapse(s); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static Number multiply(Character left,Character right){ _EL_   return multiply(Integer.valueOf(left),right); _EL_ } _EL_ ', "public static String normalize(final CharSequence self){ _EL_   final String s=self.toString(); _EL_   int nx=s.indexOf('\\r'); _EL_   if (nx < 0) { _EL_     return s; _EL_   } _EL_   final int len=s.length(); _EL_   final StringBuilder sb=new StringBuilder(len); _EL_   int i=0; _EL_   do { _EL_     sb.append(s,i,nx); _EL_     sb.append('\\n'); _EL_     if ((i=nx + 1) >= len)     break; _EL_     if (s.charAt(i) == '\\n') { _EL_       if (++i >= len)       break; _EL_     } _EL_     nx=s.indexOf('\\r',i); _EL_   } _EL_  while (nx > 0); _EL_   sb.append(s,i,len); _EL_   return sb.toString(); _EL_ } _EL_ ", 'public StartListener(Object resource){ _EL_   _resource=resource; _EL_ } _EL_ ', 'public List<T> asFlatList(){ _EL_   List<T> list=new ArrayList<T>(); _EL_   for (int i=0; i < getRowCount(); i++) { _EL_     for (int j=0; j < getColumnCount(); j++) { _EL_       list.add(getLogicalValueAt(i,j)); _EL_     } _EL_   } _EL_   return list; _EL_ } _EL_ ', 'public static String hashKeyForDisk(String key){ _EL_   String cacheKey; _EL_   try { _EL_     final MessageDigest mDigest=MessageDigest.getInstance("MD5"); _EL_     mDigest.update(key.getBytes()); _EL_     cacheKey=bytesToHexString(mDigest.digest()); _EL_   } _EL_  catch (  NoSuchAlgorithmException e) { _EL_     cacheKey=String.valueOf(key.hashCode()); _EL_   } _EL_   return cacheKey; _EL_ } _EL_ ', 'public void recordTimestamp(){ _EL_   long curTimestamp=System.currentTimeMillis(); _EL_   if (usedFields > 0) { _EL_     long diff=curTimestamp - lastValue; _EL_     if (usedFields == diffs.length) { _EL_       long removedValue=diffs[curPosition]; _EL_       diffs[curPosition]=diff; _EL_       calculateNewAverage(removedValue,diff,false); _EL_       shiftEnd(); _EL_     } _EL_  else { _EL_       calculateNewAverage(0,diff,true); _EL_       diffs[curPosition]=diff; _EL_       shiftEnd(); _EL_     } _EL_   } _EL_  else   if (lastValue != -1) { _EL_     long diff=curTimestamp - lastValue; _EL_     currentAverage=0; _EL_     diffs[curPosition]=diff; _EL_     calculateNewAverage(0,diff,true); _EL_     shiftEnd(); _EL_   } _EL_   lastValue=curTimestamp; _EL_ } _EL_ ', 'protected double defaultMaxRadius(){ _EL_   return Math.sqrt(2.0); _EL_ } _EL_ ', 'public char[] toCharArray(){ _EL_   char[] newValue=new char[count]; _EL_   System.arraycopy(buf,0,newValue,0,count); _EL_   return newValue; _EL_ } _EL_ ', '@Override protected int sizePendingWorkers(){ _EL_   return _pendingWorkers.size(); _EL_ } _EL_ ', 'public void insert(Component component,int index){ _EL_   if (index < 0) { _EL_     throw new IllegalArgumentException("index less than zero."); _EL_   } _EL_   int nitems=getComponentCount(); _EL_   Vector<Component> tempItems=new Vector<Component>(); _EL_   for (int i=index; i < nitems; i++) { _EL_     tempItems.addElement(getComponent(index)); _EL_     remove(index); _EL_   } _EL_   add(component); _EL_   for (  Component tempItem : tempItems) { _EL_     add(tempItem); _EL_   } _EL_ } _EL_ ', 'public EconomyConcurrentHashMap(Map<? extends K,? extends V> m,IHashEntryHandler<K,V> handler){ _EL_   this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL,handler); _EL_   putAll(m); _EL_ } _EL_ ', "void addRule(String[] selector,AttributeSet declaration,boolean isLinked){ _EL_   int n=selector.length; _EL_   StringBuilder sb=new StringBuilder(); _EL_   sb.append(selector[0]); _EL_   for (int counter=1; counter < n; counter++) { _EL_     sb.append(' '); _EL_     sb.append(selector[counter]); _EL_   } _EL_   String selectorName=sb.toString(); _EL_   Style rule=getStyle(selectorName); _EL_   if (rule == null) { _EL_     Style altRule=addStyle(selectorName,null); _EL_ synchronized (this) { _EL_       SelectorMapping mapping=getRootSelectorMapping(); _EL_       for (int i=n - 1; i >= 0; i--) { _EL_         mapping=mapping.getChildSelectorMapping(selector[i],true); _EL_       } _EL_       rule=mapping.getStyle(); _EL_       if (rule == null) { _EL_         rule=altRule; _EL_         mapping.setStyle(rule); _EL_         refreshResolvedRules(selectorName,selector,rule,mapping.getSpecificity()); _EL_       } _EL_     } _EL_   } _EL_   if (isLinked) { _EL_     rule=getLinkedStyle(rule); _EL_   } _EL_   rule.addAttributes(declaration); _EL_ } _EL_ ", 'public Builder appendReadData(byte[] data){ _EL_   Assertions.checkState(data != null && data.length > 0); _EL_   segments.add(new Segment(data,null)); _EL_   return this; _EL_ } _EL_ ', 'private boolean isLatestDssKeystore(TSLParserResult parseResult){ _EL_   List<String> englishSchemeInformationURIs=parseResult.getEnglishSchemeInformationURIs(); _EL_   return englishSchemeInformationURIs.contains(ojUrl); _EL_ } _EL_ ', 'public LayerGraphicWarehouseSupport(){ _EL_   initDrawingAttributes(); _EL_   graphics=new OMGraphicList(); _EL_   graphics.setTraverseMode(OMGraphicList.LAST_ADDED_ON_TOP); _EL_ } _EL_ ', 'public boolean matchesNamingConvension(){ _EL_   return packageName.matches(JAVA_PACKAGE_CONVENSION); _EL_ } _EL_ ', "public char next(){ _EL_   return pos < in.length() ? in.charAt(pos++) : '\\0'; _EL_ } _EL_ ", 'private Map.Entry<K,V> doRemoveFirstEntry(){ _EL_   for (Node<K,V> b, n; ; ) { _EL_     if ((n=(b=head.node).next) == null)     return null; _EL_     Node<K,V> f=n.next; _EL_     if (n != b.next)     continue; _EL_     Object v=n.value; _EL_     if (v == null) { _EL_       n.helpDelete(b,f); _EL_       continue; _EL_     } _EL_     if (!n.casValue(v,null))     continue; _EL_     if (!n.appendMarker(f) || !b.casNext(n,f))     findFirst(); _EL_     clearIndexToFirst(); _EL_     @SuppressWarnings("unchecked") V vv=(V)v; _EL_     return new AbstractMap.SimpleImmutableEntry<K,V>(n.key,vv); _EL_   } _EL_ } _EL_ ', 'public ComputeTaskCancelledException(Throwable cause){ _EL_   this(cause.getMessage(),cause); _EL_ } _EL_ ', 'private void removeObsoleteElements(List<String> names,Map<String,View> sharedElements,List<String> elementsToRemove){ _EL_   if (elementsToRemove.size() > 0) { _EL_     names.removeAll(elementsToRemove); _EL_     for (    String elementToRemove : elementsToRemove) { _EL_       sharedElements.remove(elementToRemove); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void removeAction(NetworkUpdateAction action){ _EL_   actionList.remove(action); _EL_   for (  UpdateManagerListener listener : listeners) { _EL_     listener.actionRemoved(action); _EL_   } _EL_ } _EL_ ', 'public static double bufferDistanceError(int quadSegs){ _EL_   double alpha=Math.PI / 2.0 / quadSegs; _EL_   return 1 - Math.cos(alpha / 2.0); _EL_ } _EL_ ', 'public void add(Character character){ _EL_   elements.add(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character)); _EL_ } _EL_ ', 'public static boolean isValidIfd(int ifdId){ _EL_   return ifdId == IfdId.TYPE_IFD_0 || ifdId == IfdId.TYPE_IFD_1 || ifdId == IfdId.TYPE_IFD_EXIF || ifdId == IfdId.TYPE_IFD_INTEROPERABILITY || ifdId == IfdId.TYPE_IFD_GPS; _EL_ } _EL_ ', 'public void removeChild(Group theGroup){ _EL_   mChildren.remove(theGroup); _EL_ } _EL_ ', 'protected StoragePort checkPortExistsInDB(String nativeGuid) throws IOException { _EL_   StoragePort port=null; _EL_   List<StoragePort> portInDB=CustomQueryUtility.getActiveStoragePortByNativeGuid(_dbClient,nativeGuid); _EL_   if (portInDB != null && !portInDB.isEmpty()) { _EL_     port=portInDB.get(0); _EL_   } _EL_   return port; _EL_ } _EL_ ', 'public void appendSplitElement(Fragment aSplit){ _EL_   splits.add(aSplit); _EL_ } _EL_ ', 'public OsmHandler(MapBuilder meConsumer){ _EL_   osmElementProcessor=new OsmElementProcessor(null,meConsumer); _EL_ } _EL_ ', 'public RespokeDirectConnection directConnection(){ _EL_   if (null != directConnectionReference) { _EL_     return directConnectionReference.get(); _EL_   } _EL_  else { _EL_     return null; _EL_   } _EL_ } _EL_ ', 'private String appendNationalNumber(String nationalNumber){ _EL_   int prefixBeforeNationalNumberLength=prefixBeforeNationalNumber.length(); _EL_   if (shouldAddSpaceAfterNationalPrefix && prefixBeforeNationalNumberLength > 0 && prefixBeforeNationalNumber.charAt(prefixBeforeNationalNumberLength - 1) != SEPARATOR_BEFORE_NATIONAL_NUMBER) { _EL_     return new String(prefixBeforeNationalNumber) + SEPARATOR_BEFORE_NATIONAL_NUMBER + nationalNumber; _EL_   } _EL_  else { _EL_     return prefixBeforeNationalNumber + nationalNumber; _EL_   } _EL_ } _EL_ ', 'public void cut(){ _EL_   copy(); _EL_   deleteSelectedObjects(); _EL_ } _EL_ ', 'public void stop(){ _EL_   setLedOn(false); _EL_   if (null != blinkFuture) { _EL_     blinkFuture.cancel(true); _EL_   } _EL_   if (null != blinkService) { _EL_     blinkService.shutdownNow(); _EL_   } _EL_ } _EL_ ', 'public synchronized void release(){ _EL_   index.clear(); _EL_ } _EL_ ', 'protected void writeTransform(AffineTransform t) throws IOException { _EL_   pageStream.matrix(t); _EL_ } _EL_ ', 'public PainterChain prependPainter(Painter p){ _EL_   Painter[] newChain=new Painter[chain.length + 1]; _EL_   System.arraycopy(chain,1,newChain,0,chain.length); _EL_   newChain[0]=p; _EL_   return new PainterChain(newChain); _EL_ } _EL_ ', '@Nullable private Operator.Kind parseOperator(TokenStream tokens){ _EL_   if (tokens.has("=")) { _EL_     tokens.next(); _EL_     tokens.expect("="); _EL_     return Operator.Kind.EQUALS; _EL_   } _EL_   if (tokens.has("!")) { _EL_     tokens.next(); _EL_     tokens.expect("="); _EL_     return Operator.Kind.NOT_EQUALS; _EL_   } _EL_   if (tokens.has("<")) { _EL_     tokens.next(); _EL_     if (tokens.has("=")) { _EL_       tokens.next(); _EL_       return Operator.Kind.LESS_EQUAL; _EL_     } _EL_     return Operator.Kind.LESS; _EL_   } _EL_   if (tokens.has(">")) { _EL_     tokens.next(); _EL_     if (tokens.has("=")) { _EL_       tokens.next(); _EL_       return Operator.Kind.GREATER_EQUAL; _EL_     } _EL_     return Operator.Kind.GREATER; _EL_   } _EL_   return null; _EL_ } _EL_ ', '@Override public boolean dragTo(Selector obj,Selector destObj,int steps) throws UiObjectNotFoundException, NotImplementedException { _EL_   return dragTo(device.findObject(obj.toUiSelector()),destObj,steps); _EL_ } _EL_ ', 'public synchronized void removeSeries(int index){ _EL_   mSeries.remove(index); _EL_ } _EL_ ', 'public static void addGlue(JComponent b,int layout){ _EL_   b.add(getAxis(b,layout) == BoxLayout.X_AXIS ? Box.createHorizontalGlue() : Box.createVerticalGlue()); _EL_ } _EL_ ', 'public static void writeResultToFile(Result result,String fname) throws Exception { _EL_   PrintWriter outer=new PrintWriter(new BufferedWriter(new FileWriter(fname))); _EL_   outer.write(result.toString()); _EL_   outer.close(); _EL_ } _EL_ ', 'protected void writeBlockletInfoToFile(List<BlockletInfoColumnar> infoList,FileChannel channel,String filePath) throws CarbonDataWriterException { _EL_   try { _EL_     long currentPosition=channel.size(); _EL_     CarbonFooterWriter writer=new CarbonFooterWriter(filePath); _EL_     FileFooter convertFileMeta=CarbonMetadataUtil.convertFileFooter(infoList,localCardinality.length,localCardinality,thriftColumnSchemaList,segmentProperties); _EL_     fillBlockIndexInfoDetails(infoList,convertFileMeta.getNum_rows(),filePath,currentPosition); _EL_     writer.writeFooter(convertFileMeta,currentPosition); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new CarbonDataWriterException("Problem while writing the carbon file: ",e); _EL_   } _EL_ } _EL_ ', 'private static void renderTree(Tree tree,int indent,boolean parentLabelNull,boolean firstSibling,boolean leftSiblingPreTerminal,boolean topLevel,StringBuilder sb){ _EL_   boolean suppressIndent=(parentLabelNull || (firstSibling && tree.isPreTerminal()) || (leftSiblingPreTerminal && tree.isPreTerminal())); _EL_   if (suppressIndent) { _EL_     sb.append(\' \'); _EL_   } _EL_  else { _EL_     if (!topLevel) { _EL_       sb.append(\'\\n\'); _EL_     } _EL_     for (int i=0; i < indent; i++) { _EL_       sb.append("  "); _EL_     } _EL_   } _EL_   if (tree.isLeaf() || tree.isPreTerminal()) { _EL_     renderFlat(tree,sb); _EL_     return; _EL_   } _EL_   sb.append(\'(\'); _EL_   sb.append(tree.getLabel()); _EL_   renderChildren(tree.getChildren(),indent + 1,false,sb); _EL_   sb.append(\')\'); _EL_ } _EL_ ', 'public static StringBuffer replaceRegex(StringBuffer original,String regex,String replace,boolean CASE_INSENSITIVE){ _EL_   int flags=0; _EL_   if (CASE_INSENSITIVE)   flags=Pattern.CASE_INSENSITIVE; _EL_   Pattern p=Pattern.compile(regex,flags); _EL_   Matcher m=p.matcher(original); _EL_   StringBuffer newSB=new StringBuffer(); _EL_   boolean result=m.find(); _EL_   while (result) { _EL_     m.appendReplacement(newSB,replace); _EL_     result=m.find(); _EL_   } _EL_   m.appendTail(newSB); _EL_   return newSB; _EL_ } _EL_ ', 'public boolean equalsChars(String a,int ai,String b,int bi,boolean ignoreCase){ _EL_   char ca=a.charAt(ai); _EL_   char cb=b.charAt(bi); _EL_   if (ignoreCase) { _EL_     ca=Character.toUpperCase(ca); _EL_     cb=Character.toUpperCase(cb); _EL_   } _EL_   return ca == cb; _EL_ } _EL_ ', 'private void adjustBackingFileLength(byte[] buffer,long index) throws IOException { _EL_   if (buffer == null || buffer.length == 0) { _EL_     throw new IOException("Buffer null or empty!"); _EL_   } _EL_   long newsize=fHeader.headerSize() + (index * CHUNK_ENC_SIZE) + CHUNK_IV_SIZE+ buffer.length+ CHUNK_TLEN; _EL_   if (newsize > realLength()) { _EL_     backingRandomAccessFile.setLength(newsize); _EL_   } _EL_ } _EL_ ', '@Override public void run(int connID,String[] args){ _EL_   if (args.length == 1) { _EL_     server.sendServerChat(connID,"Server Side nova command"); _EL_     server.sendServerChat(connID,"/nova print : will print all of your current nova networks and unlinked units."); _EL_     server.sendServerChat(connID,"/nova print id : will print the network status for the Unit with ID id."); _EL_     server.sendServerChat(connID,"/nova link id1 id2 : will link the units with ID id1 and id2."); _EL_     server.sendServerChat(connID,"+++Will Disconnect them from all prior nets."); _EL_     server.sendServerChat(connID,"/nova link id1 id2 id3 : will link the three units with ID id1 id2 and id3."); _EL_     server.sendServerChat(connID,"+++Will Disconnect them from all prior nets."); _EL_     server.sendServerChat(connID,"/nova unlink : will unlink all your novaCEWS units."); _EL_     server.sendServerChat(connID,"/nova unlink id : will unlink unit with ID id from all nova networks."); _EL_   } _EL_   try { _EL_     if (args.length > 1) { _EL_       String cmd=args[1]; _EL_       if (cmd.equalsIgnoreCase("print")) { _EL_         if (args.length > 2) { _EL_           int id=Integer.parseInt(args[2]); _EL_           server.sendServerChat(connID,strListNetwork(connID,id,true)); _EL_         } _EL_  else { _EL_           server.sendServerChat(connID,strListNetworks(connID,true)); _EL_         } _EL_       } _EL_  else       if (cmd.equalsIgnoreCase("printcurrent")) { _EL_         if (args.length > 2) { _EL_           int id=Integer.parseInt(args[2]); _EL_           server.sendServerChat(connID,strListNetwork(connID,id,false)); _EL_         } _EL_  else { _EL_           server.sendServerChat(connID,strListNetworks(connID,false)); _EL_         } _EL_       } _EL_  else       if (cmd.equalsIgnoreCase("debug")) { _EL_         debug(connID,server); _EL_       } _EL_  else       if (cmd.equalsIgnoreCase("link")) { _EL_         if (args.length > 4) { _EL_           int id1=Integer.parseInt(args[2]); _EL_           int id2=Integer.parseInt(args[3]); _EL_           int id3=Integer.parseInt(args[4]); _EL_           server.sendServerChat(connID,strLink3(connID,id1,id2,id3)); _EL_         } _EL_  else         if (args.length > 3) { _EL_           int id1=Integer.parseInt(args[2]); _EL_           int id2=Integer.parseInt(args[3]); _EL_           server.sendServerChat(connID,strLink2(connID,id1,id2)); _EL_         } _EL_       } _EL_  else       if (cmd.equalsIgnoreCase("unlink")) { _EL_         if (args.length > 2) { _EL_           int id=Integer.parseInt(args[2]); _EL_           server.sendServerChat(connID,strUnlinkID(connID,id)); _EL_         } _EL_  else { _EL_           server.sendServerChat(connID,strUnlinkAll(connID)); _EL_         } _EL_       } _EL_  else { _EL_         String failstr=args[0]; _EL_         for (int i=1; i < args.length; i++) { _EL_           failstr+=" " + args[i]; _EL_         } _EL_         server.sendServerChat(connID,"I do not understand " + failstr + ". /nova for help.\\n"); _EL_       } _EL_     } _EL_   } _EL_  catch (  NumberFormatException nfe) { _EL_     server.sendServerChat(connID,"Error parsing the command. NFE"); _EL_   } _EL_ catch (  NullPointerException npe) { _EL_     server.sendServerChat(connID,"Error parsing the command. NPE"); _EL_   } _EL_ catch (  IndexOutOfBoundsException ioobe) { _EL_     server.sendServerChat(connID,"Error parsing the command. IOOBE"); _EL_   } _EL_ } _EL_ ', 'private char[] parseEntityReference() throws IOException { _EL_   int pos=strpos; _EL_   if ((ch=readCh()) == \'#\') { _EL_     int n=0; _EL_     ch=readCh(); _EL_     if ((ch >= \'0\') && (ch <= \'9\') || ch == \'x\' || ch == \'X\') { _EL_       if ((ch >= \'0\') && (ch <= \'9\')) { _EL_         while ((ch >= \'0\') && (ch <= \'9\')) { _EL_           n=(n * 10) + ch - \'0\'; _EL_           ch=readCh(); _EL_         } _EL_       } _EL_  else { _EL_         ch=readCh(); _EL_         char lch=(char)Character.toLowerCase(ch); _EL_         while ((lch >= \'0\') && (lch <= \'9\') || (lch >= \'a\') && (lch <= \'f\')) { _EL_           if (lch >= \'0\' && lch <= \'9\') { _EL_             n=(n * 16) + lch - \'0\'; _EL_           } _EL_  else { _EL_             n=(n * 16) + lch - \'a\' + 10; _EL_           } _EL_           ch=readCh(); _EL_           lch=(char)Character.toLowerCase(ch); _EL_         } _EL_       } _EL_ switch (ch) { _EL_ case \'\\n\': _EL_         ln++; _EL_       ch=readCh(); _EL_     lfCount++; _EL_   break; _EL_ case \'\\r\': _EL_ ln++; _EL_ if ((ch=readCh()) == \'\\n\') { _EL_ ch=readCh(); _EL_ crlfCount++; _EL_ } _EL_  else { _EL_ crCount++; _EL_ } _EL_ break; _EL_ case \';\': _EL_ ch=readCh(); _EL_ break; _EL_ } _EL_ char data[]=mapNumericReference(n); _EL_ return data; _EL_ } _EL_ addString(\'#\'); _EL_ if (!parseIdentifier(false)) { _EL_ error("ident.expected"); _EL_ strpos=pos; _EL_ char data[]={\'&\',\'#\'}; _EL_ return data; _EL_ } _EL_ } _EL_  else if (!parseIdentifier(false)) { _EL_ char data[]={\'&\'}; _EL_ return data; _EL_ } _EL_ boolean semicolon=false; _EL_ switch (ch) { _EL_ case \'\\n\': _EL_ ln++; _EL_ ch=readCh(); _EL_ lfCount++; _EL_ break; _EL_ case \'\\r\': _EL_ ln++; _EL_ if ((ch=readCh()) == \'\\n\') { _EL_ ch=readCh(); _EL_ crlfCount++; _EL_ } _EL_  else { _EL_ crCount++; _EL_ } _EL_ break; _EL_ case \';\': _EL_ semicolon=true; _EL_ ch=readCh(); _EL_ break; _EL_ } _EL_ String nm=getString(pos); _EL_ Entity ent=dtd.getEntity(nm); _EL_ if (!strict && (ent == null)) { _EL_ ent=dtd.getEntity(nm.toLowerCase()); _EL_ } _EL_ if ((ent == null) || !ent.isGeneral()) { _EL_ if (nm.length() == 0) { _EL_ error("invalid.entref",nm); _EL_ return new char[0]; _EL_ } _EL_ String str="&" + nm + (semicolon ? ";" : ""); _EL_ char b[]=new char[str.length()]; _EL_ str.getChars(0,b.length,b,0); _EL_ return b; _EL_ } _EL_ return ent.getData(); _EL_ } _EL_ ', 'private static String createJsMethodInvocationExpression(String methodName,boolean isStatic,String... paramNames){ _EL_   StringBuilder sb=new StringBuilder(); _EL_   sb.append(isStatic ? WND : THIS); _EL_   sb.append("."); _EL_   sb.append(methodName); _EL_   sb.append("("); _EL_   for (int i=0; i < paramNames.length; i++) { _EL_     if (i != 0) { _EL_       sb.append(", "); _EL_     } _EL_     sb.append(paramNames[i]); _EL_   } _EL_   sb.append(");"); _EL_   return sb.toString(); _EL_ } _EL_ ', 'public void doDoubleClickAction(){ _EL_   doDoubleClickAction(null); _EL_ } _EL_ ', 'public static Node serializableInstance(){ _EL_   return new GraphNode("X"); _EL_ } _EL_ ', 'protected void dropTables(List<String> dropTableNames,SQLiteDatabase db){ _EL_   if (dropTableNames != null && !dropTableNames.isEmpty()) { _EL_     String[] dropTableSQLS=new String[dropTableNames.size()]; _EL_     for (int i=0; i < dropTableSQLS.length; i++) { _EL_       dropTableSQLS[i]=generateDropTableSQL(dropTableNames.get(i)); _EL_     } _EL_     execute(dropTableSQLS,db); _EL_   } _EL_ } _EL_ ', 'private Segment createDiskSegment(SegmentDescriptor descriptor){ _EL_   File segmentFile=SegmentFile.createSegmentFile(name,storage.directory(),descriptor.id(),descriptor.version()); _EL_   Buffer buffer=FileBuffer.allocate(segmentFile,Math.min(DEFAULT_BUFFER_SIZE,descriptor.maxSegmentSize()),Integer.MAX_VALUE); _EL_   descriptor.copyTo(buffer); _EL_   Segment segment=new Segment(new SegmentFile(segmentFile),buffer.slice(),descriptor,createIndex(descriptor),new OffsetPredicate(),serializer.clone(),this); _EL_   LOGGER.debug("Created segment: {}",segment); _EL_   return segment; _EL_ } _EL_ ', 'public Boolean exists(String email){ _EL_   for (  Person person : people) { _EL_     if (email.equals(person.getEmail())) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void assertURIEquals(String assertID,String scheme,String path,String host,String file,String name,String query,String fragment,Boolean isAbsolute,String actual){ _EL_   assertNotNull(assertID,actual); _EL_   String uri=actual; _EL_   int lastPound=actual.lastIndexOf("#"); _EL_   String actualFragment=""; _EL_   if (lastPound != -1) { _EL_     uri=actual.substring(0,lastPound); _EL_     actualFragment=actual.substring(lastPound + 1); _EL_   } _EL_   if (fragment != null) { _EL_     assertEquals(assertID,fragment,actualFragment); _EL_   } _EL_   int lastQuestion=uri.lastIndexOf("?"); _EL_   String actualQuery=""; _EL_   if (lastQuestion != -1) { _EL_     uri=actual.substring(0,lastQuestion); _EL_     actualQuery=actual.substring(lastQuestion + 1); _EL_   } _EL_   if (query != null) { _EL_     assertEquals(assertID,query,actualQuery); _EL_   } _EL_   int firstColon=uri.indexOf(":"); _EL_   int firstSlash=uri.indexOf("/"); _EL_   String actualPath=uri; _EL_   String actualScheme=""; _EL_   if (firstColon != -1 && firstColon < firstSlash) { _EL_     actualScheme=uri.substring(0,firstColon); _EL_     actualPath=uri.substring(firstColon + 1); _EL_   } _EL_   if (scheme != null) { _EL_     assertEquals(assertID,scheme,actualScheme); _EL_   } _EL_   if (path != null) { _EL_     assertEquals(assertID,path,actualPath); _EL_   } _EL_   if (host != null) { _EL_     String actualHost=""; _EL_     if (actualPath.startsWith("//")) { _EL_       int termSlash=actualPath.indexOf("/",2); _EL_       actualHost=actualPath.substring(0,termSlash); _EL_     } _EL_     assertEquals(assertID,host,actualHost); _EL_   } _EL_   String actualFile=actualPath; _EL_   if (file != null || name != null) { _EL_     int finalSlash=actualPath.lastIndexOf("/"); _EL_     if (finalSlash != -1) { _EL_       actualFile=actualPath.substring(finalSlash + 1); _EL_     } _EL_     if (file != null) { _EL_       assertEquals(assertID,file,actualFile); _EL_     } _EL_   } _EL_   if (name != null) { _EL_     String actualName=actualFile; _EL_     int finalPeriod=actualFile.lastIndexOf("."); _EL_     if (finalPeriod != -1) { _EL_       actualName=actualFile.substring(0,finalPeriod); _EL_     } _EL_     assertEquals(assertID,name,actualName); _EL_   } _EL_   if (isAbsolute != null) { _EL_     assertEquals(assertID,isAbsolute.booleanValue(),actualPath.startsWith("/") || actualPath.startsWith("file:/")); _EL_   } _EL_ } _EL_ ', 'private double maxIgnoreNaN(double a,double b){ _EL_   if (Double.isNaN(a)) { _EL_     return b; _EL_   } _EL_   if (Double.isNaN(b)) { _EL_     return a; _EL_   } _EL_  else { _EL_     return Math.max(a,b); _EL_   } _EL_ } _EL_ ', 'public void crabDownDirBlockForModification(BlockId blk){ _EL_   lockTbl.xLock(blk,txNum); _EL_   writenIndexBlks.add(blk); _EL_ } _EL_ ', 'private static void removeReferenceToConnection(final HttpConnectionWithReference connection){ _EL_ synchronized (REFERENCE_TO_CONNECTION_SOURCE) { _EL_     REFERENCE_TO_CONNECTION_SOURCE.remove(connection.reference); _EL_   } _EL_ } _EL_ ', 'public VacuumEnvironment(){ _EL_   Random r=new Random(); _EL_   envState=new VacuumEnvironmentState(0 == r.nextInt(2) ? LocationState.Clean : LocationState.Dirty,0 == r.nextInt(2) ? LocationState.Clean : LocationState.Dirty); _EL_ } _EL_ ', 'public void generate(BatchEnvironment env,ClassDefinition cdef,File destDir){ _EL_   RemoteClass remoteClass=RemoteClass.forClass(env,cdef); _EL_   if (remoteClass == null)   return; _EL_   RMIGenerator gen; _EL_   try { _EL_     gen=new RMIGenerator(env,cdef,destDir,remoteClass,version); _EL_   } _EL_  catch (  ClassNotFound e) { _EL_     env.error(0,"rmic.class.not.found",e.name); _EL_     return; _EL_   } _EL_   gen.generate(); _EL_ } _EL_ ', 'public BaseViewHolder addOnLongClickListener(int viewId){ _EL_   itemChildLongClickViewIds.add(viewId); _EL_   return this; _EL_ } _EL_ ', 'public void remove(final CreatureRespawnPoint point){ _EL_   respawnPoints.remove(point); _EL_ } _EL_ ', 'public Photo(File d,File f) throws IOException, NumberFormatException { _EL_   ExtendedExifInterface exif=new ExtendedExifInterface(f.toString()); _EL_   String lonStr=exif.getAttribute(ExifInterface.TAG_GPS_LONGITUDE); _EL_   if (lonStr == null) { _EL_     throw new IOException("No EXIF tag"); _EL_   } _EL_   float lonf=convertToDegree(lonStr); _EL_   String lonRef=exif.getAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF); _EL_   if (lonRef != null && !lonRef.equals("E")) { _EL_     lonf=-lonf; _EL_   } _EL_   float latf=convertToDegree(exif.getAttribute(ExifInterface.TAG_GPS_LATITUDE)); _EL_   String latRef=exif.getAttribute(ExifInterface.TAG_GPS_LATITUDE_REF); _EL_   if (latRef != null && !latRef.equals("N")) { _EL_     latf=-latf; _EL_   } _EL_   lat=(int)(latf * 1E7d); _EL_   lon=(int)(lonf * 1E7d); _EL_   Log.d("Photo","lat: " + lat + " lon: "+ lon); _EL_   ref=d.getAbsolutePath() + "/" + f.getName(); _EL_   String dir=exif.getAttribute(ExtendedExifInterface.TAG_GPS_IMG_DIRECTION); _EL_   if (dir != null) { _EL_     direction=(int)Double.parseDouble(dir); _EL_     directionRef=exif.getAttribute(ExtendedExifInterface.TAG_GPS_IMG_DIRECTION_REF); _EL_     Log.d("Photo","dir " + dir + " direction "+ direction+ " ref "+ directionRef); _EL_   } _EL_ } _EL_ ', 'public static long bytesToLong(final byte[] bytes){ _EL_   final ByteBuffer buffer=ByteBuffer.allocate(8); _EL_   buffer.put(bytes,0,8); _EL_   buffer.flip(); _EL_   return buffer.getLong(); _EL_ } _EL_ ', '@Override public void mouseEntered(MouseEvent evt){ _EL_   delegate.mouseMoved(evt); _EL_ } _EL_ ', "public static String removeFormatting(String line){ _EL_   int length=line.length(); _EL_   StringBuilder buffer=new StringBuilder(); _EL_   for (int i=0; i < length; i++) { _EL_     char ch=line.charAt(i); _EL_     if (ch != '\\u000f' && ch != '\\u0002' && ch != '\\u001f' && ch != '\\u0016')     buffer.append(ch); _EL_   } _EL_   return buffer.toString(); _EL_ } _EL_ ", 'public void print(){ _EL_   Object[] iterChargingTimes=chargingTimes.toArray(); _EL_   Arrays.sort(iterChargingTimes); _EL_   for (int i=0; i < iterChargingTimes.length; i++) { _EL_     ChargeLog curItem=(ChargeLog)iterChargingTimes[i]; _EL_     curItem.print(); _EL_   } _EL_ } _EL_ ', 'public boolean isEmpty(){ _EL_   return rdns.isEmpty(); _EL_ } _EL_ ', 'public ServiceConfig createOrganizationConfig(String orgName,Map attrs) throws SMSException, SSOException { _EL_   validateSSM(); _EL_   ServiceSchemaImpl ss=ssm.getSchema(SchemaType.ORGANIZATION); _EL_   if (ss == null) { _EL_     String[] args={serviceName}; _EL_     throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-service-does-not-have-org-schema",args)); _EL_   } _EL_   String orgdn=DNMapper.orgNameToDN(orgName); _EL_   CreateServiceConfig.checkBaseNodesForOrg(token,orgdn,serviceName,version); _EL_   String orgDN=scm.constructServiceConfigDN(SMSUtils.DEFAULT,CreateServiceConfig.ORG_CONFIG_NODE,orgdn); _EL_   try { _EL_     CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,orgDN); _EL_     if (cEntry.isDirty()) { _EL_       cEntry.refresh(); _EL_     } _EL_     if (cEntry.isNewEntry()) { _EL_       CreateServiceConfig.createSubConfigEntry(token,orgDN,ss,null,null,attrs,orgName); _EL_       if (ServiceManager.isCoexistenceMode()) { _EL_         String smsDN=DNMapper.orgNameToDN(orgName); _EL_         OrgConfigViaAMSDK amsdk=new OrgConfigViaAMSDK(token,DNMapper.realmNameToAMSDKName(smsDN),smsDN); _EL_         amsdk.assignService(serviceName); _EL_       } _EL_     } _EL_  else     if (attrs != null && !attrs.isEmpty()) { _EL_       ServiceConfig sc=getOrganizationConfig(orgName,null); _EL_       sc.setAttributes(attrs); _EL_     } _EL_   } _EL_  catch (  ServiceAlreadyExistsException slee) { _EL_   } _EL_   return (getOrganizationConfig(orgName,null)); _EL_ } _EL_ ', 'public void deleteAuthenticationDomain(String realm,String cotName) throws AMConsoleException { _EL_   String[] param={realm,cotName}; _EL_   logEvent("ATTEMPT_DELETE_AUTH_DOMAINS",param); _EL_   try { _EL_     CircleOfTrustManager manager=getCircleOfTrustManager(); _EL_     manager.deleteCircleOfTrust(realm,cotName); _EL_     logEvent("SUCCEED_DELETE_AUTH_DOMAIN",param); _EL_   } _EL_  catch (  COTException e) { _EL_     String strError=getErrorString(e); _EL_     String[] paramsEx={realm,cotName,strError}; _EL_     logEvent("FEDERATION_EXCEPTION_DELETE_AUTH_DOMAIN",paramsEx); _EL_     throw new AMConsoleException(strError); _EL_   } _EL_ } _EL_ ', 'void eventPreModify(ActionType type,long position,boolean isSingle){ _EL_   if (type != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && actionExclusiveEnd() != position || type == ActionType.DELETE && actionPosition() != position && actionPosition() - 1L != position) { _EL_     startAction(type,isSingle); _EL_   } _EL_  else { _EL_     isBackspace=actionPosition() > position; _EL_   } _EL_   if (isSingle && type == ActionType.INSERT) { _EL_     updateNewRange(position); _EL_     previousTime=System.currentTimeMillis(); _EL_   } _EL_ } _EL_ ', 'private byte[] decodePEM(InputStream inStream,byte[] boundary_suffix) throws IOException { _EL_   int ch; _EL_   for (int i=1; i < PEM_BEGIN.length; ++i) { _EL_     if (PEM_BEGIN[i] != (ch=inStream.read())) { _EL_       throw new IOException("Incorrect PEM encoding: \'-----BEGIN" + ((boundary_suffix == null) ? "" : new String(boundary_suffix)) + "\' is expected as opening delimiter boundary."); _EL_     } _EL_   } _EL_   if (boundary_suffix == null) { _EL_     while ((ch=inStream.read()) != \'\\n\') { _EL_       if (ch == -1) { _EL_         throw new IOException("Incorrect PEM encoding: EOF before content"); _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     for (int i=0; i < boundary_suffix.length; i++) { _EL_       if (boundary_suffix[i] != inStream.read()) { _EL_         throw new IOException("Incorrect PEM encoding: \'-----BEGIN" + new String(boundary_suffix) + "\' is expected as opening delimiter boundary."); _EL_       } _EL_     } _EL_     if ((ch=inStream.read()) == \'\\r\') { _EL_       ch=inStream.read(); _EL_     } _EL_     if (ch != \'\\n\') { _EL_       throw new IOException("Incorrect PEM encoding: newline expected after " + "opening delimiter boundary"); _EL_     } _EL_   } _EL_   int size=1024; _EL_   byte[] buff=new byte[size]; _EL_   int index=0; _EL_   while ((ch=inStream.read()) != \'-\') { _EL_     if (ch == -1) { _EL_       throw new IOException("Incorrect Base64 encoding: EOF without closing delimiter"); _EL_     } _EL_     buff[index++]=(byte)ch; _EL_     if (index == size) { _EL_       byte[] newbuff=new byte[size + 1024]; _EL_       System.arraycopy(buff,0,newbuff,0,size); _EL_       buff=newbuff; _EL_       size+=1024; _EL_     } _EL_   } _EL_   if (buff[index - 1] != \'\\n\') { _EL_     throw new IOException("Incorrect Base64 encoding: newline expected before " + "closing boundary delimiter"); _EL_   } _EL_   for (int i=1; i < PEM_END.length; ++i) { _EL_     if (PEM_END[i] != inStream.read()) { _EL_       throw badEnd(boundary_suffix); _EL_     } _EL_   } _EL_   if (boundary_suffix == null) { _EL_     while (((ch=inStream.read()) != -1) && (ch != \'\\n\') && (ch != \'\\r\')) { _EL_     } _EL_   } _EL_  else { _EL_     for (int i=0; i < boundary_suffix.length; i++) { _EL_       if (boundary_suffix[i] != inStream.read()) { _EL_         throw badEnd(boundary_suffix); _EL_       } _EL_     } _EL_   } _EL_   inStream.mark(1); _EL_   while (((ch=inStream.read()) != -1) && (ch == \'\\n\' || ch == \'\\r\')) { _EL_     inStream.mark(1); _EL_   } _EL_   inStream.reset(); _EL_   buff=Base64.decode(buff,index); _EL_   if (buff == null) { _EL_     throw new IOException("Incorrect Base64 encoding"); _EL_   } _EL_   return buff; _EL_ } _EL_ ', 'public boolean markSupported(){ _EL_   return fInputStream.markSupported(); _EL_ } _EL_ ', 'public String resolveParentRelationName(String parentName,Object parent,String childName,Object child){ _EL_   return parentName; _EL_ } _EL_ ', 'public ByteColumn(int nrows,int capacity,byte defaultValue){ _EL_   super(byte.class,new Byte(defaultValue)); _EL_   if (capacity < nrows) { _EL_     throw new IllegalArgumentException("Capacity value can not be less than the row count."); _EL_   } _EL_   m_values=new byte[capacity]; _EL_   Arrays.fill(m_values,defaultValue); _EL_   m_size=nrows; _EL_ } _EL_ ', 'public RelNode convertSelect(SqlSelect select,boolean top){ _EL_   final SqlValidatorScope selectScope=validator.getWhereScope(select); _EL_   final Blackboard bb=createBlackboard(selectScope,null,top); _EL_   convertSelectImpl(bb,select); _EL_   return bb.root; _EL_ } _EL_ ', 'public static Object executeScript(String filePath,String functionName,Map<String,Object> context){ _EL_   return executeScript(filePath,functionName,context,new Object[]{context}); _EL_ } _EL_ ', 'public XercesHTML2DocumentBuilderFactory(DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException { _EL_   super(settings); _EL_   try { _EL_     ClassLoader classLoader=ClassLoader.getSystemClassLoader(); _EL_     Class htmlBuilderClass=classLoader.loadClass("org.apache.html2.dom.HTMLBuilder"); _EL_     htmlBuilderConstructor=htmlBuilderClass.getConstructor(NO_CLASSES); _EL_     getHTMLDocumentMethod=htmlBuilderClass.getMethod("getHTMLDocument",NO_CLASSES); _EL_     Class htmlDOMImpl=classLoader.loadClass("org.apache.html2.dom.HTMLDOMImplementationImpl"); _EL_     Method method=htmlDOMImpl.getMethod("getHTMLDOMImplementation",NO_CLASSES); _EL_     domImpl=(DOMImplementation)method.invoke(null,NO_OBJECTS); _EL_     Class saxFactoryClass=classLoader.loadClass("org.apache.xerces.jaxp.SAXParserFactoryImpl"); _EL_     factory=(SAXParserFactory)saxFactoryClass.newInstance(); _EL_   } _EL_  catch (  InvocationTargetException ex) { _EL_     throw new DOMTestIncompatibleException(ex.getTargetException(),null); _EL_   } _EL_ catch (  Exception ex) { _EL_     throw new DOMTestIncompatibleException(ex,null); _EL_   } _EL_   if (settings != null) { _EL_     for (int i=0; i < settings.length; i++) { _EL_     } _EL_   } _EL_   try { _EL_     factory.newSAXParser(); _EL_   } _EL_  catch (  ParserConfigurationException ex) { _EL_     throw new DOMTestIncompatibleException(ex,null); _EL_   } _EL_ catch (  SAXException ex) { _EL_     throw new DOMTestIncompatibleException(ex,null); _EL_   } _EL_ } _EL_ ', 'private static String formatSampleRate(int rate){ _EL_   return MHZ_FORMATTER.format((double)rate / 1E6d); _EL_ } _EL_ ', 'public final boolean isClosed(){ _EL_   return closed.get(); _EL_ } _EL_ ', 'TypeSimplifier(Types typeUtils,String packageName,Set<TypeMirror> types,TypeMirror base){ _EL_   this.typeUtils=typeUtils; _EL_   Set<TypeMirror> typesPlusBase=new TypeMirrorSet(types); _EL_   if (base != null) { _EL_     typesPlusBase.add(base); _EL_   } _EL_   Set<TypeMirror> referenced=referencedClassTypes(typeUtils,typesPlusBase); _EL_   Set<TypeMirror> defined=nonPrivateDeclaredTypes(typeUtils,base); _EL_   this.imports=findImports(typeUtils,packageName,referenced,defined); _EL_ } _EL_ ', 'public static byte[] escape(final byte[] bytes){ _EL_   final byte[] temp=new byte[2 * bytes.length]; _EL_   int currentPosition=0; _EL_   for (  final byte b : bytes) { _EL_     if (b == ESCAPE_CHAR) { _EL_       temp[currentPosition++]=ESCAPE_CHAR; _EL_       temp[currentPosition++]=REPLACEMENT_CHAR; _EL_     } _EL_  else     if (b == DELIMITER) { _EL_       temp[currentPosition++]=ESCAPE_CHAR; _EL_       temp[currentPosition++]=ESCAPE_CHAR; _EL_     } _EL_  else { _EL_       temp[currentPosition++]=b; _EL_     } _EL_   } _EL_   final byte[] escaped=new byte[currentPosition]; _EL_   System.arraycopy(temp,0,escaped,0,currentPosition); _EL_   return escaped; _EL_ } _EL_ ', 'protected void drawChartValuesText(Canvas canvas,XYSeries series,XYSeriesRenderer renderer,Paint paint,List<Float> points,int seriesIndex,int startIndex){ _EL_   if (points.size() > 1) { _EL_     float previousPointX=points.get(0); _EL_     float previousPointY=points.get(1); _EL_     for (int k=0; k < points.size(); k+=2) { _EL_       if (k == 2) { _EL_         if (Math.abs(points.get(2) - points.get(0)) > renderer.getDisplayChartValuesDistance() || Math.abs(points.get(3) - points.get(1)) > renderer.getDisplayChartValuesDistance()) { _EL_           drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(startIndex)),points.get(0),points.get(1) - renderer.getChartValuesSpacing(),paint,0); _EL_           drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(startIndex + 1)),points.get(2),points.get(3) - renderer.getChartValuesSpacing(),paint,0); _EL_           previousPointX=points.get(2); _EL_           previousPointY=points.get(3); _EL_         } _EL_       } _EL_  else       if (k > 2) { _EL_         if (Math.abs(points.get(k) - previousPointX) > renderer.getDisplayChartValuesDistance() || Math.abs(points.get(k + 1) - previousPointY) > renderer.getDisplayChartValuesDistance()) { _EL_           drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(startIndex + k / 2)),points.get(k),points.get(k + 1) - renderer.getChartValuesSpacing(),paint,0); _EL_           previousPointX=points.get(k); _EL_           previousPointY=points.get(k + 1); _EL_         } _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     for (int k=0; k < points.size(); k+=2) { _EL_       drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(startIndex + k / 2)),points.get(k),points.get(k + 1) - renderer.getChartValuesSpacing(),paint,0); _EL_     } _EL_   } _EL_ } _EL_ ', 'public MongoClient clientForMembers(ServerAddress... seeds){ _EL_   List<ServerAddress> addresses=new ArrayList<>(); _EL_   for (  ServerAddress seedAddress : seeds) { _EL_     if (seedAddress != null)     addresses.add(seedAddress); _EL_   } _EL_   return clientForMembers(addresses); _EL_ } _EL_ ', 'protected synchronized void engineSetSeed(byte[] seed){ _EL_   if (seed == null) { _EL_     throw new NullPointerException("seed == null"); _EL_   } _EL_   if (state == NEXT_BYTES) { _EL_     System.arraycopy(copies,HASHCOPY_OFFSET,this.seed,HASH_OFFSET,EXTRAFRAME_OFFSET); _EL_   } _EL_   state=SET_SEED; _EL_   if (seed.length != 0) { _EL_     updateSeed(seed); _EL_   } _EL_ } _EL_ ', 'public void generateClassFile(OutputStream os){ _EL_   ClassWriter cw=new SootASMClassWriter(ClassWriter.COMPUTE_FRAMES); _EL_   cv=cw; _EL_   generateByteCode(); _EL_   try { _EL_     os.write(cw.toByteArray()); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new RuntimeException("Could not write class file in the ASM-backend!",e); _EL_   } _EL_ } _EL_ ', 'private static boolean useCompactFontFormat(Map<String,Object> args,int compatibilityVersion){ _EL_   String value=(String)args.get(EMBEDASCFF); _EL_   boolean useCFF=true; _EL_   if (compatibilityVersion < MxmlConfiguration.VERSION_4_0)   useCFF=false; _EL_   if (value != null) { _EL_     useCFF=Boolean.parseBoolean(value.trim()); _EL_   } _EL_   return useCFF; _EL_ } _EL_ ', 'public static void main(String[] args){ _EL_   new GeneratorTester(args); _EL_ } _EL_ ', 'private String mosesize(String feature){ _EL_   if (joshuaConfiguration.moses) { _EL_     if (feature.startsWith("tm_") || feature.startsWith("lm_"))     return feature.replace("_","-"); _EL_   } _EL_   return feature; _EL_ } _EL_ ', 'public static int calcTextHeight(Paint paint,String demoText){ _EL_   Rect r=new Rect(); _EL_   paint.getTextBounds(demoText,0,demoText.length(),r); _EL_   return r.height(); _EL_ } _EL_ ', 'private void checkShutdown(){ _EL_ synchronized (mux) { _EL_     if (isBeingShutdown)     throw new RejectedExecutionException("Failed to execute command during executor shutdown."); _EL_   } _EL_ } _EL_ ', 'private static final void checkQueueForDependenciesAndExecuteUnblockedTasks(){ _EL_   List<ProgressThread> toRemove=new LinkedList<>(); _EL_ synchronized (LOCK) { _EL_     for (    ProgressThread pg : queuedThreads) { _EL_       if (!pg.isBlockedByDependencies()) { _EL_         if (!pg.isWaiting()) { _EL_           toRemove.add(pg); _EL_           EXECUTOR.execute(pg.makeWrapper()); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   for (  ProgressThread pg : toRemove) { _EL_ synchronized (LOCK) { _EL_       queuedThreads.remove(pg); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static void drawVerticalMarginIndicator(Graphics2D g,String text,int x,int y1,int y2){ _EL_   if (y1 > y2) { _EL_     int temp=y1; _EL_     y1=y2; _EL_     y2=temp; _EL_   } _EL_   if (text == null) { _EL_     g.drawLine(x,y1,x,y2); _EL_     g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE); _EL_     g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE); _EL_     g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE); _EL_     g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE); _EL_     return; _EL_   } _EL_   Canvas c=new Canvas(); _EL_   FontMetrics fm=c.getFontMetrics(sFont); _EL_   g.setFont(sFont); _EL_   int padding=4; _EL_   Rectangle2D bounds=fm.getStringBounds(text,g); _EL_   int th=(int)bounds.getHeight(); _EL_   int offset=3 * CONNECTION_ARROW_SIZE; _EL_   int h=((y2 - y1) - (th + 2 * padding)) / 2; _EL_   if (h <= padding) { _EL_     g.drawLine(x,y1,x,y2); _EL_     g.drawString(text,(int)(x - bounds.getWidth() / 2) + offset,y2 - h - padding); _EL_     g.drawLine(x - CONNECTION_ARROW_SIZE,y1,x + CONNECTION_ARROW_SIZE,y1); _EL_     g.drawLine(x - CONNECTION_ARROW_SIZE,y2,x + CONNECTION_ARROW_SIZE,y2); _EL_   } _EL_  else { _EL_     g.drawLine(x,y1,x,y1 + h); _EL_     g.drawLine(x,y2 - h,x,y2); _EL_     g.drawString(text,(int)(x - bounds.getWidth() / 2),y2 - h - padding); _EL_     g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE); _EL_     g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE); _EL_     g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE); _EL_     g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE); _EL_   } _EL_ } _EL_ ', 'public void fireIndexedPropertyChange(String propertyName,int index,boolean oldValue,boolean newValue){ _EL_   if (oldValue != newValue) { _EL_     fireIndexedPropertyChange(propertyName,index,Boolean.valueOf(oldValue),Boolean.valueOf(newValue)); _EL_   } _EL_ } _EL_ ', 'protected void removeMarkers(){ _EL_   for (int i=markerImage.size(); i > 0; i--) { _EL_     LocoIcon il=markerImage.get(i - 1); _EL_     if ((il != null) && (il.isActive())) { _EL_       markerImage.remove(i - 1); _EL_       il.remove(); _EL_       il.dispose(); _EL_       setDirty(true); _EL_     } _EL_   } _EL_   super.removeMarkers(); _EL_   repaint(); _EL_ } _EL_ ', "public IElementType captureString(){ _EL_   CharSequence buffer=getBuffer(); _EL_   int currentPosition=getTokenEnd(); _EL_   setTokenStart(currentPosition); _EL_   int bufferEnd=getBufferEnd(); _EL_   char openQuote=buffer.charAt(currentPosition); _EL_   char closeQuote=RegexBlock.getQuoteCloseChar(openQuote); _EL_   boolean quotesDiffer=openQuote != closeQuote; _EL_   boolean isEscaped=false; _EL_   int quotesDepth=0; _EL_   currentPosition++; _EL_   while (currentPosition < bufferEnd) { _EL_     char currentChar=buffer.charAt(currentPosition); _EL_     if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) { _EL_       break; _EL_     } _EL_     if (!isEscaped && quotesDiffer) { _EL_       if (currentChar == openQuote) { _EL_         quotesDepth++; _EL_       } _EL_  else       if (currentChar == closeQuote) { _EL_         quotesDepth--; _EL_       } _EL_     } _EL_     isEscaped=!isEscaped && currentChar == '\\\\'; _EL_     currentPosition++; _EL_   } _EL_   if (currentPosition < bufferEnd) { _EL_     currentPosition++; _EL_   } _EL_   setTokenEnd(currentPosition); _EL_   PerlStringLexer stringLexer=getStringLexer(); _EL_   popState(); _EL_   preparsedTokensList.addAll(lexCurrentToken(stringLexer)); _EL_   return getPreParsedToken(); _EL_ } _EL_ ", 'public static String toLocalizedInteger(long value){ _EL_   return NUMBER_FORMAT0.format(value); _EL_ } _EL_ ', 'void checkFrameValue(final Object value){ _EL_   if (value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS) { _EL_     return; _EL_   } _EL_   if (value instanceof String) { _EL_     checkInternalName((String)value,"Invalid stack frame value"); _EL_     return; _EL_   } _EL_   if (!(value instanceof Label)) { _EL_     throw new IllegalArgumentException("Invalid stack frame value: " + value); _EL_   } _EL_  else { _EL_     usedLabels.add((Label)value); _EL_   } _EL_ } _EL_ ', 'private Map<String,List<Zone>> selectZonesForInitiatorsAndPorts(NetworkLite network,Map<String,List<Zone>> wwnToZones,Map<String,StoragePort> initiatorPortsMap){ _EL_   Map<String,List<Zone>> filteredMap=new HashMap<String,List<Zone>>(); _EL_   Zone zone=null; _EL_   List<Zone> zones=null; _EL_   for (  String initiatorWwn : wwnToZones.keySet()) { _EL_     for (    String portWwn : initiatorPortsMap.keySet()) { _EL_       zone=_networkScheduler.selectExistingZoneForInitiatorPort(network,initiatorWwn,portWwn,wwnToZones.get(initiatorWwn)); _EL_       if (zone != null) { _EL_         zones=filteredMap.get(initiatorWwn); _EL_         if (zones == null) { _EL_           zones=new ArrayList<>(); _EL_           filteredMap.put(initiatorWwn,zones); _EL_         } _EL_         zones.add(zone); _EL_       } _EL_     } _EL_   } _EL_   return filteredMap; _EL_ } _EL_ ', 'private void writeJarPostResource(Element postResourceEl,String path){ _EL_   postResourceEl.setAttribute("className",JAR_RESOURCE_SET); _EL_   postResourceEl.setAttribute("base",path.replace("&","&amp;")); _EL_ } _EL_ ', 'public void closeFile() throws IOException { _EL_   file.close(); _EL_   file=null; _EL_ } _EL_ ', 'public TypedEventListener(EventListener<E> wrappedListener,Class<E> eventClass){ _EL_   this.eventClass=eventClass; _EL_   this.wrappedListener=wrappedListener; _EL_ } _EL_ ', 'public static List<? extends Node> childNodeList(Node node){ _EL_   if (node == null)   return null; _EL_   List<Node> nodes=new LinkedList<Node>(); _EL_   do { _EL_     if (node.getNodeType() == Node.ELEMENT_NODE || node.getNodeType() == Node.COMMENT_NODE) { _EL_       nodes.add(node); _EL_     } _EL_   } _EL_  while ((node=node.getNextSibling()) != null); _EL_   return nodes; _EL_ } _EL_ ', 'public static Corleone context(String jobContext){ _EL_   if (jobContext == null || jobContext.equals("")) { _EL_     throw new IllegalArgumentException("Job context must not be null or empty."); _EL_   } _EL_   contexts.clear(); _EL_   contexts.add(jobContext); _EL_   return getInstance(); _EL_ } _EL_ ', 'public void addMethod(SootMethod m){ _EL_   checkLevel(SIGNATURES); _EL_   if (m.isDeclared())   throw new RuntimeException("already declared: " + m.getName()); _EL_   if (subSigToMethods.get(m.getNumberedSubSignature()) != null) { _EL_     throw new RuntimeException("Attempting to add method " + m.getSubSignature() + " to class "+ this+ ", but the class already has a method with that signature."); _EL_   } _EL_   subSigToMethods.put(m.getNumberedSubSignature(),m); _EL_   methodList.add(m); _EL_   m.setDeclared(true); _EL_   m.setDeclaringClass(this); _EL_ } _EL_ ', 'private void addReplicationFactor(Operation op){ _EL_   op.addRequestHeader(Operation.REPLICATION_QUORUM_HEADER,Operation.REPLICATION_QUORUM_HEADER_VALUE_ALL); _EL_ } _EL_ ', 'private static Frame showInitialSplash(){ _EL_   Frame splashFrame=null; _EL_   Image image=null; _EL_   URL imageURL=getChosenSplashURL(); _EL_   if (imageURL != null) { _EL_     try { _EL_       image=ImageIO.read(imageURL); _EL_     } _EL_  catch (    IOException e) { _EL_       e.printStackTrace(); _EL_     } _EL_     if (image != null) { _EL_       splashFrame=AWTSplashWindow.splash(image); _EL_     } _EL_   } _EL_   return splashFrame; _EL_ } _EL_ ', "protected void decodeLineSuffix(PushbackInputStream inStream,OutputStream outStream) throws IOException { _EL_   int c; _EL_   while (true) { _EL_     c=inStream.read(); _EL_     if (c == -1) { _EL_       throw new CEStreamExhausted(); _EL_     } _EL_     if (c == '\\n') { _EL_       break; _EL_     } _EL_     if (c == '\\r') { _EL_       c=inStream.read(); _EL_       if ((c != '\\n') && (c != -1)) { _EL_         inStream.unread(c); _EL_       } _EL_       break; _EL_     } _EL_   } _EL_ } _EL_ ", 'public void addTransaction(SIPServerTransaction serverTransaction) throws IOException { _EL_   if (isLoggingEnabled())   stackLogger.logDebug("added transaction " + serverTransaction); _EL_   serverTransaction.map(); _EL_   addTransactionHash(serverTransaction); _EL_ } _EL_ ', 'private float spacing(MotionEvent event){ _EL_   float x=event.getX(0) - event.getX(1); _EL_   float y=event.getY(0) - event.getY(1); _EL_   return (float)Math.sqrt(x * x + y * y); _EL_ } _EL_ ', 'public JKTagMapping(final String sourceQName,final String targetQName,final JKNamespace namespace){ _EL_   logger.info(String.format("creating TagMapping with sourceTag(%s) and (%s)",sourceQName,targetQName)); _EL_   this.sourceQName=sourceQName; _EL_   this.targetQName=targetQName; _EL_   this.namespace=namespace; _EL_   this.auto=true; _EL_ } _EL_ ', 'public static void print(Object x){ _EL_   out.print(x); _EL_   out.flush(); _EL_ } _EL_ ', '@Override public void stop(Runnable arg0){ _EL_   stop(); _EL_   arg0.run(); _EL_ } _EL_ ', 'private static void generateGraphFile(TransMeta transMeta,String graphFile) throws GraphGeneratorException { _EL_   DataOutputStream dos=null; _EL_   try { _EL_     String xml=transMeta.getXML(); _EL_     dos=new DataOutputStream(new FileOutputStream(new File(graphFile))); _EL_     dos.write(xml.getBytes(CarbonCommonConstants.DEFAULT_CHARSET)); _EL_   } _EL_  catch (  KettleException kettelException) { _EL_     throw new GraphGeneratorException("Error while getting the graph XML",kettelException); _EL_   } _EL_ catch (  FileNotFoundException e) { _EL_     throw new GraphGeneratorException("Unable to find the graph fileL",e); _EL_   } _EL_ catch (  UnsupportedEncodingException ue) { _EL_     throw new GraphGeneratorException("Error while Converting the graph xml string to bytes",ue); _EL_   } _EL_ catch (  IOException ioe) { _EL_     throw new GraphGeneratorException("Error while writing the graph file",ioe); _EL_   } _EL_  finally { _EL_     if (dos != null) { _EL_       try { _EL_         dos.close(); _EL_       } _EL_  catch (      IOException e) { _EL_         e.getMessage(); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public static void closeOutputStream(OutputStream stream,String tag){ _EL_   if (stream != null) { _EL_     try { _EL_       stream.close(); _EL_     } _EL_  catch (    IOException e) { _EL_       Log.e(tag,"Exception occured when closing ByteArrayOutputStream." + e); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void addPropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){ _EL_   beanContextChildSupport.addPropertyChangeListener(propertyName,in_pcl); _EL_ } _EL_ ', 'public void createEntityConfig(String realm,FederationConfigElement config) throws WSFederationMetaException { _EL_   String federationId=config.getFederationID(); _EL_   if (federationId == null) { _EL_     debug.error("WSFederationMetaManager.createEntityConfig: " + "entity ID is null"); _EL_     String[] data={realm}; _EL_     LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_ID_CREATE_ENTITY_CONFIG,data,null); _EL_     throw new WSFederationMetaException("empty_entityid",null); _EL_   } _EL_   if (realm == null) { _EL_     realm="/"; _EL_   } _EL_   String[] objs={federationId,realm}; _EL_   try { _EL_     Map attrs=WSFederationMetaUtils.convertJAXBToAttrMap(ATTR_ENTITY_CONFIG,config); _EL_     Map oldAttrs=configInst.getConfiguration(realm,federationId); _EL_     if (oldAttrs == null) { _EL_       LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_CREATE_ENTITY_CONFIG,objs,null); _EL_       throw new WSFederationMetaException("entity_descriptor_not_exist",objs); _EL_     } _EL_     Set oldValues=(Set)oldAttrs.get(ATTR_ENTITY_CONFIG); _EL_     if (oldValues != null && !oldValues.isEmpty()) { _EL_       LogUtil.error(Level.INFO,LogUtil.ENTITY_CONFIG_EXISTS,objs,null); _EL_       throw new WSFederationMetaException("entity_config_exists",objs); _EL_     } _EL_     configInst.setConfiguration(realm,federationId,attrs); _EL_     LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_CREATED,objs,null); _EL_     SPSSOConfigElement spconfig=getSPSSOConfig(realm,federationId); _EL_     if (spconfig != null) { _EL_       addToCircleOfTrust(spconfig,realm,federationId); _EL_     } _EL_     IDPSSOConfigElement idpconfig=getIDPSSOConfig(realm,federationId); _EL_     if (idpconfig != null) { _EL_       addToCircleOfTrust(idpconfig,realm,federationId); _EL_     } _EL_   } _EL_  catch (  ConfigurationException e) { _EL_     debug.error("WSFederationMetaManager.createEntityConfig:",e); _EL_     String[] data={e.getMessage(),federationId,realm}; _EL_     LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_ENTITY_CONFIG,data,null); _EL_     throw new WSFederationMetaException(e); _EL_   } _EL_ catch (  JAXBException jaxbe) { _EL_     debug.error("WSFederationMetaManager.createEntityConfig:",jaxbe); _EL_     LogUtil.error(Level.INFO,LogUtil.CREATE_INVALID_ENTITY_CONFIG,objs,null); _EL_     throw new WSFederationMetaException("invalid_config",objs); _EL_   } _EL_ } _EL_ ', 'private void loadUserInfoIntoActionBar(){ _EL_   if (!TextUtils.isEmpty(mWithUserImage)) { _EL_     Utils.loadCircularImage(getActivity(),mWithImageView,mWithUserImage,AvatarBitmapTransformation.AvatarSize.NORMAL); _EL_   } _EL_ } _EL_ ', 'public static Direction directionForArrowKey(KeyEvent e){ _EL_   int index=Math.max(0,Math.min(e.getKeyCode(),KeyEvent.VK_DOWN) - KeyEvent.VK_LEFT); _EL_   return Direction.values()[index]; _EL_ } _EL_ ', 'public TraceGraph(Collection<Span> spans){ _EL_   this.spansByParent=new SpansByParent(spans); _EL_   this.spansByTracerId=new SpansByTracerId(spans); _EL_ } _EL_ ', 'public static java.util.Date toDate(String monthStr,String dayStr,String yearStr,String hourStr,String minuteStr,String secondStr){ _EL_   int month, day, year, hour, minute, second; _EL_   try { _EL_     month=Integer.parseInt(monthStr); _EL_     day=Integer.parseInt(dayStr); _EL_     year=Integer.parseInt(yearStr); _EL_     hour=Integer.parseInt(hourStr); _EL_     minute=Integer.parseInt(minuteStr); _EL_     second=Integer.parseInt(secondStr); _EL_   } _EL_  catch (  Exception e) { _EL_     return null; _EL_   } _EL_   return toDate(month,day,year,hour,minute,second); _EL_ } _EL_ ', 'protected void handleMesosFailure(String taskId){ _EL_   int attempt=TaskUtils.getAttemptForTaskId(taskId); _EL_   BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId)); _EL_   boolean hasAttemptsLeft=attempt < container.retries; _EL_   if (hasAttemptsLeft) { _EL_     LOG.warning(String.format("Retrying task: %s, attempt: %d",container.name,attempt + 1)); _EL_     String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1); _EL_     scheduleNewTask(newTaskId); _EL_   } _EL_  else { _EL_     LOG.severe("Would not restart the job since it is beyond retries: " + attempt); _EL_   } _EL_ } _EL_ ', 'public static File findConfigInWorkingDirectory(){ _EL_   for (  final String suffix : SUFFIXES) { _EL_     final File configFile=new File(System.getProperty("user.dir"),PREFIX + suffix); _EL_     if (configFile.isFile()) { _EL_       return configFile; _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', '@Override public void drawRangeMarker(Graphics2D g2,XYPlot plot,ValueAxis rangeAxis,Marker marker,Rectangle2D dataArea){ _EL_   if (marker instanceof ValueMarker) { _EL_     ValueMarker vm=(ValueMarker)marker; _EL_     double value=vm.getValue(); _EL_     Range range=rangeAxis.getRange(); _EL_     if (!range.contains(value)) { _EL_       return; _EL_     } _EL_     double v=rangeAxis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge()); _EL_     PlotOrientation orientation=plot.getOrientation(); _EL_     Line2D line=null; _EL_     if (orientation == PlotOrientation.HORIZONTAL) { _EL_       line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY()); _EL_     } _EL_  else     if (orientation == PlotOrientation.VERTICAL) { _EL_       line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v); _EL_     } _EL_  else { _EL_       throw new IllegalStateException("Unrecognised orientation."); _EL_     } _EL_     final Composite originalComposite=g2.getComposite(); _EL_     g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha())); _EL_     g2.setPaint(marker.getPaint()); _EL_     g2.setStroke(marker.getStroke()); _EL_     g2.draw(line); _EL_     String label=marker.getLabel(); _EL_     RectangleAnchor anchor=marker.getLabelAnchor(); _EL_     if (label != null) { _EL_       Font labelFont=marker.getLabelFont(); _EL_       g2.setFont(labelFont); _EL_       Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,line.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor); _EL_       Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor()); _EL_       g2.setPaint(marker.getLabelBackgroundColor()); _EL_       g2.fill(r); _EL_       g2.setPaint(marker.getLabelPaint()); _EL_       TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor()); _EL_     } _EL_     g2.setComposite(originalComposite); _EL_   } _EL_  else   if (marker instanceof IntervalMarker) { _EL_     IntervalMarker im=(IntervalMarker)marker; _EL_     double start=im.getStartValue(); _EL_     double end=im.getEndValue(); _EL_     Range range=rangeAxis.getRange(); _EL_     if (!(range.intersects(start,end))) { _EL_       return; _EL_     } _EL_     double start2d=rangeAxis.valueToJava2D(start,dataArea,plot.getRangeAxisEdge()); _EL_     double end2d=rangeAxis.valueToJava2D(end,dataArea,plot.getRangeAxisEdge()); _EL_     double low=Math.min(start2d,end2d); _EL_     double high=Math.max(start2d,end2d); _EL_     PlotOrientation orientation=plot.getOrientation(); _EL_     Rectangle2D rect=null; _EL_     if (orientation == PlotOrientation.HORIZONTAL) { _EL_       low=Math.max(low,dataArea.getMinX()); _EL_       high=Math.min(high,dataArea.getMaxX()); _EL_       rect=new Rectangle2D.Double(low,dataArea.getMinY(),high - low,dataArea.getHeight()); _EL_     } _EL_  else     if (orientation == PlotOrientation.VERTICAL) { _EL_       low=Math.max(low,dataArea.getMinY()); _EL_       high=Math.min(high,dataArea.getMaxY()); _EL_       rect=new Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high - low); _EL_     } _EL_     final Composite originalComposite=g2.getComposite(); _EL_     g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha())); _EL_     Paint p=marker.getPaint(); _EL_     if (p instanceof GradientPaint) { _EL_       GradientPaint gp=(GradientPaint)p; _EL_       GradientPaintTransformer t=im.getGradientPaintTransformer(); _EL_       if (t != null) { _EL_         gp=t.transform(gp,rect); _EL_       } _EL_       g2.setPaint(gp); _EL_     } _EL_  else { _EL_       g2.setPaint(p); _EL_     } _EL_     g2.fill(rect); _EL_     if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) { _EL_       if (orientation == PlotOrientation.VERTICAL) { _EL_         Line2D line=new Line2D.Double(); _EL_         double x0=dataArea.getMinX(); _EL_         double x1=dataArea.getMaxX(); _EL_         g2.setPaint(im.getOutlinePaint()); _EL_         g2.setStroke(im.getOutlineStroke()); _EL_         if (range.contains(start)) { _EL_           line.setLine(x0,start2d,x1,start2d); _EL_           g2.draw(line); _EL_         } _EL_         if (range.contains(end)) { _EL_           line.setLine(x0,end2d,x1,end2d); _EL_           g2.draw(line); _EL_         } _EL_       } _EL_  else { _EL_         Line2D line=new Line2D.Double(); _EL_         double y0=dataArea.getMinY(); _EL_         double y1=dataArea.getMaxY(); _EL_         g2.setPaint(im.getOutlinePaint()); _EL_         g2.setStroke(im.getOutlineStroke()); _EL_         if (range.contains(start)) { _EL_           line.setLine(start2d,y0,start2d,y1); _EL_           g2.draw(line); _EL_         } _EL_         if (range.contains(end)) { _EL_           line.setLine(end2d,y0,end2d,y1); _EL_           g2.draw(line); _EL_         } _EL_       } _EL_     } _EL_     String label=marker.getLabel(); _EL_     RectangleAnchor anchor=marker.getLabelAnchor(); _EL_     if (label != null) { _EL_       Font labelFont=marker.getLabelFont(); _EL_       g2.setFont(labelFont); _EL_       Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,rect,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor); _EL_       Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor()); _EL_       g2.setPaint(marker.getLabelBackgroundColor()); _EL_       g2.fill(r); _EL_       g2.setPaint(marker.getLabelPaint()); _EL_       TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor()); _EL_     } _EL_     g2.setComposite(originalComposite); _EL_   } _EL_ } _EL_ ', 'protected boolean attemptToAddWord(Word word){ _EL_   double additionalLength=word.getWordWidth(); _EL_   additionalLength+=!words.isEmpty() ? spaceSize : 0; _EL_   if (currentLineLength + additionalLength <= maxLength || maxLength == -1) { _EL_     words.add(word); _EL_     currentLineLength+=additionalLength; _EL_     return true; _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_ } _EL_ ', '@Override public boolean onPreferenceClick(Preference preference){ _EL_   if (preference == mPlayExample) { _EL_     getSampleText(); _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void readWwwAuthenticateHeader(String header){ _EL_   if (header != null) { _EL_     mIsDigestAuthentication=header.startsWith(HttpDigestMd5Authentication.HTTP_DIGEST_SCHEMA); _EL_     if (!mIsDigestAuthentication) { _EL_       return; _EL_     } _EL_     String value=getValue(header,"realm"); _EL_     mDigest.setRealm(value); _EL_     value=getValue(header,"opaque"); _EL_     mDigest.setOpaque(value); _EL_     value=getValue(header,"qop"); _EL_     mDigest.setQop(value); _EL_     value=getValue(header,"nonce"); _EL_     mDigest.setNextnonce(value); _EL_   } _EL_ } _EL_ ', 'public static String valueOf(Boolean value){ _EL_   return value != null ? String.valueOf(value) : null; _EL_ } _EL_ ', 'public boolean exists(String key){ _EL_   return exists(key,false); _EL_ } _EL_ ', 'public AllocationSite(int line,int column){ _EL_ synchronized (sites) { _EL_     this.id=sites.size(); _EL_     sites.add(this); _EL_   } _EL_   this.line=line; _EL_   this.column=column; _EL_ } _EL_ ', 'public boolean drawImage(Image img,AffineTransform xform,ImageObserver obs){ _EL_   return mGraphics.drawImage(img,xform,obs); _EL_ } _EL_ ', "public final static int parseInt(char[] digitChars,int offset,int len){ _EL_   int num=digitChars[offset] - '0'; _EL_   len+=offset; _EL_   if (++offset < len) { _EL_     num=(num * 10) + (digitChars[offset] - '0'); _EL_     if (++offset < len) { _EL_       num=(num * 10) + (digitChars[offset] - '0'); _EL_       if (++offset < len) { _EL_         num=(num * 10) + (digitChars[offset] - '0'); _EL_         if (++offset < len) { _EL_           num=(num * 10) + (digitChars[offset] - '0'); _EL_           if (++offset < len) { _EL_             num=(num * 10) + (digitChars[offset] - '0'); _EL_             if (++offset < len) { _EL_               num=(num * 10) + (digitChars[offset] - '0'); _EL_               if (++offset < len) { _EL_                 num=(num * 10) + (digitChars[offset] - '0'); _EL_                 if (++offset < len) { _EL_                   num=(num * 10) + (digitChars[offset] - '0'); _EL_                 } _EL_               } _EL_             } _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return num; _EL_ } _EL_ ", 'public ActivityMonitorSample(){ _EL_   initComponents(); _EL_   ownerARadio.setActionCommand("A"); _EL_   ownerBRadio.setActionCommand("B"); _EL_   ownerCRadio.setActionCommand("C"); _EL_   indicatorA.setActivityOwner("A"); _EL_   indicatorB.setActivityOwner("B"); _EL_   indicatorC.setActivityOwner("C"); _EL_   JActivityWindow.getInstance(); _EL_ } _EL_ ', 'public static LatLon[] greatCircleExtremeLocations(LatLon location,Angle azimuth){ _EL_   if (location == null) { _EL_     throw new IllegalArgumentException("Location Is Null"); _EL_   } _EL_   if (azimuth == null) { _EL_     throw new IllegalArgumentException("Azimuth Is Null"); _EL_   } _EL_   double lat0=location.getLatitude().radians; _EL_   double az=azimuth.radians; _EL_   double tanDistance=-Math.tan(lat0) / Math.cos(az); _EL_   double distance=Math.atan(tanDistance); _EL_   Angle extremeDistance1=Angle.fromRadians(distance + (Math.PI / 2.0)); _EL_   Angle extremeDistance2=Angle.fromRadians(distance - (Math.PI / 2.0)); _EL_   return new LatLon[]{greatCircleEndPosition(location,azimuth,extremeDistance1),greatCircleEndPosition(location,azimuth,extremeDistance2)}; _EL_ } _EL_ ', 'private void initCheckbox(CheckBoxPreference checkbox,boolean checked,boolean enabled){ _EL_   checkbox.setChecked(checked); _EL_   checkbox.setEnabled(enabled); _EL_ } _EL_ ', 'private void paintCheckIconEnabledAndSelected(Graphics2D g,int width,int height){ _EL_   Shape s=shapeGenerator.createCheckMark(0,0,width,height); _EL_   g.setPaint(iconEnabledSelected); _EL_   g.fill(s); _EL_ } _EL_ ', 'public static int findURISplitIndex(String uri){ _EL_   int uriLength=uri.length(); _EL_   int idx=uriLength - 1; _EL_   for (; idx >= 0; idx--) { _EL_     if (!TurtleUtil.isNameChar(uri.charAt(idx))) { _EL_       break; _EL_     } _EL_   } _EL_   idx++; _EL_   for (; idx < uriLength; idx++) { _EL_     if (TurtleUtil.isNameStartChar(uri.charAt(idx))) { _EL_       break; _EL_     } _EL_   } _EL_   if (!TurtleUtil.isNameEndChar(uri.charAt(uriLength - 1))) { _EL_     return -1; _EL_   } _EL_   if (idx > 0 && idx < uriLength) { _EL_     return idx; _EL_   } _EL_   return -1; _EL_ } _EL_ ', 'private void writeLog(String cmd){ _EL_   try { _EL_     if (m_writer == null) { _EL_       File file=File.createTempFile("create",".log"); _EL_       m_writer=new PrintWriter(new FileWriter(file)); _EL_       log.info(file.toString()); _EL_     } _EL_     m_writer.println(cmd); _EL_     m_writer.flush(); _EL_   } _EL_  catch (  Exception e) { _EL_     log.severe(e.toString()); _EL_   } _EL_ } _EL_ ', 'DNSRecord(String name,DNSRecordType type,DNSRecordClass recordClass,boolean unique,int ttl){ _EL_   super(name,type,recordClass,unique); _EL_   this._ttl=ttl; _EL_   this._created=System.currentTimeMillis(); _EL_ } _EL_ ', 'public static String block(Stream<String> rows){ _EL_   return block(rows.collect(joining(nl()))); _EL_ } _EL_ ', 'public Collection<GridPortRecord> records(){ _EL_ synchronized (recs) { _EL_     return Collections.unmodifiableCollection(new ArrayList<>(recs)); _EL_   } _EL_ } _EL_ ', 'protected void resetXML11() throws XNIException { _EL_   int count=fXML11Components.size(); _EL_   for (int i=0; i < count; i++) { _EL_     XMLComponent c=(XMLComponent)fXML11Components.get(i); _EL_     c.reset(this); _EL_   } _EL_ } _EL_ ', 'public float distanceToOtherCircle(Circle circle){ _EL_   return (float)Math.abs(Math.sqrt(Math.pow(circle.center.x - center.x,2) + Math.pow(circle.center.y - center.y,2))); _EL_ } _EL_ ', 'public SimpleCommand(String commandName,String... args){ _EL_   this(commandName,(Argument)null); _EL_   ArrayList<Argument> argList=new ArrayList<Argument>(); _EL_   for (  String arg : args)   argList.add(new Argument(arg)); _EL_   _arguments=argList.toArray(new Argument[0]); _EL_ } _EL_ ', 'private void grow(){ _EL_   m_allocatedSize*=2; _EL_   boolean newVector[]=new boolean[m_allocatedSize]; _EL_   System.arraycopy(m_values,0,newVector,0,m_index + 1); _EL_   m_values=newVector; _EL_ } _EL_ ', 'public int[] breadthFirstSearch(int intialValue,IBFSTraversable<N> traversable,int firstValue,IIntegerBfsNextValueIterator<N> nextValueIterator,List<Integer> sourcesIndex){ _EL_   int[] results=new int[nodes.length]; _EL_   Arrays.fill(results,intialValue); _EL_   boolean[] alreadyScanned=new boolean[nodes.length]; _EL_   Arrays.fill(alreadyScanned,false); _EL_   Set<Integer> currentNodesIndex=new HashSet<>(sourcesIndex); _EL_   iterativeIntegerBreadthFirstSearch(results,alreadyScanned,currentNodesIndex,firstValue,0,traversable,nextValueIterator); _EL_   return results; _EL_ } _EL_ ', 'public void checkNumberArgs(int argNum) throws WrongNumberArgsException { _EL_   if (argNum < 2)   reportWrongNumberArgs(); _EL_ } _EL_ ', 'private boolean announce(String[] groups){ _EL_   if (dataPackets == null || !lastLocator.equals(myLocator) || !Arrays.equals(lastGroups,groups)) { _EL_     List<DatagramPacket> packets=new ArrayList<DatagramPacket>(); _EL_     Discovery disco; _EL_     try { _EL_       disco=getDiscovery(multicastAnnouncementConstraints.chooseProtocolVersion()); _EL_     } _EL_  catch (    DiscoveryProtocolException e) { _EL_       throw new AssertionError(e); _EL_     } _EL_     EncodeIterator ei=disco.encodeMulticastAnnouncement(new MulticastAnnouncement(announcementSeqNo++,myLocator.getHost(),myLocator.getPort(),groups,myServiceID),multicastAnnouncementConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastAnnouncementConstraints.getUnfulfilledConstraints()); _EL_     while (ei.hasNext()) { _EL_       try { _EL_         packets.addAll(Arrays.asList(ei.next())); _EL_       } _EL_  catch (      Exception e) { _EL_         logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,"exception encoding multicast" + " announcement",e); _EL_       } _EL_     } _EL_     lastLocator=myLocator; _EL_     lastGroups=groups; _EL_     dataPackets=packets.toArray(new DatagramPacket[packets.size()]); _EL_   } _EL_   try { _EL_     send(dataPackets); _EL_   } _EL_  catch (  InterruptedIOException e) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public DrawingAttributes(){ _EL_   propertyChangeSupport=new PropertyChangeSupport(this); _EL_ } _EL_ ', 'public void close(){ _EL_   scanner.close(); _EL_ } _EL_ ', 'static void createPolicyTree(String configName,String configId,ServiceConfigManager scm,String org) throws NoPermissionException, PolicyException, SSOException { _EL_   try { _EL_     ServiceConfig pConfig=scm.getOrganizationConfig(org,null); _EL_     if (pConfig == null) { _EL_       scm.createOrganizationConfig(org,null); _EL_       pConfig=scm.getOrganizationConfig(org,null); _EL_     } _EL_     pConfig.addSubConfig(configName,configId,0,null); _EL_   } _EL_  catch (  ServiceAlreadyExistsException se) { _EL_     if (debug.messageEnabled()) { _EL_       debug.message("PolicyManager->createPolicyTree: Name: " + configName + " ID: "+ configId+ " Policy service already exists under org->"+ org); _EL_     } _EL_   } _EL_ catch (  SMSException e) { _EL_     String[] objs={org}; _EL_     if (e.getExceptionCode() == SMSException.STATUS_NO_PERMISSION) { _EL_       throw (new NoPermissionException(ResBundleUtils.rbName,"insufficient_access_rights",null)); _EL_     } _EL_  else { _EL_       throw (new PolicyException(ResBundleUtils.rbName,"unable_to_create_policy_for_org",objs,e)); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void rollbackMethodForCreateSnapshot(boolean isSnapshotCreated,boolean isDummyLunPathAdded,HDSApiClient hdsApiClient,StorageSystem storage,URI snapshot) throws Exception { _EL_   if (isDummyLunPathAdded) { _EL_     log.info("Remove dummy path while doing roll back"); _EL_     hdsProtectionOperations.removeDummyLunPath(storage,snapshot); _EL_   } _EL_   if (isSnapshotCreated) { _EL_     log.info("Remove snapshot volume for roll back"); _EL_     BlockSnapshot snapshotObj=dbClient.queryObject(BlockSnapshot.class,snapshot); _EL_     String systemObjectID=HDSUtils.getSystemObjectID(storage); _EL_     String logicalUnitObjId=HDSUtils.getLogicalUnitObjectId(snapshotObj.getNativeId(),storage); _EL_     hdsApiClient.deleteSnapshotVolume(systemObjectID,logicalUnitObjId,storage.getModel()); _EL_   } _EL_ } _EL_ ', 'public static int convertStringToTimeSeconds(String time){ _EL_   int result=0; _EL_   if (time.endsWith("H")) { _EL_     int hoursToAdd=Integer.valueOf(StringUtils.remove(time,\'H\')); _EL_     result=(60 * 60) * hoursToAdd; _EL_   } _EL_  else   if (time.endsWith("M")) { _EL_     int minsToAdd=Integer.valueOf(StringUtils.remove(time,\'M\')); _EL_     result=60 * minsToAdd; _EL_   } _EL_  else   if (time.endsWith("S")) { _EL_     int secsToAdd=Integer.valueOf(StringUtils.remove(time,\'S\')); _EL_     result=secsToAdd; _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public void readPrefs(SharedPreferences settings,ActionFactory factory){ _EL_   boolean visible=false; _EL_   String actionId=settings.getString("button_action_" + name + "_0",""); _EL_   mainAction=factory.getAction(actionId); _EL_   if (mainAction != null)   visible=true; _EL_   menuActions.clear(); _EL_   for (int i=0; i < maxMenuActions; i++) { _EL_     actionId=settings.getString("button_action_" + name + "_"+ (i + 1),""); _EL_     UIAction a=factory.getAction(actionId); _EL_     if (a != null)     visible=true; _EL_     menuActions.add(a); _EL_   } _EL_   if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE); _EL_ } _EL_ ', 'public boolean addToActiveList(DownloadInfoRunnable downloadInfoRunnable){ _EL_   return activeListHasRoom() && mActiveList.add(downloadInfoRunnable); _EL_ } _EL_ ', 'public void type(String string){ _EL_   for (int i=0; i < string.length(); i++) { _EL_     char c=string.charAt(i); _EL_     type(c); _EL_   } _EL_ } _EL_ ', 'public boolean providesIdentifier(){ _EL_   return false; _EL_ } _EL_ ', 'public static int nextInt(int n){ _EL_   Random random=getRandom(); _EL_   int value=random.nextInt(n); _EL_   if (!_isTest)   _freeRandomList.free(random); _EL_   return value; _EL_ } _EL_ ', 'protected void doResumeUpdates(){ _EL_   Calendar cal=Calendar.getInstance(Locale.getDefault()); _EL_   mFirstDayOfWeek=cal.getFirstDayOfWeek() - 1; _EL_   mShowWeekNumber=false; _EL_   updateHeader(); _EL_   goTo(mSelectedDay.toMillis(true),false,false,false); _EL_   mAdapter.setSelectedDay(mSelectedDay); _EL_   mTodayUpdater.run(); _EL_ } _EL_ ', 'private boolean canContain(ElementContainmentInfo child,ElementContainmentInfo top,int topIndex){ _EL_   int childTypes=child.types; _EL_   int contents=top.contents; _EL_   int transparencyAllowed=childTypes & (top.transparentToContents & ~contents); _EL_   for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) { _EL_     if (containerIndex < 0) { _EL_       contents|=transparencyAllowed; _EL_       break; _EL_     } _EL_     ElementContainmentInfo container=openElements.get(containerIndex); _EL_     contents|=transparencyAllowed & container.contents; _EL_     transparencyAllowed=transparencyAllowed & container.transparentToContents & ~contents; _EL_   } _EL_   return (contents & childTypes) != 0; _EL_ } _EL_ ', 'public static int[] extractArcs(ASN1ObjectIdentifier oid) throws InvalidObjectIdException { _EL_   String oidStr=oid.getId(); _EL_   StringTokenizer strTokCnt=new StringTokenizer(oidStr,".",false); _EL_   int arcCount=strTokCnt.countTokens(); _EL_   StringTokenizer strTok=new StringTokenizer(oidStr,".",true); _EL_   boolean expectDelimiter=false; _EL_   int[] arcs=new int[arcCount]; _EL_   int i=0; _EL_   while (strTok.hasMoreTokens()) { _EL_     String token=strTok.nextToken(); _EL_     if (expectDelimiter && (!token.equals(".") || !strTok.hasMoreTokens())) { _EL_       throw new InvalidObjectIdException(res.getString("InvalidOidNotNonNegativeIntSequence.exception.message")); _EL_     } _EL_  else     if (!expectDelimiter) { _EL_       try { _EL_         arcs[i]=Integer.parseInt(token); _EL_         if (arcs[i] < 0) { _EL_           throw new InvalidObjectIdException(res.getString("InvalidOidNotNonNegativeIntSequence.exception.message")); _EL_         } _EL_         i++; _EL_       } _EL_  catch (      NumberFormatException ex) { _EL_         throw new InvalidObjectIdException(res.getString("InvalidOidNotNonNegativeIntSequence.exception.message")); _EL_       } _EL_     } _EL_     expectDelimiter=!expectDelimiter; _EL_   } _EL_   return arcs; _EL_ } _EL_ ', 'protected void updateStatsForConditionalDensityEstimator(ConditionalDensityEstimator classifier,Instance classMissing,double classValue) throws Exception { _EL_   if (m_PriorEstimator == null) { _EL_     setNumericPriorsFromBuffer(); _EL_   } _EL_   m_SumSchemeEntropy-=classifier.logDensity(classMissing,classValue) * classMissing.weight() / Utils.log2; _EL_   m_SumPriorEntropy-=m_PriorEstimator.logDensity(classValue) * classMissing.weight() / Utils.log2; _EL_ } _EL_ ', '@Override public boolean accept(File f){ _EL_   if (f != null) { _EL_     if (f.isDirectory()) { _EL_       return true; _EL_     } _EL_     String extension=getExtension(f); _EL_     if (extension != null && filters.get(getExtension(f)) != null) { _EL_       return true; _EL_     } _EL_     ; _EL_   } _EL_   return false; _EL_ } _EL_ ', '@Override public PollResult startPoll(PollController conn){ _EL_   if (!_lifecycle.isActive()) { _EL_     log.warning(this + " select disabled"); _EL_     return PollResult.CLOSED; _EL_   } _EL_   SocketBar socket=conn.getSocket(); _EL_   if (socket == null) { _EL_     log.warning(this + " socket empty for " + conn); _EL_     return PollResult.CLOSED; _EL_   } _EL_   SelectableChannel selChannel=socket.selectableChannel(); _EL_   if (selChannel == null) { _EL_     log.warning(this + " no channel for " + socket); _EL_     return PollResult.CLOSED; _EL_   } _EL_   _connectionCount.incrementAndGet(); _EL_   _activeCount.incrementAndGet(); _EL_   _registerQueue.offer(conn); _EL_   return PollResult.START; _EL_ } _EL_ ', 'public ClusterPolicy createClusterPolicy(String clusterMemberName) throws CreateException { _EL_   long time1=System.currentTimeMillis(); _EL_   if (_clusterPolicies == null) { _EL_     _clusterMemberNames=getClusterMemberNames(); _EL_     if (_clusterMemberNames != null && _clusterMemberNames.length > 0) { _EL_       _clusterPolicies=new HashMap<String,ClusterPolicy>(); _EL_       ClusterPolicy[] tempPolicy=new ClusterPolicy[_clusterMemberNames.length]; _EL_       for (int i=0; i < _clusterMemberNames.length; i++)       tempPolicy[i]=createClusterPolicyInternal(_clusterMemberNames[i]); _EL_       ArrayList<ReplicationPolicy> selectedReplPolicies=new ArrayList<ReplicationPolicy>(_clusterMemberNames.length); _EL_       List<String> selectedReplGroupNames=new ArrayList<String>(_clusterMemberNames.length); _EL_       for (int i=0; i < tempPolicy.length; i++)       if (tempPolicy[i].m_ReplicationPolicy != null && !selectedReplGroupNames.contains(tempPolicy[i].m_ReplicationPolicy.m_ReplicationGroupName)) { _EL_         selectedReplPolicies.add(tempPolicy[i].m_ReplicationPolicy); _EL_         selectedReplGroupNames.add(tempPolicy[i].m_ReplicationPolicy.m_ReplicationGroupName); _EL_       } _EL_       if (selectedReplPolicies.isEmpty())       selectedReplPolicies=null; _EL_  else       selectedReplPolicies.trimToSize(); _EL_       for (int i=0; i < _clusterMemberNames.length; i++) { _EL_         tempPolicy[i].m_ReplicationGroups=selectedReplPolicies; _EL_         _clusterPolicies.put(_clusterMemberNames[i],tempPolicy[i]); _EL_       } _EL_     } _EL_   } _EL_   ClusterPolicy result=_clusterPolicies.get(clusterMemberName); _EL_   if (result == null)   result=createClusterPolicyInternal(clusterMemberName); _EL_   long time2=System.currentTimeMillis(); _EL_   if (_logger.isLoggable(Level.FINE)) { _EL_     _logger.fine("Creation of ClusterPolicy instance for \\"" + clusterMemberName + "\\" cluster member took "+ (time2 - time1)+ " msec."); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public static boolean compareDoubles(double a,double b){ _EL_   if (Double.isNaN(a) && Double.isNaN(b))   return true; _EL_   if (!Double.isInfinite(a) && !Double.isInfinite(b))   return Math.abs(a - b) <= EPSILON; _EL_   return a == b; _EL_ } _EL_ ', 'public static byte[] bitmapToByte(Bitmap b){ _EL_   ByteArrayOutputStream o=new ByteArrayOutputStream(); _EL_   b.compress(Bitmap.CompressFormat.PNG,100,o); _EL_   return o.toByteArray(); _EL_ } _EL_ ', 'public static double logOfBase(double number,int base){ _EL_   return Math.log(number) / Math.log(base); _EL_ } _EL_ ', 'public static void UF6(double[] x,double[] f,int nx){ _EL_   int count1=0; _EL_   int count2=0; _EL_   double sum1=0.0; _EL_   double sum2=0.0; _EL_   double prod1=1.0; _EL_   double prod2=1.0; _EL_   double yj; _EL_   double hj; _EL_   double pj; _EL_   double N=2.0; _EL_   double E=0.1; _EL_   for (int j=2; j <= nx; j++) { _EL_     yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx); _EL_     pj=Math.cos(20.0 * yj * PI / Math.sqrt(j + 0.0)); _EL_     if (j % 2 == 0) { _EL_       sum2+=yj * yj; _EL_       prod2*=pj; _EL_       count2++; _EL_     } _EL_  else { _EL_       sum1+=yj * yj; _EL_       prod1*=pj; _EL_       count1++; _EL_     } _EL_   } _EL_   hj=2.0 * (0.5 / N + E) * Math.sin(2.0 * N * PI* x[0]); _EL_   if (hj < 0.0) { _EL_     hj=0.0; _EL_   } _EL_   f[0]=x[0] + hj + 2.0 * (4.0 * sum1 - 2.0 * prod1 + 2.0) / (double)count1; _EL_   f[1]=1.0 - x[0] + hj + 2.0 * (4.0 * sum2 - 2.0 * prod2 + 2.0) / (double)count2; _EL_ } _EL_ ', 'protected int readBlock(){ _EL_   blockSize=read(); _EL_   int n=0; _EL_   if (blockSize > 0) { _EL_     try { _EL_       int count; _EL_       while (n < blockSize) { _EL_         count=blockSize - n; _EL_         rawData.get(block,n,count); _EL_         n+=count; _EL_       } _EL_     } _EL_  catch (    final Exception e) { _EL_       Log.w(TAG,"Error Reading Block",e); _EL_       status=STATUS_FORMAT_ERROR; _EL_     } _EL_   } _EL_   return n; _EL_ } _EL_ ', 'public void addRun(final Run run){ _EL_   runs.add(run); _EL_   run.setId(runIdCounter++); _EL_ } _EL_ ', '@Override public boolean addOutputSensor(String sensorName,int state){ _EL_   OutputSensor outputSensor=new OutputSensor(sensorName); _EL_   if (!outputSensor.setState(state)) { _EL_     return false; _EL_   } _EL_   _outputSensorList.add(outputSensor); _EL_   return true; _EL_ } _EL_ ', 'public void init(SocketChannel channel){ _EL_   _channel=channel; _EL_   _readBuffer.clear(); _EL_   _readBuffer.flip(); _EL_   _needsFlush=false; _EL_ } _EL_ ', 'public void reset(){ _EL_   Timber.i("resetting QueuedMediaPlayer..."); _EL_   mCurrentPlayer.reset(); _EL_   mNextPlayer.reset(); _EL_   mQueue=Collections.emptyList(); _EL_   mQueueIndex=0; _EL_   mRequestedSeekPosition=0; _EL_   mPlayWhenPrepared=false; _EL_ } _EL_ ', '@Override public Expected<T> ifPresent(final Consumer<? super T> consumer){ _EL_   if (this.value != null)   consumer.accept(this.value); _EL_   return this; _EL_ } _EL_ ', 'protected void sendIntensity(double intensity){ _EL_   if (log.isDebugEnabled()) { _EL_     log.debug("sendIntensity(" + intensity + ")"+ " lastOutputStep: "+ lastOutputStep+ " maxDimStep: "+ maxDimStep); _EL_   } _EL_   int newStep=(int)Math.round(intensity * maxDimStep); _EL_   if ((newStep < 0) || (newStep > maxDimStep)) { _EL_     log.error("newStep wrong: " + newStep + " intensity: "+ intensity); _EL_   } _EL_   if (newStep == 0) { _EL_     if (log.isDebugEnabled()) { _EL_       log.debug("intensity " + intensity + " within current step, return"); _EL_     } _EL_     return; _EL_   } _EL_   X10Sequence out=new X10Sequence(); _EL_   out.addExtData(housecode,devicecode,X10Sequence.EXTCMD_DIM,newStep); _EL_   tc.sendX10Sequence(out,null); _EL_   lastOutputStep=newStep; _EL_   if (log.isDebugEnabled()) { _EL_     log.debug("sendIntensity(" + intensity + ") house "+ X10Sequence.houseValueToText(housecode)+ " device "+ devicecode+ " newStep: "+ newStep); _EL_   } _EL_ } _EL_ ', 'public static float readFloat(){ _EL_   return scanner.nextFloat(); _EL_ } _EL_ ', 'public GlowScheduler(GlowServer server,WorldScheduler worlds){ _EL_   this.server=server; _EL_   this.worlds=worlds; _EL_   inTickTaskCondition=worlds.getAdvanceCondition(); _EL_   tickEndRun=null; _EL_   primaryThread=Thread.currentThread(); _EL_ } _EL_ ', 'private int calculateLayoutWidth(int widthSize,int mode){ _EL_   initResourcesIfNecessary(); _EL_   itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT)); _EL_   itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED)); _EL_   int width=itemsLayout.getMeasuredWidth(); _EL_   if (mode == MeasureSpec.EXACTLY) { _EL_     width=widthSize; _EL_   } _EL_  else { _EL_     width+=2 * PADDING; _EL_     width=Math.max(width,getSuggestedMinimumWidth()); _EL_     if (mode == MeasureSpec.AT_MOST && widthSize < width) { _EL_       width=widthSize; _EL_     } _EL_   } _EL_   itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED)); _EL_   return width; _EL_ } _EL_ ', 'public void delete() throws IOException { _EL_   close(); _EL_   Utils.deleteContents(directory); _EL_ } _EL_ ', '@Override public boolean execute(@NotNull PsiElement pe,@NotNull ResolveState state){ _EL_   if (pe instanceof PsiVariable) { _EL_     final PsiVariable pvar=(PsiVariable)pe; _EL_     if (!myStaticSensitiveFlag || !myStaticScopeFlag || pvar.hasModifierProperty(PsiModifier.STATIC)) { _EL_       if (check(pvar,state)) { _EL_         myResultList.add(pvar); _EL_       } _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public void characters(char[] ch,int start,int length) throws SAXException { _EL_   try { _EL_     stopTerminator(); _EL_     if (w == null)     return; _EL_     int end=start + length; _EL_     for (int i=start; i < end; i++) { _EL_       char c=ch[i]; _EL_ switch (c) { _EL_ case \'&\': _EL_         w.write("&amp;"); _EL_       break; _EL_ case \'<\': _EL_     w.write("&lt;"); _EL_   break; _EL_ case \'>\': _EL_ w.write("&gt;"); _EL_ break; _EL_ case \'\\n\': _EL_ case \'\\r\': _EL_ case \'\\t\': _EL_ w.write(c); _EL_ break; _EL_ default : _EL_ if (canEncode(c)) { _EL_ w.write(c); _EL_ } _EL_  else { _EL_ w.write("&#"); _EL_ w.write(Integer.toString(c)); _EL_ w.write(";"); _EL_ } _EL_ break; _EL_ } _EL_ } _EL_ } _EL_  catch (IOException e) { _EL_ throw new SAXException(e); _EL_ } _EL_ } _EL_ ', 'public static String toHumanReadableString(final String iso8601Duration){ _EL_   String str=""; _EL_   if (iso8601Duration.matches("P\\\\d+[YMD].+")) { _EL_     str="inf."; _EL_   } _EL_  else { _EL_     String hours=getHours(iso8601Duration), minutes=getMinutes(iso8601Duration), seconds=getSeconds(iso8601Duration); _EL_     if (hours != null) { _EL_       str=hours; _EL_       if (minutes != null && minutes.length() == 1) { _EL_         minutes="0" + minutes; _EL_       } _EL_     } _EL_     if (str.isEmpty())     str=minutes; _EL_  else     str+=":" + minutes; _EL_     if (str.isEmpty())     str=seconds; _EL_  else     str+=":" + seconds; _EL_   } _EL_   return str; _EL_ } _EL_ ', 'void remove(TcpServerThread t){ _EL_   running.remove(t); _EL_ } _EL_ ', 'private void deleteCurrentLicenseFileOnDisk(){ _EL_   File licenseFile=new File(LicenseConstants.LICENSE_FILE_PATH); _EL_   if (licenseFile.exists()) { _EL_     licenseFile.delete(); _EL_   } _EL_ } _EL_ ', '@Override public void run(){ _EL_ synchronized (mSync) { _EL_     mRequestStop=false; _EL_     mRequestDrain=0; _EL_     mSync.notify(); _EL_   } _EL_   final boolean isRunning=true; _EL_   boolean localRequestStop; _EL_   boolean localRequestDrain; _EL_   while (isRunning) { _EL_ synchronized (mSync) { _EL_       localRequestStop=mRequestStop; _EL_       localRequestDrain=(mRequestDrain > 0); _EL_       if (localRequestDrain)       mRequestDrain--; _EL_     } _EL_     if (localRequestStop) { _EL_       drain(); _EL_       signalEndOfInputStream(); _EL_       drain(); _EL_       release(); _EL_       break; _EL_     } _EL_     if (localRequestDrain) { _EL_       drain(); _EL_     } _EL_  else { _EL_ synchronized (mSync) { _EL_         try { _EL_           mSync.wait(); _EL_         } _EL_  catch (        final InterruptedException e) { _EL_           break; _EL_         } _EL_       } _EL_     } _EL_   } _EL_   if (DEBUG)   Log.d(TAG,"Encoder thread exiting"); _EL_ synchronized (mSync) { _EL_     mRequestStop=true; _EL_     mIsCapturing=false; _EL_   } _EL_ } _EL_ ', 'public final void readFromStream(DataInputStream dis,int version) throws IOException, ChessParseError { _EL_   event=dis.readUTF(); _EL_   site=dis.readUTF(); _EL_   date=dis.readUTF(); _EL_   round=dis.readUTF(); _EL_   white=dis.readUTF(); _EL_   black=dis.readUTF(); _EL_   startPos=TextIO.readFEN(dis.readUTF()); _EL_   currentPos=new Position(startPos); _EL_   timeControl=dis.readUTF(); _EL_   if (version >= 2) { _EL_     whiteTimeControl=dis.readUTF(); _EL_     blackTimeControl=dis.readUTF(); _EL_   } _EL_  else { _EL_     whiteTimeControl="?"; _EL_     blackTimeControl="?"; _EL_   } _EL_   int nTags=dis.readInt(); _EL_   tagPairs.clear(); _EL_   for (int i=0; i < nTags; i++) { _EL_     TagPair tp=new TagPair(); _EL_     tp.tagName=dis.readUTF(); _EL_     tp.tagValue=dis.readUTF(); _EL_     tagPairs.add(tp); _EL_   } _EL_   rootNode=new Node(); _EL_   Node.readFromStream(dis,rootNode); _EL_   currentNode=rootNode; _EL_   int pathLen=dis.readInt(); _EL_   for (int i=0; i < pathLen; i++)   goForward(dis.readInt()); _EL_   updateListener(); _EL_ } _EL_ ', 'public Rect updateFastScrollerBounds(BaseRecyclerView rv,int lastTouchY){ _EL_   mInvalidateRect.set(mBgBounds); _EL_   if (isVisible()) { _EL_     int edgePadding=rv.getMaxScrollbarWidth(); _EL_     int bgPadding=(mBgOriginalSize - mTextBounds.height()) / 2; _EL_     int bgHeight=mBgOriginalSize; _EL_     int bgWidth=Math.max(mBgOriginalSize,mTextBounds.width() + (2 * bgPadding)); _EL_     if (Utilities.isRtl(mRes)) { _EL_       mBgBounds.left=rv.getBackgroundPadding().left + (2 * rv.getMaxScrollbarWidth()); _EL_       mBgBounds.right=mBgBounds.left + bgWidth; _EL_     } _EL_  else { _EL_       mBgBounds.right=rv.getWidth() - rv.getBackgroundPadding().right - (2 * rv.getMaxScrollbarWidth()); _EL_       mBgBounds.left=mBgBounds.right - bgWidth; _EL_     } _EL_     mBgBounds.top=lastTouchY - (int)(FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * bgHeight); _EL_     mBgBounds.top=Math.max(edgePadding,Math.min(mBgBounds.top,rv.getHeight() - edgePadding - bgHeight)); _EL_     mBgBounds.bottom=mBgBounds.top + bgHeight; _EL_   } _EL_  else { _EL_     mBgBounds.setEmpty(); _EL_   } _EL_   mInvalidateRect.union(mBgBounds); _EL_   return mInvalidateRect; _EL_ } _EL_ ', 'public DNetscapeCaPolicyUrl(JDialog parent){ _EL_   super(parent); _EL_   setTitle(res.getString("DNetscapeCaPolicyUrl.Title")); _EL_   initComponents(); _EL_ } _EL_ ', 'protected int match_bitap(String text,String pattern,int loc){ _EL_   assert (Match_MaxBits == 0 || pattern.length() <= Match_MaxBits) : "Pattern too long for this application."; _EL_   Map<Character,Integer> s=match_alphabet(pattern); _EL_   double score_threshold=Match_Threshold; _EL_   int best_loc=text.indexOf(pattern,loc); _EL_   if (best_loc != -1) { _EL_     score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold); _EL_     best_loc=text.lastIndexOf(pattern,loc + pattern.length()); _EL_     if (best_loc != -1) { _EL_       score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold); _EL_     } _EL_   } _EL_   int matchmask=1 << (pattern.length() - 1); _EL_   best_loc=-1; _EL_   int bin_min, bin_mid; _EL_   int bin_max=pattern.length() + text.length(); _EL_   int[] last_rd=new int[0]; _EL_   for (int d=0; d < pattern.length(); d++) { _EL_     bin_min=0; _EL_     bin_mid=bin_max; _EL_     while (bin_min < bin_mid) { _EL_       if (match_bitapScore(d,loc + bin_mid,loc,pattern) <= score_threshold) { _EL_         bin_min=bin_mid; _EL_       } _EL_  else { _EL_         bin_max=bin_mid; _EL_       } _EL_       bin_mid=(bin_max - bin_min) / 2 + bin_min; _EL_     } _EL_     bin_max=bin_mid; _EL_     int start=Math.max(1,loc - bin_mid + 1); _EL_     int finish=Math.min(loc + bin_mid,text.length()) + pattern.length(); _EL_     int[] rd=new int[finish + 2]; _EL_     rd[finish + 1]=(1 << d) - 1; _EL_     for (int j=finish; j >= start; j--) { _EL_       int charMatch; _EL_       if (text.length() <= j - 1 || !s.containsKey(text.charAt(j - 1))) { _EL_         charMatch=0; _EL_       } _EL_  else { _EL_         charMatch=s.get(text.charAt(j - 1)); _EL_       } _EL_       if (d == 0) { _EL_         rd[j]=((rd[j + 1] << 1) | 1) & charMatch; _EL_       } _EL_  else { _EL_         rd[j]=(((rd[j + 1] << 1) | 1) & charMatch) | (((last_rd[j + 1] | last_rd[j]) << 1) | 1) | last_rd[j + 1]; _EL_       } _EL_       if ((rd[j] & matchmask) != 0) { _EL_         double score=match_bitapScore(d,j - 1,loc,pattern); _EL_         if (score <= score_threshold) { _EL_           score_threshold=score; _EL_           best_loc=j - 1; _EL_           if (best_loc > loc) { _EL_             start=Math.max(1,2 * loc - best_loc); _EL_           } _EL_  else { _EL_             break; _EL_           } _EL_         } _EL_       } _EL_     } _EL_     if (match_bitapScore(d + 1,loc,loc,pattern) > score_threshold) { _EL_       break; _EL_     } _EL_     last_rd=rd; _EL_   } _EL_   return best_loc; _EL_ } _EL_ ', 'public static Path createDirectory(final Path parent,final String folderName){ _EL_   final File file=new File(parent.toFile(),folderName); _EL_   if (!file.exists()) { _EL_     if (!file.mkdir()) { _EL_       throw new RuntimeException("Error while trying to create folder at " + parent + " with "+ folderName+ "."); _EL_     } _EL_   } _EL_   file.deleteOnExit(); _EL_   return file.toPath(); _EL_ } _EL_ ', 'private static void addItemsToList(int startIndex,int endIndex){ _EL_   for (int i=startIndex; i < endIndex; i++) { _EL_     values.add(new Integer(i)); _EL_   } _EL_ } _EL_ ', 'public static synchronized List<Proxy> noProxyList(){ _EL_   if (noProxyList == null) { _EL_     ArrayList<Proxy> list=new ArrayList<Proxy>(1); _EL_     list.add(Proxy.NO_PROXY); _EL_     noProxyList=Collections.unmodifiableList(list); _EL_   } _EL_   return noProxyList; _EL_ } _EL_ ', 'protected void add(double value,int group){ _EL_   if ((group < 0) || (group >= numberOfGroups)) { _EL_     throw new IllegalArgumentException(); _EL_   } _EL_   data.add(new RankedObservation(value,group)); _EL_ } _EL_ ', 'public void tallyVariant(VcfHeader header,VcfRecord rec){ _EL_   tallyVariant(rec,header.getSampleNames()); _EL_ } _EL_ ', 'public int read(byte[] b,int off,int len) throws IOException { _EL_   if (closed) { _EL_     throw new IOException("Attempted read from closed stream."); _EL_   } _EL_   if (eof) { _EL_     return -1; _EL_   } _EL_   if (pos >= chunkSize) { _EL_     nextChunk(); _EL_     if (eof) { _EL_       return -1; _EL_     } _EL_   } _EL_   len=Math.min(len,chunkSize - pos); _EL_   int count=in.read(b,off,len); _EL_   pos+=count; _EL_   return count; _EL_ } _EL_ ', 'public LDIFEntryReader(final String... ldifLines){ _EL_   super(Arrays.asList(ldifLines)); _EL_ } _EL_ ', 'public MyMap remove(int position){ _EL_   MyMap mm=null; _EL_   if (position >= 0 && position < getItemCount()) { _EL_     mm=myMaps.remove(position); _EL_     notifyItemRemoved(position); _EL_   } _EL_   return mm; _EL_ } _EL_ ', 'public void presentLicenses(boolean preAccept){ _EL_   LicenseSet licenses=licenseModule.getRequiredLicenses(); _EL_   if (preAccept) { _EL_     licenses.acceptAll(); _EL_   } _EL_  else { _EL_     for (    License license : licenses) { _EL_       if (license.isAccepted()) { _EL_         continue; _EL_       } _EL_       user.show(""); _EL_       user.show(license.getLicenseText()); _EL_       String input=user.ask("prompt"); _EL_       if (input != null && YES.startsWith(input.toLowerCase())) { _EL_         license.accept(); _EL_       } _EL_  else { _EL_         license.reject(); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public void addGeoKey(XTIFFField geoKey){ _EL_   geoKeyIndex.put(new Integer(geoKey.getTag()),geoKey); _EL_   hasGeoKeys=true; _EL_ } _EL_ ', 'public static GeoTimeSerie detect(GeoTimeSerie gts,int alphabetSize,int wordLen,int windowLen,Collection<String> patterns,boolean standardizePAA) throws WarpScriptException { _EL_   GeoTimeSerie gtsPatterns=GTSHelper.bSAX(gts,alphabetSize,wordLen,windowLen,standardizePAA); _EL_   GTSHelper.sort(gtsPatterns); _EL_   GeoTimeSerie detected=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,16); _EL_   detected.setMetadata(gts.getMetadata()); _EL_   int lastidx=-1; _EL_   for (int i=0; i < gtsPatterns.values; i++) { _EL_     if (!patterns.contains(gtsPatterns.stringValues[i])) { _EL_       continue; _EL_     } _EL_     for (int j=0; j < windowLen; j++) { _EL_       if (i + j > lastidx) { _EL_         lastidx=i + j; _EL_         GTSHelper.setValue(detected,GTSHelper.tickAtIndex(gts,lastidx),GTSHelper.locationAtIndex(gts,lastidx),GTSHelper.elevationAtIndex(gts,lastidx),GTSHelper.valueAtIndex(gts,lastidx),false); _EL_       } _EL_     } _EL_   } _EL_   return detected; _EL_ } _EL_ ', 'private StringBuilder debugDumpCandidates(StringBuilder msg,List<? extends Itemset> candidates,VectorFieldTypeInformation<BitVector> meta){ _EL_   msg.append(\':\'); _EL_   for (  Itemset itemset : candidates) { _EL_     msg.append(" ["); _EL_     itemset.appendTo(msg,meta); _EL_     msg.append(\']\'); _EL_   } _EL_   return msg; _EL_ } _EL_ ', 'public static final void writeBooleanArrayXml(boolean[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException { _EL_   if (val == null) { _EL_     out.startTag(null,"null"); _EL_     out.endTag(null,"null"); _EL_     return; _EL_   } _EL_   out.startTag(null,"boolean-array"); _EL_   if (name != null) { _EL_     out.attribute(null,"name",name); _EL_   } _EL_   final int N=val.length; _EL_   out.attribute(null,"num",Integer.toString(N)); _EL_   for (int i=0; i < N; i++) { _EL_     out.startTag(null,"item"); _EL_     out.attribute(null,"value",Boolean.toString(val[i])); _EL_     out.endTag(null,"item"); _EL_   } _EL_   out.endTag(null,"boolean-array"); _EL_ } _EL_ ', 'public Skype(String username,String password){ _EL_   this.username=username; _EL_   this.password=password; _EL_ } _EL_ ', 'private void stopDrag(MotionEvent ev){ _EL_   mTouchMode=TOUCH_MODE_IDLE; _EL_   final boolean commitChange=ev.getAction() == MotionEvent.ACTION_UP && isEnabled(); _EL_   final boolean oldState=isChecked(); _EL_   final boolean newState; _EL_   if (commitChange) { _EL_     mVelocityTracker.computeCurrentVelocity(1000); _EL_     final float xvel=mVelocityTracker.getXVelocity(); _EL_     if (Math.abs(xvel) > mMinFlingVelocity) { _EL_       newState=ViewUtils.isLayoutRtl(this) ? (xvel < 0) : (xvel > 0); _EL_     } _EL_  else { _EL_       newState=getTargetCheckedState(); _EL_     } _EL_   } _EL_  else { _EL_     newState=oldState; _EL_   } _EL_   if (newState != oldState) { _EL_     playSoundEffect(SoundEffectConstants.CLICK); _EL_   } _EL_   setChecked(newState); _EL_   cancelSuperTouch(ev); _EL_ } _EL_ ', 'private void addFlags(int newflags){ _EL_   flags=getLayoutFlags() | newflags; _EL_ } _EL_ ', 'void purgeLastArticles(int amountToPurge){ _EL_   if (!isDBAvailable())   return; _EL_   long time=System.currentTimeMillis(); _EL_   String query="_id IN ( SELECT _id FROM " + TABLE_ARTICLES + " WHERE isPublished=0 AND isStarred=0 ORDER BY updateDate DESC LIMIT -1 OFFSET "+ (Utils.ARTICLE_LIMIT - amountToPurge + ")"); _EL_   safelyDeleteArticles(query,null); _EL_   Log.d(TAG,"purgeLastArticles took " + (System.currentTimeMillis() - time) + "ms"); _EL_ } _EL_ ', 'ProxyVerifier(TxnManager serverProxy,Uuid proxyID){ _EL_   if (!(serverProxy instanceof RemoteMethodControl)) { _EL_     throw new UnsupportedOperationException("No verifier available for non-constrainable service"); _EL_   } _EL_  else   if (!(serverProxy instanceof TrustEquivalence)) { _EL_     throw new UnsupportedOperationException("Verifier requires service proxy to implement " + "TrustEquivalence"); _EL_   } _EL_  else   if (proxyID == null) { _EL_     throw new IllegalArgumentException("Proxy id cannot be null"); _EL_   } _EL_   this.serverProxy=(RemoteMethodControl)serverProxy; _EL_   this.proxyID=proxyID; _EL_ } _EL_ ', 'public void paint(Graphics g){ _EL_   g.translate(0,translateY); _EL_   super.paint(g); _EL_ } _EL_ ', 'private void beforeKey() throws JSONException { _EL_   Scope context=peek(); _EL_   if (context == Scope.NONEMPTY_OBJECT) { _EL_     out.append(\',\'); _EL_   } _EL_  else   if (context != Scope.EMPTY_OBJECT) { _EL_     throw new JSONException("Nesting problem"); _EL_   } _EL_   newline(); _EL_   replaceTop(Scope.DANGLING_KEY); _EL_ } _EL_ ', 'public static void transfer(InputStream in,OutputStream out,int bufferSize) throws IOException { _EL_   byte[] buffer=new byte[bufferSize]; _EL_   int bytesRead; _EL_   while ((bytesRead=in.read(buffer)) != -1) { _EL_     out.write(buffer,0,bytesRead); _EL_   } _EL_ } _EL_ ', 'private static long addAndCheck(long a,long b,Localizable pattern) throws MathRuntimeException { _EL_   final long result=a + b; _EL_   if (!((a ^ b) < 0 || (a ^ result) >= 0)) { _EL_     throw new MathRuntimeException(pattern,a,b); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private JCheckBox addCheckbox(String text,Container container){ _EL_   JCheckBox checkbox=new JCheckBox(text); _EL_   checkbox.setAlignmentX(Component.LEFT_ALIGNMENT); _EL_   checkbox.setBorder(BorderFactory.createEmptyBorder(0,0,10,5)); _EL_   container.add(checkbox); _EL_   return checkbox; _EL_ } _EL_ ', '@Override public void drawBackground(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea){ _EL_   float x0=(float)dataArea.getX(); _EL_   float x1=x0 + (float)Math.abs(this.xOffset); _EL_   float x3=(float)dataArea.getMaxX(); _EL_   float x2=x3 - (float)Math.abs(this.xOffset); _EL_   float y0=(float)dataArea.getMaxY(); _EL_   float y1=y0 - (float)Math.abs(this.yOffset); _EL_   float y3=(float)dataArea.getMinY(); _EL_   float y2=y3 + (float)Math.abs(this.yOffset); _EL_   GeneralPath clip=new GeneralPath(); _EL_   clip.moveTo(x0,y0); _EL_   clip.lineTo(x0,y2); _EL_   clip.lineTo(x1,y3); _EL_   clip.lineTo(x3,y3); _EL_   clip.lineTo(x3,y1); _EL_   clip.lineTo(x2,y0); _EL_   clip.closePath(); _EL_   Composite originalComposite=g2.getComposite(); _EL_   g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,plot.getBackgroundAlpha())); _EL_   Paint backgroundPaint=plot.getBackgroundPaint(); _EL_   if (backgroundPaint != null) { _EL_     g2.setPaint(backgroundPaint); _EL_     g2.fill(clip); _EL_   } _EL_   GeneralPath leftWall=new GeneralPath(); _EL_   leftWall.moveTo(x0,y0); _EL_   leftWall.lineTo(x0,y2); _EL_   leftWall.lineTo(x1,y3); _EL_   leftWall.lineTo(x1,y1); _EL_   leftWall.closePath(); _EL_   g2.setPaint(getWallPaint()); _EL_   g2.fill(leftWall); _EL_   GeneralPath bottomWall=new GeneralPath(); _EL_   bottomWall.moveTo(x0,y0); _EL_   bottomWall.lineTo(x1,y1); _EL_   bottomWall.lineTo(x3,y1); _EL_   bottomWall.lineTo(x2,y0); _EL_   bottomWall.closePath(); _EL_   g2.setPaint(getWallPaint()); _EL_   g2.fill(bottomWall); _EL_   g2.setPaint(Color.lightGray); _EL_   Line2D corner=new Line2D.Double(x0,y0,x1,y1); _EL_   g2.draw(corner); _EL_   corner.setLine(x1,y1,x1,y3); _EL_   g2.draw(corner); _EL_   corner.setLine(x1,y1,x3,y1); _EL_   g2.draw(corner); _EL_   Image backgroundImage=plot.getBackgroundImage(); _EL_   if (backgroundImage != null) { _EL_     Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX() + getXOffset(),dataArea.getY(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset()); _EL_     plot.drawBackgroundImage(g2,adjusted); _EL_   } _EL_   g2.setComposite(originalComposite); _EL_ } _EL_ ', 'public void push(){ _EL_   state.cliprgn=g.getClipBounds(); _EL_   stack.push(state); _EL_   state=(GraphicsState)state.clone(); _EL_ } _EL_ ', 'public E peek(){ _EL_   if (isEmpty()) { _EL_     return null; _EL_   } _EL_   return elements[0]; _EL_ } _EL_ ', 'public synchronized int add(IAudioProcessor processor){ _EL_   processors.add(processor); _EL_   buildFinalProcessor(); _EL_   return processors.indexOf(processor); _EL_ } _EL_ ', 'public static boolean isEmbeddedBase64Image(String uri){ _EL_   return (uri != null && uri.startsWith("data:image/")); _EL_ } _EL_ ', 'void changeState(int newState){ _EL_   int oldState; _EL_ synchronized (stateLock) { _EL_     if (state == newState)     return; _EL_     oldState=state; _EL_     state=newState; _EL_     stateLock.notifyAll(); _EL_   } _EL_   sendStateChangeNotification(oldState,newState); _EL_ } _EL_ ', 'private int parseLinkLabel(){ _EL_   String m=match(LINK_LABEL); _EL_   return m == null ? 0 : m.length(); _EL_ } _EL_ ', 'public static String readFileAsString(File file) throws FileNotFoundException { _EL_   return readFileAsString(file.getAbsolutePath()); _EL_ } _EL_ ', 'protected void onException(final WroRuntimeException e){ _EL_   throw e; _EL_ } _EL_ ', 'public synchronized void checkAccess(LicenseCheckerCallback callback){ _EL_   if (mPolicy.allowAccess()) { _EL_     Log.i(TAG,"Using cached license response"); _EL_     callback.allow(Policy.LICENSED); _EL_   } _EL_  else { _EL_     LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode); _EL_     if (mService == null) { _EL_       Log.i(TAG,"Binding to licensing service."); _EL_       try { _EL_         boolean bindResult=mContext.bindService(new Intent(new String(Base64.decode("Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U="))),this,Context.BIND_AUTO_CREATE); _EL_         if (bindResult) { _EL_           mPendingChecks.offer(validator); _EL_         } _EL_  else { _EL_           Log.e(TAG,"Could not bind to service."); _EL_           handleServiceConnectionError(validator); _EL_         } _EL_       } _EL_  catch (      SecurityException e) { _EL_         callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION); _EL_       } _EL_ catch (      Base64DecoderException e) { _EL_         e.printStackTrace(); _EL_       } _EL_     } _EL_  else { _EL_       mPendingChecks.offer(validator); _EL_       runChecks(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void close(){ _EL_   if (!isOpen)   return; _EL_   Log.d(TAG,"Trying to close track"); _EL_   loadingLock.lock(); _EL_   try { _EL_     save(); _EL_     if (saveFileStream != null) { _EL_       SavingHelper.close(saveFileStream); _EL_       saveFileStream=null; _EL_     } _EL_     savingDisabled=true; _EL_     isOpen=false; _EL_     Log.i(TAG,"Track closed"); _EL_   } _EL_   finally { _EL_     loadingLock.unlock(); _EL_   } _EL_ } _EL_ ', 'protected int selectOperator(){ _EL_   lastUpdate++; _EL_   if ((lastUpdate >= UPDATE_WINDOW) || (probabilities == null)) { _EL_     lastUpdate=0; _EL_     probabilities=getOperatorProbabilities(); _EL_   } _EL_   double rand=PRNG.nextDouble(); _EL_   double sum=0.0; _EL_   for (int i=0; i < operators.size(); i++) { _EL_     sum+=probabilities[i]; _EL_     if (sum > rand) { _EL_       return i; _EL_     } _EL_   } _EL_   throw new IllegalStateException(); _EL_ } _EL_ ', '@Override public List chunkString(String sToChunk){ _EL_   Integer[] iRes=splitPointsByDelimiterList(sToChunk,getDelimiters()); _EL_   String[] sRes=splitStringByDelimiterPoints(sToChunk,iRes); _EL_   return Arrays.asList(sRes); _EL_ } _EL_ ', 'public ByteBuffer decodeBufferToByteBuffer(String inputString) throws IOException { _EL_   return ByteBuffer.wrap(decodeBuffer(inputString)); _EL_ } _EL_ ', 'public void clear(){ _EL_   m_Model.clear(); _EL_   setButtons(null); _EL_ } _EL_ ', 'public static int brighter(int c){ _EL_   int r=red(c), g=green(c), b=blue(c); _EL_   int i=(int)(1.0 / (1.0 - scale)); _EL_   if (r == 0 && g == 0 && b == 0) { _EL_     return rgba(i,i,i,alpha(c)); _EL_   } _EL_   if (r > 0 && r < i)   r=i; _EL_   if (g > 0 && g < i)   g=i; _EL_   if (b > 0 && b < i)   b=i; _EL_   return rgba(Math.min(255,(int)(r / scale)),Math.min(255,(int)(g / scale)),Math.min(255,(int)(b / scale)),alpha(c)); _EL_ } _EL_ ', '@Override @SuppressWarnings("unchecked") public void completed(int bytesTransferred,boolean canInvokeDirect){ _EL_   if (bytesTransferred == 0) { _EL_     bytesTransferred=-1; _EL_   } _EL_  else { _EL_     updateBuffers(bytesTransferred); _EL_   } _EL_   releaseBuffers(); _EL_ synchronized (result) { _EL_     if (result.isDone())     return; _EL_     enableReading(); _EL_     if (scatteringRead) { _EL_       result.setResult((V)Long.valueOf(bytesTransferred)); _EL_     } _EL_  else { _EL_       result.setResult((V)Integer.valueOf(bytesTransferred)); _EL_     } _EL_   } _EL_   if (canInvokeDirect) { _EL_     Invoker.invokeUnchecked(result); _EL_   } _EL_  else { _EL_     Invoker.invoke(result); _EL_   } _EL_ } _EL_ ', 'public void writeGolomb(int divisor,int value){ _EL_   int q=value / divisor; _EL_   for (int i=0; i < q; i++) { _EL_     writeBit(1); _EL_   } _EL_   writeBit(0); _EL_   int r=value - q * divisor; _EL_   int bit=31 - Integer.numberOfLeadingZeros(divisor - 1); _EL_   if (r < ((2 << bit) - divisor)) { _EL_     bit--; _EL_   } _EL_  else { _EL_     r+=(2 << bit) - divisor; _EL_   } _EL_   for (; bit >= 0; bit--) { _EL_     writeBit((r >>> bit) & 1); _EL_   } _EL_ } _EL_ ', 'public void addForce(Force f){ _EL_   if (f.isItemForce()) { _EL_     if (iforces.length == iflen) { _EL_       Force[] newf=new Force[iflen + 10]; _EL_       System.arraycopy(iforces,0,newf,0,iforces.length); _EL_       iforces=newf; _EL_     } _EL_     iforces[iflen++]=f; _EL_   } _EL_   if (f.isSpringForce()) { _EL_     if (sforces.length == sflen) { _EL_       Force[] newf=new Force[sflen + 10]; _EL_       System.arraycopy(sforces,0,newf,0,sforces.length); _EL_       sforces=newf; _EL_     } _EL_     sforces[sflen++]=f; _EL_   } _EL_ } _EL_ ', 'public boolean overlaps(String sequence,int start,int end){ _EL_   if (start == MISSING || end == MISSING || end < start) { _EL_     throw new IllegalArgumentException(); _EL_   } _EL_   if (!mSequence.equals(sequence)) { _EL_     return false; _EL_   } _EL_   if ((mEnd != MISSING && start >= mEnd) || (end <= mStart)) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'protected void prepare(){ _EL_   for (  ProcessInfoParameter para : getParameter()) { _EL_     String name=para.getParameterName(); _EL_     if (para.getParameter() == null)     ; _EL_  else     if (name.equals(PARAM_M_Warehouse_ID))     p_M_Warehouse_ID=para.getParameterAsInt(); _EL_  else     log.log(Level.SEVERE,"Unknown Parameter: " + name); _EL_   } _EL_   p_C_Invoice_ID=getRecord_ID(); _EL_ } _EL_ ', 'public boolean isConfigured(){ _EL_   LOG.debug("lookup url: " + url); _EL_   return url != null && !url.isEmpty(); _EL_ } _EL_ ', 'public static String[] commaDelimitedListToStringArray(String str){ _EL_   return delimitedListToStringArray(str,","); _EL_ } _EL_ ', '@Override public byte[] readByteArray(String filePath,long offset,int length){ _EL_   FileChannel fileChannel=updateCache(filePath); _EL_   ByteBuffer byteBffer=read(fileChannel,length,offset); _EL_   return byteBffer.array(); _EL_ } _EL_ ', 'public final void pushPair(int v1,int v2){ _EL_   if (null == m_map) { _EL_     m_map=new int[m_blocksize]; _EL_     m_mapSize=m_blocksize; _EL_   } _EL_  else { _EL_     if ((m_firstFree + 2) >= m_mapSize) { _EL_       m_mapSize+=m_blocksize; _EL_       int newMap[]=new int[m_mapSize]; _EL_       System.arraycopy(m_map,0,newMap,0,m_firstFree); _EL_       m_map=newMap; _EL_     } _EL_   } _EL_   m_map[m_firstFree]=v1; _EL_   m_map[m_firstFree + 1]=v2; _EL_   m_firstFree+=2; _EL_ } _EL_ ', 'public void removeStorage() throws BackupException { _EL_   logger.debug("Removing contents of storage directory: " + dataDirSpec.getAbsolutePath()); _EL_   processHelper.exec("Removing contents of storage directory",rmCmd); _EL_ } _EL_ ', 'private void appendContainerConfig(DockerSlaveTemplate slaveTemplate,CreateContainerCmd containerConfig){ _EL_   Map<String,String> labels=containerConfig.getLabels(); _EL_   if (labels == null) { _EL_     labels=new HashMap<>(); _EL_   } _EL_   labels.put(DOCKER_CLOUD_LABEL,getDisplayName()); _EL_   labels.put(DOCKER_TEMPLATE_LABEL,slaveTemplate.getId()); _EL_   containerConfig.withLabels(labels); _EL_ } _EL_ ', 'public void deleteUsers(Set users) throws AMException, SSOException { _EL_   Iterator iter=users.iterator(); _EL_   while (iter.hasNext()) { _EL_     String userDN=(String)iter.next(); _EL_     AMUser user=new AMUserImpl(super.token,userDN); _EL_     user.delete(); _EL_   } _EL_ } _EL_ ', '@Override public boolean accept(File file){ _EL_   String name=file.getName(); _EL_   for (  String wildcard : wildcards) { _EL_     if (FilenameUtils.wildcardMatch(name,wildcard,caseSensitivity)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void removeRegion(Region r){ _EL_   regions.remove(r); _EL_ } _EL_ ', 'public static void silentCloseInputStream(InputStream is){ _EL_   try { _EL_     if (is != null) { _EL_       is.close(); _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     log.w(LOG_TAG,"Cannot close input stream",e); _EL_   } _EL_ } _EL_ ', '@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException { _EL_   if (requestID == null && localName.equals("batchRequest")) { _EL_     requestID=attributes.getValue("requestID"); _EL_   } _EL_   super.startElement(uri,localName,qName,attributes); _EL_ } _EL_ ', 'public Storage(){ _EL_   this(new File(getTemporaryStorageDirectoryString())); _EL_ } _EL_ ', '@RequiresPermission(Manifest.permission.CAMERA) public CameraSource start() throws IOException { _EL_ synchronized (mCameraLock) { _EL_     if (mCamera != null) { _EL_       return this; _EL_     } _EL_     mCamera=createCamera(); _EL_     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) { _EL_       mDummySurfaceTexture=new SurfaceTexture(DUMMY_TEXTURE_NAME); _EL_       mCamera.setPreviewTexture(mDummySurfaceTexture); _EL_     } _EL_  else { _EL_       mDummySurfaceView=new SurfaceView(mContext); _EL_       mCamera.setPreviewDisplay(mDummySurfaceView.getHolder()); _EL_     } _EL_     mCamera.startPreview(); _EL_     isSafeToTakePicture=true; _EL_     mProcessingThread=new Thread(mFrameProcessor); _EL_     mFrameProcessor.setActive(true); _EL_     mProcessingThread.start(); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public void addBreakpointListener(final BreakpointListener listener){ _EL_   breakpointListeners.add(listener); _EL_ } _EL_ ', 'public void update(Graphics g){ _EL_   if (isShowing()) { _EL_     if (!(peer instanceof LightweightPeer)) { _EL_       g.clearRect(0,0,width,height); _EL_     } _EL_     paint(g); _EL_   } _EL_ } _EL_ ', 'private void releaseWaiters(int phase){ _EL_   QNode q; _EL_   Thread t; _EL_   AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ; _EL_   while ((q=head.get()) != null && q.phase != (int)(root.state >>> PHASE_SHIFT)) { _EL_     if (head.compareAndSet(q,q.next) && (t=q.thread) != null) { _EL_       q.thread=null; _EL_       LockSupport.unpark(t); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static DateFormat toDateTimeFormat(String dateTimeFormat,TimeZone tz,Locale locale){ _EL_   DateFormat df=null; _EL_   if (UtilValidate.isEmpty(dateTimeFormat)) { _EL_     df=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.MEDIUM,locale); _EL_   } _EL_  else { _EL_     df=new SimpleDateFormat(dateTimeFormat,locale == null ? Locale.getDefault() : locale); _EL_   } _EL_   df.setTimeZone(tz); _EL_   return df; _EL_ } _EL_ ', 'public static void printStackTrace(Throwable e){ _EL_   try { _EL_     Debug.printStackTrace(e); _EL_   } _EL_  catch (  Throwable f) { _EL_     e.printStackTrace(); _EL_   } _EL_ } _EL_ ', '@Override public Void visitType(TypeElement e,Void p){ _EL_   scan(e.getTypeParameters(),p); _EL_   checkCamelCase(e,true); _EL_   super.visitType(e,p); _EL_   return null; _EL_ } _EL_ ', 'public Block(boolean multiPush){ _EL_   this(multiPush,"block",null,Arrays.asList("scrape-1","scrape-2")); _EL_ } _EL_ ', 'private double Poisson(double x){ _EL_   return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x)); _EL_ } _EL_ ', 'private void deleteFilesInDir(File dir){ _EL_   for (  File child : dir.listFiles()) { _EL_     child.delete(); _EL_   } _EL_ } _EL_ ', 'public static String trimLeadingCharacter(String str,char leadingCharacter){ _EL_   if (!hasLength(str)) { _EL_     return str; _EL_   } _EL_   StringBuilder sb=new StringBuilder(str); _EL_   while (sb.length() > 0 && sb.charAt(0) == leadingCharacter) { _EL_     sb.deleteCharAt(0); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'public E take() throws InterruptedException { _EL_   final ReentrantLock lock=this.lock; _EL_   lock.lockInterruptibly(); _EL_   long t=now(); _EL_   TenantQueue.Item item=null; _EL_   try { _EL_     for (; ; ) { _EL_       TenantQueue q=nextQueue(t); _EL_       if (q == null)       available.await(); _EL_  else { _EL_         long delay=q.next - t; _EL_         if (delay <= 0) { _EL_           item=q.poll(t); _EL_           return item == null ? null : item.element; _EL_         } _EL_  else         if (leader != null)         available.await(); _EL_  else { _EL_           Thread thisThread=Thread.currentThread(); _EL_           leader=thisThread; _EL_           try { _EL_             available.awaitNanos(delay); _EL_           } _EL_   finally { _EL_             if (leader == thisThread)             leader=null; _EL_           } _EL_         } _EL_       } _EL_       t=System.nanoTime(); _EL_     } _EL_   } _EL_   finally { _EL_     if (leader == null && hasNext())     available.signal(); _EL_     lock.unlock(); _EL_     done(item,t); _EL_   } _EL_ } _EL_ ', 'public boolean threadSafeTimeout(long delayTime,TimeUnit unit,Action0 action){ _EL_   boolean scheduled=true; _EL_   Thread currentThread=Thread.currentThread(); _EL_   if (currentThread.equals(dutyThread)) { _EL_     timerWheel.newTimeout(delayTime,unit,null); _EL_   } _EL_  else { _EL_     scheduled=actions.offer(null); _EL_   } _EL_   return scheduled; _EL_ } _EL_ ', 'void addAttributeSelection(String exp){ _EL_   int index=exp.indexOf(\'=\'); _EL_   String value=null; _EL_   int constraint=AttString.EQUALS; _EL_   if (index != -1) { _EL_     if (index == 0) { _EL_       setTagId(TAG_CSS_ILLEGAL_SELECTOR); _EL_       return; _EL_     } _EL_     int opIndex=index; _EL_     char c=exp.charAt(index - 1); _EL_     if (c == \'~\') { _EL_       constraint=AttString.CONTAINS_WORD; _EL_       opIndex--; _EL_     } _EL_  else     if (c == \'|\') { _EL_       constraint=AttString.BEGINS_WITH; _EL_       opIndex--; _EL_     } _EL_     value=exp.substring(index + 1); _EL_     if (((value.startsWith("\\"")) && (value.endsWith("\\""))) || ((value.startsWith("\'")) && (value.endsWith("\'")))) { _EL_       value=value.substring(1,value.length() - 1); _EL_     } _EL_     exp=exp.substring(0,opIndex); _EL_   } _EL_   if (attributeSelections == null) { _EL_     attributeSelections=new Vector(); _EL_   } _EL_   attributeSelections.addElement(new AttString(exp,constraint,value)); _EL_ } _EL_ ', 'private void createLeftOver(){ _EL_   int lineLengthBytes=currentLastBytePos + 1; _EL_   if (lineLengthBytes > 0) { _EL_     leftOver=new byte[lineLengthBytes]; _EL_     System.arraycopy(data,0,leftOver,0,lineLengthBytes); _EL_   } _EL_  else { _EL_     leftOver=null; _EL_   } _EL_   currentLastBytePos=-1; _EL_ } _EL_ ', 'public Value sample(){ _EL_   int index=sampler.nextInt(actionValues.size()); _EL_   if (actionValuesAsArray == null) { _EL_     actionValuesAsArray=actionValues.toArray(new Value[actionValues.size()]); _EL_   } _EL_   return actionValuesAsArray[index]; _EL_ } _EL_ ', '@Override public void channelClosed(ChannelHandlerContext channelHandlerContext,ChannelStateEvent channelStateEvent) throws Exception { _EL_   curr_conns.decrementAndGet(); _EL_   channelGroup.remove(channelHandlerContext.getChannel()); _EL_ } _EL_ ', 'public static boolean isNextWindow(URI id){ _EL_   return id == null || NEXT.equals(id); _EL_ } _EL_ ', 'public static boolean isVisible(Class<?> clazz,ClassLoader classLoader){ _EL_   if (classLoader == null) { _EL_     return true; _EL_   } _EL_   try { _EL_     Class<?> actualClass=classLoader.loadClass(clazz.getName()); _EL_     return (clazz == actualClass); _EL_   } _EL_  catch (  ClassNotFoundException ex) { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public PropertyXMLBuilder(ServiceSchema serviceSchema,AMModel model,Set attributeSchemas) throws SMSException, SSOException { _EL_   this.model=model; _EL_   this.serviceName=serviceSchema.getServiceName(); _EL_   getServiceResourceBundle(serviceSchema); _EL_   if (serviceBundle != null) { _EL_     mapTypeToAttributeSchema=new HashMap(attributeSchemas.size() * 2); _EL_     mapTypeToAttributeSchema.put(NULL_TYPE,attributeSchemas); _EL_   } _EL_ } _EL_ ', 'public boolean is(String arg,boolean allowAbbr){ _EL_   if (name.equalsIgnoreCase(arg)) { _EL_     return true; _EL_   } _EL_   if (allowAbbr && arg.length() == 1) { _EL_     if (arg.charAt(0) == c) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'void remove(SuperCardToast superCardToast){ _EL_   mList.remove(superCardToast); _EL_ } _EL_ ', 'public static SecretKeys generateKeyFromPassword(String password,String salt) throws GeneralSecurityException { _EL_   return generateKeyFromPassword(password,Base64.decode(salt,BASE64_FLAGS)); _EL_ } _EL_ ', 'protected boolean filterLeftoverView(ViewGroup parent,int childIndex){ _EL_   parent.removeViewAt(childIndex); _EL_   return true; _EL_ } _EL_ ', 'protected boolean declAlreadyDeclared(String prefix){ _EL_   int startDecls=m_contextIndexes.peek(); _EL_   java.util.Vector prefixMappings=m_prefixMappings; _EL_   int nDecls=prefixMappings.size(); _EL_   for (int i=startDecls; i < nDecls; i+=2) { _EL_     String prefixDecl=(String)prefixMappings.elementAt(i); _EL_     if (prefixDecl == null)     continue; _EL_     if (prefixDecl.equals(prefix))     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', '@Override public void step(MessageLogger logger){ _EL_   try { _EL_     addAgent(); _EL_     env.step(); _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'public static AttackStatus calculatePhysicalStatus(Creature attacker,Creature attacked,boolean isMainHand){ _EL_   return calculatePhysicalStatus(attacker,attacked,isMainHand,0,100,false,false); _EL_ } _EL_ ', 'default ClassDeclaration asClass(){ _EL_   throw new UnsupportedOperationException(String.format("%s is not a class",this)); _EL_ } _EL_ ', 'public static InputStream toInputStream(CharSequence input,Charset encoding){ _EL_   return toInputStream(input.toString(),encoding); _EL_ } _EL_ ', 'public static synchronized double partialCorrelation(TetradMatrix submatrix){ _EL_   try { _EL_     TetradMatrix inverse=submatrix.inverse(); _EL_     double a=-1.0 * inverse.get(0,1); _EL_     double v0=inverse.get(0,0); _EL_     double v1=inverse.get(1,1); _EL_     double b=Math.sqrt(v0 * v1); _EL_     return a / b; _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_     return Double.NaN; _EL_   } _EL_ } _EL_ ', 'public void addColumn(String name,String expr){ _EL_   Expression ex=ExpressionParser.parse(expr); _EL_   Throwable t=ExpressionParser.getError(); _EL_   if (t != null) { _EL_     throw new RuntimeException(t); _EL_   } _EL_  else { _EL_     addColumn(name,ex); _EL_   } _EL_ } _EL_ ', 'public void addPutAndGetTimeNanos(long duration){ _EL_   putTimeNanos.addAndGet(duration); _EL_   getTimeNanos.addAndGet(duration); _EL_   if (delegate != null)   delegate.addPutAndGetTimeNanos(duration); _EL_ } _EL_ ', 'private float checkSaturationValid(final float val){ _EL_   float tempval=val; _EL_   if (val > 1) { _EL_     tempval=1; _EL_   } _EL_   if (val < 0) { _EL_     tempval=0; _EL_   } _EL_   return tempval; _EL_ } _EL_ ', 'String parse(String cellStr,int layoutConstant){ _EL_   return cellStr.split(LayoutConstants.CELL_PTRN)[layoutConstant]; _EL_ } _EL_ ', 'public void pseudoPropertyChange(String propName,Object old,Object n){ _EL_   if (log.isDebugEnabled()) { _EL_     log.debug("pseudoPropertyChange: Block \\"" + getSystemName() + " property \\""+ propName+ "\\" new value= "+ n.toString()); _EL_   } _EL_   firePropertyChange(propName,old,n); _EL_ } _EL_ ', '@Override public SelectableChannel selectableChannel(){ _EL_   return socketChannel; _EL_ } _EL_ ', 'public static String fromTag(ByteArrayTag tag){ _EL_   StringBuilder builder=new StringBuilder(); _EL_   builder.append(ARRAY_START); _EL_   boolean start=true; _EL_   for (  byte value : tag.getValue()) { _EL_     ByteTag b=new ByteTag(value); _EL_     if (start) { _EL_       start=false; _EL_     } _EL_  else { _EL_       builder.append(ELEMENT_SEPERATOR); _EL_     } _EL_     builder.append(fromTag(b)); _EL_   } _EL_   builder.append(ARRAY_END); _EL_   return builder.toString(); _EL_ } _EL_ ', '@Override protected void addChooserFilters(JFileChooser chooser){ _EL_   javax.swing.filechooser.FileNameExtensionFilter filter=new javax.swing.filechooser.FileNameExtensionFilter(Bundle.getMessage("FileFilterLabel","*.dfm, *.hex"),"dmf","hex"); _EL_   chooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Digitrax Mangled Firmware (*.dmf)","dmf")); _EL_   chooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Intel Hex Format Firmware (*.hex)","hex")); _EL_   chooser.addChoosableFileFilter(filter); _EL_   chooser.setFileFilter(filter); _EL_ } _EL_ ', 'private static byte[] WindowsRegEnumValue1(int hKey,int valueIndex,int maxValueNameLength){ _EL_   byte[] result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength); _EL_   if (result != null) { _EL_     return result; _EL_   } _EL_  else { _EL_     long sleepTime=INIT_SLEEP_TIME; _EL_     for (int i=0; i < MAX_ATTEMPTS; i++) { _EL_       try { _EL_         Thread.sleep(sleepTime); _EL_       } _EL_  catch (      InterruptedException e) { _EL_         return result; _EL_       } _EL_       sleepTime*=2; _EL_       result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength); _EL_       if (result != null) { _EL_         return result; _EL_       } _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public static DateTime parseRfc822(String str) throws ParseException { _EL_   Date date; _EL_ synchronized (dateTimeFormat822) { _EL_     try { _EL_       date=dateTimeFormat822.parse(str); _EL_     } _EL_  catch (    java.text.ParseException e) { _EL_       throw new ParseException(e); _EL_     } _EL_   } _EL_   return new DateTime(date); _EL_ } _EL_ ', 'public Model validateModel(Dataset dataset,URI shapesGraphURI,Resource minSeverity,boolean validateShapes,Function<RDFNode,String> labelFunction,ProgressMonitor monitor) throws InterruptedException { _EL_   if (dataset.getDefaultModel() == null) { _EL_     throw new IllegalArgumentException("Dataset requires a default model"); _EL_   } _EL_   Model shapesModel=dataset.getNamedModel(shapesGraphURI.toString()); _EL_   if (monitor != null) { _EL_     monitor.subTask("Preparing execution plan"); _EL_   } _EL_   List<Property> constraintProperties=SHACLUtil.getAllConstraintProperties(validateShapes); _EL_   Map<Resource,List<SHConstraint>> map=buildShape2ConstraintsMap(shapesModel,dataset.getDefaultModel(),constraintProperties,validateShapes); _EL_   if (monitor != null) { _EL_     monitor.subTask(""); _EL_   } _EL_   if (monitor != null) { _EL_     monitor.beginTask("Validating constraints for " + map.size() + " shapes...",map.size()); _EL_   } _EL_   Model results=JenaUtil.createMemoryModel(); _EL_   results.setNsPrefixes(dataset.getDefaultModel()); _EL_   for (  Resource shape : map.keySet()) { _EL_     for (    SHConstraint constraint : map.get(shape)) { _EL_       validateConstraintForShape(dataset,shapesGraphURI,minSeverity,constraint,shape,results,labelFunction,monitor); _EL_       if (monitor != null) { _EL_         monitor.worked(1); _EL_         if (monitor.isCanceled()) { _EL_           throw new InterruptedException(); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return results; _EL_ } _EL_ ', 'public PdfPage addAnnotation(PdfAnnotation annotation){ _EL_   return addAnnotation(-1,annotation,true); _EL_ } _EL_ ', 'public static String findPreferredIDP(String realm,HttpServletRequest request){ _EL_   if (request == null) { _EL_     return null; _EL_   } _EL_   String succinctID=request.getParameter(IFSConstants.PROVIDER_ID_KEY); _EL_   if ((succinctID == null) || succinctID.length() == 0) { _EL_     debug.message("FSUtils.findPreferredIDP::Pref IDP not found."); _EL_     return null; _EL_   } _EL_   succinctID=succinctID.trim(); _EL_   String preferredSuccinctId=null; _EL_   StringTokenizer st=new StringTokenizer(succinctID," "); _EL_   while (st.hasMoreTokens()) { _EL_     preferredSuccinctId=st.nextToken(); _EL_     if ((preferredSuccinctId.length() < 28) && st.hasMoreTokens()) { _EL_       preferredSuccinctId=preferredSuccinctId + "+" + st.nextToken(); _EL_     } _EL_   } _EL_   preferredSuccinctId=SAMLUtils.byteArrayToString(Base64.decode(preferredSuccinctId)); _EL_   return getProviderIDFromSuccinctID(realm,preferredSuccinctId); _EL_ } _EL_ ', '@SafeVarargs public final AssertSubscriber<T> assertValuesWith(Consumer<T>... expectations){ _EL_   if (!valuesStorage) { _EL_     throw new IllegalStateException("Using assertNoValues() requires enabling values storage"); _EL_   } _EL_   final int expectedValueCount=expectations.length; _EL_   if (expectedValueCount != values.size()) { _EL_     throw new AssertionError("Different value count: expected = " + expectedValueCount + ", actual = "+ valueCount,null); _EL_   } _EL_   for (int i=0; i < expectedValueCount; i++) { _EL_     Consumer<T> consumer=expectations[i]; _EL_     T actualValue=values.get(i); _EL_     consumer.accept(actualValue); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'private boolean journalRebuildRequired(){ _EL_   final int REDUNDANT_OP_COMPACT_THRESHOLD=2000; _EL_   return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size(); _EL_ } _EL_ ', 'public int findEventPositionNearestTime(Time time,long id){ _EL_   if (mRowInfo == null) { _EL_     return 0; _EL_   } _EL_   long millis=time.toMillis(false); _EL_   long minDistance=Integer.MAX_VALUE; _EL_   long idFoundMinDistance=Integer.MAX_VALUE; _EL_   int minIndex=0; _EL_   int idFoundMinIndex=0; _EL_   int eventInTimeIndex=-1; _EL_   int allDayEventInTimeIndex=-1; _EL_   int allDayEventDay=0; _EL_   int minDay=0; _EL_   boolean idFound=false; _EL_   int len=mRowInfo.size(); _EL_   for (int index=0; index < len; index++) { _EL_     RowInfo row=mRowInfo.get(index); _EL_     if (row.mType == TYPE_DAY) { _EL_       continue; _EL_     } _EL_     if (row.mEventId == id) { _EL_       if (row.mEventStartTimeMilli == millis) { _EL_         return index; _EL_       } _EL_       long distance=Math.abs(millis - row.mEventStartTimeMilli); _EL_       if (distance < idFoundMinDistance) { _EL_         idFoundMinDistance=distance; _EL_         idFoundMinIndex=index; _EL_       } _EL_       idFound=true; _EL_     } _EL_     if (!idFound) { _EL_       if (millis >= row.mEventStartTimeMilli && millis <= row.mEventEndTimeMilli) { _EL_         if (row.mAllDay) { _EL_           if (allDayEventInTimeIndex == -1) { _EL_             allDayEventInTimeIndex=index; _EL_             allDayEventDay=row.mDay; _EL_           } _EL_         } _EL_  else         if (eventInTimeIndex == -1) { _EL_           eventInTimeIndex=index; _EL_         } _EL_       } _EL_  else       if (eventInTimeIndex == -1) { _EL_         long distance=Math.abs(millis - row.mEventStartTimeMilli); _EL_         if (distance < minDistance) { _EL_           minDistance=distance; _EL_           minIndex=index; _EL_           minDay=row.mDay; _EL_         } _EL_       } _EL_     } _EL_   } _EL_   if (idFound) { _EL_     return idFoundMinIndex; _EL_   } _EL_   if (eventInTimeIndex != -1) { _EL_     return eventInTimeIndex; _EL_   } _EL_  else   if (allDayEventInTimeIndex != -1 && minDay != allDayEventDay) { _EL_     return allDayEventInTimeIndex; _EL_   } _EL_   return minIndex; _EL_ } _EL_ ', 'final public void println(float v){ _EL_   String s=String.valueOf(v); _EL_   write(s,0,s.length()); _EL_   println(); _EL_ } _EL_ ', 'private static TranslationResult extractRegister(final ITranslationEnvironment environment,final long offset,final String subRegister) throws InternalTranslationException { _EL_   final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>(); _EL_   final String parentRegister=getParentRegister(subRegister); _EL_   final OperandSize archSize=environment.getArchitectureSize(); _EL_   if (isHigher8BitRegister(subRegister)) { _EL_     final String maskResult=environment.getNextVariableString(); _EL_     final String shiftResult=environment.getNextVariableString(); _EL_     instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,OperandSize.WORD,"65280",OperandSize.WORD,maskResult)); _EL_     instructions.add(ReilHelpers.createBsh(offset + 1,OperandSize.WORD,maskResult,OperandSize.WORD,"-8",OperandSize.BYTE,shiftResult)); _EL_     return new TranslationResult(shiftResult,OperandSize.BYTE,TranslationResultType.REGISTER,null,instructions,offset); _EL_   } _EL_  else { _EL_     final OperandSize subRegisterSize=getRegisterSize(subRegister); _EL_     final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize)); _EL_     final String result=environment.getNextVariableString(); _EL_     instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,subRegisterSize,mask,subRegisterSize,result)); _EL_     return new TranslationResult(result,subRegisterSize,TranslationResultType.REGISTER,null,instructions,offset); _EL_   } _EL_ } _EL_ ', 'public void onLoginFailure(Map requestParamsMap,HttpServletRequest req,HttpServletResponse res) throws AuthenticationException { _EL_   debug.message("ReplayPasswd.onLoginFailure: called"); _EL_ } _EL_ ', 'public Interceptor[] buildMethodInterceptors(Method method){ _EL_   Interceptors before=method.getAnnotation(Interceptors.class); _EL_   return before != null ? createInterceptors(before) : NULL_INTERCEPTOR_ARRAY; _EL_ } _EL_ ', 'static void removeAllPhis(IR ir){ _EL_   for (Instruction s=ir.firstInstructionInCodeOrder(), sentinel=ir.lastInstructionInCodeOrder(), nextInstr=null; s != sentinel; s=nextInstr) { _EL_     nextInstr=s.nextInstructionInCodeOrder(); _EL_     if (Phi.conforms(s))     s.remove(); _EL_   } _EL_ } _EL_ ', 'protected int countToken(String token,String target){ _EL_   int tokenIndex=0; _EL_   int count=0; _EL_   while (tokenIndex != -1) { _EL_     tokenIndex=target.indexOf(token,tokenIndex); _EL_     if (tokenIndex > -1) { _EL_       tokenIndex++; _EL_       count++; _EL_     } _EL_   } _EL_   return count; _EL_ } _EL_ ', 'private Map<TestCase,Set<TestFitnessFunction>> initializeCoverageMapFromTests(List<TestCase> tests){ _EL_   Map<TestCase,Set<TestFitnessFunction>> testToGoals=new LinkedHashMap<>(); _EL_   for (  TestCase test : tests) { _EL_     testToGoals.put(test,filterSupportedGoals(new LinkedHashSet<>(test.getCoveredGoals()))); _EL_   } _EL_   return testToGoals; _EL_ } _EL_ ', 'public Interceptor[] buildRouteInterceptors(Interceptor[] defaultInters,Interceptor[] resourceInters,Class<? extends Resource> resourceClass,Interceptor[] methodInters,Method method){ _EL_   List<Interceptor> allInters=new ArrayList<Interceptor>(); _EL_   for (  Interceptor defaultInter : defaultInters) { _EL_     allInters.add(defaultInter); _EL_   } _EL_   for (  Interceptor resourceInter : resourceInters) { _EL_     allInters.add(resourceInter); _EL_   } _EL_   for (  Interceptor methodInter : methodInters) { _EL_     allInters.add(methodInter); _EL_   } _EL_   Class<? extends Interceptor>[] resourceClears=getResourceClears(resourceClass); _EL_   Class<? extends Interceptor>[] methodClears=getMethodClears(method); _EL_   if ((resourceClears != null && resourceClears.length > 0) || (methodClears != null && methodClears.length > 0)) { _EL_     for (int i=0; i < allInters.size(); i++) { _EL_       i=clearInterceptor(allInters,resourceClears,i); _EL_       i=clearInterceptor(allInters,methodClears,i); _EL_     } _EL_   } _EL_   return allInters.toArray(new Interceptor[allInters.size()]); _EL_ } _EL_ ', 'public static boolean checkGMLFootprint(String footprint){ _EL_   try { _EL_     Configuration configuration=new GMLConfiguration(); _EL_     Parser parser=new Parser(configuration); _EL_     Geometry geom=(Geometry)parser.parse(new InputSource(new StringReader(footprint))); _EL_     if (!geom.isEmpty() && !geom.isValid()) { _EL_       logger.error("Wrong footprint"); _EL_       return false; _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     logger.error("Error in extracted footprint: " + e.getMessage()); _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static double quantile(double p,double k,double theta,double shift){ _EL_   return Math.exp(GammaDistribution.quantile(p,k,theta)) + shift; _EL_ } _EL_ ', 'public static CipherParameters makePBEMacParameters(BCPBEKey pbeKey,AlgorithmParameterSpec spec){ _EL_   if ((spec == null) || !(spec instanceof PBEParameterSpec)) { _EL_     throw new IllegalArgumentException("Need a PBEParameter spec with a PBE key."); _EL_   } _EL_   PBEParameterSpec pbeParam=(PBEParameterSpec)spec; _EL_   PBEParametersGenerator generator=makePBEGenerator(pbeKey.getType(),pbeKey.getDigest()); _EL_   byte[] key=pbeKey.getEncoded(); _EL_   CipherParameters param; _EL_   if (pbeKey.shouldTryWrongPKCS12()) { _EL_     key=new byte[2]; _EL_   } _EL_   generator.init(key,pbeParam.getSalt(),pbeParam.getIterationCount()); _EL_   param=generator.generateDerivedMacParameters(pbeKey.getKeySize()); _EL_   for (int i=0; i != key.length; i++) { _EL_     key[i]=0; _EL_   } _EL_   return param; _EL_ } _EL_ ', 'public OrionEditorInit(final TextEditorConfiguration configuration,final CodeAssistantFactory codeAssistantFactory,final QuickAssistAssistant quickAssist,final OrionEditorPresenter textEditor){ _EL_   this.configuration=configuration; _EL_   this.codeAssistantFactory=codeAssistantFactory; _EL_   this.quickAssist=quickAssist; _EL_   this.textEditor=textEditor; _EL_ } _EL_ ', 'final void putByte(int offset,byte value){ _EL_   unsafe.putByte(offset + address,value); _EL_ } _EL_ ', 'public final void addValidationError(String error){ _EL_   validationErrors.add(error); _EL_ } _EL_ ', 'public static void parseOptionSettingTo(String optionSetting,Map<String,String> dst){ _EL_   int eqIndex=optionSetting.indexOf(\'=\'); _EL_   if (eqIndex == -1) { _EL_     throw new InternalError("Option setting has does not match the pattern <name>=<value>: " + optionSetting); _EL_   } _EL_   dst.put(optionSetting.substring(0,eqIndex),optionSetting.substring(eqIndex + 1)); _EL_ } _EL_ ', 'public BigInteger generateClientCredentials(byte[] salt,byte[] identity,byte[] password){ _EL_   this.x=SRP6Util.calculateX(digest,N,salt,identity,password); _EL_   this.a=selectPrivateValue(); _EL_   this.A=g.modPow(a,N); _EL_   return A; _EL_ } _EL_ ', 'public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException { _EL_   LOG.info("SolrSuggester.build(" + name + ")"); _EL_   dictionary=dictionaryFactory.create(core,searcher); _EL_   lookup.build(dictionary); _EL_   if (storeDir != null) { _EL_     File target=getStoreFile(); _EL_     if (!lookup.store(new FileOutputStream(target))) { _EL_       LOG.error("Store Lookup build failed"); _EL_     } _EL_  else { _EL_       LOG.info("Stored suggest data to: " + target.getAbsolutePath()); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void start(String json){ _EL_   guidedTourSteps.clear(); _EL_   GuidedTourConfiguration configuration=dtoFactory.createDtoFromJson(json,GuidedTourConfiguration.class); _EL_   log.setDebugMode(configuration.getDebugMode()); _EL_   this.guidedTourSteps=configuration.getSteps(); _EL_   this.tourName=configuration.getName(); _EL_   if (this.tourName == null || tourName.isEmpty()) { _EL_     tourName="unamed"; _EL_   } _EL_   this.hasWelcomeStep=configuration.getHasWelcomeStep(); _EL_   startTour(); _EL_ } _EL_ ', 'public void addListener(T listener){ _EL_   if (listener == null) { _EL_     throw new NullPointerException(); _EL_   } _EL_   listeners.add(listener); _EL_ } _EL_ ', 'public static MaildirMessageName createUniqueName(MaildirFolder parentFolder,long size){ _EL_   String timestamp=String.valueOf(System.currentTimeMillis()); _EL_   timestamp=timestamp.substring(0,timestamp.length() - 3); _EL_   StringBuilder uniquePart=new StringBuilder(); _EL_   uniquePart.append(Integer.toHexString(random.nextInt())); _EL_   uniquePart.append(timestamp.substring(timestamp.length() - 3)); _EL_   uniquePart.append(processName); _EL_   uniquePart.append(getNextDeliveryNumber()); _EL_   String sizeString=",S=" + String.valueOf(size); _EL_   String fullName=timestamp + "." + uniquePart.toString()+ "."+ currentHostname+ sizeString; _EL_   MaildirMessageName uniqueName=new MaildirMessageName(parentFolder,fullName); _EL_   uniqueName.timestamp=timestamp; _EL_   uniqueName.uniqueString=uniquePart.toString(); _EL_   uniqueName.hostname=currentHostname; _EL_   uniqueName.sizeString=sizeString; _EL_   uniqueName.isSplit=true; _EL_   uniqueName.size=size; _EL_   return uniqueName; _EL_ } _EL_ ', 'private float clampMag(float value,float absMin,float absMax){ _EL_   final float absValue=Math.abs(value); _EL_   if (absValue < absMin)   return 0; _EL_   if (absValue > absMax)   return value > 0 ? absMax : -absMax; _EL_   return value; _EL_ } _EL_ ', 'private void adjustBCIndex(Instruction barrier){ _EL_   NormalMethod source=barrier.position().method; _EL_   if (source.isForOsrSpecialization()) { _EL_     barrier.adjustBytecodeIndex(-source.getOsrPrologueLength()); _EL_   } _EL_ } _EL_ ', 'public static long[] interpose(long[] vector,int vectorLen,int offset,int len){ _EL_   long[] updated=create(vectorLen + len); _EL_   int idx=offset >> 6; _EL_   System.arraycopy(vector,0,updated,0,idx); _EL_   if (idx < vector.length) { _EL_     int delta=offset & 63; _EL_     updated[idx]|=vector[idx] & maskBelow(delta); _EL_   } _EL_   copy(vector,offset,updated,offset + len,vectorLen - offset); _EL_   return updated; _EL_ } _EL_ ', 'public static File createTemporaryDirectory(String prefix){ _EL_   while (true) { _EL_     String candidateName=prefix + TEMPORARY_DIRECTORY_PRNG.nextInt(); _EL_     File result=new File(System.getProperty("java.io.tmpdir"),candidateName); _EL_     if (result.mkdir()) { _EL_       return result; _EL_     } _EL_   } _EL_ } _EL_ ', 'public static Element createElementInEncryptionSpace(Document doc,String elementName){ _EL_   if (doc == null) { _EL_     throw new RuntimeException("Document is null"); _EL_   } _EL_   if ((xencPrefix == null) || (xencPrefix.length() == 0)) { _EL_     return doc.createElementNS(EncryptionConstants.EncryptionSpecNS,elementName); _EL_   } _EL_   return doc.createElementNS(EncryptionConstants.EncryptionSpecNS,xencPrefix + ":" + elementName); _EL_ } _EL_ ', 'void scrapActiveViews(){ _EL_   final View[] activeViews=mActiveViews; _EL_   final boolean multipleScraps=mViewTypeCount > 1; _EL_   ArrayList<View> scrapViews=mCurrentScrap; _EL_   final int count=activeViews.length; _EL_   for (int i=count - 1; i >= 0; i--) { _EL_     final View victim=activeViews[i]; _EL_     if (victim != null) { _EL_       final LayoutParams lp=(LayoutParams)victim.getLayoutParams(); _EL_       activeViews[i]=null; _EL_       final boolean scrapHasTransientState=ViewCompat.hasTransientState(victim); _EL_       int viewType=lp.viewType; _EL_       if (!shouldRecycleViewType(viewType) || scrapHasTransientState) { _EL_         if (viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER || scrapHasTransientState) { _EL_           removeDetachedView(victim,false); _EL_         } _EL_         if (scrapHasTransientState) { _EL_           if (mTransientStateViews == null) { _EL_             mTransientStateViews=new SparseArrayCompat<View>(); _EL_           } _EL_           mTransientStateViews.put(mFirstActivePosition + i,victim); _EL_         } _EL_         continue; _EL_       } _EL_       if (multipleScraps) { _EL_         scrapViews=mScrapViews[viewType]; _EL_       } _EL_       lp.position=mFirstActivePosition + i; _EL_       scrapViews.add(victim); _EL_     } _EL_   } _EL_   pruneScrapViews(); _EL_ } _EL_ ', 'private void drawWind(Canvas canvas,float y,float xOffset){ _EL_   float cof=(mScreenWidth + xOffset) / (LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT); _EL_   float time=mLoadingAnimationTime; _EL_   if (mLastAnimationTime - mLoadingAnimationTime > 0) { _EL_     mInverseDirection=true; _EL_     time=(LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT) - mLoadingAnimationTime; _EL_   } _EL_  else { _EL_     mNewWindSet=true; _EL_     mInverseDirection=false; _EL_   } _EL_   float x=(mScreenWidth - (time * cof)) + xOffset - mWindLineWidth; _EL_   float xEnd=x + mWindLineWidth; _EL_   canvas.drawLine(x,y,xEnd,y,mWindPaint); _EL_ } _EL_ ', 'private boolean hasProxySettings(Properties settings){ _EL_   String proxyHost=settings.getProperty("org.gnome.system.proxy.http host",null); _EL_   return proxyHost != null && proxyHost.length() > 0; _EL_ } _EL_ ', 'public static Map<String,String> parseKeyAndValueToMap(String source,boolean ignoreSpace){ _EL_   return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,ignoreSpace); _EL_ } _EL_ ', '@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){ _EL_   super.onSizeChanged(w,h,oldw,oldh); _EL_   setupBounds(w,h); _EL_   setupPaints(); _EL_   invalidate(); _EL_ } _EL_ ', 'private void needNewBuffer(int newcount){ _EL_   if (currentBufferIndex < buffers.size() - 1) { _EL_     filledBufferSum+=currentBuffer.length; _EL_     currentBufferIndex++; _EL_     currentBuffer=buffers.get(currentBufferIndex); _EL_   } _EL_  else { _EL_     int newBufferSize; _EL_     if (currentBuffer == null) { _EL_       newBufferSize=newcount; _EL_       filledBufferSum=0; _EL_     } _EL_  else { _EL_       newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum); _EL_       filledBufferSum+=currentBuffer.length; _EL_     } _EL_     currentBufferIndex++; _EL_     currentBuffer=new byte[newBufferSize]; _EL_     buffers.add(currentBuffer); _EL_   } _EL_ } _EL_ ', 'public void resetTeleMissileAttacks(){ _EL_   pendingTeleMissileAttacks.removeAllElements(); _EL_ } _EL_ ', 'public int addPadding(byte[] in,int inOff){ _EL_   byte code=(byte)(in.length - inOff); _EL_   while (inOff < (in.length - 1)) { _EL_     in[inOff]=(byte)random.nextInt(); _EL_     inOff++; _EL_   } _EL_   in[inOff]=code; _EL_   return code; _EL_ } _EL_ ', 'public void addCommands(PDFPage page,Matrix extra){ _EL_ synchronized (commands) { _EL_     addPush(); _EL_     if (extra != null) { _EL_       addXform(extra); _EL_     } _EL_     commands.addAll(page.getCommands()); _EL_     addPop(); _EL_   } _EL_   updateImages(); _EL_ } _EL_ ', 'public double elasticity(final double spot){ _EL_   final double val=value(); _EL_   final double del=delta(spot); _EL_   if (val > Constants.QL_EPSILON)   return del / val * spot; _EL_  else   if (Math.abs(del) < Constants.QL_EPSILON)   return 0.0; _EL_  else   if (del > 0.0)   return Double.MAX_VALUE; _EL_  else   return Double.MIN_VALUE; _EL_ } _EL_ ', 'private byte[] entityToBytes(HttpEntity entity,Request request) throws IOException, ServerError { _EL_   PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength()); _EL_   byte[] buffer=null; _EL_   try { _EL_     InputStream in=entity.getContent(); _EL_     if (in == null) { _EL_       throw new ServerError(); _EL_     } _EL_     buffer=mPool.getBuf(1024); _EL_     int progress=0; _EL_     int count; _EL_     while ((count=in.read(buffer)) != -1) { _EL_       bytes.write(buffer,0,count); _EL_       progress+=count; _EL_       request.progressUpdate(progress); _EL_     } _EL_     return bytes.toByteArray(); _EL_   } _EL_   finally { _EL_     try { _EL_       entity.consumeContent(); _EL_     } _EL_  catch (    IOException e) { _EL_       VinciLog.d("Error occured when calling consumingContent"); _EL_     } _EL_     mPool.returnBuf(buffer); _EL_     bytes.close(); _EL_   } _EL_ } _EL_ ', 'public static float roundDecimal(float value){ _EL_   return roundDecimal(value,Math.log10(INT_PRECISION)); _EL_ } _EL_ ', '@AssistedInject public RunnerImpl(@NotNull RunnerLocalizationConstant locale,@NotNull RunnerCounter runnerCounter,@NotNull GetEnvironmentsUtil util,@NotNull @Assisted RunOptions runOptions,@NotNull @Assisted Scope environmentScope,@Nullable @Assisted String environmentName){ _EL_   this.runOptions=runOptions; _EL_   this.ram=runOptions.getMemorySize(); _EL_   this.title=RUNNER_NAME + runnerCounter.getRunnerNumber() + (environmentName == null ? "" : " - " + getCorrectName(environmentName)); _EL_   this.activeTab=locale.runnerTabConsole(); _EL_   this.status=IN_QUEUE; _EL_   this.scope=environmentScope; _EL_   creationTime=System.currentTimeMillis(); _EL_   String environmentId=runOptions.getEnvironmentId(); _EL_   if (environmentId == null || environmentId.startsWith("project:/")) { _EL_     this.type=util.getType(); _EL_   } _EL_  else { _EL_     this.type=util.getCorrectCategoryName(runOptions.getEnvironmentId()); _EL_   } _EL_   if (environmentId != null) { _EL_     runOptions.setEnvironmentId(environmentId); _EL_   } _EL_ } _EL_ ', 'public String globalInfo(){ _EL_   return "Generates a single train/test split and calls the appropriate " + "SplitEvaluator to generate some results."; _EL_ } _EL_ ', 'private String dateToString(Date input){ _EL_   if (input == null) { _EL_     return null; _EL_   } _EL_  else { _EL_     return input.toString(); _EL_   } _EL_ } _EL_ ', 'private static int componentSize(Component component,FormSpec formSpec,int cellSize,FormLayout.Measure minMeasure,FormLayout.Measure prefMeasure){ _EL_   if (formSpec == null) { _EL_     return prefMeasure.sizeOf(component); _EL_   } _EL_  else   if (formSpec.getSize() == Sizes.MINIMUM) { _EL_     return minMeasure.sizeOf(component); _EL_   } _EL_  else   if (formSpec.getSize() == Sizes.PREFERRED) { _EL_     return prefMeasure.sizeOf(component); _EL_   } _EL_  else { _EL_     return Math.min(cellSize,prefMeasure.sizeOf(component)); _EL_   } _EL_ } _EL_ ', 'public static boolean isSameElementType(ASTNode node1,ASTNode node2){ _EL_   return node1 != null && node2 != null && node1.getElementType() == node1.getElementType(); _EL_ } _EL_ ', 'public void appendDataTo(StringBuilder stringBuilder){ _EL_   stringBuilder.append(buffer); _EL_ } _EL_ ', 'private void loadBinary(DataInputStream is) throws IOException { _EL_   if (is.readInt() != MAGIC) { _EL_     throw new Error("Bad magic in db"); _EL_   } _EL_   if (is.readInt() != VERSION) { _EL_     throw new Error("Bad VERSION in db"); _EL_   } _EL_   continuityWeight=is.readInt(); _EL_   optimalCoupling=is.readInt(); _EL_   extendSelections=is.readInt(); _EL_   joinMethod=is.readInt(); _EL_   joinWeightShift=is.readInt(); _EL_   int weightLength=is.readInt(); _EL_   joinWeights=new int[weightLength]; _EL_   for (int i=0; i < joinWeights.length; i++) { _EL_     joinWeights[i]=is.readInt(); _EL_   } _EL_   int unitsLength=is.readInt(); _EL_   units=new DatabaseClusterUnit[unitsLength]; _EL_   for (int i=0; i < units.length; i++) { _EL_     units[i]=new DatabaseClusterUnit(is); _EL_   } _EL_   int unitTypesLength=is.readInt(); _EL_   unitTypes=new UnitType[unitTypesLength]; _EL_   for (int i=0; i < unitTypes.length; i++) { _EL_     unitTypes[i]=new UnitType(is); _EL_   } _EL_   sts=new SampleSet(is); _EL_   mcep=new SampleSet(is); _EL_   int numCarts=is.readInt(); _EL_   cartMap=new HashMap(); _EL_   for (int i=0; i < numCarts; i++) { _EL_     String name=Utilities.getString(is); _EL_     CART cart=CARTImpl.loadBinary(is); _EL_     cartMap.put(name,cart); _EL_     if (defaultCart == null) { _EL_       defaultCart=cart; _EL_     } _EL_   } _EL_ } _EL_ ', 'private static char[] zzUnpackCMap(String packed){ _EL_   char[] map=new char[0x10000]; _EL_   int i=0; _EL_   int j=0; _EL_   while (i < 1788) { _EL_     int count=packed.charAt(i++); _EL_     char value=packed.charAt(i++); _EL_     do     map[j++]=value; _EL_  while (--count > 0); _EL_   } _EL_   return map; _EL_ } _EL_ ', 'public static int readSingleByte(InputStream in) throws IOException { _EL_   byte[] buffer=new byte[1]; _EL_   int result=in.read(buffer,0,1); _EL_   return (result != -1) ? buffer[0] & 0xff : -1; _EL_ } _EL_ ', 'protected boolean isIDPProxyEnabled(FSAuthnRequest authnRequest) throws FSException { _EL_   if (authnRequest.getMinorVersion() != IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) { _EL_     return false; _EL_   } _EL_   FSScoping scoping=authnRequest.getScoping(); _EL_   if (scoping != null && scoping.getProxyCount() == 0) { _EL_     return false; _EL_   } _EL_   String enabledString=IDFFMetaUtils.getFirstAttributeValueFromConfig(spConfig,IFSConstants.ENABLE_IDP_PROXY); _EL_   if (enabledString != null && enabledString.equalsIgnoreCase("true")) { _EL_     return true; _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'private void compileProlog(ObjectId prolog,File tempDir) throws IOException, CompileException { _EL_   File tempRules=copyToTempFile(prolog,tempDir); _EL_   try { _EL_     Compiler comp=new Compiler(); _EL_     comp.prologToJavaSource(tempRules.getPath(),tempDir.getPath()); _EL_   } _EL_   finally { _EL_     tempRules.delete(); _EL_   } _EL_ } _EL_ ', 'public Spring removeAllListeners(){ _EL_   mListeners.clear(); _EL_   return this; _EL_ } _EL_ ', 'public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException { _EL_   LOG.info("build()"); _EL_   dictionary=dictionaryFactory.create(core,searcher); _EL_   lookup.build(dictionary); _EL_   if (storeDir != null) { _EL_     File target=new File(storeDir,factory.storeFileName()); _EL_     if (!lookup.store(new FileOutputStream(target))) { _EL_       LOG.error("Store Lookup build failed"); _EL_     } _EL_  else { _EL_       LOG.info("Stored suggest data to: " + target.getAbsolutePath()); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static String convertClassNameToResourcePath(String className){ _EL_   Assert.notNull(className,"Class name must not be null"); _EL_   return className.replace(\'.\',\'/\'); _EL_ } _EL_ ', "public URI(String scheme,String schemeSpecificPart,String fragment) throws URISyntaxException { _EL_   StringBuilder uri=new StringBuilder(); _EL_   if (scheme != null) { _EL_     uri.append(scheme); _EL_     uri.append(':'); _EL_   } _EL_   if (schemeSpecificPart != null) { _EL_     ALL_LEGAL_ENCODER.appendEncoded(uri,schemeSpecificPart); _EL_   } _EL_   if (fragment != null) { _EL_     uri.append('#'); _EL_     ALL_LEGAL_ENCODER.appendEncoded(uri,fragment); _EL_   } _EL_   parseURI(uri.toString(),false); _EL_ } _EL_ ", 'private int addToPopulation(Solution solution){ _EL_   int id=nextFreeId(); _EL_   solutions.put(id,solution); _EL_   return id; _EL_ } _EL_ ', 'public byte[] toByteArray(){ _EL_   return Arrays.copyOf(buf,cnt); _EL_ } _EL_ ', 'public void createDiskAsync(final String projectId,final DiskCreateSpec diskCreateSpec,final FutureCallback<Task> responseCallback) throws IOException { _EL_   final String path=String.format("%s/%s/disks",getBasePath(),projectId); _EL_   createObjectAsync(path,serializeObjectAsJson(diskCreateSpec),responseCallback); _EL_ } _EL_ ', '@Override public boolean domainMatch(final String host,final String domain){ _EL_   return host.endsWith(domain); _EL_ } _EL_ ', 'public void push(final Handle handle){ _EL_   mv.visitLdcInsn(handle); _EL_ } _EL_ ', "public static IFitsHeader lookup(String key){ _EL_   int keyLength=key.length(); _EL_   if (keyLength > 0 && Character.isDigit(key.charAt(keyLength - 1))) { _EL_     StringBuilder builder=new StringBuilder(); _EL_     for (int index=0; index < keyLength; index++) { _EL_       char character=key.charAt(index); _EL_       if (Character.isDigit(character)) { _EL_         if (builder.charAt(builder.length() - 1) != 'n') { _EL_           builder.append('n'); _EL_         } _EL_       } _EL_  else { _EL_         builder.append(character); _EL_       } _EL_     } _EL_     return STANDARD_KEYS.get(builder.toString()); _EL_   } _EL_   return STANDARD_KEYS.get(key); _EL_ } _EL_ ", 'private static void assertChangeEvents(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){ _EL_   String inputDesc=String.format("earlyEvents=%s, lateEvents=%s, " + "anytimeEvents=%s, actualEvents=%s",earlyEvents,lateEvents,anytimeEvents,actualEvents); _EL_   Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents); _EL_   Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents); _EL_   Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents); _EL_   for (  PortChangeEvent ev : early) { _EL_     assertFalse("Test setup error. Early and late overlap",late.contains(ev)); _EL_     assertFalse("Test setup error. Early and anytime overlap",any.contains(ev)); _EL_   } _EL_   for (  PortChangeEvent ev : late) { _EL_     assertFalse("Test setup error. Late and early overlap",early.contains(ev)); _EL_     assertFalse("Test setup error. Late and any overlap",any.contains(ev)); _EL_   } _EL_   for (  PortChangeEvent ev : any) { _EL_     assertFalse("Test setup error. Anytime and early overlap",early.contains(ev)); _EL_     assertFalse("Test setup error. Anytime and late overlap",late.contains(ev)); _EL_   } _EL_   for (  PortChangeEvent a : actualEvents) { _EL_     if (early.remove(a)) { _EL_       continue; _EL_     } _EL_     if (any.remove(a)) { _EL_       continue; _EL_     } _EL_     if (late.remove(a)) { _EL_       if (!early.isEmpty()) { _EL_         fail(a + " is in late list, but haven\'t seen all required " + "early events. "+ inputDesc); _EL_       } _EL_  else { _EL_         continue; _EL_       } _EL_     } _EL_     fail(a + " was not expected. " + inputDesc); _EL_   } _EL_   if (!early.isEmpty())   fail("Elements left in early: " + early + ". "+ inputDesc); _EL_   if (!late.isEmpty())   fail("Elements left in late: " + late + ". "+ inputDesc); _EL_   if (!any.isEmpty())   fail("Elements left in any: " + any + ". "+ inputDesc); _EL_ } _EL_ ', 'private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){ _EL_   if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) { _EL_     sb.append((char)bb.get(0)); _EL_     return i + 2; _EL_   } _EL_  else { _EL_     CharBuffer cb=UTF_8_CHARSET.decode(bb); _EL_     sb.append(cb.toString()); _EL_     return i + bb.limit() * 3 - 1; _EL_   } _EL_ } _EL_ ', 'public ArrayFieldVector(FieldVector<T> v1,T[] v2) throws NullArgumentException { _EL_   MathUtils.checkNotNull(v1); _EL_   MathUtils.checkNotNull(v2); _EL_   field=v1.getField(); _EL_   final T[] v1Data=(v1 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)v1).data : v1.toArray(); _EL_   data=MathArrays.buildArray(field,v1Data.length + v2.length); _EL_   System.arraycopy(v1Data,0,data,0,v1Data.length); _EL_   System.arraycopy(v2,0,data,v1Data.length,v2.length); _EL_ } _EL_ ', 'public void reverse(){ _EL_   final ArrayList<Animator> animators=mAnimatedVectorState.mAnimators; _EL_   final int size=animators.size(); _EL_   for (int i=0; i < size; i++) { _EL_     final Animator animator=animators.get(i); _EL_     if (canReverse(animator)) { _EL_       reverse(animator); _EL_     } _EL_  else { _EL_       Log.w(LOG_TAG,"AnimatedVectorDrawable can\'t reverse()"); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void start(){ _EL_   if (sLogger.isActivated()) { _EL_     sLogger.info("Start address book monitoring"); _EL_   } _EL_   mCleanupExecutor=Executors.newSingleThreadExecutor(); _EL_   if (!mObserverIsRegistered) { _EL_     mContactsContractObserver=new ContactsContractObserver(new Handler()); _EL_     mContactsContractCursor=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null); _EL_     CursorUtil.assertCursorIsNotNull(mContactsContractCursor,Phone.CONTENT_URI); _EL_     mContactsContractCursor.registerContentObserver(mContactsContractObserver); _EL_     mObserverIsRegistered=true; _EL_   } _EL_ } _EL_ ', 'protected final void fireVetoableChange(String propertyName,double oldValue,double newValue) throws PropertyVetoException { _EL_   fireVetoableChange(propertyName,Double.valueOf(oldValue),Double.valueOf(newValue)); _EL_ } _EL_ ', 'public User toEntity(UserDTO dto){ _EL_   return toEntity(dto,1); _EL_ } _EL_ ', 'protected void writeExternalForeignKeyDropStmt(Table table,ForeignKey foreignKey,StringBuilder ddl){ _EL_   writeTableAlterStmt(table,ddl); _EL_   ddl.append("DROP CONSTRAINT "); _EL_   printIdentifier(getForeignKeyName(table,foreignKey),ddl); _EL_   printEndOfStatement(ddl); _EL_ } _EL_ ', 'public void obtain(long timeout_ms) throws IOException, InterruptedException, TimeoutException { _EL_   Long quit_time=System.currentTimeMillis() + timeout_ms; _EL_   if (fileLock != null && fileLock.isValid()) { _EL_     return; _EL_   } _EL_   do { _EL_     try { _EL_       fileLock=fileToLock.tryLock(); _EL_       return; _EL_     } _EL_  catch (    OverlappingFileLockException e) { _EL_       Thread.sleep(1000); _EL_     } _EL_   } _EL_  while (System.currentTimeMillis() < quit_time); _EL_   throw new TimeoutException(); _EL_ } _EL_ ', 'public void updatePosition(Particle particle,long elapsedTime){ _EL_   Vector3f speed=particle.getSpeed(); _EL_   float delta=elapsedTime / 1000.0f; _EL_   float dx=speed.x * delta; _EL_   float dy=speed.y * delta; _EL_   float dz=speed.z * delta; _EL_   Vector3f pos=particle.getPosition(); _EL_   particle.setPosition(pos.x + dx,pos.y + dy,pos.z + dz); _EL_ } _EL_ ', 'protected void update(int length){ _EL_   tickLabelValues.clear(); _EL_   tickLabels.clear(); _EL_   tickLabelPositions.clear(); _EL_   if (scale.isLogScaleEnabled()) { _EL_     updateTickLabelForLogScale(length); _EL_   } _EL_  else { _EL_     updateTickLabelForLinearScale(length); _EL_   } _EL_   updateTickVisibility(); _EL_   updateTickLabelMaxLengthAndHeight(); _EL_ } _EL_ ', 'private static boolean isWithinBounds(VisualPosition targetPosition,VisualPosition startPosition,VisualPosition endPosition){ _EL_   return targetPosition.line >= startPosition.line && targetPosition.line <= endPosition.line && targetPosition.column >= startPosition.column && targetPosition.column <= endPosition.column; _EL_ } _EL_ ', 'public void show(@IdRes final int itemId){ _EL_   map.add(itemId); _EL_   navigation.invalidateBadge(itemId); _EL_ } _EL_ ', 'public Options put(String option,Integer value){ _EL_   if (value == null) { _EL_     return remove(option); _EL_   } _EL_   options.put(option,value.toString()); _EL_   return this; _EL_ } _EL_ ', 'private int determineTargetPage(int currentPage,float pageOffset,int velocity,int deltaX){ _EL_   int targetPage; _EL_   if (Math.abs(deltaX) > flingDistance && Math.abs(velocity) > minimumVelocity) { _EL_     if (virtualPos < 0) { _EL_       targetPage=velocity > 0 ? currentPage : currentPage + 1; _EL_     } _EL_  else { _EL_       targetPage=velocity > 0 ? currentPage + 1 : currentPage; _EL_     } _EL_   } _EL_  else { _EL_     final float truncator=currentPage >= currentItem ? 0.4f : 0.6f; _EL_     targetPage=(int)(currentPage + pageOffset + truncator); _EL_   } _EL_   if (items.size() > 0) { _EL_     final ItemInfo firstItem=items.get(0); _EL_     final ItemInfo lastItem=items.get(items.size() - 1); _EL_     targetPage=Math.max(firstItem.position,Math.min(targetPage,lastItem.position)); _EL_   } _EL_   if (targetPage > currentPage && onCardChangeListener != null) { _EL_     onCardChangeListener.onCardDismissed(currentPage,virtualPos > 0); _EL_   } _EL_   return targetPage; _EL_ } _EL_ ', 'protected String form(ObjectMatrix1D matrix,int index,Former formatter){ _EL_   Object value=matrix.get(index); _EL_   if (value == null)   return ""; _EL_   return String.valueOf(value); _EL_ } _EL_ ', 'public void disable(BluetoothAdapter adapter){ _EL_   int mask=(BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG); _EL_   long start=-1; _EL_   BluetoothReceiver receiver=getBluetoothReceiver(mask); _EL_   int state=adapter.getState(); _EL_ switch (state) { _EL_ case BluetoothAdapter.STATE_OFF: _EL_     assertFalse(adapter.isEnabled()); _EL_   removeReceiver(receiver); _EL_ return; _EL_ case BluetoothAdapter.STATE_TURNING_ON: _EL_ assertFalse(adapter.isEnabled()); _EL_ start=System.currentTimeMillis(); _EL_ break; _EL_ case BluetoothAdapter.STATE_ON: _EL_ assertTrue(adapter.isEnabled()); _EL_ start=System.currentTimeMillis(); _EL_ assertTrue(adapter.disable()); _EL_ break; _EL_ case BluetoothAdapter.STATE_TURNING_OFF: _EL_ assertFalse(adapter.isEnabled()); _EL_ mask=0; _EL_ break; _EL_ default : _EL_ removeReceiver(receiver); _EL_ fail(String.format("disable() invalid state: state=%d",state)); _EL_ } _EL_ long s=System.currentTimeMillis(); _EL_ while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) { _EL_ state=adapter.getState(); _EL_ if (state == BluetoothAdapter.STATE_OFF && (receiver.getFiredFlags() & mask) == mask) { _EL_ assertFalse(adapter.isEnabled()); _EL_ long finish=receiver.getCompletedTime(); _EL_ if (start != -1 && finish != -1) { _EL_ writeOutput(String.format("disable() completed in %d ms",(finish - start))); _EL_ } _EL_  else { _EL_ writeOutput("disable() completed"); _EL_ } _EL_ removeReceiver(receiver); _EL_ return; _EL_ } _EL_ sleep(POLL_TIME); _EL_ } _EL_ int firedFlags=receiver.getFiredFlags(); _EL_ removeReceiver(receiver); _EL_ fail(String.format("disable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)",state,BluetoothAdapter.STATE_OFF,firedFlags,mask)); _EL_ } _EL_ ', 'public static String toRegex(String glob,String separator){ _EL_   checkNotNull(separator,"separator must be non-null"); _EL_   checkArgument(separator.length() == 1,"separator must be a single character: %s",separator); _EL_   return toRegex(glob,separator.charAt(0)); _EL_ } _EL_ ', "public static String[] splitWithoutEscaped(String str,char separatorChar,boolean retainEmpty){ _EL_   int len=str.length(); _EL_   if (len == 0) { _EL_     return new String[0]; _EL_   } _EL_   List<String> list=new ArrayList<String>(); _EL_   int i=0; _EL_   int start=0; _EL_   boolean match=false; _EL_   while (i < len) { _EL_     if (str.charAt(i) == '\\\\') { _EL_       match=true; _EL_       i+=2; _EL_     } _EL_  else     if (str.charAt(i) == separatorChar) { _EL_       if (retainEmpty || match) { _EL_         list.add(str.substring(start,i)); _EL_         match=false; _EL_       } _EL_       start=++i; _EL_     } _EL_  else { _EL_       match=true; _EL_       i++; _EL_     } _EL_   } _EL_   if (retainEmpty || match) { _EL_     list.add(str.substring(start,i)); _EL_   } _EL_   return list.toArray(new String[list.size()]); _EL_ } _EL_ ", 'private static HashMap<BasicBlockPair,HashSet<Register>> findSplitPoints(IR ir,LiveAnalysis live,LSTGraph lst){ _EL_   HashMap<BasicBlockPair,HashSet<Register>> result=new HashMap<BasicBlockPair,HashSet<Register>>(10); _EL_   for (Enumeration<GraphNode> e=lst.enumerateNodes(); e.hasMoreElements(); ) { _EL_     LSTNode node=(LSTNode)e.nextElement(); _EL_     BasicBlock header=node.getHeader(); _EL_     BitVector loop=node.getLoop(); _EL_     if (loop == null)     continue; _EL_     for (Enumeration<BasicBlock> in=header.getIn(); in.hasMoreElements(); ) { _EL_       BasicBlock bb=in.nextElement(); _EL_       if (loop.get(bb.getNumber()))       continue; _EL_       HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,header); _EL_       for (      Register r : liveRegisters) { _EL_         if (r.isSymbolic()) { _EL_           HashSet<Register> s=findOrCreateSplitSet(result,bb,header); _EL_           s.add(r); _EL_         } _EL_       } _EL_     } _EL_     for (int i=0; i < loop.length(); i++) { _EL_       if (loop.get(i)) { _EL_         BasicBlock bb=ir.getBasicBlock(i); _EL_         for (Enumeration<BasicBlock> out=bb.getNormalOut(); out.hasMoreElements(); ) { _EL_           BasicBlock dest=out.nextElement(); _EL_           if (loop.get(dest.getNumber()))           continue; _EL_           HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,dest); _EL_           for (          Register r : liveRegisters) { _EL_             if (r.isSymbolic()) { _EL_               HashSet<Register> s=findOrCreateSplitSet(result,bb,dest); _EL_               s.add(r); _EL_             } _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_   addEntriesForInfrequentBlocks(ir,live,result); _EL_   return result; _EL_ } _EL_ ', 'public static void removeObjectAtOffset(Object[] sourceArray,Object[] destinationArray,int offset){ _EL_   System.arraycopy(sourceArray,0,destinationArray,0,offset); _EL_   System.arraycopy(sourceArray,offset + 1,destinationArray,offset,sourceArray.length - offset - 1); _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public DictionaryAdapter(Context context,File dbPath,String dbName,String defaultTable){ _EL_   mContext=context; _EL_   mDbName=dbName; _EL_   mDefaultTable=defaultTable; _EL_   mDbPath=dbPath; _EL_   mDbFile=new File(dbPath,mDbName); _EL_   if (mDbFile.exists()) { _EL_     open(); _EL_   } _EL_ } _EL_ ', 'public boolean isTabAssociatedWithNonDestroyedActivity(boolean isIncognito,int tabId){ _EL_   List<WeakReference<Activity>> activities=ApplicationStatus.getRunningActivities(); _EL_   for (  WeakReference<Activity> ref : activities) { _EL_     Activity activity=ref.get(); _EL_     if (activity != null && isValidActivity(isIncognito,activity.getIntent()) && getTabIdFromIntent(activity.getIntent()) == tabId && !isActivityDestroyed(activity)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'HttpStreamWrapper(HttpStream stream) throws IOException { _EL_   _stream=stream; _EL_ } _EL_ ', 'public boolean handleFile(File file){ _EL_   if (DEBUG) { _EL_     logger.fine("searching finds: " + file.getAbsolutePath()); _EL_   } _EL_   filenames.add(file); _EL_   return true; _EL_ } _EL_ ', 'public boolean looksLikeNumberComing(){ _EL_   if (n >= s.length())   return false; _EL_   return Character.isDigit(s.charAt(n)); _EL_ } _EL_ ', 'public short readShort() throws IOException { _EL_   return primitiveTypes.readShort(); _EL_ } _EL_ ', 'public void print(int inum){ _EL_   print(String.valueOf(inum)); _EL_ } _EL_ ', 'public static <NodeType extends IViewNode<?>>ZyProximityNode<?> createProximityNode(final Graph2D graph,final ZyGraphNode<?> attachedNode,final int degree,final boolean isIncoming){ _EL_   Preconditions.checkNotNull(graph,"Graph argument can not be null"); _EL_   Preconditions.checkNotNull(attachedNode,"Target node argument can not be null"); _EL_   final ZyLabelContent labelcontent=new ZyLabelContent(null); _EL_   labelcontent.addLineContent(new ZyLineContent(String.valueOf(degree),new Font("New Courier",Font.PLAIN,12),null)); _EL_   final ZyProximityNodeRealizer<NodeType> r=new ZyProximityNodeRealizer<NodeType>(labelcontent); _EL_   final Node node=graph.createNode(r); _EL_   @SuppressWarnings("unchecked") final ZyProximityNode<NodeType> infoNode=new ZyProximityNode<NodeType>(node,r,(ZyGraphNode<NodeType>)attachedNode,isIncoming); _EL_   final ZyNodeData<ZyProximityNode<NodeType>> data=new ZyNodeData<ZyProximityNode<NodeType>>(infoNode); _EL_   r.setUserData(data); _EL_   return infoNode; _EL_ } _EL_ ', 'protected CCAnimation(String name,float delay,ArrayList<CCSpriteFrame> frames){ _EL_   delay_=delay; _EL_   name_=name; _EL_   frames_=new ArrayList<CCSpriteFrame>(); _EL_   if (frames != null)   frames_.addAll(frames); _EL_ } _EL_ ', 'private void navigateToDump(){ _EL_   TreePath currentPath=tree.getSelectionPath(); _EL_   tree.setSelectionPath(currentPath.getParentPath()); _EL_   tree.scrollPathToVisible(currentPath.getParentPath()); _EL_ } _EL_ ', 'public synchronized void addMessages(ArrayList<SmsMmsMessage> newMessages){ _EL_   if (newMessages != null) { _EL_     messages.addAll(0,newMessages); _EL_     UpdateMessageCount(); _EL_   } _EL_ } _EL_ ', 'public static Cache.Entry makeRandomCacheEntry(byte[] data,boolean isExpired,boolean needsRefresh){ _EL_   Random random=new Random(); _EL_   Cache.Entry entry=new Cache.Entry(); _EL_   if (data != null) { _EL_     entry.data=data; _EL_   } _EL_  else { _EL_     entry.data=new byte[random.nextInt(1024)]; _EL_   } _EL_   entry.etag=String.valueOf(random.nextLong()); _EL_   entry.serverDate=random.nextLong(); _EL_   entry.ttl=isExpired ? 0 : Long.MAX_VALUE; _EL_   entry.softTtl=needsRefresh ? 0 : Long.MAX_VALUE; _EL_   return entry; _EL_ } _EL_ ', 'public int swap(){ _EL_   if (!egl.eglSwapBuffers(eglDisplay,eglSurface)) { _EL_     return egl.eglGetError(); _EL_   } _EL_   return EGL10.EGL_SUCCESS; _EL_ } _EL_ ', 'public static List<Window> windows(String words,int windowSize){ _EL_   StringTokenizer tokenizer=new StringTokenizer(words); _EL_   List<String> list=new ArrayList<String>(); _EL_   while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken()); _EL_   return windows(list,windowSize); _EL_ } _EL_ ', 'public static String buildPath(JsonPath jsonPath){ _EL_   List<String> urlParts=new LinkedList<>(); _EL_   JsonPath currentJsonPath=jsonPath; _EL_   String pathPart; _EL_   do { _EL_     if (currentJsonPath instanceof RelationshipsPath) { _EL_       pathPart=RELATIONSHIP_MARK + SEPARATOR + currentJsonPath.getElementName(); _EL_     } _EL_  else     if (currentJsonPath instanceof FieldPath) { _EL_       pathPart=currentJsonPath.getElementName(); _EL_     } _EL_  else { _EL_       pathPart=currentJsonPath.getElementName(); _EL_       if (currentJsonPath.getIds() != null) { _EL_         pathPart+=SEPARATOR + mergeIds(currentJsonPath.getIds()); _EL_       } _EL_     } _EL_     urlParts.add(pathPart); _EL_     currentJsonPath=currentJsonPath.getParentResource(); _EL_   } _EL_  while (currentJsonPath != null); _EL_   Collections.reverse(urlParts); _EL_   return SEPARATOR + StringUtils.join(SEPARATOR,urlParts) + SEPARATOR; _EL_ } _EL_ ', 'protected void groupFrames(Vector<Frame> frames,Vector<Group> groups,boolean isDchum) throws MakeTocException { _EL_   Frame frame; _EL_   Group group; _EL_   int groupCount; _EL_   int nFrames=frames.size(); _EL_   Debug.message("maketoc","MakeToc: *** grouping frames ***"); _EL_   for (int i=0; i < nFrames; i++) { _EL_     Debug.message("maketocdetail","MakeToc: group addition, starting outer loop"); _EL_     frame=(Frame)frames.elementAt(i); _EL_     if (!frame.marked) { _EL_       groupCount=groups.size(); _EL_       group=new Group(); _EL_       group.left=maxSide / 2; _EL_       group.right=group.left + 1; _EL_       group.top=maxSide / 2; _EL_       group.bottom=group.top + 1; _EL_       group.horiz_pos[group.top]=frame.top; _EL_       group.horiz_pos[group.bottom]=frame.bottom; _EL_       group.vert_pos[group.left]=frame.left; _EL_       group.vert_pos[group.right]=frame.right; _EL_       group.h_interval=frame.h_interval; _EL_       group.v_interval=frame.v_interval; _EL_       group.h_resolution=frame.h_resolution; _EL_       group.v_resolution=frame.v_resolution; _EL_       group.scale=frame.scale; _EL_       group.zone=frame.zone; _EL_       group.cib=frame.cib; _EL_       group.cdted=frame.cdted; _EL_       frame.x=group.left; _EL_       frame.y=group.top; _EL_       frame.group=groupCount; _EL_       frame.marked=true; _EL_       Debug.message("maketocdetail","Maketoc.groupFrames: created group " + groupCount + " for frame "+ i+ ", - "+ frame.filename+ " checking other frames for neighbors"); _EL_       if (!isDchum) { _EL_         for (int j=0; j < nFrames; j++) { _EL_           if (i == j) { _EL_             Debug.message("maketocdetail","Maketoc.groupFrames: inner loop, i = j = " + i + ", frame that created group added to group, expecting false return"); _EL_             continue; _EL_           } _EL_           Frame f=(Frame)frames.elementAt(j); _EL_           if (addFrameToGroup(group,f,groupCount)) { _EL_             Debug.message("maketocdetail","Maketoc.groupFrames: added frame " + j + " to group "+ groupCount); _EL_             continue; _EL_           } _EL_         } _EL_       } _EL_       Debug.message("maketocdetail","Maketoc.groupFrames: adding another group - " + groupCount + " *******************\\n\\n"); _EL_       groups.add(group); _EL_     } _EL_     fireProgressUpdate(ProgressEvent.UPDATE,"Organizing frames",i,nFrames); _EL_   } _EL_   if (Debug.debugging("maketoc")) { _EL_     Debug.output("MakeToc: Number of boundary rectangles (groups): " + groups.size()); _EL_   } _EL_ } _EL_ ', 'private static Object add(final Object array,final int index,final Object element,final Class<?> clss){ _EL_   if (array == null) { _EL_     if (index != 0) { _EL_       throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0"); _EL_     } _EL_     Object joinedArray=Array.newInstance(clss,1); _EL_     Array.set(joinedArray,0,element); _EL_     return joinedArray; _EL_   } _EL_   int length=Array.getLength(array); _EL_   if (index > length || index < 0) { _EL_     throw new IndexOutOfBoundsException("Index: " + index + ", Length: "+ length); _EL_   } _EL_   Object result=Array.newInstance(clss,length + 1); _EL_   System.arraycopy(array,0,result,0,index); _EL_   Array.set(result,index,element); _EL_   if (index < length) { _EL_     System.arraycopy(array,index,result,index + 1,length - index); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public double doubleValue(){ _EL_   return d.doubleValue(); _EL_ } _EL_ ', 'public String toMatlab(){ _EL_   StringBuffer result; _EL_   int i; _EL_   int n; _EL_   result=new StringBuffer(); _EL_   result.append("["); _EL_   for (i=0; i < getRowDimension(); i++) { _EL_     if (i > 0) { _EL_       result.append("; "); _EL_     } _EL_     for (n=0; n < getColumnDimension(); n++) { _EL_       if (n > 0) { _EL_         result.append(" "); _EL_       } _EL_       result.append(Double.toString(get(i,n))); _EL_     } _EL_   } _EL_   result.append("]"); _EL_   return result.toString(); _EL_ } _EL_ ', 'public FileInputReader(File f) throws IOException { _EL_   if (Debug.debugging("binaryfile")) { _EL_     Debug.output("FileInputReader created from " + f.getAbsolutePath()); _EL_   } _EL_   name=f.getName(); _EL_   absolutePath=f.getAbsolutePath(); _EL_   inputFile=init(f); _EL_ } _EL_ ', 'public static ObjectOutputStream newObjectOutputStream(Path self) throws IOException { _EL_   return new ObjectOutputStream(Files.newOutputStream(self)); _EL_ } _EL_ ', 'public void add(final CertificateValidity certificateValidity){ _EL_   certificateValidityList.add(certificateValidity); _EL_ } _EL_ ', 'public static Result verify(String sid,String code){ _EL_   String id="//captcha/" + sid; _EL_   Code c=(Code)Cache.get(id); _EL_   if (c == null) { _EL_     log.warn("no code in cache, sid=" + sid); _EL_     return Result.badcode; _EL_   } _EL_  else   if (!X.isSame(code,c.code)) { _EL_     log.warn("is not same, code.server=" + c.code + ", code.client="+ code); _EL_     return Result.badcode; _EL_   } _EL_  else   if (c.expired < System.currentTimeMillis()) { _EL_     log.warn("expired, expired=" + c.expired); _EL_     return Result.expired; _EL_   } _EL_   return Result.ok; _EL_ } _EL_ ', 'private ScriptEngine newScriptEngine(File file) throws ScriptException { _EL_   String filename=file.getName(); _EL_   int index=filename.lastIndexOf(\'.\'); _EL_   if ((index < 0) || (index >= filename.length() - 1)) { _EL_     throw new ScriptException("file has no extension"); _EL_   } _EL_   String extension=filename.substring(index + 1); _EL_   ScriptEngineManager manager=new ScriptEngineManager(); _EL_   ScriptEngine engine=manager.getEngineByExtension(extension); _EL_   if (engine == null) { _EL_     throw new ScriptException("no scripting engine for extension ." + extension); _EL_   } _EL_   return engine; _EL_ } _EL_ ', 'protected static INaviRawModule findRawModule(final int rawModuleId,final List<INaviRawModule> rawModules){ _EL_   Preconditions.checkArgument(rawModuleId > 0,"Raw module id %s must be positive integer",rawModuleId); _EL_   Preconditions.checkNotNull(rawModules,"IE02263: raw modules argument can not be null"); _EL_   for (  final INaviRawModule rawModule : rawModules) { _EL_     if (rawModule.getId() == rawModuleId) { _EL_       return rawModule; _EL_     } _EL_   } _EL_   throw new IllegalStateException("IE00160: Could not find raw module"); _EL_ } _EL_ ', '@Override public JapaneseDate dateYearDay(int prolepticYear,int dayOfYear){ _EL_   return new JapaneseDate(LocalDate.ofYearDay(prolepticYear,dayOfYear)); _EL_ } _EL_ ', 'private Pair<Entry,char[]> recoverEntry(KeyStore ks,String alias,char[] pstore,char[] pkey) throws Exception { _EL_   if (ks.containsAlias(alias) == false) { _EL_     MessageFormat form=new MessageFormat(rb.getString("Alias.alias.does.not.exist")); _EL_     Object[] source={alias}; _EL_     throw new Exception(form.format(source)); _EL_   } _EL_   PasswordProtection pp=null; _EL_   Entry entry; _EL_   try { _EL_     entry=ks.getEntry(alias,pp); _EL_     pkey=null; _EL_   } _EL_  catch (  UnrecoverableEntryException une) { _EL_     if (P11KEYSTORE.equalsIgnoreCase(ks.getType()) || KeyStoreUtil.isWindowsKeyStore(ks.getType())) { _EL_       throw une; _EL_     } _EL_     if (pkey != null) { _EL_       pp=new PasswordProtection(pkey); _EL_       entry=ks.getEntry(alias,pp); _EL_     } _EL_  else { _EL_       try { _EL_         pp=new PasswordProtection(pstore); _EL_         entry=ks.getEntry(alias,pp); _EL_         pkey=pstore; _EL_       } _EL_  catch (      UnrecoverableEntryException une2) { _EL_         if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) { _EL_           throw une2; _EL_         } _EL_  else { _EL_           pkey=getKeyPasswd(alias,null,null); _EL_           pp=new PasswordProtection(pkey); _EL_           entry=ks.getEntry(alias,pp); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return Pair.of(entry,pkey); _EL_ } _EL_ ', 'URLClassLoader newLoader(URL base){ _EL_   return new URLClassLoader(new URL[]{base}); _EL_ } _EL_ ', 'public Wiser(){ _EL_   this.server=new SMTPServer(new SimpleMessageListenerAdapter(this)); _EL_ } _EL_ ', 'protected static int[] concat(@Nullable int[] arr,int... obj){ _EL_   int[] newArr; _EL_   if (arr == null || arr.length == 0)   newArr=obj; _EL_  else { _EL_     newArr=Arrays.copyOf(arr,arr.length + obj.length); _EL_     System.arraycopy(obj,0,newArr,arr.length,obj.length); _EL_   } _EL_   return newArr; _EL_ } _EL_ ', 'public void truckCamera(float size){ _EL_   moveToPosition(-(float)(targetXoff + (size * Math.sin(Math.toRadians(zrot - 90)))),-(float)(targetYoff + (size * Math.cos(Math.toRadians(zrot - 90))))); _EL_ } _EL_ ', 'public static byte[] decode2(String encoded){ _EL_   if (encoded == null) { _EL_     return null; _EL_   } _EL_   char[] base64Data=encoded.toCharArray(); _EL_   int len=removeWhiteSpace(base64Data); _EL_   if (len % FOURBYTE != 0) { _EL_     return null; _EL_   } _EL_   int numberQuadruple=(len / FOURBYTE); _EL_   if (numberQuadruple == 0) { _EL_     return new byte[0]; _EL_   } _EL_   byte decodedData[]=null; _EL_   byte b1=0, b2=0, b3=0, b4=0; _EL_   char d1=0, d2=0, d3=0, d4=0; _EL_   int i=0; _EL_   int encodedIndex=0; _EL_   int dataIndex=0; _EL_   decodedData=new byte[(numberQuadruple) * 3]; _EL_   for (; i < numberQuadruple - 1; i++) { _EL_     if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) { _EL_       return null; _EL_     } _EL_     b1=base64Alphabet[d1]; _EL_     b2=base64Alphabet[d2]; _EL_     b3=base64Alphabet[d3]; _EL_     b4=base64Alphabet[d4]; _EL_     decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4); _EL_     decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf)); _EL_     decodedData[encodedIndex++]=(byte)(b3 << 6 | b4); _EL_   } _EL_   if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) { _EL_     return null; _EL_   } _EL_   b1=base64Alphabet[d1]; _EL_   b2=base64Alphabet[d2]; _EL_   d3=base64Data[dataIndex++]; _EL_   d4=base64Data[dataIndex++]; _EL_   if (!isData((d3)) || !isData((d4))) { _EL_     if (isPad(d3) && isPad(d4)) { _EL_       if ((b2 & 0xf) != 0) { _EL_         return null; _EL_       } _EL_       byte[] tmp=new byte[i * 3 + 1]; _EL_       System.arraycopy(decodedData,0,tmp,0,i * 3); _EL_       tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4); _EL_       return tmp; _EL_     } _EL_  else     if (!isPad(d3) && isPad(d4)) { _EL_       b3=base64Alphabet[d3]; _EL_       if ((b3 & 0x3) != 0) { _EL_         return null; _EL_       } _EL_       byte[] tmp=new byte[i * 3 + 2]; _EL_       System.arraycopy(decodedData,0,tmp,0,i * 3); _EL_       tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4); _EL_       tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf)); _EL_       return tmp; _EL_     } _EL_  else { _EL_       return null; _EL_     } _EL_   } _EL_  else { _EL_     b3=base64Alphabet[d3]; _EL_     b4=base64Alphabet[d4]; _EL_     decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4); _EL_     decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf)); _EL_     decodedData[encodedIndex++]=(byte)(b3 << 6 | b4); _EL_   } _EL_   return decodedData; _EL_ } _EL_ ', 'public void shutdown(){ _EL_   scheduledExecutorService.shutdownNow(); _EL_ } _EL_ ', 'public Builder clear(){ _EL_   localeBuilder.clear(); _EL_   return this; _EL_ } _EL_ ', 'private static void cleanDirectory(File path){ _EL_   if (path == null)   return; _EL_   if (path.exists()) { _EL_     for (    File f : path.listFiles()) { _EL_       if (f.isDirectory())       cleanDirectory(f); _EL_       f.delete(); _EL_     } _EL_   } _EL_ } _EL_ ', 'private GridCacheVersion minVersion(Iterable<IgniteTxEntry> entries,GridCacheVersion min,IgniteInternalTx tx){ _EL_   for (  IgniteTxEntry txEntry : entries) { _EL_     GridCacheEntryEx cached=txEntry.cached(); _EL_     assert txEntry.isRead() || !cached.obsolete(tx.xidVersion()) : "Invalid obsolete version for transaction [entry=" + cached + ", tx="+ tx+ \']\'; _EL_     for (    GridCacheMvccCandidate cand : cached.remoteMvccSnapshot())     if (min == null || cand.version().isLess(min))     min=cand.version(); _EL_   } _EL_   return min; _EL_ } _EL_ ', 'public DimensionedScalar(String fieldValue) throws IllegalArgumentException { _EL_   super("",""); _EL_   Matcher matcher=PATTERN.matcher(fieldValue); _EL_   if (matcher.find()) { _EL_     String name=matcher.group(1); _EL_     String dimensions=matcher.group(2); _EL_     String value=matcher.group(3); _EL_     setName(name); _EL_     setValue(value); _EL_     this.dimensions=new Dimensions(dimensions); _EL_   } _EL_  else { _EL_     throw new DictionaryException("CANNOT PARSE:  >" + fieldValue + "<"); _EL_   } _EL_ } _EL_ ', 'public void characters(char ch[],int start,int length) throws SAXException { _EL_   m_valueBuffer.append(ch,start,length); _EL_ } _EL_ ', 'protected double computeStdDev(Instance inst,Matrix k) throws Exception { _EL_   double kappa=m_kernel.eval(-1,-1,inst) + m_deltaSquared; _EL_   double s=0; _EL_   int n=m_L.length; _EL_   for (int i=0; i < n; i++) { _EL_     double t=0; _EL_     for (int j=0; j < n; j++) { _EL_       t-=k.get(j,0) * (i > j ? m_L[i][j] : m_L[j][i]); _EL_     } _EL_     s+=t * k.get(i,0); _EL_   } _EL_   double sigma=m_delta; _EL_   if (kappa > s) { _EL_     sigma=Math.sqrt(kappa - s); _EL_   } _EL_   return sigma; _EL_ } _EL_ ', 'public void add(int index,int element){ _EL_   checkRangeIncludingEndpoint(index); _EL_   ensureCapacity(size + 1); _EL_   int numtomove=size - index; _EL_   System.arraycopy(array,index,array,index + 1,numtomove); _EL_   array[index]=element; _EL_   size++; _EL_ } _EL_ ', 'public boolean matchesRawNamePattern(Object item){ _EL_   String prefix=patternMatcher.getPattern(); _EL_   String text=getElementName(item); _EL_   if (text == null)   return false; _EL_   int textLength=text.length(); _EL_   int prefixLength=prefix.length(); _EL_   if (textLength < prefixLength) { _EL_     return false; _EL_   } _EL_   for (int i=prefixLength - 1; i >= 0; i--) { _EL_     if (Character.toLowerCase(prefix.charAt(i)) != Character.toLowerCase(text.charAt(i)))     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static @Nonnull <T>T valueOrDefault(@Nullable T value,@Nonnull T defaultValue){ _EL_   return value == null ? defaultValue : value; _EL_ } _EL_ ', 'public void paintComponent(Graphics g){ _EL_   g.drawImage(track,0,0,null); _EL_   Graphics2D g2d=(Graphics2D)g.create(); _EL_   g2d.translate(carPosition.x,carPosition.y); _EL_   g2d.rotate(Math.toRadians(carRotation)); _EL_   g2d.translate(-(carPosition.x),-(carPosition.y)); _EL_   g2d.drawImage(car,carPosition.x - carWHalf,carPosition.y - carHHalf,null); _EL_ } _EL_ ', 'public static java.sql.Time toSqlTime(String time){ _EL_   java.util.Date newDate=toDate("1/1/1970",time); _EL_   if (newDate != null) { _EL_     return new java.sql.Time(newDate.getTime()); _EL_   } _EL_  else { _EL_     return null; _EL_   } _EL_ } _EL_ ', 'private void parseMenu(XmlPullParser parser,AttributeSet attrs,SublimeMenu menu) throws XmlPullParserException, IOException { _EL_   MenuState menuState=new MenuState(menu); _EL_   int eventType=parser.getEventType(); _EL_   String tagName; _EL_   boolean lookingForEndOfUnknownTag=false; _EL_   String unknownTagName=null; _EL_   do { _EL_     if (eventType == XmlPullParser.START_TAG) { _EL_       tagName=parser.getName(); _EL_       if (tagName.equals(XML_MENU)) { _EL_         eventType=parser.next(); _EL_         break; _EL_       } _EL_       throw new RuntimeException("Expecting menu, got " + tagName); _EL_     } _EL_     eventType=parser.next(); _EL_   } _EL_  while (eventType != XmlPullParser.END_DOCUMENT); _EL_   boolean reachedEndOfMenu=false; _EL_   while (!reachedEndOfMenu) { _EL_ switch (eventType) { _EL_ case XmlPullParser.START_TAG: _EL_       if (lookingForEndOfUnknownTag) { _EL_         break; _EL_       } _EL_     tagName=parser.getName(); _EL_   if (tagName.equals(XML_GROUP)) { _EL_     if (menuState.groupId != MenuState.defaultGroupId) { _EL_       throw new RuntimeException("A \'Group\' item cannot have " + "other \'Group\' items as children."); _EL_     } _EL_     menuState.readGroup(attrs); _EL_     menuState.addGroup(); _EL_   } _EL_  else   if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)) { _EL_     menuState.readMenuItem(attrs,tagName); _EL_   } _EL_  else   if (tagName.equals(XML_SEPARATOR)) { _EL_     menuState.readMenuItem(attrs,tagName); _EL_   } _EL_  else   if (tagName.equals(XML_GROUP_HEADER)) { _EL_     if (menuState.groupId == MenuState.defaultGroupId) { _EL_       throw new RuntimeException("\'GroupHeader\' item should " + "be placed inside a Group element."); _EL_     } _EL_     menuState.readMenuItem(attrs,tagName); _EL_   } _EL_  else   if (tagName.equals(XML_MENU)) { _EL_     throw new RuntimeException("Sub-menus are not supported. " + "Similar functionality can be afforded " + "using the \'group\' tag."); _EL_   } _EL_  else { _EL_     lookingForEndOfUnknownTag=true; _EL_     unknownTagName=tagName; _EL_   } _EL_ break; _EL_ case XmlPullParser.END_TAG: _EL_ tagName=parser.getName(); _EL_ if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) { _EL_ lookingForEndOfUnknownTag=false; _EL_ unknownTagName=null; _EL_ } _EL_  else if (tagName.equals(XML_GROUP)) { _EL_ if (menuState.isGroupCollapsible() && menuState.groupHeadersAdded != 1) { _EL_ if (menuState.groupHeadersAdded < 1) { _EL_   throw new RuntimeException("A \'GroupHeader\' is required " + "to create a \'collapsible\' Group."); _EL_ } _EL_  else { _EL_   throw new RuntimeException("A \'collapsible\' Group can only " + "have ONE \'GroupHeader\'. You have provided: " + menuState.groupHeadersAdded + "."); _EL_ } _EL_ } _EL_ menuState.resetGroup(); _EL_ } _EL_  else if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)|| tagName.equals(XML_GROUP_HEADER)|| tagName.equals(XML_SEPARATOR)) { _EL_ if (!menuState.hasAddedItem()) { _EL_ menuState.addItem(); _EL_ } _EL_ } _EL_  else if (tagName.equals(XML_MENU)) { _EL_ reachedEndOfMenu=true; _EL_ } _EL_ break; _EL_ case XmlPullParser.END_DOCUMENT: _EL_ throw new RuntimeException("Unexpected end of document"); _EL_ } _EL_ eventType=parser.next(); _EL_ } _EL_ } _EL_ ', 'public static double crossTrackDistanceRad(double lat1,double lon1,double lat2,double lon2,double latQ,double lonQ){ _EL_   final double dlon12=lon2 - lon1; _EL_   final double dlon1Q=lonQ - lon1; _EL_   final double dlat1Q=latQ - lat1; _EL_   final double clat1=Math.cos(lat1), slat1=MathUtil.cosToSin(lat1,clat1); _EL_   final double clatQ=Math.cos(latQ), slatQ=MathUtil.cosToSin(latQ,clatQ); _EL_   final double clat2=Math.cos(lat2), slat2=MathUtil.cosToSin(lat2,clat2); _EL_   final double slat=Math.sin(dlat1Q * .5); _EL_   final double slon=Math.sin(dlon1Q * .5); _EL_   final double a=slat * slat + slon * slon * clat1* clatQ; _EL_   final double angDist1Q=2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a)); _EL_   final double sdlon12=Math.sin(dlon12), cdlon12=MathUtil.sinToCos(dlon12,sdlon12); _EL_   final double sdlon1Q=Math.sin(dlon1Q), cdlon1Q=MathUtil.sinToCos(dlon1Q,sdlon1Q); _EL_   final double yE=sdlon12 * clat2; _EL_   final double yQ=sdlon1Q * clatQ; _EL_   final double xE=clat1 * slat2 - slat1 * clat2 * cdlon12; _EL_   final double xQ=clat1 * slatQ - slat1 * clatQ * cdlon1Q; _EL_   final double crs12=Math.atan2(yE,xE); _EL_   final double crs1Q=Math.atan2(yQ,xQ); _EL_   return Math.asin(Math.sin(angDist1Q) * Math.sin(crs1Q - crs12)); _EL_ } _EL_ ', 'public String chooseServerAlias(String keyType,Principal[] issuers,Socket socket){ _EL_   return defaultX509KM.chooseServerAlias(keyType,issuers,socket); _EL_ } _EL_ ', 'public String charge(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){ _EL_   Integer C_Charge_ID=(Integer)value; _EL_   if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return ""; _EL_   String sql="SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?"; _EL_   PreparedStatement pstmt=null; _EL_   ResultSet rs=null; _EL_   try { _EL_     pstmt=DB.prepareStatement(sql,null); _EL_     pstmt.setInt(1,C_Charge_ID.intValue()); _EL_     rs=pstmt.executeQuery(); _EL_     if (rs.next()) { _EL_       mTab.setValue("PriceEntered",rs.getBigDecimal(1)); _EL_     } _EL_   } _EL_  catch (  SQLException e) { _EL_     log.log(Level.SEVERE,sql,e); _EL_     return e.getLocalizedMessage(); _EL_   } _EL_  finally { _EL_     DB.close(rs,pstmt); _EL_     rs=null; _EL_     pstmt=null; _EL_   } _EL_   return tax(ctx,WindowNo,mTab,mField,value); _EL_ } _EL_ ', 'protected Array<Actor> parse(){ _EL_   actors=GdxArrays.newArray(Actor.class); _EL_   invokePreListeners(actors); _EL_   final StringBuilder builder=new StringBuilder(); _EL_   while (templateReader.hasNextCharacter()) { _EL_     final char character=templateReader.nextCharacter(); _EL_     if (character == syntax.getArgumentOpening()) { _EL_       processArgument(); _EL_     } _EL_  else     if (character == syntax.getTagOpening()) { _EL_       if (isNextCharacterCommentOpening()) { _EL_         processComment(); _EL_         continue; _EL_       } _EL_       if (currentParentTag != null) { _EL_         currentParentTag.handleDataBetweenTags(builder); _EL_       } _EL_       Strings.clearBuilder(builder); _EL_       processTag(builder); _EL_     } _EL_  else { _EL_       builder.append(character); _EL_     } _EL_   } _EL_   if (currentParentTag != null) { _EL_     throwError(\'"\' + currentParentTag.getTagName() + "\\" tag was never closed."); _EL_   } _EL_   invokePortListeners(actors); _EL_   return actors; _EL_ } _EL_ ', 'public void flush() throws IOException { _EL_   WspUtil.writeUint8(os_,0x01); _EL_   writePublicIdentifier(os_,publicID_); _EL_   WspUtil.writeUintvar(os_,WapConstants.MIB_ENUM_UTF_8); _EL_   writeStringTable(os_); _EL_   wbxmlBody_.close(); _EL_   wbxmlBody_.writeTo(os_); _EL_   os_.flush(); _EL_ } _EL_ ', '@Override public PacketBuffer write(PacketBuffer buf){ _EL_   values.forEach(null); _EL_   return buf; _EL_ } _EL_ ', 'public final void registerFileType(@NotNull FileType type,@NonNls @Nullable String... defaultAssociatedExtensions){ _EL_   List<FileNameMatcher> matchers=new ArrayList<FileNameMatcher>(); _EL_   if (defaultAssociatedExtensions != null) { _EL_     for (    String extension : defaultAssociatedExtensions) { _EL_       matchers.add(new ExtensionFileNameMatcher(extension)); _EL_     } _EL_   } _EL_   registerFileType(type,matchers); _EL_ } _EL_ ', 'public int parseInt(String localeFormattedInteger){ _EL_   return Integer.parseInt(localeFormattedInteger); _EL_ } _EL_ ', 'public static RequestSecurityTokenResponse parseXML(String xml) throws WSFederationException { _EL_   Document doc=XMLUtils.toDOMDocument(xml,debug); _EL_   Element root=doc.getDocumentElement(); _EL_   return new RequestSecurityTokenResponse(root); _EL_ } _EL_ ', '@Override public void requestResources(SamzaResourceRequest resourceRequest){ _EL_   final int DEFAULT_PRIORITY=0; _EL_   log.info("Requesting resources on  " + resourceRequest.getPreferredHost() + " for container "+ resourceRequest.getContainerID()); _EL_   int memoryMb=resourceRequest.getMemoryMB(); _EL_   int cpuCores=resourceRequest.getNumCores(); _EL_   String containerLabel=yarnConfig.getContainerLabel(); _EL_   String preferredHost=resourceRequest.getPreferredHost(); _EL_   Resource capability=Resource.newInstance(memoryMb,cpuCores); _EL_   Priority priority=Priority.newInstance(DEFAULT_PRIORITY); _EL_   AMRMClient.ContainerRequest issuedRequest; _EL_   if (preferredHost.equals("ANY_HOST")) { _EL_     log.info("Making a request for ANY_HOST " + preferredHost); _EL_     issuedRequest=new AMRMClient.ContainerRequest(capability,null,null,priority,true,containerLabel); _EL_   } _EL_  else { _EL_     log.info("Making a preferred host request on " + preferredHost); _EL_     issuedRequest=new AMRMClient.ContainerRequest(capability,new String[]{preferredHost},null,priority,true,containerLabel); _EL_   } _EL_ synchronized (lock) { _EL_     requestsMap.put(resourceRequest,issuedRequest); _EL_     amClient.addContainerRequest(issuedRequest); _EL_   } _EL_ } _EL_ ', 'public boolean add(symbol sym) throws internal_error { _EL_   Object previous; _EL_   not_null(sym); _EL_   previous=_all.put(sym.name(),sym); _EL_   return previous == null; _EL_ } _EL_ ', 'public static long longFromBase64(String value){ _EL_   int pos=0; _EL_   long longVal=base64Values[value.charAt(pos++)]; _EL_   int len=value.length(); _EL_   while (pos < len) { _EL_     longVal<<=6; _EL_     longVal|=base64Values[value.charAt(pos++)]; _EL_   } _EL_   return longVal; _EL_ } _EL_ ', 'public synchronized void end(){ _EL_   graphicsToBeDrawn.close(); _EL_   if (currentGraphics != null) { _EL_     graphicsDrawn.append(currentGraphics); _EL_   } _EL_   graphicsDrawn.closeWhenEmpty(); _EL_   if (printerJobThread != null && printerJobThread.isAlive()) { _EL_     try { _EL_       printerJobThread.join(); _EL_     } _EL_  catch (    InterruptedException e) { _EL_     } _EL_   } _EL_ } _EL_ ', 'public List<FileStatus> browse(String filePath) throws Exception { _EL_   LOG.info("HDFS File Path   :  " + filePath + "   and EndPoint  : "+ hdfsEndPoint); _EL_   FileSystem hdfsFileSystem=null; _EL_   FileStatus[] listStatus; _EL_   try { _EL_     Configuration config=createConfig(); _EL_     hdfsFileSystem=getFileSystem(config); _EL_     Path path=new Path(filePath); _EL_     listStatus=hdfsFileSystem.listStatus(path); _EL_   } _EL_  catch (  Exception ex) { _EL_     LOG.error(" Exception when browsing files for the path " + filePath,ex.getMessage()); _EL_     throw new Exception(" Exception When browsing Files in HDFS .. Message :  " + ex.getMessage()); _EL_   } _EL_  finally { _EL_     if (hdfsFileSystem != null)     hdfsFileSystem.close(); _EL_   } _EL_   return Arrays.asList(listStatus); _EL_ } _EL_ ', 'public void append(CharSequence s){ _EL_   text.append(s); _EL_ } _EL_ ', 'private static void checkPermission() throws SecurityException { _EL_   SecurityManager sm=System.getSecurityManager(); _EL_   if (sm != null) { _EL_     sm.checkPermission(new JodaTimePermission("CurrentTime.setProvider")); _EL_   } _EL_ } _EL_ ', 'private void storePassword(String password){ _EL_   if (isStore && sharedState != null) { _EL_     sharedState.put(getPwdKey(),password); _EL_   } _EL_ } _EL_ ', 'public ExternalProcessResult awaitTerminationAndResult(int timeoutMs,boolean destroyOnError) throws InterruptedException, TimeoutException, OperationCancellation, IOException { _EL_   awaitTermination(timeoutMs,destroyOnError); _EL_   return new ExternalProcessResult(process.exitValue(),getStdOutBytes(),getStdErrBytes()); _EL_ } _EL_ ', 'public void refreshInheritedMethods(Set modifiedSuperExpandos){ _EL_   for (Iterator i=modifiedSuperExpandos.iterator(); i.hasNext(); ) { _EL_     ExpandoMetaClass superExpando=(ExpandoMetaClass)i.next(); _EL_     if (superExpando != this) { _EL_       refreshInheritedMethods(superExpando); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static List<Fragment> parsePlaceholder(String parseString) throws PlaceholderParseException { _EL_   List<Fragment> result=new ArrayList<Fragment>(); _EL_   int currOutputIndex=0; _EL_   int currSearchIndex=0; _EL_   while (true) { _EL_     if (currSearchIndex == parseString.length()) { _EL_       break; _EL_     } _EL_     int startIndex=parseString.indexOf("${",currSearchIndex); _EL_     if (startIndex == -1) { _EL_       if (currOutputIndex < parseString.length()) { _EL_         String endString=parseString.substring(currOutputIndex,parseString.length()); _EL_         TextFragment textFragment=new TextFragment(endString); _EL_         result.add(textFragment); _EL_       } _EL_       break; _EL_     } _EL_     if (startIndex > 0) { _EL_       String textSoFar=parseString.substring(currOutputIndex,startIndex); _EL_       if (textSoFar.length() != 0) { _EL_         result.add(new TextFragment(textSoFar)); _EL_       } _EL_     } _EL_     if ((startIndex > 0) && (parseString.charAt(startIndex - 1) == \'$\')) { _EL_       currOutputIndex=startIndex + 1; _EL_       currSearchIndex=startIndex + 1; _EL_       continue; _EL_     } _EL_     int endIndex=parseString.indexOf(\'}\',startIndex); _EL_     if (endIndex == -1) { _EL_       throw new PlaceholderParseException("Syntax error in property or variable: \'" + parseString.substring(startIndex,parseString.length()) + "\'"); _EL_     } _EL_     String between=parseString.substring(startIndex + 2,endIndex); _EL_     ParameterFragment parameterFragment=new ParameterFragment(between); _EL_     result.add(parameterFragment); _EL_     currOutputIndex=endIndex + 1; _EL_     currSearchIndex=endIndex; _EL_   } _EL_   LinkedList<Fragment> fragments=new LinkedList<Fragment>(); _EL_   fragments.add(result.get(0)); _EL_   for (int i=1; i < result.size(); i++) { _EL_     Fragment fragment=result.get(i); _EL_     if (!(result.get(i) instanceof TextFragment)) { _EL_       fragments.add(fragment); _EL_       continue; _EL_     } _EL_     if (!(fragments.getLast() instanceof TextFragment)) { _EL_       fragments.add(fragment); _EL_       continue; _EL_     } _EL_     TextFragment textFragment=(TextFragment)fragments.getLast(); _EL_     fragments.removeLast(); _EL_     fragments.add(new TextFragment(textFragment.getValue() + fragment.getValue())); _EL_   } _EL_   return fragments; _EL_ } _EL_ ', '@Override protected void failed(){ _EL_   relation.setCanceled(true); _EL_   super.failed(); _EL_ } _EL_ ', 'private void routeSingleGetRequest(RequestAndResponse requestAndResponse,String uri) throws IOException, ServletException { _EL_   if (uri.startsWith("/notebooks/")) { _EL_     handleHtmlShowNotebooks(requestAndResponse); _EL_   } _EL_  else   if (uri.startsWith("/quotations/")) { _EL_     handleHtmlShowQuotations(requestAndResponse); _EL_   } _EL_  else   if (uri.startsWith("/sources/")) { _EL_     handleHtmlShowSources(requestAndResponse); _EL_   } _EL_  else   if (uri.startsWith("/source/")) { _EL_     handleHtmlShowSource(requestAndResponse); _EL_   } _EL_  else   if (uri.startsWith("/notebook/")) { _EL_     handleHtmlShowNotebook(requestAndResponse); _EL_   } _EL_  else   if (uri.startsWith("/search/")) { _EL_     handleHtmlSearch(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/help/")) { _EL_     handleHtmlBasicHelp(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/advancedHelp/")) { _EL_     handleHtmlAdvancedHelp(requestAndResponse); _EL_   } _EL_  else   if (uri.startsWith("/help/")) { _EL_     handleHtmlHelp(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/backup/")) { _EL_     handleHtmlUserBackupForm(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/restore/")) { _EL_     handleHtmlUserRestoreForm(requestAndResponse); _EL_   } _EL_  else   if (uri.startsWith("/account/")) { _EL_     handleHtmlShowAccount(requestAndResponse); _EL_   } _EL_  else   if (uri.startsWith("/accounts/")) { _EL_     handleHtmlShowAccounts(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/shutdown/")) { _EL_     handleHtmlShutdownForm(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/clear/")) { _EL_     handleHtmlClearForm(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/onlineBackup/")) { _EL_     handleHtmlOnlineBackupForm(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/checkForErrors/")) { _EL_     handleHtmlCheckForErrorsForm(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/backups/")) { _EL_     handleHtmlShowDBBackups(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/offlineBackup/")) { _EL_     handleHtmlOfflineDbBackupForm(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/noteJson/")) { _EL_     handleJsonShowEntry(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/noteParentJson/")) { _EL_     handleJsonShowEntryParent(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/noteChildrenJson/")) { _EL_     handleJsonShowEntryChildren(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/searchNotesJson/")) { _EL_     handleJsonSearchNotes(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/newNotebook/")) { _EL_     handleHtmlNewNotebookForm(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/nothing/")) { _EL_     handleHtmlNothing(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/couldNotCreateNote/")) { _EL_     handleHtmlCouldNotCreateNote(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/restoreBackupCommand/")) { _EL_     handleHtmlShowRestoreDbBackupCommand(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/signedOut/")) { _EL_     handleHtmlShowSignedOut(requestAndResponse); _EL_   } _EL_  else   if (uri.startsWith("/changePassword/")) { _EL_     handleHtmlChangePassword(requestAndResponse); _EL_   } _EL_  else   if (uri.startsWith("/changeAccount/")) { _EL_     handleHtmlChangeAccount(requestAndResponse); _EL_   } _EL_  else   if (uri.startsWith("/closeAccount/")) { _EL_     handleHtmlCloseAccount(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/isSignedIn/")) { _EL_     handleJsonIsSignedIn(requestAndResponse); _EL_   } _EL_  else   if (uri.equals("/restoreFrame/")) { _EL_     handleHtmlUserRestoreFrame(requestAndResponse); _EL_   } _EL_  else { _EL_     returnHtml404(requestAndResponse); _EL_   } _EL_ } _EL_ ', 'private void changeAnnotationDocumentState(SourceDocument aSourceDocument,User aUser,AnnotationDocumentStateTransition aAnnotationDocumentStateTransition){ _EL_   AnnotationDocument annotationDocument=repository.getAnnotationDocument(aSourceDocument,aUser); _EL_   annotationDocument.setState(AnnotationDocumentStateTransition.transition(aAnnotationDocumentStateTransition)); _EL_   try { _EL_     repository.createAnnotationDocument(annotationDocument); _EL_   } _EL_  catch (  IOException e) { _EL_     LOG.info("Unable to get the LOG file"); _EL_   } _EL_ } _EL_ ', 'boolean removeEdge(SparseEdge e){ _EL_   boolean removedEdge=edges.remove(e); _EL_   boolean removedNeighbour=neighbours.remove(e.getOpposite(this)); _EL_   if (removedEdge && removedNeighbour)   return true; _EL_  else   if (!removedEdge && !removedNeighbour)   return false; _EL_  else   throw new RuntimeException("Graph connectivity appears to be inconsitent!"); _EL_ } _EL_ ', 'public int fileWrite(long handle,byte[] buffer,int offset,int count){ _EL_   if ((offset | count) < 0 || offset > buffer.length || buffer.length - offset < count) { _EL_     throw new ArrayIndexOutOfBoundsException("length=" + buffer.length + "; regionStart="+ offset+ "; regionLength="+ count); _EL_   } _EL_   if (count == 0) { _EL_     return 0; _EL_   } _EL_   byte[] data=buffer; _EL_   if (offset > 0) { _EL_     data=new byte[count]; _EL_     System.arraycopy(buffer,offset,data,0,count); _EL_   } _EL_   IntOut bytesWrittenOut=new IntOut(); _EL_   try { _EL_     checkResult(LibIMobileDevice.afc_file_write(getRef(),handle,data,count,bytesWrittenOut)); _EL_     int bytesWritten=bytesWrittenOut.getValue(); _EL_     return bytesWritten; _EL_   } _EL_   finally { _EL_     bytesWrittenOut.delete(); _EL_   } _EL_ } _EL_ ', 'public static boolean isCglibProxy(Object object){ _EL_   return ClassUtils.isCglibProxyClass(object.getClass()); _EL_ } _EL_ ', 'public static boolean equals(boolean[] field1,boolean[] field2){ _EL_   if (field1 == null || field1.length == 0) { _EL_     return field2 == null || field2.length == 0; _EL_   } _EL_  else { _EL_     return Arrays.equals(field1,field2); _EL_   } _EL_ } _EL_ ', 'public void toFront(final WorkflowAnnotation anno){ _EL_   if (anno == null) { _EL_     throw new IllegalArgumentException("anno must not be null!"); _EL_   } _EL_ synchronized (lock) { _EL_     if (annotationsDrawOrder.remove(anno)) { _EL_       annotationsDrawOrder.add(anno); _EL_     } _EL_     if (annotationsEventOrder.remove(anno)) { _EL_       annotationsEventOrder.add(0,anno); _EL_     } _EL_   } _EL_ } _EL_ ', 'public synchronized void addFrame(final Image image,final long frameDuration){ _EL_   totalDuration+=frameDuration; _EL_   frames.add(new AnimFrame(image,totalDuration)); _EL_ } _EL_ ', 'public static String printCodePointAsString(int codePoint){ _EL_   StringBuilder builder=new StringBuilder(12); _EL_   builder.append(\'"\'); _EL_   try { _EL_     printStringCodePoint(builder,codePoint); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new Error(e); _EL_   } _EL_   builder.append(\'"\'); _EL_   return builder.toString(); _EL_ } _EL_ ', '@Nullable private static Bitmap extractThumbnail(Bitmap source,int width,int height){ _EL_   return extractThumbnail(source,width,height,OPTIONS_NONE); _EL_ } _EL_ ', 'public EventBean[] toArray(){ _EL_   if (firstEvent == null) { _EL_     return new EventBean[0]; _EL_   } _EL_   if (additionalEvents == null) { _EL_     return new EventBean[]{firstEvent}; _EL_   } _EL_   EventBean[] events=new EventBean[1 + additionalEvents.size()]; _EL_   events[0]=firstEvent; _EL_   int count=1; _EL_   for (  EventBean theEvent : additionalEvents) { _EL_     events[count]=theEvent; _EL_     count++; _EL_   } _EL_   return events; _EL_ } _EL_ ', 'private byte[] decode(DerInputStream in) throws IOException { _EL_   DerValue val=in.getDerValue(); _EL_   byte[] derEncoding=val.toByteArray(); _EL_   derEncoding[0]=DerValue.tag_SetOf; _EL_   DerInputStream derIn=new DerInputStream(derEncoding); _EL_   DerValue[] derVals=derIn.getSet(3,true); _EL_   PKCS9Attribute attrib; _EL_   ObjectIdentifier oid; _EL_   boolean reuseEncoding=true; _EL_   for (int i=0; i < derVals.length; i++) { _EL_     try { _EL_       attrib=new PKCS9Attribute(derVals[i]); _EL_     } _EL_  catch (    ParsingException e) { _EL_       if (ignoreUnsupportedAttributes) { _EL_         reuseEncoding=false; _EL_         continue; _EL_       } _EL_  else { _EL_         throw e; _EL_       } _EL_     } _EL_     oid=attrib.getOID(); _EL_     if (attributes.get(oid) != null)     throw new IOException("Duplicate PKCS9 attribute: " + oid); _EL_     if (permittedAttributes != null && !permittedAttributes.containsKey(oid))     throw new IOException("Attribute " + oid + " not permitted in this attribute set"); _EL_     attributes.put(oid,attrib); _EL_   } _EL_   return reuseEncoding ? derEncoding : generateDerEncoding(); _EL_ } _EL_ ', '@Override public CategoricalResults clone(){ _EL_   CategoricalResults copy=new CategoricalResults(n); _EL_   copy.probabilities=Arrays.copyOf(probabilities,probabilities.length); _EL_   return copy; _EL_ } _EL_ ', 'private static StringBuilder dump(StringBuilder _lbuffer,long value){ _EL_   for (int j=0; j < 8; j++) { _EL_     _lbuffer.append(_hexcodes[(int)(value >> _shifts[j]) & 15]); _EL_   } _EL_   return _lbuffer; _EL_ } _EL_ ', "private boolean typeSpecialChar(char c){ _EL_ switch (c) { _EL_ case '\\t': _EL_     controller.keyPress(KeyEvent.VK_TAB); _EL_   controller.keyRelease(KeyEvent.VK_TAB); _EL_ return true; _EL_ case '\\n': _EL_ controller.keyPress(KeyEvent.VK_ENTER); _EL_ controller.keyRelease(KeyEvent.VK_ENTER); _EL_ return true; _EL_ default : _EL_ return false; _EL_ } _EL_ } _EL_ ", 'protected static boolean eq(Object o1,Object o2){ _EL_   return o1 == null ? o2 == null : o1.equals(o2); _EL_ } _EL_ ', 'public static boolean hasMimeType(String mimeType){ _EL_   if (mimeType == null || mimeType.isEmpty()) { _EL_     return false; _EL_   } _EL_   return mimeTypeToExtensionMap.containsKey(mimeType); _EL_ } _EL_ ', 'public Iterable<Notification> skip(@Nonnull final Iterable<Notification> notifications,final long startId,final boolean inclusive,final int limitSize){ _EL_   Objects.requireNonNull(notifications); _EL_   final int position=indexOf(notifications,startId); _EL_   if (position == -1) { _EL_     return Iterables.limit(notifications,limitSize); _EL_   } _EL_   if (inclusive) { _EL_     return Iterables.limit(Iterables.skip(notifications,position),limitSize); _EL_   } _EL_   return Iterables.limit(Iterables.skip(notifications,position + 1),limitSize); _EL_ } _EL_ ', 'public boolean writeData(PdxWriter writer,Object obj){ _EL_   if (isRelevant(obj.getClass())) { _EL_     writeData(writer,obj,getClassInfo(obj.getClass())); _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'protected final void writeC(ByteBuffer buf,int value){ _EL_   buf.put((byte)value); _EL_ } _EL_ ', 'public ViterbiPoint(Item item){ _EL_   this.item=item; _EL_ } _EL_ ', 'private void emitListAdd(Method method,String fieldName,StringBuilder builder){ _EL_   builder.append("    public void "); _EL_   builder.append(getListAdderName(fieldName)); _EL_   builder.append("("); _EL_   builder.append(getTypeArgumentImplName((ParameterizedType)method.getGenericReturnType(),0)); _EL_   builder.append(" v) {\\n      "); _EL_   builder.append(getEnsureName(fieldName)); _EL_   builder.append("();\\n      "); _EL_   builder.append(fieldName); _EL_   builder.append(".add(v);\\n"); _EL_   builder.append("    }\\n\\n"); _EL_ } _EL_ ', 'public RSAPublicKey parsePEMPublicKey(String pem) throws GeneralSecurityException { _EL_   try { _EL_     byte[] bs=decodeAsciiArmoredPEM(pem); _EL_     ByteBuffer data=ByteBuffer.wrap(bs); _EL_     final ASN1Object ob=asn1Parser.parseASN1(data); _EL_     final List<ASN1Object> seq=asn1ObjectToSequence(ob,2); _EL_     final BigInteger modulus=asn1ObjectToBigInt(seq.get(0)); _EL_     final BigInteger exponent=asn1ObjectToBigInt(seq.get(1)); _EL_     return createKeyFromModulusAndExponent(modulus,exponent); _EL_   } _EL_  catch (  IllegalArgumentException e) { _EL_     throw new InvalidKeyException(); _EL_   } _EL_ } _EL_ ', 'public static <T>ParallelPublisher<T> from(Publisher<? extends T> source,boolean ordered,int parallelism){ _EL_   return from(source,ordered,parallelism,Px.bufferSize(),Px.defaultQueueSupplier(Px.bufferSize())); _EL_ } _EL_ ', 'public long next(long startTime,long fromTime,long currentCount){ _EL_   if (startTime == 0)   startTime=RecurrenceUtil.now(); _EL_   if (fromTime == 0)   fromTime=startTime; _EL_   if (getEndTime() != 0 && getEndTime() <= RecurrenceUtil.now())   return 0; _EL_   Debug.logVerbose("Rule NOT expired by end time.",module); _EL_   if (getCount() != -1 && currentCount >= getCount())   return 0; _EL_   Debug.logVerbose("Rule NOT expired by max count.",module); _EL_   boolean isSeeking=true; _EL_   long nextRuntime=0; _EL_   long seekTime=fromTime; _EL_   int loopProtection=0; _EL_   int maxLoop=(10 * 10 * 10* 10* 10); _EL_   while (isSeeking && loopProtection < maxLoop) { _EL_     Date nextRun=getNextFreq(startTime,seekTime); _EL_     seekTime=nextRun.getTime(); _EL_     if (validByRule(nextRun)) { _EL_       isSeeking=false; _EL_       nextRuntime=nextRun.getTime(); _EL_     } _EL_     loopProtection++; _EL_   } _EL_   return nextRuntime; _EL_ } _EL_ ', 'public void addToQueue(Var var){ _EL_   addToQueue(Collections.singleton(var)); _EL_ } _EL_ ', 'public String read(String filename) throws IOException { _EL_   return ProcFile.readFile(String.format("/proc/%d/%s",pid,filename)); _EL_ } _EL_ ', 'private long calculateAnimationDuration(float initialVelocity,float displacement){ _EL_   return MathUtils.clamp(Math.round(Math.abs(2000 * displacement / initialVelocity)),MINIMUM_ANIMATION_DURATION_MS,MAXIMUM_ANIMATION_DURATION_MS); _EL_ } _EL_ ', '@RequestProcessing(value="/member/{userName}/points",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomePoints(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception { _EL_   final JSONObject user=(JSONObject)request.getAttribute(User.USER); _EL_   request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName")); _EL_   final AbstractFreeMarkerRenderer renderer=new SkinRenderer(); _EL_   context.setRenderer(renderer); _EL_   renderer.setTemplateName("/home/points.ftl"); _EL_   final Map<String,Object> dataModel=renderer.getDataModel(); _EL_   filler.fillHeaderAndFooter(request,response,dataModel); _EL_   String pageNumStr=request.getParameter("p"); _EL_   if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) { _EL_     pageNumStr="1"; _EL_   } _EL_   final int pageNum=Integer.valueOf(pageNumStr); _EL_   final int pageSize=Symphonys.getInt("userHomePointsCnt"); _EL_   final int windowSize=Symphonys.getInt("userHomePointsWindowSize"); _EL_   fillHomeUser(dataModel,user); _EL_   avatarQueryService.fillUserAvatarURL(user); _EL_   final String followingId=user.optString(Keys.OBJECT_ID); _EL_   dataModel.put(Follow.FOLLOWING_ID,followingId); _EL_   final JSONObject userPointsResult=pointtransferQueryService.getUserPoints(user.optString(Keys.OBJECT_ID),pageNum,pageSize); _EL_   final List<JSONObject> userPoints=CollectionUtils.<JSONObject>jsonArrayToList(userPointsResult.optJSONArray(Keys.RESULTS)); _EL_   dataModel.put(Common.USER_HOME_POINTS,userPoints); _EL_   final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN); _EL_   if (isLoggedIn) { _EL_     final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER); _EL_     final String followerId=currentUser.optString(Keys.OBJECT_ID); _EL_     final boolean isFollowing=followQueryService.isFollowing(followerId,user.optString(Keys.OBJECT_ID)); _EL_     dataModel.put(Common.IS_FOLLOWING,isFollowing); _EL_   } _EL_   user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID))); _EL_   final int pointsCnt=userPointsResult.optInt(Pagination.PAGINATION_RECORD_COUNT); _EL_   final int pageCount=(int)Math.ceil((double)pointsCnt / (double)pageSize); _EL_   final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize); _EL_   if (!pageNums.isEmpty()) { _EL_     dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0)); _EL_     dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1)); _EL_   } _EL_   dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum); _EL_   dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount); _EL_   dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums); _EL_ } _EL_ ', 'private static double norm(final double[] v){ _EL_   double agg=0; _EL_   for (int i=0; i < v.length; i++) { _EL_     agg+=(v[i] * v[i]); _EL_   } _EL_   return Math.sqrt(agg); _EL_ } _EL_ ', 'private int measureHeight(int measureSpec){ _EL_   float result; _EL_   int specMode=MeasureSpec.getMode(measureSpec); _EL_   int specSize=MeasureSpec.getSize(measureSpec); _EL_   if (specMode == MeasureSpec.EXACTLY) { _EL_     result=specSize; _EL_   } _EL_  else { _EL_     result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom(); _EL_     if (specMode == MeasureSpec.AT_MOST) { _EL_       result=Math.min(result,specSize); _EL_     } _EL_   } _EL_   return (int)((float)Math.ceil(result)); _EL_ } _EL_ ', 'public void add(int i,int data){ _EL_   if (_length + 1 > _capacity)   ensureCapacity(_length + 1); _EL_   System.arraycopy(_buffer,i,_buffer,i + 1,_length - i); _EL_   _buffer[i]=(byte)data; _EL_   _length+=1; _EL_ } _EL_ ', 'public void close(){ _EL_   out.close(); _EL_ } _EL_ ', 'protected static SyncToken createSyncToken(String dateString,@Nullable String uuid){ _EL_   try { _EL_     return new SyncToken(DB_DATE_FORMAT.parse(dateString),uuid); _EL_   } _EL_  catch (  ParseException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ } _EL_ ', 'private static boolean equalsHandlesNulls(Object a,Object b){ _EL_   return a == b || (a != null && a.equals(b)); _EL_ } _EL_ ', 'public void init(String flagzDirectory) throws FlagException, EtcdFlagFieldUpdaterException { _EL_   this.directoryPrefix=MoreObjects.firstNonNull(flagzDirectory,directoryFlag.get()); _EL_   client=new EtcdClient(uris.toArray(new URI[uris.size()])); _EL_   client.setRetryHandler(retryPolicy); _EL_   initialSetAllFlagz(); _EL_ } _EL_ ', 'public static void closeEL(InputStream is){ _EL_   try { _EL_     if (is != null)     is.close(); _EL_   } _EL_  catch (  Throwable t) { _EL_   } _EL_ } _EL_ ', '@Action(value="/receipts/challan-newform") @ValidationErrorPage(value=ERROR) @SkipValidation public String newform(){ _EL_   setLoginDept(); _EL_   SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy"); _EL_   try { _EL_     cutOffDate=sdf.parse(collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE)); _EL_   } _EL_  catch (  ParseException e) { _EL_     LOGGER.error(getText("Error parsing Cut Off Date") + e.getMessage()); _EL_   } _EL_   return NEW; _EL_ } _EL_ ', 'public TypeDeclaration canonicalize(){ _EL_   List<Type> sts=getSatisfiedTypes(); _EL_   if (sts.isEmpty()) { _EL_     return unit.getAnythingDeclaration(); _EL_   } _EL_  else   if (sts.size() == 1) { _EL_     Type st=sts.get(0); _EL_     if (st.isExactlyNothing()) { _EL_       return unit.getNothingDeclaration(); _EL_     } _EL_   } _EL_   for (  Type st : sts) { _EL_     if (st.isUnion()) { _EL_       List<Type> caseTypes=st.getCaseTypes(); _EL_       List<Type> ulist=new ArrayList<Type>(caseTypes.size()); _EL_       for (      Type ct : caseTypes) { _EL_         List<Type> ilist=new ArrayList<Type>(sts.size()); _EL_         for (        Type pt : sts) { _EL_           if (pt == st) { _EL_             addToIntersection(ilist,ct,unit); _EL_           } _EL_  else { _EL_             addToIntersection(ilist,pt,unit); _EL_           } _EL_         } _EL_         Type it=canonicalIntersection(ilist,unit); _EL_         addToUnion(ulist,it); _EL_       } _EL_       TypeDeclaration result=new UnionType(unit); _EL_       result.setCaseTypes(ulist); _EL_       return result; _EL_     } _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public static void openOtherUri(final String url,final Activity activity){ _EL_   Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url)); _EL_   activity.startActivity(intent); _EL_ } _EL_ ', 'public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader,int timeoutInMs){ _EL_   return waitForAllActiveAndLiveReplicas(zkStateReader,null,timeoutInMs); _EL_ } _EL_ ', 'public synchronized void addElement(E object){ _EL_   if (elementCount == elementData.length) { _EL_     growByOne(); _EL_   } _EL_   elementData[elementCount++]=object; _EL_   modCount++; _EL_ } _EL_ ', 'private void updateBaseMatrix(Drawable d){ _EL_   ImageView imageView=getImageView(); _EL_   if (null == imageView || null == d) { _EL_     return; _EL_   } _EL_   final float viewWidth=getImageViewWidth(imageView); _EL_   final float viewHeight=getImageViewHeight(imageView); _EL_   final int drawableWidth=d.getIntrinsicWidth(); _EL_   final int drawableHeight=d.getIntrinsicHeight(); _EL_   mBaseMatrix.reset(); _EL_   final float widthScale=viewWidth / drawableWidth; _EL_   final float heightScale=viewHeight / drawableHeight; _EL_   if (mScaleType == ScaleType.CENTER) { _EL_     mBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F,(viewHeight - drawableHeight) / 2F); _EL_   } _EL_  else   if (mScaleType == ScaleType.CENTER_CROP) { _EL_     float scale=Math.max(widthScale,heightScale); _EL_     mBaseMatrix.postScale(scale,scale); _EL_     mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F); _EL_   } _EL_  else   if (mScaleType == ScaleType.CENTER_INSIDE) { _EL_     float scale=Math.min(1.0f,Math.min(widthScale,heightScale)); _EL_     mBaseMatrix.postScale(scale,scale); _EL_     mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F); _EL_   } _EL_  else { _EL_     RectF mTempSrc=new RectF(0,0,drawableWidth,drawableHeight); _EL_     RectF mTempDst=new RectF(0,0,viewWidth,viewHeight); _EL_     if ((int)mBaseRotation % 180 != 0) { _EL_       mTempSrc=new RectF(0,0,drawableHeight,drawableWidth); _EL_     } _EL_ switch (mScaleType) { _EL_ case FIT_CENTER: _EL_       mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.CENTER); _EL_     break; _EL_ case FIT_START: _EL_   mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.START); _EL_ break; _EL_ case FIT_END: _EL_ mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.END); _EL_ break; _EL_ case FIT_XY: _EL_ mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.FILL); _EL_ break; _EL_ default : _EL_ break; _EL_ } _EL_ } _EL_ resetMatrix(); _EL_ } _EL_ ', 'protected boolean isCompatible(Taxa taxa,List<Taxon> availableTaxa){ _EL_   for (int i=0; i < taxa.getTaxonCount(); i++) { _EL_     Taxon taxon=taxa.getTaxon(i); _EL_     if (!availableTaxa.contains(taxon)) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'protected int drawLabelText(Object nativeGraphics,int textDecoration,boolean rtl,boolean isTickerRunning,boolean endsWith3Points,Object nativeFont,int txtW,int textSpaceW,int shiftText,String text,int x,int y,int fontHeight){ _EL_   if ((!isTickerRunning) || rtl) { _EL_     if (txtW > textSpaceW && textSpaceW > 0) { _EL_       if (rtl) { _EL_         if ((!isTickerRunning) && endsWith3Points) { _EL_           String points="..."; _EL_           int pointsW=stringWidth(nativeFont,points); _EL_           drawString(nativeGraphics,nativeFont,points,shiftText + x,y,textDecoration,fontHeight); _EL_           clipRect(nativeGraphics,pointsW + shiftText + x,y,textSpaceW - pointsW,fontHeight); _EL_         } _EL_         x=x - txtW + textSpaceW; _EL_       } _EL_  else       if (endsWith3Points) { _EL_         String points="..."; _EL_         int index=1; _EL_         int widest=charWidth(nativeFont,\'W\'); _EL_         int pointsW=stringWidth(nativeFont,points); _EL_         int textLen=text.length(); _EL_         while (fastCharWidthCheck(text,index,textSpaceW - pointsW,widest,nativeFont) && index < textLen) { _EL_           index++; _EL_         } _EL_         text=text.substring(0,Math.min(textLen,Math.max(1,index - 1))) + points; _EL_         txtW=stringWidth(nativeFont,text); _EL_       } _EL_     } _EL_   } _EL_   drawString(nativeGraphics,nativeFont,text,shiftText + x,y,textDecoration,fontHeight); _EL_   return Math.min(txtW,textSpaceW); _EL_ } _EL_ ', 'public boolean hasMapObjects(){ _EL_   return mapObjects != null && !mapObjects.isEmpty(); _EL_ } _EL_ ', 'public void performActions() throws Throwable { _EL_   for (  Throwing.Runnable action : actions) { _EL_     action.run(); _EL_   } _EL_ } _EL_ ', 'public java.util.Collection<ObjectReference> dumpThreadRoots(int width){ _EL_   return Collections.emptyList(); _EL_ } _EL_ ', 'public Dimension minimumLayoutSize(Container target){ _EL_ synchronized (target.getTreeLock()) { _EL_     Dimension dim=new Dimension(0,0); _EL_     if ((chart != null) && chart.isVisible()) { _EL_       Dimension d=chart.getMinimumSize(); _EL_       dim.width=d.width; _EL_       dim.height=d.height; _EL_     } _EL_     if ((xLabel != null) && xLabel.isVisible()) { _EL_       Dimension d=xLabel.getMinimumSize(); _EL_       dim.width=Math.max(d.width,dim.width); _EL_       dim.height+=d.height + vgap; _EL_     } _EL_     if ((yLabel != null) && yLabel.isVisible()) { _EL_       Dimension d=yLabel.getMinimumSize(); _EL_       dim.width+=d.width + hgap; _EL_       dim.height=Math.max(d.height,dim.height); _EL_     } _EL_     if ((title != null) && title.isVisible()) { _EL_       Dimension d=title.getMinimumSize(); _EL_       dim.width=Math.max(d.width,dim.width); _EL_       dim.height+=d.height + vgap; _EL_     } _EL_     Insets insets=target.getInsets(); _EL_     dim.width+=insets.left + insets.right; _EL_     dim.height+=insets.top + insets.bottom; _EL_     return dim; _EL_   } _EL_ } _EL_ ', 'private void checkResourceChange(final Resource resource,final Group group,final Callback callback,final AtomicBoolean isChanged) throws Exception { _EL_   if (isChanged(resource,group.getName())) { _EL_     isChanged.compareAndSet(false,true); _EL_     callback.onResourceChanged(resource); _EL_     lifecycleCallback.onResourceChanged(resource); _EL_   } _EL_ } _EL_ ', 'public javax2.sip.address.TelURL createTelURL(String uri) throws ParseException { _EL_   if (uri == null)   throw new NullPointerException("null url"); _EL_   String telUrl="tel:" + uri; _EL_   try { _EL_     StringMsgParser smp=new StringMsgParser(); _EL_     TelURLImpl timp=(TelURLImpl)smp.parseUrl(telUrl); _EL_     return (TelURL)timp; _EL_   } _EL_  catch (  ParseException ex) { _EL_     throw new ParseException(ex.getMessage(),0); _EL_   } _EL_ } _EL_ ', 'private synchronized boolean _restart() throws ServletException { _EL_   if (singelton != null)   singelton.reset(); _EL_   initEngine(); _EL_   System.gc(); _EL_   return true; _EL_ } _EL_ ', 'public Sorter(){ _EL_   useDefaultVisual(); _EL_   setLayout(new BorderLayout()); _EL_   add(m_visual,BorderLayout.CENTER); _EL_   m_env=Environment.getSystemWide(); _EL_   m_stopRequested=new AtomicBoolean(false); _EL_ } _EL_ ', 'public static double logpdf(double x,double mu,double shape){ _EL_   if (!(x > 0) || x == Double.POSITIVE_INFINITY) { _EL_     return Double.NEGATIVE_INFINITY; _EL_   } _EL_   final double v=(x - mu) / mu; _EL_   return v < Double.MAX_VALUE ? 0.5 * Math.log(shape / (MathUtil.TWOPI * x * x* x)) - shape * v * v / (2. * x) : Double.NEGATIVE_INFINITY; _EL_ } _EL_ ', 'public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException { _EL_   int start_old=start; _EL_   if (m_inEntityRef)   return; _EL_   if (m_elemContext.m_startTagOpen) { _EL_     closeStartTag(); _EL_     m_elemContext.m_startTagOpen=false; _EL_   } _EL_  else   if (m_needToCallStartDocument) { _EL_     startDocumentInternal(); _EL_     m_needToCallStartDocument=false; _EL_   } _EL_   try { _EL_     final int limit=start + length; _EL_     boolean wasDash=false; _EL_     if (m_cdataTagOpen)     closeCDATA(); _EL_     if (shouldIndent())     indent(); _EL_     final java.io.Writer writer=m_writer; _EL_     writer.write(COMMENT_BEGIN); _EL_     for (int i=start; i < limit; i++) { _EL_       if (wasDash && ch[i] == \'-\') { _EL_         writer.write(ch,start,i - start); _EL_         writer.write(" -"); _EL_         start=i + 1; _EL_       } _EL_       wasDash=(ch[i] == \'-\'); _EL_     } _EL_     if (length > 0) { _EL_       final int remainingChars=(limit - start); _EL_       if (remainingChars > 0)       writer.write(ch,start,remainingChars); _EL_       if (ch[limit - 1] == \'-\')       writer.write(\' \'); _EL_     } _EL_     writer.write(COMMENT_END); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new SAXException(e); _EL_   } _EL_   m_startNewLine=true; _EL_   if (m_tracer != null)   super.fireCommentEvent(ch,start_old,length); _EL_ } _EL_ ', 'public OptionalInt maxByInt(IntUnaryOperator keyExtractor){ _EL_   int[] result=collect(null,null,null); _EL_   return result[2] == 1 ? OptionalInt.of(result[0]) : OptionalInt.empty(); _EL_ } _EL_ ', 'private void startAnimation(){ _EL_   ValueAnimator animator=ValueAnimator.ofFloat(1.0f); _EL_   ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone(); _EL_   mPendingAnimations.clear(); _EL_   int propertyMask=0; _EL_   int propertyCount=nameValueList.size(); _EL_   for (int i=0; i < propertyCount; ++i) { _EL_     NameValuesHolder nameValuesHolder=nameValueList.get(i); _EL_     propertyMask|=nameValuesHolder.mNameConstant; _EL_   } _EL_   mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList)); _EL_   animator.addUpdateListener(mAnimatorEventListener); _EL_   animator.addListener(mAnimatorEventListener); _EL_   if (mStartDelaySet) { _EL_     animator.setStartDelay(mStartDelay); _EL_   } _EL_   if (mDurationSet) { _EL_     animator.setDuration(mDuration); _EL_   } _EL_   if (mInterpolatorSet) { _EL_     animator.setInterpolator(mInterpolator); _EL_   } _EL_   animator.start(); _EL_ } _EL_ ', 'public static String traceExcetion(Throwable ex){ _EL_   final Writer result=new StringWriter(); _EL_   final PrintWriter printWriter=new PrintWriter(result); _EL_   ex.printStackTrace(printWriter); _EL_   String stacktrace=result.toString(); _EL_   Log.e(TAG,"ERROR ---> " + stacktrace); _EL_   return stacktrace; _EL_ } _EL_ ', 'public void onChildThreadResumeEnd(){ _EL_   _threadCount.getAndDecrement(); _EL_   wake(); _EL_ } _EL_ ', 'public static void registerTransportMBean(String containerName){ _EL_   MBeanServer mBeanServer=getMBeanServer(containerName); _EL_   if (mBeanServer == null)   return; _EL_   TransportProtocolMonitorMBean transportConnectionsInfoMBean=new TransportProtocolMonitor(); _EL_   ObjectName objName=TransportConstants.createTransportMBeanObjectName(containerName); _EL_   if (!mBeanServer.isRegistered(objName)) { _EL_     try { _EL_       mBeanServer.registerMBean(transportConnectionsInfoMBean,objName); _EL_     } _EL_  catch (    InstanceAlreadyExistsException e) { _EL_       if (_logger.isLoggable(Level.CONFIG)) { _EL_         _logger.config(alreadyRegistredTransportMBeanMessage + containerName + ">"); _EL_       } _EL_     } _EL_ catch (    NotCompliantMBeanException e) { _EL_       if (_logger.isLoggable(Level.WARNING)) { _EL_         _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + ">",e); _EL_       } _EL_     } _EL_ catch (    MBeanRegistrationException e) { _EL_       if (_logger.isLoggable(Level.SEVERE)) { _EL_         _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + ">",e); _EL_       } _EL_     } _EL_     if (_logger.isLoggable(Level.CONFIG)) { _EL_       _logger.config(successfulTransportMBeanRegistrationMessage + containerName + ">"); _EL_     } _EL_   } _EL_  else { _EL_     if (_logger.isLoggable(Level.CONFIG)) { _EL_       _logger.config(alreadyRegistredTransportMBeanMessage); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static int update(String where,Object[] args,V sets,Class<? extends Bean> t){ _EL_   Table mapping=(Table)t.getAnnotation(Table.class); _EL_   if (mapping == null) { _EL_     if (log.isErrorEnabled())     log.error("mapping missed in [" + t + "] declaretion"); _EL_     return -1; _EL_   } _EL_   if (!X.isEmpty(mapping.name())) { _EL_     return updateTable(mapping.name(),where,args,sets); _EL_   } _EL_   return -1; _EL_ } _EL_ ', 'private void stopVideoFadingEdgesScreenTimer(){ _EL_   if (null != mVideoFadingEdgesTimer) { _EL_     mVideoFadingEdgesTimer.cancel(); _EL_     mVideoFadingEdgesTimer=null; _EL_     mVideoFadingEdgesTimerTask=null; _EL_   } _EL_ } _EL_ ', 'private synchronized void addTableLockObject(AbsoluteTableIdentifier absoluteTableIdentifier){ _EL_   if (null == tableLockMap.get(absoluteTableIdentifier)) { _EL_     tableLockMap.put(absoluteTableIdentifier,new Object()); _EL_   } _EL_ } _EL_ ', 'private static String randomElement(ArrayList<String> list){ _EL_   int index=random.nextInt(list.size()); _EL_   return list.get(index); _EL_ } _EL_ ', 'public static <T>void updateMappingToImmutableSet(Map<T,Set<AnnotationMirror>> map,T key,Set<AnnotationMirror> newQual){ _EL_   Set<AnnotationMirror> result=AnnotationUtils.createAnnotationSet(); _EL_   if (!map.containsKey(key)) { _EL_     result.addAll(newQual); _EL_   } _EL_  else { _EL_     result.addAll(map.get(key)); _EL_     result.addAll(newQual); _EL_   } _EL_   map.put(key,Collections.unmodifiableSet(result)); _EL_ } _EL_ ', 'public static void join(final AsyncInvocation<?> async,final long timeoutMilliseconds){ _EL_   join(async.getThread(),timeoutMilliseconds); _EL_ } _EL_ ', 'void define(MemberDefinition field,int slot,int from,int to){ _EL_   if (from >= to) { _EL_     return; _EL_   } _EL_   for (int i=0; i < len; i++) { _EL_     if ((locals[i].field == field) && (locals[i].slot == slot) && (from <= locals[i].to)&& (to >= locals[i].from)) { _EL_       locals[i].from=Math.min(locals[i].from,from); _EL_       locals[i].to=Math.max(locals[i].to,to); _EL_       return; _EL_     } _EL_   } _EL_   if (len == locals.length) { _EL_     LocalVariable newlocals[]=new LocalVariable[len * 2]; _EL_     System.arraycopy(locals,0,newlocals,0,len); _EL_     locals=newlocals; _EL_   } _EL_   locals[len++]=new LocalVariable(field,slot,from,to); _EL_ } _EL_ ', 'protected Connection openConnection(boolean autocommit) throws SQLException { _EL_   Connection conn=dataSrc.getConnection(); _EL_   conn.setAutoCommit(autocommit); _EL_   return conn; _EL_ } _EL_ ', 'public void error(XPathContext xctxt,String msg,Object[] args) throws javax.xml.transform.TransformerException { _EL_   java.lang.String fmsg=XSLMessages.createXPATHMessage(msg,args); _EL_   if (null != xctxt) { _EL_     ErrorListener eh=xctxt.getErrorListener(); _EL_     TransformerException te=new TransformerException(fmsg,this); _EL_     eh.fatalError(te); _EL_   } _EL_ } _EL_ ', 'public void mousePressed(MouseEvent e){ _EL_   int nclicks=SwingUtilities2.getAdjustedClickCount(getComponent(),e); _EL_   if (SwingUtilities.isLeftMouseButton(e)) { _EL_     if (e.isConsumed()) { _EL_       shouldHandleRelease=true; _EL_     } _EL_  else { _EL_       shouldHandleRelease=false; _EL_       adjustCaretAndFocus(e); _EL_       if (nclicks == 2 && SwingUtilities2.canEventAccessSystemClipboard(e)) { _EL_         selectWord(e); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public static byte[] decode(String str,int flags){ _EL_   return decode(str.getBytes(),flags); _EL_ } _EL_ ', 'public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector paramNames,Vector arguments) throws BSFException { _EL_   Object object=eval(source,lineNo,columnNo,funcBody); _EL_   if (object instanceof Closure) { _EL_     Closure closure=(Closure)object; _EL_     return closure.call(arguments.toArray()); _EL_   } _EL_   return object; _EL_ } _EL_ ', 'public Set keySet(){ _EL_   return totalKeySet(); _EL_ } _EL_ ', 'public void output(List list,Writer out) throws IOException { _EL_   printContentRange(out,list,0,list.size(),0,createNamespaceStack()); _EL_   out.flush(); _EL_ } _EL_ ', 'public boolean consumeEncumbranceBudget(final Map<String,Object> detailsMap){ _EL_   if (detailsMap == null)   throw new ValidationException(Arrays.asList(new ValidationError("required input is null","required input is null"))); _EL_   detailsMap.put(Constants.CONSUMEORRELEASE,true); _EL_   final BigDecimal bd=getDetails(detailsMap); _EL_   return bd.intValue() == 1; _EL_ } _EL_ ', 'private int[] mod(int[] a,int[] f){ _EL_   int df=computeDegree(f); _EL_   if (df == -1) { _EL_     throw new ArithmeticException("Division by zero"); _EL_   } _EL_   int[] result=new int[a.length]; _EL_   int hc=headCoefficient(f); _EL_   hc=field.inverse(hc); _EL_   System.arraycopy(a,0,result,0,result.length); _EL_   while (df <= computeDegree(result)) { _EL_     int[] q; _EL_     int coeff=field.mult(headCoefficient(result),hc); _EL_     q=multWithMonomial(f,computeDegree(result) - df); _EL_     q=multWithElement(q,coeff); _EL_     result=add(q,result); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private void addToken(int token){ _EL_   try { _EL_     fTokens[fTokenCount]=token; _EL_   } _EL_  catch (  ArrayIndexOutOfBoundsException ex) { _EL_     int[] oldList=fTokens; _EL_     fTokens=new int[fTokenCount << 1]; _EL_     System.arraycopy(oldList,0,fTokens,0,fTokenCount); _EL_     fTokens[fTokenCount]=token; _EL_   } _EL_   fTokenCount++; _EL_ } _EL_ ', 'private P filterLargeValueSets(FilterSpec fs,MetaDataObject rootMeta,F root,boolean forceEntityBased,JoinType defaultPredicateJoinType){ _EL_   ArrayList<FilterSpec> specs=new ArrayList<>(); _EL_   List<?> list=new ArrayList<>((Collection<?>)fs.getValue()); _EL_   for (int i=0; i < list.size(); i+=ORACLE_PARAM_LIMIT) { _EL_     int nextOffset=i + Math.min(list.size() - i,ORACLE_PARAM_LIMIT); _EL_     List<?> batchList=list.subList(i,nextOffset); _EL_     specs.add(new FilterSpec(fs.getAttributePath(),fs.getOperator(),batchList)); _EL_   } _EL_   FilterSpec orSpec=FilterSpec.or(specs); _EL_   return filterSpecListToPredicate(rootMeta,root,orSpec,forceEntityBased,defaultPredicateJoinType); _EL_ } _EL_ ', 'protected void addTags(E data,Builder builder){ _EL_   PlatformIdent platformIdent=cachedDataService.getPlatformIdentForId(data.getPlatformIdent()); _EL_   builder.tag(Series.TAG_AGENT_ID,String.valueOf(data.getPlatformIdent())); _EL_   if (null != platformIdent) { _EL_     builder.tag(Series.TAG_AGENT_NAME,platformIdent.getAgentName()); _EL_   } _EL_ } _EL_ ', 'public static LeftRegularBipartiteGraphSegment buildRandomLeftRegularBipartiteGraph(int leftSize,int rightSize,int leftDegree,Random random){ _EL_   LeftRegularBipartiteGraphSegment leftRegularBipartiteGraphSegment=new LeftRegularBipartiteGraphSegment(leftSize / 2,leftDegree,rightSize / 2,leftSize / 2,2.0,Integer.MAX_VALUE,new IdentityEdgeTypeMask(),new NullStatsReceiver()); _EL_   LongSet addedIds=new LongOpenHashSet(leftDegree); _EL_   for (int i=0; i < leftSize; i++) { _EL_     addedIds.clear(); _EL_     for (int j=0; j < leftDegree; j++) { _EL_       long idToAdd; _EL_       do { _EL_         idToAdd=random.nextInt(rightSize); _EL_       } _EL_  while (addedIds.contains(idToAdd)); _EL_       addedIds.add(idToAdd); _EL_       leftRegularBipartiteGraphSegment.addEdge(i,idToAdd,(byte)0); _EL_     } _EL_   } _EL_   return leftRegularBipartiteGraphSegment; _EL_ } _EL_ ', '@Override public void addFocusables(ArrayList<View> views,int direction,int focusableMode){ _EL_   final int focusableCount=views.size(); _EL_   final int descendantFocusability=getDescendantFocusability(); _EL_   if (descendantFocusability != FOCUS_BLOCK_DESCENDANTS) { _EL_     for (int i=0; i < getChildCount(); i++) { _EL_       final View child=getChildAt(i); _EL_       if (child.getVisibility() == VISIBLE) { _EL_         ItemInfo ii=infoForChild(child); _EL_         if (ii != null && ii.position == mCurItem) { _EL_           child.addFocusables(views,direction,focusableMode); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   if (descendantFocusability != FOCUS_AFTER_DESCENDANTS || (focusableCount == views.size())) { _EL_     if (!isFocusable()) { _EL_       return; _EL_     } _EL_     if ((focusableMode & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE && isInTouchMode() && !isFocusableInTouchMode()) { _EL_       return; _EL_     } _EL_     if (views != null) { _EL_       views.add(this); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected HttpURLConnection configureRequest(final HttpURLConnection request){ _EL_   if (credentials != null)   request.setRequestProperty(HEADER_AUTHORIZATION,credentials); _EL_   request.setRequestProperty(HEADER_USER_AGENT,userAgent); _EL_   request.setRequestProperty(HEADER_ACCEPT,getHeaderAccept()); _EL_   return request; _EL_ } _EL_ ', 'private ReplicatorRuntimeConf(String serviceName){ _EL_   replicatorHomeDir=locateReplicatorHomeDir(); _EL_   replicatorLogDir=locateReplicatorLogDir(); _EL_   replicatorConfDir=locateReplicatorConfDir(); _EL_   replicatorProperties=new File(locateReplicatorConfDir(),"static-" + serviceName + ".properties"); _EL_   if (!replicatorProperties.isFile() || !replicatorProperties.canRead()) { _EL_     throw new ServerRuntimeException("Replicator static properties does not exist or is invalid: " + replicatorProperties); _EL_   } _EL_   replicatorDynamicProperties=new File(replicatorConfDir,"dynamic-" + serviceName + ".properties"); _EL_   replicatorDynamicRole=new File(replicatorConfDir,"dynamic-" + serviceName + ".role"); _EL_   this.clearDynamicProperties=Boolean.parseBoolean(System.getProperty(CLEAR_DYNAMIC_PROPERTIES)); _EL_ } _EL_ ', 'private String toLocalNumber(double n){ _EL_   return mDecimalFormat.format(n); _EL_ } _EL_ ', 'public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){ _EL_   String subSignature=method.getSubSignature(); _EL_   if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedAction)")) { _EL_     java_security_AccessController_doPrivileged(method,thisVar,returnVar,params); _EL_     return; _EL_   } _EL_  else   if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)")) { _EL_     java_security_AccessController_doPrivileged(method,thisVar,returnVar,params); _EL_     return; _EL_   } _EL_  else   if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)")) { _EL_     java_security_AccessController_doPrivileged(method,thisVar,returnVar,params); _EL_     return; _EL_   } _EL_  else   if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)")) { _EL_     java_security_AccessController_doPrivileged(method,thisVar,returnVar,params); _EL_     return; _EL_   } _EL_  else   if (subSignature.equals("java.security.AccessControlContext getStackAccessControlContext()")) { _EL_     java_security_AccessController_getStackAccessControlContext(method,thisVar,returnVar,params); _EL_     return; _EL_   } _EL_  else   if (subSignature.equals("java.security.AccessControlContext getInheritedAccessControlContext()")) { _EL_     java_security_AccessController_getInheritedAccessControlContext(method,thisVar,returnVar,params); _EL_     return; _EL_   } _EL_  else { _EL_     defaultMethod(method,thisVar,returnVar,params); _EL_     return; _EL_   } _EL_ } _EL_ ', 'public static long[] asLongArray(final List<Long> l){ _EL_   final long[] a=new long[l.size()]; _EL_   for (int i=0; i < a.length; i++) { _EL_     a[i]=l.get(i); _EL_   } _EL_   return a; _EL_ } _EL_ ', 'private void updateMenuState(){ _EL_   m_appendAnd.setEnabled(m_criteriumNode.allowAppend(CAndCriterium.class)); _EL_   m_appendOr.setEnabled(m_criteriumNode.allowAppend(COrCriterium.class)); _EL_   m_appendNot.setEnabled(m_criteriumNode.allowAppend(CNotCriterium.class)); _EL_   m_insertAnd.setEnabled(m_criteriumNode.allowInsert(CAndCriterium.class)); _EL_   m_insertOr.setEnabled(m_criteriumNode.allowInsert(COrCriterium.class)); _EL_   m_insertNot.setEnabled(m_criteriumNode.allowInsert(CNotCriterium.class)); _EL_   m_conditionSubmenu.setEnabled(m_criteriumNode.allowAppend(CConditionCriterium.class)); _EL_   m_remove.setEnabled(!m_criteriumNode.isRoot()); _EL_   m_removeAll.setEnabled(m_criteriumNode.getChildCount() != 0); _EL_ } _EL_ ', '@Override public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException { _EL_   if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) { _EL_     SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"removeNotificationListener","Removing listener " + listener); _EL_   } _EL_   notifBroadcaster.removeNotificationListener(listener); _EL_ } _EL_ ', 'public static boolean isNewer(long ts1,long size1,long ts2,long size2){ _EL_   return ts1 > ts2 || (ts1 == ts2 && size1 < size2); _EL_ } _EL_ ', 'public static List<ModuleSpec> expandSpecWildcards(File dir,List<ModuleSpec> modules,Backend forBackend){ _EL_   List<File> dirs=new ArrayList<File>(); _EL_   dirs.add(dir); _EL_   return expandSpecWildcards(dirs,modules,forBackend); _EL_ } _EL_ ', 'public void parseArguments(final String[] rawArguments,Properties argumentProperties) throws ArgumentException { _EL_   boolean inTrailingArgs=false; _EL_   final int numArguments=rawArguments.length; _EL_   for (int i=0; i < numArguments; i++) { _EL_     final String arg=rawArguments[i]; _EL_     if (inTrailingArgs) { _EL_       trailingArguments.add(arg); _EL_       if (maxTrailingArguments > 0 && trailingArguments.size() > maxTrailingArguments) { _EL_         final LocalizableMessage message=ERR_ARGPARSER_TOO_MANY_TRAILING_ARGS.get(maxTrailingArguments); _EL_         throw new ArgumentException(message); _EL_       } _EL_       continue; _EL_     } _EL_     if (arg.equals("--")) { _EL_       inTrailingArgs=true; _EL_     } _EL_  else     if (arg.startsWith("--")) { _EL_       String argName=arg.substring(2); _EL_       String argValue=null; _EL_       final int equalPos=argName.indexOf(\'=\'); _EL_       if (equalPos == 0) { _EL_         throw new ArgumentException(ERR_ARGPARSER_LONG_ARG_WITHOUT_NAME.get(arg)); _EL_       } _EL_  else       if (equalPos > 0) { _EL_         argValue=argName.substring(equalPos + 1); _EL_         argName=argName.substring(0,equalPos); _EL_       } _EL_       final String origArgName=argName; _EL_       argName=formatLongIdentifier(argName); _EL_       final Argument a=longIDMap.get(argName); _EL_       if (a == null) { _EL_         if (OPTION_LONG_HELP.equals(argName)) { _EL_           writeToUsageOutputStream(getUsage()); _EL_           return; _EL_         } _EL_  else         if (OPTION_LONG_PRODUCT_VERSION.equals(argName)) { _EL_           printVersion(); _EL_           return; _EL_         } _EL_  else { _EL_           throw new ArgumentException(ERR_ARGPARSER_NO_ARGUMENT_WITH_LONG_ID.get(origArgName)); _EL_         } _EL_       } _EL_  else { _EL_         a.setPresent(true); _EL_         if (isUsageArgument(a)) { _EL_           writeToUsageOutputStream(getUsage()); _EL_           return; _EL_         } _EL_       } _EL_       if (a.needsValue()) { _EL_         if (argValue == null) { _EL_           if ((i + 1) == numArguments) { _EL_             throw new ArgumentException(ERR_ARGPARSER_NO_VALUE_FOR_ARGUMENT_WITH_LONG_ID.get(origArgName)); _EL_           } _EL_           argValue=rawArguments[++i]; _EL_         } _EL_         final LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder(); _EL_         if (!a.valueIsAcceptable(argValue,invalidReason)) { _EL_           throw new ArgumentException(ERR_ARGPARSER_VALUE_UNACCEPTABLE_FOR_LONG_ID.get(argValue,origArgName,invalidReason)); _EL_         } _EL_         if (a.hasValue() && !a.isMultiValued()) { _EL_           throw new ArgumentException(ERR_ARGPARSER_NOT_MULTIVALUED_FOR_LONG_ID.get(origArgName)); _EL_         } _EL_         a.addValue(argValue); _EL_       } _EL_  else       if (argValue != null) { _EL_         throw new ArgumentException(ERR_ARGPARSER_ARG_FOR_LONG_ID_DOESNT_TAKE_VALUE.get(origArgName)); _EL_       } _EL_     } _EL_  else     if (arg.startsWith("-")) { _EL_       if (arg.equals("-")) { _EL_         throw new ArgumentException(ERR_ARGPARSER_INVALID_DASH_AS_ARGUMENT.get()); _EL_       } _EL_       final char argCharacter=arg.charAt(1); _EL_       String argValue; _EL_       if (arg.length() > 2) { _EL_         argValue=arg.substring(2); _EL_       } _EL_  else { _EL_         argValue=null; _EL_       } _EL_       final Argument a=shortIDMap.get(argCharacter); _EL_       if (a == null) { _EL_         if (argCharacter == \'?\') { _EL_           writeToUsageOutputStream(getUsage()); _EL_           return; _EL_         } _EL_  else         if (versionHandler != null && argCharacter == OPTION_SHORT_PRODUCT_VERSION && !shortIDMap.containsKey(OPTION_SHORT_PRODUCT_VERSION)) { _EL_           printVersion(); _EL_           return; _EL_         } _EL_  else { _EL_           throw new ArgumentException(ERR_ARGPARSER_NO_ARGUMENT_WITH_SHORT_ID.get(argCharacter)); _EL_         } _EL_       } _EL_  else { _EL_         a.setPresent(true); _EL_         if (isUsageArgument(a)) { _EL_           writeToUsageOutputStream(getUsage()); _EL_           return; _EL_         } _EL_       } _EL_       if (a.needsValue()) { _EL_         if (argValue == null) { _EL_           if ((i + 1) == numArguments) { _EL_             throw new ArgumentException(ERR_ARGPARSER_NO_VALUE_FOR_ARGUMENT_WITH_SHORT_ID.get(argCharacter)); _EL_           } _EL_           argValue=rawArguments[++i]; _EL_         } _EL_         final LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder(); _EL_         if (!a.valueIsAcceptable(argValue,invalidReason)) { _EL_           throw new ArgumentException(ERR_ARGPARSER_VALUE_UNACCEPTABLE_FOR_SHORT_ID.get(argValue,argCharacter,invalidReason)); _EL_         } _EL_         if (a.hasValue() && !a.isMultiValued()) { _EL_           throw new ArgumentException(ERR_ARGPARSER_NOT_MULTIVALUED_FOR_SHORT_ID.get(argCharacter)); _EL_         } _EL_         a.addValue(argValue); _EL_       } _EL_  else       if (argValue != null) { _EL_         final int valueLength=argValue.length(); _EL_         for (int j=0; j < valueLength; j++) { _EL_           final char c=argValue.charAt(j); _EL_           final Argument b=shortIDMap.get(c); _EL_           if (b == null) { _EL_             throw new ArgumentException(ERR_ARGPARSER_NO_ARGUMENT_WITH_SHORT_ID.get(argCharacter)); _EL_           } _EL_  else           if (b.needsValue()) { _EL_             throw new ArgumentException(ERR_ARGPARSER_CANT_MIX_ARGS_WITH_VALUES.get(argCharacter,argValue,c)); _EL_           } _EL_  else { _EL_             b.setPresent(true); _EL_             if (isUsageArgument(b)) { _EL_               writeToUsageOutputStream(getUsage()); _EL_               return; _EL_             } _EL_           } _EL_         } _EL_       } _EL_     } _EL_  else     if (allowsTrailingArguments) { _EL_       inTrailingArgs=true; _EL_       trailingArguments.add(arg); _EL_     } _EL_  else { _EL_       throw new ArgumentException(ERR_ARGPARSER_DISALLOWED_TRAILING_ARGUMENT.get(arg)); _EL_     } _EL_   } _EL_   if (allowsTrailingArguments && minTrailingArguments > 0 && trailingArguments.size() < minTrailingArguments) { _EL_     throw new ArgumentException(ERR_ARGPARSER_TOO_FEW_TRAILING_ARGUMENTS.get(minTrailingArguments)); _EL_   } _EL_   if (argumentProperties == null) { _EL_     argumentProperties=checkExternalProperties(); _EL_   } _EL_   normalizeArguments(argumentProperties,argumentList); _EL_ } _EL_ ', '@Override public boolean start() throws IOException { _EL_   LOG.info("Starting reader using {}",initialCheckpointGenerator); _EL_   try { _EL_     KinesisReaderCheckpoint initialCheckpoint=initialCheckpointGenerator.generate(kinesis); _EL_     List<ShardRecordsIterator> iterators=newArrayList(); _EL_     for (    ShardCheckpoint checkpoint : initialCheckpoint) { _EL_       iterators.add(checkpoint.getShardRecordsIterator(kinesis)); _EL_     } _EL_     shardIterators=new RoundRobin<>(iterators); _EL_   } _EL_  catch (  TransientKinesisException e) { _EL_     throw new IOException(e); _EL_   } _EL_   return advance(); _EL_ } _EL_ ', '@Override public XADataSource createXADataSource(Properties properties) throws SQLException { _EL_   Properties propertiesCopy=new Properties(); _EL_   if (properties != null) { _EL_     propertiesCopy.putAll(properties); _EL_   } _EL_   rejectUnsupportedOptions(propertiesCopy); _EL_   rejectPoolingOptions(propertiesCopy); _EL_   JdbcDataSource dataSource=new JdbcDataSource(); _EL_   setupH2DataSource(dataSource,propertiesCopy); _EL_   return dataSource; _EL_ } _EL_ ', 'public static double toDegrees(double x){ _EL_   if (Double.isInfinite(x) || x == 0.0) { _EL_     return x; _EL_   } _EL_   final double facta=57.2957763671875; _EL_   final double factb=3.145894820876798E-6; _EL_   double xa=doubleHighPart(x); _EL_   double xb=x - xa; _EL_   return xb * factb + xb * facta + xa * factb + xa * facta; _EL_ } _EL_ ', 'public void addHeaderView(View v){ _EL_   addHeaderView(v,null,true); _EL_ } _EL_ ', 'public static boolean isAbsolutePath(String systemId){ _EL_   if (systemId == null)   return false; _EL_   final File file=new File(systemId); _EL_   return file.isAbsolute(); _EL_ } _EL_ ', 'public ShapedCraftingRecipe(Item nominalOutput,RecipeFunction recipeFunction,String format,boolean mirrored,ItemIngredient... ingredients){ _EL_   this.nominalOutput=nominalOutput; _EL_   String[] formatLines=format.split("\\\\-"); _EL_   int numIngredients=0; _EL_   int width=0; _EL_   for (  String formatLine : formatLines) { _EL_     width=Math.max(width,formatLine.length()); _EL_     for (    char c : formatLine.toCharArray()) { _EL_       if (c == \' \') { _EL_         continue; _EL_       } _EL_  else       if (c >= \'A\' && c <= \'Z\') { _EL_         numIngredients++; _EL_       } _EL_  else { _EL_         throw new IllegalArgumentException("Invalid character in format string " + format + ": "+ c); _EL_       } _EL_     } _EL_   } _EL_   this.width=width; _EL_   this.height=formatLines.length; _EL_   this.posx=new int[numIngredients]; _EL_   this.posy=new int[numIngredients]; _EL_   this.ingredients=new ItemIngredient[numIngredients]; _EL_   this.mirrored=mirrored; _EL_   int ingredientIndex=0; _EL_   for (int y=0; y < this.height; y++) { _EL_     String formatLine=formatLines[y]; _EL_     for (int x=0; x < formatLine.length(); x++) { _EL_       char c=formatLine.charAt(x); _EL_       if (c == \' \') { _EL_         continue; _EL_       } _EL_       this.posx[ingredientIndex]=x; _EL_       this.posy[ingredientIndex]=y; _EL_       this.ingredients[ingredientIndex]=ingredients[c - \'A\']; _EL_       ingredientIndex++; _EL_     } _EL_   } _EL_   this.recipeFunction=recipeFunction; _EL_   this.lastIngredientIndexOnFirstLine=getLastIngredientIndexOnFirstLine(); _EL_ } _EL_ ', 'public void writeTag(String tag,Font value){ _EL_   startTag(tag); _EL_   writeTag("name",value.getName()); _EL_   int style=value.getStyle(); _EL_   if ((style & Font.BOLD) != 0 && (style & Font.ITALIC) != 0) { _EL_     writeTag(STYLE,"BOLDITALIC"); _EL_   } _EL_  else   if ((style & Font.BOLD) != 0) { _EL_     writeTag(STYLE,"BOLD"); _EL_   } _EL_  else   if ((style & Font.ITALIC) != 0) { _EL_     writeTag(STYLE,"ITALIC"); _EL_   } _EL_  else { _EL_     writeTag(STYLE,"PLAIN"); _EL_   } _EL_   writeTag("size",value.getSize()); _EL_   closeTag(); _EL_ } _EL_ ', 'private void internalWrite(byte[] b,int off,int len,boolean finish) throws IOException { _EL_   coder.output=embiggen(coder.output,coder.maxOutputSize(len)); _EL_   if (!coder.process(b,off,len,finish)) { _EL_     throw new Base64DataException("bad base-64"); _EL_   } _EL_   out.write(coder.output,0,coder.op); _EL_ } _EL_ ', 'private Socket connect(String host,String portString) throws IOException { _EL_   int port=0; _EL_   Socket sock=null; _EL_   boolean DEBUG=Debug.debugging("netmap"); _EL_   try { _EL_     port=Integer.parseInt(portString,10); _EL_   } _EL_  catch (  NumberFormatException e) { _EL_     if (DEBUG)     Debug.output("Illegal name " + host + ":"+ portString); _EL_     throw new IOException("Illegal port: " + portString); _EL_   } _EL_   if (DEBUG)   Debug.output("Connecting to server " + host + ":"+ port); _EL_   try { _EL_     sock=new Socket(host,port); _EL_   } _EL_  catch (  IOException e) { _EL_     if (sock != null)     sock.close(); _EL_     if (DEBUG) { _EL_       Debug.output("Can\'t connect to " + host + ":"+ port+ "\\n   "+ e); _EL_     } _EL_     throw e; _EL_   } _EL_   return sock; _EL_ } _EL_ ', '@Override public boolean batchFinished(){ _EL_   if (getInputFormat() == null) { _EL_     throw new IllegalStateException("No input instance format defined"); _EL_   } _EL_   Instances toFilter=getInputFormat(); _EL_   int cutOff=(int)Math.round(toFilter.numInstances() * m_Percentage / 100); _EL_   if (m_Inverse) { _EL_     for (int i=0; i < cutOff; i++) { _EL_       push(toFilter.instance(i)); _EL_     } _EL_   } _EL_  else { _EL_     for (int i=cutOff; i < toFilter.numInstances(); i++) { _EL_       push(toFilter.instance(i)); _EL_     } _EL_   } _EL_   flushInput(); _EL_   m_NewBatch=true; _EL_   m_FirstBatchDone=true; _EL_   return (numPendingOutput() != 0); _EL_ } _EL_ ', 'public void load(Element element,Object o){ _EL_   log.error("load(Element, Object) called unexpectedly"); _EL_ } _EL_ ', 'public OMRaster(double lt,double ln,int offset_x1,int offset_y1,ImageIcon ii){ _EL_   this(lt,ln,offset_x1,offset_y1,ii.getImage()); _EL_ } _EL_ ', 'private synchronized boolean startDequeue(){ _EL_   int threads=Math.min(queue.size(),maxThreads); _EL_   for (int i=0; i < threads; i++) { _EL_     ResourceThread t=(ResourceThread)queue.firstElement(); _EL_     queue.removeElementAt(0); _EL_     running.addElement(t); _EL_     threadCount++; _EL_   } _EL_   for (Enumeration e=running.elements(); e.hasMoreElements(); ) { _EL_     ResourceThread t=(ResourceThread)e.nextElement(); _EL_     t.go(); _EL_   } _EL_   return (threads > 0); _EL_ } _EL_ ', 'public void propertyChange(PropertyChangeEvent evt){ _EL_   String name=evt.getPropertyName(); _EL_   if (name == "width" || name == "preferredWidth") { _EL_     invalidateWidthCache(); _EL_     fireColumnMarginChanged(); _EL_   } _EL_ } _EL_ ', 'public static void assertEquals(Object object1,Object object2){ _EL_   checkAssertion(object1.equals(object2),null); _EL_ } _EL_ ', 'public static String flagNames(long flags){ _EL_   StringBuilder sbuf=new StringBuilder(); _EL_   int i=0; _EL_   long f=flags & StandardFlags; _EL_   while (f != 0) { _EL_     if ((f & 1) != 0) { _EL_       sbuf.append(" "); _EL_       sbuf.append(flagName[i]); _EL_     } _EL_     f=f >> 1; _EL_     i++; _EL_   } _EL_   return sbuf.toString(); _EL_ } _EL_ ', 'public String formatSQL(Object obj,Object expr){ _EL_   String sql=null; _EL_   if (expr instanceof String) { _EL_     sql=(String)expr; _EL_     if (log.isLoggable(Level.FINEST)) { _EL_       log.finest("SQL retrieved from state = " + sql); _EL_     } _EL_   } _EL_  else   if (obj != null) { _EL_     sql=toString(obj); _EL_     if (sql != null) { _EL_       if (sql.startsWith("prep")) { _EL_         sql=sql.replaceFirst("prep[0-9]*: ",""); _EL_       } _EL_       sql=sql.replaceAll("X\'.*\'",BINARY_SQL_MARKER); _EL_     } _EL_     if (log.isLoggable(Level.FINEST)) { _EL_       log.finest("SQL derived from context = " + sql); _EL_     } _EL_   } _EL_   return sql; _EL_ } _EL_ ', 'public void indent(){ _EL_   indent.append("  "); _EL_ } _EL_ ', 'public void addFakeView(View childView){ _EL_   childView.layout(0,0,getWidth(),childView.getMeasuredHeight()); _EL_   views.add(childView); _EL_ } _EL_ ', 'public void compileProjects(List<File> projects,IssueAcceptor issueAcceptor) throws N4JSCompileException { _EL_   compileProjects(Arrays.asList(new File(".")),projects,Collections.emptyList(),issueAcceptor); _EL_ } _EL_ ', 'protected final void print_contact_info(ObjectInfoPanel p_window,java.util.Locale p_locale){ _EL_   Collection<BrdItem> contacts=get_normal_contacts(); _EL_   if (contacts.isEmpty())   return; _EL_   GuiResources resources=r_board.newGuiResources("board.resources.ObjectInfoPanel"); _EL_   p_window.append(", " + resources.getString("contacts") + " "); _EL_   Integer contact_count=contacts.size(); _EL_   p_window.append_items(contact_count.toString(),resources.getString("contact_info"),contacts); _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public Promise<Result,Progress> resolve(Result result){ _EL_   List<DoneCallback<Result>> doneCallbacks; _EL_   List<AlwaysCallback> alwaysCallbacks; _EL_ synchronized (this) { _EL_     validateInPendingState(); _EL_     mState=STATE_RESOLVED; _EL_     printStateChanged("RESOLVED"); _EL_     mResult=result; _EL_     doneCallbacks=mCallbacks.cloneDoneCallbacks(); _EL_     alwaysCallbacks=mCallbacks.cloneAlwaysCallbacks(); _EL_     clearCallbacks(); _EL_   } _EL_   if (doneCallbacks.size() > 0 || alwaysCallbacks.size() > 0) { _EL_     triggerAllDones(doneCallbacks); _EL_     triggerAllAlways(alwaysCallbacks); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'private void adjustNameAndPosition(Node node,int deltaX,int deltaY){ _EL_   String originalName=node.getName(); _EL_   String uniqueName=nextUniqueName(originalName); _EL_   if (!uniqueName.equals(originalName)) { _EL_     node.setName(uniqueName); _EL_     node.setCenterX(node.getCenterX() + deltaX); _EL_     node.setCenterY(node.getCenterY() + deltaY); _EL_   } _EL_ } _EL_ ', 'public void save() throws IOException { _EL_   if (!props.isEmpty()) { _EL_     ConfigurationUtil.saveConfigurationProperties(props,propsFile,false); _EL_   } _EL_   ConfigurationUtil.saveConfigurationProperties(props,new File(propsFile.getParentFile(),propsFile.getName() + ".default"),true); _EL_ } _EL_ ', 'static void dispose(long pData,long pConfigInfo){ _EL_   OGLRenderQueue rq=OGLRenderQueue.getInstance(); _EL_   rq.lock(); _EL_   try { _EL_     OGLContext.setScratchSurface(pConfigInfo); _EL_     RenderBuffer buf=rq.getBuffer(); _EL_     rq.ensureCapacityAndAlignment(12,4); _EL_     buf.putInt(DISPOSE_SURFACE); _EL_     buf.putLong(pData); _EL_     rq.flushNow(); _EL_   } _EL_   finally { _EL_     rq.unlock(); _EL_   } _EL_ } _EL_ ', 'private void writeKanjiResourceFile(File file) throws IOException { _EL_   FileOutputStream output=null; _EL_   KanjiEscapeOutputStream kanji=null; _EL_   OutputStreamWriter writer=null; _EL_   BufferedWriter w=null; _EL_   try { _EL_     output=new FileOutputStream(file); _EL_     kanji=new KanjiEscapeOutputStream(output); _EL_     writer=new OutputStreamWriter(kanji); _EL_     w=new BufferedWriter(writer); _EL_     w.write(_sb.toString()); _EL_   } _EL_   finally { _EL_     Util.close(w); _EL_     Util.close(writer); _EL_     Util.close(kanji); _EL_     Util.close(output); _EL_   } _EL_ } _EL_ ', 'public ScannerException(File file,ErrorMessages message){ _EL_   this(file,ErrorMessages.get(message),message,-1,-1); _EL_ } _EL_ ', 'void renderNormal(){ _EL_   glEnable(GL_DEPTH_TEST); _EL_   glUseProgram(this.normalProgram); _EL_   glUniformMatrix4fv(viewMatrixUniform,false,viewMatrix.get(matrixBuffer)); _EL_   glUniformMatrix4fv(projMatrixUniform,false,projMatrix.get(matrixBuffer)); _EL_   glUniformMatrix3fv(normalMatrixUniform,false,normalMatrix.get(matrixBuffer)); _EL_   glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,fbo); _EL_   glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); _EL_   glBindBuffer(GL_ARRAY_BUFFER,this.cubeVbo); _EL_   glEnableVertexAttribArray(0); _EL_   glVertexAttribPointer(0,3,GL_FLOAT,false,0,0L); _EL_   glEnableVertexAttribArray(1); _EL_   glVertexAttribPointer(1,3,GL_FLOAT,false,0,normalsOffset); _EL_   glDrawArrays(GL_TRIANGLES,0,numVertices); _EL_   glDisableVertexAttribArray(0); _EL_   glDisableVertexAttribArray(1); _EL_   glBindBuffer(GL_ARRAY_BUFFER,0); _EL_   glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,0); _EL_   glUseProgram(0); _EL_ } _EL_ ', 'private void calcYValueSum(){ _EL_   mYValueSum=0; _EL_   for (int i=0; i < mYVals.size(); i++) { _EL_     Entry e=mYVals.get(i); _EL_     if (e != null)     mYValueSum+=Math.abs(e.getVal()); _EL_   } _EL_ } _EL_ ', '@Override public boolean release(int decrement){ _EL_   if (isEmpty) { _EL_     return false; _EL_   } _EL_   if (decrement < 1) { _EL_     throw new IllegalStateException(String.format("release(%d) argument is not positive. Buffer Info: %s",decrement,toVerboseString())); _EL_   } _EL_   final int refCnt=ledger.decrement(decrement); _EL_   if (BaseAllocator.DEBUG) { _EL_     historicalLog.recordEvent("release(%d). original value: %d",decrement,refCnt + decrement); _EL_   } _EL_   if (refCnt < 0) { _EL_     throw new IllegalStateException(String.format("ArrowBuf[%d] refCnt has gone negative. Buffer Info: %s",id,toVerboseString())); _EL_   } _EL_   return refCnt == 0; _EL_ } _EL_ ', 'int listSize(){ _EL_   int result=memSize(); _EL_   for (Iterator it=iterator(); it.hasNext(); ) { _EL_     ASTNode child=(ASTNode)it.next(); _EL_     result+=child.treeSize(); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public ConnectionTcp findConnectionByThreadId(long threadId){ _EL_   for (  PortTcp listener : getPorts()) { _EL_     ConnectionTcp conn=listener.findConnectionByThreadId(threadId); _EL_     if (conn != null)     return conn; _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public UniformDistribution estimate(double min,double max,final int count){ _EL_   double grow=(count > 1) ? 0.5 * (max - min) / (count - 1) : 0.; _EL_   return new UniformDistribution(Math.max(min - grow,-Double.MAX_VALUE),Math.min(max + grow,Double.MAX_VALUE)); _EL_ } _EL_ ', 'public static RepositoryMetaData readFrom(StreamInput in) throws IOException { _EL_   String name=in.readString(); _EL_   String type=in.readString(); _EL_   Settings settings=Settings.readSettingsFromStream(in); _EL_   return new RepositoryMetaData(name,type,settings); _EL_ } _EL_ ', 'public static boolean isPrimitiveDatatype(IRI datatype){ _EL_   return datatype.equals(XMLSchema.DURATION) || datatype.equals(XMLSchema.DATETIME) || datatype.equals(XMLSchema.TIME)|| datatype.equals(XMLSchema.DATE)|| datatype.equals(XMLSchema.GYEARMONTH)|| datatype.equals(XMLSchema.GYEAR)|| datatype.equals(XMLSchema.GMONTHDAY)|| datatype.equals(XMLSchema.GDAY)|| datatype.equals(XMLSchema.GMONTH)|| datatype.equals(XMLSchema.STRING)|| datatype.equals(XMLSchema.BOOLEAN)|| datatype.equals(XMLSchema.BASE64BINARY)|| datatype.equals(XMLSchema.HEXBINARY)|| datatype.equals(XMLSchema.FLOAT)|| datatype.equals(XMLSchema.DECIMAL)|| datatype.equals(XMLSchema.DOUBLE)|| datatype.equals(XMLSchema.ANYURI)|| datatype.equals(XMLSchema.QNAME)|| datatype.equals(XMLSchema.NOTATION); _EL_ } _EL_ ', 'public void addWritten(byte[] value){ _EL_   writeSetLock.lock(); _EL_   writeSet.add(new TimestampValuePair(ets,value)); _EL_   writeSetLock.unlock(); _EL_ } _EL_ ', 'public void load(Entity unit) throws IllegalArgumentException { _EL_   if (!canLoad(unit)) { _EL_     throw new IllegalArgumentException("Can not load " + unit.getShortName() + " into this bay."); _EL_   } _EL_   currentSpace-=1; _EL_   troops.addElement(unit.getId()); _EL_ } _EL_ ', 'private void processWorkerExit(Worker w,boolean completedAbruptly){ _EL_   if (completedAbruptly)   decrementWorkerCount(); _EL_   final ReentrantLock mainLock=this.mainLock; _EL_   mainLock.lock(); _EL_   try { _EL_     completedTaskCount+=w.completedTasks; _EL_     workers.remove(w); _EL_   } _EL_   finally { _EL_     mainLock.unlock(); _EL_   } _EL_   tryTerminate(); _EL_   int c=ctl.get(); _EL_   if (runStateLessThan(c,STOP)) { _EL_     if (!completedAbruptly) { _EL_       int min=allowCoreThreadTimeOut ? 0 : corePoolSize; _EL_       if (min == 0 && !workQueue.isEmpty())       min=1; _EL_       if (workerCountOf(c) >= min)       return; _EL_     } _EL_     addWorker(null,false); _EL_   } _EL_ } _EL_ ', 'public boolean free(T obj){ _EL_   AtomicInteger topRef=_top; _EL_   while (true) { _EL_     final int top=topRef.get(); _EL_     if (_capacity <= top) { _EL_       return false; _EL_     } _EL_     boolean isFree=_freeStack.compareAndSet(top,null,obj); _EL_     topRef.compareAndSet(top,top + 1); _EL_     if (isFree) { _EL_       return true; _EL_     } _EL_   } _EL_ } _EL_ ', 'public static boolean hasBinding(Injector injector,Key<?> key){ _EL_   Binding<?> binding=getBinding(injector,key); _EL_   return binding != null; _EL_ } _EL_ ', 'private OpenReplicatorManagerMBean createInternalService(String serviceName) throws ReplicatorException { _EL_   logger.info("Starting replication service: name=" + serviceName); _EL_   try { _EL_     OpenReplicatorManager orm=new OpenReplicatorManager(serviceName); _EL_     orm.setRmiHost(managerRMIHost); _EL_     orm.setRmiPort(managerRMIPort); _EL_     orm.setHostTimeZone(hostTimeZone); _EL_     orm.setReplicatorTimeZone(replicatorTimeZone); _EL_     orm.advertiseInternal(); _EL_     orm.setSecurityInfo(this.securityInfo); _EL_     return (OpenReplicatorManagerMBean)orm; _EL_   } _EL_  catch (  Exception e) { _EL_     throw new ReplicatorException(String.format("Unable to instantiate replication service \'%s\'",serviceName),e); _EL_   } _EL_ } _EL_ ', 'public static CheckIndex.Status checkIndex(Directory dir) throws IOException { _EL_   return checkIndex(dir,true); _EL_ } _EL_ ', 'public TaggedOutputStream(OutputStream proxy){ _EL_   super(proxy); _EL_ } _EL_ ', 'public List<MType> build(){ _EL_   isClean=true; _EL_   if (!isMessagesListMutable && builders == null) { _EL_     return messages; _EL_   } _EL_   boolean allMessagesInSync=true; _EL_   if (!isMessagesListMutable) { _EL_     for (int i=0; i < messages.size(); i++) { _EL_       Message message=messages.get(i); _EL_       SingleFieldBuilder<MType,BType,IType> builder=builders.get(i); _EL_       if (builder != null) { _EL_         if (builder.build() != message) { _EL_           allMessagesInSync=false; _EL_           break; _EL_         } _EL_       } _EL_     } _EL_     if (allMessagesInSync) { _EL_       return messages; _EL_     } _EL_   } _EL_   ensureMutableMessageList(); _EL_   for (int i=0; i < messages.size(); i++) { _EL_     messages.set(i,getMessage(i,true)); _EL_   } _EL_   messages=Collections.unmodifiableList(messages); _EL_   isMessagesListMutable=false; _EL_   return messages; _EL_ } _EL_ ', 'public static void putShort(long addr,short val){ _EL_   if (UNALIGNED)   UNSAFE.putShort(addr,val); _EL_  else   putShortByByte(addr,val,BIG_ENDIAN); _EL_ } _EL_ ', 'public static byte[] hashTwice(byte[] input,int offset,int length){ _EL_   MessageDigest digest=newDigest(); _EL_   digest.update(input,offset,length); _EL_   return digest.digest(digest.digest()); _EL_ } _EL_ ', 'public PronounceableFSM(URL url,boolean scanFromFront) throws IOException { _EL_   this.scanFromFront=scanFromFront; _EL_   InputStream is=Utilities.getInputStream(url); _EL_   loadText(is); _EL_   is.close(); _EL_ } _EL_ ', "private char[] applyFloatPadding(final char[] ca4,final boolean noDigits){ _EL_   char[] ca5=ca4; _EL_   if (fieldWidthSet) { _EL_     int i; _EL_     int j; _EL_     final int nBlanks; _EL_     if (leftJustify) { _EL_       nBlanks=fieldWidth - ca4.length; _EL_       if (nBlanks > 0) { _EL_         ca5=new char[ca4.length + nBlanks]; _EL_         for (i=0; i < ca4.length; i++) { _EL_           ca5[i]=ca4[i]; _EL_         } _EL_         for (j=0; j < nBlanks; j++, i++) { _EL_           ca5[i]=' '; _EL_         } _EL_       } _EL_     } _EL_  else     if (!leadingZeros || noDigits) { _EL_       nBlanks=fieldWidth - ca4.length; _EL_       if (nBlanks > 0) { _EL_         ca5=new char[ca4.length + nBlanks]; _EL_         for (i=0; i < nBlanks; i++) { _EL_           ca5[i]=' '; _EL_         } _EL_         for (j=0; j < ca4.length; i++, j++) { _EL_           ca5[i]=ca4[j]; _EL_         } _EL_       } _EL_     } _EL_  else     if (leadingZeros) { _EL_       nBlanks=fieldWidth - ca4.length; _EL_       if (nBlanks > 0) { _EL_         ca5=new char[ca4.length + nBlanks]; _EL_         i=0; _EL_         j=0; _EL_         if (ca4[0] == '-') { _EL_           ca5[0]='-'; _EL_           i++; _EL_           j++; _EL_         } _EL_         for (int k=0; k < nBlanks; i++, k++) { _EL_           ca5[i]='0'; _EL_         } _EL_         for (; j < ca4.length; i++, j++) { _EL_           ca5[i]=ca4[j]; _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return ca5; _EL_ } _EL_ ", 'public Object put(String key,Object value){ _EL_   final int len=key.length(); _EL_   if (len > m_charBuffer.length) { _EL_     m_charBuffer=new char[len]; _EL_   } _EL_   Node node=m_Root; _EL_   for (int i=0; i < len; i++) { _EL_     Node nextNode=node.m_nextChar[Character.toLowerCase(key.charAt(i))]; _EL_     if (nextNode != null) { _EL_       node=nextNode; _EL_     } _EL_  else { _EL_       for (; i < len; i++) { _EL_         Node newNode=new Node(); _EL_         if (m_lowerCaseOnly) { _EL_           node.m_nextChar[Character.toLowerCase(key.charAt(i))]=newNode; _EL_         } _EL_  else { _EL_           node.m_nextChar[Character.toUpperCase(key.charAt(i))]=newNode; _EL_           node.m_nextChar[Character.toLowerCase(key.charAt(i))]=newNode; _EL_         } _EL_         node=newNode; _EL_       } _EL_       break; _EL_     } _EL_   } _EL_   Object ret=node.m_Value; _EL_   node.m_Value=value; _EL_   return ret; _EL_ } _EL_ ', '@Override public void makeImmutable(){ _EL_   if (isMutable) { _EL_     if (authnStatements != null) { _EL_       int length=authnStatements.size(); _EL_       for (int i=0; i < length; i++) { _EL_         AuthnStatement authn=(AuthnStatement)authnStatements.get(i); _EL_         authn.makeImmutable(); _EL_       } _EL_       authnStatements=Collections.unmodifiableList(authnStatements); _EL_     } _EL_     if (authzDecisionStatements != null) { _EL_       int length=authzDecisionStatements.size(); _EL_       for (int i=0; i < length; i++) { _EL_         AuthzDecisionStatement authz=(AuthzDecisionStatement)authzDecisionStatements.get(i); _EL_         authz.makeImmutable(); _EL_       } _EL_       authzDecisionStatements=Collections.unmodifiableList(authzDecisionStatements); _EL_     } _EL_     if (attributeStatements != null) { _EL_       int length=attributeStatements.size(); _EL_       for (int i=0; i < length; i++) { _EL_         AttributeStatement attr=(AttributeStatement)attributeStatements.get(i); _EL_         attr.makeImmutable(); _EL_       } _EL_       attributeStatements=Collections.unmodifiableList(attributeStatements); _EL_     } _EL_     if (statements != null) { _EL_       statements=Collections.unmodifiableList(statements); _EL_     } _EL_     if (conditions != null) { _EL_       conditions.makeImmutable(); _EL_     } _EL_     if (issuer != null) { _EL_       issuer.makeImmutable(); _EL_     } _EL_     if (subject != null) { _EL_       subject.makeImmutable(); _EL_     } _EL_     if (advice != null) { _EL_       advice.makeImmutable(); _EL_     } _EL_     isMutable=false; _EL_   } _EL_ } _EL_ ', '@Override public String findLibrary(String name){ _EL_   String systemName=System.mapLibraryName(name); _EL_   ArrayList<Loader> loaders=getLoaders(); _EL_   for (int i=0; i < loaders.size(); i++) { _EL_     Loader loader=loaders.get(i); _EL_     Path path=loader.getPath(systemName); _EL_     if (path != null && path.canRead()) { _EL_       return path.getNativePath(); _EL_     } _EL_     path=loader.getPath("native/" + systemName); _EL_     if (path != null && path.canRead()) { _EL_       return path.getNativePath(); _EL_     } _EL_   } _EL_   for (int i=0; i < _nativePath.size(); i++) { _EL_     Path path=_nativePath.get(i); _EL_     if (path.canRead())     return path.getNativePath(); _EL_   } _EL_   return super.findLibrary(name); _EL_ } _EL_ ', 'public void removeComponentListener(final ComponentUpdateListener listener){ _EL_   componentListeners.remove(listener); _EL_ } _EL_ ', 'public static _Fields findByThriftId(int fieldId){ _EL_ switch (fieldId) { _EL_ case 1: _EL_     return APPKEY; _EL_ case 2: _EL_   return SEND_TIME; _EL_ case 3: _EL_ return LOAD_INFO; _EL_ case 4: _EL_ return STATUS; _EL_ default : _EL_ return null; _EL_ } _EL_ } _EL_ ', 'public static boolean isEmpty(CharSequence text){ _EL_   return text == null || text.length() == 0; _EL_ } _EL_ ', 'protected byte[] assertEncodeDecode(final IGangliaMetadataMessage decl,final IGangliaMessage expected){ _EL_   if (expected == null)   throw new IllegalArgumentException(); _EL_   final XDROutputBuffer xdr=new XDROutputBuffer(IGangliaDefaults.BUFFER_SIZE); _EL_   final GangliaMessageEncoder31 messageEncoder=new GangliaMessageEncoder31(); _EL_   final GangliaMessageDecoder31 messageDecoder=new GangliaMessageDecoder31(); _EL_   if (expected.isMetricRequest()) { _EL_     messageEncoder.writeRequest(xdr,(IGangliaRequestMessage)expected); _EL_   } _EL_  else   if (expected.isMetricMetadata()) { _EL_     messageEncoder.writeMetadata(xdr,(IGangliaMetadataMessage)expected); _EL_   } _EL_  else   if (expected.isMetricValue()) { _EL_     if (decl == null)     throw new IllegalArgumentException("Declaration required for metric value record"); _EL_     messageEncoder.writeMetric(xdr,decl,(IGangliaMetricMessage)expected); _EL_   } _EL_  else { _EL_     throw new AssertionError(); _EL_   } _EL_   final IGangliaMessage actual=messageDecoder.decode(xdr.getBuffer(),0,xdr.getLength()); _EL_   assertEquals("messages not equal()",expected,actual); _EL_   final byte[] actualData=new byte[xdr.getLength()]; _EL_   System.arraycopy(xdr.getBuffer(),0,actualData,0,actualData.length); _EL_   return actualData; _EL_ } _EL_ ', 'private boolean isIndexable(String term){ _EL_   return (term.length() < 30) && (term.length() > 2); _EL_ } _EL_ ', 'private void sendResponse(String status,String mime,Properties header,InputStream data){ _EL_   try { _EL_     if (status == null)     throw new Error("sendResponse(): Status can\'t be null."); _EL_     OutputStream out=mySocket.getOutputStream(); _EL_     PrintWriter pw=new PrintWriter(out); _EL_     pw.print("HTTP/1.0 " + status + " \\r\\n"); _EL_     if (mime != null)     pw.print("Content-Type: " + mime + "\\r\\n"); _EL_     if (header == null || header.getProperty("Date") == null)     pw.print("Date: " + gmtFrmt.format(new Date()) + "\\r\\n"); _EL_     if (header != null) { _EL_       Enumeration e=header.keys(); _EL_       while (e.hasMoreElements()) { _EL_         String key=(String)e.nextElement(); _EL_         String value=header.getProperty(key); _EL_         pw.print(key + ": " + value+ "\\r\\n"); _EL_       } _EL_     } _EL_     pw.print("\\r\\n"); _EL_     pw.flush(); _EL_     if (data != null) { _EL_       byte[] buff=new byte[2048]; _EL_       while (true) { _EL_         int read=data.read(buff,0,2048); _EL_         if (read <= 0)         break; _EL_         out.write(buff,0,read); _EL_       } _EL_     } _EL_     out.flush(); _EL_     out.close(); _EL_     if (data != null)     data.close(); _EL_   } _EL_  catch (  IOException ioe) { _EL_     try { _EL_       mySocket.close(); _EL_     } _EL_  catch (    Throwable t) { _EL_     } _EL_   } _EL_ } _EL_ ', 'protected void waitForShutdownSignal() throws InterruptedException { _EL_   if (mutexWaiting == null)   mutexWaiting=new Object(); _EL_   try { _EL_ synchronized (mutexWaiting) { _EL_       mutexWaiting.wait(); _EL_     } _EL_   } _EL_  catch (  InterruptedException e) { _EL_     if (!shutdown)     throw e; _EL_   } _EL_ } _EL_ ', 'public void addConnection(Connection connection){ _EL_   if (connection == null)   throw new IllegalArgumentException("connection cannot be null."); _EL_ synchronized (connectionsLock) { _EL_     Connection[] newConnections=new Connection[connections.length + 1]; _EL_     newConnections[0]=connection; _EL_     System.arraycopy(connections,0,newConnections,1,connections.length); _EL_     connections=newConnections; _EL_   } _EL_   connection.addListener(invokeListener); _EL_   if (TRACE)   trace("kryonet","Added connection to ObjectSpace: " + connection); _EL_ } _EL_ ', 'public double distance(Point2D pt){ _EL_   final double x_distance=(pt.getX() - x) * (pt.getX() - x); _EL_   final double y_distance=(pt.getY() - y) * (pt.getY() - y); _EL_   return Math.sqrt(x_distance + y_distance); _EL_ } _EL_ ', 'private static int convertToInt(String value,int defaultValue){ _EL_   String trim=value.trim(); _EL_   if (trim.length() == 0) { _EL_     return defaultValue; _EL_   } _EL_   return Integer.parseInt(trim); _EL_ } _EL_ ', '@Override public void run(){ _EL_   try { _EL_     for (; ; ) { _EL_       int n=portGetn(port,bufferAddress,MAX_EVENT_COUNT); _EL_       assert n > 0; _EL_       long address=bufferAddress; _EL_       for (int i=0; i < n; i++) { _EL_         boolean shutdown=processEvent(address); _EL_         if (shutdown)         return; _EL_         address+=SIZEOF_PORT_EVENT; _EL_       } _EL_     } _EL_   } _EL_  catch (  UnixException x) { _EL_     x.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'public DialogueRecorder(DialogueSystem system){ _EL_   this.settings=system.getSettings(); _EL_ } _EL_ ', 'private String generateUniqueFutureId(){ _EL_   return String.valueOf(mIdCounter.getAndIncrement()); _EL_ } _EL_ ', 'private static final void rescheduleMissedAlarms(ContentResolver cr,Context context,AlarmManagerInterface manager){ _EL_   long now=System.currentTimeMillis(); _EL_   long ancient=now - DateUtils.DAY_IN_MILLIS; _EL_   String[] projection=new String[]{CalendarContract.CalendarAlerts.ALARM_TIME}; _EL_   if (Build.VERSION.SDK_INT >= 23 && ContextCompat.checkSelfPermission(context,Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED) { _EL_     Log.d(TAG,"Manifest.permission.READ_CALENDAR is not granted"); _EL_     return; _EL_   } _EL_   Cursor cursor=cr.query(CalendarAlerts.CONTENT_URI,projection,WHERE_RESCHEDULE_MISSED_ALARMS,(new String[]{Long.toString(now),Long.toString(ancient),Long.toString(now)}),SORT_ORDER_ALARMTIME_ASC); _EL_   if (cursor == null) { _EL_     return; _EL_   } _EL_   if (DEBUG) { _EL_     Log.d(TAG,"missed alarms found: " + cursor.getCount()); _EL_   } _EL_   try { _EL_     long alarmTime=-1; _EL_     while (cursor.moveToNext()) { _EL_       long newAlarmTime=cursor.getLong(0); _EL_       if (alarmTime != newAlarmTime) { _EL_         if (DEBUG) { _EL_           Log.w(TAG,"rescheduling missed alarm. alarmTime: " + newAlarmTime); _EL_         } _EL_         AlertUtils.scheduleAlarm(context,manager,newAlarmTime); _EL_         alarmTime=newAlarmTime; _EL_       } _EL_     } _EL_   } _EL_   finally { _EL_     cursor.close(); _EL_   } _EL_ } _EL_ ', 'public void addName(String name){ _EL_   m_names.add(name); _EL_ } _EL_ ', 'private boolean toState(LifecycleState newState){ _EL_   LifecycleState state; _EL_ synchronized (this) { _EL_     state=_state; _EL_     _state=newState; _EL_     _lastChangeTime=CurrentTime.currentTime(); _EL_   } _EL_   if (_log != null && _log.isLoggable(_lowLevel)) { _EL_     _log.log(_lowLevel,newState + " " + _name); _EL_   } _EL_   notifyListeners(state,newState); _EL_   return true; _EL_ } _EL_ ', 'public boolean initDialog(){ _EL_   log.config(""); _EL_   gbc.anchor=GridBagConstraints.NORTHWEST; _EL_   gbc.weightx=0; _EL_   gbc.weighty=0; _EL_   gbc.gridy=m_line++; _EL_   gbc.gridx=0; _EL_   gbc.gridwidth=1; _EL_   gbc.insets=nullInset; _EL_   gbc.fill=GridBagConstraints.HORIZONTAL; _EL_   centerPanel.add(Box.createVerticalStrut(10),gbc); _EL_   MClient client=MClient.get(Env.getCtx()); _EL_   String ASPFilter=""; _EL_   if (client.isUseASP())   ASPFilter="   AND (   p.AD_Process_Para_ID IN ( " + "              SELECT pp.AD_Process_Para_ID " + "                FROM ASP_Process_Para pp, ASP_Process p, ASP_Level l, ASP_ClientLevel cl "+ "               WHERE p.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND cl.AD_Client_ID = " + client.getAD_Client_ID() + "                 AND cl.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND pp.ASP_Process_ID = p.ASP_Process_ID "+ "                 AND pp.IsActive = \'Y\' "+ "                 AND p.IsActive = \'Y\' "+ "                 AND l.IsActive = \'Y\' "+ "                 AND cl.IsActive = \'Y\' "+ "                 AND pp.ASP_Status = \'S\') "+ "        OR p.AD_Process_Para_ID IN ( "+ "              SELECT AD_Process_Para_ID "+ "                FROM ASP_ClientException ce "+ "               WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "                 AND ce.IsActive = \'Y\' "+ "                 AND ce.AD_Process_Para_ID IS NOT NULL "+ "                 AND ce.AD_Tab_ID IS NULL "+ "                 AND ce.AD_Field_ID IS NULL "+ "                 AND ce.ASP_Status = \'S\') "+ "       ) "+ "   AND p.AD_Process_Para_ID NOT IN ( "+ "          SELECT AD_Process_Para_ID "+ "            FROM ASP_ClientException ce "+ "           WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "             AND ce.IsActive = \'Y\' "+ "             AND ce.AD_Process_Para_ID IS NOT NULL "+ "             AND ce.AD_Tab_ID IS NULL "+ "             AND ce.AD_Field_ID IS NULL "+ "             AND ce.ASP_Status = \'H\')"; _EL_   String sql=null; _EL_   if (Env.isBaseLanguage(Env.getCtx(),"AD_Process_Para"))   sql="SELECT p.Name, p.Description, p.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, p.ReadOnlyLogic, p.DisplayLogic, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode "+ "FROM AD_Process_Para p"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND p.IsActive=\'Y\' " + ASPFilter + " ORDER BY SeqNo"; _EL_  else   sql="SELECT t.Name, t.Description, t.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, p.ReadOnlyLogic, p.DisplayLogic, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode "+ "FROM AD_Process_Para p"+ " INNER JOIN AD_Process_Para_Trl t ON (p.AD_Process_Para_ID=t.AD_Process_Para_ID)"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND t.AD_Language=\'" + Env.getAD_Language(Env.getCtx()) + "\'"+ " AND p.IsActive=\'Y\' "+ ASPFilter+ " ORDER BY SeqNo"; _EL_   boolean hasFields=false; _EL_   try { _EL_     PreparedStatement pstmt=DB.prepareStatement(sql,null); _EL_     pstmt.setInt(1,m_processInfo.getAD_Process_ID()); _EL_     ResultSet rs=pstmt.executeQuery(); _EL_     while (rs.next()) { _EL_       hasFields=true; _EL_       createField(rs); _EL_     } _EL_     rs.close(); _EL_     pstmt.close(); _EL_   } _EL_  catch (  SQLException e) { _EL_     log.log(Level.SEVERE,sql,e); _EL_   } _EL_   if (m_mFields.size() != m_mFields2.size() || m_mFields.size() != m_vEditors.size() || m_mFields2.size() != m_vEditors2.size())   log.log(Level.SEVERE,"View & Model vector size is different"); _EL_   if (hasFields) { _EL_     gbc.gridy=m_line++; _EL_     centerPanel.add(Box.createVerticalStrut(10),gbc); _EL_     gbc.gridx=3; _EL_     centerPanel.add(Box.createHorizontalStrut(12),gbc); _EL_     AEnv.positionCenterWindow(m_frame,this); _EL_   } _EL_  else   dispose(); _EL_   return hasFields; _EL_ } _EL_ ', "@Override protected String dateToString(DateTimeData date){ _EL_   StringBuffer message=new StringBuffer(5); _EL_   message.append('-'); _EL_   message.append('-'); _EL_   append(message,date.month,2); _EL_   append(message,(char)date.utc,0); _EL_   return message.toString(); _EL_ } _EL_ ", 'public void swap(int i,int j){ _EL_   x.assertTrue(i < list.size()); _EL_   x.assertTrue(j < list.size()); _EL_   list.set(i,list.set(j,list.get(i))); _EL_ } _EL_ ', 'private List<NameValuePair> buildIPTParameters(Ipt ipt,String organisationKey){ _EL_   List<NameValuePair> data=new ArrayList<NameValuePair>(); _EL_   if (ipt != null && organisationKey != null) { _EL_     data.add(new BasicNameValuePair("organisationKey",StringUtils.trimToEmpty(organisationKey))); _EL_     data.add(new BasicNameValuePair("name",StringUtils.trimToEmpty(ipt.getName()))); _EL_     data.add(new BasicNameValuePair("description",StringUtils.trimToEmpty(ipt.getDescription()))); _EL_     data.add(new BasicNameValuePair("primaryContactType",StringUtils.trimToEmpty(ipt.getPrimaryContactType()))); _EL_     data.add(new BasicNameValuePair("primaryContactName",StringUtils.trimToEmpty(ipt.getPrimaryContactName()))); _EL_     data.add(new BasicNameValuePair("primaryContactEmail",StringUtils.trimToEmpty(ipt.getPrimaryContactEmail()))); _EL_     data.add(new BasicNameValuePair("serviceTypes",SERVICE_TYPE_RSS)); _EL_     data.add(new BasicNameValuePair("serviceURLs",getRssFeedURL())); _EL_   } _EL_  else { _EL_     log.debug("One or both of IPT and Organisation key were null. Params needed for ws will be empty"); _EL_   } _EL_   return data; _EL_ } _EL_ ', 'public static <T,U extends Closeable>T withCloseable(U self,@ClosureParams(value=FirstParam.class) Closure<T> action) throws IOException { _EL_   try { _EL_     T result=action.call(self); _EL_     Closeable temp=self; _EL_     self=null; _EL_     temp.close(); _EL_     return result; _EL_   } _EL_   finally { _EL_     DefaultGroovyMethodsSupport.closeWithWarning(self); _EL_   } _EL_ } _EL_ ', 'public static boolean isMatch(String actualString,LinkedList patterns,char wildCard){ _EL_   boolean matched=false; _EL_   for (ListIterator iter=patterns.listIterator(0); iter.hasNext(); ) { _EL_     if (isMatch(actualString,(String)iter.next(),wildCard)) { _EL_       matched=true; _EL_       break; _EL_     } _EL_   } _EL_   return matched; _EL_ } _EL_ ', 'public synchronized void addServer(ServerLocation location,String[] groups,ServerLoad initialLoad,long loadPollInterval){ _EL_   serverGroupMap.put(location,groups); _EL_   LoadHolder connectionLoad=new LoadHolder(location,initialLoad.getConnectionLoad(),initialLoad.getLoadPerConnection(),loadPollInterval); _EL_   addGroups(connectionLoadMap,groups,connectionLoad); _EL_   LoadHolder queueLoad=new LoadHolder(location,initialLoad.getSubscriptionConnectionLoad(),initialLoad.getLoadPerSubscriptionConnection(),loadPollInterval); _EL_   addGroups(queueLoadMap,groups,queueLoad); _EL_   updateLoad(location,initialLoad); _EL_ } _EL_ ', 'public void addLeaf(CatalogTreeLeaf leaf){ _EL_   _leaves.add(leaf); _EL_ } _EL_ ', 'private static String stampToString(long tstamp,String formatMask){ _EL_   StringBuilder sb=new StringBuilder(30); _EL_   Formatter fmt=new Formatter(sb,Locale.US); _EL_   int[] pieces=new int[NUMIDX]; _EL_   ComponentTime.unpackBits(tstamp,pieces); _EL_   fmt.format(formatMask,pieces[YIDX],pieces[MIDX],pieces[DIDX],pieces[HIDX],pieces[IIDX],pieces[SIDX],pieces[UIDX]); _EL_   fmt.close(); _EL_   return (sb.toString()); _EL_ } _EL_ ', 'public HttpRequest contentLength(final String value){ _EL_   return contentLength(Integer.parseInt(value)); _EL_ } _EL_ ', 'public boolean draw(Canvas canvas){ _EL_   update(); _EL_   final float centerX=mBounds.centerX(); _EL_   final float centerY=mBounds.height() - mRadius; _EL_   canvas.scale(1.f,Math.min(mGlowScaleY,1.f) * mBaseGlowScale,centerX,0); _EL_   final float displacement=Math.max(0,Math.min(mDisplacement,1.f)) - 0.5f; _EL_   float translateX=mBounds.width() * displacement / 2; _EL_   mPaint.setAlpha((int)(0xff * mGlowAlpha)); _EL_   canvas.drawCircle(centerX + translateX,centerY,mRadius,mPaint); _EL_   boolean oneLastFrame=false; _EL_   if (mState == STATE_RECEDE && mGlowScaleY == 0) { _EL_     mState=STATE_IDLE; _EL_     oneLastFrame=true; _EL_   } _EL_   return mState != STATE_IDLE || oneLastFrame; _EL_ } _EL_ ', 'public VNXeCommandJob modifyLunAsync(LunModifyParam param,String resourceId){ _EL_   StringBuilder urlBld=new StringBuilder(URL_RESOURCE); _EL_   urlBld.append(resourceId); _EL_   urlBld.append(URL_LUN_MODIFY_ACTION); _EL_   _url=urlBld.toString(); _EL_   return postRequestAsync(param); _EL_ } _EL_ ', 'public void delete() throws IOException { _EL_   close(); _EL_   deleteContents(directory); _EL_ } _EL_ ', 'public void jGoogleAnalyticsTracker(final String eventType,final String version,final String trackerId){ _EL_   final JGoogleAnalyticsTracker tracker=new JGoogleAnalyticsTracker("vdi_calculator",version,trackerId); _EL_   final FocusPoint focusPoint=new FocusPoint(eventType.toLowerCase()); _EL_   tracker.trackAsynchronously(focusPoint); _EL_ } _EL_ ', 'protected final Tuple addInternal(Tuple t){ _EL_   if (m_tuples.add(t)) { _EL_     return t; _EL_   } _EL_  else { _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public void put(Song song){ _EL_   if (!mSongs.contains(song)) { _EL_     mSongs.add(song); _EL_   } _EL_ } _EL_ ', '@NotNull public PsiQuery childrenNamed(@NotNull final Class<? extends PsiNamedElement> clazz,@NotNull final String name){ _EL_   final List<PsiElement> result=new ArrayList<PsiElement>(); _EL_   for (  final PsiElement element : myPsiElements) { _EL_     for (    final PsiNamedElement child : PsiTreeUtil.findChildrenOfType(element,clazz)) { _EL_       if (name.equals(child.getName())) { _EL_         result.add(child); _EL_       } _EL_     } _EL_   } _EL_   return new PsiQuery(result.toArray(new PsiElement[result.size()])); _EL_ } _EL_ ', '@Override public boolean equals(Object o){ _EL_   return o.hashCode() == hashCode(); _EL_ } _EL_ ', '@Override public void removeTableModelListener(TableModelListener l){ _EL_   m_Listeners.remove(l); _EL_ } _EL_ ', 'public StrBuilder replace(int startIndex,int endIndex,String replaceStr){ _EL_   endIndex=validateRange(startIndex,endIndex); _EL_   int insertLen=(replaceStr == null ? 0 : replaceStr.length()); _EL_   replaceImpl(startIndex,endIndex,endIndex - startIndex,replaceStr,insertLen); _EL_   return this; _EL_ } _EL_ ', 'public static void addPermissionRecursive(Path path,PosixFilePermission permission) throws IOException { _EL_   changePermissionsRecursive(path,PermissionChange.ADD,Collections.singleton(permission)); _EL_ } _EL_ ', 'private void runTimeoutTask(){ _EL_   while (isActive()) { _EL_     reapTimeouts(); _EL_     try { _EL_       Thread.sleep(_timeoutReapInterval); _EL_     } _EL_  catch (    Exception e) { _EL_     } _EL_   } _EL_ } _EL_ ', 'public IDevice learnEntity(long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort,boolean processUpdates){ _EL_   List<IDeviceListener> listeners=deviceListeners.getOrderedListeners(); _EL_   if (!processUpdates) { _EL_     deviceListeners.clearListeners(); _EL_   } _EL_   VlanVid v; _EL_   IPv4Address i; _EL_   DatapathId d; _EL_   OFPort p; _EL_   if (vlan != null && vlan.shortValue() <= 0)   vlan=null; _EL_   if (ipv4Address != null && ipv4Address == 0)   ipv4Address=null; _EL_   if (vlan == null) { _EL_     v=VlanVid.ofVlan(-1); _EL_   } _EL_  else { _EL_     v=VlanVid.ofVlan(vlan); _EL_   } _EL_   if (ipv4Address == null) { _EL_     i=IPv4Address.NONE; _EL_   } _EL_  else { _EL_     i=IPv4Address.of(ipv4Address); _EL_   } _EL_   if (switchDPID == null) { _EL_     d=DatapathId.of(0); _EL_   } _EL_  else { _EL_     d=DatapathId.of(switchDPID.longValue()); _EL_   } _EL_   if (switchPort == null) { _EL_     p=OFPort.ZERO; _EL_   } _EL_  else { _EL_     p=OFPort.of(switchPort); _EL_   } _EL_   IDevice res=learnDeviceByEntity(new Entity(MacAddress.of(macAddress),v,i,d,p,new Date())); _EL_   if (listeners != null) { _EL_     for (    IDeviceListener listener : listeners) { _EL_       deviceListeners.addListener("device",listener); _EL_     } _EL_   } _EL_   return res; _EL_ } _EL_ ', 'public static boolean isValidTypeSignature(String sig,boolean allowVoid){ _EL_   int len=sig.length(); _EL_   return checkTypeSignature(sig,0,len,allowVoid) == len; _EL_ } _EL_ ', 'public static boolean hasVisibleChildren(ActionGroup group,PresentationFactory factory,ActionManager actionManager,PerspectiveManager perspectiveManager){ _EL_   ActionEvent event=new ActionEvent(factory.getPresentation(group),actionManager,perspectiveManager); _EL_   for (  Action anAction : group.getChildren(event)) { _EL_     if (anAction == null) { _EL_       Log.error(Utils.class,"Null action found in group " + group + ", "+ factory.getPresentation(group)); _EL_       continue; _EL_     } _EL_     if (anAction instanceof Separator) { _EL_       continue; _EL_     } _EL_     final Presentation presentation=factory.getPresentation(anAction); _EL_     anAction.update(new ActionEvent(presentation,actionManager,perspectiveManager)); _EL_     if (anAction instanceof ActionGroup) { _EL_       ActionGroup childGroup=(ActionGroup)anAction; _EL_       if (childGroup.isPopup()) { _EL_         if (!presentation.isVisible()) { _EL_           continue; _EL_         } _EL_       } _EL_       if (hasVisibleChildren(childGroup,factory,actionManager,perspectiveManager)) { _EL_         return true; _EL_       } _EL_     } _EL_  else     if (presentation.isVisible()) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private static void checkArgReferences(String typeSnippet,int numberOfArgs){ _EL_   Matcher argRefMatcher=ARG_REF_PATTERN.matcher(typeSnippet); _EL_   while (argRefMatcher.find()) { _EL_     int index=Integer.parseInt(argRefMatcher.group(1),10) - 1; _EL_     Preconditions.checkArgument(index >= 0,"%s not allowed, indices start at 1",argRefMatcher.group(0)); _EL_     Preconditions.checkArgument(index < numberOfArgs,"%s too large for number of provided type mirrors",argRefMatcher.group(0)); _EL_   } _EL_ } _EL_ ', 'public void randomize(){ _EL_   randomizeIncomingWeights(); _EL_   normalizeIncomingWeights(); _EL_ } _EL_ ', 'public static void saveAsImage(int x,int y,int width,int height,String path,CompressFormat compressFormat,int quality) throws FileNotFoundException { _EL_   Bitmap bmp=getPixelsFromBuffer(x,y,width,height); _EL_   try { _EL_     File file=new File(path); _EL_     try { _EL_       file.createNewFile(); _EL_     } _EL_  catch (    IOException e1) { _EL_       e1.printStackTrace(); _EL_     } _EL_     FileOutputStream fos=new FileOutputStream(file); _EL_     bmp.compress(compressFormat,quality,fos); _EL_     try { _EL_       fos.flush(); _EL_     } _EL_  catch (    IOException e) { _EL_       e.printStackTrace(); _EL_     } _EL_     try { _EL_       fos.close(); _EL_     } _EL_  catch (    IOException e) { _EL_       e.printStackTrace(); _EL_     } _EL_   } _EL_  catch (  FileNotFoundException e) { _EL_     throw (e); _EL_   } _EL_ } _EL_ ', 'public void removeSrcClass(SootClass clz){ _EL_   srcClasses.remove(clz.getName()); _EL_ } _EL_ ', 'private void updateRange(double value){ _EL_   mMinValue=Math.min(mMinValue,value); _EL_   mMaxValue=Math.max(mMaxValue,value); _EL_ } _EL_ ', 'JSONStringer close(Scope empty,Scope nonempty,String closeBracket) throws JSONException { _EL_   Scope context=peek(); _EL_   if (context != nonempty && context != empty) { _EL_     throw new JSONException("Nesting problem"); _EL_   } _EL_   stack.remove(stack.size() - 1); _EL_   if (context == nonempty) { _EL_     newline(); _EL_   } _EL_   out.append(closeBracket); _EL_   return this; _EL_ } _EL_ ', 'public static boolean enoughSpaceOnPhone(long updateSize){ _EL_   return getRealSizeOnPhone() > updateSize; _EL_ } _EL_ ', 'public void cancelButtonActionPerformed(){ _EL_   editMode=false; _EL_   curNode=null; _EL_   addButton.setVisible(true); _EL_   editButton.setVisible(true); _EL_   deleteButton.setVisible(true); _EL_   doneButton.setVisible(true); _EL_   updateButton.setVisible(false); _EL_   cancelButton.setVisible(false); _EL_   nodeAddrField.setVisible(true); _EL_   nodeAddrStatic.setVisible(false); _EL_   statusText1.setText(stdStatus1); _EL_   statusText2.setText(stdStatus2); _EL_   statusText3.setText(stdStatus3); _EL_ } _EL_ ', 'public String toZString(){ _EL_   StringBuilder buffer=new StringBuilder(32); _EL_   try { _EL_     printZ(buffer); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new RuntimeException("Exception printing to StringBuilder",e); _EL_   } _EL_   return buffer.toString(); _EL_ } _EL_ ', 'public TrieDictionary<T> build(int baseId){ _EL_   byte[] trieBytes=buildTrieBytes(baseId); _EL_   TrieDictionary<T> r=new TrieDictionary<T>(trieBytes); _EL_   return r; _EL_ } _EL_ ', 'public void recordState(DialogueState state,String name){ _EL_   states.put(name,state); _EL_   if (!listModel.contains(name)) { _EL_     int position=name.contains(CURRENT) ? 0 : Math.min(2,listModel.size()); _EL_     listModel.add(position,name); _EL_   } _EL_ } _EL_ ', 'public GeoServerWPSClient(GeoServerConnection connection){ _EL_   this.connection=connection; _EL_ } _EL_ ', 'protected ConnectionStateSSLv3(SSLSessionImpl session){ _EL_   try { _EL_     CipherSuite cipherSuite=session.cipherSuite; _EL_     boolean is_exportabe=cipherSuite.isExportable(); _EL_     hash_size=cipherSuite.getMACLength(); _EL_     int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial; _EL_     int iv_size=cipherSuite.ivSize; _EL_     block_size=cipherSuite.getBlockSize(); _EL_     String algName=cipherSuite.getBulkEncryptionAlgorithm(); _EL_     String hashName=cipherSuite.getHashName(); _EL_     if (logger != null) { _EL_       logger.println("ConnectionStateSSLv3.create:"); _EL_       logger.println("  cipher suite name: " + session.getCipherSuite()); _EL_       logger.println("  encryption alg name: " + algName); _EL_       logger.println("  hash alg name: " + hashName); _EL_       logger.println("  hash size: " + hash_size); _EL_       logger.println("  block size: " + block_size); _EL_       logger.println("  IV size:" + iv_size); _EL_       logger.println("  key size: " + key_size); _EL_     } _EL_     byte[] clientRandom=session.clientRandom; _EL_     byte[] serverRandom=session.serverRandom; _EL_     byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size]; _EL_     byte[] seed=new byte[clientRandom.length + serverRandom.length]; _EL_     System.arraycopy(serverRandom,0,seed,0,serverRandom.length); _EL_     System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length); _EL_     PRF.computePRF_SSLv3(key_block,session.master_secret,seed); _EL_     byte[] client_mac_secret=new byte[hash_size]; _EL_     byte[] server_mac_secret=new byte[hash_size]; _EL_     byte[] client_key=new byte[key_size]; _EL_     byte[] server_key=new byte[key_size]; _EL_     boolean is_client=!session.isServer; _EL_     System.arraycopy(key_block,0,client_mac_secret,0,hash_size); _EL_     System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size); _EL_     System.arraycopy(key_block,2 * hash_size,client_key,0,key_size); _EL_     System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size); _EL_     IvParameterSpec clientIV=null; _EL_     IvParameterSpec serverIV=null; _EL_     if (is_exportabe) { _EL_       if (logger != null) { _EL_         logger.println("ConnectionStateSSLv3: is_exportable"); _EL_       } _EL_       MessageDigest md5=MessageDigest.getInstance("MD5"); _EL_       md5.update(client_key); _EL_       md5.update(clientRandom); _EL_       md5.update(serverRandom); _EL_       client_key=md5.digest(); _EL_       md5.update(server_key); _EL_       md5.update(serverRandom); _EL_       md5.update(clientRandom); _EL_       server_key=md5.digest(); _EL_       key_size=cipherSuite.expandedKeyMaterial; _EL_       if (block_size != 0) { _EL_         md5.update(clientRandom); _EL_         md5.update(serverRandom); _EL_         clientIV=new IvParameterSpec(md5.digest(),0,iv_size); _EL_         md5.update(serverRandom); _EL_         md5.update(clientRandom); _EL_         serverIV=new IvParameterSpec(md5.digest(),0,iv_size); _EL_       } _EL_     } _EL_  else     if (block_size != 0) { _EL_       clientIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size,iv_size); _EL_       serverIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size + iv_size,iv_size); _EL_     } _EL_     if (logger != null) { _EL_       logger.println("is exportable: " + is_exportabe); _EL_       logger.println("master_secret"); _EL_       logger.print(session.master_secret); _EL_       logger.println("client_random"); _EL_       logger.print(clientRandom); _EL_       logger.println("server_random"); _EL_       logger.print(serverRandom); _EL_       logger.println("client_mac_secret"); _EL_       logger.print(client_mac_secret); _EL_       logger.println("server_mac_secret"); _EL_       logger.print(server_mac_secret); _EL_       logger.println("client_key"); _EL_       logger.print(client_key,0,key_size); _EL_       logger.println("server_key"); _EL_       logger.print(server_key,0,key_size); _EL_       if (clientIV != null) { _EL_         logger.println("client_iv"); _EL_         logger.print(clientIV.getIV()); _EL_         logger.println("server_iv"); _EL_         logger.print(serverIV.getIV()); _EL_       } _EL_  else { _EL_         logger.println("no IV."); _EL_       } _EL_     } _EL_     if (algName == null) { _EL_       encCipher=new NullCipher(); _EL_       decCipher=new NullCipher(); _EL_     } _EL_  else { _EL_       encCipher=Cipher.getInstance(algName); _EL_       decCipher=Cipher.getInstance(algName); _EL_       if (is_client) { _EL_         encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV); _EL_         decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV); _EL_       } _EL_  else { _EL_         encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV); _EL_         decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV); _EL_       } _EL_     } _EL_     messageDigest=MessageDigest.getInstance(hashName); _EL_     if (is_client) { _EL_       mac_write_secret=client_mac_secret; _EL_       mac_read_secret=server_mac_secret; _EL_     } _EL_  else { _EL_       mac_write_secret=server_mac_secret; _EL_       mac_read_secret=client_mac_secret; _EL_     } _EL_     if (hashName.equals("MD5")) { _EL_       pad_1=SSLv3Constants.MD5pad1; _EL_       pad_2=SSLv3Constants.MD5pad2; _EL_     } _EL_  else { _EL_       pad_1=SSLv3Constants.SHApad1; _EL_       pad_2=SSLv3Constants.SHApad2; _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_     throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during computation of security parameters")); _EL_   } _EL_ } _EL_ ', 'static boolean verifyZipFile(File file){ _EL_   try { _EL_     ZipFile zipFile=new ZipFile(file); _EL_     try { _EL_       zipFile.close(); _EL_       return true; _EL_     } _EL_  catch (    IOException e) { _EL_       Log.w(TAG,"Failed to close zip file: " + file.getAbsolutePath()); _EL_     } _EL_   } _EL_  catch (  ZipException ex) { _EL_     Log.w(TAG,"File " + file.getAbsolutePath() + " is not a valid zip file.",ex); _EL_   } _EL_ catch (  IOException ex) { _EL_     Log.w(TAG,"Got an IOException trying to open zip file: " + file.getAbsolutePath(),ex); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public boolean compare(Object expected,Object current){ _EL_   if (current != null) { _EL_     equal=current.equals(expected); _EL_   } _EL_  else   if (expected != null) { _EL_     equal=expected.equals(1.0); _EL_   } _EL_   return equal; _EL_ } _EL_ ', 'private static byte[] generateSeed(){ _EL_   try { _EL_     ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream(); _EL_     DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer); _EL_     seedBufferOut.writeLong(System.currentTimeMillis()); _EL_     seedBufferOut.writeLong(System.nanoTime()); _EL_     seedBufferOut.writeInt(Process.myPid()); _EL_     seedBufferOut.writeInt(Process.myUid()); _EL_     seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL); _EL_     seedBufferOut.close(); _EL_     return seedBuffer.toByteArray(); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new SecurityException("Failed to generate seed",e); _EL_   } _EL_ } _EL_ ', 'private List<UserNamespaceAuthorization> createUserNamespaceAuthorizationsFromEntities(List<UserNamespaceAuthorizationEntity> userNamespaceAuthorizationEntities){ _EL_   List<UserNamespaceAuthorization> userNamespaceAuthorizations=new ArrayList<>(); _EL_   for (  UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity : userNamespaceAuthorizationEntities) { _EL_     userNamespaceAuthorizations.add(createUserNamespaceAuthorizationFromEntity(userNamespaceAuthorizationEntity)); _EL_   } _EL_   return userNamespaceAuthorizations; _EL_ } _EL_ ', 'private void readHeader() throws OpenStegoException { _EL_   this.dataHeader=new DCTDataHeader(this,this.config); _EL_ } _EL_ ', 'protected <T extends KeySpec>T engineGetKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException { _EL_   BigInteger p, q, g, x, y; _EL_   if (key != null) { _EL_     if (keySpec == null) { _EL_       throw new NullPointerException("keySpec == null"); _EL_     } _EL_     if (key instanceof DSAPrivateKey) { _EL_       DSAPrivateKey privateKey=(DSAPrivateKey)key; _EL_       if (keySpec.equals(DSAPrivateKeySpec.class)) { _EL_         x=privateKey.getX(); _EL_         DSAParams params=privateKey.getParams(); _EL_         p=params.getP(); _EL_         q=params.getQ(); _EL_         g=params.getG(); _EL_         return (T)(new DSAPrivateKeySpec(x,p,q,g)); _EL_       } _EL_       if (keySpec.equals(PKCS8EncodedKeySpec.class)) { _EL_         return (T)(new PKCS8EncodedKeySpec(key.getEncoded())); _EL_       } _EL_       throw new InvalidKeySpecException("\'keySpec\' is neither DSAPrivateKeySpec nor PKCS8EncodedKeySpec"); _EL_     } _EL_     if (key instanceof DSAPublicKey) { _EL_       DSAPublicKey publicKey=(DSAPublicKey)key; _EL_       if (keySpec.equals(DSAPublicKeySpec.class)) { _EL_         y=publicKey.getY(); _EL_         DSAParams params=publicKey.getParams(); _EL_         p=params.getP(); _EL_         q=params.getQ(); _EL_         g=params.getG(); _EL_         return (T)(new DSAPublicKeySpec(y,p,q,g)); _EL_       } _EL_       if (keySpec.equals(X509EncodedKeySpec.class)) { _EL_         return (T)(new X509EncodedKeySpec(key.getEncoded())); _EL_       } _EL_       throw new InvalidKeySpecException("\'keySpec\' is neither DSAPublicKeySpec nor X509EncodedKeySpec"); _EL_     } _EL_   } _EL_   throw new InvalidKeySpecException("\'key\' is neither DSAPublicKey nor DSAPrivateKey"); _EL_ } _EL_ ', 'public boolean isLessThenOrEqualTo(Percent Percent){ _EL_   assertDefined(); _EL_   BigDecimal thisValue=notNull(this); _EL_   BigDecimal parameter=notNull(Percent); _EL_   return (thisValue.compareTo(parameter) <= 0); _EL_ } _EL_ ', 'public static boolean pointOutsidePrefSize(JTable table,int row,int column,Point p){ _EL_   if (table.convertColumnIndexToModel(column) != 0 || row == -1) { _EL_     return true; _EL_   } _EL_   TableCellRenderer tcr=table.getCellRenderer(row,column); _EL_   Object value=table.getValueAt(row,column); _EL_   Component cell=tcr.getTableCellRendererComponent(table,value,false,false,row,column); _EL_   Dimension itemSize=cell.getPreferredSize(); _EL_   Rectangle cellBounds=table.getCellRect(row,column,false); _EL_   cellBounds.width=itemSize.width; _EL_   cellBounds.height=itemSize.height; _EL_   assert (p.x >= cellBounds.x && p.y >= cellBounds.y); _EL_   return p.x > cellBounds.x + cellBounds.width || p.y > cellBounds.y + cellBounds.height; _EL_ } _EL_ ', 'public Builder addSourceFolder(@NonNull File folder){ _EL_   foldersToScan.add(folder); _EL_   return this; _EL_ } _EL_ ', 'public Method suspendSRDFGroupMethod(final URI systemURI,final RemoteDirectorGroup group,final List<URI> sourceVolumes,final List<URI> targetVolumes){ _EL_   return new Workflow.Method(SUSPEND_SRDF_GROUP_METHOD,systemURI,group,sourceVolumes,targetVolumes); _EL_ } _EL_ ', 'private void fieldGoalAtt(Team offense,Team defense){ _EL_   double fgDistRatio=Math.pow((110 - gameYardLine) / 50,2); _EL_   double fgAccRatio=Math.pow((110 - gameYardLine) / 50,1.25); _EL_   double fgDistChance=(getHFadv() + offense.getK(0).ratKickPow - fgDistRatio * 80); _EL_   double fgAccChance=(getHFadv() + offense.getK(0).ratKickAcc - fgAccRatio * 80); _EL_   if (fgDistChance > 20 && fgAccChance * Math.random() > 15) { _EL_     if (gamePoss) { _EL_       homeScore+=3; _EL_       HomeKStats[3]++; _EL_       HomeKStats[2]++; _EL_     } _EL_  else { _EL_       awayScore+=3; _EL_       AwayKStats[3]++; _EL_       AwayKStats[2]++; _EL_     } _EL_     gameEventLog+=getEventPrefix() + offense.abbr + " K "+ offense.getK(0).name+ " made the "+ (110 - gameYardLine)+ " yard FG."; _EL_     addPointsQuarter(3); _EL_     offense.getK(0).statsFGMade++; _EL_     offense.getK(0).statsFGAtt++; _EL_     if (!playingOT)     kickOff(offense); _EL_  else     resetForOT(); _EL_   } _EL_  else { _EL_     gameEventLog+=getEventPrefix() + offense.abbr + " K "+ offense.getK(0).name+ " missed the "+ (110 - gameYardLine)+ " yard FG."; _EL_     offense.getK(0).statsFGAtt++; _EL_     if (!playingOT) { _EL_       gameYardLine=Math.max(100 - gameYardLine,20); _EL_       gameDown=1; _EL_       gameYardsNeed=10; _EL_       if (gamePoss) { _EL_         HomeKStats[3]++; _EL_       } _EL_  else { _EL_         AwayKStats[3]++; _EL_       } _EL_       gamePoss=!gamePoss; _EL_     } _EL_  else     resetForOT(); _EL_   } _EL_   gameTime-=20; _EL_ } _EL_ ', '@Override public double calculateM(double delta,double epsilon){ _EL_   double i=1; _EL_   while (conf(i,delta) > epsilon / 2.0d) { _EL_     i=i + 10000; _EL_   } _EL_   if (i > 1) { _EL_     i=i - 10000; _EL_   } _EL_   while (conf(i,delta) > (epsilon / 2.0d)) { _EL_     i++; _EL_   } _EL_   return Math.ceil(i); _EL_ } _EL_ ', 'public static ServerSocket createServerSocket(int port,InetAddress bindAddress) throws IOException { _EL_   ServerSocket socket=null; _EL_   if (SysProperties.ENABLE_ANONYMOUS_TLS) { _EL_     removeAnonFromLegacyAlgorithms(); _EL_   } _EL_   setKeystore(); _EL_   ServerSocketFactory f=SSLServerSocketFactory.getDefault(); _EL_   SSLServerSocket secureSocket; _EL_   if (bindAddress == null) { _EL_     secureSocket=(SSLServerSocket)f.createServerSocket(port); _EL_   } _EL_  else { _EL_     secureSocket=(SSLServerSocket)f.createServerSocket(port,0,bindAddress); _EL_   } _EL_   secureSocket.setEnabledProtocols(disableSSL(secureSocket.getEnabledProtocols())); _EL_   if (SysProperties.ENABLE_ANONYMOUS_TLS) { _EL_     String[] list=enableAnonymous(secureSocket.getEnabledCipherSuites(),secureSocket.getSupportedCipherSuites()); _EL_     secureSocket.setEnabledCipherSuites(list); _EL_   } _EL_   socket=secureSocket; _EL_   return socket; _EL_ } _EL_ ', "public void printBytes(byte[] data,int offset,int length) throws IOException { _EL_   int i; _EL_   for (; length >= 3; length-=3) { _EL_     int chunk=(((data[offset] & 0xff) << 16) + ((data[offset + 1] & 0xff) << 8) + (data[offset + 2] & 0xff)); _EL_     os.write(base64encode(chunk >> 18)); _EL_     os.write(base64encode(chunk >> 12)); _EL_     os.write(base64encode(chunk >> 6)); _EL_     os.write(base64encode(chunk)); _EL_     offset+=3; _EL_   } _EL_   if (length == 2) { _EL_     int chunk=((data[offset] & 0xff) << 8) + (data[offset + 1] & 0xff); _EL_     os.write(base64encode(chunk >> 12)); _EL_     os.write(base64encode(chunk >> 6)); _EL_     os.write(base64encode(chunk)); _EL_     os.write('='); _EL_   } _EL_  else   if (length == 1) { _EL_     int chunk=data[offset] & 0xff; _EL_     os.write(base64encode(chunk >> 6)); _EL_     os.write(base64encode(chunk)); _EL_     os.write('='); _EL_     os.write('='); _EL_   } _EL_ } _EL_ ", 'private int findKeyCommentIndex(String keyName){ _EL_   for (int i=0; i < keyValComments.size(); i++) { _EL_     String t=keyValComments.get(i); _EL_     String targetedKey="! " + keyName + ": "; _EL_     if (t.startsWith(targetedKey)) { _EL_       return i; _EL_     } _EL_   } _EL_   if (log.isDebugEnabled()) { _EL_     log.debug("Did not find key " + keyName); _EL_   } _EL_   return -1; _EL_ } _EL_ ', 'public boolean isExpired(){ _EL_   return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= System.currentTimeMillis()); _EL_ } _EL_ ', 'public static boolean isAddToHomeIntentSupported(Context context){ _EL_   PackageManager pm=context.getPackageManager(); _EL_   Intent i=new Intent(INSTALL_SHORTCUT); _EL_   List<ResolveInfo> receivers=pm.queryBroadcastReceivers(i,PackageManager.GET_INTENT_FILTERS); _EL_   return !receivers.isEmpty(); _EL_ } _EL_ ', 'InMemoryEntryStore(){ _EL_   entries=Maps.newHashMap(); _EL_   topLevelEntries=Sets.newHashSet(); _EL_   children=HashMultimap.create(); _EL_ } _EL_ ', 'public ClassAnnotator(URL[] codebase,Properties props){ _EL_   if (props != null)   properties.putAll(props); _EL_   setAnnotationURLs(codebase); _EL_ } _EL_ ', 'public int next(){ _EL_   return mix(gen.getAndIncrement()); _EL_ } _EL_ ', 'public static String[] parseTitle(String title){ _EL_   String v[]={"",""}; _EL_   if (title == null)   return v; _EL_   Pattern p=Pattern.compile("(.*)\\\\s+\\\\(?([0-9]{4})\\\\)?",Pattern.CASE_INSENSITIVE); _EL_   Matcher m=p.matcher(title); _EL_   if (m.find()) { _EL_     v[0]=m.group(1); _EL_     v[1]=m.group(2); _EL_   } _EL_  else { _EL_     v[0]=title; _EL_   } _EL_   return v; _EL_ } _EL_ ', 'public String sel(){ _EL_   return mSelection.toString(); _EL_ } _EL_ ', 'public void rootRemoved(ISVNRepositoryLocation root){ _EL_   Iterator it=listeners.iterator(); _EL_   while (it.hasNext()) { _EL_     IRepositoryListener listener=(IRepositoryListener)it.next(); _EL_     listener.repositoryRemoved(root); _EL_   } _EL_ } _EL_ ', 'public synchronized void insert(double _priority,Object _data){ _EL_   numElements++; _EL_   if (numElements == queue.length) { _EL_     PriorityQueueNode[] tmp=new PriorityQueueNode[(int)(queue.length * 1.5)]; _EL_     System.arraycopy(queue,0,tmp,0,queue.length); _EL_     for (int i=queue.length; i < tmp.length; i++) { _EL_       tmp[i]=new PriorityQueueNode(); _EL_     } _EL_     queue=tmp; _EL_   } _EL_   queue[numElements].data=_data; _EL_   queue[numElements].priority=_priority; _EL_   reheapify(numElements); _EL_ } _EL_ ', 'protected String wrapLinuxCommand(String command) throws IOException, InterruptedException { _EL_   String setGroup="export GROUP_NAME=`(getent group " + getGid() + " || (groupadd -g "+ getGid()+ " user && echo user:x:"+ getGid()+ ")) | cut -d: -f1`"; _EL_   String setUser="export USER_NAME=`(getent passwd " + getUid() + " || (useradd -u "+ getUid()+ " -g ${GROUP_NAME} user && echo user:x:"+ getGid()+ ")) | cut -d: -f1`"; _EL_   String chownCommand="chown --silent -R ${USER_NAME}.${GROUP_NAME} /usr/src/app || true"; _EL_   return setGroup + " && " + setUser+ " && "+ chownCommand+ " && "+ command+ " && "+ chownCommand; _EL_ } _EL_ ', 'public AbstractDMLQuery parseSqlQuery(SQLQuery sqlQuery,ISpaceProxy space) throws SQLException { _EL_   AbstractDMLQuery query=(AbstractDMLQuery)getQueryFromCache(getUniqueKey(sqlQuery)); _EL_   try { _EL_     if (query == null) { _EL_       if (_logger.isLoggable(Level.FINE)) { _EL_         _logger.fine("Query wasn\'t in cache, will be parsed"); _EL_       } _EL_       SqlParser parser=initParser(sqlQuery.getQuery()); _EL_       query=parse(parser); _EL_       query.setTableName(sqlQuery.getTypeName()); _EL_       query.validateQuery(space); _EL_       if (!query.isPrepared() && !query.containsSubQueries())       query.build(); _EL_       addQueryToCache(getUniqueKey(sqlQuery),query); _EL_       if (!query.isPrepared())       return query; _EL_     } _EL_     query=query.clone(); _EL_     return query; _EL_   } _EL_  catch (  SQLException sqlEx) { _EL_     if (_logger.isLoggable(Level.FINE)) { _EL_       _logger.log(Level.FINE,"Error executing statement [" + sqlQuery.getQuery() + "]",sqlEx); _EL_     } _EL_     throw sqlEx; _EL_   } _EL_ catch (  Throwable t) { _EL_     if (_logger.isLoggable(Level.FINE)) { _EL_       _logger.log(Level.FINE,"Couldn\'t parse given statement [" + sqlQuery.getQuery() + "]",t); _EL_     } _EL_     SQLException sqlEx=new SQLException("Error in statement [" + sqlQuery.getQuery() + "]; Cause: "+ t,"GSP",-201); _EL_     sqlEx.initCause(t); _EL_     throw sqlEx; _EL_   } _EL_ } _EL_ ', 'private int indexOfElementInLevel(int element,int level[]) throws Exception { _EL_   for (int i=0; i < level.length; i++) { _EL_     if (level[i] == element) { _EL_       return i; _EL_     } _EL_   } _EL_   throw new Exception("Error. Didn\'t find element " + m_nodes.get(element).ID + " in level. Inspect code for "+ "weka.gui.graphvisualizer.HierarchicalBCEngine"); _EL_ } _EL_ ', "public String consumeTagName(){ _EL_   int start=pos; _EL_   while (!isEmpty() && (matchesWord() || matchesAny(':','_','-')))   pos++; _EL_   return queue.substring(start,pos); _EL_ } _EL_ ", 'public void deepSort(int[] setFeatureSequence){ _EL_   featureSequence=setFeatureSequence; _EL_   numberOfLeaves=0; _EL_   tree=new MaryNode(0,featureVectors.length); _EL_   sortNode(0,tree); _EL_ } _EL_ ', 'public void removeListeners(){ _EL_   listeners.clear(); _EL_ } _EL_ ', 'public String decrypt(String sCipherText){ _EL_   int nLen=(sCipherText.length() >> 1) & ~7; _EL_   if (nLen < BlowfishECB.BLOCKSIZE)   return null; _EL_   byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE]; _EL_   int nNumOfBytes=BinConverter.binHexToBytes(sCipherText,cbciv,0,0,BlowfishECB.BLOCKSIZE); _EL_   if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null; _EL_   m_bfish.setCBCIV(cbciv); _EL_   nLen-=BlowfishECB.BLOCKSIZE; _EL_   if (nLen == 0)   return ""; _EL_   byte[] buf=new byte[nLen]; _EL_   nNumOfBytes=BinConverter.binHexToBytes(sCipherText,buf,BlowfishECB.BLOCKSIZE * 2,0,nLen); _EL_   if (nNumOfBytes < nLen)   return null; _EL_   m_bfish.decrypt(buf); _EL_   int nPadByte=buf[buf.length - 1] & 0x0ff; _EL_   if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0; _EL_   nNumOfBytes-=nPadByte; _EL_   if (nNumOfBytes < 0)   return ""; _EL_   return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes); _EL_ } _EL_ ', 'private double addRecursively(ArrayList<double[]> hull,Hierarchy<Cluster<Model>> hier,Cluster<Model> clus){ _EL_   final DBIDs ids=clus.getIDs(); _EL_   double weight=ids.size(); _EL_   for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) { _EL_     double[] projP=proj.fastProjectDataToRenderSpace(rel.get(iter)); _EL_     if (projP[0] != projP[0] || projP[1] != projP[1]) { _EL_       continue; _EL_     } _EL_     hull.add(projP); _EL_   } _EL_   for (Iter<Cluster<Model>> iter=hier.iterChildren(clus); iter.valid(); iter.advance()) { _EL_     weight+=.5 * addRecursively(hull,hier,iter.get()); _EL_   } _EL_   return weight; _EL_ } _EL_ ', 'public static boolean decodeToFile(String dataToDecode,String filename){ _EL_   boolean success=false; _EL_   Base64.OutputStream bos=null; _EL_   try { _EL_     bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE); _EL_     bos.write(dataToDecode.getBytes(PREFERRED_ENCODING)); _EL_     success=true; _EL_   } _EL_  catch (  java.io.IOException e) { _EL_     success=false; _EL_   } _EL_  finally { _EL_     try { _EL_       bos.close(); _EL_     } _EL_  catch (    Exception e) { _EL_     } _EL_   } _EL_   return success; _EL_ } _EL_ ', 'public void evict() throws Exception { _EL_   assertOpen(); _EL_   boolean isEmpty; _EL_ synchronized (this) { _EL_     isEmpty=pool.isEmpty(); _EL_   } _EL_   if (!isEmpty) { _EL_     if (softMinEvictableIdleTimeMillis > 0) { _EL_       int numToEvict=getNumIdle() - getMinIdle(); _EL_       evict(System.currentTimeMillis() - softMinEvictableIdleTimeMillis,numToEvict); _EL_     } _EL_     if (minEvictableIdleTimeMillis > 0) { _EL_       int numToEvict=getNumIdle(); _EL_       evict(System.currentTimeMillis() - minEvictableIdleTimeMillis,numToEvict); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected void generateRandomPopulation(int population_size){ _EL_   logger.debug("Creating random population"); _EL_   for (int i=0; i < population_size; i++) { _EL_     T individual=chromosomeFactory.getChromosome(); _EL_     for (    FitnessFunction<?> fitnessFunction : this.fitnessFunctions) { _EL_       individual.addFitness(fitnessFunction); _EL_     } _EL_     population.add(individual); _EL_     if (isFinished())     break; _EL_   } _EL_   logger.debug("Created " + population.size() + " individuals"); _EL_ } _EL_ ', 'public Session(){ _EL_   long uptime=System.currentTimeMillis(); _EL_   mMainHandler=new Handler(Looper.getMainLooper()); _EL_   mTimestamp=(uptime / 1000) << 32 & (((uptime - ((uptime / 1000) * 1000)) >> 32) / 1000); _EL_   mOrigin="127.0.0.1"; _EL_   try { _EL_     sSignal.await(); _EL_   } _EL_  catch (  InterruptedException e) { _EL_   } _EL_ } _EL_ ', 'public List<Visitante> listar(){ _EL_   List<Visitante> dados=new ArrayList<>(); _EL_   try { _EL_     String sql="SELECT tb_visitantes.* FROM tb_visitantes "; _EL_     stm=conector.prepareStatement(sql); _EL_     rs=stm.executeQuery(sql); _EL_     while (rs.next()) { _EL_       dados.add(new Visitante(rs.getInt(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6),Tempo.toDate(rs.getTimestamp(7)),rs.getString(8),rs.getString(9))); _EL_     } _EL_     stm.close(); _EL_     rs.close(); _EL_   } _EL_  catch (  SQLException ex) { _EL_     Mensagem.erro("Erro ao consultar visitantes na base de dados! \\n" + ex); _EL_   } _EL_   return dados; _EL_ } _EL_ ', '@Override public Writer append(char value){ _EL_   builder.append(value); _EL_   return this; _EL_ } _EL_ ', 'private void insertBefore(Instruction[] list,Instruction s){ _EL_   for (  Instruction x : list) { _EL_     s.insertBefore(x); _EL_   } _EL_ } _EL_ ', 'public static Builder newBuilder(){ _EL_   return new Builder(); _EL_ } _EL_ ', 'public int countArray(String[] array){ _EL_   return array.length; _EL_ } _EL_ ', 'public double[] popy(double x_[]){ _EL_   return popY(new double[][]{x_})[0]; _EL_ } _EL_ ', 'public void delete(String name) throws IOException { _EL_   if (name.equalsIgnoreCase(SUBJECT_NAME)) { _EL_     names=null; _EL_   } _EL_  else { _EL_     throw new IOException("Attribute name not recognized by " + "CertAttrSet:SubjectAlternativeName."); _EL_   } _EL_   encodeThis(); _EL_ } _EL_ ', 'public void pushElemAttributeSet(ElemAttributeSet attrSet){ _EL_   m_attrSetStack.push(attrSet); _EL_ } _EL_ ', 'private void finishScrollStacks(){ _EL_   cancelAnimation(this,Property.STACK_SNAP); _EL_   final int currentModelIndex=getTabStackIndex(); _EL_   float delta=Math.abs(currentModelIndex + mRenderedScrollOffset); _EL_   float target=-currentModelIndex; _EL_   if (delta != 0) { _EL_     long duration=FLING_MIN_DURATION + (long)Math.abs(delta * getFullScrollDistance() / mFlingSpeed); _EL_     addToAnimation(this,Property.STACK_SNAP,mRenderedScrollOffset,target,duration,0); _EL_   } _EL_  else { _EL_     setProperty(Property.STACK_SNAP,target); _EL_     if (mTemporarySelectedStack != null) { _EL_       mTabModelSelector.selectModel(mTemporarySelectedStack); _EL_       mTemporarySelectedStack=null; _EL_     } _EL_   } _EL_ } _EL_ ', 'public GeoDistanceBuilder addUnboundedFrom(String key,double from){ _EL_   ranges.add(new Range(key,from,null)); _EL_   return this; _EL_ } _EL_ ', 'private void sendResponse(Document doc,MessageFactory messageFactory,String contentType,HttpServletResponse res) throws IOException, SOAPException { _EL_   SOAPMessage reply=messageFactory.createMessage(); _EL_   SOAPHeader header=reply.getSOAPHeader(); _EL_   header.detachNode(); _EL_   SOAPBody replyBody=reply.getSOAPBody(); _EL_   res.setHeader("Content-Type",contentType); _EL_   replyBody.addDocument(doc); _EL_   reply.saveChanges(); _EL_   OutputStream os=res.getOutputStream(); _EL_   reply.writeTo(os); _EL_   os.flush(); _EL_ } _EL_ ', 'public static String replaceChars(String str,String oldchars,char newchar){ _EL_   int pos=indexOfChars(str,oldchars); _EL_   if (pos == -1) { _EL_     return str; _EL_   } _EL_   StringBuilder buf=new StringBuilder(str); _EL_   do { _EL_     buf.setCharAt(pos,newchar); _EL_     pos=indexOfChars(str,oldchars,pos + 1); _EL_   } _EL_  while (pos != -1); _EL_   return buf.toString(); _EL_ } _EL_ ', 'public final CharSequence yytext(){ _EL_   return zzBuffer.subSequence(zzStartRead,zzMarkedPos); _EL_ } _EL_ ', 'public InMemoryMessageExchangeStore(final NetworkConfig config,TokenProvider tokenProvider){ _EL_   if (config == null) { _EL_     throw new NullPointerException("Configuration must not be null"); _EL_   } _EL_   if (tokenProvider == null) { _EL_     throw new NullPointerException("TokenProvider must not be null"); _EL_   } _EL_   this.tokenProvider=tokenProvider; _EL_   this.config=config; _EL_ } _EL_ ', 'public static void next(){ _EL_   try { _EL_     if (musicPlaybackService != null) { _EL_       musicPlaybackService.next(); _EL_     } _EL_   } _EL_  catch (  final RemoteException ignored) { _EL_   } _EL_ } _EL_ ', 'private void drawBitmapWithStroke(Canvas canvas,Bitmap bitmap,int centerX,int centerY,float radius,Paint drawPaint){ _EL_   drawPaint.setStyle(Paint.Style.FILL); _EL_   float strokeRadius=radius + mRadiusStrokeWidth; _EL_   drawPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR)); _EL_   canvas.drawCircle(centerX,centerY,strokeRadius,drawPaint); _EL_   drawPaint.setXfermode(null); _EL_   final int halfBitmapWidth=bitmap.getWidth() / 2; _EL_   final int halfBitmapHeight=bitmap.getHeight() / 2; _EL_   BitmapShader bitmapShader=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT); _EL_   Matrix shaderMatrix=new Matrix(); _EL_   float minSize=bitmap.getWidth() > bitmap.getHeight() ? bitmap.getHeight() : bitmap.getWidth(); _EL_   float scale=radius * 2 / minSize; _EL_   shaderMatrix.setScale(scale,scale); _EL_   shaderMatrix.postTranslate(centerX - (halfBitmapWidth * scale),centerY - (halfBitmapHeight * scale)); _EL_   bitmapShader.setLocalMatrix(shaderMatrix); _EL_   drawPaint.setShader(bitmapShader); _EL_   canvas.drawCircle(centerX,centerY,radius,drawPaint); _EL_   drawPaint.setShader(null); _EL_ } _EL_ ', 'public MqttDevice mqttDevice(){ _EL_   return mqttDevice; _EL_ } _EL_ ', 'public AbbaLockingDetector startCollecting(){ _EL_   thread=new Thread(this,"AbbaLockingDetector"); _EL_   thread.setDaemon(true); _EL_   thread.start(); _EL_   return this; _EL_ } _EL_ ', 'public float toMeters(double pixels){ _EL_   return (float)(pixels * METERS_PER_PIXELS); _EL_ } _EL_ ', 'boolean addToBuffer(char c) throws IOException { _EL_   int len=sb.length(); _EL_   if (len == 0 && c != CHAR_LT)   return false; _EL_   sb.append(c); _EL_   if (++len >= minTagLen) { _EL_     boolean isClosingTag=(len >= 2 && sb.charAt(1) == CHAR_SL); _EL_     String substr; _EL_     if (isClosingTag)     substr=sb.substring(2); _EL_  else     substr=sb.substring(1); _EL_     for (int i=0; i < EXCLUDE_TAGS.length; i++) { _EL_       if (substr.equalsIgnoreCase(EXCLUDE_TAGS[i])) { _EL_         if (isClosingTag) { _EL_           depthDec(i); _EL_           printBuffer(); _EL_           lastChar=0; _EL_         } _EL_  else { _EL_           depthInc(i); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static double length(double x,double y,double z){ _EL_   return Math.sqrt(x * x + y * y + z * z); _EL_ } _EL_ ', 'public static <T>T jsonToObject(String jsonString,Class<T> klass){ _EL_   T objectFromJson=null; _EL_   try { _EL_     GfJsonObject jsonObject=new GfJsonObject(jsonString); _EL_     objectFromJson=klass.newInstance(); _EL_     Method[] declaredMethods=klass.getDeclaredMethods(); _EL_     Map<String,Method> methodsMap=new HashMap<String,Method>(); _EL_     for (    Method method : declaredMethods) { _EL_       methodsMap.put(method.getName(),method); _EL_     } _EL_     int noOfFields=jsonObject.size(); _EL_     Iterator<String> keys=jsonObject.keys(); _EL_     while (keys.hasNext()) { _EL_       String key=keys.next(); _EL_       Method method=methodsMap.get("set" + capitalize(key)); _EL_       if (method != null) { _EL_         Class<?>[] parameterTypes=method.getParameterTypes(); _EL_         if (parameterTypes.length == 1) { _EL_           Class<?> parameterType=parameterTypes[0]; _EL_           Object value=jsonObject.get(key); _EL_           if (isPrimitiveOrWrapper(parameterType)) { _EL_             value=getPrimitiveOrWrapperValue(parameterType,value); _EL_           } _EL_  else           if (isArray(parameterType)) { _EL_             value=toArray(value,parameterType); _EL_           } _EL_  else           if (isList(parameterType)) { _EL_             value=toList(value,parameterType); _EL_           } _EL_  else           if (isMap(parameterType)) { _EL_             value=toMap(value,parameterType); _EL_           } _EL_  else           if (isSet(parameterType)) { _EL_             value=toSet(value,parameterType); _EL_           } _EL_  else { _EL_             value=jsonToObject(value.toString(),parameterType); _EL_           } _EL_           method.invoke(objectFromJson,new Object[]{value}); _EL_           noOfFields--; _EL_         } _EL_       } _EL_     } _EL_     if (noOfFields != 0) { _EL_       throw new IllegalArgumentException("Not enough setter methods for fields in given JSON String : " + jsonString + " in class : "+ klass); _EL_     } _EL_   } _EL_  catch (  InstantiationException e) { _EL_     throw new IllegalArgumentException("Couldn\'t convert JSON to Object of type " + klass,e); _EL_   } _EL_ catch (  IllegalAccessException e) { _EL_     throw new IllegalArgumentException("Couldn\'t convert JSON to Object of type " + klass,e); _EL_   } _EL_ catch (  GfJsonException e) { _EL_     throw new IllegalArgumentException("Couldn\'t convert JSON to Object of type " + klass,e); _EL_   } _EL_ catch (  IllegalArgumentException e) { _EL_     throw new IllegalArgumentException("Couldn\'t convert JSON to Object of type " + klass,e); _EL_   } _EL_ catch (  InvocationTargetException e) { _EL_     throw new IllegalArgumentException("Couldn\'t convert JSON to Object of type " + klass,e); _EL_   } _EL_   return objectFromJson; _EL_ } _EL_ ', 'private Cache createCache() throws CacheException { _EL_   final Properties props=new Properties(); _EL_   props.setProperty(LOCATORS,""); _EL_   props.setProperty(MCAST_PORT,"0"); _EL_   return CacheFactory.create(DistributedSystem.connect(props)); _EL_ } _EL_ ', 'public AttributeListPanel(){ _EL_   m_Table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); _EL_   m_Table.setColumnSelectionAllowed(false); _EL_   m_Table.setPreferredScrollableViewportSize(new Dimension(250,150)); _EL_   setLayout(new BorderLayout()); _EL_   add(new JScrollPane(m_Table),BorderLayout.CENTER); _EL_ } _EL_ ', 'private Environment(){ _EL_   throw ContractUtils.unreachable(); _EL_ } _EL_ ', 'public static int binarySearch(double[] array,int startIndex,int endIndex,double value){ _EL_   checkIndexForBinarySearch(array.length,startIndex,endIndex); _EL_   long longBits=Double.doubleToLongBits(value); _EL_   int low=startIndex, mid=-1, high=endIndex - 1; _EL_   while (low <= high) { _EL_     mid=(low + high) >>> 1; _EL_     if (lessThan(array[mid],value)) { _EL_       low=mid + 1; _EL_     } _EL_  else     if (longBits == Double.doubleToLongBits(array[mid])) { _EL_       return mid; _EL_     } _EL_  else { _EL_       high=mid - 1; _EL_     } _EL_   } _EL_   if (mid < 0) { _EL_     int insertPoint=endIndex; _EL_     for (int index=startIndex; index < endIndex; index++) { _EL_       if (value < array[index]) { _EL_         insertPoint=index; _EL_       } _EL_     } _EL_     return -insertPoint - 1; _EL_   } _EL_   return -mid - (lessThan(value,array[mid]) ? 1 : 2); _EL_ } _EL_ ', 'public static void compute(double minScore,double topPercent,double maxExpected,float minPercentIdentity,IReadBlock readBlock,String classificationName,BitSet activeMatchesForClassification){ _EL_   activeMatchesForClassification.clear(); _EL_   for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) { _EL_     final IMatchBlock matchBlock=readBlock.getMatchBlock(i); _EL_     if (!matchBlock.isIgnore() && matchBlock.getBitScore() >= minScore && matchBlock.getExpected() <= maxExpected && matchBlock.getPercentIdentity() >= minPercentIdentity) { _EL_       if (matchBlock.getId(classificationName) > 0)       activeMatchesForClassification.set(i); _EL_     } _EL_   } _EL_   float bestScore=0; _EL_   for (int i=activeMatchesForClassification.nextSetBit(0); i != -1; i=activeMatchesForClassification.nextSetBit(i + 1)) { _EL_     final IMatchBlock matchBlock=readBlock.getMatchBlock(i); _EL_     float score=matchBlock.getBitScore(); _EL_     if (score > bestScore)     bestScore=score; _EL_   } _EL_   applyTopPercentFilter(topPercent,bestScore,minPercentIdentity,readBlock,activeMatchesForClassification); _EL_ } _EL_ ', 'public E[] toArray(E[] a){ _EL_   if (a.length != array.length()) { _EL_     throw new ElasticsearchGenerationException("AtomicArrays can only be copied to arrays of the same size"); _EL_   } _EL_   for (int i=0; i < array.length(); i++) { _EL_     a[i]=array.get(i); _EL_   } _EL_   return a; _EL_ } _EL_ ', 'synchronized public void failOn(Failure fail){ _EL_   if (failures == null) { _EL_     failures=new ArrayList<>(); _EL_   } _EL_   failures.add(fail); _EL_ } _EL_ ', 'public void dump_stack(){ _EL_   if (stack == null) { _EL_     debug_message("# Stack dump requested, but stack is null"); _EL_     return; _EL_   } _EL_   debug_message("============ Parse Stack Dump ============"); _EL_   for (int i=0; i < stack.size(); i++) { _EL_     debug_message("Symbol: " + ((symbol)stack.elementAt(i)).sym + " State: "+ ((symbol)stack.elementAt(i)).parse_state); _EL_   } _EL_   debug_message("=========================================="); _EL_ } _EL_ ', 'private static Set<String> createCategoriesSet(Set<String> categories){ _EL_   Set<String> result=new HashSet<>(); _EL_   for (  String cat : categories) { _EL_     result.add(StringUtil.toLowerCase(cat)); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public void loadListener(String serverKey) throws GenericServiceException { _EL_   Server server=servers.get(serverKey); _EL_   if (server == null)   throw new GenericServiceException("No listener found with that serverKey."); _EL_   loadListener(serverKey,server); _EL_ } _EL_ ', 'public void upload(File file,long restartAt,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException { _EL_   if (!file.exists()) { _EL_     throw new FileNotFoundException(file.getAbsolutePath()); _EL_   } _EL_   InputStream inputStream=null; _EL_   try { _EL_     inputStream=new FileInputStream(file); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new FTPDataTransferException(e); _EL_   } _EL_   try { _EL_     upload(file.getName(),inputStream,restartAt,restartAt,listener); _EL_   } _EL_  catch (  IllegalStateException e) { _EL_     throw e; _EL_   } _EL_ catch (  IOException e) { _EL_     throw e; _EL_   } _EL_ catch (  FTPIllegalReplyException e) { _EL_     throw e; _EL_   } _EL_ catch (  FTPException e) { _EL_     throw e; _EL_   } _EL_ catch (  FTPDataTransferException e) { _EL_     throw e; _EL_   } _EL_ catch (  FTPAbortedException e) { _EL_     throw e; _EL_   } _EL_  finally { _EL_     if (inputStream != null) { _EL_       try { _EL_         inputStream.close(); _EL_       } _EL_  catch (      Throwable t) { _EL_         ; _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public SSLSocket createSSLSocket(Socket socket) throws IOException { _EL_   SSLSocketFactory sf=((SSLSocketFactory)SSLSocketFactory.getDefault()); _EL_   InetSocketAddress remoteAddress=(InetSocketAddress)socket.getRemoteSocketAddress(); _EL_   SSLSocket s=(SSLSocket)(sf.createSocket(socket,remoteAddress.getHostName(),socket.getPort(),true)); _EL_   s.setUseClientMode(false); _EL_   s.setEnabledCipherSuites(s.getSupportedCipherSuites()); _EL_   return s; _EL_ } _EL_ ', 'public static void unregisterMBean(Class<?> mbeanInterface){ _EL_   MBeanServer mbs=ManagementFactory.getPlatformMBeanServer(); _EL_   try { _EL_     ObjectName name=generateMBeanObjectName(mbeanInterface); _EL_     if (mbs.isRegistered(name)) { _EL_       logger.info("Unregistering mbean: " + name.toString()); _EL_       mbs.unregisterMBean(name); _EL_     } _EL_  else { _EL_       logger.warn("Ignoring attempt to unregister unknown mbean: " + name.toString()); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     throw new ServerRuntimeException("Unable to unregister mbean: interface=" + mbeanInterface,e); _EL_   } _EL_ } _EL_ ', 'public void writeExif(InputStream jpegStream,String exifOutFileName) throws FileNotFoundException, IOException { _EL_   if (jpegStream == null || exifOutFileName == null) { _EL_     throw new IllegalArgumentException(NULL_ARGUMENT_STRING); _EL_   } _EL_   OutputStream s=null; _EL_   try { _EL_     s=getExifWriterStream(exifOutFileName); _EL_     doExifStreamIO(jpegStream,s); _EL_     s.flush(); _EL_   } _EL_  catch (  IOException e) { _EL_     closeSilently(s); _EL_     throw e; _EL_   } _EL_   s.close(); _EL_ } _EL_ ', 'public JsonArray add(String value){ _EL_   values.add(Json.value(value)); _EL_   return this; _EL_ } _EL_ ', "public MagicVariablesArgumentsBundle(@NonNull Map<String,String> arguments,@NonNull Map<String,String> variables,String layerName,@NonNull DisplayMetrics metrics){ _EL_   super(arguments,metrics); _EL_   mVariables=variables; _EL_   mLayerNamePrefix='@' + layerName.replace('-','_') + '_'; _EL_ } _EL_ ", 'public static Date convertISO8601toDate(String dateString) throws ParseException { _EL_   DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd\'T\'HH:mm:ss"); _EL_   Date date=dateFormat.parse(dateString); _EL_   return date; _EL_ } _EL_ ', 'public static Document createDOM(InputStream is) throws ParserConfigurationException, SAXException, IOException { _EL_   DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance(); _EL_   dbf.setValidating(false); _EL_   dbf.setIgnoringComments(false); _EL_   dbf.setIgnoringElementContentWhitespace(true); _EL_   dbf.setNamespaceAware(true); _EL_   dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true); _EL_   dbf.setFeature(DISALLOW_DOCTYPE_DECL,true); _EL_   dbf.setFeature(EXTERNAL_GENERAL_ENTITIES,false); _EL_   dbf.setFeature(EXTERNAL_PARAMETER_ENTITIES,false); _EL_   dbf.setFeature(LOAD_EXTERNAL_DTD,false); _EL_   DocumentBuilder db=null; _EL_   db=dbf.newDocumentBuilder(); _EL_   db.setEntityResolver(new NullResolver()); _EL_   db.setErrorHandler(new SamlParserErrorHandler()); _EL_   return db.parse(is); _EL_ } _EL_ ', 'public void resetCount(){ _EL_   msgCnt.set(0); _EL_ } _EL_ ', 'public void scheduleAtFixedRate(TimerTask task,Date when,long period){ _EL_   if (period <= 0 || when.getTime() < 0) { _EL_     throw new IllegalArgumentException(); _EL_   } _EL_   long delay=when.getTime() - System.currentTimeMillis(); _EL_   scheduleImpl(task,delay,period,true); _EL_ } _EL_ ', 'public static void copyAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException { _EL_   String abi=Build.CPU_ABI; _EL_   String libraryName; _EL_   if (abi.equalsIgnoreCase("armeabi")) { _EL_     libraryName="armeabi"; _EL_   } _EL_  else   if (abi.equalsIgnoreCase("x86")) { _EL_     libraryName="x86"; _EL_   } _EL_  else   if (abi.contains("armeabi-v7")) { _EL_     libraryName="armeabi-v7a"; _EL_   } _EL_  else { _EL_     return; _EL_   } _EL_   AssetManager manager=context.getAssets(); _EL_   final InputStream is=manager.open(libraryName + "/" + assetsFilename); _EL_   copyFile(file,is,mode); _EL_ } _EL_ ', 'public static double nextUp(double d){ _EL_   if (d == Double.POSITIVE_INFINITY)   return d; _EL_  else { _EL_     d+=0.0d; _EL_     return Double.longBitsToDouble(Double.doubleToRawLongBits(d) + ((d >= 0.0d) ? +1L : -1L)); _EL_   } _EL_ } _EL_ ', 'public int threeWayDistance(Key k1,Key k2){ _EL_   byte[] h0=hash; _EL_   byte[] h1=k1.hash; _EL_   byte[] h2=k2.hash; _EL_   int mmi=mismatch(h1,h2); _EL_   if (mmi == -1)   return 0; _EL_   int h=Byte.toUnsignedInt(h0[mmi]); _EL_   int a=Byte.toUnsignedInt(h1[mmi]); _EL_   int b=Byte.toUnsignedInt(h2[mmi]); _EL_   return Integer.compareUnsigned(a ^ h,b ^ h); _EL_ } _EL_ ', "static byte[] discardWhitespace(byte[] data){ _EL_   byte groomedData[]=new byte[data.length]; _EL_   int bytesCopied=0; _EL_   for (int i=0; i < data.length; i++) { _EL_ switch (data[i]) { _EL_ case (byte)' ': _EL_ case (byte)'\\n': _EL_ case (byte)'\\r': _EL_ case (byte)'\\t': _EL_       break; _EL_ default : _EL_     groomedData[bytesCopied++]=data[i]; _EL_ } _EL_ } _EL_ byte packedData[]=new byte[bytesCopied]; _EL_ System.arraycopy(groomedData,0,packedData,0,bytesCopied); _EL_ return packedData; _EL_ } _EL_ ", 'public AsyncSelector() throws IOException { _EL_   this(Selector.open()); _EL_ } _EL_ ', 'public void removeChildAt(int index){ _EL_   if ((index < 0) || (children == null) || (index >= children.size())) { _EL_     throw new ArrayIndexOutOfBoundsException(); _EL_   } _EL_   Element child=(Element)children.get(index); _EL_   child.setParent(null); _EL_   children.remove(index); _EL_ } _EL_ ', 'private LinkedList<Diff> diff_bisectSplit(String text1,String text2,int x,int y,long deadline){ _EL_   String text1a=text1.substring(0,x); _EL_   String text2a=text2.substring(0,y); _EL_   String text1b=text1.substring(x); _EL_   String text2b=text2.substring(y); _EL_   LinkedList<Diff> diffs=diff_main(text1a,text2a,false,deadline); _EL_   LinkedList<Diff> diffsb=diff_main(text1b,text2b,false,deadline); _EL_   diffs.addAll(diffsb); _EL_   return diffs; _EL_ } _EL_ ', 'private void paint(Painter p,SynthContext ctx,Graphics g,int x,int y,int w,int h,AffineTransform transform){ _EL_   if (p != null) { _EL_     if (g instanceof Graphics2D) { _EL_       Graphics2D gfx=(Graphics2D)g; _EL_       if (transform != null) { _EL_         gfx.transform(transform); _EL_       } _EL_       gfx.translate(x,y); _EL_       p.paint(gfx,ctx.getComponent(),w,h); _EL_       gfx.translate(-x,-y); _EL_       if (transform != null) { _EL_         try { _EL_           gfx.transform(transform.createInverse()); _EL_         } _EL_  catch (        NoninvertibleTransformException e) { _EL_           e.printStackTrace(); _EL_         } _EL_       } _EL_     } _EL_  else { _EL_       BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB); _EL_       Graphics2D gfx=img.createGraphics(); _EL_       if (transform != null) { _EL_         gfx.transform(transform); _EL_       } _EL_       p.paint(gfx,ctx.getComponent(),w,h); _EL_       gfx.dispose(); _EL_       g.drawImage(img,x,y,null); _EL_       img=null; _EL_     } _EL_   } _EL_ } _EL_ ', 'static void loadDirectory(File file,ModuleCandidate candidate) throws IOException { _EL_   File[] files=file.listFiles(); _EL_   if (files != null)   for (  File f : files)   loadSubDirectory(file,f,candidate); _EL_ } _EL_ ', 'public static boolean hasSuppressed(@Nullable Throwable t,@Nullable Class<? extends Throwable> cls){ _EL_   if (t == null || cls == null)   return false; _EL_   if (t.getSuppressed() != null) { _EL_     for (    Throwable th : t.getSuppressed()) { _EL_       if (cls.isAssignableFrom(th.getClass()))       return true; _EL_       if (hasSuppressed(th,cls))       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'static int writeVarLong(OutputStream out,long x) throws IOException { _EL_   int len=0; _EL_   while ((x & ~0x7f) != 0) { _EL_     out.write((byte)(0x80 | (x & 0x7f))); _EL_     x>>>=7; _EL_     len++; _EL_   } _EL_   out.write((byte)x); _EL_   return ++len; _EL_ } _EL_ ', 'protected void engineUpdate(byte b) throws SignatureException { _EL_   messageDigest.update(b); _EL_   needsReset=true; _EL_ } _EL_ ', 'public static DMLConfig readConfigurationFile(String configPath) throws ParseException, FileNotFoundException { _EL_   DMLConfig config=new DMLConfig(); _EL_   if (configPath != null) { _EL_     try { _EL_       config=new DMLConfig(configPath,false); _EL_     } _EL_  catch (    FileNotFoundException fnfe) { _EL_       LOG.error("Custom config file " + configPath + " not found."); _EL_       throw fnfe; _EL_     } _EL_ catch (    ParseException e) { _EL_       throw e; _EL_     } _EL_   } _EL_  else { _EL_     try { _EL_       config=new DMLConfig(DEFAULT_SYSTEMML_CONFIG_FILEPATH,false); _EL_     } _EL_  catch (    FileNotFoundException fnfe) { _EL_       LOG.info("Using internal default configuration settings.  If you wish to " + "customize any settings, please supply a `SystemML-config.xml` file."); _EL_       config=new DMLConfig(); _EL_     } _EL_ catch (    ParseException e) { _EL_       throw e; _EL_     } _EL_   } _EL_   return config; _EL_ } _EL_ ', 'private String[] combineResultsFromMultipleReads(String[] buffer,String[] lastRead){ _EL_   String[] t=new String[buffer.length + lastRead.length]; _EL_   System.arraycopy(buffer,0,t,0,buffer.length); _EL_   System.arraycopy(lastRead,0,t,buffer.length,lastRead.length); _EL_   return t; _EL_ } _EL_ ', 'private static boolean isRetina(){ _EL_   if (SystemInfo.isAppleJvm) { _EL_     return hasAppleRetinaDevice(); _EL_   } _EL_   if (SystemInfo.isMac) { _EL_     GraphicsEnvironment e=GraphicsEnvironment.getLocalGraphicsEnvironment(); _EL_     GraphicsDevice[] devices=e.getScreenDevices(); _EL_     for (    GraphicsDevice device : devices) { _EL_       if (isOracleMacRetinaDevice(device)) { _EL_         return true; _EL_       } _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private void drawCombat(final Graphics2D g2d,final int x,final int y,final int width,final int height){ _EL_   Rectangle2D wrect=entity.getArea(); _EL_   final Rectangle srect=new Rectangle((int)(wrect.getX() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getY() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getWidth() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getHeight() * IGameScreen.SIZE_UNIT_PIXELS)); _EL_   int circleHeight=(int)((srect.height - 2) / SQRT2); _EL_   circleHeight=Math.max(circleHeight,srect.height - IGameScreen.SIZE_UNIT_PIXELS / 2); _EL_   if (entity.isAttacking(User.get())) { _EL_     g2d.setColor(RING_COLOR_ORANGE); _EL_     g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight); _EL_     g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight); _EL_     g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight); _EL_     drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_ORANGE,true,false); _EL_   } _EL_   if (entity.isBeingAttacked()) { _EL_     Color lineColor; _EL_     g2d.setColor(RING_COLOR_RED); _EL_     if (entity.isAttacking(User.get())) { _EL_       lineColor=RING_COLOR_RED; _EL_       drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_RED,false,true); _EL_     } _EL_  else { _EL_       lineColor=RING_COLOR_DARK_RED; _EL_       g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight); _EL_       g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight); _EL_       g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight); _EL_       drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_RED,true,false); _EL_       drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false); _EL_     } _EL_     EnumSet<Direction> directions=EnumSet.noneOf(Direction.class); _EL_     for (    Entity attacker : entity.getAttackers()) { _EL_       directions.add(Direction.getAreaDirectionTowardsArea(entity.getArea(),attacker.getArea())); _EL_     } _EL_     drawArrows(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,directions,lineColor); _EL_   } _EL_  else   if (entity.isAttacking(User.get())) { _EL_     drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false); _EL_   } _EL_   drawAttack(g2d,x,y,width,height); _EL_   if (entity.isDefending()) { _EL_     final int sx=srect.x + srect.width - ICON_OFFSET; _EL_     final int sy=y + height - 2 * ICON_OFFSET; _EL_ switch (entity.getResolution()) { _EL_ case BLOCKED: _EL_       blockedSprite.draw(g2d,sx,sy); _EL_     break; _EL_ case MISSED: _EL_   missedSprite.draw(g2d,sx,sy); _EL_ break; _EL_ case HIT: _EL_ hitSprite.draw(g2d,sx,sy); _EL_ break; _EL_ default : _EL_ } _EL_ } _EL_ } _EL_ ', 'public ActivityResolveInfo(ResolveInfo resolveInfo){ _EL_   this.resolveInfo=resolveInfo; _EL_ } _EL_ ', "private void endFormals(){ _EL_   if (hasFormals) { _EL_     hasFormals=false; _EL_     buf.append('>'); _EL_   } _EL_ } _EL_ ", 'public boolean nextIsSep(){ _EL_   if (Character.isLetterOrDigit(str.charAt(currentPosition)))   return false; _EL_  else   return true; _EL_ } _EL_ ', 'private String extractProjectNameFromUri(@NotNull String uri){ _EL_   int indexFinishProjectName=uri.lastIndexOf("."); _EL_   int indexStartProjectName=uri.lastIndexOf("/") != -1 ? uri.lastIndexOf("/") + 1 : (uri.lastIndexOf(":") + 1); _EL_   if (indexStartProjectName != 0 && indexStartProjectName < indexFinishProjectName) { _EL_     return uri.substring(indexStartProjectName,indexFinishProjectName); _EL_   } _EL_   if (indexStartProjectName != 0) { _EL_     return uri.substring(indexStartProjectName); _EL_   } _EL_   return ""; _EL_ } _EL_ ', 'private void resetNotes2(){ _EL_   if (errorInStatus2) { _EL_     if (editMode) { _EL_       statusText1.setText(editStatus2); _EL_     } _EL_  else { _EL_       statusText2.setText(stdStatus2); _EL_     } _EL_     errorInStatus2=false; _EL_   } _EL_ } _EL_ ', 'public RequirementsBuilder addRequireProperty(String name,RequirementsBuilder builder){ _EL_   addProperty(name,builder); _EL_   requiredProperties.add(name); _EL_   return this; _EL_ } _EL_ ', 'private Cell detectAndAddHit(float x,float y){ _EL_   final Cell cell=checkForNewHit(x,y); _EL_   if (cell != null) { _EL_     Cell fillInGapCell=null; _EL_     final ArrayList<Cell> pattern=mPattern; _EL_     if (!pattern.isEmpty()) { _EL_       final Cell lastCell=pattern.get(pattern.size() - 1); _EL_       int dRow=cell.row - lastCell.row; _EL_       int dColumn=cell.column - lastCell.column; _EL_       int fillInRow=lastCell.row; _EL_       int fillInColumn=lastCell.column; _EL_       if (Math.abs(dRow) == 2 && Math.abs(dColumn) != 1) { _EL_         fillInRow=lastCell.row + ((dRow > 0) ? 1 : -1); _EL_       } _EL_       if (Math.abs(dColumn) == 2 && Math.abs(dRow) != 1) { _EL_         fillInColumn=lastCell.column + ((dColumn > 0) ? 1 : -1); _EL_       } _EL_       fillInGapCell=Cell.of(fillInRow,fillInColumn); _EL_     } _EL_     if (fillInGapCell != null && !mPatternDrawLookup[fillInGapCell.row][fillInGapCell.column]) { _EL_       addCellToPattern(fillInGapCell); _EL_     } _EL_     addCellToPattern(cell); _EL_     if (mEnableHapticFeedback) { _EL_       performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING | HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING); _EL_     } _EL_     return cell; _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public HeadRule(String dir,String rule){ _EL_   String[] tmp=P_TAGSETS.split(rule); _EL_   int i, size=tmp.length; _EL_   b_r2l=dir.equals(DIR_RIGHT_TO_LEFT); _EL_   a_tagSets=new HeadTagSet[size]; _EL_   for (i=0; i < size; i++)   a_tagSets[i]=new HeadTagSet(tmp[i]); _EL_ } _EL_ ', '@Override public <T>Future<T> submit(Callable<T> task){ _EL_ synchronized (this) { _EL_     active.incrementAndGet(); _EL_     long timeout=0; _EL_     while (queue.remainingCapacity() == 0) { _EL_       try { _EL_         if (timeout <= giveupTime) { _EL_           Thread.sleep(DEFAULT_SLEEP); _EL_           timeout+=DEFAULT_SLEEP; _EL_         } _EL_  else { _EL_           throw new RuntimeException("Timed out because TPE is too busy..."); _EL_         } _EL_       } _EL_  catch (      InterruptedException e) { _EL_         throw new RuntimeException(e); _EL_       } _EL_     } _EL_     return super.submit(task); _EL_   } _EL_ } _EL_ ', 'public static void overwrite(long[] vector,long val,int offset,int len){ _EL_   int idx=offset >> 6; _EL_   int bitIdx=offset & 63; _EL_   int truncatedValLen=Math.min(len,64 - bitIdx); _EL_   vector[idx]&=~(maskBelow(truncatedValLen) << bitIdx); _EL_   vector[idx]|=val << bitIdx; _EL_   if (len != truncatedValLen) { _EL_     long mask=maskBelow(len - truncatedValLen); _EL_     vector[idx + 1]&=~mask; _EL_     vector[idx + 1]|=(val >>> truncatedValLen); _EL_   } _EL_ } _EL_ ', 'public void addScrollViewListener(WXScrollViewListener scrollViewListener){ _EL_   if (!mScrollViewListeners.contains(scrollViewListener)) { _EL_     mScrollViewListeners.add(scrollViewListener); _EL_   } _EL_ } _EL_ ', '@Override public Point translateJava2DToScreen(Point2D java2DPoint){ _EL_   Insets insets=getInsets(); _EL_   int x=(int)(java2DPoint.getX() * this.scaleX + insets.left); _EL_   int y=(int)(java2DPoint.getY() * this.scaleY + insets.top); _EL_   return new Point(x,y); _EL_ } _EL_ ', 'protected FastMap<String> readDeclaredProperties(WidgetCreatorContext context){ _EL_   FastMap<String> declaredProperties=new FastMap<String>(); _EL_   String backColor=context.readWidgetProperty("backColor"); _EL_   if (backColor != null && backColor.length() > 0) { _EL_     declaredProperties.put("backColor",backColor); _EL_   } _EL_   String fontName=context.readWidgetProperty("fontName"); _EL_   if (fontName != null && fontName.length() > 0) { _EL_     declaredProperties.put("fontName",fontName); _EL_   } _EL_   String fontSize=context.readWidgetProperty("fontSize"); _EL_   if (fontSize != null && fontSize.length() > 0) { _EL_     declaredProperties.put("fontSize",fontSize); _EL_   } _EL_   String foreColor=context.readWidgetProperty("foreColor"); _EL_   if (foreColor != null && foreColor.length() > 0) { _EL_     declaredProperties.put("foreColor",foreColor); _EL_   } _EL_   String justification=context.readWidgetProperty("justification"); _EL_   if (justification != null && justification.length() > 0) { _EL_     declaredProperties.put("justification",justification); _EL_   } _EL_   String bold=context.readWidgetProperty("bold"); _EL_   if (bold != null && bold.length() > 0) { _EL_     declaredProperties.put("bold",bold); _EL_   } _EL_   String italic=context.readWidgetProperty("italic"); _EL_   if (italic != null && italic.length() > 0) { _EL_     declaredProperties.put("italic",italic); _EL_   } _EL_   String subscript=context.readWidgetProperty("subscript"); _EL_   if (subscript != null && subscript.length() > 0) { _EL_     declaredProperties.put("subscript",subscript); _EL_   } _EL_   String superscript=context.readWidgetProperty("superscript"); _EL_   if (superscript != null && superscript.length() > 0) { _EL_     declaredProperties.put("superscript",superscript); _EL_   } _EL_   String underline=context.readWidgetProperty("underline"); _EL_   if (underline != null && underline.length() > 0) { _EL_     declaredProperties.put("underline",underline); _EL_   } _EL_   String strikethrough=context.readWidgetProperty("strikethrough"); _EL_   if (strikethrough != null && strikethrough.length() > 0) { _EL_     declaredProperties.put("strikethrough",strikethrough); _EL_   } _EL_   return declaredProperties; _EL_ } _EL_ ', 'private void updateTrafficProjections(){ _EL_   List<AirMapTraffic> updated=new ArrayList<>(); _EL_   for (  AirMapTraffic traffic : allTraffic) { _EL_     if (traffic.getGroundSpeedKt() > -1 && traffic.getTrueHeading() > -1) { _EL_       allTraffic.remove(traffic); _EL_       Coordinate projected=projectedCoordinate(traffic); _EL_       traffic.setCoordinate(projected); _EL_       traffic.setShowAlert(false); _EL_       allTraffic.add(traffic); _EL_       updated.add(traffic); _EL_     } _EL_   } _EL_   notifyUpdated(updated); _EL_ } _EL_ ', 'public static void logStackTrace(Level level,Throwable throwable){ _EL_   logStackTrace(level,throwable,null); _EL_ } _EL_ ', 'public static float computeContrastBetweenColors(int bg,int fg){ _EL_   float bgR=Color.red(bg) / 255f; _EL_   float bgG=Color.green(bg) / 255f; _EL_   float bgB=Color.blue(bg) / 255f; _EL_   bgR=(bgR < 0.03928f) ? bgR / 12.92f : (float)Math.pow((bgR + 0.055f) / 1.055f,2.4f); _EL_   bgG=(bgG < 0.03928f) ? bgG / 12.92f : (float)Math.pow((bgG + 0.055f) / 1.055f,2.4f); _EL_   bgB=(bgB < 0.03928f) ? bgB / 12.92f : (float)Math.pow((bgB + 0.055f) / 1.055f,2.4f); _EL_   float bgL=0.2126f * bgR + 0.7152f * bgG + 0.0722f * bgB; _EL_   float fgR=Color.red(fg) / 255f; _EL_   float fgG=Color.green(fg) / 255f; _EL_   float fgB=Color.blue(fg) / 255f; _EL_   fgR=(fgR < 0.03928f) ? fgR / 12.92f : (float)Math.pow((fgR + 0.055f) / 1.055f,2.4f); _EL_   fgG=(fgG < 0.03928f) ? fgG / 12.92f : (float)Math.pow((fgG + 0.055f) / 1.055f,2.4f); _EL_   fgB=(fgB < 0.03928f) ? fgB / 12.92f : (float)Math.pow((fgB + 0.055f) / 1.055f,2.4f); _EL_   float fgL=0.2126f * fgR + 0.7152f * fgG + 0.0722f * fgB; _EL_   return Math.abs((fgL + 0.05f) / (bgL + 0.05f)); _EL_ } _EL_ ', '@Override public int read() throws IOException { _EL_   int ch=super.read(); _EL_   if (ch != -1) { _EL_     branch.write(ch); _EL_   } _EL_   return ch; _EL_ } _EL_ ', 'private SublimeBaseMenuItem addInternal(int group,int id,CharSequence title,CharSequence hint,SublimeBaseMenuItem.ItemType itemType,boolean valueProvidedAsync,CharSequence badgeText,boolean showsIconSpace,boolean addedByUser){ _EL_   SublimeBaseMenuItem item; _EL_   boolean isGroupHeader=false; _EL_ switch (itemType) { _EL_ case SEPARATOR: _EL_     item=new SublimeSeparatorMenuItem(this,group,id); _EL_   break; _EL_ case BADGE: _EL_ item=new SublimeTextWithBadgeMenuItem(this,group,id,title,hint,valueProvidedAsync,badgeText,showsIconSpace); _EL_ break; _EL_ case SWITCH: _EL_ item=new SublimeSwitchMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace); _EL_ break; _EL_ case CHECKBOX: _EL_ item=new SublimeCheckboxMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace); _EL_ break; _EL_ case GROUP_HEADER: _EL_ isGroupHeader=true; _EL_ item=new SublimeGroupHeaderMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace); _EL_ break; _EL_ default : _EL_ item=new SublimeTextMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace); _EL_ break; _EL_ } _EL_ checkExistenceOfGroup(group); _EL_ if (isGroupHeader) { _EL_ checkIfGroupHeaderAlreadyExistsForGroup(group); _EL_ int index=findGroupIndex(group); _EL_ if (index >= 0) { _EL_ mItems.add(index,item); _EL_ } _EL_  else { _EL_ mItems.add(item); _EL_ } _EL_ } _EL_  else if (addedByUser) { _EL_ if (group != NO_GROUP_ID) { _EL_ int lastGroupIndex=findLastGroupIndex(group); _EL_ mItems.add(lastGroupIndex == mItems.size() ? lastGroupIndex : lastGroupIndex + 1,item); _EL_ } _EL_  else { _EL_ mItems.add(item); _EL_ } _EL_ } _EL_  else { _EL_ mItems.add(item); _EL_ } _EL_ onItemsChanged(); _EL_ return item; _EL_ } _EL_ ', 'public static String decodeBCD(final short bcd){ _EL_   return String.format("%x.%02x",(bcd & 0xFF00) >> 8,bcd & 0x00FF); _EL_ } _EL_ ', 'public void drawBackground(Graphics g){ _EL_   g.fillRect(0,0,getWidth(),getHeight()); _EL_ } _EL_ ', 'public void addLayoutEditor(LayoutEditor panel){ _EL_   if (panels.size() > 0) { _EL_     for (int i=0; i < panels.size(); i++) { _EL_       LayoutEditor ed=panels.get(i); _EL_       if (ed == panel) { _EL_         return; _EL_       } _EL_     } _EL_   } _EL_   panels.add(panel); _EL_ } _EL_ ', 'void triggerWildcardExpander(final Collection<File> allFiles,final WildcardContext wildcardContext) throws IOException { _EL_   LOG.debug("wildcard resources: {}",allFiles); _EL_   if (allFiles.isEmpty()) { _EL_     final String message=String.format("No resource found for wildcard: %s",wildcardContext.getWildcard()); _EL_     LOG.warn(message); _EL_     throw new IOException(message); _EL_   } _EL_   if (wildcardExpanderHandler != null) { _EL_     try { _EL_       wildcardExpanderHandler.apply(allFiles); _EL_     } _EL_  catch (    final IOException e) { _EL_       throw e; _EL_     } _EL_ catch (    final Exception e) { _EL_       LOG.debug("wildcard expanding error. Reporting original exception",e); _EL_       throw new IOException("Exception during expanding wildcard: " + e.getMessage()); _EL_     } _EL_   } _EL_ } _EL_ ', '@POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("/{id}/ip-interfaces") public IpInterfaceRestRep createIpInterface(@PathParam("id") URI id,IpInterfaceCreateParam createParam) throws DatabaseException { _EL_   Host host=queryObject(Host.class,id,true); _EL_   validateIpInterfaceData(createParam,null); _EL_   IpInterface ipInterface=new IpInterface(); _EL_   ipInterface.setHost(host.getId()); _EL_   ipInterface.setId(URIUtil.createId(IpInterface.class)); _EL_   populateIpInterface(createParam,ipInterface); _EL_   _dbClient.createObject(ipInterface); _EL_   auditOp(OperationTypeEnum.CREATE_HOST_IPINTERFACE,true,null,ipInterface.auditParameters()); _EL_   return map(ipInterface); _EL_ } _EL_ ', 'protected List<IEditProposal> collectEditProposals(){ _EL_   List<IEditProposal> proposals=new ArrayList<IEditProposal>(); _EL_   View selectedView=getSelectedView(); _EL_   if (selectedView != null) { _EL_     if (proposalProviders != null) { _EL_       for (      IEditProposalProvider provider : proposalProviders) { _EL_         for (        IEditProposal editProposal : provider.getProposals(selectedView)) { _EL_           if (editProposal.isApplicable())           proposals.add(editProposal); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return proposals; _EL_ } _EL_ ', 'private void ensureNamespaceExists(Result result){ _EL_   DockerImage image=DockerImage.fromImageName(result.name); _EL_   if (image.getNamespace() == null) { _EL_     result.name=String.format("%s/%s",DEFAULT_NAMESPACE,image.getRepository()); _EL_   } _EL_ } _EL_ ', 'public static String upperFirstChar(String string){ _EL_   if (string == null)   return null; _EL_   if (string.length() <= 1)   return string.toLowerCase(); _EL_   StringBuilder sb=new StringBuilder(string); _EL_   sb.setCharAt(0,Character.toUpperCase(sb.charAt(0))); _EL_   return sb.toString(); _EL_ } _EL_ ', 'protected int chooseRandomIndexBasedOnProportions(double[] proportionArray,Random random){ _EL_   double probSum; _EL_   double val; _EL_   int index; _EL_   double sum; _EL_   probSum=Utils.sum(proportionArray); _EL_   val=random.nextDouble() * probSum; _EL_   index=0; _EL_   sum=0.0; _EL_   while ((sum <= val) && (index < proportionArray.length)) { _EL_     sum+=proportionArray[index++]; _EL_   } _EL_   return index - 1; _EL_ } _EL_ ', 'private void checkWidth(final int[] rect){ _EL_   final int x1=rect[0]; _EL_   final int y2=rect[1]; _EL_   final int y1=y2 + rect[3]; _EL_   final int x2=x1 + rect[2]; _EL_   if (x1 < pageX1) { _EL_     pageX1=x1; _EL_   } _EL_   if (x2 > pageX2) { _EL_     pageX2=x2; _EL_   } _EL_   if (y1 > pageY1) { _EL_     pageY1=y1; _EL_   } _EL_   if (y2 < pageY2) { _EL_     pageY2=y2; _EL_   } _EL_ } _EL_ ', '@NotNull public static Map<RadComponent,List<RadComponent>> groupSiblings(@NotNull List<? extends RadComponent> components){ _EL_   Map<RadComponent,List<RadComponent>> siblingLists=new HashMap<RadComponent,List<RadComponent>>(); _EL_   if (components.isEmpty()) { _EL_     return siblingLists; _EL_   } _EL_   if (components.size() == 1) { _EL_     RadComponent component=components.get(0); _EL_     siblingLists.put(component.getParent(),Collections.singletonList(component)); _EL_     return siblingLists; _EL_   } _EL_   for (  RadComponent component : components) { _EL_     RadComponent parent=component.getParent(); _EL_     List<RadComponent> children=siblingLists.get(parent); _EL_     if (children == null) { _EL_       children=new ArrayList<RadComponent>(); _EL_       siblingLists.put(parent,children); _EL_     } _EL_     children.add(component); _EL_   } _EL_   return siblingLists; _EL_ } _EL_ ', 'private int countNonNewline(String str,int off,int len){ _EL_   for (int cnt=0; cnt < len; cnt++) { _EL_     final int pos=off + cnt; _EL_     if (str.charAt(pos) == UNIX_NEWLINE) { _EL_       return cnt; _EL_     } _EL_     if (str.charAt(pos) == CARRIAGE_RETURN) { _EL_       return cnt; _EL_     } _EL_   } _EL_   return len; _EL_ } _EL_ ', '@Override public boolean equals(Object otherRules){ _EL_   if (this == otherRules) { _EL_     return true; _EL_   } _EL_   if (otherRules instanceof ZoneRules) { _EL_     ZoneRules other=(ZoneRules)otherRules; _EL_     return Arrays.equals(standardTransitions,other.standardTransitions) && Arrays.equals(standardOffsets,other.standardOffsets) && Arrays.equals(savingsInstantTransitions,other.savingsInstantTransitions)&& Arrays.equals(wallOffsets,other.wallOffsets)&& Arrays.equals(lastRules,other.lastRules); _EL_   } _EL_   return false; _EL_ } _EL_ ', '@SuppressWarnings("nullness") @GwtIncompatible("java.io.ObjectOutputStream") public static <K extends Object,V extends Object>void writeMap(Map<K,V> map,ObjectOutputStream stream) throws IOException { _EL_   stream.writeInt(map.size()); _EL_   for (  Map.Entry<K,V> entry : map.entrySet()) { _EL_     stream.writeObject(entry.getKey()); _EL_     stream.writeObject(entry.getValue()); _EL_   } _EL_ } _EL_ ', 'protected void sleep(int sleepMillis,int sleepNanos) throws InterruptedException { _EL_   Thread.sleep(sleepMillis,sleepNanos); _EL_ } _EL_ ', 'public static void restorePreviousOutAndErrStream(){ _EL_   if (!alreadyMuted) { _EL_     return; _EL_   } _EL_   System.setOut(latestOut); _EL_   System.setErr(latestErr); _EL_   alreadyMuted=false; _EL_ } _EL_ ', 'private int measureHeight(int measureSpec){ _EL_   int result=0; _EL_   int specMode=MeasureSpec.getMode(measureSpec); _EL_   int specSize=MeasureSpec.getSize(measureSpec); _EL_   mAscent=(int)mTextPaint.ascent(); _EL_   if (specMode == MeasureSpec.EXACTLY) { _EL_     result=specSize; _EL_   } _EL_  else { _EL_     result=(int)(-mAscent + mTextPaint.descent()) + getPaddingTop() + getPaddingBottom(); _EL_     if (specMode == MeasureSpec.AT_MOST) { _EL_       result=Math.min(result,specSize); _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public ByteVector putByteArray(final byte[] b,final int off,final int len){ _EL_   if (length + len > data.length) { _EL_     enlarge(len); _EL_   } _EL_   if (b != null) { _EL_     System.arraycopy(b,off,data,length,len); _EL_   } _EL_   length+=len; _EL_   return this; _EL_ } _EL_ ', 'protected <T extends TaskServiceDocument<E>,E extends Enum<E>>T waitForTaskCompletion(String documentSelfLink,Class<T> type) throws Throwable { _EL_   return waitForPropertyValue(documentSelfLink,type,TaskServiceDocument.FIELD_NAME_TASK_STAGE,Arrays.asList(TaskStage.FINISHED,TaskStage.FAILED,TaskStage.CANCELLED),true,waitForStageChangeCountLonger()); _EL_ } _EL_ ', 'public Action(String content,int priority){ _EL_   this.content=content.trim(); _EL_   this.priority=priority; _EL_ } _EL_ ', 'private List<EndIsland> findSurroundingIslands(int chunkX,int chunkY,int chunksPerFragmentX,int chunksPerFragmentY){ _EL_   List<EndIsland> result=new LinkedList<EndIsland>(); _EL_   for (int y=-SURROUNDING_CHUNKS; y <= chunksPerFragmentY + SURROUNDING_CHUNKS; y++) { _EL_     for (int x=-SURROUNDING_CHUNKS; x <= chunksPerFragmentX + SURROUNDING_CHUNKS; x++) { _EL_       EndIsland island=tryCreateEndIsland(chunkX + x,chunkY + y); _EL_       if (island != null) { _EL_         result.add(island); _EL_       } _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'void insertFunction2(ByteBuffer bb){ _EL_   int baseSec=(int)(windowId >> 32); _EL_   bb.putInt(baseSec); _EL_   Integer operId=operatorId; _EL_   for (int i=0; i < 3; i++) { _EL_     byte num=(byte)(operId >> 8 * (2 - i)); _EL_     bb.put(num); _EL_   } _EL_   bb.putShort((short)(windowId & 0xffff)); _EL_   for (int i=0; i < 3; i++) { _EL_     byte num=(byte)(tupleId >> 8 * (2 - i)); _EL_     bb.put(num); _EL_   } _EL_ } _EL_ ', 'private static boolean calculateGap(Rectangle a,Rectangle b,Rectangle gap){ _EL_   if (a.intersects(b)) { _EL_     gap.width=0; _EL_     return false; _EL_   } _EL_   int ax1=a.x; _EL_   int ax2=a.x + a.width; _EL_   int ay1=a.y; _EL_   int ay2=a.y + a.height; _EL_   int bx1=b.x; _EL_   int bx2=b.x + b.width; _EL_   int by1=b.y; _EL_   int by2=b.y + b.height; _EL_   int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1); _EL_   int yOverlap=Math.min(ay2,by2) - Math.max(ay1,by1); _EL_   if (xOverlap <= 0 && yOverlap <= 0) { _EL_     gap.width=0; _EL_     return false; _EL_   } _EL_   if (xOverlap > 0) { _EL_     gap.x=Math.max(ax1,bx1); _EL_     gap.y=(ay1 > by1) ? by2 : ay2; _EL_     gap.width=xOverlap; _EL_     gap.height=-yOverlap; _EL_   } _EL_   if (yOverlap > 0) { _EL_     gap.x=(ax1 > bx1) ? bx2 : ax2; _EL_     gap.y=Math.max(ay1,by1); _EL_     gap.width=-xOverlap; _EL_     gap.height=yOverlap; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public boolean nextTile() throws ModelControlException { _EL_   boolean movedToRow=super.nextTile(); _EL_   if (movedToRow) { _EL_     curTile=getTileIndex(); _EL_     setDisplayFieldValue(TXT_PARENT_INDEX,parentIdx); _EL_     setDisplayFieldValue(TXT_CHOICE,choices[curTile]); _EL_     setDisplayFieldValue(TXT_INDEX,Integer.toString(curTile)); _EL_   } _EL_   return movedToRow; _EL_ } _EL_ ', 'public static boolean isIntentAvailable(Context context,String action){ _EL_   final PackageManager packageManager=context.getPackageManager(); _EL_   final Intent intent=new Intent(action); _EL_   Log.d(MP_TAG,"Looking for intent " + action); _EL_   List<ResolveInfo> list=packageManager.queryIntentServices(intent,PackageManager.MATCH_DEFAULT_ONLY); _EL_   return list.size() > 0; _EL_ } _EL_ ', 'private void sendCONNECTRequest() throws IOException { _EL_   int port=url.getPort(); _EL_   requests.set(0,HTTP_CONNECT + " " + connectRequestURI(url)+ " "+ httpVersion,null); _EL_   requests.setIfNotSet("User-Agent",userAgent); _EL_   String host=url.getHost(); _EL_   if (port != -1 && port != url.getDefaultPort()) { _EL_     host+=":" + String.valueOf(port); _EL_   } _EL_   requests.setIfNotSet("Host",host); _EL_   requests.setIfNotSet("Accept",acceptString); _EL_   if (http.getHttpKeepAliveSet()) { _EL_     requests.setIfNotSet("Proxy-Connection","keep-alive"); _EL_   } _EL_   setPreemptiveProxyAuthentication(requests); _EL_   if (logger.isLoggable(PlatformLogger.Level.FINE)) { _EL_     logger.fine(requests.toString()); _EL_   } _EL_   http.writeRequests(requests,null); _EL_ } _EL_ ', 'private boolean isSelfSigned(X509Certificate cert){ _EL_   return signedBy(cert,cert); _EL_ } _EL_ ', '@RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("userroles") @Valid UserRoles userRoles,BindingResult bindingResult,Principal principal){ _EL_   RestWrapper restWrapper=null; _EL_   if (bindingResult.hasErrors()) { _EL_     BindingResultError bindingResultError=new BindingResultError(); _EL_     return bindingResultError.errorMessage(bindingResult); _EL_   } _EL_   try { _EL_     com.wipro.ats.bdre.md.dao.jpa.UserRoles jpaUserRoles=new com.wipro.ats.bdre.md.dao.jpa.UserRoles(); _EL_     jpaUserRoles.setUserRoleId(userRoles.getUserRoleId()); _EL_     jpaUserRoles.setRole(userRoles.getRole()); _EL_     Users users=new Users(); _EL_     users.setUsername(userRoles.getUsername()); _EL_     jpaUserRoles.setUsers(users); _EL_     Integer userRolesId=userRolesDAO.insert(jpaUserRoles); _EL_     userRoles.setUserRoleId(userRolesId); _EL_     restWrapper=new RestWrapper(userRoles,RestWrapper.OK); _EL_     LOGGER.info("Record with ID:" + userRoles.getUserRoleId() + " inserted in UserRoles by User:"+ principal.getName()+ userRoles); _EL_   } _EL_  catch (  Exception e) { _EL_     LOGGER.error(e); _EL_     restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR); _EL_   } _EL_   return restWrapper; _EL_ } _EL_ ', 'public DERUTCTime(Date time){ _EL_   SimpleDateFormat dateF=new SimpleDateFormat("yyMMddHHmmss\'Z\'"); _EL_   dateF.setTimeZone(new SimpleTimeZone(0,"Z")); _EL_   this.time=Strings.toByteArray(dateF.format(time)); _EL_ } _EL_ ', 'public void add(String category,String[] titles,double[] values){ _EL_   mCategories.add(category); _EL_   mTitles.add(titles); _EL_   mValues.add(values); _EL_ } _EL_ ', '@NotNull public static String sha1(@NotNull File keyStoreFile) throws Exception { _EL_   return sha1(keyStoreFile,null,null); _EL_ } _EL_ ', '@Override public void panDomainAxes(double panRange,PlotRenderingInfo info,Point2D source){ _EL_   XYPlot subplot=findSubplot(info,source); _EL_   if (subplot == null) { _EL_     return; _EL_   } _EL_   if (!subplot.isDomainPannable()) { _EL_     return; _EL_   } _EL_   PlotRenderingInfo subplotInfo=info.getSubplotInfo(info.getSubplotIndex(source)); _EL_   if (subplotInfo == null) { _EL_     return; _EL_   } _EL_   for (int i=0; i < subplot.getDomainAxisCount(); i++) { _EL_     ValueAxis domainAxis=subplot.getDomainAxis(i); _EL_     if (domainAxis != null) { _EL_       domainAxis.pan(panRange); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void init(){ _EL_   startController=new PourStartController(); _EL_   startController.setCheckView(this); _EL_   waveController=new WaveController(); _EL_   waveController.setCheckView(this); _EL_   PourFinishController finishController=new PourFinishController(); _EL_   finishController.setCheckView(this); _EL_   TickController tickController=new TickController(); _EL_   tickController.setCheckView(this); _EL_   List<BaseController> finishControllers=new ArrayList<>(); _EL_   finishControllers.add(finishController); _EL_   finishControllers.add(tickController); _EL_   this.finishControllers=finishControllers; _EL_ } _EL_ ', 'private JLabel createIconLabel(JCheckBox checkBox){ _EL_   checkBox.setOpaque(false); _EL_   checkBox.setSize(checkBox.getMinimumSize()); _EL_   Image image=new BufferedImage(checkBox.getWidth(),checkBox.getHeight(),Transparency.TRANSLUCENT); _EL_   Graphics g=image.getGraphics(); _EL_   checkBox.paint(g); _EL_   g.dispose(); _EL_   return new JLabel(new ImageIcon(image)); _EL_ } _EL_ ', 'public void closeWindow(){ _EL_   WindowEvent ev=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING); _EL_   frame.dispatchEvent(ev); _EL_ } _EL_ ', 'private void populateHostData(Host host,HostParam param){ _EL_   if (param.getName() != null) { _EL_     host.setLabel(param.getName()); _EL_   } _EL_   if (param.getHostName() != null) { _EL_     host.setHostName(param.getHostName()); _EL_   } _EL_   if (param.getCluster() != null) { _EL_     host.setCluster(param.getCluster()); _EL_   } _EL_   if (param.getOsVersion() != null) { _EL_     host.setOsVersion(param.getOsVersion()); _EL_   } _EL_   if (param.getUserName() != null) { _EL_     host.setUsername(param.getUserName()); _EL_   } _EL_   if (param.getPassword() != null) { _EL_     host.setPassword(param.getPassword()); _EL_   } _EL_   if (param.getPortNumber() != null) { _EL_     host.setPortNumber(param.getPortNumber()); _EL_   } _EL_   if (param.getUseSsl() != null) { _EL_     host.setUseSSL(param.getUseSsl()); _EL_   } _EL_   if (param.getType() != null) { _EL_     host.setType(param.getType()); _EL_   } _EL_   if (param.getDiscoverable() != null) { _EL_     host.setDiscoverable(param.getDiscoverable()); _EL_   } _EL_   if (param.getVcenterDataCenter() != null) { _EL_     host.setVcenterDataCenter(NullColumnValueGetter.isNullURI(param.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : param.getVcenterDataCenter()); _EL_   } _EL_   Cluster cluster=null; _EL_   if (!NullColumnValueGetter.isNullURI(param.getCluster())) { _EL_     cluster=queryObject(Cluster.class,param.getCluster(),true); _EL_     if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) { _EL_       host.setVcenterDataCenter(cluster.getVcenterDataCenter()); _EL_     } _EL_     if (!NullColumnValueGetter.isNullURI(cluster.getProject())) { _EL_       host.setProject(cluster.getProject()); _EL_     } _EL_   } _EL_   if (param.getBootVolume() != null) { _EL_     host.setBootVolumeId(NullColumnValueGetter.isNullURI(param.getBootVolume()) ? NullColumnValueGetter.getNullURI() : param.getBootVolume()); _EL_   } _EL_ } _EL_ ', '@Nullable public AvdInfo createOrUpdateAvd(@Nullable AvdInfo currentInfo,@NotNull String avdName,@NotNull Device device,@NotNull SystemImageDescription systemImageDescription,@NotNull ScreenOrientation orientation,boolean isCircular,@Nullable String sdCard,@Nullable File skinFolder,@NotNull Map<String,String> hardwareProperties,boolean createSnapshot){ _EL_   if (!initIfNecessary()) { _EL_     return null; _EL_   } _EL_   File avdFolder; _EL_   try { _EL_     if (currentInfo != null) { _EL_       avdFolder=new File(currentInfo.getDataFolderPath()); _EL_     } _EL_  else { _EL_       avdFolder=AvdInfo.getDefaultAvdFolder(myAvdManager,avdName,myFileOp,true); _EL_     } _EL_   } _EL_  catch (  AndroidLocation.AndroidLocationException e) { _EL_     IJ_LOG.error("Could not create AVD " + avdName,e); _EL_     return null; _EL_   } _EL_   Dimension resolution=device.getScreenSize(orientation); _EL_   assert resolution != null; _EL_   String skinName=null; _EL_   if (skinFolder == null && isCircular) { _EL_     skinFolder=getRoundSkin(systemImageDescription); _EL_   } _EL_   if (FileUtil.filesEqual(skinFolder,AvdWizardUtils.NO_SKIN)) { _EL_     skinFolder=null; _EL_   } _EL_   if (skinFolder == null) { _EL_     skinName=String.format("%dx%d",Math.round(resolution.getWidth()),Math.round(resolution.getHeight())); _EL_   } _EL_   if (orientation == ScreenOrientation.LANDSCAPE) { _EL_     hardwareProperties.put(HardwareProperties.HW_INITIAL_ORIENTATION,ScreenOrientation.LANDSCAPE.getShortDisplayValue().toLowerCase(Locale.ROOT)); _EL_   } _EL_   if (currentInfo != null && !avdName.equals(currentInfo.getName())) { _EL_     boolean success=myAvdManager.moveAvd(currentInfo,avdName,currentInfo.getDataFolderPath(),SDK_LOG); _EL_     if (!success) { _EL_       return null; _EL_     } _EL_   } _EL_   return myAvdManager.createAvd(avdFolder,avdName,systemImageDescription.getSystemImage(),skinFolder,skinName,sdCard,hardwareProperties,device.getBootProps(),createSnapshot,false,currentInfo != null,SDK_LOG); _EL_ } _EL_ ', 'public void engineDeleteEntry(String alias) throws KeyStoreException { _EL_ synchronized (entries) { _EL_     entries.remove(alias.toLowerCase(Locale.ENGLISH)); _EL_   } _EL_ } _EL_ ', 'public DisjointSets(int numElements){ _EL_   array=new int[numElements]; _EL_   Arrays.fill(array,-1); _EL_ } _EL_ ', 'public final void printClusters(PrintWriter out,List<ClusterData> clusterData,int[] matIndexToMsgInternalId) throws AdeException { _EL_   if (m_finalClusters == null) { _EL_     updateClusters(clusterData,matIndexToMsgInternalId); _EL_   } _EL_   for (  Map.Entry<String,Collection<Integer>> entry : m_finalClusters.entrySet()) { _EL_     final String n=entry.getKey(); _EL_     final Collection<Integer> c=entry.getValue(); _EL_     out.printf("%s\\t",n); _EL_     for (    int m : c) { _EL_       out.printf("%d\\t",matIndexToMsgInternalId[m]); _EL_     } _EL_     out.println(); _EL_   } _EL_ } _EL_ ', 'protected void addToGUI(JPanel gui,JTextField b,String cmd){ _EL_   b.setActionCommand(cmd); _EL_   b.addActionListener(this); _EL_   gui.add(b); _EL_ } _EL_ ', 'public synchronized void remove(int index){ _EL_   mCategories.remove(index); _EL_   mValues.remove(index); _EL_ } _EL_ ', 'public final boolean check_trace(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){ _EL_   AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree(); _EL_   int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer); _EL_   ArrayList<ShapeTile> trace_shapes=p_polyline.offset_shapes(compensated_half_width,0,p_polyline.corner_count()); _EL_   for (int index=0; index < trace_shapes.size(); ++index) { _EL_     ShapeTile curr_trace_shape=trace_shapes.get(index); _EL_     BrdFromSide from_side=new BrdFromSide(p_polyline,index + 1,curr_trace_shape); _EL_     boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null); _EL_     if (!check_shove_ok)     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static void delete(File fileOrFolder) throws IOException { _EL_   if (fileOrFolder != null)   delete(fileOrFolder.toPath()); _EL_ } _EL_ ', 'public static double[] expandArrayD(int bufferSize,double[] currentArray){ _EL_   if (currentArray == null) { _EL_     return new double[bufferSize * 3]; _EL_   } _EL_   int length=currentArray.length; _EL_   double[] ret=new double[length + bufferSize * 3]; _EL_   System.arraycopy(currentArray,0,ret,0,length); _EL_   return ret; _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory){ _EL_   if (configurableListableBeanFactory.containsBean(sessionFactoryBeanName)) { _EL_     BeanDefinition sessionFactoryBeanDefinition=configurableListableBeanFactory.getBeanDefinition(sessionFactoryBeanName); _EL_     MutablePropertyValues propertyValues=sessionFactoryBeanDefinition.getPropertyValues(); _EL_     if (mappingResources != null) { _EL_       PropertyValue propertyValue=propertyValues.getPropertyValue("mappingResources"); _EL_       if (propertyValue == null) { _EL_         propertyValue=new PropertyValue("mappingResources",new ArrayList()); _EL_         propertyValues.addPropertyValue(propertyValue); _EL_       } _EL_       List existingMappingResources=(List)propertyValue.getValue(); _EL_       existingMappingResources.addAll(mappingResources); _EL_     } _EL_     if (annotatedClasses != null) { _EL_       PropertyValue propertyValue=propertyValues.getPropertyValue("annotatedClasses"); _EL_       if (propertyValue == null) { _EL_         propertyValue=new PropertyValue("annotatedClasses",new ArrayList()); _EL_         propertyValues.addPropertyValue(propertyValue); _EL_       } _EL_       List existingMappingResources=(List)propertyValue.getValue(); _EL_       existingMappingResources.addAll(annotatedClasses); _EL_     } _EL_     if (configLocations != null) { _EL_       PropertyValue propertyValue=propertyValues.getPropertyValue("configLocations"); _EL_       if (propertyValue == null) { _EL_         propertyValue=new PropertyValue("configLocations",new ArrayList()); _EL_         propertyValues.addPropertyValue(propertyValue); _EL_       } _EL_       List existingConfigLocations=(List)propertyValue.getValue(); _EL_       existingConfigLocations.addAll(configLocations); _EL_     } _EL_     if (hibernateProperties != null) { _EL_       PropertyValue propertyValue=propertyValues.getPropertyValue("hibernateProperties"); _EL_       if (propertyValue == null) { _EL_         propertyValue=new PropertyValue("hibernateProperties",new Properties()); _EL_         propertyValues.addPropertyValue(propertyValue); _EL_       } _EL_       Properties existingHibernateProperties=(Properties)propertyValue.getValue(); _EL_       existingHibernateProperties.putAll(hibernateProperties); _EL_     } _EL_   } _EL_  else { _EL_     throw new NoSuchBeanDefinitionException("No bean named [" + sessionFactoryBeanName + "] exists within the bean factory. "+ "Cannot post process session factory to add Hibernate resource definitions."); _EL_   } _EL_ } _EL_ ', 'public long skipBytes(long n) throws IOException { _EL_   long count=0; _EL_   long gotsofar=0; _EL_   if (inputStream == null) { _EL_     reopen(); _EL_     if (inputStream == null) { _EL_       reopen(); _EL_       throw new IOException("Stream closed, can\'t be reopened"); _EL_     } _EL_   } _EL_   while (count < n) { _EL_     gotsofar=inputStream.skip(n - count); _EL_     if (gotsofar == 0) { _EL_       Debug.error("StreamInputReader can\'t skip " + n + " bytes as instructed"); _EL_       break; _EL_     } _EL_     count+=gotsofar; _EL_   } _EL_   count((int)count); _EL_   return count; _EL_ } _EL_ ', 'private void createLock() throws IOException { _EL_ synchronized (LockableFileWriter.class) { _EL_     if (!lockFile.createNewFile()) { _EL_       throw new IOException("Can\'t write file, lock " + lockFile.getAbsolutePath() + " exists"); _EL_     } _EL_     lockFile.deleteOnExit(); _EL_   } _EL_ } _EL_ ', 'private V doGet(Object key){ _EL_   if (key == null)   throw new NullPointerException(); _EL_   Comparator<? super K> cmp=comparator; _EL_   outer:   for (; ; ) { _EL_     for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) { _EL_       Object v; _EL_       int c; _EL_       if (n == null)       break outer; _EL_       Node<K,V> f=n.next; _EL_       if (n != b.next)       break; _EL_       if ((v=n.value) == null) { _EL_         n.helpDelete(b,f); _EL_         break; _EL_       } _EL_       if (b.value == null || v == n)       break; _EL_       if ((c=cpr(cmp,key,n.key)) == 0) { _EL_         @SuppressWarnings("unchecked") V vv=(V)v; _EL_         return vv; _EL_       } _EL_       if (c < 0)       break outer; _EL_       b=n; _EL_       n=f; _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'void handleSwfLoadedEvent(SwfLoadedEvent e){ _EL_   dumpSwfLoadedLine(e); _EL_ } _EL_ ', 'private void quickReply(){ _EL_   quickReplySmsMessage=smsPopupPager.getActiveMessage(); _EL_   quickReply(quickReplySmsMessage.getReplyText()); _EL_ } _EL_ ', 'public boolean hasChanged(){ _EL_   return System.identityHashCode(config) != initialHash; _EL_ } _EL_ ', 'void fixCompatibility(View root){ _EL_   Queue<View> queue=new LinkedList<View>(); _EL_   queue.add(root); _EL_   View view=null; _EL_   while ((view=queue.poll()) != null) { _EL_     if (view instanceof ViewGroup) { _EL_       ViewGroup group=(ViewGroup)view; _EL_       for (int i=0; i < group.getChildCount(); i++) { _EL_         queue.add(group.getChildAt(i)); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public void substituteHeader(int state,String header) throws AuthLoginException { _EL_   if (debug.messageEnabled()) { _EL_     debug.message("substituteHeader : state=" + state + ", header="+ header); _EL_   } _EL_   if (state > stateLength) { _EL_     throw new AuthLoginException(bundleName,"invalidState",new Object[]{new Integer(state)}); _EL_   } _EL_   Callback[] ext=getCallback(state); _EL_   if (ext.length <= 0) { _EL_     throw new AuthLoginException(bundleName,"invalidCallbackIndex",null); _EL_   } _EL_   if ((header != null) && (header.length() != 0)) { _EL_     PagePropertiesCallback pc=(PagePropertiesCallback)((Callback[])internal.get(state - 1))[0]; _EL_     pc.setHeader(header); _EL_   } _EL_ } _EL_ ', 'public static Service createService(PatternTimetable timetable){ _EL_   Calendar calendar=new Calendar(); _EL_   calendar.monday=timetable.monday ? 1 : 0; _EL_   calendar.tuesday=timetable.tuesday ? 1 : 0; _EL_   calendar.wednesday=timetable.wednesday ? 1 : 0; _EL_   calendar.thursday=timetable.thursday ? 1 : 0; _EL_   calendar.friday=timetable.friday ? 1 : 0; _EL_   calendar.saturday=timetable.saturday ? 1 : 0; _EL_   calendar.sunday=timetable.sunday ? 1 : 0; _EL_   StringBuilder nameBuilder=new StringBuilder("MOD-"); _EL_   nameBuilder.append(timetable.monday ? \'M\' : \'x\'); _EL_   nameBuilder.append(timetable.monday ? \'T\' : \'x\'); _EL_   nameBuilder.append(timetable.monday ? \'W\' : \'x\'); _EL_   nameBuilder.append(timetable.monday ? \'T\' : \'x\'); _EL_   nameBuilder.append(timetable.monday ? \'F\' : \'x\'); _EL_   nameBuilder.append(timetable.monday ? \'S\' : \'x\'); _EL_   nameBuilder.append(timetable.monday ? \'S\' : \'x\'); _EL_   Service service=new Service(nameBuilder.toString()); _EL_   calendar.start_date=18500101; _EL_   calendar.end_date=22000101; _EL_   service.calendar=calendar; _EL_   return service; _EL_ } _EL_ ', 'public boolean remove(ImageInfo object){ _EL_   final int location=getLocation(object); _EL_   final boolean removed=data.remove(object); _EL_   notifyItemRemoved(location); _EL_   return removed; _EL_ } _EL_ ', 'VPlexDistributedDeviceInfo findDistributedDevice(String deviceName) throws VPlexApiException { _EL_   return findDistributedDevice(deviceName,false); _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public static <T extends Packet>void registerOutListener(final Class<T> type,Player player,Predicate<T> listener){ _EL_   NetworkManagerWrapper wrapper=wrapNetworkManager(player); _EL_   wrapper.registerOutgoingListener(type,listener); _EL_ } _EL_ ', 'public void notifyTasks(){ _EL_   if (tracker.shouldInterruptTask()) { _EL_     for (    Thread t : threadMap.values()) { _EL_       t.interrupt(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public RequestParams(Object... keysAndValues){ _EL_   int len=keysAndValues.length; _EL_   if (len % 2 != 0)   throw new IllegalArgumentException("Supplied arguments must be even"); _EL_   for (int i=0; i < len; i+=2) { _EL_     String key=String.valueOf(keysAndValues[i]); _EL_     String val=String.valueOf(keysAndValues[i + 1]); _EL_     put(key,val); _EL_   } _EL_ } _EL_ ', 'public boolean confirmOverwrite(final File file){ _EL_   String message="The file \\"" + file.getName() + "\\" already exists. Overwrite?"; _EL_   Object[] options={"OK","Cancel"}; _EL_   return JOptionPane.YES_OPTION == JOptionPane.showOptionDialog(null,message,"Warning",JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]); _EL_ } _EL_ ', 'public TvShowUpdateDatasourceTask(String datasource){ _EL_   super(BUNDLE.getString("update.datasource") + " (" + datasource+ ")"); _EL_   tvShowList=TvShowList.getInstance(); _EL_   dataSources=new ArrayList<>(1); _EL_   dataSources.add(datasource); _EL_ } _EL_ ', 'public void clear(){ _EL_   Set<Sensor> oldSelection=new HashSet<Sensor>(selection); _EL_   selection.clear(); _EL_   if (!oldSelection.isEmpty()) { _EL_     fireSelectionChanged(oldSelection,selection); _EL_   } _EL_ } _EL_ ', 'public Object newNonMovableArray(Class<?> componentType,int length){ _EL_   return Array.newInstance(componentType,length); _EL_ } _EL_ ', 'private void loadFileRecursively(String path,Map<String,ThriftFileElement> loadedFiles) throws IOException { _EL_   ThriftFileElement element=null; _EL_   File dir=null; _EL_   File file=findFirstExisting(path,null); _EL_   if (file != null) { _EL_     file=file.getCanonicalFile(); _EL_     if (loadedFiles.containsKey(file.getAbsolutePath())) { _EL_       return; _EL_     } _EL_     dir=file.getParentFile(); _EL_     element=loadSingleFile(file.getParentFile(),file.getName()); _EL_   } _EL_   if (element == null) { _EL_     throw new FileNotFoundException("Failed to locate " + path + " in "+ includePaths); _EL_   } _EL_   loadedFiles.put(file.getAbsolutePath(),element); _EL_   ImmutableList<IncludeElement> includes=element.includes(); _EL_   if (includes.size() > 0) { _EL_     includePaths.addFirst(dir); _EL_     for (    IncludeElement include : includes) { _EL_       if (!include.isCpp()) { _EL_         loadFileRecursively(include.path(),loadedFiles); _EL_       } _EL_     } _EL_     includePaths.removeFirst(); _EL_   } _EL_ } _EL_ ', 'public void assureProxyOk(){ _EL_   if (socket.isClosed()) { _EL_     restart(); _EL_   } _EL_ } _EL_ ', '@Override public boolean add(IMessage message){ _EL_   return add(message,false); _EL_ } _EL_ ', 'public static int[] concatAllInt(int[]... arrays){ _EL_   int totalLength=0; _EL_   final int subArrayCount=arrays.length; _EL_   for (int i=0; i < subArrayCount; ++i) { _EL_     totalLength+=arrays[i].length; _EL_   } _EL_   int[] result=Arrays.copyOf(arrays[0],totalLength); _EL_   int offset=arrays[0].length; _EL_   for (int i=1; i < subArrayCount; ++i) { _EL_     System.arraycopy(arrays[i],0,result,offset,arrays[i].length); _EL_     offset+=arrays[i].length; _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public void beginDisplay(DisplayEvent event) throws ModelControlException { _EL_   IdentitySubjectModel subjectModel=getSubjectModel(); _EL_   PolicyModel model=(PolicyModel)getModel(); _EL_   super.beginDisplay(event); _EL_   if (!canModify) { _EL_     Map mapValues=getDefaultValues(); _EL_     if ((mapValues != null) && !mapValues.isEmpty()) { _EL_       Set values=(Set)mapValues.get(AMIdentityMembershipCondition.AM_IDENTITY_NAME); _EL_       Set identityNames=helper.getAMIdentityNames(model.getUserSSOToken(),values); _EL_       propertySheetModel.setValue(VALUES_MULTIPLE_CHOICE_VALUE,AMAdminUtils.getString(identityNames,",",false)); _EL_     } _EL_   } _EL_  else { _EL_     CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE); _EL_     Map supportedEntityTypes=model.getSupportedEntityTypes(realmName); _EL_     OptionList entityTypes=createOptionList(supportedEntityTypes); _EL_     entityTypes.add(0,"policy.subject.select.identity.type",""); _EL_     menu.setOptions(entityTypes); _EL_     menu.setValue(""); _EL_     CCAddRemove child=(CCAddRemove)getChild(VALUES_MULTIPLE_CHOICE_VALUE); _EL_     child.restoreStateData(); _EL_     if (!submitCycle) { _EL_       helper.setSelectedIdentities(child,model.getUserSSOToken(),model.getUserLocale(),this,getDefaultValues()); _EL_     } _EL_  else { _EL_       OptionList possible=helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,getPossibleValues(subjectModel,realmName)); _EL_       OptionList selected=addRemoveModel.getSelectedOptionList(); _EL_       List selectedIds=AMAdminUtils.toList(selected); _EL_       child.resetStateData(); _EL_       addRemoveModel.setAvailableOptionList(possible); _EL_       addRemoveModel.setSelectedOptionList(helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,selectedIds)); _EL_     } _EL_   } _EL_ } _EL_ ', 'public List<Interface> showInterface() throws NetworkDeviceControllerException { _EL_   List<Interface> interfaces=new ArrayList<Interface>(); _EL_   SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN}; _EL_   StringBuilder buf=new StringBuilder(); _EL_   SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString("MDSDialog.showInterface.cmd"),60000,prompts,buf); _EL_   String[] lines=getLines(buf); _EL_   String[] regex={MDSDialogProperties.getString("MDSDialog.showInterface.interfacename.match"),MDSDialogProperties.getString("MDSDialog.showInterface.Portdescription.match"),MDSDialogProperties.getString("MDSDialog.showInterface.PortWWN.match"),MDSDialogProperties.getString("MDSDialog.showInterface.PortmodeFCID.match"),MDSDialogProperties.getString("MDSDialog.showInterface.Portvsan.match"),MDSDialogProperties.getString("MDSDialog.showInterface.Portmode.match")}; _EL_   String[] groups=new String[10]; _EL_   Interface intf=null; _EL_   for (  String line : lines) { _EL_     int index=match(line,regex,groups); _EL_ switch (index) { _EL_ case 0: _EL_       intf=new Interface(groups[0]); _EL_     intf.setStatus(groups[1]); _EL_   interfaces.add(intf); _EL_ break; _EL_ case 1: _EL_ intf.setDescription(groups[0]); _EL_ break; _EL_ case 2: _EL_ intf.setWwpn(groups[0]); _EL_ break; _EL_ case 3: _EL_ intf.setMode(groups[0]); _EL_ intf.setFcid(groups[1]); _EL_ break; _EL_ case 4: _EL_ intf.setVsan(groups[0]); _EL_ break; _EL_ case 5: _EL_ intf.setMode(groups[0]); _EL_ break; _EL_ } _EL_ } _EL_ return interfaces; _EL_ } _EL_ ', 'protected void clearDataLists(int obdService){ _EL_ switch (obdService) { _EL_ case OBD_SVC_DATA: _EL_ case OBD_SVC_FREEZEFRAME: _EL_     pidSupported.clear(); _EL_   PidPvs.clear(); _EL_ break; _EL_ case OBD_SVC_READ_CODES: _EL_ case OBD_SVC_PENDINGCODES: _EL_ case OBD_SVC_PERMACODES: _EL_ tCodes.clear(); _EL_ break; _EL_ case OBD_SVC_VEH_INFO: _EL_ pidSupported.clear(); _EL_ VidPvs.clear(); _EL_ break; _EL_ } _EL_ } _EL_ ', 'public QuadEdge makeEdge(Vertex o,Vertex d){ _EL_   QuadEdge q=QuadEdge.makeEdge(o,d); _EL_   quadEdges.add(q); _EL_   return q; _EL_ } _EL_ ', 'public static void sortSeqs(List<String> seqs){ _EL_   Collections.sort(seqs,null); _EL_ } _EL_ ', 'default B with(String key,long value){ _EL_   return with(key,Long.toString(value)); _EL_ } _EL_ ', 'private Shape decodeEdge(int width,int height){ _EL_   path.reset(); _EL_   path.moveTo(width - 2,0); _EL_   path.lineTo(width - 2,height - 4); _EL_   path.lineTo(width - 4,height - 2); _EL_   path.lineTo(3,height - 2); _EL_   return path; _EL_ } _EL_ ', 'public void dispose() throws IabAsyncInProgressException { _EL_ synchronized (mAsyncInProgressLock) { _EL_     if (mAsyncInProgress) { _EL_       throw new IabAsyncInProgressException("Can\'t dispose because an async operation " + "(" + mAsyncOperation + ") is in progress."); _EL_     } _EL_   } _EL_   logDebug("Disposing."); _EL_   mSetupDone=false; _EL_   if (mServiceConn != null) { _EL_     logDebug("Unbinding from service."); _EL_     if (mContext != null)     mContext.unbindService(mServiceConn); _EL_   } _EL_   mDisposed=true; _EL_   mContext=null; _EL_   mServiceConn=null; _EL_   mService=null; _EL_   mPurchaseListener=null; _EL_ } _EL_ ', 'private static File createReserveDiskCacheDir(Context context){ _EL_   File cacheDir=StorageUtils.getCacheDirectory(context,false); _EL_   File individualDir=new File(cacheDir,"uil-images"); _EL_   if (individualDir.exists() || individualDir.mkdir()) { _EL_     cacheDir=individualDir; _EL_   } _EL_   return cacheDir; _EL_ } _EL_ ', 'public boolean hasBeenCalled(String resourceName){ _EL_   return uris.contains(resourceName); _EL_ } _EL_ ', '@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException { _EL_   super.readExternal(in); _EL_   isLeaf=in.readBoolean(); _EL_   numEntries=in.readInt(); _EL_ } _EL_ ', 'public ObjIdMap(){ _EL_   this(11,0.75f); _EL_ } _EL_ ', 'public static ConnectionFactory newFailoverConnectionPool(Set<LDAPURL> servers,String username,char[] password,int maxSize,int heartBeatInterval,String heartBeatTimeUnit,Options ldapOptions){ _EL_   List<ConnectionFactory> factories=new ArrayList<ConnectionFactory>(servers.size()); _EL_   for (  LDAPURL ldapurl : servers) { _EL_     ConnectionFactory cf=Connections.newFixedConnectionPool(newConnectionFactory(ldapurl,username,password,heartBeatInterval,heartBeatTimeUnit,ldapOptions),maxSize); _EL_     factories.add(cf); _EL_   } _EL_   return loadBalanceFactories(factories); _EL_ } _EL_ ', 'public static void initCause(Throwable throwable,Throwable cause){ _EL_   if (INIT_CAUSE_METHOD != null) { _EL_     try { _EL_       INIT_CAUSE_METHOD.invoke(throwable,new Object[]{cause}); _EL_     } _EL_  catch (    Exception e) { _EL_     } _EL_   } _EL_ } _EL_ ', 'public MessagePropertyKey(String description,Integer ordinal){ _EL_   this.description=description; _EL_   this.ordinal=ordinal; _EL_ } _EL_ ', 'private Node addWaiter(Node mode){ _EL_   Node node=new Node(Thread.currentThread(),mode); _EL_   Node pred=tail; _EL_   if (pred != null) { _EL_     node.prev=pred; _EL_     if (compareAndSetTail(pred,node)) { _EL_       pred.next=node; _EL_       return node; _EL_     } _EL_   } _EL_   enq(node); _EL_   return node; _EL_ } _EL_ ', 'private void assertBounded(SortedSet<String> deserialized,boolean bounded){ _EL_   if (bounded) { _EL_     try { _EL_       deserialized.add("e"); _EL_       fail(); _EL_     } _EL_  catch (    IllegalArgumentException expected) { _EL_     } _EL_   } _EL_  else { _EL_     assertTrue(deserialized.add("e")); _EL_     assertTrue(deserialized.remove("e")); _EL_   } _EL_ } _EL_ ', 'private static byte[] readClass(final InputStream is,boolean close) throws IOException { _EL_   if (is == null) { _EL_     throw new IOException("Class not found"); _EL_   } _EL_   try { _EL_     byte[] b=new byte[is.available()]; _EL_     int len=0; _EL_     while (true) { _EL_       int n=is.read(b,len,b.length - len); _EL_       if (n == -1) { _EL_         if (len < b.length) { _EL_           byte[] c=new byte[len]; _EL_           System.arraycopy(b,0,c,0,len); _EL_           b=c; _EL_         } _EL_         return b; _EL_       } _EL_       len+=n; _EL_       if (len == b.length) { _EL_         int last=is.read(); _EL_         if (last < 0) { _EL_           return b; _EL_         } _EL_         byte[] c=new byte[b.length + 1000]; _EL_         System.arraycopy(b,0,c,0,len); _EL_         c[len++]=(byte)last; _EL_         b=c; _EL_       } _EL_     } _EL_   } _EL_   finally { _EL_     if (close) { _EL_       is.close(); _EL_     } _EL_   } _EL_ } _EL_ ', 'private static synchronized boolean isSupportedImpl(HttpCallerInfo hci){ _EL_   if (supported == null) { _EL_     supported=new HashMap<String,Boolean>(); _EL_     cache=new HashMap<String,Negotiator>(); _EL_   } _EL_   String hostname=hci.host; _EL_   hostname=hostname.toLowerCase(); _EL_   if (supported.containsKey(hostname)) { _EL_     return supported.get(hostname); _EL_   } _EL_   Negotiator neg=Negotiator.getNegotiator(hci); _EL_   if (neg != null) { _EL_     supported.put(hostname,true); _EL_     cache.put(hostname,neg); _EL_     return true; _EL_   } _EL_  else { _EL_     supported.put(hostname,false); _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public CProjectConfiguration(final INaviProject project,final ListenerProvider<IProjectListener> listeners,final SQLProvider provider,final int projectId,final String name,final String description,final Date creationDate,final Date modificationDate,final List<DebuggerTemplate> assignedDebuggers){ _EL_   m_project=project; _EL_   m_listeners=listeners; _EL_   m_provider=provider; _EL_   m_id=projectId; _EL_   m_name=name; _EL_   m_description=description; _EL_   m_creationDate=new Date(creationDate.getTime()); _EL_   m_modificationDate=new Date(modificationDate.getTime()); _EL_   m_assignedDebuggers=new ArrayList<DebuggerTemplate>(assignedDebuggers); _EL_ } _EL_ ', 'public Shape chartToScreenShape(Shape s){ _EL_   GeneralPath p=new GeneralPath(); _EL_   Transform inverse=Transform.makeTranslation(getAbsoluteX(),getAbsoluteY()); _EL_   if (currentTransform != null) { _EL_     inverse.concatenate(currentTransform); _EL_   } _EL_   p.append(s.getPathIterator(inverse),false); _EL_   return p; _EL_ } _EL_ ', '@Override public void addShutdownWindow(final Window window){ _EL_   if (m_isShutDown) { _EL_     closeWindow(window); _EL_     return; _EL_   } _EL_ synchronized (this) { _EL_     if (m_isShutDown) { _EL_       closeWindow(window); _EL_       return; _EL_     } _EL_     m_windowsToCloseOnShutdown.add(window); _EL_   } _EL_ } _EL_ ', 'public PerformanceLogger(){ _EL_   time1=System.currentTimeMillis(); _EL_ } _EL_ ', 'public AuthRequest authenticate(List discoveries,String returnToUrl) throws ConsumerException, MessageException { _EL_   return authenticate(discoveries,returnToUrl,returnToUrl); _EL_ } _EL_ ', 'public Hash(String hex){ _EL_   if (hex.length() != 64) { _EL_     throw new IllegalArgumentException("Digest length must be 64 hex characters for Hash"); _EL_   } _EL_   this.bytes=ByteUtils.reverse(ByteUtils.fromHex(hex)); _EL_ } _EL_ ', 'public boolean isNumericalRun(String pin){ _EL_   final int len=pin.length(); _EL_   int prevDigit=Character.digit(pin.charAt(0),10); _EL_   int prevDiff=Integer.MAX_VALUE; _EL_   boolean isRun=true; _EL_   for (int i=1; isRun && i < len; i++) { _EL_     final int digit=Character.digit(pin.charAt(i),10); _EL_     final int diff=digit - prevDigit; _EL_     if (prevDiff != Integer.MAX_VALUE && diff != prevDiff) { _EL_       isRun=false; _EL_     } _EL_     prevDiff=diff; _EL_     prevDigit=digit; _EL_   } _EL_   return isRun; _EL_ } _EL_ ', 'public static int uriType(String uri){ _EL_   if (uri.indexOf(\':\') != -1) { _EL_     return ABS_URI; _EL_   } _EL_  else   if (uri.startsWith("/")) { _EL_     return ROOT_REL_URI; _EL_   } _EL_  else { _EL_     return NOROOT_REL_URI; _EL_   } _EL_ } _EL_ ', 'public static void addGlue(JComponent b,boolean horiz){ _EL_   b.add(horiz ? Box.createHorizontalGlue() : Box.createVerticalGlue()); _EL_ } _EL_ ', 'public static boolean isResourceReference(String str){ _EL_   return str.startsWith(BIG_QUOTE_LEFT) && str.endsWith(BIG_QUOTE_RIGHT) && str.charAt(1) == AT.charAt(0); _EL_ } _EL_ ', 'public boolean leave() throws KeeperException, InterruptedException { _EL_   zooKeeper.delete(rootPath + "/" + name,0); _EL_   while (true) { _EL_ synchronized (mutex) { _EL_       List<String> list=zooKeeper.getChildren(rootPath,true); _EL_       if (list.size() > 0) { _EL_         mutex.wait(); _EL_       } _EL_  else { _EL_         return true; _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public Enumeration<? extends Principal> members(){ _EL_   Vector<Principal> v=new Vector<Principal>(1); _EL_   v.addElement(this); _EL_   return v.elements(); _EL_ } _EL_ ', 'public SelectClause addWithAsProvidedName(String propertyName,String asName){ _EL_   selectList.add(new SelectClauseExpression(new PropertyValueExpression(propertyName),asName)); _EL_   return this; _EL_ } _EL_ ', 'public void addInterface(String interfaceName){ _EL_   short interfaceIndex=itsConstantPool.addClass(interfaceName); _EL_   itsInterfaces.add(Short.valueOf(interfaceIndex)); _EL_ } _EL_ ', 'private Response requestHttpGetFromRegistry(String url) throws RegistryException { _EL_   try { _EL_     Response resp=http.get(url); _EL_     if (resp != null && resp.content != null) { _EL_       return resp; _EL_     } _EL_  else { _EL_       throw new RegistryException(TYPE.BAD_RESPONSE,"Response content is null"); _EL_     } _EL_   } _EL_  catch (  ClassCastException e) { _EL_     throw new RegistryException(TYPE.BAD_RESPONSE,e); _EL_   } _EL_ catch (  ConnectException e) { _EL_     throw new RegistryException(TYPE.PROXY,e); _EL_   } _EL_ catch (  UnknownHostException e) { _EL_     try { _EL_       http.get("http://www.google.com"); _EL_     } _EL_  catch (    Exception e1) { _EL_       throw new RegistryException(TYPE.NO_INTERNET,e1); _EL_     } _EL_     throw new RegistryException(TYPE.SITE_DOWN,e); _EL_   } _EL_ catch (  IOException e) { _EL_     throw new RegistryException(TYPE.IO_ERROR,e); _EL_   } _EL_ catch (  URISyntaxException e) { _EL_     throw new RegistryException(TYPE.BAD_REQUEST,"Please check the request URL: " + ((url != null) ? url : "empty URL used!")); _EL_   } _EL_ } _EL_ ', 'private void removeTvShow(TvShow tvShow){ _EL_ synchronized (root) { _EL_     TvShowTreeNode child=(TvShowTreeNode)nodeMap.get(tvShow); _EL_     DefaultMutableTreeNode parent=root; _EL_     if (child != null) { _EL_       int index=getIndexOfChild(parent,child); _EL_       nodeMap.remove(tvShow); _EL_       for (      TvShowEpisode episode : new ArrayList<>(tvShow.getEpisodes())) { _EL_         nodeMap.remove(episode); _EL_         episode.removePropertyChangeListener(propertyChangeListener); _EL_       } _EL_       tvShow.removePropertyChangeListener(propertyChangeListener); _EL_       child.removeAllChildren(); _EL_       child.removeFromParent(); _EL_       if (index > -1) { _EL_         TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child}); _EL_         for (        TreeModelListener listener : listeners) { _EL_           try { _EL_             listener.treeNodesRemoved(event); _EL_           } _EL_  catch (          NullPointerException|ArrayIndexOutOfBoundsException npe) { _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'private ComplianceFeature checkEncryptPolicy(org.wso2.emm.agent.beans.Operation operation){ _EL_   boolean encryptStatus=(devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED && devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_INACTIVE); _EL_   if ((operation.isEnabled() && encryptStatus) || (!operation.isEnabled() && !encryptStatus)) { _EL_     policy.setCompliance(true); _EL_   } _EL_  else { _EL_     policy.setCompliance(false); _EL_     policy.setMessage(resources.getString(R.string.error_encrypt_policy)); _EL_   } _EL_   return policy; _EL_ } _EL_ ', 'private long cacheResponseAge(){ _EL_   long apparentReceivedAge=servedDate != null ? Math.max(0,receivedResponseMillis - servedDate.getTime()) : 0; _EL_   long receivedAge=ageSeconds != -1 ? Math.max(apparentReceivedAge,SECONDS.toMillis(ageSeconds)) : apparentReceivedAge; _EL_   long responseDuration=receivedResponseMillis - sentRequestMillis; _EL_   long residentDuration=nowMillis - receivedResponseMillis; _EL_   return receivedAge + responseDuration + residentDuration; _EL_ } _EL_ ', '@Override public Void call() throws Exception { _EL_   MulticastSocket datagramSocket=null; _EL_   ExecutorService service=null; _EL_   try { _EL_     datagramSocket=new MulticastSocket(port); _EL_     datagramSocket.joinGroup(group); _EL_     service=Executors.newSingleThreadScheduledExecutor(new DaemonThreadFactory("GangliaListener")); _EL_     final byte[] buffer=new byte[BUFFER_SIZE]; _EL_     final DatagramPacket packet=new DatagramPacket(buffer,0,buffer.length); _EL_     listening=true; _EL_     while (true) { _EL_       try { _EL_         datagramSocket.receive(packet); _EL_         if (Thread.interrupted()) { _EL_           break; _EL_         } _EL_         final IGangliaMessage msg=decodeRecord(packet.getData(),packet.getOffset(),packet.getLength()); _EL_         if (msg != null) { _EL_           service.submit(new DispatchTask(handler,msg)); _EL_         } _EL_       } _EL_  catch (      Throwable t) { _EL_         log.warn(t,t); _EL_       } _EL_     } _EL_     return (Void)null; _EL_   } _EL_   finally { _EL_     if (service != null) { _EL_       service.shutdown(); _EL_     } _EL_     if (datagramSocket != null) { _EL_       datagramSocket.close(); _EL_     } _EL_     listening=false; _EL_   } _EL_ } _EL_ ', 'protected static void invalidateSwitchPoints(){ _EL_   if (LOG_ENABLED) { _EL_     LOG.info("invalidating switch point"); _EL_   } _EL_ synchronized (IndyInterface.class) { _EL_     SwitchPoint old=switchPoint; _EL_     switchPoint=new SwitchPoint(); _EL_     SwitchPoint.invalidateAll(new SwitchPoint[]{old}); _EL_   } _EL_ } _EL_ ', 'private double prediction(Instance inst){ _EL_   double[] normalizedInstance=normalizedInstance(inst); _EL_   double normalizedPrediction=prediction(normalizedInstance); _EL_   return denormalizedPrediction(normalizedPrediction); _EL_ } _EL_ ', 'protected Object finish(Map settings) throws WizardException { _EL_   return provider.finish(settings); _EL_ } _EL_ ', 'protected void fireClusterChange(long timestamp,String type,String message){ _EL_   if (listeners != null && !listeners.isEmpty()) { _EL_     ClusterEvent event=new ClusterEvent(this,timestamp,type,message); _EL_     Vector targets; _EL_ synchronized (this) { _EL_       targets=(Vector)listeners.clone(); _EL_     } _EL_     Enumeration e=targets.elements(); _EL_     while (e.hasMoreElements()) { _EL_       ClusterEventListener l=(ClusterEventListener)e.nextElement(); _EL_       l.changeCluster(event); _EL_     } _EL_   } _EL_ } _EL_ ', 'public BatchedImageRequest(Request<?> request,ImageContainer container){ _EL_   mRequest=request; _EL_   mContainers.add(container); _EL_ } _EL_ ', 'public int rgbFor(int pixel){ _EL_   return surfaceType.rgbFor(pixel,colorModel); _EL_ } _EL_ ', "private boolean checkForCarry(final char[] ca1,final int icarry){ _EL_   boolean carry=false; _EL_   if (icarry < ca1.length) { _EL_     if (ca1[icarry] == '6' || ca1[icarry] == '7' || ca1[icarry] == '8' || ca1[icarry] == '9') { _EL_       carry=true; _EL_     } _EL_  else     if (ca1[icarry] == '5') { _EL_       int ii=icarry + 1; _EL_       for (; ii < ca1.length; ii++) { _EL_         if (ca1[ii] != '0') { _EL_           break; _EL_         } _EL_       } _EL_       carry=ii < ca1.length; _EL_       if (!carry && icarry > 0) { _EL_         carry=(ca1[icarry - 1] == '1' || ca1[icarry - 1] == '3' || ca1[icarry - 1] == '5' || ca1[icarry - 1] == '7' || ca1[icarry - 1] == '9'); _EL_       } _EL_     } _EL_   } _EL_   return carry; _EL_ } _EL_ ", 'protected void addBottomComponent(Component bottomComponent){ _EL_   c.weighty=2; _EL_   layout.setConstraints(bottomComponent,c); _EL_   contentPanel.add(bottomComponent); _EL_ } _EL_ ', 'public static File createTempDir(File dir,boolean cleanup) throws IOException { _EL_   if (!dir.mkdirs() && !dir.exists()) { _EL_     throw new IOException(String.format("Failed to create directory structure \'%s\'",dir.toString())); _EL_   } _EL_   if (cleanup) { _EL_     addCleanupHook(dir.toPath()); _EL_   } _EL_   return dir; _EL_ } _EL_ ', 'public void emitInit(){ _EL_   out.append("  private static final int [] "); _EL_   out.append(constName()); _EL_   out.append(" = zzUnpack"); _EL_   out.append(name); _EL_   out.append("();"); _EL_   nl(); _EL_   nextChunk(); _EL_ } _EL_ ', 'protected final void merge(@NotNull Set<LocalResourceRepository> visited,@NotNull ResourceType type,@NotNull SetMultimap<String,String> seenQualifiers,@NotNull ListMultimap<String,ResourceItem> result){ _EL_   if (visited.contains(this)) { _EL_     return; _EL_   } _EL_   visited.add(this); _EL_   doMerge(visited,type,seenQualifiers,result); _EL_ } _EL_ ', "private byte[] translateTransferableString(String str,long format) throws IOException { _EL_   Long lFormat=Long.valueOf(format); _EL_   String charset=getBestCharsetForTextFormat(lFormat,null); _EL_   String eoln=(String)nativeEOLNs.get(lFormat); _EL_   if (eoln != null) { _EL_     int length=str.length(); _EL_     StringBuffer buffer=new StringBuffer(length * 2); _EL_     for (int i=0; i < length; i++) { _EL_       if (str.startsWith(eoln,i)) { _EL_         buffer.append(eoln); _EL_         i+=eoln.length() - 1; _EL_         continue; _EL_       } _EL_       char c=str.charAt(i); _EL_       if (c == '\\n') { _EL_         buffer.append(eoln); _EL_       } _EL_  else { _EL_         buffer.append(c); _EL_       } _EL_     } _EL_     str=buffer.toString(); _EL_   } _EL_   byte[] bytes=str.getBytes(charset); _EL_   Integer terminators=(Integer)nativeTerminators.get(lFormat); _EL_   if (terminators != null) { _EL_     int numTerminators=terminators.intValue(); _EL_     byte[] terminatedBytes=new byte[bytes.length + numTerminators]; _EL_     System.arraycopy(bytes,0,terminatedBytes,0,bytes.length); _EL_     for (int i=bytes.length; i < terminatedBytes.length; i++) { _EL_       terminatedBytes[i]=0x0; _EL_     } _EL_     bytes=terminatedBytes; _EL_   } _EL_   return bytes; _EL_ } _EL_ ", 'private byte[] createPreviewBuffer(Size previewSize){ _EL_   int bitsPerPixel=ImageFormat.getBitsPerPixel(ImageFormat.NV21); _EL_   long sizeInBits=previewSize.getHeight() * previewSize.getWidth() * bitsPerPixel; _EL_   int bufferSize=(int)Math.ceil(sizeInBits / 8.0d) + 1; _EL_   byte[] byteArray=new byte[bufferSize]; _EL_   ByteBuffer buffer=ByteBuffer.wrap(byteArray); _EL_   if (!buffer.hasArray() || (buffer.array() != byteArray)) { _EL_     throw new IllegalStateException("Failed to create valid buffer for camera source."); _EL_   } _EL_   mBytesToByteBuffer.put(byteArray,buffer); _EL_   return byteArray; _EL_ } _EL_ ', 'public Position createPosition(int offset) throws BadLocationException { _EL_   while (queue.poll() != null) { _EL_     unusedMarks++; _EL_   } _EL_   if (unusedMarks > Math.max(5,(marks.size() / 10))) { _EL_     removeUnusedMarks(); _EL_   } _EL_   int g0=getGapStart(); _EL_   int g1=getGapEnd(); _EL_   int index=(offset < g0) ? offset : offset + (g1 - g0); _EL_   search.index=index; _EL_   int sortIndex=findSortIndex(search); _EL_   MarkData m; _EL_   StickyPosition position; _EL_   if (sortIndex < marks.size() && (m=marks.elementAt(sortIndex)).index == index && (position=m.getPosition()) != null) { _EL_   } _EL_  else { _EL_     position=new StickyPosition(); _EL_     m=new MarkData(index,position,queue); _EL_     position.setMark(m); _EL_     marks.insertElementAt(m,sortIndex); _EL_   } _EL_   return position; _EL_ } _EL_ ', "public static String pad(String string,int n,String padding,boolean right){ _EL_   if (n < 0) { _EL_     n=0; _EL_   } _EL_   if (n < string.length()) { _EL_     return string.substring(0,n); _EL_   } _EL_  else   if (n == string.length()) { _EL_     return string; _EL_   } _EL_   char paddingChar; _EL_   if (padding == null || padding.length() == 0) { _EL_     paddingChar=' '; _EL_   } _EL_  else { _EL_     paddingChar=padding.charAt(0); _EL_   } _EL_   StringBuilder buff=new StringBuilder(n); _EL_   n-=string.length(); _EL_   if (right) { _EL_     buff.append(string); _EL_   } _EL_   for (int i=0; i < n; i++) { _EL_     buff.append(paddingChar); _EL_   } _EL_   if (!right) { _EL_     buff.append(string); _EL_   } _EL_   return buff.toString(); _EL_ } _EL_ ", 'private final void resetDTX(AffineTransform at){ _EL_   fsref=null; _EL_   dtx=at; _EL_   invdtx=null; _EL_   if (!dtx.isIdentity()) { _EL_     try { _EL_       invdtx=dtx.createInverse(); _EL_     } _EL_  catch (    NoninvertibleTransformException e) { _EL_     } _EL_   } _EL_   if (gti != null) { _EL_     gti.strikesRef=null; _EL_   } _EL_ } _EL_ ', 'public void addMutedUsername(final String username,final Date muteTill){ _EL_   if (isUsernameMuted(username)) { _EL_     removeMutedUsername(username); _EL_   } _EL_   Timestamp muteTillTs=null; _EL_   if (muteTill != null) { _EL_     muteTillTs=new Timestamp(muteTill.getTime()); _EL_   } _EL_   s_logger.fine("Muting username:" + username); _EL_   final Connection con=Database.getConnection(); _EL_   try { _EL_     final PreparedStatement ps=con.prepareStatement("insert into muted_usernames (username, mute_till) values (?, ?)"); _EL_     ps.setString(1,username); _EL_     ps.setTimestamp(2,muteTillTs); _EL_     ps.execute(); _EL_     ps.close(); _EL_     con.commit(); _EL_   } _EL_  catch (  final SQLException sqle) { _EL_     if (sqle.getErrorCode() == 30000) { _EL_       s_logger.info("Tried to create duplicate muted username:" + username + " error:"+ sqle.getMessage()); _EL_       return; _EL_     } _EL_     s_logger.log(Level.SEVERE,"Error inserting muted username:" + username,sqle); _EL_     throw new IllegalStateException(sqle.getMessage()); _EL_   } _EL_  finally { _EL_     DbUtil.closeConnection(con); _EL_   } _EL_ } _EL_ ', 'private Response<Bitmap> doParse(NetworkResponse response){ _EL_   byte[] data=response.data; _EL_   Log.d("Checksum","Decode"); _EL_   BitmapFactory.Options decodeOptions=new BitmapFactory.Options(); _EL_   Bitmap bitmap=null; _EL_   Log.d("Checksum","Decodess"); _EL_   decodeOptions.inJustDecodeBounds=true; _EL_   BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions); _EL_   int actualWidth=decodeOptions.outWidth; _EL_   int actualHeight=decodeOptions.outHeight; _EL_   int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType); _EL_   int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType); _EL_   decodeOptions.inJustDecodeBounds=false; _EL_   decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight); _EL_   Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions); _EL_   if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) { _EL_     bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true); _EL_     tempBitmap.recycle(); _EL_   } _EL_  else { _EL_     bitmap=tempBitmap; _EL_   } _EL_   if (bitmap == null) { _EL_     return Response.error(new ParseError(response)); _EL_   } _EL_  else { _EL_     return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response)); _EL_   } _EL_ } _EL_ ', 'public boolean isEmpty(){ _EL_   return mSelectedWidgets.isEmpty(); _EL_ } _EL_ ', 'public static void nextBytes(byte[] bytes){ _EL_   wasAccessed=true; _EL_   for (int i=0; i < bytes.length; )   for (int rnd=nextInt(), n=Math.min(bytes.length - i,4); n-- > 0; rnd>>=8)   bytes[i++]=(byte)rnd; _EL_ } _EL_ ', 'protected void drawLowFarOut(double aRadius,Graphics2D g2,double xx,double m){ _EL_   double side=aRadius * 2; _EL_   g2.draw(new Line2D.Double(xx - side,m - side,xx + side,m - side)); _EL_   g2.draw(new Line2D.Double(xx - side,m - side,xx,m)); _EL_   g2.draw(new Line2D.Double(xx + side,m - side,xx,m)); _EL_ } _EL_ ', 'public boolean isJavaLibraryClass(){ _EL_   if (name.startsWith("java.") || name.startsWith("sun.") || name.startsWith("javax.")|| name.startsWith("com.sun.")|| name.startsWith("org.omg.")|| name.startsWith("org.xml."))   return true; _EL_   return false; _EL_ } _EL_ ', 'private Set<ObjectName> objectNamesFromFilteredNamedObjects(Set<NamedObject> list,QueryExp query){ _EL_   Set<ObjectName> result=new HashSet<ObjectName>(); _EL_   if (query == null) { _EL_     for (    NamedObject no : list) { _EL_       result.add(no.getName()); _EL_     } _EL_   } _EL_  else { _EL_     final MBeanServer oldServer=QueryEval.getMBeanServer(); _EL_     query.setMBeanServer(server); _EL_     try { _EL_       for (      NamedObject no : list) { _EL_         boolean res; _EL_         try { _EL_           res=query.apply(no.getName()); _EL_         } _EL_  catch (        Exception e) { _EL_           res=false; _EL_         } _EL_         if (res) { _EL_           result.add(no.getName()); _EL_         } _EL_       } _EL_     } _EL_   finally { _EL_       query.setMBeanServer(oldServer); _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private Element createEndPoint(String name,String attrBinding,String attrLocation,String attrResponseLocation) throws DOMException { _EL_   if (name == null) { _EL_     throw new IllegalArgumentException("Null name"); _EL_   } _EL_   if (attrBinding == null) { _EL_     throw new IllegalArgumentException("Null binding"); _EL_   } _EL_   if (attrLocation == null) { _EL_     throw new IllegalArgumentException("Null location"); _EL_   } _EL_   Element endPt=doc.createElement(name); _EL_   endPt.setAttribute(SAMLNames.BINDING,attrBinding); _EL_   endPt.setAttribute(SAMLNames.LOCATION,attrLocation); _EL_   if (attrResponseLocation != null) { _EL_     endPt.setAttribute(SAMLNames.RESPLOC,attrResponseLocation); _EL_   } _EL_   return endPt; _EL_ } _EL_ ', 'void putFile(String relativePath,Codebase codebase){ _EL_   try { _EL_     File dest=new File(rootDirectory.getAbsolutePath(),relativePath); _EL_     File src=codebase.getFile(relativePath); _EL_     boolean srcExists=filesystem.exists(src); _EL_     boolean destExists=filesystem.exists(dest); _EL_     boolean srcExecutable=filesystem.isExecutable(src); _EL_     boolean destExecutable=filesystem.isExecutable(dest); _EL_     if (!srcExists && !destExists) { _EL_       throw new MoeProblem("Neither src nor dests exists. Unreachable code:%n%s%n%s%n%s",relativePath,src,dest); _EL_     } _EL_     if (!srcExists) { _EL_       util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),"rm",relativePath); _EL_       return; _EL_     } _EL_     try { _EL_       filesystem.makeDirsForFile(dest); _EL_       filesystem.copyFile(src,dest); _EL_     } _EL_  catch (    IOException e) { _EL_       throw new MoeProblem(e.getMessage()); _EL_     } _EL_     if (!destExists) { _EL_       util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),"add","--parents",relativePath); _EL_     } _EL_     String mimeType=guessMimeType(relativePath); _EL_     if (mimeType != null) { _EL_       try { _EL_         util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),"propset","svn:mime-type",mimeType,relativePath); _EL_       } _EL_  catch (      CommandRunner.CommandException e) { _EL_         ui.message("Error setting mime-type for %s",relativePath); _EL_       } _EL_     } _EL_     if (destExecutable != srcExecutable) { _EL_       if (srcExecutable) { _EL_         util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),"propset","svn:executable","*",relativePath); _EL_       } _EL_  else { _EL_         util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),"propdel","svn:executable",relativePath); _EL_       } _EL_     } _EL_   } _EL_  catch (  CommandRunner.CommandException e) { _EL_     throw new MoeProblem("problem occurred while running svn: " + e.stderr); _EL_   } _EL_ } _EL_ ', 'public synchronized byte[] toByteArray(){ _EL_   byte[] newArray=new byte[count]; _EL_   System.arraycopy(buf,0,newArray,0,count); _EL_   return newArray; _EL_ } _EL_ ', 'private byte[] convertBitmapToBytes(final Bitmap bitmap){ _EL_   int size=bitmap.getRowBytes() * bitmap.getHeight(); _EL_   ByteArrayOutputStream out=new ByteArrayOutputStream(size); _EL_   try { _EL_     if (bitmap.compress(Bitmap.CompressFormat.PNG,0,out)) { _EL_       return out.toByteArray(); _EL_     } _EL_     if (sLogger.isActivated()) { _EL_       sLogger.debug("Unable to convert bitmap, compression failed"); _EL_     } _EL_     return null; _EL_   } _EL_   finally { _EL_     CloseableUtils.tryToClose(out); _EL_   } _EL_ } _EL_ ', 'public void addComposite(TransformTreeNode node){ _EL_   parts.add(node); _EL_ } _EL_ ', 'protected static void postProcessFlood(IHex[] hexSet,int modifier){ _EL_   int n; _EL_   IHex field; _EL_   ITerrainFactory f=Terrains.getTerrainFactory(); _EL_   for (n=0; n < hexSet.length; n++) { _EL_     field=hexSet[n]; _EL_     int elev=field.getLevel() - modifier; _EL_     if ((elev == 0) && !(field.containsTerrain(Terrains.WATER)) && !(field.containsTerrain(Terrains.PAVEMENT))) { _EL_       field.addTerrain(f.createTerrain(Terrains.SWAMP,1)); _EL_     } _EL_  else     if (elev < 0) { _EL_       if (elev < -4) { _EL_         elev=-4; _EL_       } _EL_       field.removeAllTerrains(); _EL_       field.addTerrain(f.createTerrain(Terrains.WATER,-elev)); _EL_       field.setLevel(modifier); _EL_     } _EL_   } _EL_ } _EL_ ', 'public ModuleHandle addModule(String moduleName,String sessionKey){ _EL_   String sanitizedModuleName=generateUniqueNameIfNullOrEmpty(moduleName,"Module"); _EL_   ModuleHandle moduleHandle=new ModuleHandle(sanitizedModuleName,sessionKey); _EL_ synchronized (privateInstanceLock) { _EL_     modules.add(moduleHandle); _EL_   } _EL_   setTerminated(false); _EL_   return moduleHandle; _EL_ } _EL_ ', "private static void expand2DigitNumber(String numberString,WordRelation wordRelation,Item tokenItem){ _EL_   if (numberString.charAt(0) == '0') { _EL_     if (numberString.charAt(1) == '0') { _EL_     } _EL_  else { _EL_       String number=digit2num[numberString.charAt(1) - '0']; _EL_       wordRelation.addWord(tokenItem,number); _EL_     } _EL_   } _EL_  else   if (numberString.charAt(1) == '0') { _EL_     String number=digit2enty[numberString.charAt(0) - '0']; _EL_     wordRelation.addWord(tokenItem,number); _EL_   } _EL_  else   if (numberString.charAt(0) == '1') { _EL_     String number=digit2teen[numberString.charAt(1) - '0']; _EL_     wordRelation.addWord(tokenItem,number); _EL_   } _EL_  else { _EL_     String enty=digit2enty[numberString.charAt(0) - '0']; _EL_     wordRelation.addWord(tokenItem,enty); _EL_     expandDigits(numberString.substring(1,numberString.length()),wordRelation,tokenItem); _EL_   } _EL_ } _EL_ ", 'protected int indexOf(String buffer,int start,int end,char ch){ _EL_   for (int i=start; i < end; i++) { _EL_     if (buffer.charAt(i) == ch) { _EL_       return i; _EL_     } _EL_   } _EL_   return -1; _EL_ } _EL_ ', 'public Factory(JavacMessages messages,String prefix){ _EL_   this.prefix=prefix; _EL_   this.formatter=new BasicDiagnosticFormatter(messages); _EL_   defaultErrorFlags=EnumSet.of(DiagnosticFlag.MANDATORY); _EL_ } _EL_ ', '@Override protected boolean isFrontierEmpty(){ _EL_   cleanUpFrontier(); _EL_   updateMetrics(frontier.size()); _EL_   return frontier.isEmpty(); _EL_ } _EL_ ', '@Override public boolean isEnabled(){ _EL_   if ((attributeSelectionPanel != null) && !isValueOnly()) { _EL_     return attributeSelectionPanel.isEnabled(); _EL_   } _EL_  else { _EL_     if (this.crsComboBox != null) { _EL_       return crsComboBox.isEnabled(); _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static double variance(double[] x,double mean){ _EL_   double var=0; _EL_   int count=x.length; _EL_   for (  double aX : x) { _EL_     if (Double.isNaN(aX)) { _EL_       count--; _EL_     } _EL_  else { _EL_       double diff=aX - mean; _EL_       var+=diff * diff; _EL_     } _EL_   } _EL_   if (count < 2) { _EL_     count=1; _EL_   } _EL_  else { _EL_     count=count - 1; _EL_   } _EL_   return var / (double)count; _EL_ } _EL_ ', 'private void stashRequestUser(RequestAndResponse requestAndResponse){ _EL_   if (requestAndResponse.wasUserAlreadyStashed) { _EL_     return; _EL_   } _EL_   requestAndResponse.wasUserAlreadyStashed=true; _EL_   final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse)); _EL_   if (user != null) { _EL_     requestAndResponse.userIsAdmin=user.getIsAdmin(); _EL_     requestAndResponse.userIsAccountClosed=user.getIsAccountClosed(); _EL_     requestAndResponse.userOptions=user.getOptions(); _EL_   } _EL_  else { _EL_     requestAndResponse.userOptions="{}"; _EL_   } _EL_ } _EL_ ', 'protected void serializeText(Text node) throws SAXException { _EL_   if (fNextIsRaw) { _EL_     fNextIsRaw=false; _EL_     fSerializer.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,""); _EL_     dispatachChars(node); _EL_     fSerializer.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,""); _EL_   } _EL_  else { _EL_     boolean bDispatch=false; _EL_     if ((fFeatures & WELLFORMED) != 0) { _EL_       isTextWellFormed(node); _EL_     } _EL_     boolean isElementContentWhitespace=false; _EL_     if (fIsLevel3DOM) { _EL_       isElementContentWhitespace=node.isElementContentWhitespace(); _EL_     } _EL_     if (isElementContentWhitespace) { _EL_       if ((fFeatures & ELEM_CONTENT_WHITESPACE) != 0) { _EL_         bDispatch=true; _EL_       } _EL_     } _EL_  else { _EL_       bDispatch=true; _EL_     } _EL_     if (!applyFilter(node,NodeFilter.SHOW_TEXT)) { _EL_       return; _EL_     } _EL_     if (bDispatch) { _EL_       dispatachChars(node); _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public boolean isInsideSoftWrap(@NotNull VisualPosition visual){ _EL_   return isInsideSoftWrap(visual,false); _EL_ } _EL_ ', 'public boolean isValid(World world){ _EL_   return true; _EL_ } _EL_ ', 'public void clear(){ _EL_   Arrays.fill(ritems,0,rsize,null); _EL_   Arrays.fill(pitems,0,psize,null); _EL_   rsize=0; _EL_   psize=0; _EL_ } _EL_ ', 'private ParsePosition next(final ParsePosition pos){ _EL_   pos.setIndex(pos.getIndex() + 1); _EL_   return pos; _EL_ } _EL_ ', 'public final AC growPrio(int p){ _EL_   return growPrio(p,curIx); _EL_ } _EL_ ', 'private int flush(int offset){ _EL_   try { _EL_     _os.write(_buffer,0,offset); _EL_     _offset=0; _EL_     return 0; _EL_   } _EL_  catch (  IOException e) { _EL_     throw new H3ExceptionOut(e); _EL_   } _EL_ } _EL_ ', 'protected String generateSectionLabel(PieDataset dataset,Comparable key){ _EL_   String result=null; _EL_   if (dataset != null) { _EL_     Object[] items=createItemArray(dataset,key); _EL_     result=MessageFormat.format(this.labelFormat,items); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public synchronized void removeGraphListener(GraphListener cl){ _EL_   m_graphListeners.remove(cl); _EL_ } _EL_ ', 'public int increment(int offset){ _EL_   CharSequence txt=getText(); _EL_   int i; _EL_   if (txt != null) { _EL_     try { _EL_       i=Integer.parseInt(txt.toString()); _EL_     } _EL_  catch (    NumberFormatException e) { _EL_       i=0; _EL_     } _EL_   } _EL_  else { _EL_     i=0; _EL_   } _EL_   i=i + offset; _EL_   setText(String.valueOf(i)); _EL_   return i; _EL_ } _EL_ ', 'public static ServiceConfiguration create(InputStream inStream) throws IOException, IllegalArgumentException { _EL_   try { _EL_     checkNotNull(inStream); _EL_     Properties properties=new Properties(); _EL_     properties.load(inStream); _EL_     return (create(properties)); _EL_   } _EL_   finally { _EL_     if (inStream != null) { _EL_       inStream.close(); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected int[] splitSentence(String sentence){ _EL_   String[] w=sentence.split("\\\\s+"); _EL_   int[] words=new int[w.length]; _EL_   for (int i=0; i < w.length; i++)   words[i]=Vocabulary.id(w[i]); _EL_   return words; _EL_ } _EL_ ', 'public static boolean isFailure(List<Action> actions){ _EL_   return actions.isEmpty(); _EL_ } _EL_ ', 'public void addToDictionary(String s){ _EL_   if (!getAutoComplete())   return; _EL_   if (dict == null) { _EL_     setUp(); _EL_     this.dict=createDefaultDictionary(); _EL_   } _EL_   dict.addEntry(s.trim()); _EL_ } _EL_ ', 'public static int[][] deep_copy(int M[][]){ _EL_   int[][] C=new int[M.length][]; _EL_   for (int i=0; i < C.length; i++) { _EL_     C[i]=Arrays.copyOf(M[i],M[i].length); _EL_   } _EL_   return C; _EL_ } _EL_ ', 'public void waitForMessageToArrive(){ _EL_   LOG.info("Waiting for message to arrive"); _EL_   long start=System.currentTimeMillis(); _EL_ synchronized (messages) { _EL_     try { _EL_       while (hasReceivedMessage()) { _EL_         messages.wait(4000); _EL_       } _EL_     } _EL_  catch (    InterruptedException e) { _EL_       LOG.info("Caught: " + e); _EL_     } _EL_   } _EL_   long end=System.currentTimeMillis() - start; _EL_   LOG.info("End of wait for " + end + " millis"); _EL_ } _EL_ ', 'public Date(String date){ _EL_   String[] fields=date.split("/"); _EL_   if (fields.length != 3) { _EL_     throw new IllegalArgumentException("Invalid date"); _EL_   } _EL_   month=Integer.parseInt(fields[0]); _EL_   day=Integer.parseInt(fields[1]); _EL_   year=Integer.parseInt(fields[2]); _EL_   if (!isValid(month,day,year))   throw new IllegalArgumentException("Invalid date"); _EL_ } _EL_ ', 'public static void copy(File src,File dst) throws IOException { _EL_   if (src.isDirectory()) { _EL_     ensureDirectoryExists(dst); _EL_     String[] filesList=src.list(); _EL_     for (    String file : filesList) { _EL_       File srcFile=new File(src,file); _EL_       File destFile=new File(dst,file); _EL_       copy(srcFile,destFile); _EL_     } _EL_   } _EL_  else { _EL_     copyFile(src,dst); _EL_   } _EL_ } _EL_ ', 'public MapObjects(PokemonGo api){ _EL_   this.api=api; _EL_ } _EL_ ', 'public String encode(String pString) throws EncoderException { _EL_   if (pString == null) { _EL_     return null; _EL_   } _EL_   try { _EL_     return encode(pString,getDefaultCharset()); _EL_   } _EL_  catch (  UnsupportedEncodingException e) { _EL_     throw new EncoderException(e.getMessage()); _EL_   } _EL_ } _EL_ ', 'static MethodHandle makeCollectArguments(MethodHandle target,MethodHandle collector,int collectArgPos,boolean retainOriginalArgs){ _EL_   MethodType targetType=target.type(); _EL_   MethodType collectorType=collector.type(); _EL_   int collectArgCount=collectorType.parameterCount(); _EL_   Class<?> collectValType=collectorType.returnType(); _EL_   int collectValCount=(collectValType == void.class ? 0 : 1); _EL_   MethodType srcType=targetType.dropParameterTypes(collectArgPos,collectArgPos + collectValCount); _EL_   if (!retainOriginalArgs) { _EL_     srcType=srcType.insertParameterTypes(collectArgPos,collectorType.parameterList()); _EL_   } _EL_   MethodType lambdaType=srcType.invokerType(); _EL_   Name[] names=arguments(2,lambdaType); _EL_   final int collectNamePos=names.length - 2; _EL_   final int targetNamePos=names.length - 1; _EL_   Name[] collectorArgs=Arrays.copyOfRange(names,1 + collectArgPos,1 + collectArgPos + collectArgCount); _EL_   names[collectNamePos]=new Name(collector,(Object[])collectorArgs); _EL_   Name[] targetArgs=new Name[targetType.parameterCount()]; _EL_   int inputArgPos=1; _EL_   int targetArgPos=0; _EL_   int chunk=collectArgPos; _EL_   System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk); _EL_   inputArgPos+=chunk; _EL_   targetArgPos+=chunk; _EL_   if (collectValType != void.class) { _EL_     targetArgs[targetArgPos++]=names[collectNamePos]; _EL_   } _EL_   chunk=collectArgCount; _EL_   if (retainOriginalArgs) { _EL_     System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk); _EL_     targetArgPos+=chunk; _EL_   } _EL_   inputArgPos+=chunk; _EL_   chunk=targetArgs.length - targetArgPos; _EL_   System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk); _EL_   assert (inputArgPos + chunk == collectNamePos); _EL_   names[targetNamePos]=new Name(target,(Object[])targetArgs); _EL_   LambdaForm form=new LambdaForm("collect",lambdaType.parameterCount(),names); _EL_   return SimpleMethodHandle.make(srcType,form); _EL_ } _EL_ ', 'public InSpacePredicate(Object... values){ _EL_   _inValues=new HashSet<Object>(); _EL_   for (  Object value : values) { _EL_     _inValues.add(value); _EL_   } _EL_ } _EL_ ', 'private static void delete(File f){ _EL_   if (f.isDirectory()) { _EL_     for (    File c : f.listFiles()) { _EL_       delete(c); _EL_     } _EL_   } _EL_   if (!f.delete()) { _EL_     PrintStream err=System.err; _EL_     err.println("Failed to delete file: " + f); _EL_   } _EL_ } _EL_ ', 'protected List<String> prepareSortKeyStatements(List<SortKey> sortKeys){ _EL_   List<String> keys=new ArrayList<String>(); _EL_   for (int i=0; i < sortKeys.size(); i++) { _EL_     SortKey sortKey=sortKeys.get(i); _EL_     keys.add(explicitMapping.getDbColumnName(sortKey.getField()) + (sortKey.isAscendingOrder() ? " ASC" : " DESC")); _EL_   } _EL_   return keys; _EL_ } _EL_ ', 'public static String experimenterToString(OFInstructionExperimenter inst,Logger log){ _EL_   return Long.toString(inst.getExperimenter()); _EL_ } _EL_ ', 'public static void printMagnitudes(){ _EL_   printMagnitudes(System.out); _EL_ } _EL_ ', 'private Optional<CuratorFramework> createClient(String zookeeperUrl){ _EL_   if (StringUtils.isNotBlank(zookeeperUrl)) { _EL_     CuratorFramework client=ConfigurationsUtils.getClient(zookeeperUrl); _EL_     client.start(); _EL_     return Optional.of(client); _EL_   } _EL_  else { _EL_     return Optional.empty(); _EL_   } _EL_ } _EL_ ', 'public final static int readRawUntil(final StringBuilder out,final String in,final int start,final char end){ _EL_   int pos=start; _EL_   while (pos < in.length()) { _EL_     final char ch=in.charAt(pos); _EL_     if (ch == end) { _EL_       break; _EL_     } _EL_     out.append(ch); _EL_     pos++; _EL_   } _EL_   return (pos == in.length()) ? -1 : pos; _EL_ } _EL_ ', 'private static void convertToHTML40(AttributeSet from,MutableAttributeSet to){ _EL_   Enumeration keys=from.getAttributeNames(); _EL_   String value=""; _EL_   while (keys.hasMoreElements()) { _EL_     Object key=keys.nextElement(); _EL_     if (key instanceof CSS.Attribute) { _EL_       value=value + " " + key+ "="+ from.getAttribute(key)+ ";"; _EL_     } _EL_  else { _EL_       to.addAttribute(key,from.getAttribute(key)); _EL_     } _EL_   } _EL_   if (value.length() > 0) { _EL_     to.addAttribute(HTML.Attribute.STYLE,value); _EL_   } _EL_ } _EL_ ', 'public synchronized void close() throws IOException { _EL_   if (in == null)   return; _EL_   in.close(); _EL_   in=null; _EL_   buf=null; _EL_ } _EL_ ', 'private static SSLSocketFactory trustAllHosts(HttpsURLConnection connection){ _EL_   SSLSocketFactory oldFactory=connection.getSSLSocketFactory(); _EL_   try { _EL_     SSLContext sc=SSLContext.getInstance("TLS"); _EL_     sc.init(null,trustAllCerts,new java.security.SecureRandom()); _EL_     SSLSocketFactory newFactory=sc.getSocketFactory(); _EL_     connection.setSSLSocketFactory(newFactory); _EL_   } _EL_  catch (  Exception e) { _EL_     LOG.e(LOG_TAG,e.getMessage(),e); _EL_   } _EL_   return oldFactory; _EL_ } _EL_ ', 'public void updateAmount(){ _EL_   setAmt(getTotalAmount()); _EL_ } _EL_ ', 'private void updateLegends(){ _EL_   if (m_span == null) { _EL_     m_span=new JPanel(); _EL_   } _EL_   JPanel padder=new JPanel(); _EL_   JPanel padd2=new JPanel(); _EL_   m_span.setPreferredSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20)); _EL_   m_span.setMaximumSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20)); _EL_   LegendEntry tmp; _EL_   GridBagLayout gb=new GridBagLayout(); _EL_   GridBagLayout gb2=new GridBagLayout(); _EL_   GridBagConstraints constraints=new GridBagConstraints(); _EL_   m_span.removeAll(); _EL_   padder.setLayout(gb); _EL_   m_span.setLayout(gb2); _EL_   constraints.anchor=GridBagConstraints.CENTER; _EL_   constraints.gridx=0; _EL_   constraints.gridy=0; _EL_   constraints.weightx=5; _EL_   constraints.fill=GridBagConstraints.HORIZONTAL; _EL_   constraints.gridwidth=1; _EL_   constraints.gridheight=1; _EL_   constraints.insets=new Insets(0,0,0,0); _EL_   padder.add(m_span,constraints); _EL_   constraints.gridx=0; _EL_   constraints.gridy=1; _EL_   constraints.weightx=5; _EL_   constraints.fill=GridBagConstraints.BOTH; _EL_   constraints.gridwidth=1; _EL_   constraints.gridheight=1; _EL_   constraints.weighty=5; _EL_   constraints.insets=new Insets(0,0,0,0); _EL_   padder.add(padd2,constraints); _EL_   constraints.weighty=0; _EL_   setViewportView(padder); _EL_   constraints.anchor=GridBagConstraints.CENTER; _EL_   constraints.gridx=0; _EL_   constraints.gridy=0; _EL_   constraints.weightx=5; _EL_   constraints.fill=GridBagConstraints.HORIZONTAL; _EL_   constraints.gridwidth=1; _EL_   constraints.gridheight=1; _EL_   constraints.weighty=5; _EL_   constraints.insets=new Insets(2,4,2,4); _EL_   for (int i=0; i < m_plots.size(); i++) { _EL_     tmp=new LegendEntry(m_plots.get(i),i); _EL_     constraints.gridy=i; _EL_     m_span.add(tmp,constraints); _EL_   } _EL_ } _EL_ ', 'public String evaluate(XPathContext xctxt,int context,org.apache.xml.utils.PrefixResolver nsNode) throws javax.xml.transform.TransformerException { _EL_   if (null != m_simpleString) { _EL_     return m_simpleString; _EL_   } _EL_  else   if (null != m_parts) { _EL_     final FastStringBuffer buf=getBuffer(); _EL_     String out=null; _EL_     int n=m_parts.size(); _EL_     try { _EL_       for (int i=0; i < n; i++) { _EL_         AVTPart part=(AVTPart)m_parts.elementAt(i); _EL_         part.evaluate(xctxt,buf,context,nsNode); _EL_       } _EL_       out=buf.toString(); _EL_     } _EL_   finally { _EL_       if (USE_OBJECT_POOL) { _EL_         StringBufferPool.free(buf); _EL_       } _EL_  else { _EL_         buf.setLength(0); _EL_       } _EL_     } _EL_     return out; _EL_   } _EL_  else { _EL_     return ""; _EL_   } _EL_ } _EL_ ', 'public static byte[] readDex(File file) throws IOException { _EL_   return readDex(file.toPath()); _EL_ } _EL_ ', 'public void addUpdateListener(AnimatorUpdateListener listener){ _EL_   if (mUpdateListeners == null) { _EL_     mUpdateListeners=new ArrayList<AnimatorUpdateListener>(); _EL_   } _EL_   mUpdateListeners.add(listener); _EL_ } _EL_ ', 'public void runCommercial(String stream,int length){ _EL_   if (stream == null || stream.isEmpty()) { _EL_     commercialResult(stream,"Can\'t run commercial, not on a channel.",TwitchApi.RequestResult.FAILED); _EL_   } _EL_  else { _EL_     String channel="#" + stream; _EL_     if (isChannelOpen(channel)) { _EL_       g.printLine(channel,"Trying to run " + length + "s commercial.."); _EL_     } _EL_  else { _EL_       g.printLine("Trying to run " + length + "s commercial.. ("+ stream+ ")"); _EL_     } _EL_     api.runCommercial(stream,settings.getString("token"),length); _EL_   } _EL_ } _EL_ ', 'void generateWhile(Tree.WhileStatement that){ _EL_   Tree.WhileClause whileClause=that.getWhileClause(); _EL_   List<VarHolder> vars=specialConditionsAndBlock(whileClause.getConditionList(),whileClause.getBlock(),"while",false); _EL_   for (  VarHolder v : vars) { _EL_     v.forget(); _EL_   } _EL_ } _EL_ ', 'public static double igamma(double a,double x){ _EL_   double coef=(Math.exp(-x) * Math.pow(x,a)) / gamma(a); _EL_   double sum=0.0; _EL_   for (int i=0; i < 100; i++) { _EL_     sum+=(gamma(a) / gamma(a + 1.0 + (double)i)) * Math.pow(x,(double)i); _EL_   } _EL_   return (coef * sum); _EL_ } _EL_ ', 'public void initializeActiveSlotsList(String slots){ _EL_   if (activeSlotsList == null) { _EL_     activeSlotsList=new ArrayList<String>(); _EL_   } _EL_   for (  String s : slots.split(";")) { _EL_     activeSlotsList.add(s); _EL_   } _EL_ } _EL_ ', 'public static String hide(final String key){ _EL_   return isHidden(key) ? key : HIDDEN_PREFIX.concat(key); _EL_ } _EL_ ', 'private synchronized IMqttToken removeMqttToken(Bundle data){ _EL_   String activityToken=data.getString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN); _EL_   if (activityToken != null) { _EL_     int tokenNumber=Integer.parseInt(activityToken); _EL_     IMqttToken token=tokenMap.get(tokenNumber); _EL_     tokenMap.delete(tokenNumber); _EL_     return token; _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static double incompleteBetaFraction2(double a,double b,double x){ _EL_   double xk, pk, pkm1, pkm2, qk, qkm1, qkm2; _EL_   double k1, k2, k3, k4, k5, k6, k7, k8; _EL_   double r, t, ans, z, thresh; _EL_   int n; _EL_   k1=a; _EL_   k2=b - 1.0; _EL_   k3=a; _EL_   k4=a + 1.0; _EL_   k5=1.0; _EL_   k6=a + b; _EL_   k7=a + 1.0; _EL_   ; _EL_   k8=a + 2.0; _EL_   pkm2=0.0; _EL_   qkm2=1.0; _EL_   pkm1=1.0; _EL_   qkm1=1.0; _EL_   z=x / (1.0 - x); _EL_   ans=1.0; _EL_   r=1.0; _EL_   n=0; _EL_   thresh=3.0 * MACHEP; _EL_   do { _EL_     xk=-(z * k1 * k2) / (k3 * k4); _EL_     pk=pkm1 + pkm2 * xk; _EL_     qk=qkm1 + qkm2 * xk; _EL_     pkm2=pkm1; _EL_     pkm1=pk; _EL_     qkm2=qkm1; _EL_     qkm1=qk; _EL_     xk=(z * k5 * k6) / (k7 * k8); _EL_     pk=pkm1 + pkm2 * xk; _EL_     qk=qkm1 + qkm2 * xk; _EL_     pkm2=pkm1; _EL_     pkm1=pk; _EL_     qkm2=qkm1; _EL_     qkm1=qk; _EL_     if (qk != 0) { _EL_       r=pk / qk; _EL_     } _EL_     if (r != 0) { _EL_       t=Math.abs((ans - r) / r); _EL_       ans=r; _EL_     } _EL_  else { _EL_       t=1.0; _EL_     } _EL_     if (t < thresh) { _EL_       return ans; _EL_     } _EL_     k1+=1.0; _EL_     k2-=1.0; _EL_     k3+=2.0; _EL_     k4+=2.0; _EL_     k5+=1.0; _EL_     k6+=1.0; _EL_     k7+=2.0; _EL_     k8+=2.0; _EL_     if ((Math.abs(qk) + Math.abs(pk)) > big) { _EL_       pkm2*=biginv; _EL_       pkm1*=biginv; _EL_       qkm2*=biginv; _EL_       qkm1*=biginv; _EL_     } _EL_     if ((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) { _EL_       pkm2*=big; _EL_       pkm1*=big; _EL_       qkm2*=big; _EL_       qkm1*=big; _EL_     } _EL_   } _EL_  while (++n < 300); _EL_   return ans; _EL_ } _EL_ ', 'private String readUntil(char[] delimiter,boolean returnText) throws IOException, XmlPullParserException { _EL_   int start=position; _EL_   StringBuilder result=null; _EL_   if (returnText && text != null) { _EL_     result=new StringBuilder(); _EL_     result.append(text); _EL_   } _EL_   search:   while (true) { _EL_     if (position + delimiter.length > limit) { _EL_       if (start < position && returnText) { _EL_         if (result == null) { _EL_           result=new StringBuilder(); _EL_         } _EL_         result.append(buffer,start,position - start); _EL_       } _EL_       if (!fillBuffer(delimiter.length)) { _EL_         checkRelaxed(UNEXPECTED_EOF); _EL_         type=COMMENT; _EL_         return null; _EL_       } _EL_       start=position; _EL_     } _EL_     for (int i=0; i < delimiter.length; i++) { _EL_       if (buffer[position + i] != delimiter[i]) { _EL_         position++; _EL_         continue search; _EL_       } _EL_     } _EL_     break; _EL_   } _EL_   int end=position; _EL_   position+=delimiter.length; _EL_   if (!returnText) { _EL_     return null; _EL_   } _EL_  else   if (result == null) { _EL_     return stringPool.get(buffer,start,end - start); _EL_   } _EL_  else { _EL_     result.append(buffer,start,end - start); _EL_     return result.toString(); _EL_   } _EL_ } _EL_ ', 'private Config(){ _EL_   throw new AssertionError("com.sun.jini.config.Config cannot be instantiated"); _EL_ } _EL_ ', 'public boolean isLeaf(){ _EL_   return children == null || children.isEmpty(); _EL_ } _EL_ ', 'public static void drawShadow(final Rectangle2D rect,final Graphics2D g2){ _EL_   Graphics2D g2S=(Graphics2D)g2.create(); _EL_   Rectangle2D shadow=new Rectangle2D.Double(rect.getX() + 5,rect.getY() + ProcessDrawer.HEADER_HEIGHT + 5,rect.getWidth(),rect.getHeight() - ProcessDrawer.HEADER_HEIGHT); _EL_   GeneralPath bottom=new GeneralPath(); _EL_   bottom.moveTo(shadow.getX(),rect.getMaxY()); _EL_   bottom.lineTo(rect.getMaxX(),rect.getMaxY()); _EL_   bottom.lineTo(shadow.getMaxX(),shadow.getMaxY()); _EL_   bottom.lineTo(shadow.getMinX(),shadow.getMaxY()); _EL_   bottom.closePath(); _EL_   g2S.setPaint(new GradientPaint((float)rect.getX(),(float)rect.getMaxY(),Color.gray,(float)rect.getX(),(float)shadow.getMaxY(),TRANSPARENT_GRAY)); _EL_   g2S.fill(bottom); _EL_   GeneralPath right=new GeneralPath(); _EL_   right.moveTo(rect.getMaxX(),shadow.getMinY()); _EL_   right.lineTo(shadow.getMaxX(),shadow.getMinY()); _EL_   right.lineTo(shadow.getMaxX(),shadow.getMaxY()); _EL_   right.lineTo(rect.getMaxX(),rect.getMaxY()); _EL_   right.closePath(); _EL_   g2S.setPaint(new GradientPaint((float)rect.getMaxX(),(float)shadow.getY(),Color.gray,(float)shadow.getMaxX(),(float)shadow.getY(),TRANSPARENT_GRAY)); _EL_   g2S.fill(right); _EL_   g2S.dispose(); _EL_ } _EL_ ', 'private boolean isValid(CharSequence text){ _EL_   for (int i=0; i < text.length(); i++) { _EL_     char c=text.charAt(i); _EL_     boolean valid=c == 0x9 || c == 0xA || c == 0xD || (c >= 0x20 && c <= 0xd7ff) || (c >= 0xe000 && c <= 0xfffd); _EL_     if (!valid) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static void interrupt(final Thread thread){ _EL_   if (thread != null) { _EL_     thread.interrupt(); _EL_   } _EL_ } _EL_ ', 'private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException { _EL_   s.defaultWriteObject(); _EL_   s.writeInt(attrs.size()); _EL_   Enumeration<Attribute> attrEnum=attrs.elements(); _EL_   while (attrEnum.hasMoreElements()) { _EL_     s.writeObject(attrEnum.nextElement()); _EL_   } _EL_ } _EL_ ', 'public static Container east(Component east){ _EL_   return Container.encloseIn(new BorderLayout(),east,BorderLayout.EAST); _EL_ } _EL_ ', 'public void loadLayout(File oFile,boolean newTab){ _EL_   loadLayout(oFile,newTab,false); _EL_ } _EL_ ', 'public void track(File file,Object marker,FileDeleteStrategy deleteStrategy){ _EL_   if (file == null) { _EL_     throw new NullPointerException("The file must not be null"); _EL_   } _EL_   addTracker(file.getPath(),marker,deleteStrategy); _EL_ } _EL_ ', 'public static void CF5(double[] x,double[] f,double[] c,int nx){ _EL_   double sum1=0.0; _EL_   double sum2=0.0; _EL_   double yj; _EL_   for (int j=2; j <= nx; j++) { _EL_     if (j % 2 == 1) { _EL_       yj=x[j - 1] - 0.8 * x[0] * Math.cos(6.0 * PI * x[0] + j * PI / nx); _EL_       sum1+=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0; _EL_     } _EL_  else { _EL_       yj=x[j - 1] - 0.8 * x[0] * Math.sin(6.0 * PI * x[0] + j * PI / nx); _EL_       if (j == 2) { _EL_         sum2+=yj < 1.5 - 0.75 * Math.sqrt(2.0) ? Math.abs(yj) : (0.125 + (yj - 1) * (yj - 1)); _EL_       } _EL_  else { _EL_         sum2+=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0; _EL_       } _EL_     } _EL_   } _EL_   f[0]=x[0] + sum1; _EL_   f[1]=1.0 - x[0] + sum2; _EL_   c[0]=x[1] - 0.8 * x[0] * Math.sin(6.0 * x[0] * PI + 2.0 * PI / nx) - 0.5 * x[0] + 0.25; _EL_ } _EL_ ', 'public static String separatorsToUnix(String path){ _EL_   if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) { _EL_     return path; _EL_   } _EL_   return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR); _EL_ } _EL_ ', 'public boolean hasParameter(String name){ _EL_   return _parameters.hasParameter(name); _EL_ } _EL_ ', 'public static boolean isSQL99NonReservedKeyword(String identifier){ _EL_   if (identifier == null) { _EL_     throw new NullPointerException("The identifier cannot be null"); _EL_   } _EL_   return Arrays.binarySearch(SQL99_NON_RESERVED,identifier.toUpperCase()) >= 0; _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public static <T>void sort(List<T> list,Comparator<? super T> comparator){ _EL_   T[] array=list.toArray((T[])new Object[list.size()]); _EL_   Arrays.sort(array,comparator); _EL_   int i=0; _EL_   ListIterator<T> it=list.listIterator(); _EL_   while (it.hasNext()) { _EL_     it.next(); _EL_     it.set(array[i++]); _EL_   } _EL_ } _EL_ ', '@Override public long handleCommit(final long commitTime){ _EL_   if (error != null)   throw new IndexInconsistentError(error); _EL_   final IRootBlockView view=journal.getRootBlockView(); _EL_   final ByteBuffer rbv=view.asReadOnlyBuffer(); _EL_   final ByteBuffer bb=ByteBuffer.allocate(rbv.capacity()); _EL_   for (int i=0; i < rbv.capacity(); i++) { _EL_     bb.put(rbv.get()); _EL_   } _EL_   bb.flip(); _EL_   return journal.write(bb); _EL_ } _EL_ ', 'public boolean isAppendTaskName(){ _EL_   return appendTaskName; _EL_ } _EL_ ', 'public static Cache.Entry makeRandomCacheEntry(byte[] data,boolean isExpired,boolean needsRefresh){ _EL_   Random random=new Random(); _EL_   Cache.Entry entry=new Cache.Entry(); _EL_   if (data != null) { _EL_     entry.data=data; _EL_   } _EL_  else { _EL_     entry.data=new byte[random.nextInt(1024)]; _EL_   } _EL_   entry.etag=String.valueOf(random.nextLong()); _EL_   entry.lastModified=random.nextLong(); _EL_   entry.ttl=isExpired ? 0 : Long.MAX_VALUE; _EL_   entry.softTtl=needsRefresh ? 0 : Long.MAX_VALUE; _EL_   return entry; _EL_ } _EL_ ', 'public static double max(double[] data){ _EL_   double max=Double.NaN; _EL_   for (int i=0; i < data.length; i++) { _EL_     if (Double.isNaN(data[i]))     continue; _EL_     if (Double.isNaN(max) || data[i] > max)     max=data[i]; _EL_   } _EL_   return max; _EL_ } _EL_ ', 'private static boolean isStartElement(String line){ _EL_   int first=line.lastIndexOf("<"); _EL_   int last=line.lastIndexOf(">"); _EL_   if (last < first) { _EL_     return true; _EL_   } _EL_  else { _EL_     int firstEnd=line.lastIndexOf("</"); _EL_     int lastEnd=line.lastIndexOf("/>"); _EL_     if ((firstEnd != first) && ((lastEnd + 1) != last)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'long readLong() throws IOException { _EL_   return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read())); _EL_ } _EL_ ', '@Override public Instance remove(int index){ _EL_   return m_Instances.remove(index); _EL_ } _EL_ ', 'public ToStringHelper addValue(boolean value){ _EL_   return addHolder(String.valueOf(value)); _EL_ } _EL_ ', 'public static void copyExcept(Object src,Object dst,int oldSize,int removeIndex){ _EL_   if (removeIndex > 0 && oldSize > 0) { _EL_     System.arraycopy(src,0,dst,0,removeIndex); _EL_   } _EL_   if (removeIndex < oldSize) { _EL_     System.arraycopy(src,removeIndex + 1,dst,removeIndex,oldSize - removeIndex - 1); _EL_   } _EL_ } _EL_ ', 'public SiteMonitor(String[] urlList){ _EL_   siteUrlList=urlList; _EL_ } _EL_ ', 'private Set unionIPRange(byte[] ipWithSubmask1,byte[] ipWithSubmask2){ _EL_   Set set=new HashSet(); _EL_   if (Arrays.areEqual(ipWithSubmask1,ipWithSubmask2)) { _EL_     set.add(ipWithSubmask1); _EL_   } _EL_  else { _EL_     set.add(ipWithSubmask1); _EL_     set.add(ipWithSubmask2); _EL_   } _EL_   return set; _EL_ } _EL_ ', 'public Optional<BlazeVertex> vertex(final String vertexId){ _EL_   try (final CloseableIterator<Vertex> it=vertices(vertexId)){ _EL_     final Optional<BlazeVertex> v=it.hasNext() ? Optional.of((BlazeVertex)it.next()) : Optional.empty(); _EL_     if (it.hasNext()) { _EL_       throw new IllegalStateException("Multiple vertices found with id: " + vertexId); _EL_     } _EL_     return v; _EL_   } _EL_  } _EL_ ', 'public static long addAndGet(AtomicLong current,long toAdd){ _EL_   long u, r; _EL_   do { _EL_     r=current.get(); _EL_     if (r == Long.MAX_VALUE) { _EL_       return Long.MAX_VALUE; _EL_     } _EL_     u=addCap(r,toAdd); _EL_   } _EL_  while (!current.compareAndSet(r,u)); _EL_   return u; _EL_ } _EL_ ', 'private void start(HttpServletRequest request,HttpServletResponse response) throws IOException { _EL_   String label=request.getParameter("start"); _EL_   String detail=request.getParameter("detail"); _EL_   MonKey key=getMonKey(label,detail,DEFAULT_UNITS); _EL_   startMon(key); _EL_   PrintWriter out=response.getWriter(); _EL_   out.println(OK + ": start successfully called on - " + label); _EL_ } _EL_ ', 'public double norm(){ _EL_   double sum=0; _EL_   for (int i=0; i < components.length; i++)   sum+=components[i] * components[i]; _EL_   return Math.sqrt(sum); _EL_ } _EL_ ', 'public static double P_Harmonic(int Y[][],int Ypred[][]){ _EL_   int allMissings=0; _EL_   int N=Y.length; _EL_   double loss=0.0; _EL_   for (int i=0; i < N; i++) { _EL_     if (allMissing(Y[i])) { _EL_       allMissings++; _EL_       continue; _EL_     } _EL_     double curLoss=P_Harmonic(Y[i],Ypred[i]); _EL_     if (Double.isNaN(curLoss)) { _EL_       allMissings++; _EL_       continue; _EL_     } _EL_     loss+=curLoss; _EL_   } _EL_   return loss / (double)(N - allMissings); _EL_ } _EL_ ', 'public void writeEntry(CCacheOutputStream cos) throws IOException { _EL_   cos.write16(adType); _EL_   cos.write32(adData.length); _EL_   cos.write(adData,0,adData.length); _EL_ } _EL_ ', 'public CloseableAnimatedBitmap(List<Bitmap> bitmaps,List<Integer> durations,ResourceReleaser<Bitmap> resourceReleaser){ _EL_   Preconditions.checkNotNull(bitmaps); _EL_   Preconditions.checkState(bitmaps.size() >= 1,"Need at least 1 frame!"); _EL_   mBitmaps=new ArrayList<>(); _EL_   mBitmapReferences=new ArrayList<>(); _EL_   for (  Bitmap bitmap : bitmaps) { _EL_     mBitmapReferences.add(CloseableReference.of(bitmap,resourceReleaser)); _EL_     mBitmaps.add(bitmap); _EL_   } _EL_   mDurations=Preconditions.checkNotNull(durations); _EL_   Preconditions.checkState(mDurations.size() == mBitmaps.size(),"Arrays length mismatch!"); _EL_ } _EL_ ', 'public static String readLabelFile(String entrySeparator,boolean ensureInitialBoundary,String trfname) throws IOException { _EL_   BufferedReader lab=new BufferedReader(new FileReader(trfname)); _EL_   try { _EL_     XwavesLabelfileReader xlds=new XwavesLabelfileReader(trfname); _EL_     String result=StringUtils.join(entrySeparator,xlds.getLabelSymbols()); _EL_     if (ensureInitialBoundary && result.charAt(0) != \'_\') { _EL_       result="_" + entrySeparator + result; _EL_     } _EL_     return result; _EL_   } _EL_   finally { _EL_     lab.close(); _EL_   } _EL_ } _EL_ ', 'private void parse() throws SAXException { _EL_   XStream xstream=(XStream)properties.get(CONFIGURED_XSTREAM_PROPERTY); _EL_   if (xstream == null) { _EL_     xstream=new XStream(); _EL_   } _EL_   final List<?> source=(List<?>)properties.get(SOURCE_OBJECT_LIST_PROPERTY); _EL_   if (source == null || source.isEmpty()) { _EL_     throw new SAXException("Missing or empty source object list. Setting property \\"" + SOURCE_OBJECT_LIST_PROPERTY + "\\" is mandatory"); _EL_   } _EL_   try { _EL_     startDocument(true); _EL_     for (    final Object name : source) { _EL_       xstream.marshal(name,this); _EL_     } _EL_     endDocument(true); _EL_   } _EL_  catch (  final StreamException e) { _EL_     if (e.getCause() instanceof SAXException) { _EL_       throw (SAXException)e.getCause(); _EL_     } _EL_  else { _EL_       throw new SAXException(e); _EL_     } _EL_   } _EL_ } _EL_ ', 'private SortedMap<MessageUid,MaildirMessageName> truncateMap(Map<MessageUid,MaildirMessageName> map,MessageUid from,MessageUid to){ _EL_   TreeMap<MessageUid,MaildirMessageName> sortedMap; _EL_   if (map instanceof TreeMap<?,?>)   sortedMap=(TreeMap<MessageUid,MaildirMessageName>)map; _EL_  else   sortedMap=new TreeMap<MessageUid,MaildirMessageName>(map); _EL_   if (to != null)   return sortedMap.subMap(from,to.next()); _EL_   return sortedMap.tailMap(from); _EL_ } _EL_ ', 'private static boolean compareParam(String jdiffParam,Type reflectionParamType){ _EL_   if (jdiffParam == null) { _EL_     return false; _EL_   } _EL_   String reflectionParam=typeToString(reflectionParamType); _EL_   if (jdiffParam.equals(reflectionParam)) { _EL_     return true; _EL_   } _EL_   int jdiffParamEndOffset=jdiffParam.indexOf("..."); _EL_   int reflectionParamEndOffset=reflectionParam.indexOf("[]"); _EL_   if (jdiffParamEndOffset != -1 && reflectionParamEndOffset != -1) { _EL_     jdiffParam=jdiffParam.substring(0,jdiffParamEndOffset); _EL_     reflectionParam=reflectionParam.substring(0,reflectionParamEndOffset); _EL_     return jdiffParam.equals(reflectionParam); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static void randomNumber(int[] num,int n){ _EL_   for (int j=0; j < n; j++) { _EL_     num[j]=(int)(Math.random() * 10); _EL_   } _EL_ } _EL_ ', 'public void writeTo(OutputStream out) throws IOException { _EL_   ByteString[] cachedFlushBuffers; _EL_   byte[] cachedBuffer; _EL_   int cachedBufferPos; _EL_ synchronized (this) { _EL_     cachedFlushBuffers=flushedBuffers.toArray(new ByteString[flushedBuffers.size()]); _EL_     cachedBuffer=buffer; _EL_     cachedBufferPos=bufferPos; _EL_   } _EL_   for (  ByteString byteString : cachedFlushBuffers) { _EL_     byteString.writeTo(out); _EL_   } _EL_   out.write(copyArray(cachedBuffer,cachedBufferPos)); _EL_ } _EL_ ', 'public Iterator<JsonElement> iterator(){ _EL_   return elements.iterator(); _EL_ } _EL_ ', 'protected void assertFuncEquals(final String... inputs) throws Exception { _EL_   SolrQueryRequest req=req(); _EL_   try { _EL_     assertFuncEquals(req,inputs); _EL_   } _EL_   finally { _EL_     req.close(); _EL_   } _EL_ } _EL_ ', 'private void handleStartElement(XMLStreamReader parser,Set<Node> childrenFound,Handler handler,Map<String,Object> values,Stack<Set<String>> stack,boolean recordStarted) throws IOException, XMLStreamException { _EL_   Node n=getMatchingNode(parser,childNodes); _EL_   Map<String,Object> decends=new HashMap<>(); _EL_   if (n != null) { _EL_     childrenFound.add(n); _EL_     n.parse(parser,handler,values,stack,recordStarted); _EL_     return; _EL_   } _EL_   Node dn=this; _EL_   do { _EL_     if (dn.wildCardNodes != null) { _EL_       n=getMatchingNode(parser,dn.wildCardNodes); _EL_       if (n != null) { _EL_         childrenFound.add(n); _EL_         n.parse(parser,handler,values,stack,recordStarted); _EL_         break; _EL_       } _EL_       for (      Node nn : dn.wildCardNodes)       decends.put(nn.name,nn); _EL_     } _EL_     dn=dn.wildAncestor; _EL_   } _EL_  while (dn != null); _EL_   if (n == null) { _EL_     int count=1; _EL_     while (count != 0) { _EL_       int token=parser.next(); _EL_       if (token == START_ELEMENT) { _EL_         Node nn=(Node)decends.get(parser.getLocalName()); _EL_         if (nn != null) { _EL_           childrenFound.add(nn); _EL_           nn.parse(parser,handler,values,stack,recordStarted); _EL_         } _EL_  else         count++; _EL_       } _EL_  else       if (token == END_ELEMENT)       count--; _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean equivalent(IMFMarkerType other){ _EL_   if (other == null) { _EL_     return false; _EL_   } _EL_   boolean result=true; _EL_   result&=offset.equals(other.getOffset()); _EL_   result&=label.equivalent(other.getLabel()); _EL_   return result; _EL_ } _EL_ ', 'public static Discretization discretize(double[] _data,double[] cutoffs,String variableName,List<String> categories){ _EL_   if (cutoffs == null) { _EL_     throw new NullPointerException(); _EL_   } _EL_   for (int i=0; i < cutoffs.length - 1; i++) { _EL_     if (!(cutoffs[i] <= cutoffs[i + 1])) { _EL_       throw new NullPointerException("Cutoffs must be in nondecreasing order."); _EL_     } _EL_   } _EL_   if (variableName == null) { _EL_     throw new NullPointerException(); _EL_   } _EL_   int numCategories=cutoffs.length + 1; _EL_   if (categories != null && categories.size() != numCategories) { _EL_     throw new IllegalArgumentException("If specified, the list of " + "categories names must be one longer than the length of " + "the cutoffs array."); _EL_   } _EL_   DiscreteVariable variable; _EL_   if (categories == null) { _EL_     variable=new DiscreteVariable(variableName,numCategories); _EL_   } _EL_  else { _EL_     variable=new DiscreteVariable(variableName,categories); _EL_   } _EL_   int[] discreteData=new int[_data.length]; _EL_   loop:   for (int i=0; i < _data.length; i++) { _EL_     if (Double.isNaN(_data[i])) { _EL_       discreteData[i]=DiscreteVariable.MISSING_VALUE; _EL_       continue; _EL_     } _EL_     for (int j=0; j < cutoffs.length; j++) { _EL_       if (_data[i] > Double.NEGATIVE_INFINITY && _data[i] < Double.POSITIVE_INFINITY && _data[i] < cutoffs[j]) { _EL_         discreteData[i]=j; _EL_         continue loop; _EL_       } _EL_     } _EL_     discreteData[i]=cutoffs.length; _EL_   } _EL_   return new Discretization(variable,discreteData); _EL_ } _EL_ ', 'public static ArrayList<Long> loadWorkspaceScreensDb(Context context){ _EL_   final ContentResolver contentResolver=context.getContentResolver(); _EL_   final Uri screensUri=LauncherSettings.WorkspaceScreens.CONTENT_URI; _EL_   final Cursor sc=contentResolver.query(screensUri,null,null,null,LauncherSettings.WorkspaceScreens.SCREEN_RANK); _EL_   ArrayList<Long> screenIds=new ArrayList<Long>(); _EL_   try { _EL_     final int idIndex=sc.getColumnIndexOrThrow(LauncherSettings.WorkspaceScreens._ID); _EL_     while (sc.moveToNext()) { _EL_       try { _EL_         screenIds.add(sc.getLong(idIndex)); _EL_       } _EL_  catch (      Exception e) { _EL_         Launcher.addDumpLog(TAG,"Desktop items loading interrupted" + " - invalid screens: " + e,true); _EL_       } _EL_     } _EL_   } _EL_   finally { _EL_     if (sc != null) { _EL_       sc.close(); _EL_     } _EL_   } _EL_   return screenIds; _EL_ } _EL_ ', 'public Matrix4 multiplyByScale(double xScale,double yScale,double zScale){ _EL_   double[] m=this.m; _EL_   m[0]*=xScale; _EL_   m[4]*=xScale; _EL_   m[8]*=xScale; _EL_   m[12]*=xScale; _EL_   m[1]*=yScale; _EL_   m[5]*=yScale; _EL_   m[9]*=yScale; _EL_   m[13]*=yScale; _EL_   m[2]*=zScale; _EL_   m[6]*=zScale; _EL_   m[10]*=zScale; _EL_   m[14]*=zScale; _EL_   return this; _EL_ } _EL_ ', 'public void changeState(){ _EL_   linked=!linked; _EL_   link=linked ? linkedImIc.getImage() : unlinkedImIc.getImage(); _EL_   repaint(); _EL_ } _EL_ ', 'public static Geometry bufferBySegments(Geometry g,double distance){ _EL_   Geometry segs=LineHandlingFunctions.extractSegments(g); _EL_   double posDist=Math.abs(distance); _EL_   Geometry segBuf=bufferByComponents(segs,posDist); _EL_   if (distance < 0.0)   return g.difference(segBuf); _EL_   return g.union(segBuf); _EL_ } _EL_ ', 'public void recordEndTime(){ _EL_   int msDiff=(int)(System.currentTimeMillis() - _currentRequestStartTime.get()); _EL_   _log.info("Request response time: {} ms",msDiff); _EL_   updateOrResetReqRspAvgLstHr(updateOrResetReqRspAvgLstMin(msDiff,false),false); _EL_   updateMinMaxReqRspMs(msDiff); _EL_   if (msDiff >= SUSPISCIOUS_RSP_TIME_MS) { _EL_     _alertLog.warn(MessageFormat.format("Request took an unusually long time to complete: {0}ms",msDiff)); _EL_   } _EL_   _currentRequestStartTime.remove(); _EL_ } _EL_ ', 'private boolean isAccessibleUserToKibana(Set<String> filters){ _EL_   if (filters.contains("/.kibana")) { _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public boolean clear(){ _EL_   try { _EL_     list.clear(); _EL_     fireTableDataChanged(); _EL_   } _EL_  catch (  Exception e) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static final int typeIndex(Class type){ _EL_   Class[] list=primitiveTypes; _EL_   int n=list.length; _EL_   for (int i=0; i < n; i++)   if (list[i] == type)   return i; _EL_   throw new RuntimeException("bad type:" + type.getName()); _EL_ } _EL_ ', 'public String parameterToString(Object param){ _EL_   if (param == null) { _EL_     return ""; _EL_   } _EL_  else   if (param instanceof Date) { _EL_     return formatDate((Date)param); _EL_   } _EL_  else   if (param instanceof Collection) { _EL_     StringBuilder b=new StringBuilder(); _EL_     for (    Object o : (Collection)param) { _EL_       if (b.length() > 0) { _EL_         b.append(","); _EL_       } _EL_       b.append(String.valueOf(o)); _EL_     } _EL_     return b.toString(); _EL_   } _EL_  else { _EL_     return String.valueOf(param); _EL_   } _EL_ } _EL_ ', 'private final String[] _expandSeenNames(String[] oldShared){ _EL_   int len=oldShared.length; _EL_   String[] newShared; _EL_   if (len == 0) { _EL_     newShared=_smileBufferRecycler.allocSeenNamesBuffer(); _EL_     if (newShared == null) { _EL_       newShared=new String[SmileBufferRecycler.DEFAULT_NAME_BUFFER_LENGTH]; _EL_     } _EL_   } _EL_  else   if (len == SmileConstants.MAX_SHARED_NAMES) { _EL_     newShared=oldShared; _EL_     _seenNameCount=0; _EL_   } _EL_  else { _EL_     int newSize=(len == SmileBufferRecycler.DEFAULT_STRING_VALUE_BUFFER_LENGTH) ? 256 : SmileConstants.MAX_SHARED_NAMES; _EL_     newShared=new String[newSize]; _EL_     System.arraycopy(oldShared,0,newShared,0,oldShared.length); _EL_   } _EL_   return newShared; _EL_ } _EL_ ', 'public void addRequestProperty(String key,String value){ _EL_   if (connected)   throw new IllegalStateException("Already connected"); _EL_   if (key == null)   throw new NullPointerException("key is null"); _EL_   if (requests == null)   requests=new MessageHeader(); _EL_   requests.add(key,value); _EL_ } _EL_ ', 'ServerMember update(Address clientAddress,Instant time){ _EL_   if (clientAddress != null) { _EL_     this.clientAddress=clientAddress; _EL_     if (time.isAfter(updated)) { _EL_       this.updated=Assert.notNull(time,"time"); _EL_     } _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public Runnable decrementAsRunnable(){ _EL_   return mDecrementRunnable; _EL_ } _EL_ ', '@Override public void actionPerformed(ActionEvent event){ _EL_   String command=event.getActionCommand(); _EL_   if (command.equals("BackgroundPaint")) { _EL_     attemptModifyBackgroundPaint(); _EL_   } _EL_ } _EL_ ', 'public byte[] serializeToBuffer(Object o) throws IOException { _EL_   ByteArrayOutputStream bufOut=new ByteArrayOutputStream(); _EL_   try { _EL_     serialize(bufOut,o); _EL_     bufOut.flush(); _EL_     return bufOut.toByteArray(); _EL_   } _EL_   finally { _EL_     bufOut.close(); _EL_   } _EL_ } _EL_ ', 'ModulePointer resolve(String modName){ _EL_   return (ModulePointer)context.get(modName); _EL_ } _EL_ ', 'protected ConnectionStateTLS(SSLSessionImpl session){ _EL_   try { _EL_     CipherSuite cipherSuite=session.cipherSuite; _EL_     hash_size=cipherSuite.getMACLength(); _EL_     boolean is_exportabe=cipherSuite.isExportable(); _EL_     int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial; _EL_     int iv_size=cipherSuite.ivSize; _EL_     block_size=cipherSuite.getBlockSize(); _EL_     String algName=cipherSuite.getBulkEncryptionAlgorithm(); _EL_     String macName=cipherSuite.getHmacName(); _EL_     if (logger != null) { _EL_       logger.println("ConnectionStateTLS.create:"); _EL_       logger.println("  cipher suite name: " + cipherSuite.getName()); _EL_       logger.println("  encryption alg name: " + algName); _EL_       logger.println("  mac alg name: " + macName); _EL_       logger.println("  hash size: " + hash_size); _EL_       logger.println("  block size: " + block_size); _EL_       logger.println("  IV size:" + iv_size); _EL_       logger.println("  key size: " + key_size); _EL_     } _EL_     byte[] clientRandom=session.clientRandom; _EL_     byte[] serverRandom=session.serverRandom; _EL_     byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size]; _EL_     byte[] seed=new byte[clientRandom.length + serverRandom.length]; _EL_     System.arraycopy(serverRandom,0,seed,0,serverRandom.length); _EL_     System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length); _EL_     PRF.computePRF(key_block,session.master_secret,KEY_EXPANSION_LABEL,seed); _EL_     byte[] client_mac_secret=new byte[hash_size]; _EL_     byte[] server_mac_secret=new byte[hash_size]; _EL_     byte[] client_key=new byte[key_size]; _EL_     byte[] server_key=new byte[key_size]; _EL_     boolean is_client=!session.isServer; _EL_     System.arraycopy(key_block,0,client_mac_secret,0,hash_size); _EL_     System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size); _EL_     System.arraycopy(key_block,2 * hash_size,client_key,0,key_size); _EL_     System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size); _EL_     IvParameterSpec clientIV=null; _EL_     IvParameterSpec serverIV=null; _EL_     if (is_exportabe) { _EL_       System.arraycopy(clientRandom,0,seed,0,clientRandom.length); _EL_       System.arraycopy(serverRandom,0,seed,clientRandom.length,serverRandom.length); _EL_       byte[] final_client_key=new byte[cipherSuite.expandedKeyMaterial]; _EL_       byte[] final_server_key=new byte[cipherSuite.expandedKeyMaterial]; _EL_       PRF.computePRF(final_client_key,client_key,CLIENT_WRITE_KEY_LABEL,seed); _EL_       PRF.computePRF(final_server_key,server_key,SERVER_WRITE_KEY_LABEL,seed); _EL_       client_key=final_client_key; _EL_       server_key=final_server_key; _EL_       if (block_size != 0) { _EL_         byte[] iv_block=new byte[2 * iv_size]; _EL_         PRF.computePRF(iv_block,null,IV_BLOCK_LABEL,seed); _EL_         clientIV=new IvParameterSpec(iv_block,0,iv_size); _EL_         serverIV=new IvParameterSpec(iv_block,iv_size,iv_size); _EL_       } _EL_     } _EL_  else     if (block_size != 0) { _EL_       clientIV=new IvParameterSpec(key_block,2 * (hash_size + key_size),iv_size); _EL_       serverIV=new IvParameterSpec(key_block,2 * (hash_size + key_size) + iv_size,iv_size); _EL_     } _EL_     if (logger != null) { _EL_       logger.println("is exportable: " + is_exportabe); _EL_       logger.println("master_secret"); _EL_       logger.print(session.master_secret); _EL_       logger.println("client_random"); _EL_       logger.print(clientRandom); _EL_       logger.println("server_random"); _EL_       logger.print(serverRandom); _EL_       logger.println("client_mac_secret"); _EL_       logger.print(client_mac_secret); _EL_       logger.println("server_mac_secret"); _EL_       logger.print(server_mac_secret); _EL_       logger.println("client_key"); _EL_       logger.print(client_key); _EL_       logger.println("server_key"); _EL_       logger.print(server_key); _EL_       if (clientIV == null) { _EL_         logger.println("no IV."); _EL_       } _EL_  else { _EL_         logger.println("client_iv"); _EL_         logger.print(clientIV.getIV()); _EL_         logger.println("server_iv"); _EL_         logger.print(serverIV.getIV()); _EL_       } _EL_     } _EL_     if (algName == null) { _EL_       encCipher=new NullCipher(); _EL_       decCipher=new NullCipher(); _EL_     } _EL_  else { _EL_       encCipher=Cipher.getInstance(algName); _EL_       decCipher=Cipher.getInstance(algName); _EL_       if (is_client) { _EL_         encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,algName),clientIV); _EL_         decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,algName),serverIV); _EL_       } _EL_  else { _EL_         encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,algName),serverIV); _EL_         decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,algName),clientIV); _EL_       } _EL_     } _EL_     encMac=Mac.getInstance(macName); _EL_     decMac=Mac.getInstance(macName); _EL_     if (is_client) { _EL_       encMac.init(new SecretKeySpec(client_mac_secret,macName)); _EL_       decMac.init(new SecretKeySpec(server_mac_secret,macName)); _EL_     } _EL_  else { _EL_       encMac.init(new SecretKeySpec(server_mac_secret,macName)); _EL_       decMac.init(new SecretKeySpec(client_mac_secret,macName)); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_     throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during computation of security parameters")); _EL_   } _EL_ } _EL_ ', 'public void addCertStore(CertStore store){ _EL_   if (store == null) { _EL_     return; _EL_   } _EL_   if (certStores == null) { _EL_     certStores=new ArrayList<CertStore>(); _EL_   } _EL_   certStores.add(store); _EL_ } _EL_ ', 'public NarClassLoader(final File narWorkingDirectory) throws ClassNotFoundException, IOException { _EL_   super(new URL[0]); _EL_   this.narWorkingDirectory=narWorkingDirectory; _EL_   updateClasspath(narWorkingDirectory); _EL_ } _EL_ ', 'public Block block(){ _EL_   return block; _EL_ } _EL_ ', 'public static TypeBinding[] substitute(Substitution substitution,TypeBinding[] originalTypes){ _EL_   if (originalTypes == null)   return null; _EL_   TypeBinding[] substitutedTypes=originalTypes; _EL_   for (int i=0, length=originalTypes.length; i < length; i++) { _EL_     TypeBinding originalType=originalTypes[i]; _EL_     TypeBinding substitutedParameter=substitute(substitution,originalType); _EL_     if (substitutedParameter != originalType) { _EL_       if (substitutedTypes == originalTypes) { _EL_         System.arraycopy(originalTypes,0,substitutedTypes=new TypeBinding[length],0,i); _EL_       } _EL_       substitutedTypes[i]=substitutedParameter; _EL_     } _EL_  else     if (substitutedTypes != originalTypes) { _EL_       substitutedTypes[i]=originalType; _EL_     } _EL_   } _EL_   return substitutedTypes; _EL_ } _EL_ ', 'private boolean checkIfScrolling(float[] lastPoints,MotionEvent ev){ _EL_   float[] point=new float[2]; _EL_   point[0]=ev.getRawX(); _EL_   point[1]=ev.getRawY(); _EL_   float delta=getDistance(lastPoints,point); _EL_   return Math.abs(delta) > mSlop; _EL_ } _EL_ ', 'public Edge(S src,Symbol symbol,S dest){ _EL_   this.src=src; _EL_   this.symbol=symbol; _EL_   this.dest=dest; _EL_   this.srcItem=src.getFirstItem(); _EL_   this.hashCache=calcHashCode(); _EL_ } _EL_ ', 'public void push(final Type value){ _EL_   if (value == null) { _EL_     mv.visitInsn(Opcodes.ACONST_NULL); _EL_   } _EL_  else { _EL_ switch (value.getSort()) { _EL_ case Type.BOOLEAN: _EL_       mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Boolean","TYPE",CLDESC); _EL_     break; _EL_ case Type.CHAR: _EL_   mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Character","TYPE",CLDESC); _EL_ break; _EL_ case Type.BYTE: _EL_ mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Byte","TYPE",CLDESC); _EL_ break; _EL_ case Type.SHORT: _EL_ mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Short","TYPE",CLDESC); _EL_ break; _EL_ case Type.INT: _EL_ mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Integer","TYPE",CLDESC); _EL_ break; _EL_ case Type.FLOAT: _EL_ mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Float","TYPE",CLDESC); _EL_ break; _EL_ case Type.LONG: _EL_ mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Long","TYPE",CLDESC); _EL_ break; _EL_ case Type.DOUBLE: _EL_ mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Double","TYPE",CLDESC); _EL_ break; _EL_ default : _EL_ mv.visitLdcInsn(value); _EL_ } _EL_ } _EL_ } _EL_ ', 'public final boolean isSupported(String feature,String version){ _EL_   return implementation.hasFeature(feature,version); _EL_ } _EL_ ', 'public void clear(){ _EL_   fullyLock(); _EL_   try { _EL_     for (Node<E> p, h=head; (p=h.next) != null; h=p) { _EL_       h.next=h; _EL_       p.item=null; _EL_     } _EL_     head=last; _EL_     if (count.getAndSet(0) == capacity)     notFull.signal(); _EL_   } _EL_   finally { _EL_     fullyUnlock(); _EL_   } _EL_ } _EL_ ', "private static String readQuotedDescriptor(final SubstringReader reader,final boolean allowCompatChars) throws DecodeException { _EL_   int length=0; _EL_   reader.skipWhitespaces(); _EL_   try { _EL_     char c=reader.read(); _EL_     if (c != '\\'') { _EL_       throw DecodeException.error(ERR_ATTR_SYNTAX_EXPECTED_QUOTE_AT_POS1.get(reader.pos() - 1,c)); _EL_     } _EL_     reader.mark(); _EL_     while ((c=reader.read()) != '\\'') { _EL_       if (length == 0 && !isAlpha(c)) { _EL_         throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1)); _EL_       } _EL_       if (!isKeyChar(c,allowCompatChars)) { _EL_         throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1)); _EL_       } _EL_       length++; _EL_     } _EL_     reader.reset(); _EL_     final String descr=reader.read(length); _EL_     reader.read(); _EL_     return descr; _EL_   } _EL_  catch (  final StringIndexOutOfBoundsException e) { _EL_     throw DecodeException.error(ERR_ATTR_SYNTAX_TRUNCATED_VALUE1.get()); _EL_   } _EL_ } _EL_ ", 'public String toCSV(){ _EL_   StringBuilder builder=new StringBuilder(); _EL_   builder.append(",,Predicted Class,\\n"); _EL_   builder.append(",,"); _EL_   for (  T predicted : classes) { _EL_     builder.append(String.format("%s,",predicted)); _EL_   } _EL_   builder.append("Total\\n"); _EL_   String firstColumnLabel="Actual Class,"; _EL_   for (  T actual : classes) { _EL_     builder.append(firstColumnLabel); _EL_     firstColumnLabel=","; _EL_     builder.append(String.format("%s,",actual)); _EL_     for (    T predicted : classes) { _EL_       builder.append(getCount(actual,predicted)); _EL_       builder.append(","); _EL_     } _EL_     builder.append(getActualTotal(actual)); _EL_     builder.append("\\n"); _EL_   } _EL_   builder.append(",Total,"); _EL_   for (  T predicted : classes) { _EL_     builder.append(getPredictedTotal(predicted)); _EL_     builder.append(","); _EL_   } _EL_   builder.append("\\n"); _EL_   return builder.toString(); _EL_ } _EL_ ', 'public Object assignIdValue(Object data,Number val,ObjectCache objectCache) throws SQLException { _EL_   Object idVal=dataPersister.convertIdNumber(val); _EL_   if (idVal == null) { _EL_     throw new SQLException("Invalid class " + dataPersister + " for sequence-id "+ this); _EL_   } _EL_  else { _EL_     assignField(data,idVal,false,objectCache); _EL_     return idVal; _EL_   } _EL_ } _EL_ ', 'public static void writeSwappedInteger(OutputStream output,int value) throws IOException { _EL_   output.write((byte)((value >> 0) & 0xff)); _EL_   output.write((byte)((value >> 8) & 0xff)); _EL_   output.write((byte)((value >> 16) & 0xff)); _EL_   output.write((byte)((value >> 24) & 0xff)); _EL_ } _EL_ ', 'public final boolean isOpen(){ _EL_   return closed.get() == false; _EL_ } _EL_ ', 'public static String soapToString(SOAPElement element){ _EL_   return domToString(element.getOwnerDocument()); _EL_ } _EL_ ', '@Override public void close() throws IOException { _EL_   try { _EL_     out.close(); _EL_   } _EL_   finally { _EL_     lockFile.delete(); _EL_   } _EL_ } _EL_ ', 'public static void init(Context context){ _EL_   if (cameraManager == null) { _EL_     cameraManager=new CameraManager(context); _EL_   } _EL_ } _EL_ ', '@Override public boolean equals(Object x,Object y) throws HibernateException { _EL_   if (x == null) { _EL_     return y == null; _EL_   } _EL_   return x.equals(y); _EL_ } _EL_ ', '@Override public final void writeBoolean(boolean v) throws IOException { _EL_   dis.writeBoolean(v); _EL_ } _EL_ ', 'public void train(Set<String> sFileNames){ _EL_   Iterator<String> iFile=sFileNames.iterator(); _EL_   while (iFile.hasNext()) { _EL_     String sText=utils.loadFileToString(iFile.next()); _EL_     train(sText); _EL_   } _EL_ } _EL_ ', 'public PrintfFormat(String fmtArg) throws IllegalArgumentException { _EL_   this(Locale.getDefault(),fmtArg); _EL_ } _EL_ ', 'public static void writeFixInt32(final OutputStream output,final int val) throws IOException { _EL_   output.write((val >>> 24) & 0xFF); _EL_   output.write((val >>> 16) & 0xFF); _EL_   output.write((val >>> 8) & 0xFF); _EL_   output.write(val & 0xFF); _EL_ } _EL_ ', 'public static void queueCubeLoad(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int x,int y,int z,Consumer<Cube> runnable){ _EL_   QueuedCube key=new QueuedCube(x,y,z,world); _EL_   AsyncCubeIOProvider task=cubeTasks.get(key); _EL_   if (task == null) { _EL_     task=new AsyncCubeIOProvider(key,loader); _EL_     task.addCallback(runnable); _EL_     cubeTasks.put(key,task); _EL_     pool.execute(task); _EL_   } _EL_  else { _EL_     task.addCallback(runnable); _EL_   } _EL_   Column loadedColumn; _EL_   if ((loadedColumn=cache.getLoadedColumn(x,z)) == null) { _EL_     cache.asyncGetColumn(x,z,IProviderExtras.Requirement.LIGHT,null); _EL_   } _EL_  else { _EL_     task.setColumn(loadedColumn); _EL_   } _EL_ } _EL_ ', 'private long loadLargestMessageId(){ _EL_   ReleaseMessage releaseMessage=releaseMessageRepository.findTopByOrderByIdDesc(); _EL_   return releaseMessage == null ? 0 : releaseMessage.getId(); _EL_ } _EL_ ', 'public void removeChangeListener(ChangeListener l){ _EL_   if (listeners == null)   return; _EL_   listeners.remove(l); _EL_ } _EL_ ', 'public static RequestLog dump(){ _EL_   RequestLog current=RLOG.get(); _EL_   RequestLog copy=new RequestLog(current); _EL_   current.clear(); _EL_   RLOG.remove(); _EL_   return copy; _EL_ } _EL_ ', 'protected DefaultListModel stringToModel(String s){ _EL_   DefaultListModel result; _EL_   String tmpStr; _EL_   int i; _EL_   boolean quote; _EL_   String[] find; _EL_   String[] replace; _EL_   int index; _EL_   result=new DefaultListModel(); _EL_   find=new String[]{"\\"\\"","\\\\n","\\\\r","\\\\t"}; _EL_   replace=new String[]{"\\"","\\n","\\r","\\t"}; _EL_   for (i=0; i < find.length; i++) { _EL_     tmpStr=""; _EL_     while (s.length() > 0) { _EL_       index=s.indexOf(find[i]); _EL_       if (index > -1) { _EL_         tmpStr+=s.substring(0,index) + replace[i]; _EL_         s=s.substring(index + 2); _EL_       } _EL_  else { _EL_         tmpStr+=s; _EL_         s=""; _EL_       } _EL_     } _EL_     s=tmpStr; _EL_   } _EL_   quote=false; _EL_   tmpStr=""; _EL_   for (i=0; i < s.length(); i++) { _EL_     if (s.charAt(i) == \'"\') { _EL_       quote=!quote; _EL_       tmpStr+="" + s.charAt(i); _EL_     } _EL_  else     if (s.charAt(i) == \',\') { _EL_       if (quote) { _EL_         tmpStr+="" + s.charAt(i); _EL_       } _EL_  else { _EL_         if (tmpStr.startsWith("\\"")) { _EL_           tmpStr=tmpStr.substring(1,tmpStr.length() - 1); _EL_         } _EL_         result.addElement(tmpStr); _EL_         tmpStr=""; _EL_       } _EL_     } _EL_  else { _EL_       tmpStr+="" + s.charAt(i); _EL_     } _EL_   } _EL_   if (!tmpStr.equals("")) { _EL_     if (tmpStr.startsWith("\\"")) { _EL_       tmpStr=tmpStr.substring(1,tmpStr.length() - 1); _EL_     } _EL_     result.addElement(tmpStr); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public void addAll(Collection<? extends T> collection){ _EL_   if (mEventDelegate != null)   mEventDelegate.addData(collection == null ? 0 : collection.size()); _EL_   if (collection != null && collection.size() != 0) { _EL_ synchronized (mLock) { _EL_       mObjects.addAll(collection); _EL_     } _EL_   } _EL_   if (mNotifyOnChange)   notifyDataSetChanged(); _EL_ } _EL_ ', 'public static void resetCurrentFileList(String logName){ _EL_   currentFileList.remove(PREFIX + logName); _EL_ } _EL_ ', 'void initComposeState(){ _EL_   m_composeState=new ComposeState(); _EL_ } _EL_ ', 'public static Date parseDate(String dateValue) throws DateParseException { _EL_   return parseDate(dateValue,null,null); _EL_ } _EL_ ', 'public RegexFileFilter(String pattern,IOCase caseSensitivity){ _EL_   if (pattern == null) { _EL_     throw new IllegalArgumentException("Pattern is missing"); _EL_   } _EL_   int flags=0; _EL_   if (caseSensitivity != null && !caseSensitivity.isCaseSensitive()) { _EL_     flags=Pattern.CASE_INSENSITIVE; _EL_   } _EL_   this.pattern=Pattern.compile(pattern,flags); _EL_ } _EL_ ', 'public static String urlEncode(@Nullable String s){ _EL_   if (s == null) { _EL_     return ""; _EL_   } _EL_   try { _EL_     return URLEncoder.encode(s,"UTF-8"); _EL_   } _EL_  catch (  UnsupportedEncodingException e) { _EL_     throw new AssertionError("UTF-8 should be supported in every JVM"); _EL_   } _EL_ } _EL_ ', 'public Currency read(String symbol){ _EL_   return Currency.getInstance(symbol); _EL_ } _EL_ ', 'public static float parseFloat(String s){ _EL_   if (POSITIVE_INFINITY.equals(s)) { _EL_     return Float.POSITIVE_INFINITY; _EL_   } _EL_  else   if (NEGATIVE_INFINITY.equals(s)) { _EL_     return Float.NEGATIVE_INFINITY; _EL_   } _EL_  else   if (NaN.equals(s)) { _EL_     return Float.NaN; _EL_   } _EL_  else { _EL_     s=trimPlusSign(s); _EL_     return Float.parseFloat(s); _EL_   } _EL_ } _EL_ ', 'public Object newInstance(Class javaContentInterface) throws JAXBException { _EL_   if (javaContentInterface == null) { _EL_     throw new JAXBException(Messages.format(Messages.CI_NOT_NULL)); _EL_   } _EL_   try { _EL_     Class c=gi.getDefaultImplementation(javaContentInterface); _EL_     if (c == null)     throw new JAXBException(Messages.format(Messages.MISSING_INTERFACE,javaContentInterface)); _EL_     return c.newInstance(); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new JAXBException(e); _EL_   } _EL_ } _EL_ ', 'public void requestPasswordForShareViaLink(boolean createShare){ _EL_   SharePasswordDialogFragment dialog=SharePasswordDialogFragment.newInstance(mFile,createShare); _EL_   dialog.show(getFragmentManager(),SharePasswordDialogFragment.PASSWORD_FRAGMENT); _EL_ } _EL_ ', 'private void forceOutOfMemory(){ _EL_   ArrayList junk=new ArrayList(); _EL_   for (; ; ) { _EL_     junk.add(new long[100000]); _EL_   } _EL_ } _EL_ ', '@Override public synchronized void put(String key,Entry entry){ _EL_   pruneIfNeeded(entry.data.length); _EL_   File file=getFileForKey(key); _EL_   try { _EL_     BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file)); _EL_     CacheHeader e=new CacheHeader(key,entry); _EL_     boolean success=e.writeHeader(fos); _EL_     if (!success) { _EL_       fos.close(); _EL_       VolleyLog.d("Failed to write header for %s",file.getAbsolutePath()); _EL_       throw new IOException(); _EL_     } _EL_     fos.write(entry.data); _EL_     fos.close(); _EL_     putEntry(key,e); _EL_     return; _EL_   } _EL_  catch (  IOException e) { _EL_   } _EL_   boolean deleted=file.delete(); _EL_   if (!deleted) { _EL_     VolleyLog.d("Could not clean up file %s",file.getAbsolutePath()); _EL_   } _EL_ } _EL_ ', 'public static double enlargementScaled(SpatialComparable exist,SpatialComparable addit,double scale){ _EL_   final int dim=assertSameDimensionality(exist,addit); _EL_   double v1=1.; _EL_   double v2=1.; _EL_   for (int i=0; i < dim; i++) { _EL_     final double emin=exist.getMin(i); _EL_     final double emax=exist.getMax(i); _EL_     final double amin=addit.getMin(i); _EL_     final double amax=addit.getMax(i); _EL_     final double min=Math.min(emin,amin); _EL_     final double max=Math.max(emax,amax); _EL_     v1*=(max - min) * scale; _EL_     v2*=(emax - emin) * scale; _EL_   } _EL_   return v2 - v1; _EL_ } _EL_ ', 'public void intersection(Rectangle2D r){ _EL_   if (status == INVALID)   return; _EL_   if (status == EMPTY) { _EL_     setClip(r); _EL_     status=INUSE; _EL_     return; _EL_   } _EL_   clip[0]=Math.max(clip[0],r.getMinX()); _EL_   clip[1]=Math.max(clip[1],r.getMinY()); _EL_   clip[6]=Math.min(clip[6],r.getMaxX()); _EL_   clip[7]=Math.min(clip[7],r.getMaxY()); _EL_ } _EL_ ', 'private Node addConditionWaiter(){ _EL_   Node t=lastWaiter; _EL_   if (t != null && t.waitStatus != Node.CONDITION) { _EL_     unlinkCancelledWaiters(); _EL_     t=lastWaiter; _EL_   } _EL_   Node node=new Node(Thread.currentThread(),Node.CONDITION); _EL_   if (t == null)   firstWaiter=node; _EL_  else   t.nextWaiter=node; _EL_   lastWaiter=node; _EL_   return node; _EL_ } _EL_ ', '@TCB static String stripBannedCodeunits(String s){ _EL_   int safeLimit=longestPrefixOfGoodCodeunits(s); _EL_   if (safeLimit < 0) { _EL_     return s; _EL_   } _EL_   StringBuilder sb=new StringBuilder(s); _EL_   stripBannedCodeunits(sb,safeLimit); _EL_   return sb.toString(); _EL_ } _EL_ ', 'public static void assertLinewiseEquals(String message,String expected,String actual){ _EL_   try (Scanner expectedScanner=new Scanner(expected);Scanner actualScanner=new Scanner(actual)){ _EL_     String expectedLine=null; _EL_     String actualLine=null; _EL_     int lineCounter=1; _EL_     while (expectedScanner.hasNextLine()) { _EL_       expectedLine=expectedScanner.nextLine(); _EL_       if (actualScanner.hasNextLine()) { _EL_         actualLine=actualScanner.nextLine(); _EL_       } _EL_  else { _EL_         fail("Line " + lineCounter + ": actual input has less lines then expected result! Expected: "+ expectedLine); _EL_       } _EL_       assertEquals("Line " + lineCounter + ": "+ message+ "\\n\\nExpected:\\n"+ expected+ "\\nActual:\\n"+ actual,expectedLine,actualLine); _EL_       ++lineCounter; _EL_     } _EL_   } _EL_  } _EL_ ', 'private void warning(String msg,Throwable th){ _EL_   warning(msg); _EL_   th.printStackTrace(); _EL_ } _EL_ ', 'private static Locale strip(Locale locale){ _EL_   String language=locale.getLanguage(); _EL_   String country=locale.getCountry(); _EL_   String variant=locale.getVariant(); _EL_   if (!variant.isEmpty()) { _EL_     variant=""; _EL_   } _EL_  else   if (!country.isEmpty()) { _EL_     country=""; _EL_   } _EL_  else   if (!language.isEmpty()) { _EL_     language=""; _EL_   } _EL_  else { _EL_     return null; _EL_   } _EL_   return new Locale(language,country,variant); _EL_ } _EL_ ', 'private void appendTimeZone(StringBuffer buffer,int count,boolean generalTimeZone){ _EL_   if (generalTimeZone) { _EL_     TimeZone tz=calendar.getTimeZone(); _EL_     boolean daylight=(calendar.get(Calendar.DST_OFFSET) != 0); _EL_     int style=count < 4 ? TimeZone.SHORT : TimeZone.LONG; _EL_     if (!formatData.customZoneStrings) { _EL_       buffer.append(tz.getDisplayName(daylight,style,formatData.locale)); _EL_       return; _EL_     } _EL_     String custom=TimeZoneNames.getDisplayName(formatData.zoneStrings,tz.getID(),daylight,style); _EL_     if (custom != null) { _EL_       buffer.append(custom); _EL_       return; _EL_     } _EL_   } _EL_   appendNumericTimeZone(buffer,count,generalTimeZone); _EL_ } _EL_ ', 'public void removeListeners(){ _EL_   if (globalListener != null) { _EL_     try { _EL_       InvokerHelper.invokeMethod(currentObject,"removePropertyChangeListener",globalListener); _EL_     } _EL_  catch (    Exception e) { _EL_     } _EL_     globalListener=null; _EL_   } _EL_   if (localListener != null) { _EL_     try { _EL_       InvokerHelper.invokeMethod(currentObject,"removePropertyChangeListener",new Object[]{propertyName,localListener}); _EL_     } _EL_  catch (    Exception e) { _EL_     } _EL_     localListener=null; _EL_   } _EL_   if (syntheticFullBinding != null) { _EL_     syntheticFullBinding.unbind(); _EL_   } _EL_ } _EL_ ', 'public void showScores(boolean flag){ _EL_   mShowScores=flag; _EL_   SwingUtilities.invokeLater(null); _EL_ } _EL_ ', 'public static void write(File file,CharSequence data,boolean append) throws IOException { _EL_   write(file,data,Charset.defaultCharset(),append); _EL_ } _EL_ ', 'protected Connection openH2Connection(boolean autocommit) throws SQLException { _EL_   System.setProperty("h2.serializeJavaObject","false"); _EL_   String dbName="test"; _EL_   Connection conn=DriverManager.getConnection("jdbc:h2:mem:" + dbName + ";DB_CLOSE_DELAY=-1"); _EL_   conn.setAutoCommit(autocommit); _EL_   return conn; _EL_ } _EL_ ', 'private void emitClear(String fieldName,StringBuilder builder){ _EL_   builder.append("    public void "); _EL_   builder.append(getClearName(fieldName)); _EL_   builder.append("() {\\n      "); _EL_   builder.append(getEnsureName(fieldName)); _EL_   builder.append("();\\n      "); _EL_   builder.append(fieldName); _EL_   builder.append(".clear();\\n"); _EL_   builder.append("    }\\n\\n"); _EL_ } _EL_ ', 'public void addFooterView(View v,Object data,boolean isSelectable){ _EL_   FixedViewInfo info=new FixedViewInfo(); _EL_   info.view=v; _EL_   info.data=data; _EL_   info.isSelectable=isSelectable; _EL_   mFooterViewInfos.add(info); _EL_   if (mAdapter != null && mObserver != null) { _EL_     mObserver.onChanged(); _EL_   } _EL_ } _EL_ ', 'public static void load(String url){ _EL_   String driver=getDriver(url); _EL_   if (driver != null) { _EL_     loadUserClass(driver); _EL_   } _EL_ } _EL_ ', 'public void addDocument(Document d){ _EL_   if (!m_readMode) { _EL_     try { _EL_       writer.addDocument(d); _EL_       m_hitCountCache.clear(); _EL_     } _EL_  catch (    IOException e) { _EL_       e.printStackTrace(); _EL_     } _EL_   } _EL_  else { _EL_     throw new IllegalStateException("Documents can not be added to the index unless" + "the LuceneSearcher is not in read mode"); _EL_   } _EL_ } _EL_ ', 'protected void putCommand(final Class commandClass,final String[] names){ _EL_   Check.isTrue(names.length > 0,"names.length > 0"); _EL_   _commandsToCanonicalNames.put(commandClass,names[0]); _EL_   for (int i=0; i < names.length; i++) { _EL_     _aliasesToCommands.put(names[i],commandClass); _EL_   } _EL_ } _EL_ ', 'protected void writeColumnAutoIncrementStmt(Table table,Column column,StringBuilder ddl){ _EL_   ddl.append("IDENTITY"); _EL_ } _EL_ ', 'final void runWorker(Worker w){ _EL_   Thread wt=Thread.currentThread(); _EL_   Runnable task=w.firstTask; _EL_   w.firstTask=null; _EL_   w.unlock(); _EL_   boolean completedAbruptly=true; _EL_   try { _EL_     while (task != null || (task=getTask()) != null) { _EL_       w.lock(); _EL_       if ((runStateAtLeast(ctl.get(),STOP) || (Thread.interrupted() && runStateAtLeast(ctl.get(),STOP))) && !wt.isInterrupted())       wt.interrupt(); _EL_       try { _EL_         beforeExecute(wt,task); _EL_         Throwable thrown=null; _EL_         try { _EL_           task.run(); _EL_         } _EL_  catch (        RuntimeException x) { _EL_           thrown=x; _EL_           throw x; _EL_         } _EL_ catch (        Error x) { _EL_           thrown=x; _EL_           throw x; _EL_         } _EL_ catch (        Throwable x) { _EL_           thrown=x; _EL_           throw new Error(x); _EL_         } _EL_  finally { _EL_           afterExecute(task,thrown); _EL_         } _EL_       } _EL_   finally { _EL_         task=null; _EL_         w.completedTasks++; _EL_         w.unlock(); _EL_       } _EL_     } _EL_     completedAbruptly=false; _EL_   } _EL_   finally { _EL_     processWorkerExit(w,completedAbruptly); _EL_   } _EL_ } _EL_ ', 'public void writeBlockLight(ByteBuf output){ _EL_   output.writeBytes(blockLight.getHandle()); _EL_ } _EL_ ', 'public String search() throws Exception { _EL_   executeQuery(); _EL_   return SUCCESS; _EL_ } _EL_ ', 'public String next(Pattern pattern){ _EL_   checkOpen(); _EL_   checkNotNull(pattern); _EL_   matchSuccessful=false; _EL_   saveCurrentStatus(); _EL_   if (!setTokenRegion()) { _EL_     recoverPreviousStatus(); _EL_     throw new NoSuchElementException(); _EL_   } _EL_   matcher.usePattern(pattern); _EL_   if (!matcher.matches()) { _EL_     recoverPreviousStatus(); _EL_     throw new InputMismatchException(); _EL_   } _EL_   matchSuccessful=true; _EL_   return matcher.group(); _EL_ } _EL_ ', 'public void addNewDuration(long duration){ _EL_   callsNumber.incrementAndGet(); _EL_   total.addAndGet(duration); _EL_ synchronized (lock) { _EL_     if (duration < minimum.longValue()) { _EL_       minimum.set(duration); _EL_     } _EL_     if (duration > maximum.longValue()) { _EL_       maximum.set(duration); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void paintBackgroundSolid(Graphics2D g,JComponent c,int x,int y,int width,int height){ _EL_   Color color=c.getBackground(); _EL_   if (type == CommonControlState.DISABLED) { _EL_     color=new Color(color.getRed(),color.getGreen(),color.getBlue(),0x80); _EL_   } _EL_   Shape s=shapeGenerator.createRoundRectangle(x - 2,y - 2,width + 4,height + 4,CornerSize.BORDER); _EL_   g.setPaint(color); _EL_   g.fill(s); _EL_   if (isPaintLineSeperators(c)) { _EL_     paintLineSeparator(g,c,width,height); _EL_   } _EL_ } _EL_ ', 'private String encodeProduct(){ _EL_   StringBuffer tokens=new StringBuffer(); _EL_   ListIterator it=productTokens.listIterator(); _EL_   while (it.hasNext()) { _EL_     tokens.append((String)it.next()); _EL_   } _EL_   return tokens.toString(); _EL_ } _EL_ ', 'public Options resourceDirs(List<File> value){ _EL_   resourceDirs.clear(); _EL_   resourceDirs.addAll(value); _EL_   return this; _EL_ } _EL_ ', 'private final String _decodeShortUnicodeName(int len) throws IOException, JsonParseException { _EL_   int outPtr=0; _EL_   char[] outBuf=_textBuffer.emptyAndGetCurrentSegment(); _EL_   int inPtr=_inputPtr; _EL_   _inputPtr+=len; _EL_   final int[] codes=SmileConstants.sUtf8UnitLengths; _EL_   final byte[] inBuf=_inputBuffer; _EL_   for (int end=inPtr + len; inPtr < end; ) { _EL_     int i=inBuf[inPtr++] & 0xFF; _EL_     int code=codes[i]; _EL_     if (code != 0) { _EL_ switch (code) { _EL_ case 1: _EL_         i=((i & 0x1F) << 6) | (inBuf[inPtr++] & 0x3F); _EL_       break; _EL_ case 2: _EL_     i=((i & 0x0F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6) | (inBuf[inPtr++] & 0x3F); _EL_   break; _EL_ case 3: _EL_ i=((i & 0x07) << 18) | ((inBuf[inPtr++] & 0x3F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6)| (inBuf[inPtr++] & 0x3F); _EL_ i-=0x10000; _EL_ outBuf[outPtr++]=(char)(0xD800 | (i >> 10)); _EL_ i=0xDC00 | (i & 0x3FF); _EL_ break; _EL_ default : _EL_ _reportError("Invalid byte " + Integer.toHexString(i) + " in short Unicode text block"); _EL_ } _EL_ } _EL_ outBuf[outPtr++]=(char)i; _EL_ } _EL_ _textBuffer.setCurrentLength(outPtr); _EL_ return _textBuffer.contentsAsString(); _EL_ } _EL_ ', 'void pushImportURL(String hrefUrl){ _EL_   m_importStack.push(hrefUrl); _EL_ } _EL_ ', 'protected String toMessage(Map<String,String> results){ _EL_   StringBuilder builder=new StringBuilder(); _EL_   if (results != null) { _EL_     for (    Map.Entry<String,String> entry : results.entrySet()) { _EL_       builder.append(entry.getKey() + ": " + entry.getValue()+ ";\\n"); _EL_     } _EL_   } _EL_   return builder.toString(); _EL_ } _EL_ ', 'public static EventBean[] addToArray(EventBean[] array,Collection<EventBean> eventsToAdd){ _EL_   EventBean[] newArray=new EventBean[array.length + eventsToAdd.size()]; _EL_   System.arraycopy(array,0,newArray,0,array.length); _EL_   int counter=array.length; _EL_   for (  EventBean eventToAdd : eventsToAdd) { _EL_     newArray[counter++]=eventToAdd; _EL_   } _EL_   return newArray; _EL_ } _EL_ ', 'public synchronized void add(String name,long threadId){ _EL_   if (mFinished) { _EL_     throw new IllegalStateException("Marker added to finished log"); _EL_   } _EL_   mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime())); _EL_ } _EL_ ', 'public static String replace(String a,String b,String c){ _EL_   StringBuilder result=new StringBuilder(c.length()); _EL_   int i=0; _EL_   int j=c.indexOf(a); _EL_   while (j >= i) { _EL_     result.append(c.substring(i,j)); _EL_     result.append(b); _EL_     i=j + a.length(); _EL_     j=c.indexOf(a,i); _EL_   } _EL_   result.append(c.substring(i,c.length())); _EL_   return result.toString(); _EL_ } _EL_ ', 'protected void onPageScrolled(int position,float offset,int offsetPixels){ _EL_   if (mDecorChildCount > 0) { _EL_     final int scrollY=getScrollY(); _EL_     int paddingTop=getPaddingTop(); _EL_     int paddingBottom=getPaddingBottom(); _EL_     final int height=getHeight(); _EL_     final int childCount=getChildCount(); _EL_     for (int i=0; i < childCount; i++) { _EL_       final View child=getChildAt(i); _EL_       final LayoutParams lp=(LayoutParams)child.getLayoutParams(); _EL_       if (!lp.isDecor)       continue; _EL_       final int vgrav=lp.gravity & Gravity.VERTICAL_GRAVITY_MASK; _EL_       int childTop=0; _EL_ switch (vgrav) { _EL_ default : _EL_         childTop=paddingTop; _EL_       break; _EL_ case Gravity.TOP: _EL_     childTop=paddingTop; _EL_   paddingTop+=child.getHeight(); _EL_ break; _EL_ case Gravity.CENTER_VERTICAL: _EL_ childTop=Math.max((height - child.getMeasuredHeight()) / 2,paddingTop); _EL_ break; _EL_ case Gravity.BOTTOM: _EL_ childTop=height - paddingBottom - child.getMeasuredHeight(); _EL_ paddingBottom+=child.getMeasuredHeight(); _EL_ break; _EL_ } _EL_ childTop+=scrollY; _EL_ final int childOffset=childTop - child.getTop(); _EL_ if (childOffset != 0) { _EL_ child.offsetTopAndBottom(childOffset); _EL_ } _EL_ } _EL_ } _EL_ dispatchOnPageScrolled(position,offset,offsetPixels); _EL_ if (mPageTransformer != null) { _EL_ final int scrollY=getScrollY(); _EL_ final int childCount=getChildCount(); _EL_ for (int i=0; i < childCount; i++) { _EL_ final View child=getChildAt(i); _EL_ final LayoutParams lp=(LayoutParams)child.getLayoutParams(); _EL_ if (lp.isDecor) continue; _EL_ final float transformPos=(float)(child.getTop() - scrollY) / getClientHeight(); _EL_ mPageTransformer.transformPage(child,transformPos); _EL_ } _EL_ } _EL_ mCalledSuper=true; _EL_ } _EL_ ', 'private void reflectMemberVariablesInFinalButton(){ _EL_   final boolean lastPageReached=(viewPager.getCurrentItem() + 1) == pages.size(); _EL_   final boolean buttonShouldBeInvisible=!lastPageReached || finalButtonDisabled; _EL_   final boolean buttonIsCurrentlyInvisible=finalButton.getVisibility() == View.INVISIBLE; _EL_   final boolean shouldUpdateButton=buttonShouldBeInvisible != buttonIsCurrentlyInvisible; _EL_   if (shouldUpdateButton) { _EL_     final Animator buttonAnimator=buttonShouldBeInvisible ? buttonAnimatorFactory.newFinalButtonDisappearAnimator(finalButton) : buttonAnimatorFactory.newFinalButtonAppearAnimator(finalButton); _EL_     if (buttonShouldBeInvisible) { _EL_       disableButton(buttonAnimator,finalButton); _EL_     } _EL_  else { _EL_       enableButton(buttonAnimator,finalButton); _EL_     } _EL_   } _EL_ } _EL_ ', 'private RelyingParty validateRelyingParty(HttpServletRequest request,String tenantName){ _EL_   Validate.notNull(request,"request"); _EL_   Validate.notEmpty(tenantName,"tenantName"); _EL_   DefaultIdmAccessorFactory idmFactory=new DefaultIdmAccessorFactory(); _EL_   Validate.notNull(idmFactory,"idmFactory"); _EL_   IdmAccessor idmAccessor=idmFactory.getIdmAccessor(); _EL_   idmAccessor.setTenant(tenantName); _EL_   String encodedEntityId=request.getParameter(Shared.RELYINGPARTY_ENTITYID); _EL_   if (encodedEntityId == null || encodedEntityId.isEmpty()) { _EL_     logger.error("No Relying Party\'s entity ID found. Ignore the request!"); _EL_     return null; _EL_   } _EL_   String rpEntityId=new String(Base64.decode(encodedEntityId)); _EL_   RelyingParty rp=idmAccessor.getRelyingPartyByUrl(rpEntityId); _EL_   if (rp != null) { _EL_     return rp; _EL_   } _EL_  else { _EL_     logger.error("Unknown relying party: " + rpEntityId); _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public void rotateZ(double theta){ _EL_   Matrix3D tmp=new Matrix3D(); _EL_   double c=Math.cos(theta); _EL_   double s=Math.sin(theta); _EL_   tmp.set(0,0,c); _EL_   tmp.set(0,1,-s); _EL_   tmp.set(1,0,s); _EL_   tmp.set(1,1,c); _EL_   preMultiply(tmp); _EL_ } _EL_ ', 'public ServiceHost startFactory(Service instanceService){ _EL_   final Class<? extends Service> serviceClass=instanceService.getClass(); _EL_   return startFactory(serviceClass,null); _EL_ } _EL_ ', 'void wakeOut(){ _EL_   OnAvailable outFlow=_outFlow; _EL_   if (outFlow == null) { _EL_     return; _EL_   } _EL_   if (_creditsIn <= _queue.head()) { _EL_     return; _EL_   } _EL_   StateOutPipe stateOld; _EL_   StateOutPipe stateNew; _EL_   do { _EL_     stateOld=_stateOutRef.get(); _EL_     if (!stateOld.isFull()) { _EL_       return; _EL_     } _EL_     stateNew=stateOld.toWake(); _EL_   } _EL_  while (!_stateOutRef.compareAndSet(stateOld,stateNew)); _EL_   try (OutboxAmp outbox=OutboxAmp.currentOrCreate(_outRef.services())){ _EL_     Objects.requireNonNull(outbox); _EL_     PipeWakeOutMessage<T> msg=new PipeWakeOutMessage<>(outbox,_outRef,this,outFlow); _EL_     outbox.offer(msg); _EL_   } _EL_  } _EL_ ', "public static int columnsNumber(char c,int x,int prevX,int plainSpaceSize){ _EL_   if (c != '\\t') { _EL_     return 1; _EL_   } _EL_   int result=(x - prevX) / plainSpaceSize; _EL_   if ((x - prevX) % plainSpaceSize > 0) { _EL_     result++; _EL_   } _EL_   return result; _EL_ } _EL_ ", 'private Optional(T value){ _EL_   this.value=Objects.requireNonNull(value); _EL_ } _EL_ ', 'public KafkaMessageListenerContainer(ConsumerFactory<K,V> consumerFactory,ContainerProperties containerProperties,TopicPartitionInitialOffset... topicPartitions){ _EL_   super(containerProperties); _EL_   Assert.notNull(consumerFactory,"A ConsumerFactory must be provided"); _EL_   this.consumerFactory=consumerFactory; _EL_   if (topicPartitions != null) { _EL_     this.topicPartitions=Arrays.copyOf(topicPartitions,topicPartitions.length); _EL_   } _EL_  else { _EL_     this.topicPartitions=containerProperties.getTopicPartitions(); _EL_   } _EL_ } _EL_ ', 'public void engineDeleteEntry(String alias) throws KeyStoreException { _EL_   Key k=(Key)keys.remove(alias); _EL_   Certificate c=(Certificate)certs.remove(alias); _EL_   if (c != null) { _EL_     chainCerts.remove(new CertId(c.getPublicKey())); _EL_   } _EL_   if (k != null) { _EL_     String id=(String)localIds.remove(alias); _EL_     if (id != null) { _EL_       c=(Certificate)keyCerts.remove(id); _EL_     } _EL_     if (c != null) { _EL_       chainCerts.remove(new CertId(c.getPublicKey())); _EL_     } _EL_   } _EL_ } _EL_ ', 'public PlaLineInt translate_by(PlaVectorInt p_vector){ _EL_   if (p_vector.equals(PlaVectorInt.ZERO))   return this; _EL_   PlaPointInt new_a=point_a.translate_by(p_vector); _EL_   PlaPointInt new_b=point_b.translate_by(p_vector); _EL_   return new PlaLineInt(new_a,new_b); _EL_ } _EL_ ', '@SuppressWarnings("all") final void reject(Runnable command){ _EL_   handler.rejectedExecution(command,this); _EL_ } _EL_ ', 'public void addRam(AttackAction ea){ _EL_   pendingRams.addElement(ea); _EL_   processGameEvent(new GameNewActionEvent(this,ea)); _EL_ } _EL_ ', 'public static List<Integer> createColors(Resources r,int[] colors){ _EL_   List<Integer> result=new ArrayList<Integer>(); _EL_   for (  int i : colors) { _EL_     result.add(r.getColor(i)); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'protected byte[] generateSalt(){ _EL_   return HEADER.getBytes(Constants.UTF8); _EL_ } _EL_ ', 'public void addListener(final ProjectorListener projectorListener){ _EL_   if (listeners == null) { _EL_     listeners=new ArrayList<ProjectorListener>(); _EL_   } _EL_   listeners.add(projectorListener); _EL_ } _EL_ ', 'protected TupleExpr selectNextTupleExpr(List<TupleExpr> expressions,Map<TupleExpr,Double> cardinalityMap,Map<TupleExpr,List<Var>> varsMap,Map<Var,Integer> varFreqMap,Set<String> boundVars){ _EL_   TupleExpr result=null; _EL_   if (expressions.size() > 1) { _EL_     double lowestCardinality=Double.POSITIVE_INFINITY; _EL_     for (    TupleExpr tupleExpr : expressions) { _EL_       double cardinality=getTupleExprCardinality(tupleExpr,cardinalityMap,varsMap,varFreqMap,boundVars); _EL_       if (cardinality < lowestCardinality || result == null) { _EL_         lowestCardinality=cardinality; _EL_         result=tupleExpr; _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     result=expressions.get(0); _EL_   } _EL_   return result; _EL_ } _EL_ ', "public static void writeBcdNumber(OutputStream os,String number) throws IOException { _EL_   int bcd=0x00; _EL_   int n=0; _EL_   for (int i=0; i < number.length(); i++) { _EL_ switch (number.charAt(i)) { _EL_ case '0': _EL_       bcd|=0x00; _EL_     break; _EL_ case '1': _EL_   bcd|=0x10; _EL_ break; _EL_ case '2': _EL_ bcd|=0x20; _EL_ break; _EL_ case '3': _EL_ bcd|=0x30; _EL_ break; _EL_ case '4': _EL_ bcd|=0x40; _EL_ break; _EL_ case '5': _EL_ bcd|=0x50; _EL_ break; _EL_ case '6': _EL_ bcd|=0x60; _EL_ break; _EL_ case '7': _EL_ bcd|=0x70; _EL_ break; _EL_ case '8': _EL_ bcd|=0x80; _EL_ break; _EL_ case '9': _EL_ bcd|=0x90; _EL_ break; _EL_ case '*': _EL_ bcd|=0xA0; _EL_ break; _EL_ case '#': _EL_ bcd|=0xB0; _EL_ break; _EL_ case 'a': _EL_ bcd|=0xC0; _EL_ break; _EL_ case 'b': _EL_ bcd|=0xE0; _EL_ break; _EL_ } _EL_ n++; _EL_ if (n == 2) { _EL_ os.write(bcd); _EL_ n=0; _EL_ bcd=0x00; _EL_ } _EL_  else { _EL_ bcd>>=4; _EL_ } _EL_ } _EL_ if (n == 1) { _EL_ bcd|=0xF0; _EL_ os.write(bcd); _EL_ } _EL_ } _EL_ ", 'public void addMessage(String message){ _EL_   messages.addLast(message); _EL_   if (messages.size() > MAX_HISTORY) { _EL_     messages.removeFirst(); _EL_   } _EL_   pointer=messages.size(); _EL_ } _EL_ ', '@VisibleForTesting protected void startExecutor(final int container){ _EL_   LOG.info("Starting a new executor for container: " + container); _EL_   final Process containerExecutor=startExecutorProcess(container); _EL_   processToContainer.put(containerExecutor,container); _EL_   LOG.info("Started the executor for container: " + container); _EL_   startExecutorMonitor(container,containerExecutor); _EL_ } _EL_ ', 'public void accept(AbstractReporter r){ _EL_   r.testStart(this); _EL_   r.browserInfoEntry(browserInfoEntry); _EL_   Iterator<LogEntry> entryIterator=logEntries.iterator(); _EL_   while (entryIterator.hasNext()) { _EL_     LogEntry entry=entryIterator.next(); _EL_     if (!entryIterator.hasNext()) { _EL_       entry.setLast(true); _EL_     } _EL_     visit(entry,r); _EL_   } _EL_   r.testEnd(this); _EL_ } _EL_ ', 'private void loadLatestExtensionVersions(){ _EL_   try { _EL_     List<Extension> all=registryManager.getExtensions(); _EL_     if (!all.isEmpty()) { _EL_       setLatestExtensionVersions(getLatestVersions(all)); _EL_     } _EL_   } _EL_  catch (  RegistryException e) { _EL_     String msg=RegistryException.logRegistryException(e.getType(),this); _EL_     warnings.addStartupError(msg); _EL_     LOG.error(msg); _EL_     msg=getText("admin.extensions.couldnt.load",new String[]{cfg.getRegistryUrl()}); _EL_     warnings.addStartupError(msg); _EL_     LOG.error(msg); _EL_   } _EL_  finally { _EL_     if (getLatestExtensionVersions() == null) { _EL_       setLatestExtensionVersions(new ArrayList<Extension>()); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected void startNode(Node node) throws org.xml.sax.SAXException { _EL_   if (node instanceof Locator) { _EL_     Locator loc=(Locator)node; _EL_     fLocator.setColumnNumber(loc.getColumnNumber()); _EL_     fLocator.setLineNumber(loc.getLineNumber()); _EL_     fLocator.setPublicId(loc.getPublicId()); _EL_     fLocator.setSystemId(loc.getSystemId()); _EL_   } _EL_  else { _EL_     fLocator.setColumnNumber(0); _EL_     fLocator.setLineNumber(0); _EL_   } _EL_ switch (node.getNodeType()) { _EL_ case Node.DOCUMENT_TYPE_NODE: _EL_     serializeDocType((DocumentType)node,true); _EL_   break; _EL_ case Node.COMMENT_NODE: _EL_ serializeComment((Comment)node); _EL_ break; _EL_ case Node.DOCUMENT_FRAGMENT_NODE: _EL_ break; _EL_ case Node.DOCUMENT_NODE: _EL_ break; _EL_ case Node.ELEMENT_NODE: _EL_ serializeElement((Element)node,true); _EL_ break; _EL_ case Node.PROCESSING_INSTRUCTION_NODE: _EL_ serializePI((ProcessingInstruction)node); _EL_ break; _EL_ case Node.CDATA_SECTION_NODE: _EL_ serializeCDATASection((CDATASection)node); _EL_ break; _EL_ case Node.TEXT_NODE: _EL_ serializeText((Text)node); _EL_ break; _EL_ case Node.ENTITY_REFERENCE_NODE: _EL_ serializeEntityReference((EntityReference)node,true); _EL_ break; _EL_ default : _EL_ } _EL_ } _EL_ ', "public int read() throws IOException { _EL_   int val; _EL_   if ((val=is.read()) < 0) { _EL_     return -1; _EL_   } _EL_   if (bo == 'b') { _EL_     val=(char)((val << 8) | (is.read() & 0xff)); _EL_   } _EL_  else { _EL_     val=(char)((is.read() << 8) | (val & 0xff)); _EL_   } _EL_   return val; _EL_ } _EL_ ", 'public void cancelAutoCompletion(){ _EL_   if (inCompletion) { _EL_     textField.setText(textBefore); _EL_     textField.setCaretPosition(caretPosBefore); _EL_     prevCompletion=null; _EL_     prevCompletionIndex=0; _EL_     inCompletion=false; _EL_   } _EL_ } _EL_ ', 'public Enumeration<Option> listOptions(){ _EL_   Vector<Option> result=new Vector<Option>(); _EL_   result.add(new Option("\\tSkip identical instances (distances equal to zero).\\n","S",1,"-S")); _EL_   result.addAll(Collections.list(super.listOptions())); _EL_   return result.elements(); _EL_ } _EL_ ', 'public ClientPropertiesBuilder withProxyHostName(String proxyHostName){ _EL_   properties.setProperty(CLIENT_SERVICE_PROXY_HOST_NAME,proxyHostName); _EL_   return this; _EL_ } _EL_ ', 'private E dequeue(){ _EL_   final Object[] items=this.items; _EL_   @SuppressWarnings("unchecked") E x=(E)items[takeIndex]; _EL_   items[takeIndex]=null; _EL_   takeIndex=inc(takeIndex); _EL_   count--; _EL_   if (itrs != null)   itrs.elementDequeued(); _EL_   notFull.signal(); _EL_   return x; _EL_ } _EL_ ', 'static public String randomPositiveFloat(int whole,int decimal){ _EL_   StringBuilder output=new StringBuilder(); _EL_   output.append(rnd.nextInt(8) + 1); _EL_   for (int i=0; i < whole - 1; i++) { _EL_     output.append(rnd.nextInt(9)); _EL_   } _EL_   output.append("."); _EL_   for (int i=0; i < decimal; i++) { _EL_     output.append(rnd.nextInt(9)); _EL_   } _EL_   return output.toString(); _EL_ } _EL_ ', 'public void resetTextBoxIndexesExcept(Set<Integer> excludedList){ _EL_   Set<Integer> unusedTextBoxIndexes=new HashSet<Integer>(points.getTextBoxIndexes()); _EL_   unusedTextBoxIndexes.removeAll(excludedList); _EL_   for (  Integer index : unusedTextBoxIndexes) { _EL_     points.removeTextBox(index); _EL_   } _EL_ } _EL_ ', 'public IDevice learnEntity(long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort,boolean processUpdates){ _EL_   List<IDeviceListener> listeners=deviceListeners.getOrderedListeners(); _EL_   if (!processUpdates) { _EL_     deviceListeners.clearListeners(); _EL_   } _EL_   if (vlan != null && vlan.shortValue() <= 0)   vlan=null; _EL_   if (ipv4Address != null && ipv4Address == 0)   ipv4Address=null; _EL_   IDevice res=learnDeviceByEntity(new Entity(macAddress,vlan,ipv4Address,switchDPID,switchPort,new Date())); _EL_   if (listeners != null) { _EL_     for (    IDeviceListener listener : listeners) { _EL_       deviceListeners.addListener("device",listener); _EL_     } _EL_   } _EL_   return res; _EL_ } _EL_ ', 'public double[] levelZeroData(){ _EL_   List<Buffer> levelZeroBuffers=bufferMap.get(0); _EL_   int length=0; _EL_   for (  Buffer buffer : levelZeroBuffers) { _EL_     if (!buffer.hasCapacity()) { _EL_       length+=buffer.size; _EL_     } _EL_  else { _EL_       length+=buffer.next; _EL_     } _EL_   } _EL_   int pos=0; _EL_   int currLen; _EL_   final double[] out=new double[length]; _EL_   for (  Buffer buffer : levelZeroBuffers) { _EL_     if (!buffer.hasCapacity()) { _EL_       currLen=buffer.size; _EL_     } _EL_  else { _EL_       currLen=buffer.next; _EL_     } _EL_     System.arraycopy(buffer.data,0,out,pos,currLen); _EL_     pos+=currLen; _EL_   } _EL_   return out; _EL_ } _EL_ ', 'private ImageIcon addColor(ImageIcon icon,Color color){ _EL_   if (icon == null || color == null) { _EL_     return icon; _EL_   } _EL_   BufferedImage newImage=new BufferedImage(icon.getIconWidth(),icon.getIconWidth(),BufferedImage.TYPE_INT_ARGB); _EL_   Graphics g=newImage.getGraphics(); _EL_   g.setColor(color); _EL_   g.drawImage(icon.getImage(),0,0,color,null); _EL_   g.dispose(); _EL_   return new ImageIcon(newImage); _EL_ } _EL_ ', 'public static byte[] readAllLimited(InputStream inStr,int limit) throws IOException { _EL_   ByteArrayOutputStream buf=new ByteArrayOutputStream(); _EL_   pipeAllLimited(inStr,limit,buf); _EL_   return buf.toByteArray(); _EL_ } _EL_ ', 'protected String searchFor(final String target,String start){ _EL_   return searchFor(target,null,start); _EL_ } _EL_ ', 'public void execute(){ _EL_   mPlayer.setLoopMode(mDoLoop); _EL_   mThread=new Thread(this,"Movie Player"); _EL_   mThread.start(); _EL_ } _EL_ ', '@Override public void removeEnvVar(EnvVar envVar){ _EL_   if (envVar != null) { _EL_     envVarList.remove(envVar); _EL_   } _EL_ } _EL_ ', 'static private String calcThreshold(double scoreThreshold,double lambda){ _EL_   final double logProbThreshold=Math.log(1 - scoreThreshold / 0.999); _EL_   int maxNum=1000000; _EL_   if (calcLogProb(maxNum,lambda) > logProbThreshold) { _EL_     return ">1e6"; _EL_   } _EL_   int minNum=1; _EL_   while (minNum < maxNum) { _EL_     final int midNum=(maxNum + minNum) / 2; _EL_     final boolean passThreshold=calcLogProb(midNum,lambda) <= logProbThreshold; _EL_     if (passThreshold) { _EL_       maxNum=midNum; _EL_     } _EL_  else { _EL_       if (midNum == minNum) { _EL_         break; _EL_       } _EL_       minNum=midNum; _EL_     } _EL_   } _EL_   return Integer.toString(maxNum); _EL_ } _EL_ ', 'private Scope peek() throws JSONException { _EL_   if (stack.isEmpty()) { _EL_     throw new JSONException("Nesting problem"); _EL_   } _EL_   return stack.get(stack.size() - 1); _EL_ } _EL_ ', 'public static int indexOfLastSeparator(String filename){ _EL_   if (filename == null)   return -1; _EL_   int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR); _EL_   int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR); _EL_   return Math.max(lastUnixPos,lastWindowsPos); _EL_ } _EL_ ', 'public static boolean pointInView(View v,float localX,float localY,float slop){ _EL_   return localX >= -slop && localY >= -slop && localX < (v.getWidth() + slop) && localY < (v.getHeight() + slop); _EL_ } _EL_ ', 'private static Type[] unrollBounds(final Map<TypeVariable<?>,Type> typeArguments,final Type[] bounds){ _EL_   Type[] result=bounds; _EL_   int i=0; _EL_   for (; i < result.length; i++) { _EL_     final Type unrolled=unrollVariables(typeArguments,result[i]); _EL_     if (unrolled == null) { _EL_       result=ArrayUtils.remove(result,i--); _EL_     } _EL_  else { _EL_       result[i]=unrolled; _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public static Map<String,String> createBasicAuthHeader(String username,String password,Map<String,String> headerMap){ _EL_   if (headerMap == null)   headerMap=new HashMap<>(); _EL_   String credentials=username + ":" + password; _EL_   String base64EncodedCredentials=Base64.encodeToString(credentials.getBytes(),Base64.NO_WRAP); _EL_   headerMap.put("Authorization","Basic " + base64EncodedCredentials); _EL_   return headerMap; _EL_ } _EL_ ', 'private void addExtentEntry(){ _EL_   extentModel.addNewEntry(); _EL_   removeExtentButton.setEnabled(false); _EL_ } _EL_ ', 'protected void execute(Runnable evt){ _EL_   executor.execute(evt); _EL_ } _EL_ ', 'public void addAttributeFor(final Field field){ _EL_   fieldToUseAsAttribute.add(field); _EL_ } _EL_ ', 'public boolean isSessionToken(String token){ _EL_ synchronized (sessionTokens) { _EL_     return sessionTokens.contains(token); _EL_   } _EL_ } _EL_ ', 'public static double rootMeansSquaredError(double[] real,double[] predicted){ _EL_   double ret=0.0; _EL_   for (int i=0; i < real.length; i++) { _EL_     ret+=Math.pow((real[i] - predicted[i]),2); _EL_   } _EL_   return Math.sqrt(ret / real.length); _EL_ } _EL_ ', 'public void export(ByteBuffer buf){ _EL_   buf.putInt(seqId); _EL_   if (info.isRowBlockEnabled())   buf.putInt(nRows); _EL_   export(primaryKey,buf); _EL_   for (  ByteArray cb : cellBlocks) { _EL_     export(cb,buf); _EL_   } _EL_ } _EL_ ', 'private HashMap<String,Object> createAccDetailmap(String glcode,BigDecimal debitAmount,BigDecimal creditAmount){ _EL_   HashMap<String,Object> accountdetailmap=new HashMap<String,Object>(); _EL_   accountdetailmap.put(VoucherConstant.GLCODE,glcode); _EL_   accountdetailmap.put(VoucherConstant.DEBITAMOUNT,debitAmount); _EL_   accountdetailmap.put(VoucherConstant.CREDITAMOUNT,creditAmount); _EL_   accountdetailmap.put(VoucherConstant.FUNCTIONCODE,getFunctionaryCode()); _EL_   return accountdetailmap; _EL_ } _EL_ ', 'private void rotateRight(Node<K,V> root){ _EL_   Node<K,V> pivot=root.left; _EL_   Node<K,V> right=root.right; _EL_   Node<K,V> pivotLeft=pivot.left; _EL_   Node<K,V> pivotRight=pivot.right; _EL_   root.left=pivotRight; _EL_   if (pivotRight != null) { _EL_     pivotRight.parent=root; _EL_   } _EL_   replaceInParent(root,pivot); _EL_   pivot.right=root; _EL_   root.parent=pivot; _EL_   root.height=Math.max(right != null ? right.height : 0,pivotRight != null ? pivotRight.height : 0) + 1; _EL_   pivot.height=Math.max(root.height,pivotLeft != null ? pivotLeft.height : 0) + 1; _EL_ } _EL_ ', 'private static int byteCompaction(int mode,int[] codewords,Charset encoding,int codeIndex,StringBuilder result){ _EL_   ByteArrayOutputStream decodedBytes=new ByteArrayOutputStream(); _EL_   if (mode == BYTE_COMPACTION_MODE_LATCH) { _EL_     int count=0; _EL_     long value=0; _EL_     int[] byteCompactedCodewords=new int[6]; _EL_     boolean end=false; _EL_     int nextCode=codewords[codeIndex++]; _EL_     while ((codeIndex < codewords[0]) && !end) { _EL_       byteCompactedCodewords[count++]=nextCode; _EL_       value=900 * value + nextCode; _EL_       nextCode=codewords[codeIndex++]; _EL_       if (nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR) { _EL_         codeIndex--; _EL_         end=true; _EL_       } _EL_  else { _EL_         if ((count % 5 == 0) && (count > 0)) { _EL_           for (int j=0; j < 6; ++j) { _EL_             decodedBytes.write((byte)(value >> (8 * (5 - j)))); _EL_           } _EL_           value=0; _EL_           count=0; _EL_         } _EL_       } _EL_     } _EL_     if (codeIndex == codewords[0] && nextCode < TEXT_COMPACTION_MODE_LATCH) { _EL_       byteCompactedCodewords[count++]=nextCode; _EL_     } _EL_     for (int i=0; i < count; i++) { _EL_       decodedBytes.write((byte)byteCompactedCodewords[i]); _EL_     } _EL_   } _EL_  else   if (mode == BYTE_COMPACTION_MODE_LATCH_6) { _EL_     int count=0; _EL_     long value=0; _EL_     boolean end=false; _EL_     while (codeIndex < codewords[0] && !end) { _EL_       int code=codewords[codeIndex++]; _EL_       if (code < TEXT_COMPACTION_MODE_LATCH) { _EL_         count++; _EL_         value=900 * value + code; _EL_       } _EL_  else { _EL_         if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) { _EL_           codeIndex--; _EL_           end=true; _EL_         } _EL_       } _EL_       if ((count % 5 == 0) && (count > 0)) { _EL_         for (int j=0; j < 6; ++j) { _EL_           decodedBytes.write((byte)(value >> (8 * (5 - j)))); _EL_         } _EL_         value=0; _EL_         count=0; _EL_       } _EL_     } _EL_   } _EL_   result.append(new String(decodedBytes.toByteArray(),encoding)); _EL_   return codeIndex; _EL_ } _EL_ ', 'private void updateRadioLinks(){ _EL_   m_advanceDataSetFirst.setEnabled(m_GeneratorPropertyPanel.getEditorActive()); _EL_   m_advanceIteratorFirst.setEnabled(m_GeneratorPropertyPanel.getEditorActive()); _EL_   if (m_Exp != null) { _EL_     if (!m_GeneratorPropertyPanel.getEditorActive()) { _EL_       m_Exp.setAdvanceDataSetFirst(true); _EL_     } _EL_  else { _EL_       m_Exp.setAdvanceDataSetFirst(m_advanceDataSetFirst.isSelected()); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void update(long value){ _EL_   count.incrementAndGet(); _EL_   sample.update(value); _EL_   setMax(value); _EL_   setMin(value); _EL_   sum.getAndAdd(value); _EL_   updateVariance(value); _EL_ } _EL_ ', '@Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer renderer,float yAxisValue,int seriesIndex,int startIndex){ _EL_   paint.setColor(renderer.getColor()); _EL_   paint.setStyle(Style.FILL); _EL_   int length=points.size(); _EL_   XYValueSeries series=(XYValueSeries)mDataset.getSeriesAt(seriesIndex); _EL_   double max=series.getMaxValue(); _EL_   double coef=MAX_BUBBLE_SIZE / max; _EL_   for (int i=0; i < length; i+=2) { _EL_     double size=series.getValue(startIndex + i / 2) * coef + MIN_BUBBLE_SIZE; _EL_     drawCircle(canvas,paint,points.get(i),points.get(i + 1),(float)size); _EL_   } _EL_ } _EL_ ', 'public static void checkClassSignature(final String signature){ _EL_   int pos=0; _EL_   if (getChar(signature,0) == \'<\') { _EL_     pos=checkFormalTypeParameters(signature,pos); _EL_   } _EL_   pos=checkClassTypeSignature(signature,pos); _EL_   while (getChar(signature,pos) == \'L\') { _EL_     pos=checkClassTypeSignature(signature,pos); _EL_   } _EL_   if (pos != signature.length()) { _EL_     throw new IllegalArgumentException(signature + ": error at index " + pos); _EL_   } _EL_ } _EL_ ', 'public static byte[] select(String appId,String suffix){ _EL_   String cardletAid=FIDESMO_AID_PREFIX + appId + suffix; _EL_   return select(cardletAid); _EL_ } _EL_ ', 'public List<Properties> findAvailableProperties(String uri) throws IOException { _EL_   _resourcesNotLoaded.clear(); _EL_   String fulluri=_path + uri; _EL_   List<Properties> properties=new ArrayList<>(); _EL_   Enumeration<URL> resources=getResources(fulluri); _EL_   while (resources.hasMoreElements()) { _EL_     URL url=resources.nextElement(); _EL_     try { _EL_       Properties props=loadProperties(url); _EL_       properties.add(props); _EL_     } _EL_  catch (    Exception notAvailable) { _EL_       _resourcesNotLoaded.add(url.toExternalForm()); _EL_     } _EL_   } _EL_   return properties; _EL_ } _EL_ ', 'void internalAddRootEntry(ProjectComparisonEntry entry){ _EL_   entries.add(entry); _EL_ } _EL_ ', 'public static Source fromURL(URL url,Charset cs) throws IOException { _EL_   URI uri; _EL_   try { _EL_     uri=url.toURI(); _EL_   } _EL_  catch (  URISyntaxException e) { _EL_     throw new IOException("Illegal URI",e); _EL_   } _EL_   try (InputStream is=url.openStream()){ _EL_     return fromStream(is,uri,cs); _EL_   } _EL_  } _EL_ ', 'public RE extractRE() throws InterruptedException { _EL_   arden(); _EL_   if (!coeffs.isEmpty()) { _EL_     throw new RuntimeException("production still has free variables"); _EL_   } _EL_   return unionREs(terms); _EL_ } _EL_ ', '@Deprecated public static void runFinalizersOnExit(boolean run){ _EL_   finalizeOnExit=run; _EL_ } _EL_ ', 'public void addResult(AMIdentity id,Map attrs){ _EL_   searchResults.add(id); _EL_   resultsMap.put(id,attrs); _EL_ } _EL_ ', 'protected void createFile(ZipEntry entry){ _EL_   IPath pathname=new Path(entry.getName()); _EL_   ZipEntry parent; _EL_   if (pathname.segmentCount() == 1) { _EL_     parent=root; _EL_   } _EL_  else { _EL_     parent=(ZipEntry)directoryEntryCache.get(pathname.removeLastSegments(1)); _EL_   } _EL_   addToChildren(parent,entry); _EL_ } _EL_ ', 'public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException { _EL_   fNamespaceContext=namespaceContext; _EL_   try { _EL_     if (fDocumentHandler != null) { _EL_       if (locator != null) { _EL_         fDocumentHandler.setDocumentLocator(new LocatorProxy(locator)); _EL_       } _EL_       fDocumentHandler.startDocument(); _EL_     } _EL_     if (fContentHandler != null) { _EL_       if (locator != null) { _EL_         fContentHandler.setDocumentLocator(new LocatorProxy(locator)); _EL_       } _EL_       fContentHandler.startDocument(); _EL_     } _EL_   } _EL_  catch (  SAXException e) { _EL_     throw new XNIException(e); _EL_   } _EL_ } _EL_ ', 'public void registerObserver(RuleChangesObserver observer){ _EL_   observers.add(observer); _EL_ } _EL_ ', 'private void sendUpdateHeartbeats(){ _EL_   HeartbeatServiceLocal heartbeat=_bartender.getHeartbeatLocal(); _EL_   if (heartbeat != null) { _EL_     heartbeat.updateHeartbeats(); _EL_   } _EL_ } _EL_ ', 'public void serialize(String name,byte[] message,OutputStream out) throws IOException { _EL_   byte[] header=new byte[4 + COMMAND_LEN + 4+ 4]; _EL_   uint32ToByteArrayBE(params.getPacketMagic(),header,0); _EL_   for (int i=0; i < name.length() && i < COMMAND_LEN; i++) { _EL_     header[4 + i]=(byte)(name.codePointAt(i) & 0xFF); _EL_   } _EL_   Utils.uint32ToByteArrayLE(message.length,header,4 + COMMAND_LEN); _EL_   byte[] hash=doubleDigest(message); _EL_   System.arraycopy(hash,0,header,4 + COMMAND_LEN + 4,4); _EL_   out.write(header); _EL_   out.write(message); _EL_   if (log.isDebugEnabled())   log.debug("Sending {} message: {}",name,bytesToHexString(header) + bytesToHexString(message)); _EL_ } _EL_ ', 'public SSLEngine initSslEngine(boolean client) throws Exception { _EL_   KeyStore keyStore=loadKeystore(properties.sslKeyStorePath(),properties.sslKeyStorePassword()); _EL_   KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()); _EL_   keyManagerFactory.init(keyStore,keyStoreKeyPass(properties)); _EL_   KeyStore trustStore; _EL_   if (properties.sslTrustStorePath() != null) { _EL_     LOGGER.debug("Using separate trust store"); _EL_     trustStore=loadKeystore(properties.sslTrustStorePath(),properties.sslTrustStorePassword()); _EL_   } _EL_  else { _EL_     trustStore=keyStore; _EL_     LOGGER.debug("Using key store as trust store"); _EL_   } _EL_   TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); _EL_   trustManagerFactory.init(trustStore); _EL_   KeyManager[] keyManagers=keyManagerFactory.getKeyManagers(); _EL_   TrustManager[] trustManagers=trustManagerFactory.getTrustManagers(); _EL_   SSLContext sslContext=SSLContext.getInstance("TLS"); _EL_   sslContext.init(keyManagers,trustManagers,null); _EL_   SSLEngine sslEngine=sslContext.createSSLEngine(); _EL_   sslEngine.setUseClientMode(client); _EL_   sslEngine.setWantClientAuth(true); _EL_   sslEngine.setEnabledProtocols(sslEngine.getSupportedProtocols()); _EL_   sslEngine.setEnabledCipherSuites(sslEngine.getSupportedCipherSuites()); _EL_   sslEngine.setEnableSessionCreation(true); _EL_   return sslEngine; _EL_ } _EL_ ', 'public GetBufferedRandomAccessSource(IRandomAccessSource source){ _EL_   this.source=source; _EL_   this.getBuffer=new byte[(int)Math.min(Math.max(source.length() / 4,1),4096)]; _EL_   this.getBufferStart=-1; _EL_   this.getBufferEnd=-1; _EL_ } _EL_ ', 'public ArgParser(String pName){ _EL_   programName=pName; _EL_   args=new Vector(); _EL_   args.add(new HelpArg()); _EL_ } _EL_ ', '@Override protected void drawAxisLine(Graphics2D g2,double cursor,Rectangle2D dataArea,RectangleEdge edge){ _EL_   Line2D axisLine=null; _EL_   double c=cursor; _EL_   if (edge == RectangleEdge.TOP) { _EL_     axisLine=new Line2D.Double(dataArea.getX(),c,dataArea.getMaxX(),c); _EL_   } _EL_  else   if (edge == RectangleEdge.BOTTOM) { _EL_     axisLine=new Line2D.Double(dataArea.getX(),c,dataArea.getMaxX(),c); _EL_   } _EL_  else   if (edge == RectangleEdge.LEFT) { _EL_     axisLine=new Line2D.Double(c,dataArea.getY(),c,dataArea.getMaxY()); _EL_   } _EL_  else   if (edge == RectangleEdge.RIGHT) { _EL_     axisLine=new Line2D.Double(c,dataArea.getY(),c,dataArea.getMaxY()); _EL_   } _EL_   g2.setPaint(getAxisLinePaint()); _EL_   g2.setStroke(getAxisLineStroke()); _EL_   Object saved=g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL); _EL_   g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE); _EL_   g2.draw(axisLine); _EL_   g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,saved); _EL_   boolean drawUpOrRight=false; _EL_   boolean drawDownOrLeft=false; _EL_   if (this.positiveArrowVisible) { _EL_     if (this.inverted) { _EL_       drawDownOrLeft=true; _EL_     } _EL_  else { _EL_       drawUpOrRight=true; _EL_     } _EL_   } _EL_   if (this.negativeArrowVisible) { _EL_     if (this.inverted) { _EL_       drawUpOrRight=true; _EL_     } _EL_  else { _EL_       drawDownOrLeft=true; _EL_     } _EL_   } _EL_   if (drawUpOrRight) { _EL_     double x=0.0; _EL_     double y=0.0; _EL_     Shape arrow=null; _EL_     if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) { _EL_       x=dataArea.getMaxX(); _EL_       y=cursor; _EL_       arrow=this.rightArrow; _EL_     } _EL_  else     if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) { _EL_       x=cursor; _EL_       y=dataArea.getMinY(); _EL_       arrow=this.upArrow; _EL_     } _EL_     AffineTransform transformer=new AffineTransform(); _EL_     transformer.setToTranslation(x,y); _EL_     Shape shape=transformer.createTransformedShape(arrow); _EL_     g2.fill(shape); _EL_     g2.draw(shape); _EL_   } _EL_   if (drawDownOrLeft) { _EL_     double x=0.0; _EL_     double y=0.0; _EL_     Shape arrow=null; _EL_     if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) { _EL_       x=dataArea.getMinX(); _EL_       y=cursor; _EL_       arrow=this.leftArrow; _EL_     } _EL_  else     if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) { _EL_       x=cursor; _EL_       y=dataArea.getMaxY(); _EL_       arrow=this.downArrow; _EL_     } _EL_     AffineTransform transformer=new AffineTransform(); _EL_     transformer.setToTranslation(x,y); _EL_     Shape shape=transformer.createTransformedShape(arrow); _EL_     g2.fill(shape); _EL_     g2.draw(shape); _EL_   } _EL_ } _EL_ ', 'public static void saveXStream(File saveTo,Object model,Instances header) throws Exception { _EL_   Vector<Object> v=new Vector<Object>(); _EL_   v.add(model); _EL_   if (header != null) { _EL_     v.add(header); _EL_   } _EL_   v.trimToSize(); _EL_   XStream.write(saveTo.getAbsolutePath(),v); _EL_ } _EL_ ', 'private void sortAndCollapse(){ _EL_   Collections.sort(mSpans); _EL_   mAddsSinceSort=0; _EL_   Iterator iter=mSpans.iterator(); _EL_   Span span=null; _EL_   if (iter.hasNext()) { _EL_     span=(Span)iter.next(); _EL_   } _EL_   while (iter.hasNext()) { _EL_     Span nextSpan=(Span)iter.next(); _EL_     if (span.subsume(nextSpan)) { _EL_       iter.remove(); _EL_     } _EL_  else { _EL_       span=nextSpan; _EL_     } _EL_   } _EL_ } _EL_ ', 'public int splitRandomly(ArrayModifiableDBIDs ind,int begin,int end,DoubleDataStore tpro,Random rand){ _EL_   final int nele=end - begin; _EL_   DBIDArrayIter it=ind.iter(); _EL_   double rs=tpro.doubleValue(it.seek(begin + rand.nextInt(nele))); _EL_   int minInd=begin, maxInd=end - 1; _EL_   while (minInd < maxInd) { _EL_     double currEle=tpro.doubleValue(it.seek(minInd)); _EL_     if (currEle > rs) { _EL_       while (minInd < maxInd && tpro.doubleValue(it.seek(maxInd)) > rs) { _EL_         maxInd--; _EL_       } _EL_       if (minInd == maxInd) { _EL_         break; _EL_       } _EL_       ind.swap(minInd,maxInd); _EL_       maxInd--; _EL_     } _EL_     minInd++; _EL_   } _EL_   if (minInd == end - 1) { _EL_     minInd=(begin + end) >>> 1; _EL_   } _EL_   return minInd; _EL_ } _EL_ ', 'public static String noPrefix(String path,String prefix){ _EL_   Objects.requireNonNull(path,"path must not be null"); _EL_   Objects.requireNonNull(prefix,"prefix must not be null"); _EL_   return path.startsWith(prefix) ? path.substring(prefix.length()) : path; _EL_ } _EL_ ', 'public void remove(IAdaptable a){ _EL_   children.remove(a); _EL_ } _EL_ ', 'public static IntStream concat(IntStream a,IntStream b){ _EL_   Objects.requireNonNull(a); _EL_   Objects.requireNonNull(b); _EL_   Spliterator.OfInt split=new Streams.ConcatSpliterator.OfInt(a.spliterator(),b.spliterator()); _EL_   IntStream stream=StreamSupport.intStream(split,a.isParallel() || b.isParallel()); _EL_   return stream.onClose(Streams.composedClose(a,b)); _EL_ } _EL_ ', 'public boolean equals(String expected,String actual){ _EL_   return framework.equals(expected,actual); _EL_ } _EL_ ', 'public LoginConfiguration forceAuth(String forceAuthReqParam){ _EL_   forceAuth=Boolean.parseBoolean(forceAuthReqParam); _EL_   return this; _EL_ } _EL_ ', 'public UserConfig fetch(UserConfig config){ _EL_   config.addCredentials(this); _EL_   String xml=POST(this.url + "/check-user",config.toXML()); _EL_   Element root=parse(xml); _EL_   if (root == null) { _EL_     return null; _EL_   } _EL_   try { _EL_     UserConfig user=new UserConfig(); _EL_     user.parseXML(root); _EL_     return user; _EL_   } _EL_  catch (  Exception exception) { _EL_     this.exception=SDKException.parseFailure(exception); _EL_     throw this.exception; _EL_   } _EL_ } _EL_ ', '@MethodDesc(description="Stops the replicator service",usage="stop") public void stop() throws Exception { _EL_   try { _EL_     handleEventSynchronous(new StopEvent()); _EL_     if (doneLatch != null) { _EL_       doneLatch.countDown(); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     logger.error("Stop operation failed",e); _EL_     throw new Exception(e.toString()); _EL_   } _EL_ } _EL_ ', 'public boolean writeCharacteristic(String address,String serviceUUID,String characteristicUUID,byte[] value){ _EL_   BluetoothGatt bluetoothGatt=mBluetoothGattMap.get(address); _EL_   if (bluetoothGatt != null) { _EL_     BluetoothGattService service=bluetoothGatt.getService(UUID.fromString(serviceUUID)); _EL_     BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID)); _EL_     characteristic.setValue(value); _EL_     return bluetoothGatt.writeCharacteristic(characteristic); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public String linkForMessage(ProtoElement element){ _EL_   if (isExternalFile(element.getFile())) { _EL_     String fullName=element.getFullName(); _EL_     return String.format("[%s]{@link external:\\"%s\\"}",fullName,fullName); _EL_   } _EL_  else { _EL_     String simpleName=element.getSimpleName(); _EL_     return String.format("[%s]{@link %s}",simpleName,simpleName); _EL_   } _EL_ } _EL_ ', 'public static <T>ArrayList<T> read(InputStream fileStream,String charsetName,ITransformer<String,T> transformer) throws FileNotFoundException { _EL_   Scanner scanner=new Scanner(fileStream,charsetName); _EL_   ArrayList<T> list=new ArrayList<>(); _EL_   while (scanner.hasNextLine()) { _EL_     String line=scanner.nextLine(); _EL_     list.add(transformer.transform(line)); _EL_   } _EL_   scanner.close(); _EL_   return list; _EL_ } _EL_ ', 'public TSink<byte[]> sendBytes(TStream<byte[]> stream){ _EL_   Objects.requireNonNull(stream,"stream"); _EL_   return sendBinary(stream,null); _EL_ } _EL_ ', 'private void sortBrokerItems(BrokerItem[] brokerItems,int sortType){ _EL_   Arrays.sort(brokerItems,BrokerItem.getComparatoryByType(sortType)); _EL_ } _EL_ ', 'protected boolean needToEscapeXMLSpecialCharacters(String hostEntityID,String remoteEntityID,String realm){ _EL_   return true; _EL_ } _EL_ ', 'private void updatePathConstraints(TestChromosome test){ _EL_   List<BranchCondition> pathCondition=ConcolicExecution.getSymbolicPath(test); _EL_   pathConditions.put(test,pathCondition); _EL_ } _EL_ ', 'public static boolean p2pLoader(ClassLoader ldr){ _EL_   return ldr instanceof GridDeploymentInfo; _EL_ } _EL_ ', 'private static String removeSubTrailers(String decodedSubject){ _EL_   int subStringStart=0; _EL_   int subStringEnd=decodedSubject.length(); _EL_   int originalSize=decodedSubject.length(); _EL_   int curPos=originalSize - 1; _EL_   while (true) { _EL_     char c=decodedSubject.charAt(curPos--); _EL_     if (c == WS) { _EL_       subStringEnd--; _EL_     } _EL_  else { _EL_       if (subStringEnd > FWD_PARENS.length() && decodedSubject.endsWith(FWD_PARENS)) { _EL_         subStringEnd-=FWD_PARENS.length(); _EL_       } _EL_       break; _EL_     } _EL_   } _EL_   decodedSubject=decodedSubject.substring(subStringStart,subStringEnd); _EL_   return decodedSubject; _EL_ } _EL_ ', 'boolean nextSource() throws IOException { _EL_   if (mSourceIt.hasNext()) { _EL_     final InputStream is=mSourceIt.next(); _EL_     if (is == null) { _EL_       mSource=null; _EL_       return false; _EL_     } _EL_  else { _EL_       mSource=new BufferedInputStream(is,FileUtils.BUFFERED_STREAM_SIZE); _EL_     } _EL_     mSourceClosed=false; _EL_     mInputBufferPosition=0; _EL_     mInputBufferLength=0; _EL_     mBufferLength=0; _EL_     mBufferPosition=0; _EL_     return true; _EL_   } _EL_   if (mSource != null) { _EL_     mSource.close(); _EL_   } _EL_   mSource=null; _EL_   return false; _EL_ } _EL_ ', 'public static byte[] bitmapToBytes(Bitmap bm){ _EL_   byte[] bytes=null; _EL_   if (bm != null) { _EL_     ByteArrayOutputStream baos=new ByteArrayOutputStream(); _EL_     bm.compress(Bitmap.CompressFormat.PNG,100,baos); _EL_     bytes=baos.toByteArray(); _EL_   } _EL_   return bytes; _EL_ } _EL_ ', 'public static String inflate(String name){ _EL_   return inflate(name,gPrefix); _EL_ } _EL_ ', 'public void addPriorityHandler(WarningHandler handler){ _EL_   _priorityHandlers.add(handler); _EL_ } _EL_ ', 'public void printLenString(String v) throws IOException { _EL_   if (v == null) { _EL_     os.write(0); _EL_     os.write(0); _EL_   } _EL_  else { _EL_     int len=v.length(); _EL_     os.write(len >> 8); _EL_     os.write(len); _EL_     printString(v,0,len); _EL_   } _EL_ } _EL_ ', '@Override public void write(Buffer buffer,boolean isEnd) throws IOException { _EL_   if (_s == null) { _EL_     buffer.free(); _EL_     return; _EL_   } _EL_   try { _EL_     _needsFlush=true; _EL_     if (buffer.isDirect()) { _EL_       _totalWriteBytes+=buffer.length(); _EL_       _s.write(buffer.direct()); _EL_       return; _EL_     } _EL_     _totalWriteBytes+=buffer.length(); _EL_     while (buffer.length() > 0) { _EL_       _writeBuffer.clear(); _EL_       buffer.read(_writeBuffer); _EL_       _writeBuffer.flip(); _EL_       _s.write(_writeBuffer); _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     IOException exn=ClientDisconnectException.create(this + ":" + e,e); _EL_     try { _EL_       close(); _EL_     } _EL_  catch (    IOException e1) { _EL_     } _EL_     throw exn; _EL_   } _EL_  finally { _EL_     buffer.free(); _EL_   } _EL_ } _EL_ ', "private static void skipMemberValue(int tag,ByteBuffer buf){ _EL_ switch (tag) { _EL_ case 'e': _EL_     buf.getInt(); _EL_   break; _EL_ case '@': _EL_ skipAnnotation(buf,true); _EL_ break; _EL_ case '[': _EL_ skipArray(buf); _EL_ break; _EL_ default : _EL_ buf.getShort(); _EL_ } _EL_ } _EL_ ", 'protected void recursiveNestedJoin(EventBean lookupEvent,int nestingOrderIndex,EventBean[] currentPath,Collection<EventBean[]> result,ExprEvaluatorContext exprEvaluatorContext){ _EL_   List<EventBean[]> nestedResult=new LinkedList<EventBean[]>(); _EL_   ExecNode nestedExecNode=childNodes.get(nestingOrderIndex); _EL_   nestedExecNode.process(lookupEvent,currentPath,nestedResult,exprEvaluatorContext); _EL_   boolean isLastStream=(nestingOrderIndex == nestingOrderLength - 1); _EL_   if (!isLastStream) { _EL_     for (    EventBean[] row : nestedResult) { _EL_       EventBean lookup=row[nestedStreams[nestingOrderIndex]]; _EL_       recursiveNestedJoin(lookup,nestingOrderIndex + 1,row,result,exprEvaluatorContext); _EL_     } _EL_     return; _EL_   } _EL_   for (  EventBean[] row : nestedResult) { _EL_     result.add(row); _EL_   } _EL_ } _EL_ ', 'public String generateDrop(String table){ _EL_   StringBuffer result=new StringBuffer(); _EL_   result.append("DROP TABLE "); _EL_   result.append(table); _EL_   result.append(";\\n"); _EL_   return result.toString(); _EL_ } _EL_ ', 'private void registerChildListeners(){ _EL_   Iterator<PropertyChangeListener> iter=fChildListeners.iterator(); _EL_   while (iter.hasNext()) { _EL_     PropertyChangeListener listener=iter.next(); _EL_     listener.register(); _EL_   } _EL_ } _EL_ ', 'boolean isScrollOutOfBounds(){ _EL_   return Float.compare(getScrollAmountOutOfBounds(mStackScrollP),0f) != 0; _EL_ } _EL_ ', 'public List<Instruction> reduceInstructions(final List<Instruction> instructions){ _EL_   lock.lock(); _EL_   try { _EL_     this.instructions=instructions; _EL_     stackSizeSimulator.buildStackSizes(instructions); _EL_     return reduceInstructionsInternal(instructions); _EL_   } _EL_   finally { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', 'protected boolean isLockedLocally(UUID newOwnerID){ _EL_   return thisNode.equals(getOwnerNode()) || thisNode.equals(newOwnerID); _EL_ } _EL_ ', 'private boolean tryToMove(float deltaY){ _EL_   if ((deltaY > 0 && mCurrentPos == 0)) { _EL_     if (DEBUG) { _EL_       Log.d(LOG_TAG,String.format("has reached the bottom")); _EL_     } _EL_     return false; _EL_   } _EL_   if ((deltaY < 0 && mCurrentPos == -mHeaderHeight)) { _EL_     if (DEBUG) { _EL_       Log.d(LOG_TAG,String.format("has reached the top")); _EL_     } _EL_     return false; _EL_   } _EL_   int to=mCurrentPos + (int)deltaY; _EL_   if (to < -mHeaderHeight) { _EL_     if (DEBUG) { _EL_       Log.d(LOG_TAG,String.format("over top")); _EL_     } _EL_     to=-mHeaderHeight; _EL_   } _EL_   if (to > 0) { _EL_     if (DEBUG) { _EL_       Log.d(LOG_TAG,String.format("over bottom")); _EL_     } _EL_     to=0; _EL_   } _EL_   return moveTo(to); _EL_ } _EL_ ', 'public void deletePoint(int position){ _EL_   int renderType=poly.getRenderType(); _EL_   Projection proj=getProjection(); _EL_   boolean needToHookUp=false; _EL_   if (position <= 0 && isEnclosed()) { _EL_     enclose(false); _EL_     needToHookUp=true; _EL_   } _EL_   if (renderType == OMGraphic.RENDERTYPE_LATLON) { _EL_     Debug.message("eomg","EditableOMPoly: removing point from lat/lon poly"); _EL_     if (proj != null) { _EL_       double[] ll=poly.getLatLonArray(); _EL_       double[] newll=new double[ll.length - 2]; _EL_       int actualPosition=(position == Integer.MAX_VALUE ? ll.length : position * 2); _EL_       if (actualPosition >= ll.length) { _EL_         System.arraycopy(ll,0,newll,0,ll.length - 2); _EL_         position=(ll.length - 2) / 2; _EL_       } _EL_  else       if (actualPosition <= 0) { _EL_         System.arraycopy(ll,2,newll,0,ll.length - 2); _EL_         position=0; _EL_       } _EL_  else { _EL_         System.arraycopy(ll,0,newll,0,actualPosition); _EL_         System.arraycopy(ll,actualPosition + 2,newll,actualPosition,ll.length - actualPosition - 2); _EL_       } _EL_       poly.setLocation(newll,poly.getUnits()); _EL_     } _EL_   } _EL_  else { _EL_     Debug.message("eomg","EditableOMPoly: removing point from x/y or offset poly"); _EL_     int currentLength=poly.xs.length; _EL_     int[] newxs=new int[currentLength - 1]; _EL_     int[] newys=new int[currentLength - 1]; _EL_     if (position >= currentLength) { _EL_       System.arraycopy(poly.xs,0,newxs,0,currentLength - 1); _EL_       System.arraycopy(poly.ys,0,newys,0,currentLength - 1); _EL_       position=currentLength - 1; _EL_     } _EL_  else     if (position <= 0) { _EL_       System.arraycopy(poly.xs,1,newxs,0,currentLength - 1); _EL_       System.arraycopy(poly.ys,1,newys,0,currentLength - 1); _EL_       position=0; _EL_     } _EL_  else { _EL_       System.arraycopy(poly.xs,0,newxs,0,position); _EL_       System.arraycopy(poly.xs,position + 1,newxs,position,currentLength - position - 1); _EL_       System.arraycopy(poly.ys,0,newys,0,position); _EL_       System.arraycopy(poly.ys,position + 1,newys,position,currentLength - position - 1); _EL_     } _EL_     if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) { _EL_       poly.setLocation(poly.lat,poly.lon,poly.getUnits(),newxs,newys); _EL_     } _EL_  else { _EL_       poly.setLocation(newxs,newys); _EL_     } _EL_   } _EL_   if (proj != null) { _EL_     poly.regenerate(proj); _EL_   } _EL_   GrabPoint gp=(GrabPoint)polyGrabPoints.remove(position); _EL_   if (gpo != null && gp != null) { _EL_     gpo.removeGrabPoint(gp); _EL_   } _EL_   if (needToHookUp) { _EL_     enclose(true); _EL_   } _EL_ } _EL_ ', '@Override public boolean deleteLeftWord(){ _EL_   mInputConnection.beginBatchEdit(); _EL_   if (mInputConnection.getSelectedText(0) != null) { _EL_     mInputConnection.commitText("",0); _EL_   } _EL_  else { _EL_     CharSequence beforeCursor=mInputConnection.getTextBeforeCursor(MAX_DELETABLE_CONTEXT,0); _EL_     if (beforeCursor != null) { _EL_       int beforeCursorLength=beforeCursor.length(); _EL_       Matcher m=WHITESPACE_AND_TOKEN.matcher(beforeCursor); _EL_       int lastIndex=0; _EL_       while (m.find()) { _EL_         lastIndex=beforeCursorLength == m.end() ? m.start() : m.end(); _EL_       } _EL_       if (lastIndex > 0) { _EL_         mInputConnection.deleteSurroundingText(beforeCursorLength - lastIndex,0); _EL_       } _EL_  else       if (beforeCursorLength < MAX_DELETABLE_CONTEXT) { _EL_         mInputConnection.deleteSurroundingText(beforeCursorLength,0); _EL_       } _EL_     } _EL_   } _EL_   mInputConnection.endBatchEdit(); _EL_   return true; _EL_ } _EL_ ', 'public static DataSet readContinuous(File file,char delimiter) throws IOException { _EL_   return readInContinuousData(file,delimiter,Collections.singleton("MULT")); _EL_ } _EL_ ', 'protected boolean arePathsContiguous(TreePath[] paths){ _EL_   if (rowMapper == null || paths.length < 2)   return true; _EL_  else { _EL_     BitSet bitSet=new BitSet(32); _EL_     int anIndex, counter, min; _EL_     int pathCount=paths.length; _EL_     int validCount=0; _EL_     TreePath[] tempPath=new TreePath[1]; _EL_     tempPath[0]=paths[0]; _EL_     min=rowMapper.getRowsForPaths(tempPath)[0]; _EL_     for (counter=0; counter < pathCount; counter++) { _EL_       if (paths[counter] != null) { _EL_         tempPath[0]=paths[counter]; _EL_         int[] rows=rowMapper.getRowsForPaths(tempPath); _EL_         if (rows == null) { _EL_           return false; _EL_         } _EL_         anIndex=rows[0]; _EL_         if (anIndex == -1 || anIndex < (min - pathCount) || anIndex > (min + pathCount))         return false; _EL_         if (anIndex < min)         min=anIndex; _EL_         if (!bitSet.get(anIndex)) { _EL_           bitSet.set(anIndex); _EL_           validCount++; _EL_         } _EL_       } _EL_     } _EL_     int maxCounter=validCount + min; _EL_     for (counter=min; counter < maxCounter; counter++)     if (!bitSet.get(counter))     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public FastStringReader(String s){ _EL_   this.str=s; _EL_   this.length=s.length(); _EL_ } _EL_ ', '@SuppressLint("DrawAllocation") @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){ _EL_   int widthMode=MeasureSpec.getMode(widthMeasureSpec); _EL_   int heightMode=MeasureSpec.getMode(heightMeasureSpec); _EL_   int maxWidth=MeasureSpec.getSize(widthMeasureSpec); _EL_   int maxHeight=MeasureSpec.getSize(heightMeasureSpec); _EL_   if (widthMode == MeasureSpec.UNSPECIFIED)   maxWidth=Integer.MAX_VALUE; _EL_   if (heightMode == MeasureSpec.UNSPECIFIED)   maxHeight=Integer.MAX_VALUE; _EL_   int paddingLeft=getPaddingLeft(); _EL_   int paddingTop=getPaddingTop(); _EL_   int paddingRight=getPaddingRight(); _EL_   int paddingBottom=getPaddingBottom(); _EL_   int maxRightBound=maxWidth - paddingRight; _EL_   int maxBottomBound=maxHeight - paddingBottom; _EL_   int left; _EL_   int top; _EL_   int right; _EL_   int bottom; _EL_   int rightBound=paddingLeft; _EL_   int maxRightNoPadding=rightBound; _EL_   int bottomBound; _EL_   int lastMaxBottom=paddingTop; _EL_   int maxBottom=lastMaxBottom; _EL_   int childWidth; _EL_   int childHeight; _EL_   int lineStartIndex=0; _EL_   int lineEndIndex=0; _EL_   rectList.clear(); _EL_   int childCount=getChildCount(); _EL_   for (int index=0; index < childCount; index++) { _EL_     final View child=getChildAt(index); _EL_     child.measure(MeasureSpec.UNSPECIFIED,MeasureSpec.UNSPECIFIED); _EL_     if (child.getVisibility() == View.GONE)     continue; _EL_     final AutoWrapLayout.LayoutParams lp=(AutoWrapLayout.LayoutParams)child.getLayoutParams(); _EL_     childWidth=child.getMeasuredWidth(); _EL_     childHeight=child.getMeasuredHeight(); _EL_     left=rightBound + lp.leftMargin; _EL_     right=left + childWidth; _EL_     rightBound=right + lp.rightMargin; _EL_     if (rightBound > maxRightBound) { _EL_       lineEndIndex=index; _EL_       adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,lineEndIndex); _EL_       if (maxBottom >= maxBottomBound)       break; _EL_       if (lineEndIndex == lineStartIndex) { _EL_         child.measure(MeasureSpec.makeMeasureSpec(maxWidth - paddingLeft - paddingRight- lp.leftMargin- lp.rightMargin,MeasureSpec.AT_MOST),MeasureSpec.UNSPECIFIED); _EL_         childWidth=child.getMeasuredWidth(); _EL_         childHeight=child.getMeasuredHeight(); _EL_       } _EL_       left=paddingLeft + lp.leftMargin; _EL_       right=left + childWidth; _EL_       rightBound=right + lp.rightMargin; _EL_       lastMaxBottom=maxBottom; _EL_       top=lastMaxBottom + lp.topMargin; _EL_       bottom=top + childHeight; _EL_       bottomBound=bottom + lp.bottomMargin; _EL_       lineStartIndex=index; _EL_     } _EL_  else { _EL_       top=lastMaxBottom + lp.topMargin; _EL_       bottom=top + childHeight; _EL_       bottomBound=bottom + lp.bottomMargin; _EL_     } _EL_     if (rightBound > maxRightNoPadding)     maxRightNoPadding=rightBound; _EL_     if (bottomBound > maxBottom)     maxBottom=bottomBound; _EL_     Rect rect=new Rect(); _EL_     rect.left=left; _EL_     rect.top=top; _EL_     rect.right=right; _EL_     rect.bottom=bottom; _EL_     rectList.add(rect); _EL_   } _EL_   adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,rectList.size()); _EL_   int measuredWidth; _EL_   int measuredHeight; _EL_   if (widthMode == MeasureSpec.EXACTLY)   measuredWidth=maxWidth; _EL_  else   measuredWidth=maxRightNoPadding + paddingRight; _EL_   if (heightMode == MeasureSpec.EXACTLY)   measuredHeight=maxHeight; _EL_  else { _EL_     measuredHeight=maxBottom + paddingBottom; _EL_     if (heightMode == MeasureSpec.AT_MOST)     measuredHeight=measuredHeight > maxHeight ? maxHeight : measuredHeight; _EL_   } _EL_   setMeasuredDimension(measuredWidth,measuredHeight); _EL_ } _EL_ ', 'public final void wait() throws java.lang.InterruptedException { _EL_   wait(0); _EL_ } _EL_ ', 'public QueryStringQueryBuilder field(String field,float boost){ _EL_   if (fields == null) { _EL_     fields=new ArrayList<>(); _EL_   } _EL_   fields.add(field); _EL_   if (fieldsBoosts == null) { _EL_     fieldsBoosts=new ObjectFloatHashMap<>(); _EL_   } _EL_   fieldsBoosts.put(field,boost); _EL_   return this; _EL_ } _EL_ ', 'public static String nowDateString(String format){ _EL_   SimpleDateFormat df=new SimpleDateFormat(format); _EL_   return df.format(new Date()); _EL_ } _EL_ ', 'public void registerSensor(Sensor s,int i){ _EL_   if ((i < 0) || (i > ((numInputCards() * bitsPerCard) - 1)) || (i > MAXSENSORS)) { _EL_     log.error("Unexpected sensor ordinal in registerSensor: " + Integer.toString(i + 1)); _EL_     return; _EL_   } _EL_   hasActiveSensors=true; _EL_   if (sensorArray[i] == null) { _EL_     sensorArray[i]=s; _EL_     if (lastUsedSensor < i) { _EL_       lastUsedSensor=i; _EL_     } _EL_   } _EL_  else { _EL_     log.warn("multiple registration of same sensor: CS" + Integer.toString((getNodeAddress() * SerialSensorManager.SENSORSPERUA) + i + 1)); _EL_   } _EL_ } _EL_ ', 'public final void sample(){ _EL_   long sum=_sum.getAndSet(0); _EL_   int count=_count.getAndSet(0); _EL_   if (count != 0)   _value=sum / (double)count; _EL_  else   _value=0; _EL_ } _EL_ ', 'public KeyImpl(KerberosPrincipal principal,char[] password,String algorithm){ _EL_   try { _EL_     PrincipalName princ=new PrincipalName(principal.getName()); _EL_     EncryptionKey key=new EncryptionKey(password,princ.getSalt(),algorithm); _EL_     this.keyBytes=key.getBytes(); _EL_     this.keyType=key.getEType(); _EL_   } _EL_  catch (  KrbException e) { _EL_     throw new IllegalArgumentException(e.getMessage()); _EL_   } _EL_ } _EL_ ', 'public boolean check(final Direction dir,final boolean facing){ _EL_   if (this.dir != dir) { _EL_     return false; _EL_   } _EL_   if (this.facing != facing) { _EL_     return false; _EL_   } _EL_   final long now=System.currentTimeMillis(); _EL_   if (now >= expiration) { _EL_     return false; _EL_   } _EL_   expiration=now + DELAY; _EL_   return true; _EL_ } _EL_ ', 'private void parse(String path) throws Exception { _EL_   if (path != null) { _EL_     count=path.length(); _EL_     data=new char[count]; _EL_     path.getChars(0,count,data,0); _EL_   } _EL_   path(); _EL_ } _EL_ ', 'protected synchronized void readDontVerify() throws IOException, FileEncryptionException { _EL_   if (backingRandomAccessFile.length() < headerSize()) { _EL_     throw new FileEncryptionException("Invalid file header"); _EL_   } _EL_   long oldpos=backingRandomAccessFile.getFilePointer(); _EL_   backingRandomAccessFile.seek(0); _EL_   byte[] header_data=new byte[headerSize() - FileHeader.AUTH_TAG_SIZE]; _EL_   backingRandomAccessFile.read(header_data); _EL_   backingRandomAccessFile.seek(oldpos); _EL_   DataInputStream istream=new DataInputStream(new ByteArrayInputStream(header_data)); _EL_   byte[] tmpmagic=new byte[PANBOX_FILE_MAGIC.length]; _EL_   istream.read(tmpmagic); _EL_   if (!Arrays.equals(tmpmagic,PANBOX_FILE_MAGIC)) { _EL_     throw new FileEncryptionException("Invalid magic number in file header"); _EL_   } _EL_   byte[] tmpversion=new byte[PANBOX_FILE_VERSION.length]; _EL_   istream.read(tmpversion); _EL_   if (!Arrays.equals(tmpversion,PANBOX_FILE_VERSION)) { _EL_     throw new FileEncryptionException("Invalid version in file header. Expected version is " + PANBOX_FILE_VERSION.toString()); _EL_   } _EL_   this.shareKeyVersion=istream.readInt(); _EL_   istream.close(); _EL_ } _EL_ ', 'private boolean isMediaTypeSupported(String media){ _EL_   for (int i=0; i < SUPPORTED_MEDIA_TYPES.length; i++) { _EL_     if (media.equalsIgnoreCase(SUPPORTED_MEDIA_TYPES[i])) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static boolean isNetworkAvailable(Context context){ _EL_   ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE); _EL_   NetworkInfo info=connectivityManager.getActiveNetworkInfo(); _EL_   return info != null && info.isConnected(); _EL_ } _EL_ ', 'public static String randomRegexpishString(Random r){ _EL_   return randomRegexpishString(r,20); _EL_ } _EL_ ', 'public List<ExpectedPartitionValueEntity> createExpectedPartitionValueEntities(String partitionKeyGroupName,List<String> expectedPartitionValues){ _EL_   PartitionKeyGroupEntity partitionKeyGroupEntity=partitionKeyGroupDao.getPartitionKeyGroupByName(partitionKeyGroupName); _EL_   if (partitionKeyGroupEntity == null) { _EL_     partitionKeyGroupEntity=partitionKeyGroupDaoTestHelper.createPartitionKeyGroupEntity(partitionKeyGroupName); _EL_   } _EL_   List<ExpectedPartitionValueEntity> expectedPartitionValueEntities=new ArrayList<>(); _EL_   for (  String expectedPartitionValue : expectedPartitionValues) { _EL_     ExpectedPartitionValueEntity expectedPartitionValueEntity=new ExpectedPartitionValueEntity(); _EL_     expectedPartitionValueEntity.setPartitionKeyGroup(partitionKeyGroupEntity); _EL_     expectedPartitionValueEntity.setPartitionValue(expectedPartitionValue); _EL_     expectedPartitionValueEntities.add(expectedPartitionValueDao.saveAndRefresh(expectedPartitionValueEntity)); _EL_   } _EL_   return expectedPartitionValueEntities; _EL_ } _EL_ ', 'public static LowMemoryWatcher register(@NotNull Runnable runnable){ _EL_   return new LowMemoryWatcher(runnable); _EL_ } _EL_ ', 'public void writeData(DataOutput dout) throws IOException { _EL_   dout.write(getMessage()); _EL_ } _EL_ ', 'public Object extractHardRef(Object o){ _EL_   SoftReference w=(SoftReference)o; _EL_   if (w != null) { _EL_     return w.get(); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static void uncontribute(ComponentAddon component){ _EL_   contributedComponents.remove(component); _EL_   if (currentAddon != null) { _EL_     component.uninitialize(currentAddon); _EL_   } _EL_ } _EL_ ', 'public synchronized int copyDirect(int pageId,OutputStream out) throws IOException { _EL_   byte[] buffer=new byte[pageSize]; _EL_   if (pageId >= pageCount) { _EL_     return -1; _EL_   } _EL_   file.seek((long)pageId << pageSizeShift); _EL_   file.readFullyDirect(buffer,0,pageSize); _EL_   readCount++; _EL_   out.write(buffer,0,pageSize); _EL_   return pageId + 1; _EL_ } _EL_ ', 'public void writeRawBytes(final byte[] value,int offset,int length) throws IOException { _EL_   if (limit - position >= length) { _EL_     System.arraycopy(value,offset,buffer,position,length); _EL_     position+=length; _EL_   } _EL_  else { _EL_     throw new OutOfSpaceException(position,limit); _EL_   } _EL_ } _EL_ ', 'private void assertBackupStatus(final BackupStatus backupStatus){ _EL_   Map<DistributedMember,Set<PersistentID>> backupMap=backupStatus.getBackedUpDiskStores(); _EL_   assertFalse(backupMap.isEmpty()); _EL_   for (  DistributedMember member : backupMap.keySet()) { _EL_     for (    PersistentID id : backupMap.get(member)) { _EL_       assertNotNull(id.getHost()); _EL_       assertNotNull(id.getUUID()); _EL_       assertNotNull(id.getDirectory()); _EL_     } _EL_   } _EL_ } _EL_ ', '@RequestMapping(value="/SAML2/Metadata/{tenant:.*}") public void metadataError(Locale locale,@PathVariable(value="tenant") String tenant,HttpServletResponse response) throws IOException { _EL_   logger.info("Metadata binding error! The client locale is {}, tenant is {}",locale.toString(),tenant); _EL_   metadataDefaultTenantBindingError(locale,response); _EL_ } _EL_ ', 'public synchronized void checkState(State... requiredStates) throws IllegalStateException { _EL_   for (  State requiredState : requiredStates) { _EL_     if (requiredState.equals(currentState)) { _EL_       return; _EL_     } _EL_   } _EL_   throw new IllegalStateException(String.format(Locale.US,"Expected states %s, but in state %s",Lists.newArrayList(requiredStates),currentState)); _EL_ } _EL_ ', 'public void sortMovies(){ _EL_ synchronized (movies) { _EL_     Utils.sortList(movies,MOVIE_SET_COMPARATOR); _EL_     movieIds.clear(); _EL_     for (    Movie movie : movies) { _EL_       movieIds.add(movie.getDbId()); _EL_     } _EL_   } _EL_   firePropertyChange("movies",null,movies); _EL_ } _EL_ ', 'public KeyValueListParser(String pairDelimiterRegex,String keyValDelimiterRegex){ _EL_   pairDelimiter=Pattern.compile(pairDelimiterRegex); _EL_   keyValDelimiter=Pattern.compile(keyValDelimiterRegex); _EL_ } _EL_ ', 'private synchronized boolean pollStatsBroker(Destination queue){ _EL_   statsMessageListener.setDestination(queue); _EL_   Timestamp timestamp=new Timestamp(System.currentTimeMillis()); _EL_   LOGGER.debug("Setting the destination to " + getQueueName(queue) + " at "+ timestamp); _EL_   jmsTemplate.execute(STATS_BROKER_DESTINATION + getQueueName(queue),new ProducerCallbackImpl(statsQueue)); _EL_   try { _EL_     Thread.sleep(3 * 1000); _EL_   } _EL_  catch (  InterruptedException e) { _EL_     e.printStackTrace(); _EL_   } _EL_   return statsMessageListener.getStats() != null; _EL_ } _EL_ ', "public File makeAcceptable(File pathname){ _EL_   if (accept(pathname)) { _EL_     return pathname; _EL_   } _EL_  else { _EL_     return new File(pathname.getPath() + '.' + defaultExtension); _EL_   } _EL_ } _EL_ ", 'private static int handleDpadVertical(int iconIndex,int cntX,int cntY,int[][] matrix,int increment){ _EL_   int newIconIndex=NOOP; _EL_   if (matrix == null) { _EL_     throw new IllegalStateException("Dpad navigation requires a matrix."); _EL_   } _EL_   int xPos=-1; _EL_   int yPos=-1; _EL_   for (int i=0; i < cntX; i++) { _EL_     for (int j=0; j < cntY; j++) { _EL_       if (matrix[i][j] == iconIndex) { _EL_         xPos=i; _EL_         yPos=j; _EL_       } _EL_     } _EL_   } _EL_   if (DEBUG) { _EL_     Log.v(TAG,String.format("\\thandleDpadVertical: \\t[x, y]=[%d, %d] iconIndex=%d",xPos,yPos,iconIndex)); _EL_   } _EL_   for (int y=yPos + increment; 0 <= y && y < cntY && 0 <= y; y+=increment) { _EL_     if ((newIconIndex=inspectMatrix(xPos,y,cntX,cntY,matrix)) != NOOP && newIconIndex != ALL_APPS_COLUMN) { _EL_       return newIconIndex; _EL_     } _EL_   } _EL_   int nextXPos1; _EL_   int nextXPos2; _EL_   boolean haveCrossedAllAppsColumn1=false; _EL_   boolean haveCrossedAllAppsColumn2=false; _EL_   int y=-1; _EL_   for (int coeff=1; coeff < cntX; coeff++) { _EL_     nextXPos1=xPos + coeff * increment; _EL_     nextXPos2=xPos - coeff * increment; _EL_     y=yPos + increment * coeff; _EL_     if (inspectMatrix(nextXPos1,y,cntX,cntY,matrix) == ALL_APPS_COLUMN) { _EL_       haveCrossedAllAppsColumn1=true; _EL_     } _EL_     if (inspectMatrix(nextXPos2,y,cntX,cntY,matrix) == ALL_APPS_COLUMN) { _EL_       haveCrossedAllAppsColumn2=true; _EL_     } _EL_     for (; 0 <= y && y < cntY; y=y + increment) { _EL_       int offset1=haveCrossedAllAppsColumn1 && y < cntY - 1 ? increment : 0; _EL_       newIconIndex=inspectMatrix(nextXPos1 + offset1,y,cntX,cntY,matrix); _EL_       if (newIconIndex != NOOP) { _EL_         return newIconIndex; _EL_       } _EL_       int offset2=haveCrossedAllAppsColumn2 && y < cntY - 1 ? -increment : 0; _EL_       newIconIndex=inspectMatrix(nextXPos2 + offset2,y,cntX,cntY,matrix); _EL_       if (newIconIndex != NOOP) { _EL_         return newIconIndex; _EL_       } _EL_     } _EL_   } _EL_   return newIconIndex; _EL_ } _EL_ ', 'private static boolean edgeIntersectsCellBoundary(S2Point a,S2Point b,S2Cell cell){ _EL_   S2Point[] vertices=new S2Point[4]; _EL_   for (int i=0; i < 4; ++i) { _EL_     vertices[i]=cell.getVertex(i); _EL_   } _EL_   for (int i=0; i < 4; ++i) { _EL_     S2Point fromPoint=vertices[i]; _EL_     S2Point toPoint=vertices[(i + 1) % 4]; _EL_     if (lenientCrossing(a,b,fromPoint,toPoint)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'protected void updateOverlayContents(LookAt lookAt,Camera camera){ _EL_   latView.setText(formatLatitude(lookAt.latitude)); _EL_   lonView.setText(formatLongitude(lookAt.longitude)); _EL_   altView.setText(formatAltitude(camera.altitude)); _EL_ } _EL_ ', 'public String jsTypeName(TypeRef typeRef){ _EL_ switch (typeRef.getKind()) { _EL_ case TYPE_MESSAGE: _EL_     return "Object"; _EL_ case TYPE_ENUM: _EL_   return "number"; _EL_ default : _EL_ { _EL_   String name=PRIMITIVE_TYPE_NAMES.get(typeRef.getKind()); _EL_   if (!Strings.isNullOrEmpty(name)) { _EL_     return name; _EL_   } _EL_   throw new IllegalArgumentException("unknown type kind: " + typeRef.getKind()); _EL_ } _EL_ } _EL_ } _EL_ ', 'public StateMachine createStateMachine(StateMachineDefinition stateMachineDefinition){ _EL_   final Map<EventDefinition,EventData> eventDataMap=stateMachineDefinition.getEventDataMap(); _EL_   Set<Event> allEvents=createAllEvents(eventDataMap); _EL_   Set<StateDefinition> stateDefinitions=stateMachineDefinition.getStates(); _EL_   Set<State> states=new HashSet<>(); _EL_   for (  StateDefinition stateDefinition : stateDefinitions) { _EL_     State state=convertStateDefinitionToState(stateDefinition); _EL_     states.add(state); _EL_   } _EL_   StateMachine stateMachine=new StateMachine(stateMachineDefinition.getVersion(),stateMachineDefinition.getName(),stateMachineDefinition.getDescription(),states,stateMachineDefinition.getCorrelationId()); _EL_   stateMachinesDAO.create(stateMachine); _EL_   for (  Event event : allEvents) { _EL_     event.setStateMachineInstanceId(stateMachine.getId()); _EL_     eventPersistenceService.persistEvent(event); _EL_   } _EL_   for (  State state : stateMachine.getStates()) { _EL_     auditDAO.create(new AuditRecord(stateMachine.getId(),state.getId(),0L,Status.initialized,null,null)); _EL_   } _EL_   return stateMachine; _EL_ } _EL_ ', 'public Shape triangle_right(float x,float y,float height){ _EL_   m_path.reset(); _EL_   m_path.moveTo(x,y + height); _EL_   m_path.lineTo(x + height,y + height / 2); _EL_   m_path.lineTo(x,y); _EL_   m_path.closePath(); _EL_   return m_path; _EL_ } _EL_ ', 'public static terminal find(String with_name){ _EL_   if (with_name == null)   return null; _EL_  else   return (terminal)_all.get(with_name); _EL_ } _EL_ ', 'public LayoutBlock createNewLayoutBlock(String systemName,String userName){ _EL_   LayoutBlock block=null; _EL_   if (userName == null || userName.equals("")) { _EL_     log.error("Attempt to create a LayoutBlock with no user name"); _EL_     return null; _EL_   } _EL_   block=getByUserName(userName); _EL_   if (block != null) { _EL_     return null; _EL_   } _EL_   String sName=""; _EL_   if (systemName == null) { _EL_     boolean found=true; _EL_     while (found) { _EL_       sName="ILB" + blkNum; _EL_       blkNum++; _EL_       block=getBySystemName(sName); _EL_       if (block == null) { _EL_         found=false; _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     block=getBySystemName((systemName.toUpperCase())); _EL_     if (block != null) { _EL_       return null; _EL_     } _EL_     sName=systemName.toUpperCase(); _EL_   } _EL_   block=new LayoutBlock(sName,userName); _EL_   register(block); _EL_   return block; _EL_ } _EL_ ', '@Override public void modifyNonstaticJPedalParameters(final Map values) throws PdfException { _EL_   options.set(values); _EL_   if (values.containsKey(JPedalSettings.DISPLAY_BACKGROUND)) { _EL_   } _EL_ } _EL_ ', 'public static String escapeRegex(final String regex){ _EL_   Matcher match=REGEX_CHARS.matcher(regex); _EL_   return match.replaceAll("\\\\\\\\$1"); _EL_ } _EL_ ', 'public CharBuffer(String string){ _EL_   int length=string.length(); _EL_   int capacity=length + MIN_CAPACITY; _EL_   init(new char[capacity],0,length); _EL_   string.getChars(0,length,buffer(),0); _EL_ } _EL_ ', 'private void updatePromoVisibility(float percentage){ _EL_   if (isPromoAvailable()) { _EL_     mPromoVisible=true; _EL_     mPromoHeightPx=Math.round(MathUtils.clamp(percentage * mPromoContentHeightPx,0.f,mPromoContentHeightPx)); _EL_     mPromoOpacity=percentage; _EL_   } _EL_  else { _EL_     mPromoVisible=false; _EL_     mPromoHeightPx=0.f; _EL_     mPromoOpacity=0.f; _EL_   } _EL_ } _EL_ ', 'private ValueGeometry(byte[] bytes,Geometry geometry){ _EL_   this.bytes=bytes; _EL_   this.geometry=geometry; _EL_   this.hashCode=Arrays.hashCode(bytes); _EL_ } _EL_ ', '@Override public void do_after_propagation(){ _EL_   for (  HeapInsIntervalManager im : new_pts.values()) { _EL_     im.flush(); _EL_   } _EL_   new_pts=new HashMap<AllocNode,HeapInsIntervalManager>(); _EL_ } _EL_ ', 'private void finishCommon(){ _EL_   if (!unknownSubjects.isEmpty()) { _EL_     if (statements.isEmpty() && restoredStatements.isEmpty()) { _EL_       throw new BadSubjectException(unknownSubjects.keySet(),uris); _EL_     } _EL_  else { _EL_       log.info("Unrecognized subjects: {}.  Expected only sitelinks and subjects starting with {} and {}",unknownSubjects.keySet(),uris.entityData(),uris.entity()); _EL_     } _EL_   } _EL_   if (revisionId == null) { _EL_     throw new ContainedException("Didn\'t get a revision id for " + statements); _EL_   } _EL_   if (lastModified == null) { _EL_     throw new ContainedException("Didn\'t get a last modified date for " + statements); _EL_   } _EL_   for (  Pair<URI,Literal> dataStatement : dataStatements) { _EL_     statements.add(new StatementImpl(entityUriImpl,dataStatement.getLeft(),dataStatement.getRight())); _EL_   } _EL_   statements.addAll(restoredStatements); _EL_ } _EL_ ', 'public static final void showGUIMessage(final String user_message,final BufferedImage image,final String title){ _EL_   if (image == null) { _EL_     return; _EL_   } _EL_   final ImagePanel display=new ImagePanel(image); _EL_   display.setLayout(new BorderLayout()); _EL_   if (user_message != null) { _EL_     display.add(new JLabel(user_message),BorderLayout.SOUTH); _EL_   } _EL_   final int width=image.getWidth(); _EL_   final int height=image.getHeight(); _EL_   display.setSize(new Dimension(width + 10,height + 10)); _EL_   JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE); _EL_ } _EL_ ', 'private void baselineLayout(int origin,int size){ _EL_   int ascent; _EL_   int descent; _EL_   if (baselineAnchoredToTop) { _EL_     ascent=prefAscent; _EL_     descent=size - ascent; _EL_   } _EL_  else { _EL_     ascent=size - prefDescent; _EL_     descent=prefDescent; _EL_   } _EL_   for (  Spring spring : springs) { _EL_     Alignment alignment=spring.getAlignment(); _EL_     if (alignment == null || alignment == Alignment.BASELINE) { _EL_       int baseline=spring.getBaseline(); _EL_       if (baseline >= 0) { _EL_         int springMax=spring.getMaximumSize(VERTICAL); _EL_         int springPref=spring.getPreferredSize(VERTICAL); _EL_         int height=springPref; _EL_         int y; _EL_ switch (spring.getBaselineResizeBehavior()) { _EL_ case CONSTANT_ASCENT: _EL_           y=origin + ascent - baseline; _EL_         height=Math.min(descent,springMax - baseline) + baseline; _EL_       break; _EL_ case CONSTANT_DESCENT: _EL_     height=Math.min(ascent,springMax - springPref + baseline) + (springPref - baseline); _EL_   y=origin + ascent + (springPref - baseline) - height; _EL_ break; _EL_ default : _EL_ y=origin + ascent - baseline; _EL_ break; _EL_ } _EL_ spring.setSize(VERTICAL,y,height); _EL_ } _EL_  else { _EL_ setChildSize(spring,VERTICAL,origin,size); _EL_ } _EL_ } _EL_  else { _EL_ setChildSize(spring,VERTICAL,origin,size); _EL_ } _EL_ } _EL_ } _EL_ ', 'public static int readInt(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException { _EL_   if (required) { _EL_     return jsonArray.getInt(index); _EL_   } _EL_   if (notNull && jsonArray.isNull(index)) { _EL_     throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index)); _EL_   } _EL_   int value=0; _EL_   if (!jsonArray.isNull(index)) { _EL_     value=jsonArray.getInt(index); _EL_   } _EL_   return value; _EL_ } _EL_ ', 'private void unregisterDependent(Preference dependent){ _EL_   if (mDependents != null) { _EL_     mDependents.remove(dependent); _EL_   } _EL_ } _EL_ ', 'private void validateStoragePolicySelection(StoragePolicySelection storagePolicySelection){ _EL_   Assert.notNull(storagePolicySelection,"A storage policy selection must be specified."); _EL_   businessObjectDataHelper.validateBusinessObjectDataKey(storagePolicySelection.getBusinessObjectDataKey(),true,true); _EL_   storagePolicyHelper.validateStoragePolicyKey(storagePolicySelection.getStoragePolicyKey()); _EL_   Assert.notNull(storagePolicySelection.getStoragePolicyVersion(),"A storage policy version must be specified."); _EL_ } _EL_ ', 'public static Object toArray(Collection<?> collection,Class<?> componentType){ _EL_   if (componentType.isPrimitive()) { _EL_     Object array=Array.newInstance(componentType,collection.size()); _EL_     int index=0; _EL_     for (    Object value : collection) { _EL_       Array.set(array,index++,value); _EL_     } _EL_     return array; _EL_   } _EL_   return collection.toArray((Object[])Array.newInstance(componentType,collection.size())); _EL_ } _EL_ ', 'GradleException formatViolationsFor(Formatter formatter,List<File> problemFiles) throws IOException { _EL_   return new GradleException(DiffMessageFormatter.messageFor(this,formatter,problemFiles)); _EL_ } _EL_ ', 'public void labelDistances(Hypergraph<V,E> graph,V root){ _EL_   labelDistances(graph,Collections.singleton(root)); _EL_ } _EL_ ', 'public int position(){ _EL_   return lineBuffer == null ? 0 : lineBuffer.length(); _EL_ } _EL_ ', 'public void addFrequency(Frequency frequency){ _EL_   frequencies.add(frequency); _EL_ } _EL_ ', 'public final static HeaderElement parseHeaderElement(final String value,HeaderValueParser parser) throws ParseException { _EL_   if (value == null) { _EL_     throw new IllegalArgumentException("Value to parse may not be null"); _EL_   } _EL_   if (parser == null)   parser=SaveHeaderValueParser.DEFAULT; _EL_   CharArrayBuffer buffer=new CharArrayBuffer(value.length()); _EL_   buffer.append(value); _EL_   SaveParserCursor cursor=new SaveParserCursor(0,value.length()); _EL_   return parser.parseHeaderElement(buffer,cursor); _EL_ } _EL_ ', 'public static List<Interval> sliceIntervals(Interval interval,TimeGrain timeGrain){ _EL_   DateTime intervalEnd=interval.getEnd(); _EL_   DateTime sliceStart=interval.getStart(); _EL_   DateTime periodStart=timeGrain.roundFloor(sliceStart); _EL_   if (!sliceStart.equals(periodStart)) { _EL_     LOG.info("Interval {} is not aligned to TimeGrain {} starting {}",interval,timeGrain,periodStart); _EL_     throw new IllegalArgumentException("Interval must be aligned to the TimeGrain starting " + periodStart); _EL_   } _EL_   List<Interval> intervalSlices=new ArrayList<>(); _EL_   while (sliceStart.isBefore(intervalEnd)) { _EL_     DateTime sliceEnd=DateTimeUtils.addTimeGrain(sliceStart,timeGrain); _EL_     Interval slicedInterval=new Interval(sliceStart,sliceEnd); _EL_     if (!interval.contains(slicedInterval)) { _EL_       LOG.info("Interval {} is not a multiple of TimeGrain {}",interval,timeGrain); _EL_       throw new IllegalArgumentException("Interval must be a multiple of the TimeGrain"); _EL_     } _EL_     intervalSlices.add(slicedInterval); _EL_     sliceStart=sliceEnd; _EL_   } _EL_   LOG.debug("Sliced interval {} into {} slices of {} grain",interval,intervalSlices.size(),timeGrain); _EL_   return intervalSlices; _EL_ } _EL_ ', 'public boolean isGerund(){ _EL_   return typeString.startsWith(VERB_GERUND); _EL_ } _EL_ ', 'private JsonObject createRequest(Map<String,Object> headers,String uri,HttpMethod method,JsonObject payload){ _EL_   JsonObject request=new JsonObject(); _EL_   JsonArray jsonHeaders=new JsonArray(); _EL_   headers.forEach(null); _EL_   request.put("headers",jsonHeaders); _EL_   request.put("uri",uri); _EL_   request.put("method",method.toString()); _EL_   request.put("payload",payload); _EL_   return request; _EL_ } _EL_ ', 'private long downloadTlogFiles(File tmpTlogDir,long latestGeneration) throws Exception { _EL_   LOG.info("Starting download of tlog files from master: " + tlogFilesToDownload); _EL_   tlogFilesDownloaded=Collections.synchronizedList(new ArrayList<>()); _EL_   long bytesDownloaded=0; _EL_   boolean status=tmpTlogDir.mkdirs(); _EL_   if (!status) { _EL_     throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Failed to create temporary tlog folder: " + tmpTlogDir.getName()); _EL_   } _EL_   for (  Map<String,Object> file : tlogFilesToDownload) { _EL_     String saveAs=(String)(file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS)); _EL_     localFileFetcher=new LocalFsFileFetcher(tmpTlogDir,file,saveAs,TLOG_FILE,latestGeneration); _EL_     currentFile=file; _EL_     localFileFetcher.fetchFile(); _EL_     bytesDownloaded+=localFileFetcher.getBytesDownloaded(); _EL_     tlogFilesDownloaded.add(new HashMap<>(file)); _EL_   } _EL_   return bytesDownloaded; _EL_ } _EL_ ', 'protected void addAllForReplay(Collection<Participant> participants){ _EL_   Iterator<Participant> it=participants.iterator(); _EL_   while (it.hasNext()) { _EL_     Participant p=it.next(); _EL_     replayCompletion(p); _EL_   } _EL_ } _EL_ ', 'public static JPanel createCheckbox(String boxlabel,String[] buttons,boolean[] checked,ActionListener al){ _EL_   JPanel jp=createPaletteJPanel(boxlabel); _EL_   for (int j=0; j < buttons.length; j++) { _EL_     JCheckBox jcb=new JCheckBox(buttons[j]); _EL_     jcb.setActionCommand(Integer.toString(j)); _EL_     if (al != null)     jcb.addActionListener(al); _EL_     jcb.setSelected(checked[j]); _EL_     jp.add(jcb); _EL_   } _EL_   return jp; _EL_ } _EL_ ', 'public static double assignProbabilitiesToInstances(Relation<? extends NumberVector> relation,List<? extends EMClusterModel<?>> models,WritableDataStore<double[]> probClusterIGivenX){ _EL_   final int k=models.size(); _EL_   double emSum=0.; _EL_   for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) { _EL_     NumberVector vec=relation.get(iditer); _EL_     double[] probabilities=new double[k]; _EL_ { _EL_       int i=0; _EL_       for (      EMClusterModel<?> m : models) { _EL_         probabilities[i]=m.estimateDensity(vec); _EL_         ++i; _EL_       } _EL_     } _EL_     double priorProbability=0.; _EL_     for (int i=0; i < k; i++) { _EL_       priorProbability+=probabilities[i]; _EL_     } _EL_     double logP=Math.max(Math.log(priorProbability),MIN_LOGLIKELIHOOD); _EL_     emSum+=(logP == logP) ? logP : 0.; _EL_     double[] clusterProbabilities=new double[k]; _EL_     if (priorProbability > 0.) { _EL_       for (int i=0; i < k; i++) { _EL_         clusterProbabilities[i]=probabilities[i] / priorProbability; _EL_       } _EL_     } _EL_     probClusterIGivenX.put(iditer,clusterProbabilities); _EL_   } _EL_   return emSum / relation.size(); _EL_ } _EL_ ', 'public static String asString(URI value){ _EL_   return value != null ? value.toString() : null; _EL_ } _EL_ ', 'public Kernel(int offset,double[] values){ _EL_   this.values=Arrays.copyOf(values,values.length); _EL_   this.offset=offset; _EL_ } _EL_ ', 'private void initializeWorkList(){ _EL_   for (  GVCongruenceClass c : B) { _EL_     if (c.size() == 1) { _EL_       continue; _EL_     } _EL_     Iterator<ValueGraphVertex> i=c.iterator(); _EL_     ValueGraphVertex first=i.next(); _EL_     while (i.hasNext()) { _EL_       ValueGraphVertex v=i.next(); _EL_       if (!checkCongruence(first,v)) { _EL_         workList.push(c); _EL_         break; _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', '@Override protected void beforeModelLinked(EObject model,IDiagnosticConsumer diagnosticsConsumer){ _EL_   ImportedNamesAdapter adapter=ImportedNamesAdapter.find(model.eResource()); _EL_   if (adapter != null)   adapter.clear(); _EL_   UnionMemberScope.clearCachedComposedMembers(model); _EL_ } _EL_ ', 'public void convertInfixToPostfix(String infixExp) throws Exception { _EL_   m_originalInfix=infixExp; _EL_   infixExp=Utils.removeSubstring(infixExp," "); _EL_   infixExp=Utils.replaceSubstring(infixExp,"log","l"); _EL_   infixExp=Utils.replaceSubstring(infixExp,"abs","b"); _EL_   infixExp=Utils.replaceSubstring(infixExp,"cos","c"); _EL_   infixExp=Utils.replaceSubstring(infixExp,"exp","e"); _EL_   infixExp=Utils.replaceSubstring(infixExp,"sqrt","s"); _EL_   infixExp=Utils.replaceSubstring(infixExp,"floor","f"); _EL_   infixExp=Utils.replaceSubstring(infixExp,"ceil","h"); _EL_   infixExp=Utils.replaceSubstring(infixExp,"rint","r"); _EL_   infixExp=Utils.replaceSubstring(infixExp,"tan","t"); _EL_   infixExp=Utils.replaceSubstring(infixExp,"sin","n"); _EL_   StringTokenizer tokenizer=new StringTokenizer(infixExp,OPERATORS,true); _EL_   m_postFixExpVector=new Vector<ExpressionComponent>(); _EL_   while (tokenizer.hasMoreTokens()) { _EL_     String tok=tokenizer.nextToken(); _EL_     if (tok.length() > 1) { _EL_       handleOperand(tok); _EL_     } _EL_  else { _EL_       if (isOperator(tok.charAt(0))) { _EL_         handleOperator(tok); _EL_       } _EL_  else { _EL_         handleOperand(tok); _EL_       } _EL_     } _EL_     m_previousTok=tok; _EL_   } _EL_   while (!m_operatorStack.empty()) { _EL_     String popop=(String)(m_operatorStack.pop()); _EL_     if (popop.charAt(0) == \'(\' || popop.charAt(0) == \')\') { _EL_       throw new Exception("Mis-matched parenthesis!"); _EL_     } _EL_     m_postFixExpVector.addElement(new Operator(popop.charAt(0))); _EL_   } _EL_ } _EL_ ', 'public boolean hasItem(T object){ _EL_ synchronized (mLock) { _EL_     return source.contains(object); _EL_   } _EL_ } _EL_ ', 'private static boolean versionMatches(Integer v1,int v2){ _EL_   if (v1 == null || v1 == 0 || v2 == 0) { _EL_     return true; _EL_   } _EL_   return v1.equals(v2); _EL_ } _EL_ ', 'private void onSchemaComplexType(Element schemaComplexType,DatatypeElementFactory elementFactory){ _EL_   Iterator<Element> iter=schemaComplexType.elementIterator(XSD_ATTRIBUTE); _EL_   while (iter.hasNext()) { _EL_     Element xsdAttribute=iter.next(); _EL_     String name=xsdAttribute.attributeValue("name"); _EL_     QName qname=getQName(name); _EL_     XSDatatype dataType=dataTypeForXsdAttribute(xsdAttribute); _EL_     if (dataType != null) { _EL_       elementFactory.setAttributeXSDatatype(qname,dataType); _EL_     } _EL_   } _EL_   Element schemaSequence=schemaComplexType.element(XSD_SEQUENCE); _EL_   if (schemaSequence != null) { _EL_     onChildElements(schemaSequence,elementFactory); _EL_   } _EL_   Element schemaChoice=schemaComplexType.element(XSD_CHOICE); _EL_   if (schemaChoice != null) { _EL_     onChildElements(schemaChoice,elementFactory); _EL_   } _EL_   Element schemaAll=schemaComplexType.element(XSD_ALL); _EL_   if (schemaAll != null) { _EL_     onChildElements(schemaAll,elementFactory); _EL_   } _EL_ } _EL_ ', 'private void pushAnnotatorsRef(String values){ _EL_   annotatorsRef.push(annotatorsRef.peek()); _EL_   setAnnotatorsRef(values); _EL_ } _EL_ ', 'public String versionCompact(){ _EL_   return properties.getProperty("version.compact"); _EL_ } _EL_ ', 'private boolean expungeStaleEntries(){ _EL_   if (size == 0)   return false; _EL_   Object r; _EL_   boolean result=false; _EL_   while ((r=queue.poll()) != null) { _EL_     result=true; _EL_     Entry e=(Entry)r; _EL_     int h=e.hash; _EL_     int i=indexFor(h,table.length); _EL_     Entry prev=table[i]; _EL_     Entry p=prev; _EL_     while (p != null) { _EL_       Entry next=p.next; _EL_       if (p == e) { _EL_         if (prev == e)         table[i]=next; _EL_  else         prev.next=next; _EL_         e.next=null; _EL_         size--; _EL_         break; _EL_       } _EL_       prev=p; _EL_       p=next; _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', '@After public void tearDown(){ _EL_   webClient.closeAllWindows(); _EL_ } _EL_ ', 'public void findAndUndo(Object someObj){ _EL_   if (someObj instanceof com.bbn.openmap.MapBean) { _EL_     logger.fine("ProjectionStack removing a MapBean."); _EL_     MapBean map=getMapBean(); _EL_     if (map != null && map == (MapBean)someObj) { _EL_       setMapBean(null); _EL_     } _EL_   } _EL_ } _EL_ ', 'public Timestamp recalculateEstimatedCompletionDate(Long priority,Timestamp startDate){ _EL_   if (exist()) { _EL_     getProductionRunRoutingTasks(); _EL_     if (quantity == null)     getQuantity(); _EL_     Timestamp endDate=null; _EL_     for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) { _EL_       GenericValue routingTask=iter.next(); _EL_       if (priority.compareTo(routingTask.getLong("priority")) <= 0) { _EL_         long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher); _EL_         endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime); _EL_         routingTask.set("estimatedStartDate",startDate); _EL_         routingTask.set("estimatedCompletionDate",endDate); _EL_         startDate=endDate; _EL_       } _EL_     } _EL_     return endDate; _EL_   } _EL_  else { _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public void addDocumentType(DocumentType documentType){ _EL_   mDocumentTypes.add(documentType); _EL_ } _EL_ ', 'public boolean tableExists(DatabaseMetaData dbMetaData,String tableName) throws SQLException { _EL_   return (tableExistsCaseSensitive(dbMetaData,tableName) || tableExistsCaseSensitive(dbMetaData,tableName.toUpperCase(Locale.US)) || tableExistsCaseSensitive(dbMetaData,tableName.toLowerCase(Locale.US))); _EL_ } _EL_ ', 'public void update(GL10 gl){ _EL_   if (taskQueue.size() > 0) { _EL_     GLResorceTask res; _EL_     while ((res=taskQueue.poll()) != null) { _EL_       res.perform(gl); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static double[] HPDInterval(double proportion,double[] x,int[] indices){ _EL_   double minRange=Double.MAX_VALUE; _EL_   int hpdIndex=0; _EL_   final int diff=(int)Math.round(proportion * (double)x.length); _EL_   for (int i=0; i <= (x.length - diff); i++) { _EL_     final double minValue=x[indices[i]]; _EL_     final double maxValue=x[indices[i + diff - 1]]; _EL_     final double range=Math.abs(maxValue - minValue); _EL_     if (range < minRange) { _EL_       minRange=range; _EL_       hpdIndex=i; _EL_     } _EL_   } _EL_   return new double[]{x[indices[hpdIndex]],x[indices[hpdIndex + diff - 1]]}; _EL_ } _EL_ ', 'private void checkIfDirectoriesExist(File[] disk_dirs){ _EL_   DiskStoreFactoryImpl.checkIfDirectoriesExist(disk_dirs); _EL_ } _EL_ ', 'public String convert(){ _EL_   if (s == null) { _EL_     try { _EL_       ByteArrayInputStream bs=new ByteArrayInputStream(bytes); _EL_       DataInputStream d=new DataInputStream(bs); _EL_       String buf=d.readUTF(); _EL_       sHashCode=buf.hashCode(); _EL_       return buf; _EL_     } _EL_  catch (    IOException e) { _EL_       return "!!IOException!!"; _EL_     } _EL_   } _EL_   return s; _EL_ } _EL_ ', 'public boolean isDefined(Object attrName){ _EL_   return table.containsKey(attrName); _EL_ } _EL_ ', 'private void showPreloadingStage(){ _EL_   Stage preloadingStage=new Stage(StageStyle.UNDECORATED); _EL_   preloadingStage.initOwner(primaryStage); _EL_   preloadingStage.setScene(new PreloadingScene()); _EL_   preloadingStage.show(); _EL_   primaryStage.setOnShowing(null); _EL_ } _EL_ ', 'private static int ipToBytes(String ip,byte[] bytes,boolean mustHave4) throws IPMatcherException { _EL_   String[] parts=ip.split("\\\\."); _EL_   if (parts.length > 4 || mustHave4 && parts.length != 4) { _EL_     throw new IPMatcherException("Malformed IP specification " + ip); _EL_   } _EL_   try { _EL_     for (int i=0; i < parts.length; i++) { _EL_       int p=Integer.parseInt(parts[i]); _EL_       if (p < 0 || p > 255) { _EL_         throw new IPMatcherException("Malformed IP specification " + ip); _EL_       } _EL_       bytes[i]=(byte)(p < 128 ? p : p - 256); _EL_     } _EL_   } _EL_  catch (  NumberFormatException nfe) { _EL_     throw new IPMatcherException("Malformed IP specification " + ip,nfe); _EL_   } _EL_   return parts.length; _EL_ } _EL_ ', 'public static void CF2(double[] x,double[] f,double[] c,int nx){ _EL_   int count1=0; _EL_   int count2=0; _EL_   double sum1=0.0; _EL_   double sum2=0.0; _EL_   double yj; _EL_   double N=2.0; _EL_   double a=1.0; _EL_   double t; _EL_   for (int j=2; j <= nx; j++) { _EL_     yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx); _EL_     if (j % 2 == 1) { _EL_       yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx); _EL_       sum1+=yj * yj; _EL_       count1++; _EL_     } _EL_  else { _EL_       yj=x[j - 1] - Math.cos(6.0 * PI * x[0] + j * PI / nx); _EL_       sum2+=yj * yj; _EL_       count2++; _EL_     } _EL_   } _EL_   f[0]=x[0] + 2.0 * sum1 / (double)count1; _EL_   f[1]=1.0 - Math.sqrt(x[0]) + 2.0 * sum2 / (double)count2; _EL_   t=f[1] + Math.sqrt(f[0]) - a * Math.sin(N * PI * (Math.sqrt(f[0]) - f[1] + 1.0)) - 1.0; _EL_   c[0]=MYSIGN(t) * Math.abs(t) / (1 + Math.exp(4.0 * Math.abs(t))); _EL_ } _EL_ ', 'protected void addHeaders(HttpURLConnection connection,String tenantId){ _EL_   if (tenantId == null) { _EL_     tenantId=PropertyUtil.getProperty(PropertyUtil.HAWKULAR_TENANT); _EL_   } _EL_   if (tenantId != null) { _EL_     connection.setRequestProperty(HAWKULAR_TENANT,tenantId); _EL_   } _EL_   if (authorization == null && username != null) { _EL_     String authString=username + ":" + password; _EL_     String encoded=encoder.encodeToString(authString.getBytes()); _EL_     authorization="Basic " + encoded; _EL_   } _EL_   if (authorization != null) { _EL_     connection.setRequestProperty("Authorization",authorization); _EL_   } _EL_ } _EL_ ', 'public void addLongSelectionListener(SelectionListener listener){ _EL_   if (listener == null)   throw new IllegalArgumentException(); _EL_   if (hexEditControl == null) { _EL_     if (listOfLongListeners == null)     listOfLongListeners=new ArrayList<>(); _EL_     listOfLongListeners.add(listener); _EL_   } _EL_  else { _EL_     hexEditControl.addLongSelectionListener(listener); _EL_   } _EL_ } _EL_ ', 'public Debug(String clientID,ClientComms comms){ _EL_   this.clientID=clientID; _EL_   this.comms=comms; _EL_   log.setResourceName(clientID); _EL_ } _EL_ ', 'protected String alterCase(String value){ _EL_ switch (getCase()) { _EL_ case UPPERCASE: _EL_     return value.toUpperCase(); _EL_ case LOWERCASE: _EL_   return value.toLowerCase(); _EL_ default : _EL_ return value; _EL_ } _EL_ } _EL_ ', 'void addReporter(String textReporter,int xx,int yy){ _EL_   ReporterIcon l=new ReporterIcon(this); _EL_   l.setReporter(textReporter); _EL_   l.setLocation(xx,yy); _EL_   l.setSize(l.getPreferredSize().width,l.getPreferredSize().height); _EL_   l.setDisplayLevel(LABELS); _EL_   setDirty(true); _EL_   putItem(l); _EL_ } _EL_ ', 'private void drawSelectionRectangle(Graphics2D g2){ _EL_   if (this.selectionRectangle != null) { _EL_     if (this.fillSelectionRectangle) { _EL_       g2.setPaint(this.selectionFillPaint); _EL_       g2.fill(selectionRectangle); _EL_     } _EL_  else { _EL_       g2.setPaint(this.selectionOutlinePaint); _EL_       g2.draw(selectionRectangle); _EL_     } _EL_   } _EL_ } _EL_ ', 'private boolean hasConnectivityToAllSystems(Initiator initiator,Collection<URI> storageSystems,ExportGroup exportGroup){ _EL_   return hasConnectivityToAllSystems(initiator,storageSystems,null,exportGroup); _EL_ } _EL_ ', 'private Derivation<TK,FV> constructDerivation(Derivation<TK,FV> markedNode,int sourceInputId,FeatureExtractor<TK,FV> featurizer,Scorer<FV> scorer,SearchHeuristic<TK,FV> heuristic,OutputSpace<TK,FV> outputSpace){ _EL_   final List<Derivation<TK,FV>> nodes=new LinkedList<>(); _EL_   Derivation<TK,FV> p=markedNode; _EL_   while (p != null) { _EL_     nodes.add(0,p); _EL_     p=p.parent; _EL_   } _EL_   p=markedNode.bestChild; _EL_   while (p != null) { _EL_     nodes.add(p); _EL_     p=p.bestChild; _EL_   } _EL_   Derivation<TK,FV> goalHyp=null; _EL_   for (  Derivation<TK,FV> node : nodes) { _EL_     goalHyp=goalHyp == null ? node : new Derivation<>(sourceInputId,node.rule,goalHyp.length,goalHyp,featurizer,scorer,heuristic,outputSpace); _EL_   } _EL_   return goalHyp; _EL_ } _EL_ ', 'public JDialog displayPanelInWindow(final JPanel panel,String title){ _EL_   JDialog frame=new GenericJDialog(); _EL_   frame.setContentPane(panel); _EL_   frame.pack(); _EL_   frame.setTitle(title); _EL_   frame.setVisible(true); _EL_   return frame; _EL_ } _EL_ ', 'public JSONTokener(Reader reader){ _EL_   this.reader=reader.markSupported() ? reader : new BufferedReader(reader); _EL_   this.eof=false; _EL_   this.usePrevious=false; _EL_   this.previous=0; _EL_   this.index=0; _EL_   this.character=1; _EL_   this.line=1; _EL_ } _EL_ ', 'public static void compress(){ _EL_   String s=BinaryStdIn.readString(); _EL_   char[] input=s.toCharArray(); _EL_   int[] freq=new int[R]; _EL_   for (int i=0; i < input.length; i++)   freq[input[i]]++; _EL_   Node root=buildTrie(freq); _EL_   String[] st=new String[R]; _EL_   buildCode(st,root,""); _EL_   writeTrie(root); _EL_   BinaryStdOut.write(input.length); _EL_   for (int i=0; i < input.length; i++) { _EL_     String code=st[input[i]]; _EL_     for (int j=0; j < code.length(); j++) { _EL_       if (code.charAt(j) == \'0\') { _EL_         BinaryStdOut.write(false); _EL_       } _EL_  else       if (code.charAt(j) == \'1\') { _EL_         BinaryStdOut.write(true); _EL_       } _EL_  else       throw new IllegalStateException("Illegal state"); _EL_     } _EL_   } _EL_   BinaryStdOut.close(); _EL_ } _EL_ ', 'protected double computeAzimuthLabelOffset(double radius,double maxRadius){ _EL_   return Math.asin(AZIMUTH_LABEL_OFFSET * maxRadius / radius); _EL_ } _EL_ ', 'public void displayChanged(){ _EL_   executeDisplayChangedOnEDT(getGraphicsConfiguration()); _EL_ } _EL_ ', 'private static Stream<Method> extractMethods(Class clazz){ _EL_   try { _EL_     Method[] methods=clazz.getMethods(); _EL_     if (methods.length > 0) { _EL_       return Stream.of(methods); _EL_     } _EL_   } _EL_  catch (  Exception|Error e) { _EL_     LOG.warn("Problems loading class at startup: {}",clazz,e); _EL_   } _EL_   return Stream.empty(); _EL_ } _EL_ ', '@Override public void updateServerAddress(Application application,String dockerManagerIP,String serverPort,String serverManagerPort){ _EL_   String suffixCloudUnit=application.getSuffixCloudUnitIO(); _EL_   JedisPool pool=null; _EL_   Jedis jedis=null; _EL_   try { _EL_     pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000); _EL_     jedis=pool.getResource(); _EL_     String subNameSpace=concatSubNameSpace(application); _EL_     String key=subNameSpace + suffixCloudUnit; _EL_     String frontend="frontend:" + key.toLowerCase(); _EL_     jedis.lset(frontend,1,"http://" + dockerManagerIP + ":"+ serverPort); _EL_     String frontendServerManager="frontend:manager-" + key.toLowerCase(); _EL_     jedis.lset(frontendServerManager,1,"http://" + dockerManagerIP + ":"+ serverManagerPort); _EL_   } _EL_  catch (  JedisConnectionException|UnsupportedEncodingException e) { _EL_     logger.error("HipacheRedisUtils Exception",e); _EL_   } _EL_  finally { _EL_     if (jedis != null) { _EL_       pool.destroy(); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected void remove(int itemPosition){ _EL_   if (itemPosition >= 0 && itemPosition < getItemCount()) { _EL_     list.remove(itemPosition); _EL_   } _EL_ } _EL_ ', 'protected String chooseRandomEnemys(){ _EL_   final List<String> enemyList=new LinkedList<String>(enemyForces.keySet()); _EL_   final int enemySize=enemyList.size(); _EL_   final int position=Rand.rand(enemySize); _EL_   return enemyList.get(position); _EL_ } _EL_ ', 'public void sortPools(List<StoragePool> storagePools){ _EL_   _portMetricsProcessor.computeStoragePoolsAvgPortMetrics(storagePools); _EL_   Collections.sort(storagePools,_storagePoolComparator); _EL_ } _EL_ ', 'public RhythmGroup addOverlays(Collection<RhythmOverlay> overlays){ _EL_   mOverlays.addAll(overlays); _EL_   if (mCurrentOverlayIndex == NO_OVERLAY) { _EL_     selectOverlay(0); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public static Resource forPath(final String path) throws UnknownResourceException { _EL_   Resource resource; _EL_   if (path.startsWith(ClasspathResource.PREFIX + ":")) { _EL_     resource=new ClasspathResource(path); _EL_   } _EL_  else   if (path.startsWith(FileResource.PREFIX + ":")) { _EL_     resource=new FileResource(path); _EL_   } _EL_  else { _EL_     resource=forPath(FileResource.PREFIX + ":" + path); _EL_   } _EL_   return resource; _EL_ } _EL_ ', 'private static boolean isOlderThanLeopard(){ _EL_   String version=System.getProperty("os.version"); _EL_   StringTokenizer tk=new StringTokenizer(version,"."); _EL_   int major=Integer.parseInt(tk.nextToken()); _EL_   int minor=Integer.parseInt(tk.nextToken()); _EL_   return major == 10 && minor < 6; _EL_ } _EL_ ', 'public static String xmlContentEscape(String s){ _EL_   StringBuilder sb=new StringBuilder(); _EL_   for (int i=0; i < s.length(); i++) { _EL_     char c=s.charAt(i); _EL_ switch (c) { _EL_ case \'&\': _EL_       sb.append("&amp;"); _EL_     break; _EL_ case \'<\': _EL_   sb.append("&lt;"); _EL_ break; _EL_ case \'\\000\': _EL_ case \'\\001\': _EL_ case \'\\002\': _EL_ case \'\\003\': _EL_ case \'\\004\': _EL_ case \'\\005\': _EL_ case \'\\006\': _EL_ case \'\\007\': _EL_ case \'\\010\': _EL_ case \'\\013\': _EL_ case \'\\014\': _EL_ case \'\\016\': _EL_ case \'\\017\': _EL_ case \'\\020\': _EL_ case \'\\021\': _EL_ case \'\\022\': _EL_ case \'\\023\': _EL_ case \'\\024\': _EL_ case \'\\025\': _EL_ case \'\\026\': _EL_ case \'\\027\': _EL_ case \'\\030\': _EL_ case \'\\031\': _EL_ case \'\\032\': _EL_ case \'\\033\': _EL_ case \'\\034\': _EL_ case \'\\035\': _EL_ case \'\\036\': _EL_ case \'\\037\': _EL_ break; _EL_ default : _EL_ sb.append(c); _EL_ } _EL_ } _EL_ return sb.toString(); _EL_ } _EL_ ', 'private void feedForward(Vec input,List<Vec> activations,List<Vec> derivatives){ _EL_   Vec x=input; _EL_   for (int i=0; i < Ws.size(); i++) { _EL_     Matrix W_i=Ws.get(i); _EL_     Vec b_i=bs.get(i); _EL_     Vec a_i=activations.get(i); _EL_     a_i.zeroOut(); _EL_     W_i.multiply(x,1,a_i); _EL_     a_i.mutableAdd(b_i); _EL_     a_i.applyFunction(f); _EL_     Vec d_i=derivatives.get(i); _EL_     a_i.copyTo(d_i); _EL_     d_i.applyFunction(f.getD()); _EL_     x=a_i; _EL_   } _EL_ } _EL_ ', 'private File findFile(File directory,String name) throws FileNotFoundException { _EL_   File file=new File(directory,name); _EL_   if (file.exists()) { _EL_     return file; _EL_   } _EL_   for (  String child : directory.list()) { _EL_     if (child.equalsIgnoreCase(name)) { _EL_       return new File(directory,child); _EL_     } _EL_   } _EL_   throw new FileNotFoundException("Missing file: " + file); _EL_ } _EL_ ', 'public static boolean compareResults(SolrClient controlClient,SolrClient cloudClient) throws SolrServerException, IOException { _EL_   return compareResults(controlClient,cloudClient,null,null); _EL_ } _EL_ ', 'public ArrayList<String> GetElementList(String xPathExpression){ _EL_   try { _EL_     ArrayList<String> values=new ArrayList<String>(); _EL_     List<?> nodeList=XPath.selectNodes(this.xmlDocument,xPathExpression); _EL_     Iterator<?> iter=nodeList.iterator(); _EL_     while (iter.hasNext()) { _EL_       org.jdom.Element element=(org.jdom.Element)iter.next(); _EL_       values.add(element.getText()); _EL_     } _EL_     return values; _EL_   } _EL_  catch (  Exception ex) { _EL_     LOG.error("Error in handler: " + ex.getMessage(),ex); _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public static CLContext createContextFromCurrentGL(){ _EL_   RuntimeException first=null; _EL_   for (  CLPlatform platform : listPlatforms()) { _EL_     try { _EL_       CLContext ctx=platform.createContextFromCurrentGL(); _EL_       if (ctx != null)       return ctx; _EL_     } _EL_  catch (    RuntimeException ex) { _EL_       if (first == null)       first=ex; _EL_     } _EL_   } _EL_   throw new RuntimeException("Failed to create an OpenCL context based on the current OpenGL context",first); _EL_ } _EL_ ', 'public void collapseTree(){ _EL_   for (int i=1; i < tree.getRowCount(); ++i) { _EL_     tree.collapseRow(i); _EL_   } _EL_ } _EL_ ', 'static void queuePlayerCapeReplacement(AbstractClientPlayer player){ _EL_   final String displayName=player.getDisplayNameString(); _EL_   Logger.info("Queueing cape replacement for %s",displayName); _EL_   THREAD_POOL.submit(null); _EL_ } _EL_ ', 'public void removeVetoableChangeListener(VetoableChangeListener listener){ _EL_   if (listener != null) { _EL_ synchronized (this) { _EL_       if (vetoableSupport != null) { _EL_         vetoableSupport.removeVetoableChangeListener(listener); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public StreamThroughput(String statusMessagePrefix){ _EL_   m_instanceCount=0; _EL_   m_sampleCount=0; _EL_   m_numSamples=0; _EL_   m_cumulativeTime=0; _EL_   m_startTime=System.currentTimeMillis(); _EL_   m_statusMessagePrefix=statusMessagePrefix; _EL_ } _EL_ ', '@RequestMapping(value="/{bookmarkId}",method=RequestMethod.PUT) public ResponseEntity<Bookmark> editBookmark(@PathVariable(value="username") String username,@PathVariable(value="bookmarkId") int bookmarkId,@RequestBody String json) throws IOException, BookmarkNotFoundException, IllegalAccessException, InvocationTargetException { _EL_   Optional<Bookmark> optional=bookmarksRepository.findByIdAndUserUsername(bookmarkId,username); _EL_   if (optional.isPresent()) { _EL_     ObjectMapper mapper=new ObjectMapper(); _EL_     Map<String,String> changeMap=mapper.readValue(json,HashMap.class); _EL_     Bookmark bookmark=optional.get(); _EL_     BeanUtils.populate(bookmark,changeMap); _EL_     bookmark=bookmarksRepository.save(bookmark); _EL_     return new ResponseEntity<>(bookmark,HttpStatus.OK); _EL_   } _EL_  else { _EL_     throw new BookmarkNotFoundException("Bookmark not found id = " + bookmarkId); _EL_   } _EL_ } _EL_ ', 'public static String convertFromUtf32(int[] text,int startPos,int endPos){ _EL_   StringBuilder sb=new StringBuilder(); _EL_   for (int i=startPos; i < endPos; i++) { _EL_     sb.append(convertFromUtf32ToCharArray(text[i])); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'public void createBounds(){ _EL_   if (isEmpty() || hasSingleElement()) { _EL_     mBounds=null; _EL_     return; _EL_   } _EL_   int l=Integer.MAX_VALUE; _EL_   int t=Integer.MAX_VALUE; _EL_   int r=0; _EL_   int b=0; _EL_   for (  Selection.Element selection : getElements()) { _EL_     ConstraintWidget w=selection.widget; _EL_     l=Math.min(w.getDrawX(),l); _EL_     t=Math.min(w.getDrawY(),t); _EL_     r=Math.max(w.getDrawRight(),r); _EL_     b=Math.max(w.getDrawBottom(),b); _EL_   } _EL_   ConstraintWidget bounds=new ConstraintWidget(l,t,r - l,b - t); _EL_   bounds.setCompanionWidget(WidgetCompanion.create(bounds)); _EL_   mBounds=new Element(bounds); _EL_   updateOriginFromBounds(); _EL_ } _EL_ ', 'protected static void recordPattern(BitArray row,int start,int[] counters) throws NotFoundException { _EL_   int numCounters=counters.length; _EL_   Arrays.fill(counters,0,numCounters,0); _EL_   int end=row.getSize(); _EL_   if (start >= end) { _EL_     throw NotFoundException.getNotFoundInstance(); _EL_   } _EL_   boolean isWhite=!row.get(start); _EL_   int counterPosition=0; _EL_   int i=start; _EL_   while (i < end) { _EL_     if (row.get(i) ^ isWhite) { _EL_       counters[counterPosition]++; _EL_     } _EL_  else { _EL_       counterPosition++; _EL_       if (counterPosition == numCounters) { _EL_         break; _EL_       } _EL_  else { _EL_         counters[counterPosition]=1; _EL_         isWhite=!isWhite; _EL_       } _EL_     } _EL_     i++; _EL_   } _EL_   if (!(counterPosition == numCounters || (counterPosition == numCounters - 1 && i == end))) { _EL_     throw NotFoundException.getNotFoundInstance(); _EL_   } _EL_ } _EL_ ', 'public static Object[] findMethodWithListParameters(Object service,String methodName,List<?> args){ _EL_   Object[] arguments=new Object[args.size()]; _EL_   for (int i=0; i < args.size(); i++) { _EL_     arguments[i]=args.get(i); _EL_   } _EL_   return findMethodWithListParameters(service,methodName,arguments); _EL_ } _EL_ ', 'static int firstIllegalCharacter(String source){ _EL_   for (int i=0; i < source.length(); i++) { _EL_     if (isLegal(source.charAt(i)) == false) { _EL_       return i; _EL_     } _EL_   } _EL_   return -1; _EL_ } _EL_ ', 'private CoderResult decodeByteBufferToCharacterBuffer(boolean endOfInput) throws DecodingException { _EL_   buffer.flip(); _EL_   return decodeMoreBytesToCharacterBuffer(endOfInput); _EL_ } _EL_ ', 'protected void newFastClockMinute(){ _EL_   for (int i=delayedTrains.size() - 1; i >= 0; i--) { _EL_     ActiveTrain at=delayedTrains.get(i); _EL_     if ((!at.getStarted()) && at.getDelayedStart() != ActiveTrain.NODELAY) { _EL_       if (at.getDelayedStart() == ActiveTrain.TIMEDDELAY) { _EL_         if (isFastClockTimeGE(at.getDepartureTimeHr(),at.getDepartureTimeMin())) { _EL_           at.setStarted(); _EL_           delayedTrains.remove(i); _EL_           if (_AutoAllocate) { _EL_             autoAllocate.scanAllocationRequestList(allocationRequests); _EL_           } _EL_         } _EL_       } _EL_     } _EL_  else     if (at.getStarted() && at.getStatus() == ActiveTrain.READY && at.reachedRestartPoint()) { _EL_       if (isFastClockTimeGE(at.getRestartDepartHr(),at.getRestartDepartMin())) { _EL_         at.restart(); _EL_         delayedTrains.remove(i); _EL_         if (_AutoAllocate) { _EL_           autoAllocate.scanAllocationRequestList(allocationRequests); _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public void add(final CreatureRespawnPoint point){ _EL_   respawnPoints.add(point); _EL_ } _EL_ ', 'public java.security.cert.Certificate engineGenerateCertificate(InputStream in) throws CertificateException { _EL_   if (currentStream == null) { _EL_     currentStream=in; _EL_     sData=null; _EL_     sDataObjectCount=0; _EL_   } _EL_  else   if (currentStream != in) { _EL_     currentStream=in; _EL_     sData=null; _EL_     sDataObjectCount=0; _EL_   } _EL_   try { _EL_     if (sData != null) { _EL_       if (sDataObjectCount != sData.size()) { _EL_         return getCertificate(); _EL_       } _EL_  else { _EL_         sData=null; _EL_         sDataObjectCount=0; _EL_         return null; _EL_       } _EL_     } _EL_     PushbackInputStream pis=new PushbackInputStream(in); _EL_     int tag=pis.read(); _EL_     if (tag == -1) { _EL_       return null; _EL_     } _EL_     pis.unread(tag); _EL_     if (tag != 0x30) { _EL_       return readPEMCertificate(pis); _EL_     } _EL_  else { _EL_       return readDERCertificate(new ASN1InputStream(pis)); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     throw new ExCertificateException(e); _EL_   } _EL_ } _EL_ ', '@Override public List<Period> generateRollingPeriods(DateTimeUnit dateTimeUnit){ _EL_   Calendar cal=getCalendar(); _EL_   dateTimeUnit.setDay(1); _EL_   dateTimeUnit=cal.minusMonths(dateTimeUnit,11); _EL_   List<Period> periods=Lists.newArrayList(); _EL_   for (int i=0; i < 12; i++) { _EL_     periods.add(createPeriod(dateTimeUnit,cal)); _EL_     dateTimeUnit=cal.plusMonths(dateTimeUnit,1); _EL_   } _EL_   return periods; _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public synchronized T findCounter(Enum<?> counterKey) throws IllegalAccessException, InstantiationException { _EL_   T counter=cache.get(counterKey); _EL_   if (counter == null) { _EL_     counter=counterType.newInstance(); _EL_     cache.put(counterKey,counter); _EL_   } _EL_   return counter; _EL_ } _EL_ ', 'protected void work(final IResource resource,final List<WorkItem> resources,IProgressMonitor monitor){ _EL_   IPreferenceStore store=FindbugsPlugin.getPluginPreferences(getProject()); _EL_   boolean runAsJob=store.getBoolean(FindBugsConstants.KEY_RUN_ANALYSIS_AS_EXTRA_JOB); _EL_   FindBugsJob fbJob=new StartedFromBuilderJob("Finding bugs in " + resource.getName() + "...",resource,resources); _EL_   if (runAsJob) { _EL_     if (DEBUG) { _EL_       FindbugsPlugin.log("cancelSimilarJobs"); _EL_     } _EL_     FindBugsJob.cancelSimilarJobs(fbJob); _EL_     if (DEBUG) { _EL_       FindbugsPlugin.log("scheduleAsSystem"); _EL_     } _EL_     fbJob.scheduleAsSystem(); _EL_     if (DEBUG) { _EL_       FindbugsPlugin.log("done scheduleAsSystem"); _EL_     } _EL_   } _EL_  else { _EL_     if (DEBUG) { _EL_       FindbugsPlugin.log("running fbJob"); _EL_     } _EL_     fbJob.run(monitor); _EL_     if (DEBUG) { _EL_       FindbugsPlugin.log("done fbJob"); _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public void onFullBackup(FullBackupDataOutput output) throws IOException { _EL_   if (mVolumes != null) { _EL_     if (DEBUG)     Slog.i(TAG,"Backing up " + mVolumes.length + " shared volumes"); _EL_     HashSet<String> externalFilesDirFilter=new HashSet<String>(); _EL_     final File externalAndroidRoot=new File(Environment.getExternalStorageDirectory(),Environment.DIRECTORY_ANDROID); _EL_     externalFilesDirFilter.add(externalAndroidRoot.getCanonicalPath()); _EL_     for (int i=0; i < mVolumes.length; i++) { _EL_       StorageVolume v=mVolumes[i]; _EL_       String domain=FullBackup.SHARED_PREFIX + i; _EL_       fullBackupFileTree(null,domain,v.getPath(),externalFilesDirFilter,output); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static void removeConnectionList(Integer tab){ _EL_   TABBED_CONNECTIONS.remove(tab.intValue()); _EL_ } _EL_ ', 'public static String separatorsToWindows(String path){ _EL_   if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) { _EL_     return path; _EL_   } _EL_   return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR); _EL_ } _EL_ ', 'public void translateAndAppendPending(int backoff) throws UnsupportedEncodingException { _EL_   int bufferEnd=current - backoff; _EL_   int len=bufferEnd - complete; _EL_   output.append(new String(input,offset + complete,len,charset)); _EL_   complete=bufferEnd; _EL_ } _EL_ ', '@Override public Trie optimize(Trie orig){ _EL_   List<CharSequence> cmds=orig.cmds; _EL_   List<Row> rows=new ArrayList<>(); _EL_   List<Row> orows=orig.rows; _EL_   int remap[]=new int[orows.size()]; _EL_   for (int j=orows.size() - 1; j >= 0; j--) { _EL_     liftUp(orows.get(j),orows); _EL_   } _EL_   Arrays.fill(remap,-1); _EL_   rows=removeGaps(orig.root,orows,new ArrayList<Row>(),remap); _EL_   return new Trie(orig.forward,remap[orig.root],cmds,rows); _EL_ } _EL_ ', 'private Handler<Void> installAfterHandler(final HttpServerRequest request,final Buffer buffer,final List<Listener> afterListener){ _EL_   Handler<Void> afterHandler=null; _EL_   return afterHandler; _EL_ } _EL_ ', 'private void tryShutdown(){ _EL_   if (isClosing() && isOkToClose())   shutdown(closeFuture.get()); _EL_ } _EL_ ', 'public StorageEntity createStorageEntity(String storageName,StoragePlatformEntity storagePlatformEntity,List<Attribute> attributes){ _EL_   StorageEntity storageEntity=new StorageEntity(); _EL_   storageEntity.setName(storageName); _EL_   storageEntity.setStoragePlatform(storagePlatformEntity); _EL_   if (!CollectionUtils.isEmpty(attributes)) { _EL_     List<StorageAttributeEntity> attributeEntities=new ArrayList<>(); _EL_     storageEntity.setAttributes(attributeEntities); _EL_     for (    Attribute attribute : attributes) { _EL_       StorageAttributeEntity attributeEntity=new StorageAttributeEntity(); _EL_       attributeEntities.add(attributeEntity); _EL_       attributeEntity.setStorage(storageEntity); _EL_       attributeEntity.setName(attribute.getName()); _EL_       attributeEntity.setValue(attribute.getValue()); _EL_     } _EL_   } _EL_   return storageDao.saveAndRefresh(storageEntity); _EL_ } _EL_ ', 'public void displayInfoLine(String infoLine,int labelDesignator){ _EL_   if (infoLineHolder != null) { _EL_     setLabel((infoLine != null && infoLine.length() > 0) ? infoLine : fudgeString,labelDesignator); _EL_   } _EL_ } _EL_ ', 'public Console format(String format,Object... args){ _EL_   Formatter f=new Formatter(writer); _EL_   f.format(format,args); _EL_   f.flush(); _EL_   return this; _EL_ } _EL_ ', 'public static Object invokeStaticMethod(BshClassManager bcm,Class clas,String methodName,Object[] args) throws ReflectError, UtilEvalError, InvocationTargetException { _EL_   Interpreter.debug("invoke static Method"); _EL_   Method method=resolveExpectedJavaMethod(bcm,clas,null,methodName,args,true); _EL_   return invokeMethod(method,null,args); _EL_ } _EL_ ', 'protected AbstractRegexNPAnnotator(String pattern,boolean caseSensitive,double confidence){ _EL_   this(Pattern.compile(pattern,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE),0,confidence); _EL_ } _EL_ ', 'private static void removeLoopSafepoint(StructuredGraph graph){ _EL_   LoopBeginNode loopBegin=findFirstLoop(graph); _EL_   loopBegin.disableSafepoint(); _EL_ } _EL_ ', 'public synchronized void add(double minValue,double maxValue){ _EL_   super.add(minValue); _EL_   mMaxValues.add(maxValue); _EL_ } _EL_ ', 'public static Date daysBefore(Date dateInst,int numDays){ _EL_   if ((numDays <= 0) || (dateInst == null)) { _EL_     throw new IllegalArgumentException(); _EL_   } _EL_   final Calendar cal=new GregorianCalendar(); _EL_   cal.setTime(dateInst); _EL_   cal.add(Calendar.DAY_OF_YEAR,-numDays); _EL_   return cal.getTime(); _EL_ } _EL_ ', '@Override public void writeExternal(ObjectOutput out) throws IOException { _EL_   super.writeExternal(out); _EL_   out.writeObject(conservativeApproximation); _EL_ } _EL_ ', 'int putData(Object data) throws FitsException { _EL_   long lsize=ArrayFuncs.computeLSize(data); _EL_   if (lsize > Integer.MAX_VALUE) { _EL_     throw new FitsException("FITS Heap > 2 G"); _EL_   } _EL_   int size=(int)lsize; _EL_   expandHeap(size); _EL_   ByteArrayOutputStream bo=new ByteArrayOutputStream(size); _EL_   try { _EL_     BufferedDataOutputStream o=new BufferedDataOutputStream(bo); _EL_     o.writeArray(data); _EL_     o.flush(); _EL_     o.close(); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new FitsException("Unable to write variable column length data",e); _EL_   } _EL_   System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,size); _EL_   int oldOffset=this.heapSize; _EL_   this.heapSize+=size; _EL_   return oldOffset; _EL_ } _EL_ ', 'public void paint(Graphics g){ _EL_   try { _EL_     super.paint(g); _EL_   } _EL_  catch (  Exception e) { _EL_   } _EL_   int focusedRow=getFocusedRow(true); _EL_   if (focusedRow != -1 && focusedRow < getRowCount()) { _EL_     Border rowBorder=UIManager.getBorder("Table.focusRowHighlightBorder"); _EL_     if (rowBorder != null) { _EL_       Rectangle rect=getCellRect(focusedRow,0,true); _EL_       rect.width=getWidth(); _EL_       rowBorder.paintBorder(this,g,rect.x,rect.y,rect.width,rect.height); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void add(final JLabel label,final JTextField field){ _EL_   panel.add(label); _EL_   panel.add(field); _EL_   if (previous == null) { _EL_     layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,label); _EL_   } _EL_  else { _EL_     layout.putConstraint(SpringLayout.NORTH,label,SPACING,SpringLayout.SOUTH,previous); _EL_   } _EL_   layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,label); _EL_   layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,label); _EL_   layout.putConstraint(SpringLayout.EAST,field,-SPACING,SpringLayout.EAST,panel); _EL_   layout.putConstraint(SpringLayout.WEST,field,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel); _EL_   layout.putConstraint(SpringLayout.SOUTH,field,SPACING,SpringLayout.SOUTH,label); _EL_   previous=label; _EL_ } _EL_ ', 'private void onTrackPointStart(Attributes attributes){ _EL_   latitude=attributes.getValue(ATTRIBUTE_LAT); _EL_   longitude=attributes.getValue(ATTRIBUTE_LON); _EL_   altitude=null; _EL_   time=null; _EL_ } _EL_ ', 'public static byte[] combine(final List<byte[]> dataChunks){ _EL_   int totalSize=0; _EL_   for (  final byte[] dataPart : dataChunks) { _EL_     totalSize+=dataPart.length; _EL_   } _EL_   final byte[] data=new byte[totalSize]; _EL_   int index=0; _EL_   for (  final byte[] dataPart : dataChunks) { _EL_     System.arraycopy(dataPart,0,data,index,dataPart.length); _EL_     index+=dataPart.length; _EL_   } _EL_   return data; _EL_ } _EL_ ', 'public boolean equals(Object object){ _EL_   if (object == null || !(object instanceof SessionID)) { _EL_     return false; _EL_   } _EL_   SessionID another=(SessionID)object; _EL_   return encryptedString.equals(another.encryptedString); _EL_ } _EL_ ', 'public static boolean areIdentical(String playerIdent,OfflinePlayer compareTo){ _EL_   return playerIdent.equals(getIdentificationForAsString(compareTo)); _EL_ } _EL_ ', 'Builder addLenient(String name,String value){ _EL_   namesAndValues.add(name); _EL_   namesAndValues.add(value.trim()); _EL_   return this; _EL_ } _EL_ ', "protected String stringWithoutHeader(){ _EL_   StringBuffer text=new StringBuffer(); _EL_   for (int i=0; i < numInstances(); i++) { _EL_     text.append(instance(i)); _EL_     if (i < numInstances() - 1) { _EL_       text.append('\\n'); _EL_     } _EL_   } _EL_   return text.toString(); _EL_ } _EL_ ", 'protected boolean isAlwaysNonNull(Value v){ _EL_   return false; _EL_ } _EL_ ', 'public final <T>void removeInternal(List<T> list,int position){ _EL_   if (hasHeaderView() && position == 0)   return; _EL_   if (enableLoadMore() && position == getItemCount() - 1)   return; _EL_   if (list.size() > 0) { _EL_ synchronized (mLock) { _EL_       list.remove(hasHeaderView() ? position - 1 : position); _EL_     } _EL_     removeNotifyExternal(position); _EL_     notifyItemRemoved(position); _EL_   } _EL_ } _EL_ ', 'public AMPrimaryMastHeadViewBean(String name){ _EL_   super(name); _EL_ } _EL_ ', 'private void initializeLayer(List<Neuron> layer,NeuronUpdateRule nodeType,int nodes){ _EL_   for (int i=0; i < nodes; i++) { _EL_     Neuron node=new Neuron(getParentNetwork(),nodeType); _EL_     layer.add(node); _EL_   } _EL_ } _EL_ ', 'public static double angle(Coordinate p){ _EL_   return Math.atan2(p.y,p.x); _EL_ } _EL_ ', 'void handleSelectionChanged(String selection){ _EL_   if (mDidExpandSelection) { _EL_     mDidExpandSelection=false; _EL_     return; _EL_   } _EL_   if (selection == null || selection.isEmpty()) { _EL_     scheduleInvalidTapNotification(); _EL_     if (mSelectionType == SelectionType.TAP) { _EL_       resetSelectionStates(); _EL_       return; _EL_     } _EL_   } _EL_   if (selection != null && !selection.isEmpty()) { _EL_     unscheduleInvalidTapNotification(); _EL_   } _EL_   mSelectedText=selection; _EL_   if (mWasTapGestureDetected) { _EL_     mSelectionType=SelectionType.TAP; _EL_     handleSelection(selection,mSelectionType); _EL_     mWasTapGestureDetected=false; _EL_   } _EL_  else { _EL_     mHandler.handleSelectionModification(selection,mX,mY); _EL_   } _EL_ } _EL_ ', 'public TermsAckParser parse() throws ParserConfigurationException, SAXException, ParseFailureException { _EL_   try { _EL_     SAXParserFactory factory=SAXParserFactory.newInstance(); _EL_     SAXParser parser=factory.newSAXParser(); _EL_     parser.parse(mInputSource,this); _EL_     return this; _EL_   } _EL_  catch (  IOException e) { _EL_     throw new ParseFailureException("Failed to parse input source!",e); _EL_   } _EL_ } _EL_ ', 'public static String format(final String value,String... params){ _EL_   validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER); _EL_   Pattern p=Pattern.compile("\\\\{(\\\\w+)\\\\}"); _EL_   Matcher m=p.matcher(value); _EL_   String result=value; _EL_   while (m.find()) { _EL_     int paramNumber=Integer.parseInt(m.group(1)); _EL_     if (params == null || paramNumber >= params.length) { _EL_       throw new IllegalArgumentException("params does not have value for " + m.group()); _EL_     } _EL_     result=result.replace(m.group(),params[paramNumber]); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public Builder server(String server){ _EL_   if (server.endsWith("/") == false) { _EL_     server=server + "/"; _EL_   } _EL_   this.server=server; _EL_   return this; _EL_ } _EL_ ', 'private ResponsePacket executeCount(QueryTemplatePacket template,IJSpace space,Transaction txn) throws SQLException { _EL_   try { _EL_     template.setRouting(getRouting()); _EL_     template.setExplainPlan(getExplainPlan()); _EL_     int count=space.count(template,txn,getReadModifier()); _EL_     ResponsePacket response=new ResponsePacket(); _EL_     Object[][] values=new Object[1][1]; _EL_     values[0][0]=count; _EL_     ResultEntry result=new ResultEntry(new String[]{getCountColumnName()},new String[]{getCountColumnLabel()},new String[]{""},values); _EL_     response.setResultEntry(result); _EL_     return response; _EL_   } _EL_  catch (  Exception e) { _EL_     if (_logger.isLoggable(Level.SEVERE)) { _EL_       _logger.log(Level.SEVERE,e.getMessage(),e); _EL_     } _EL_     throw new SQLException("Failed to execute count: " + e,"GSP",-111); _EL_   } _EL_ } _EL_ ', 'public ByteArrayDataSource(InputStream is,String type){ _EL_   try { _EL_     ByteArrayOutputStream os=new ByteArrayOutputStream(); _EL_     int ch; _EL_     while ((ch=is.read()) != -1) { _EL_       os.write(ch); _EL_     } _EL_     m_data=os.toByteArray(); _EL_   } _EL_  catch (  IOException ioex) { _EL_     log.log(Level.WARNING,"",ioex); _EL_   } _EL_   if (type != null && type.length() > 0)   m_type=type; _EL_ } _EL_ ', 'Object toType(String value,String pattern,Locale locale){ _EL_   Calendar calendar=toCalendar(value,pattern,locale); _EL_   return toType(calendar); _EL_ } _EL_ ', 'public void addLimitLine(LimitLine l){ _EL_   mLimitLines.add(l); _EL_   if (mLimitLines.size() > 6) { _EL_     Log.e("MPAndroiChart","Warning! You have more than 6 LimitLines on your axis, do you really want that?"); _EL_   } _EL_ } _EL_ ', 'public void readData(DataInput din) throws IOException { _EL_   function=din.readUnsignedShort(); _EL_   data=(short)(din.readShort() & 0xFFFF); _EL_ } _EL_ ', 'int readResults(final byte[] b,final int bPos,final int bAvail,final Context context){ _EL_   if (context.buffer != null) { _EL_     final int len=Math.min(available(context),bAvail); _EL_     System.arraycopy(context.buffer,context.readPos,b,bPos,len); _EL_     context.readPos+=len; _EL_     if (context.readPos >= context.pos) { _EL_       context.buffer=null; _EL_     } _EL_     return len; _EL_   } _EL_   return context.eof ? EOF : 0; _EL_ } _EL_ ', 'public Object[] toArray(){ _EL_   final Object[] items=this.items; _EL_   final ReentrantLock lock=this.lock; _EL_   lock.lock(); _EL_   try { _EL_     final int count=this.count; _EL_     Object[] a=new Object[count]; _EL_     int n=items.length - takeIndex; _EL_     if (count <= n) { _EL_       System.arraycopy(items,takeIndex,a,0,count); _EL_     } _EL_  else { _EL_       System.arraycopy(items,takeIndex,a,0,n); _EL_       System.arraycopy(items,0,a,n,count - n); _EL_     } _EL_     return a; _EL_   } _EL_   finally { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', 'private void Legends(List<String> legends_list,List<Integer> color_code_list){ _EL_   textPaint.setColor(Color.BLACK); _EL_   textPaint.setTextSize(20f); _EL_   int left=(int)(graphwidth * 0.1); _EL_   for (int i=0; i < legends_list.size(); i++) { _EL_     String label=legends_list.get(i); _EL_     float text_width=textPaint.measureText(label,0,label.length()); _EL_     int color=color_code_list.get(i); _EL_     if (!((graphwidth - legendLeft) > (text_width + 60))) { _EL_       legendTop-=60; _EL_       legendLeft=left; _EL_     } _EL_     addLegends(canvas,color,legendTop,legendLeft,legendRight,legendBottom,label); _EL_     legendLeft+=((int)text_width + 60); _EL_   } _EL_ } _EL_ ', 'public String encode(){ _EL_   StringBuffer sb=new StringBuffer(); _EL_   encode(sb); _EL_   return sb.toString(); _EL_ } _EL_ ', '@Override public int read(byte[] buf,int offset,int len) throws IOException { _EL_   int available=_available; _EL_   if (available > 0) { _EL_     len=Math.min(len,available); _EL_     len=_next.read(buf,offset,len); _EL_     if (len > 0) { _EL_       _available-=len; _EL_     } _EL_   } _EL_  else   if (available == 0) { _EL_     _available=readChunkLength(); _EL_     if (_available > 0) { _EL_       len=Math.min(len,_available); _EL_       len=_next.read(buf,offset,len); _EL_       if (len > 0)       _available-=len; _EL_     } _EL_  else { _EL_       _available=-1; _EL_       len=-1; _EL_     } _EL_   } _EL_  else { _EL_     len=-1; _EL_   } _EL_   return len; _EL_ } _EL_ ', '@Override public void flush(){ _EL_   FlushTask task; _EL_ synchronized (logRecords) { _EL_     task=new FlushTask(new ArrayList<String>(logRecords)); _EL_     logRecords.clear(); _EL_   } _EL_   task.run(); _EL_ } _EL_ ', 'protected List<String> createNewExportMaskWorkflowForInitiators(List<URI> initiatorURIs,ExportGroup exportGroup,Workflow workflow,Map<URI,Integer> volumeMap,StorageSystem storage,String token,String previousStep) throws Exception { _EL_   List<String> newSteps=new ArrayList<>(); _EL_   if (!initiatorURIs.isEmpty()) { _EL_     Map<String,List<URI>> computeResourceToInitiators=mapInitiatorsToComputeResource(exportGroup,initiatorURIs); _EL_     for (    Map.Entry<String,List<URI>> resourceEntry : computeResourceToInitiators.entrySet()) { _EL_       String computeKey=resourceEntry.getKey(); _EL_       List<URI> computeInitiatorURIs=resourceEntry.getValue(); _EL_       _log.info(String.format("New export masks for %s",computeKey)); _EL_       GenExportMaskCreateWorkflowResult result=generateDeviceSpecificExportMaskCreateWorkFlow(workflow,previousStep,storage,exportGroup,computeInitiatorURIs,volumeMap,token); _EL_       previousStep=result.getStepId(); _EL_       newSteps.add(previousStep); _EL_     } _EL_   } _EL_   if (newSteps.isEmpty() && previousStep != null) { _EL_     newSteps.add(previousStep); _EL_   } _EL_   return newSteps; _EL_ } _EL_ ', 'public boolean isLessThen(Percent Percent){ _EL_   assertDefined(); _EL_   BigDecimal thisValue=notNull(this); _EL_   BigDecimal parameter=notNull(Percent); _EL_   return (thisValue.compareTo(parameter) < 0); _EL_ } _EL_ ', '@Override public URI toEdgeURI(final Object key){ _EL_   return toURI(key.toString()); _EL_ } _EL_ ', 'short readShort() throws IOException { _EL_   mDexFile.readFully(tmpBuf,0,2); _EL_   if (isBigEndian) { _EL_     return (short)((tmpBuf[1] & 0xff) | ((tmpBuf[0] & 0xff) << 8)); _EL_   } _EL_  else { _EL_     return (short)((tmpBuf[0] & 0xff) | ((tmpBuf[1] & 0xff) << 8)); _EL_   } _EL_ } _EL_ ', 'public static List<INaviProject> loadProjects(final AbstractSQLProvider provider,final DebuggerTemplateManager debuggerManager) throws CouldntLoadDataException { _EL_   PostgreSQLDatabaseFunctions.checkArguments(provider,debuggerManager); _EL_   final CConnection connection=provider.getConnection(); _EL_   final List<INaviProject> projects=new ArrayList<>(); _EL_   if (!PostgreSQLHelpers.hasTable(connection,CTableNames.PROJECTS_TABLE)) { _EL_     return projects; _EL_   } _EL_   String query="SELECT id, name, description, creation_date, modification_date, " + " (SELECT count(*) FROM " + CTableNames.ADDRESS_SPACES_TABLE + " WHERE project_id = "+ CTableNames.PROJECTS_TABLE+ ".id) "+ " AS addressspace_count FROM "+ CTableNames.PROJECTS_TABLE; _EL_   try (ResultSet resultSet=connection.executeQuery(query,true)){ _EL_     while (resultSet.next()) { _EL_       final int projectId=resultSet.getInt("id"); _EL_       final String name=PostgreSQLHelpers.readString(resultSet,"name"); _EL_       final String description=PostgreSQLHelpers.readString(resultSet,"description"); _EL_       final int addressSpaceCount=resultSet.getInt("addressspace_count"); _EL_       final Timestamp creationDate=resultSet.getTimestamp("creation_date"); _EL_       final Timestamp modificationDate=resultSet.getTimestamp("modification_date"); _EL_       final List<DebuggerTemplate> debuggers=PostgreSQLDatabaseFunctions.getAssignedDebuggers(connection,projectId,debuggerManager); _EL_       projects.add(new CProject(projectId,name,description == null ? "" : description,creationDate,modificationDate,addressSpaceCount,debuggers,provider)); _EL_     } _EL_   } _EL_  catch (  final SQLException e) { _EL_     throw new CouldntLoadDataException(e); _EL_   } _EL_   return new ArrayList<INaviProject>(projects); _EL_ } _EL_ ', '@Override protected Node removeFromFrontier(){ _EL_   cleanUpFrontier(); _EL_   Node result=frontier.remove(); _EL_   updateMetrics(frontier.size()); _EL_   setExplored(result); _EL_   return result; _EL_ } _EL_ ', 'public static boolean isFile(String path){ _EL_   File f=new File(path); _EL_   return f.isFile(); _EL_ } _EL_ ', 'public boolean equals(Object object){ _EL_   if (!(object instanceof ObjectInstance)) { _EL_     return false; _EL_   } _EL_   ObjectInstance val=(ObjectInstance)object; _EL_   if (!name.equals(val.getObjectName()))   return false; _EL_   if (className == null)   return (val.getClassName() == null); _EL_   return className.equals(val.getClassName()); _EL_ } _EL_ ', 'public ZookeeperEmbedded(int port){ _EL_   this.port=port; _EL_   this.logDir=new File(System.getProperty("java.io.tmpdir"),"zk/logs/zookeeper-test-" + port); _EL_ } _EL_ ', 'public BasicCondition(String variable,Value value,Relation relation){ _EL_   this.variable=Template.create(variable); _EL_   this.templateValue=Template.create(value.toString()); _EL_   this.groundValue=value; _EL_   this.relation=relation; _EL_ } _EL_ ', 'public static Set<String> readStopwordsPath(Path path,boolean lowercase) throws IOException { _EL_   return readStopwordsInputStream(Files.newInputStream(path),lowercase); _EL_ } _EL_ ', 'public static <T extends Throwable>T writeStackTraces(T throwable,StreamOutput out) throws IOException { _EL_   StackTraceElement[] stackTrace=throwable.getStackTrace(); _EL_   out.writeVInt(stackTrace.length); _EL_   for (  StackTraceElement element : stackTrace) { _EL_     out.writeString(element.getClassName()); _EL_     out.writeOptionalString(element.getFileName()); _EL_     out.writeString(element.getMethodName()); _EL_     out.writeVInt(element.getLineNumber()); _EL_   } _EL_   Throwable[] suppressed=throwable.getSuppressed(); _EL_   out.writeVInt(suppressed.length); _EL_   for (  Throwable t : suppressed) { _EL_     out.writeThrowable(t); _EL_   } _EL_   return throwable; _EL_ } _EL_ ', 'public DistributedLogMultiStreamWriter build(){ _EL_   Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),"No streams provided"); _EL_   Preconditions.checkNotNull(_client,"No distributedlog client provided"); _EL_   Preconditions.checkNotNull(_codec,"No compression codec provided"); _EL_   Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,"Invalid speculative timeout settings"); _EL_   return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService); _EL_ } _EL_ ', 'public static String numberToString(Number number) throws JSONException { _EL_   if (number == null) { _EL_     throw new JSONException("Null pointer"); _EL_   } _EL_   testValidity(number); _EL_   String string=number.toString(); _EL_   if (string.indexOf(\'.\') > 0 && string.indexOf(\'e\') < 0 && string.indexOf(\'E\') < 0) { _EL_     while (string.endsWith("0")) { _EL_       string=string.substring(0,string.length() - 1); _EL_     } _EL_     if (string.endsWith(".")) { _EL_       string=string.substring(0,string.length() - 1); _EL_     } _EL_   } _EL_   return string; _EL_ } _EL_ ', 'private ImageElement(int AD_PrintFormatItem_ID){ _EL_   loadAttachment(AD_PrintFormatItem_ID); _EL_ } _EL_ ', 'public ThreadRegisterValues(final ThreadRegisters values){ _EL_   m_tid=values.getTid(); _EL_   for (  final RegisterValue value : values.getRegisters()) { _EL_     m_values.add(new Register(value)); _EL_   } _EL_ } _EL_ ', 'public LauncherDiscoveryRequestBuilder configurationParameters(Map<String,String> configurationParameters){ _EL_   Preconditions.notNull(configurationParameters,"configuration parameters map must not be null"); _EL_   configurationParameters.forEach(null); _EL_   return this; _EL_ } _EL_ ', 'public boolean isTriggered(){ _EL_   return checkbox.isSelected(); _EL_ } _EL_ ', 'public void addAll(int index,int[] data){ _EL_   int dataLen=data.length; _EL_   if (dataLen == 0) { _EL_     return; _EL_   } _EL_   int newcap=size + (int)(dataLen * 1.1) + 1; _EL_   ensureCapacity(newcap); _EL_   System.arraycopy(array,index,array,index + dataLen,size - index); _EL_   System.arraycopy(data,0,array,index,dataLen); _EL_   size+=dataLen; _EL_ } _EL_ ', 'public int read(byte[] b) throws java.io.IOException { _EL_   return read(b,0,b.length); _EL_ } _EL_ ', 'private static float calculateScore(final int[] playCounts){ _EL_   if (playCounts == null) { _EL_     return 0; _EL_   } _EL_   float score=0; _EL_   for (int i=0; i < Math.min(playCounts.length,NUM_WEEKS); i++) { _EL_     score+=playCounts[i] * getScoreMultiplierForWeek(i); _EL_   } _EL_   return score; _EL_ } _EL_ ', 'public void removeScanningCallback(OneSheeldScanningCallback scanningCallback){ _EL_   if (scanningCallback != null && scanningCallbacks.contains(scanningCallback))   scanningCallbacks.remove(scanningCallback); _EL_ } _EL_ ', 'public void paintRect(Graphics g,JComponent c,int x,int y,int w,int h){ _EL_   Rectangle bounds=c.getBounds(); _EL_   check(bounds); _EL_   g.drawImage(m_backImage,x,y,x + w,h + y,x,y,x + w,y + h,c); _EL_ } _EL_ ', 'private boolean isPageBreak(int row){ _EL_   for (int i=0; i < m_pageBreak.size(); i++) { _EL_     Integer rr=(Integer)m_pageBreak.get(i); _EL_     if (rr.intValue() + 1 == row)     return true; _EL_  else     if (rr.intValue() > row)     return false; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public ExecutorService shutdown(){ _EL_   pool.shutdown(); _EL_   return pool; _EL_ } _EL_ ', 'public static boolean isPropositionSymbolIdentifierPart(char ch){ _EL_   return Character.isJavaIdentifierPart(ch); _EL_ } _EL_ ', 'public static void o(Zdiagmat D){ _EL_   o(D,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces); _EL_ } _EL_ ', 'public String toChars(int[] indices){ _EL_   StringBuilder s=new StringBuilder(indices.length); _EL_   for (int i=0; i < indices.length; i++)   s.append(toChar(indices[i])); _EL_   return s.toString(); _EL_ } _EL_ ', 'public static final String trunc(final String str,final int length){ _EL_   if (str == null) { _EL_     return str; _EL_   } _EL_   if (str.length() <= length) { _EL_     return str; _EL_   } _EL_   return str.substring(0,length); _EL_ } _EL_ ', 'public void clearTransactions(int fromHeight){ _EL_   lock.lock(); _EL_   try { _EL_     if (fromHeight == 0) { _EL_       unspent.clear(); _EL_       spent.clear(); _EL_       pending.clear(); _EL_       dead.clear(); _EL_       transactions.clear(); _EL_     } _EL_  else { _EL_       throw new UnsupportedOperationException(); _EL_     } _EL_   } _EL_   finally { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', '@Override public boolean load(final Player player,final List<String> args){ _EL_   groovyBinding.setVariable("player",player); _EL_   if (args != null) { _EL_     groovyBinding.setVariable("args",args.toArray(new String[args.size()])); _EL_   } _EL_  else { _EL_     groovyBinding.setVariable("args",new String[0]); _EL_   } _EL_   final GroovyShell interp=new GroovyShell(groovyBinding); _EL_   boolean ret=true; _EL_   preExecute(player,args); _EL_   try { _EL_     final File f=new File(groovyScript); _EL_     interp.evaluate(f); _EL_   } _EL_  catch (  final Exception e) { _EL_     logger.error("Exception while sourcing file " + groovyScript,e); _EL_     setMessage(e.getMessage()); _EL_     ret=false; _EL_   } _EL_ catch (  final Error e) { _EL_     logger.error("Exception while sourcing file " + groovyScript,e); _EL_     setMessage(e.getMessage()); _EL_     ret=false; _EL_   } _EL_   postExecute(player,args,ret); _EL_   return (ret); _EL_ } _EL_ ', 'private void cleanDirtyRegion(float eventX,float eventY){ _EL_   dirtyRect.left=Math.min(lastTouchX,eventX); _EL_   dirtyRect.right=Math.max(lastTouchX,eventX); _EL_   dirtyRect.top=Math.min(lastTouchY,eventY); _EL_   dirtyRect.bottom=Math.max(lastTouchY,eventY); _EL_ } _EL_ ', 'public Sort(String[] fields){ _EL_   this(fields,new boolean[fields.length]); _EL_   Arrays.fill(m_ascend,true); _EL_ } _EL_ ', 'void startLocatingPhone(){ _EL_   Intent intent=new Intent(sContext,LocationService.class); _EL_   intent.setAction(LocationService.START_SERVICE); _EL_   intent.putExtra("to",this.mAnswerTo); _EL_   sContext.startService(intent); _EL_ } _EL_ ', 'public BusMovement(BusMovement proto){ _EL_   super(proto); _EL_   this.controlSystem=proto.controlSystem; _EL_   this.id=nextID++; _EL_   controlSystem.registerBus(this); _EL_   startMode=true; _EL_ } _EL_ ', 'private int removeNext(){ _EL_   if (lastUsageDates.isEmpty()) { _EL_     return INVALID_SIZE; _EL_   } _EL_   Long oldestUsage=null; _EL_   File mostLongUsedFile=null; _EL_   Set<Entry<File,Long>> entries=lastUsageDates.entrySet(); _EL_ synchronized (lastUsageDates) { _EL_     for (    Entry<File,Long> entry : entries) { _EL_       if (mostLongUsedFile == null) { _EL_         mostLongUsedFile=entry.getKey(); _EL_         oldestUsage=entry.getValue(); _EL_       } _EL_  else { _EL_         Long lastValueUsage=entry.getValue(); _EL_         if (lastValueUsage < oldestUsage) { _EL_           oldestUsage=lastValueUsage; _EL_           mostLongUsedFile=entry.getKey(); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   int fileSize=0; _EL_   if (mostLongUsedFile != null) { _EL_     if (mostLongUsedFile.exists()) { _EL_       fileSize=getSize(mostLongUsedFile); _EL_       if (mostLongUsedFile.delete()) { _EL_         lastUsageDates.remove(mostLongUsedFile); _EL_       } _EL_     } _EL_  else { _EL_       lastUsageDates.remove(mostLongUsedFile); _EL_     } _EL_   } _EL_   return fileSize; _EL_ } _EL_ ', 'private static char[] zzUnpackCMap(String packed){ _EL_   char[] map=new char[0x10000]; _EL_   int i=0; _EL_   int j=0; _EL_   while (i < 158) { _EL_     int count=packed.charAt(i++); _EL_     char value=packed.charAt(i++); _EL_     do     map[j++]=value; _EL_  while (--count > 0); _EL_   } _EL_   return map; _EL_ } _EL_ ', 'private void createGui(){ _EL_   for (  final IResultsPanel panel : m_factory) { _EL_     m_tabbedPane.addTab(panel.getTitle(),panel.getComponent()); _EL_   } _EL_   add(m_tabbedPane,BorderLayout.CENTER); _EL_   m_tabbedPane.setVisible(true); _EL_ } _EL_ ', 'public static float generateRandomFloatBetween(float lowerLimit,float upperLimit){ _EL_   return lowerLimit + ((upperLimit - lowerLimit) * _r.nextFloat()); _EL_ } _EL_ ', 'private void connect(){ _EL_   if (!connected) { _EL_     updateInfo(); _EL_     String connectString="tcp://" + connectAddress + ":"+ connectPort; _EL_     if (clientId == null || clientId.length() < 1) { _EL_       out(getDate() + Messages.MqttClientView_15 + connectString+ Messages.MqttClientView_16); _EL_       return; _EL_     } _EL_     try { _EL_       if (firstConnect) { _EL_         mqttClient=new MqttClient(connectString,clientId); _EL_         mqttClient.setCallback(this); _EL_         firstConnect=false; _EL_       } _EL_     } _EL_  catch (    MqttException e) { _EL_       out(getDate() + Messages.MqttClientView_17 + e.getMessage()); _EL_       e.printStackTrace(); _EL_     } _EL_     connOpts=new MqttConnectOptions(); _EL_     connOpts.setCleanSession(cleanStart); _EL_     connOpts.setConnectionTimeout(30); _EL_     connOpts.setKeepAliveInterval(keepAlive); _EL_     if (username.length() > 0 && password.length() > 0) { _EL_       connOpts.setPassword(password.toCharArray()); _EL_       connOpts.setUserName(username); _EL_     } _EL_     if (useWill) { _EL_       if (willTopic == null || willTopic.equals("")) { _EL_         out(Messages.MqttClientView_19); _EL_         return; _EL_       } _EL_       connOpts.setWill(mqttClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain); _EL_     } _EL_     try { _EL_       out(getDate() + Messages.MqttClientView_20 + connectString); _EL_       mqttClient.connect(connOpts); _EL_       connected=true; _EL_       out(getDate() + Messages.MqttClientView_21 + clientId); _EL_     } _EL_  catch (    MqttException e) { _EL_       out(getDate() + Messages.MqttClientView_22 + e.getMessage()); _EL_       e.printStackTrace(); _EL_     } _EL_   } _EL_  else { _EL_     out(Messages.MqttClientView_23); _EL_   } _EL_ } _EL_ ', 'synchronized void addTracer(Tracer tracer){ _EL_   if (curTracers.add(tracer)) { _EL_     LOG.trace(toString() + ": adding tracer " + tracer.toString()); _EL_   } _EL_ } _EL_ ', 'private void grow(){ _EL_   int newCap=(entries.length << 1) + 1; _EL_   Object[] newEntries=new Object[newCap]; _EL_   System.arraycopy(entries,0,newEntries,0,size); _EL_   entries=newEntries; _EL_ } _EL_ ', 'public void damage(double value){ _EL_   setValue(Math.max(0,getValue() - value)); _EL_ } _EL_ ', 'public Graph(){ _EL_   roots=new ArrayList<Node>(); _EL_   nodes=new ArrayList<Node>(); _EL_   string=""; _EL_ } _EL_ ', 'private static String trimVersion(String apiVersion){ _EL_   if (apiVersion == null) { _EL_     return null; _EL_   } _EL_  else { _EL_     String[] versionParts=apiVersion.split("/"); _EL_     return versionParts[versionParts.length - 1]; _EL_   } _EL_ } _EL_ ', 'private Inventory queryInventory(boolean querySkuDetails,List<String> moreItemSkus) throws IabException { _EL_   checkNotDisposed(); _EL_   checkSetupDone("queryInventory"); _EL_   try { _EL_     Inventory inv=new Inventory(); _EL_     int r=queryPurchases(inv,ITEM_TYPE_INAPP); _EL_     if (r != BILLING_RESPONSE_RESULT_OK) { _EL_       throw new IabException(r,"Error refreshing inventory (querying owned items)."); _EL_     } _EL_     if (querySkuDetails) { _EL_       r=querySkuDetails(ITEM_TYPE_INAPP,inv,moreItemSkus); _EL_       if (r != BILLING_RESPONSE_RESULT_OK) { _EL_         throw new IabException(r,"Error refreshing inventory (querying prices of items)."); _EL_       } _EL_     } _EL_     if (mSubscriptionsSupported) { _EL_       r=queryPurchases(inv,ITEM_TYPE_SUBS); _EL_       if (r != BILLING_RESPONSE_RESULT_OK) { _EL_         throw new IabException(r,"Error refreshing inventory (querying owned subscriptions)."); _EL_       } _EL_       if (querySkuDetails) { _EL_         r=querySkuDetails(ITEM_TYPE_SUBS,inv,moreItemSkus); _EL_         if (r != BILLING_RESPONSE_RESULT_OK) { _EL_           throw new IabException(r,"Error refreshing inventory (querying prices of subscriptions)."); _EL_         } _EL_       } _EL_     } _EL_     return inv; _EL_   } _EL_  catch (  RemoteException e) { _EL_     throw new IabException(IABHELPER_REMOTE_EXCEPTION,"Remote exception while refreshing inventory.",e); _EL_   } _EL_ catch (  JSONException e) { _EL_     throw new IabException(IABHELPER_BAD_RESPONSE,"Error parsing JSON response while refreshing inventory.",e); _EL_   } _EL_ } _EL_ ', '@Override public void incomingObject(IAnalyzedInterval analyzedInterval) throws AdeException { _EL_   if (!m_percentilesWithEmptyIntervals && analyzedInterval.getNumUniqueMessageIds() == 0) { _EL_     return; _EL_   } _EL_   final double rawScore=calcRawScore(analyzedInterval); _EL_   if (!SeenHugeLogProb(analyzedInterval)) { _EL_     m_rawScores.add(rawScore); _EL_     ++m_intervalCount; _EL_   } _EL_ } _EL_ ', 'public static String readFileAsString(File file,String encoding) throws IOException { _EL_   ByteBuffer buffer=readFile(file); _EL_   if (null == encoding) { _EL_     encoding="UTF-8"; _EL_   } _EL_   String converted=new String(buffer.array(),encoding); _EL_   return converted; _EL_ } _EL_ ', 'public EmBayesEstimatorEditor(EmBayesEstimatorWrapper emBayesEstWrapper){ _EL_   this(emBayesEstWrapper.getEstimateBayesIm(),emBayesEstWrapper.getDataSet()); _EL_ } _EL_ ', 'private boolean saveDataToDisk(boolean exit,boolean complete,String updatedSaveName){ _EL_   return saveDataToDisk(exit,complete,updatedSaveName,true); _EL_ } _EL_ ', 'public static final void writeMapXml(Map val,String name,XmlSerializer out,WriteMapCallback callback) throws XmlPullParserException, java.io.IOException { _EL_   if (val == null) { _EL_     out.startTag(null,"null"); _EL_     out.endTag(null,"null"); _EL_     return; _EL_   } _EL_   out.startTag(null,"map"); _EL_   if (name != null) { _EL_     out.attribute(null,"name",name); _EL_   } _EL_   writeMapXml(val,out,callback); _EL_   out.endTag(null,"map"); _EL_ } _EL_ ', 'public boolean needPreloadKey(int idx){ _EL_   return preloadKeys != null && preloadKeys.get(idx); _EL_ } _EL_ ', 'public int generateChallengeToken(InetSocketAddress address){ _EL_   int token=random.nextInt(); _EL_   challengeTokens.put(address,token); _EL_   return token; _EL_ } _EL_ ', '@Override public void perform(IR ir){ _EL_   for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) { _EL_     BasicBlock bb=e.nextElement(); _EL_     if (bb.isEmpty())     continue; _EL_     container.counter2++; _EL_     if (bb.getInfrequent()) { _EL_       container.counter1++; _EL_       if (ir.options.FREQ_FOCUS_EFFORT)       continue; _EL_     } _EL_     for (Enumeration<Instruction> ie=bb.forwardInstrEnumerator(); ie.hasMoreElements(); ) { _EL_       Instruction s=ie.nextElement(); _EL_       if (TypeCheck.conforms(s) && (invertNullAndTypeChecks(s) || pushTypeCheckBelowIf(s,ir))) { _EL_         ie=bb.forwardInstrEnumerator(); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public void runWithRetries(RetryableTask task) throws Exception { _EL_   boolean maxSleepIntervalHit=false; _EL_   for (int i=0; i < numAttempts; i++) { _EL_     try { _EL_       task.run(); _EL_       return; _EL_     } _EL_  catch (    Exception e) { _EL_       if (i == numAttempts - 1) { _EL_         throw e; _EL_       } _EL_       int sleepTime; _EL_       if (maxSleepIntervalHit) { _EL_         sleepTime=maxSleepInterval; _EL_       } _EL_  else { _EL_         sleepTime=baseSleepInterval * (int)Math.pow(2,i); _EL_       } _EL_       LOG.error("Got an exception! Sleeping for " + sleepTime + " seconds and retrying.",e); _EL_       try { _EL_         Thread.sleep(sleepTime * 1000); _EL_       } _EL_  catch (      InterruptedException ie) { _EL_         LOG.error("Unexpected interruption!",ie); _EL_         throw ie; _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public void removeRequest(InterruptRequest interruptRequest){ _EL_ synchronized (interruptRequestQueue) { _EL_     interruptRequestQueue.remove(interruptRequest); _EL_   } _EL_ } _EL_ ', '@SuppressLint("NewApi") @Nullable public static Drawable inflate(boolean forceSystemHandlingWhenPossible,@NonNull Resources resources,@DrawableRes int id){ _EL_   boolean systemHandling=isSystemHandling(forceSystemHandlingWhenPossible); _EL_   Log.d(LOG_TAG,String.format("Inflating resource with id #0x%s (system handling: %s)",Integer.toHexString(id),systemHandling)); _EL_   if (systemHandling) { _EL_     return resources.getDrawable(id,null); _EL_   } _EL_   try { _EL_     return VectorDrawable.create(resources,id); _EL_   } _EL_  catch (  Resources.NotFoundException e) { _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public static long objectFieldOffset(Field field){ _EL_   return UNSAFE.objectFieldOffset(field); _EL_ } _EL_ ', 'public void addAnnotation(String annotation,double x,double y){ _EL_   mAnnotations.add(annotation); _EL_   mStringXY.put(x,y); _EL_ } _EL_ ', 'public static byte[] ivCipherConcat(byte[] iv,byte[] cipherText){ _EL_   byte[] combined=new byte[iv.length + cipherText.length]; _EL_   System.arraycopy(iv,0,combined,0,iv.length); _EL_   System.arraycopy(cipherText,0,combined,iv.length,cipherText.length); _EL_   return combined; _EL_ } _EL_ ', 'long timestamp(long timestamp){ _EL_   this.timestamp=Math.max(this.timestamp,timestamp); _EL_   return this.timestamp; _EL_ } _EL_ ', 'public MaterialPackage(MaterialPackageBO materialPackageBO,List<GenericTrack> genericTracks){ _EL_   super(materialPackageBO); _EL_   this.materialPackageBO=materialPackageBO; _EL_   this.genericTracks=Collections.unmodifiableList(genericTracks); _EL_ } _EL_ ', 'public Edge findEdgeInSameDirection(Coordinate p0,Coordinate p1){ _EL_   for (int i=0; i < edges.size(); i++) { _EL_     Edge e=(Edge)edges.get(i); _EL_     Coordinate[] eCoord=e.getCoordinates(); _EL_     if (matchInSameDirection(p0,p1,eCoord[0],eCoord[1]))     return e; _EL_     if (matchInSameDirection(p0,p1,eCoord[eCoord.length - 1],eCoord[eCoord.length - 2]))     return e; _EL_   } _EL_   return null; _EL_ } _EL_ ', 'protected final void resolveIssue(HealthIssue healthIssue){ _EL_   EventBus eventBus; _EL_   boolean wasIssueActive; _EL_ synchronized (mLock) { _EL_     if (mHealthEventBus == null) { _EL_       LOG.w("A health issue was resolved even though no event bus was registered to " + "handle it: %1$s.",healthIssue.toString()); _EL_       return; _EL_     } _EL_     eventBus=mHealthEventBus; _EL_     wasIssueActive=mActiveIssues.remove(healthIssue); _EL_   } _EL_   if (wasIssueActive) { _EL_     eventBus.post(healthIssue.resolved); _EL_   } _EL_ } _EL_ ', 'public static byte[] decode(String s){ _EL_   return decode(s,NO_OPTIONS); _EL_ } _EL_ ', 'public boolean isUnparsedEntity(String entityName){ _EL_   Entity entity=(Entity)fEntities.get(entityName); _EL_   if (entity == null) { _EL_     return false; _EL_   } _EL_   return entity.isUnparsed(); _EL_ } _EL_ ', 'private static String urlEncode(final String text) throws UnsupportedEncodingException { _EL_   return URLEncoder.encode(text,"UTF-8"); _EL_ } _EL_ ', 'protected void processFocusEvent(FocusEvent evt){ _EL_   super.processFocusEvent(evt); _EL_   if (evt.getID() == FocusEvent.FOCUS_LOST) { _EL_     if (popup != null)     hidePopup(); _EL_   } _EL_ } _EL_ ', '@Override public synchronized void addRequestProperty(String key,String value){ _EL_   if (connected || connecting)   throw new IllegalStateException("Already connected"); _EL_   if (key == null)   throw new NullPointerException("key is null"); _EL_   if (isExternalMessageHeaderAllowed(key,value)) { _EL_     requests.add(key,value); _EL_     if (!key.equalsIgnoreCase("Content-Type")) { _EL_       userHeaders.add(key,value); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void execute(AbortableTask task){ _EL_   AbortingRunnable ar=new AbortingRunnable(task); _EL_   tasks.add(ar); _EL_   try { _EL_     exec.execute(ar); _EL_   } _EL_  catch (  RejectedExecutionException e) { _EL_     tasks.remove(ar); _EL_     throw e; _EL_   } _EL_ } _EL_ ', 'default ByteBuffer serialize(T value){ _EL_   ByteBuffer buffer=ByteBuffer.allocate(size(value)); _EL_   serialize(value,buffer); _EL_   return buffer; _EL_ } _EL_ ', 'public static Bit valueOf(String bit) throws NumberFormatException { _EL_   final int i=Integer.parseInt(bit); _EL_   if (i != 0 && i != 1) { _EL_     throw new NumberFormatException("Input \\"" + bit + "\\" must be 0 or 1."); _EL_   } _EL_   return (i > 0) ? TRUE : FALSE; _EL_ } _EL_ ', 'private int composeComponent(int a,int b){ _EL_   return Math.min(b + b * a / DIMMING_FACTOR,0xff); _EL_ } _EL_ ', 'public void removeTreeModelListener(TreeModelListener l){ _EL_   treeModelListeners.removeElement(l); _EL_ } _EL_ ', 'public URIName(String name) throws IOException { _EL_   try { _EL_     uri=new URI(name); _EL_   } _EL_  catch (  URISyntaxException use) { _EL_     throw new IOException("invalid URI name:" + name,use); _EL_   } _EL_   if (uri.getScheme() == null) { _EL_     throw new IOException("URI name must include scheme:" + name); _EL_   } _EL_   host=uri.getHost(); _EL_   if (host != null) { _EL_     if (host.charAt(0) == \'[\') { _EL_       String ipV6Host=host.substring(1,host.length() - 1); _EL_       try { _EL_         hostIP=new IPAddressName(ipV6Host); _EL_       } _EL_  catch (      IOException ioe) { _EL_         throw new IOException("invalid URI name (host " + "portion is not a valid IPv6 address):" + name); _EL_       } _EL_     } _EL_  else { _EL_       try { _EL_         hostDNS=new DNSName(host); _EL_       } _EL_  catch (      IOException ioe) { _EL_         try { _EL_           hostIP=new IPAddressName(host); _EL_         } _EL_  catch (        Exception ioe2) { _EL_           throw new IOException("invalid URI name (host " + "portion is not a valid DNS name, IPv4 address," + " or IPv6 address):"+ name); _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public ProjectedStream addView(String namespace,String name,List<Expression> parameters){ _EL_   views.add(View.create(namespace,name,parameters)); _EL_   return this; _EL_ } _EL_ ', 'protected int read(SpeechRecord recorder,byte[] buffer){ _EL_   int len=buffer.length; _EL_   int numOfBytes=recorder.read(buffer,0,len); _EL_   int status=getStatus(numOfBytes,len); _EL_   if (status == 0) { _EL_     System.arraycopy(buffer,0,mRecording,mRecordedLength,numOfBytes); _EL_     mRecordedLength+=len; _EL_   } _EL_   return status; _EL_ } _EL_ ', 'public void touch(){ _EL_   candiesStore=null; _EL_ } _EL_ ', 'public ZoneRules toRules(String zoneId){ _EL_   Objects.requireNonNull(zoneId,"zoneId"); _EL_   if (windowList.isEmpty()) { _EL_     throw new IllegalStateException("No windows have been added to the builder"); _EL_   } _EL_   final List<ZoneOffsetTransition> standardTransitionList=new ArrayList<>(4); _EL_   final List<ZoneOffsetTransition> transitionList=new ArrayList<>(256); _EL_   final List<ZoneOffsetTransitionRule> lastTransitionRuleList=new ArrayList<>(2); _EL_   final TZWindow firstWindow=windowList.get(0); _EL_   ZoneOffset loopStandardOffset=firstWindow.standardOffset; _EL_   int loopSavings=0; _EL_   if (firstWindow.fixedSavingAmountSecs != null) { _EL_     loopSavings=firstWindow.fixedSavingAmountSecs; _EL_   } _EL_   final ZoneOffset firstWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + loopSavings); _EL_   LocalDateTime loopWindowStart=LocalDateTime.of(YEAR_MIN_VALUE,1,1,0,0); _EL_   ZoneOffset loopWindowOffset=firstWallOffset; _EL_   for (  TZWindow window : windowList) { _EL_     window.tidy(loopWindowStart.getYear()); _EL_     Integer effectiveSavings=window.fixedSavingAmountSecs; _EL_     if (effectiveSavings == null) { _EL_       effectiveSavings=0; _EL_       for (      TZRule rule : window.ruleList) { _EL_         if (rule.toEpochSecond(loopStandardOffset,loopSavings) > loopWindowStart.toEpochSecond(loopWindowOffset)) { _EL_           break; _EL_         } _EL_         effectiveSavings=rule.savingAmountSecs; _EL_       } _EL_     } _EL_     if (loopStandardOffset.equals(window.standardOffset) == false) { _EL_       standardTransitionList.add(new ZoneOffsetTransition(LocalDateTime.ofEpochSecond(loopWindowStart.toEpochSecond(loopWindowOffset),0,loopStandardOffset),loopStandardOffset,window.standardOffset)); _EL_       loopStandardOffset=window.standardOffset; _EL_     } _EL_     ZoneOffset effectiveWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + effectiveSavings); _EL_     if (loopWindowOffset.equals(effectiveWallOffset) == false) { _EL_       transitionList.add(new ZoneOffsetTransition(loopWindowStart,loopWindowOffset,effectiveWallOffset)); _EL_     } _EL_     loopSavings=effectiveSavings; _EL_     for (    TZRule rule : window.ruleList) { _EL_       if (rule.isTransition(loopSavings)) { _EL_         ZoneOffsetTransition trans=rule.toTransition(loopStandardOffset,loopSavings); _EL_         if (trans.toEpochSecond() < loopWindowStart.toEpochSecond(loopWindowOffset) == false && trans.toEpochSecond() < window.createDateTimeEpochSecond(loopSavings)) { _EL_           transitionList.add(trans); _EL_           loopSavings=rule.savingAmountSecs; _EL_         } _EL_       } _EL_     } _EL_     for (    TZRule lastRule : window.lastRuleList) { _EL_       lastTransitionRuleList.add(lastRule.toTransitionRule(loopStandardOffset,loopSavings)); _EL_       loopSavings=lastRule.savingAmountSecs; _EL_     } _EL_     loopWindowOffset=window.createWallOffset(loopSavings); _EL_     loopWindowStart=LocalDateTime.ofEpochSecond(window.createDateTimeEpochSecond(loopSavings),0,loopWindowOffset); _EL_   } _EL_   return new ZoneRules(firstWindow.standardOffset,firstWallOffset,standardTransitionList,transitionList,lastTransitionRuleList); _EL_ } _EL_ ', 'public static int hash(Object o){ _EL_   int h=o == null ? 0 : o instanceof byte[] ? Arrays.hashCode((byte[])o) : o.hashCode(); _EL_   h+=(h << 15) ^ 0xffffcd7d; _EL_   h^=(h >>> 10); _EL_   h+=(h << 3); _EL_   h^=(h >>> 6); _EL_   h+=(h << 2) + (h << 14); _EL_   return h ^ (h >>> 16); _EL_ } _EL_ ', 'public void addParseTemplate(String parseTemplate){ _EL_   parseTemplates.add(parseTemplate); _EL_ } _EL_ ', 'private void attachImageFromCamera(){ _EL_   try { _EL_     if (null != mShootedPicturePath) { _EL_       Uri uri=Uri.fromFile(new File(mShootedPicturePath)); _EL_       try { _EL_         Bitmap previewBitmap=VectorApp.getSavedPickerImagePreview(); _EL_         String thumbnailPath=getThumbnailPath(mShootedPicturePath); _EL_         int rotationAngle=ImageUtils.getRotationAngleForBitmap(VectorMediasPickerActivity.this,uri); _EL_         if (0 != rotationAngle) { _EL_           android.graphics.Matrix bitmapMatrix=new android.graphics.Matrix(); _EL_           bitmapMatrix.postRotate(360 - rotationAngle); _EL_           previewBitmap=Bitmap.createBitmap(previewBitmap,0,0,previewBitmap.getWidth(),previewBitmap.getHeight(),bitmapMatrix,false); _EL_         } _EL_         File file=new File(thumbnailPath); _EL_         FileOutputStream outStream=new FileOutputStream(file); _EL_         previewBitmap.compress(Bitmap.CompressFormat.JPEG,50,outStream); _EL_         outStream.flush(); _EL_         outStream.close(); _EL_       } _EL_  catch (      Exception e) { _EL_         Log.e(LOG_TAG,"attachImageFromCamera fails to create thumbnail file"); _EL_       } _EL_       Bundle conData=new Bundle(); _EL_       Intent intent=new Intent(); _EL_       intent.setData(uri); _EL_       intent.putExtras(conData); _EL_       setResult(RESULT_OK,intent); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     setResult(RESULT_CANCELED,null); _EL_   } _EL_  finally { _EL_     VectorApp.setSavedCameraImagePreview(null); _EL_     finish(); _EL_   } _EL_ } _EL_ ', 'private double minIgnoreNaN(double a,double b){ _EL_   if (Double.isNaN(a)) { _EL_     return b; _EL_   } _EL_   if (Double.isNaN(b)) { _EL_     return a; _EL_   } _EL_   return Math.min(a,b); _EL_ } _EL_ ', 'public ObjectName preRegister(MBeanServer server,ObjectName name) throws Exception { _EL_   setMBeanServer(server); _EL_   if (name == null) { _EL_     name=new ObjectName(server.getDefaultDomain() + ":" + ServiceName.MLET); _EL_   } _EL_   this.mletObjectName=name; _EL_   return this.mletObjectName; _EL_ } _EL_ ', 'static String matchStringOrThrow(Pattern p,ToDateParser params,Enum<?> aEnum){ _EL_   String s=params.getInputStr(); _EL_   Matcher matcher=p.matcher(s); _EL_   if (!matcher.find()) { _EL_     throwException(params,format("Issue happened when parsing token \'%s\'",aEnum.name())); _EL_   } _EL_   return matcher.group(1); _EL_ } _EL_ ', 'String sourceFormForInitializer(AnnotationValue annotationValue,ProcessingEnvironment processingEnv,String memberName,Element context){ _EL_   SourceFormVisitor visitor=new InitializerSourceFormVisitor(processingEnv,memberName,context); _EL_   StringBuilder sb=new StringBuilder(); _EL_   visitor.visit(annotationValue,sb); _EL_   return sb.toString(); _EL_ } _EL_ ', 'static ByteBuffer newByteBuffer(int capacity){ _EL_   ByteBuffer newbb=ByteBuffer.allocate(capacity); _EL_   newbb.order(ByteOrder.LITTLE_ENDIAN); _EL_   return newbb; _EL_ } _EL_ ', 'public synchronized void add(double x,double y,double value){ _EL_   super.add(x,y); _EL_   mValue.add(value); _EL_   updateRange(value); _EL_ } _EL_ ', 'private void validateCollectionAttribute(CollectionAttribute collection,Set<String> allCollections){ _EL_   if (collection == null || allCollections == null) { _EL_     return; _EL_   } _EL_   for (  RestMethod restMethod : collection.getMethods()) { _EL_     if (allCollections.contains(restMethod.getRestFullMethodName())) { _EL_       aspect.warning(SimpleLocation.TOPLEVEL,"The rpc methods and the associated http paths are not following the guidelines. As a " + "result the derived rest collection \'%s\' contains a sub collection and a " + "method with the same name as \'%s\'. This can cause a failure to generate client "+ "library, since these names are used for generating artifacts in generated code.",collection.getFullName(),restMethod.getRestMethodName()); _EL_     } _EL_   } _EL_ } _EL_ ', 'public HoltWintersModelBuilder alpha(double alpha){ _EL_   this.alpha=alpha; _EL_   return this; _EL_ } _EL_ ', "public static @CheckForNull ClassDescriptor createClassDescriptorFromFieldSignature(String signature){ _EL_   int start=signature.indexOf('L'); _EL_   if (start < 0) { _EL_     return null; _EL_   } _EL_   int end=signature.indexOf(';',start); _EL_   if (end < 0) { _EL_     return null; _EL_   } _EL_   return createClassDescriptor(signature.substring(start + 1,end)); _EL_ } _EL_ ", 'private static ServiceTicketResponse checkGetNfcServiceTicketResponse(ServiceTicketResponse serviceTicketResponse) throws RpcException { _EL_   logger.info("Checking {}",serviceTicketResponse); _EL_ switch (serviceTicketResponse.getResult()) { _EL_ case OK: _EL_     break; _EL_ case SYSTEM_ERROR: _EL_   throw new SystemErrorException(serviceTicketResponse.getError()); _EL_ case NOT_FOUND: _EL_ throw new DatastoreNotFoundException(serviceTicketResponse.getError()); _EL_ default : _EL_ throw new RpcException(String.format("Unknown result: %s",serviceTicketResponse.getError())); _EL_ } _EL_ return serviceTicketResponse; _EL_ } _EL_ ', 'public void schedule(TimerTask task,long delay){ _EL_   if (delay < 0)   throw new IllegalArgumentException("Negative delay."); _EL_   sched(task,System.currentTimeMillis() + delay,0); _EL_ } _EL_ ', 'public void filledEllipse(double x,double y,double semiMajorAxis,double semiMinorAxis){ _EL_   if (semiMajorAxis < 0)   throw new IllegalArgumentException("ellipse semimajor axis can\'t be negative"); _EL_   if (semiMinorAxis < 0)   throw new IllegalArgumentException("ellipse semiminor axis can\'t be negative"); _EL_   double xs=scaleX(x); _EL_   double ys=scaleY(y); _EL_   double ws=factorX(2 * semiMajorAxis); _EL_   double hs=factorY(2 * semiMinorAxis); _EL_   if (ws <= 1 && hs <= 1)   pixel(x,y); _EL_  else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs)); _EL_   draw(); _EL_ } _EL_ ', '@Override public Cursor swapCursor(Cursor newCursor){ _EL_   mAlphabetIndexer.setCursor(newCursor); _EL_   return super.swapCursor(newCursor); _EL_ } _EL_ ', 'public void lockFlushing(){ _EL_   flushLock.lock(); _EL_ } _EL_ ', 'public static boolean canBeRandomized(Class clazz){ _EL_   return ClassUtils.isPrimitiveOrWrapper(clazz) || clazz.equals(String.class) || clazz.equals(IDiscordClient.class); _EL_ } _EL_ ', 'public static SecretKeys keys(String keysStr) throws InvalidKeyException { _EL_   String[] keysArr=keysStr.split(":"); _EL_   if (keysArr.length != 2) { _EL_     throw new IllegalArgumentException("Cannot parse aesKey:hmacKey"); _EL_   } _EL_  else { _EL_     byte[] confidentialityKey=Base64.decode(keysArr[0],BASE64_FLAGS); _EL_     if (confidentialityKey.length != AES_KEY_LENGTH_BITS / 8) { _EL_       throw new InvalidKeyException("Base64 decoded key is not " + AES_KEY_LENGTH_BITS + " bytes"); _EL_     } _EL_     byte[] integrityKey=Base64.decode(keysArr[1],BASE64_FLAGS); _EL_     if (integrityKey.length != HMAC_KEY_LENGTH_BITS / 8) { _EL_       throw new InvalidKeyException("Base64 decoded key is not " + HMAC_KEY_LENGTH_BITS + " bytes"); _EL_     } _EL_     return new SecretKeys(new SecretKeySpec(confidentialityKey,0,confidentialityKey.length,CIPHER),new SecretKeySpec(integrityKey,HMAC_ALGORITHM)); _EL_   } _EL_ } _EL_ ', 'public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){ _EL_   if (x < this.minX) { _EL_     throw new RasterFormatException("x lies outside raster"); _EL_   } _EL_   if (y < this.minY) { _EL_     throw new RasterFormatException("y lies outside raster"); _EL_   } _EL_   if ((x + width < x) || (x + width > this.minX + this.width)) { _EL_     throw new RasterFormatException("(x + width) is outside of Raster"); _EL_   } _EL_   if ((y + height < y) || (y + height > this.minY + this.height)) { _EL_     throw new RasterFormatException("(y + height) is outside of Raster"); _EL_   } _EL_   SampleModel sm; _EL_   if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList); _EL_  else   sm=sampleModel; _EL_   int deltaX=x0 - x; _EL_   int deltaY=y0 - y; _EL_   return new ShortBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this); _EL_ } _EL_ ', 'private void sortChildren(final JCriteriumTreeNode parentNode){ _EL_   final List<JCriteriumTreeNode> operators=new ArrayList<JCriteriumTreeNode>(); _EL_   final List<JCriteriumTreeNode> conditions=new ArrayList<JCriteriumTreeNode>(); _EL_   final List<JCriteriumTreeNode> minus=new ArrayList<JCriteriumTreeNode>(); _EL_   final Enumeration<?> children=parentNode.children(); _EL_   while (children.hasMoreElements()) { _EL_     final JCriteriumTreeNode child=(JCriteriumTreeNode)children.nextElement(); _EL_     final ICriterium type=child.getCriterium(); _EL_     if (type instanceof CConditionCriterium) { _EL_       conditions.add(child); _EL_     } _EL_  else { _EL_       operators.add(child); _EL_     } _EL_   } _EL_   parentNode.removeAllChildren(); _EL_   for (  final JCriteriumTreeNode child : operators) { _EL_     parentNode.add(child); _EL_     child.setParent(parentNode); _EL_   } _EL_   for (  final JCriteriumTreeNode child : conditions) { _EL_     parentNode.add(child); _EL_     child.setParent(parentNode); _EL_   } _EL_   for (  final JCriteriumTreeNode child : minus) { _EL_     parentNode.add(child); _EL_     child.setParent(parentNode); _EL_   } _EL_ } _EL_ ', 'public static int poisson(double lambda){ _EL_   int k=0; _EL_   double p=1.0; _EL_   double L=Math.exp(-lambda); _EL_   do { _EL_     k++; _EL_     p*=uniform(); _EL_   } _EL_  while (p >= L); _EL_   return k - 1; _EL_ } _EL_ ', 'public String build(String input){ _EL_   inputString=input; _EL_   inputIndex=0; _EL_   inputLength=input.length(); _EL_   outputString=new StringBuffer(); _EL_   char nextChar; _EL_   while ((nextChar=get()) != 0 && outputString.length() < maxOutputLength) { _EL_     if (nextChar == \'/\') { _EL_       if (inputStartsWith("*!")) { _EL_         String nextChars=peek(7); _EL_         boolean haveBangComment=false; _EL_         if (nextChars != null && nextChars.length() == 7) { _EL_           haveBangComment=true; _EL_           for (int i=2; i < nextChars.length(); i++) { _EL_             if (!Character.isDigit(nextChars.charAt(i))) { _EL_               haveBangComment=false; _EL_               break; _EL_             } _EL_           } _EL_         } _EL_         if (haveBangComment) { _EL_           skip(7); _EL_           String contents=getToDelimiter("*/"); _EL_           if (contents != null) { _EL_             put(contents); _EL_             skip(2); _EL_           } _EL_         } _EL_  else { _EL_           put(nextChar); _EL_         } _EL_       } _EL_  else       if (inputStartsWith("*")) { _EL_         if (getToDelimiter("*/") != null)         skip(2); _EL_       } _EL_  else { _EL_         put(nextChar); _EL_       } _EL_     } _EL_  else     if (nextChar == \'-\') { _EL_       if (inputStartsWith("-")) { _EL_         String tail=peek(2); _EL_         if (tail == null) { _EL_           break; _EL_         } _EL_  else { _EL_           if (Character.isWhitespace(tail.charAt(1))) { _EL_             String buf=getToEndOfLine(); _EL_             skip(buf.length()); _EL_             put(\' \'); _EL_           } _EL_  else           put(nextChar); _EL_         } _EL_       } _EL_  else { _EL_         put(nextChar); _EL_       } _EL_     } _EL_  else     if (nextChar == \'\\n\') { _EL_       put(" "); _EL_     } _EL_  else { _EL_       put(nextChar); _EL_     } _EL_   } _EL_   return outputString.toString(); _EL_ } _EL_ ', 'public Iterator<String> iterateSerializers(){ _EL_   return serializers.iterator(); _EL_ } _EL_ ', 'private static void checkKey(String key) throws MalformedObjectNameException { _EL_   if (key == null)   throw new NullPointerException("Invalid key (null)"); _EL_   final int len=key.length(); _EL_   if (len == 0)   throw new MalformedObjectNameException("Invalid key (empty)"); _EL_   final char[] k=key.toCharArray(); _EL_   final int endKey=parseKey(k,0); _EL_   if (endKey < len)   throw new MalformedObjectNameException("Invalid character in value: `" + k[endKey] + "\'"); _EL_ } _EL_ ', 'public static String formatDateTime(java.util.Date date,String format,String locale,String timeZone){ _EL_   SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone); _EL_ synchronized (dateFormat) { _EL_     return dateFormat.format(date); _EL_   } _EL_ } _EL_ ', 'public static byte[] decode(byte[] input,int offset,int len,int flags){ _EL_   Decoder decoder=new Decoder(flags,new byte[len * 3 / 4]); _EL_   if (!decoder.process(input,offset,len,true)) { _EL_     throw new IllegalArgumentException("bad base-64"); _EL_   } _EL_   if (decoder.op == decoder.output.length) { _EL_     return decoder.output; _EL_   } _EL_   byte[] temp=new byte[decoder.op]; _EL_   System.arraycopy(decoder.output,0,temp,0,decoder.op); _EL_   return temp; _EL_ } _EL_ ', 'protected MessageDigest(String algorithm){ _EL_   this.algorithm=algorithm; _EL_ } _EL_ ', 'private void createGui(){ _EL_   final JPanel topPanel=new JPanel(new BorderLayout()); _EL_   final JPanel innerTopPanel=new JPanel(new BorderLayout()); _EL_   innerTopPanel.add(m_stdEditPanel); _EL_   topPanel.add(innerTopPanel); _EL_   final JPanel debuggerChooserPanel=new JPanel(new BorderLayout()); _EL_   debuggerChooserPanel.setBorder(new TitledBorder("Project Debuggers")); _EL_   m_checkedList=new JCheckedListbox<>(new Vector<DebuggerTemplate>(),false); _EL_   updateCheckedListPanel(); _EL_   final JScrollPane debuggerScrollPane=new JScrollPane(m_checkedList); _EL_   m_checkedListPanel.add(debuggerScrollPane); _EL_   debuggerChooserPanel.add(m_checkedListPanel,BorderLayout.CENTER); _EL_   debuggerChooserPanel.setMinimumSize(new Dimension(0,128)); _EL_   debuggerChooserPanel.setPreferredSize(new Dimension(0,128)); _EL_   innerTopPanel.add(debuggerChooserPanel,BorderLayout.SOUTH); _EL_   final JPanel buttonPanel=new JPanel(new GridLayout(1,2)); _EL_   buttonPanel.setBorder(new EmptyBorder(0,0,5,2)); _EL_   buttonPanel.add(new JPanel()); _EL_   buttonPanel.add(m_saveButton); _EL_   topPanel.add(buttonPanel,BorderLayout.SOUTH); _EL_   final JPanel bottomPanel=new CAddressSpacesTablePanel(m_table); _EL_   final JScrollPane scrollPane=new JScrollPane(m_table); _EL_   bottomPanel.setBorder(m_titledBorder); _EL_   setBorder(new EmptyBorder(0,0,0,1)); _EL_   bottomPanel.add(scrollPane); _EL_   final JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,topPanel,bottomPanel); _EL_   splitPane.setOneTouchExpandable(true); _EL_   splitPane.setDividerLocation(splitPane.getMinimumDividerLocation()); _EL_   splitPane.setResizeWeight(0.5); _EL_   add(splitPane); _EL_ } _EL_ ', 'private void copyACls(final List<AccessControlLevel> accessControlLevels2){ _EL_   for (  AccessControlLevel acl : this.accessControlLevels) { _EL_     accessControlLevels2.add(new AccessControlLevel(acl)); _EL_   } _EL_ } _EL_ ', 'private void handleResponse(AvsResponse response){ _EL_   boolean checkAfter=(avsQueue.size() == 0); _EL_   if (response != null) { _EL_     for (int i=response.size() - 1; i >= 0; i--) { _EL_       if (response.get(i) instanceof AvsReplaceAllItem || response.get(i) instanceof AvsReplaceEnqueuedItem) { _EL_         avsQueue.clear(); _EL_         response.remove(i); _EL_       } _EL_     } _EL_     Log.i(TAG,"Adding " + response.size() + " items to our queue"); _EL_     avsQueue.addAll(response); _EL_   } _EL_   if (checkAfter) { _EL_     checkQueue(); _EL_   } _EL_ } _EL_ ', 'protected synchronized void request(String stream){ _EL_   if (stream == null || stream.isEmpty()) { _EL_     return; _EL_   } _EL_   stream=stream.toLowerCase(Locale.ENGLISH); _EL_   FollowerInfo cachedInfo=cached.get(stream); _EL_   if (cachedInfo == null || checkTimePassed(cachedInfo)) { _EL_     if (type == Follower.Type.FOLLOWER) { _EL_       api.requestFollowers(stream); _EL_     } _EL_  else     if (type == Follower.Type.SUBSCRIBER) { _EL_       api.requestSubscribers(stream); _EL_     } _EL_   } _EL_  else { _EL_     if (type == Follower.Type.FOLLOWER) { _EL_       listener.receivedFollowers(cachedInfo); _EL_     } _EL_  else     if (type == Follower.Type.SUBSCRIBER) { _EL_       listener.receivedSubscribers(cachedInfo); _EL_     } _EL_   } _EL_ } _EL_ ', 'boolean removeViewIfHidden(View view){ _EL_   final int index=mCallback.indexOfChild(view); _EL_   if (index == -1) { _EL_     if (mHiddenViews.remove(view) && DEBUG) { _EL_       throw new IllegalStateException("view is in hidden list but not in view group"); _EL_     } _EL_     return true; _EL_   } _EL_   if (mBucket.get(index)) { _EL_     mBucket.remove(index); _EL_     mCallback.removeViewAt(index); _EL_     if (!mHiddenViews.remove(view) && DEBUG) { _EL_       throw new IllegalStateException("removed a hidden view but it is not in hidden views list"); _EL_     } _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void serialize(KXmlSerializer serializer) throws IOException { _EL_   serializer.startTag(ns,TAG); _EL_   serializeAttribute(serializer,NAME_ATTR,mName); _EL_   serializeAttribute(serializer,APP_PACKAGE_NAME_ATTR,mAppPackageName); _EL_   serializeAttribute(serializer,DIGEST_ATTR,getDigest()); _EL_   if (SIGNATURE_TEST_PKG.equals(mName)) { _EL_     serializer.attribute(ns,"signatureCheck","true"); _EL_   } _EL_   mSuiteRoot.serialize(serializer); _EL_   serializer.endTag(ns,TAG); _EL_ } _EL_ ', 'public void rollback(Throwable t){ _EL_   log.debug("  ROLLBACK: deleting " + tempFile + " due to "+ t); _EL_   try { _EL_     fileContentStore.delete(tempFile,node); _EL_   } _EL_  catch (  Exception e) { _EL_     t.addSuppressed(e); _EL_   } _EL_ } _EL_ ', 'public synchronized int lastIndexOf(Object object,int location){ _EL_   if (location < elementCount) { _EL_     if (object != null) { _EL_       for (int i=location; i >= 0; i--) { _EL_         if (object.equals(elementData[i])) { _EL_           return i; _EL_         } _EL_       } _EL_     } _EL_  else { _EL_       for (int i=location; i >= 0; i--) { _EL_         if (elementData[i] == null) { _EL_           return i; _EL_         } _EL_       } _EL_     } _EL_     return -1; _EL_   } _EL_   throw arrayIndexOutOfBoundsException(location,elementCount); _EL_ } _EL_ ', '@Override public boolean canUndo(){ _EL_   return !m_UndoList.isEmpty(); _EL_ } _EL_ ', 'public java.lang.StringBuffer insert(int offset,char c){ _EL_   internal.insert(offset,c); _EL_   return this; _EL_ } _EL_ ', 'protected void calculateDestination(IFile uxf,ICompilationUnit referencingCompilationUnit,Destination dest) throws CoreException { _EL_   IFile uxfDest=calculateImgDestination(uxf,referencingCompilationUnit); _EL_   if (uxfDest != null) { _EL_     dest.imgFileDestination=uxfDest; _EL_   } _EL_ } _EL_ ', 'public void updateVisibleIds(List<Integer> priority){ _EL_   if (mNativeTabContentManager != 0) { _EL_     int idsSize=Math.min(mFullResThumbnailsMaxSize,priority.size()); _EL_     if (idsSize != mPriorityTabIds.length) { _EL_       mPriorityTabIds=new int[idsSize]; _EL_     } _EL_     for (int i=0; i < idsSize; i++) { _EL_       mPriorityTabIds[i]=priority.get(i); _EL_     } _EL_     nativeUpdateVisibleIds(mNativeTabContentManager,mPriorityTabIds); _EL_   } _EL_ } _EL_ ', 'public final void walkGraph(Hashtable semNodesTable){ _EL_   Integer uid=new Integer(myUID); _EL_   if (semNodesTable.get(uid) != null)   return; _EL_   semNodesTable.put(new Integer(myUID),this); _EL_ } _EL_ ', 'public boolean showPreviousNotification(){ _EL_   int i=getSelectedIndex(); _EL_   if (i != -1 && i > 0) { _EL_     model.setSelectedItem(model.getElementAt(i - 1)); _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'protected void addInputNode_internal(BNode inputNode){ _EL_   if (inputNodes.containsKey(inputNode.getId())) { _EL_     log.warning("node " + inputNode.getId() + " already included in the input nodes of "+ nodeId); _EL_   } _EL_   inputNodes.put(inputNode.getId(),inputNode); _EL_ } _EL_ ', 'public static void initialize(final CDatabaseConfiguration configuration) throws CouldntLoadDriverException, CouldntConnectException, SQLException { _EL_   checkDriver(configuration); _EL_   final String url=POSTGRES_DRIVER + "//" + configuration.getHost()+ "/"+ POSTGRES_DEFAULT_DB; _EL_   Connection connection=null; _EL_   try { _EL_     connection=DriverManager.getConnection(url,configuration.getUser(),configuration.getPassword()); _EL_   } _EL_  catch (  final SQLException exception) { _EL_     CUtilityFunctions.logException(exception); _EL_     throw new CouldntConnectException(exception,exception.getErrorCode(),exception.getSQLState()); _EL_   } _EL_   final String statement="CREATE DATABASE \\"" + configuration.getName() + "\\""; _EL_   final PreparedStatement preparedStatement=connection.prepareStatement(statement); _EL_   try { _EL_     preparedStatement.execute(); _EL_   } _EL_   finally { _EL_     preparedStatement.close(); _EL_     connection.close(); _EL_   } _EL_ } _EL_ ', 'public List<FCEndpoint> showFcnsDatabase(Integer vsanId) throws NetworkDeviceControllerException { _EL_   Map<Integer,String> vsanToWwns=getVsanWwns(vsanId); _EL_   List<FCEndpoint> connections=new ArrayList<FCEndpoint>(); _EL_   SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN}; _EL_   StringBuilder buf=new StringBuilder(); _EL_   String cmd=MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.cmd"); _EL_   if (vsanId != null) { _EL_     cmd=cmd + MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.vsan.cmd") + vsanId.toString()+ "\\n"; _EL_   } _EL_  else { _EL_     cmd=cmd + "\\n"; _EL_   } _EL_   SSHPrompt prompt=sendWaitFor(cmd,defaultTimeout,prompts,buf); _EL_   String[] lines=getLines(buf); _EL_   String[] regex={MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.VSAN.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.portwwn.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.nodewwn.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.fabricportwwn.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.ConnectedInterface.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.SwitchName.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.deviceAlias.match")}; _EL_   String[] groups=new String[10]; _EL_   FCEndpoint conn=null; _EL_   for (  String line : lines) { _EL_     int index=match(line,regex,groups,Pattern.CASE_INSENSITIVE); _EL_ switch (index) { _EL_ case 0: _EL_       conn=new FCEndpoint(); _EL_     conn.setFabricId(groups[0]); _EL_   conn.setFcid(groups[1]); _EL_ String fabricWwn=vsanToWwns.get(new Integer(groups[0])); _EL_ if (fabricWwn != null) { _EL_ conn.setFabricWwn(fabricWwn); _EL_ } _EL_ connections.add(conn); _EL_ break; _EL_ case 1: _EL_ conn.setRemotePortName(groups[0]); _EL_ break; _EL_ case 2: _EL_ conn.setRemoteNodeName(groups[0]); _EL_ break; _EL_ case 3: _EL_ conn.setSwitchPortName(groups[0]); _EL_ break; _EL_ case 4: _EL_ conn.setSwitchInterface(groups[0]); _EL_ break; _EL_ case 5: _EL_ conn.setSwitchName(groups[0]); _EL_ break; _EL_ case 6: _EL_ conn.setRemotePortAlias(groups[0]); _EL_ } _EL_ } _EL_ return connections; _EL_ } _EL_ ', 'private void registerObjectRead(Object obj,int handle,boolean unshared) throws IOException { _EL_   if (unshared) { _EL_     obj=UNSHARED_OBJ; _EL_   } _EL_   int index=handle - ObjectStreamConstants.baseWireHandle; _EL_   int size=objectsRead.size(); _EL_   while (index > size) { _EL_     objectsRead.add(null); _EL_     ++size; _EL_   } _EL_   if (index == size) { _EL_     objectsRead.add(obj); _EL_   } _EL_  else { _EL_     objectsRead.set(index,obj); _EL_   } _EL_ } _EL_ ', 'public static void addExtensionHeader(String headerName,String className){ _EL_   nameMap.put(headerName.toLowerCase(),className); _EL_ } _EL_ ', 'public boolean merge(final Frame<? extends V> frame,final Interpreter<V> interpreter) throws AnalyzerException { _EL_   if (top != frame.top) { _EL_     throw new AnalyzerException(null,"Incompatible stack heights"); _EL_   } _EL_   boolean changes=false; _EL_   for (int i=0; i < locals + top; ++i) { _EL_     V v=interpreter.merge(values[i],frame.values[i]); _EL_     if (!v.equals(values[i])) { _EL_       values[i]=v; _EL_       changes=true; _EL_     } _EL_   } _EL_   return changes; _EL_ } _EL_ ', 'private void smoothSnapToPosition(int scrollY,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo info){ _EL_   mRv.removeCallbacks(mSmoothSnapNextFrameRunnable); _EL_   mRv.removeCallbacks(mFastScrollToTargetSectionRunnable); _EL_   trackAllChildViews(); _EL_   if (mHasFastScrollTouchSettled) { _EL_     mCurrentFastScrollSection=info.sectionName; _EL_     mTargetFastScrollSection=null; _EL_     updateTrackedViewsFastScrollFocusState(); _EL_   } _EL_  else { _EL_     mCurrentFastScrollSection=null; _EL_     mTargetFastScrollSection=info.sectionName; _EL_     mHasFastScrollTouchSettled=false; _EL_     updateTrackedViewsFastScrollFocusState(); _EL_     mRv.postDelayed(mFastScrollToTargetSectionRunnable,mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION); _EL_   } _EL_   int newScrollY=Math.min(availableScrollHeight,mRv.getPaddingTop() + mRv.getTop(info.fastScrollToItem.rowIndex)); _EL_   int numFrames=mFastScrollFrames.length; _EL_   for (int i=0; i < numFrames; i++) { _EL_     mFastScrollFrames[i]=(newScrollY - scrollY) / numFrames; _EL_   } _EL_   mFastScrollFrameIndex=0; _EL_   mRv.postOnAnimation(mSmoothSnapNextFrameRunnable); _EL_ } _EL_ ', 'private void updatePropertyToValue2() throws Exception { _EL_   properties.put(TEST_KEY,TEST_VALUE_2); _EL_   updatePropertiesFile(); _EL_ } _EL_ ', 'public void unassignServices(String universalId,Set serviceNames) throws AMConsoleException { _EL_   if ((serviceNames != null) && !serviceNames.isEmpty()) { _EL_     String[] params=new String[2]; _EL_     params[0]=universalId; _EL_     String currentSvc=""; _EL_     try { _EL_       AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),universalId); _EL_       for (Iterator iter=serviceNames.iterator(); iter.hasNext(); ) { _EL_         currentSvc=(String)iter.next(); _EL_         params[1]=currentSvc; _EL_         logEvent("ATTEMPT_IDENTITY_UNASSIGN_SERVICE",params); _EL_         amid.unassignService(currentSvc); _EL_         logEvent("SUCCEED_IDENTITY_UNASSIGN_SERVICE",params); _EL_       } _EL_     } _EL_  catch (    SSOException e) { _EL_       String[] paramsEx={universalId,currentSvc,getErrorString(e)}; _EL_       logEvent("SSO_EXCEPTION_IDENTITY_UNASSIGN_SERVICE",paramsEx); _EL_       debug.warning("EntitiesModelImpl.unassignServices",e); _EL_       throw new AMConsoleException(getErrorString(e)); _EL_     } _EL_ catch (    IdRepoException e) { _EL_       String[] paramsEx={universalId,currentSvc,getErrorString(e)}; _EL_       logEvent("IDM_EXCEPTION_IDENTITY_UNASSIGN_SERVICE",paramsEx); _EL_       debug.warning("EntitiesModelImpl.unassignServices",e); _EL_       throw new AMConsoleException(getErrorString(e)); _EL_     } _EL_   } _EL_ } _EL_ ', 'private Cluster<T> expandCluster(final Cluster<T> cluster,final T point,final List<T> neighbors,final Collection<T> points,final Map<Clusterable,PointStatus> visited){ _EL_   cluster.addPoint(point); _EL_   visited.put(point,PointStatus.PART_OF_CLUSTER); _EL_   List<T> seeds=new ArrayList<T>(neighbors); _EL_   int index=0; _EL_   while (index < seeds.size()) { _EL_     final T current=seeds.get(index); _EL_     PointStatus pStatus=visited.get(current); _EL_     if (pStatus == null) { _EL_       final List<T> currentNeighbors=getNeighbors(current,points); _EL_       if (currentNeighbors.size() >= minPts) { _EL_         seeds=merge(seeds,currentNeighbors); _EL_       } _EL_     } _EL_     if (pStatus != PointStatus.PART_OF_CLUSTER) { _EL_       visited.put(current,PointStatus.PART_OF_CLUSTER); _EL_       cluster.addPoint(current); _EL_     } _EL_     index++; _EL_   } _EL_   return cluster; _EL_ } _EL_ ', "@Override public int parse(DateTimeParseContext context,CharSequence text,int position){ _EL_   int length=text.length(); _EL_   if (position > length) { _EL_     throw new IndexOutOfBoundsException(); _EL_   } _EL_   if (position == length) { _EL_     return ~position; _EL_   } _EL_   char nextChar=text.charAt(position); _EL_   if (nextChar == '+' || nextChar == '-') { _EL_     return parseOffsetBased(context,text,position,position,OffsetIdPrinterParser.INSTANCE_ID_Z); _EL_   } _EL_  else   if (length >= position + 2) { _EL_     char nextNextChar=text.charAt(position + 1); _EL_     if (context.charEquals(nextChar,'U') && context.charEquals(nextNextChar,'T')) { _EL_       if (length >= position + 3 && context.charEquals(text.charAt(position + 2),'C')) { _EL_         return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO); _EL_       } _EL_       return parseOffsetBased(context,text,position,position + 2,OffsetIdPrinterParser.INSTANCE_ID_ZERO); _EL_     } _EL_  else     if (context.charEquals(nextChar,'G') && length >= position + 3 && context.charEquals(nextNextChar,'M') && context.charEquals(text.charAt(position + 2),'T')) { _EL_       return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO); _EL_     } _EL_   } _EL_   PrefixTree tree=getTree(context); _EL_   ParsePosition ppos=new ParsePosition(position); _EL_   String parsedZoneId=tree.match(text,ppos); _EL_   if (parsedZoneId == null) { _EL_     if (context.charEquals(nextChar,'Z')) { _EL_       context.setParsed(ZoneOffset.UTC); _EL_       return position + 1; _EL_     } _EL_     return ~position; _EL_   } _EL_   context.setParsed(ZoneId.of(parsedZoneId)); _EL_   return ppos.getIndex(); _EL_ } _EL_ ", 'private void prepareTransfers() throws LibUsbException { _EL_   if (mAvailableTransfers == null) { _EL_     mAvailableTransfers=new LinkedTransferQueue<>(); _EL_     for (int x=0; x < TRANSFER_BUFFER_POOL_SIZE; x++) { _EL_       Transfer transfer=LibUsb.allocTransfer(); _EL_       if (transfer == null) { _EL_         throw new LibUsbException("couldn\'t allocate transfer",LibUsb.ERROR_NO_MEM); _EL_       } _EL_       final ByteBuffer buffer=ByteBuffer.allocateDirect(mBufferSize); _EL_       LibUsb.fillBulkTransfer(transfer,mDeviceHandle,USB_ENDPOINT,buffer,BufferProcessor.this,"Buffer",USB_TIMEOUT_US); _EL_       mAvailableTransfers.add(transfer); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void outputFullLines() throws IOException { _EL_   for (; ; ) { _EL_     int leftLen=leftBuf.indexOf("\\n"); _EL_     if (leftLen < 0) { _EL_       return; _EL_     } _EL_     int rightLen=rightBuf.indexOf("\\n"); _EL_     if (rightLen < 0) { _EL_       return; _EL_     } _EL_     if (leftLen != 0) { _EL_       out.write(leftBuf.substring(0,leftLen)); _EL_     } _EL_     if (rightLen != 0) { _EL_       writeSpaces(out,leftWidth - leftLen); _EL_       out.write(rightBuf.substring(0,rightLen)); _EL_     } _EL_     out.write(\'\\n\'); _EL_     leftBuf.delete(0,leftLen + 1); _EL_     rightBuf.delete(0,rightLen + 1); _EL_   } _EL_ } _EL_ ', 'public void registerUnregisteredNamespaces(){ _EL_   for (int i=0; i < m_unregisteredExtensions.size(); i++) { _EL_     String ns=(String)m_unregisteredExtensions.get(i); _EL_     ExtensionNamespaceSupport extNsSpt=defineJavaNamespace(ns); _EL_     if (extNsSpt != null)     m_extensions.add(extNsSpt); _EL_   } _EL_ } _EL_ ', 'public Builder deleteDisplayName(){ _EL_   deleteFields.add("displayName"); _EL_   return this; _EL_ } _EL_ ', 'public static Type newType(AST ast,VariableDeclaration declaration){ _EL_   return newType(ast,declaration,null,null); _EL_ } _EL_ ', 'private void waitForIteratorsCleared(IgniteCache<String,Integer> cache,int secs) throws InterruptedException { _EL_   for (int i=0; i < secs; i++) { _EL_     try { _EL_       cache.size(); _EL_       checkIteratorsCleared(); _EL_     } _EL_  catch (    AssertionFailedError e) { _EL_       if (i == 9) { _EL_         for (int j=0; j < gridCount(); j++)         executeOnLocalOrRemoteJvm(j,new PrintIteratorStateTask()); _EL_         throw e; _EL_       } _EL_       log.info("Iterators not cleared, will wait"); _EL_       Thread.sleep(1000); _EL_     } _EL_   } _EL_ } _EL_ ', "private int indexOf(String fullPath){ _EL_   for (int i=0, length=this.relativePaths.length; i < length; i++) { _EL_     String currentRelativePath=this.relativePaths[i]; _EL_     if (currentRelativePath == null)     continue; _EL_     String currentContainerPath=this.containerPaths[i]; _EL_     String currentFullPath=currentRelativePath.length() == 0 ? currentContainerPath : (currentContainerPath + '/' + currentRelativePath); _EL_     if (encloses(currentFullPath,fullPath,i))     return i; _EL_   } _EL_   return -1; _EL_ } _EL_ ", 'boolean destroyVolume(boolean force){ _EL_   NaElement elem=new NaElement("volume-destroy"); _EL_   elem.addNewChild("force",Boolean.toString(force)); _EL_   elem.addNewChild("name",name); _EL_   try { _EL_     server.invokeElem(elem); _EL_     return true; _EL_   } _EL_  catch (  Exception e) { _EL_     String msg="Failed to destroy volume: " + name; _EL_     log.error(msg,e); _EL_     throw new NetAppException(msg,e); _EL_   } _EL_ } _EL_ ', 'public static GeneralPath stackSpline(GeneralPath p,float[] pts,float epsilon,float slack,boolean closed,float tx,float ty){ _EL_   int npoints=0; _EL_   for (; npoints < pts.length; ++npoints)   if (Float.isNaN(pts[npoints]))   break; _EL_   return stackSpline(p,pts,0,npoints / 2,epsilon,slack,closed,tx,ty); _EL_ } _EL_ ', 'private long convertToBytes(int megaBytes){ _EL_   long bytes=megaBytes; _EL_   bytes=bytes * 1024 * 1024; _EL_   return bytes; _EL_ } _EL_ ', 'private String generateZonesetCloneName(String zonesetToClone){ _EL_   try { _EL_     Thread.sleep(1000); _EL_   } _EL_  catch (  InterruptedException ex) { _EL_     _log.warn(ex.getLocalizedMessage()); _EL_   } _EL_   Calendar cal=Calendar.getInstance(); _EL_   DateFormat dateFormat=new SimpleDateFormat("MMddyy-HHmmss"); _EL_   String dateString=dateFormat.format(cal.getTime()); _EL_   String longName=MDSDialogProperties.getString("MDSDialog.zonesetCloneLongName.cmd"); _EL_   if (!longName.contains("!MDSDialog.zonesetCloneLongName.cmd!")) { _EL_     return longName; _EL_   } _EL_   return "ViPR-" + zonesetToClone + "-"+ dateString; _EL_ } _EL_ ', 'private StringBuffer buildSelectQuery(String schemaName,String tableName,ArrayList<OneRowChange.ColumnSpec> keys,ArrayList<OneRowChange.ColumnVal> keyValues){ _EL_   StringBuffer stmt=new StringBuffer(); _EL_   stmt.append("SELECT * FROM "); _EL_   stmt.append(conn.getDatabaseObjectName(schemaName) + "." + conn.getDatabaseObjectName(tableName)); _EL_   stmt.append(" WHERE "); _EL_   printColumnSpec(stmt,keys,keyValues,PrintMode.ASSIGNMENT," AND "); _EL_   return stmt; _EL_ } _EL_ ', 'public void show(Animation anim){ _EL_   mAnim=anim; _EL_   show(); _EL_ } _EL_ ', 'public static boolean isUriKey(String key){ _EL_   return key.endsWith(".url") || key.endsWith(".uri"); _EL_ } _EL_ ', 'public int receive(byte[] buffer,int offset,int count,int timeout){ _EL_   checkArrayBounds(buffer,offset,count); _EL_   if (count == 0) { _EL_     return 0; _EL_   } _EL_   byte[] data=buffer; _EL_   if (offset > 0) { _EL_     data=new byte[count]; _EL_   } _EL_   IntOut bytesReceivedOut=new IntOut(); _EL_   try { _EL_     IDevice.checkResult(LibIMobileDevice.idevice_connection_receive_timeout(getRef(),data,count,bytesReceivedOut,timeout)); _EL_     int bytesRead=bytesReceivedOut.getValue(); _EL_     if (bytesRead > 0 && data != buffer) { _EL_       System.arraycopy(data,0,buffer,offset,bytesRead); _EL_     } _EL_     return bytesRead; _EL_   } _EL_   finally { _EL_     bytesReceivedOut.delete(); _EL_   } _EL_ } _EL_ ', 'public synchronized void addOFChannelHandlerAndSendRole(OFChannelHandler h){ _EL_   connectedChannelHandlers.add(h); _EL_   h.sendRoleRequest(this.role); _EL_ } _EL_ ', 'public boolean send(byte[] bytes){ _EL_   if (!connected)   return false; _EL_   try { _EL_     outputStream.write(bytes); _EL_     outputStream.flush(); _EL_     return true; _EL_   } _EL_  catch (  IOException e) { _EL_     connected=false; _EL_     Log.e(TAG,"Fail to send data"); _EL_     return false; _EL_   } _EL_  finally { _EL_     if (!connected) { _EL_       closeConnection(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public CopyOnWriteArrayList(Collection c){ _EL_   Object[] elements=new Object[c.size()]; _EL_   int size=0; _EL_   for (Iterator itr=c.iterator(); itr.hasNext(); ) { _EL_     Object e=itr.next(); _EL_     elements[size++]=e; _EL_   } _EL_   setArray(elements); _EL_ } _EL_ ', 'private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError { _EL_   PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength()); _EL_   byte[] buffer=null; _EL_   try { _EL_     InputStream in=entity.getContent(); _EL_     if (in == null) { _EL_       throw new ServerError(); _EL_     } _EL_     buffer=mPool.getBuf(1024); _EL_     int count; _EL_     while ((count=in.read(buffer)) != -1) { _EL_       bytes.write(buffer,0,count); _EL_     } _EL_     return bytes.toByteArray(); _EL_   } _EL_   finally { _EL_     try { _EL_       entity.consumeContent(); _EL_     } _EL_  catch (    IOException e) { _EL_       VolleyLog.v("Error occured when calling consumingContent"); _EL_     } _EL_     mPool.returnBuf(buffer); _EL_     bytes.close(); _EL_   } _EL_ } _EL_ ', 'public void addTailArg(String arg){ _EL_   _tailArgs.add(arg); _EL_ } _EL_ ', 'public InlineURIHandler(final String namespace){ _EL_   this.namespace=namespace; _EL_   this.len=namespace.length(); _EL_ } _EL_ ', 'private double[] CalcVariableCoef(Variogram variogram,KrigingPoint p,List<KrigingPoint> NNPoints){ _EL_   int n=NNPoints.size(); _EL_   double[] mat=new double[n + 1]; _EL_   double dist=0.0; _EL_   for (int i=0; i < n; i++) { _EL_     dist=Math.sqrt(Math.abs(Math.pow(NNPoints.get(i).x - p.x,2)) + Math.abs(Math.pow(NNPoints.get(i).y - p.y,2))); _EL_     mat[i]=getTheoreticalSVValue(dist,variogram); _EL_   } _EL_   mat[n]=1; _EL_   return mat; _EL_ } _EL_ ', 'public static Object deserialization(String filePath){ _EL_   ObjectInputStream in=null; _EL_   try { _EL_     in=new ObjectInputStream(new FileInputStream(filePath)); _EL_     Object o=in.readObject(); _EL_     in.close(); _EL_     return o; _EL_   } _EL_  catch (  FileNotFoundException e) { _EL_     throw new RuntimeException("FileNotFoundException occurred. ",e); _EL_   } _EL_ catch (  ClassNotFoundException e) { _EL_     throw new RuntimeException("ClassNotFoundException occurred. ",e); _EL_   } _EL_ catch (  IOException e) { _EL_     throw new RuntimeException("IOException occurred. ",e); _EL_   } _EL_  finally { _EL_     IOUtils.close(in); _EL_   } _EL_ } _EL_ ', 'public static CipherParameters makePBEMacParameters(PBEKeySpec keySpec,int type,int hash,int keySize){ _EL_   PBEParametersGenerator generator=makePBEGenerator(type,hash); _EL_   byte[] key; _EL_   CipherParameters param; _EL_   key=convertPassword(type,keySpec); _EL_   generator.init(key,keySpec.getSalt(),keySpec.getIterationCount()); _EL_   param=generator.generateDerivedMacParameters(keySize); _EL_   for (int i=0; i != key.length; i++) { _EL_     key[i]=0; _EL_   } _EL_   return param; _EL_ } _EL_ ', 'public void addEmojiconGroup(List<EaseEmojiconGroupEntity> groupEntitieList){ _EL_   for (int i=0; i < groupEntitieList.size(); i++) { _EL_     EaseEmojiconGroupEntity groupEntity=groupEntitieList.get(i); _EL_     emojiconGroupList.add(groupEntity); _EL_     pagerView.addEmojiconGroup(groupEntity,i == groupEntitieList.size() - 1 ? true : false); _EL_     tabBar.addTab(groupEntity.getIcon()); _EL_   } _EL_ } _EL_ ', 'public boolean shouldInclude(final Path path){ _EL_   return includeMatchers.size() == 0 || matches(path,includeMatchers); _EL_ } _EL_ ', 'static public Automaton concatenate(Automaton a1,Automaton a2){ _EL_   return concatenate(Arrays.asList(a1,a2)); _EL_ } _EL_ ', 'protected void adjustCanopies(double[] densities){ _EL_   if (m_numClustersRequested < 0) { _EL_     assignCanopiesToCanopyCenters(); _EL_     m_trainingData=new Instances(m_canopies,0); _EL_     return; _EL_   } _EL_   if (m_canopies.numInstances() > m_numClustersRequested) { _EL_     int[] sortedIndexes=Utils.stableSort(densities); _EL_     Instances finalCanopies=new Instances(m_canopies,0); _EL_     int count=0; _EL_     for (int i=sortedIndexes.length - 1; count < m_numClustersRequested; i--) { _EL_       finalCanopies.add(m_canopies.instance(sortedIndexes[i])); _EL_       count++; _EL_     } _EL_     m_canopies=finalCanopies; _EL_     List<double[][]> tempCanopyCenters=new ArrayList<double[][]>(); _EL_     List<double[]> tempT2Dists=new ArrayList<double[]>(); _EL_     List<double[]> tempMissings=new ArrayList<double[]>(); _EL_     count=0; _EL_     for (int i=sortedIndexes.length - 1; count < finalCanopies.numInstances(); i--) { _EL_       tempCanopyCenters.add(m_canopyCenters.get(sortedIndexes[i])); _EL_       tempT2Dists.add(m_canopyT2Density.get(sortedIndexes[i])); _EL_       tempMissings.add(m_canopyNumMissingForNumerics.get(sortedIndexes[i])); _EL_       count++; _EL_     } _EL_     m_canopyCenters=tempCanopyCenters; _EL_     m_canopyT2Density=tempT2Dists; _EL_     m_canopyNumMissingForNumerics=tempMissings; _EL_   } _EL_  else   if (m_canopies.numInstances() < m_numClustersRequested && m_trainingData != null && m_trainingData.numInstances() > 0) { _EL_     Random r=new Random(getSeed()); _EL_     for (int i=0; i < 10; i++) { _EL_       r.nextInt(); _EL_     } _EL_     HashMap<DecisionTableHashKey,Integer> initC=new HashMap<DecisionTableHashKey,Integer>(); _EL_     DecisionTableHashKey hk=null; _EL_     for (int i=0; i < m_canopies.numInstances(); i++) { _EL_       try { _EL_         hk=new DecisionTableHashKey(m_canopies.instance(i),m_canopies.numAttributes(),true); _EL_         initC.put(hk,null); _EL_       } _EL_  catch (      Exception e) { _EL_         e.printStackTrace(); _EL_       } _EL_     } _EL_     for (int j=m_trainingData.numInstances() - 1; j >= 0; j--) { _EL_       int instIndex=r.nextInt(j + 1); _EL_       try { _EL_         hk=new DecisionTableHashKey(m_trainingData.instance(instIndex),m_trainingData.numAttributes(),true); _EL_       } _EL_  catch (      Exception e) { _EL_         e.printStackTrace(); _EL_       } _EL_       if (!initC.containsKey(hk)) { _EL_         Instance newInstance=m_trainingData.instance(instIndex); _EL_         m_canopies.add(newInstance); _EL_         double[] density=new double[1]; _EL_         density[0]=1.0; _EL_         m_canopyT2Density.add(density); _EL_         double[][] center=new double[newInstance.numAttributes()][0]; _EL_         double[] numMissingNumerics=new double[newInstance.numAttributes()]; _EL_         updateCanopyCenter(newInstance,center,numMissingNumerics); _EL_         m_canopyCenters.add(center); _EL_         m_canopyNumMissingForNumerics.add(numMissingNumerics); _EL_         initC.put(hk,null); _EL_       } _EL_       m_trainingData.swap(j,instIndex); _EL_       if (m_canopies.numInstances() == m_numClustersRequested) { _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   assignCanopiesToCanopyCenters(); _EL_   m_trainingData=new Instances(m_canopies,0); _EL_ } _EL_ ', 'private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException { _EL_   iInstant=(LocalDateTime)oos.readObject(); _EL_   DateTimeFieldType type=(DateTimeFieldType)oos.readObject(); _EL_   iField=type.getField(iInstant.getChronology()); _EL_ } _EL_ ', 'private String convertUserInputIntoAFullyQualifiedPath(final String userInput){ _EL_   if (FileUtils.denotesAbsolutePath(userInput)) { _EL_     return userInput; _EL_   } _EL_   if (userInput.startsWith(HOME_DIRECTORY_SYMBOL)) { _EL_     Assert.notNull(home,"Home directory could not be determined from system properties"); _EL_     if (userInput.length() > 1) { _EL_       return home + userInput.substring(1); _EL_     } _EL_   } _EL_   String fullPath=getWorkingDirectoryAsString() + userInput; _EL_   return fullPath; _EL_ } _EL_ ', 'static final int resizeStamp(int n){ _EL_   return Integer.numberOfLeadingZeros(n) | (1 << (RESIZE_STAMP_BITS - 1)); _EL_ } _EL_ ', 'public byte readByte() throws IOException { _EL_   return dis.readByte(); _EL_ } _EL_ ', 'protected static byte[] hkdfExpand(byte[] ikm,byte[] salt,byte[] info,int length) throws InvalidKeyException, NoSuchAlgorithmException { _EL_   HKDFBytesGenerator hkdf=new HKDFBytesGenerator(new SHA256Digest()); _EL_   hkdf.init(new HKDFParameters(ikm,salt,info)); _EL_   byte[] okm=new byte[length]; _EL_   hkdf.generateBytes(okm,0,length); _EL_   return okm; _EL_ } _EL_ ', 'public boolean isEmoteIgnored(Emoticon emote){ _EL_   return ignoredEmotes.contains(emote.code); _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public void readFile(String fileName) throws JDOMException, IOException { _EL_   if (checkFile(fileName)) { _EL_     Element root=rootFromName(fileName); _EL_     Element roster; _EL_     if (root == null) { _EL_       log.warn("consist file could not be read"); _EL_       return; _EL_     } _EL_     roster=root.getChild("roster"); _EL_     if (roster == null) { _EL_       log.debug("consist file does not contain a roster entry"); _EL_       return; _EL_     } _EL_     Iterator<Element> consistIterator=root.getDescendants(new ElementFilter("consist")); _EL_     try { _EL_       Element consist; _EL_       do { _EL_         consist=consistIterator.next(); _EL_         consistFromXml(consist); _EL_       } _EL_  while (consistIterator.hasNext()); _EL_     } _EL_  catch (    NoSuchElementException nde) { _EL_       log.debug("end of consist list"); _EL_     } _EL_   } _EL_  else { _EL_     log.info("Consist file does not exist.  One will be created if necessary."); _EL_   } _EL_ } _EL_ ', 'private int accept(FileDescriptor ssfd,FileDescriptor newfd,InetSocketAddress[] isaa) throws IOException { _EL_   return accept0(ssfd,newfd,isaa); _EL_ } _EL_ ', 'protected void transcode(File file,Transcoder transcoder) throws IOException, TranscoderException { _EL_   transcoder.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE); _EL_   SVGDocument doc=cloneDocument(); _EL_   TranscoderInput input=new TranscoderInput(doc); _EL_   OutputStream out=new BufferedOutputStream(new FileOutputStream(file)); _EL_   TranscoderOutput output=new TranscoderOutput(out); _EL_   transcoder.transcode(input,output); _EL_   out.flush(); _EL_   out.close(); _EL_ } _EL_ ', 'private void reportProgress(State state,InnerState innerState){ _EL_   long now=System.currentTimeMillis(); _EL_   if (innerState.mBytesSoFar - innerState.mBytesNotified > Constants.MIN_PROGRESS_STEP && now - innerState.mTimeLastNotification > Constants.MIN_PROGRESS_TIME) { _EL_     mInfo.mCurrentBytes=innerState.mBytesSoFar; _EL_     mDB.updateDownloadCurrentBytes(mInfo); _EL_     innerState.mBytesNotified=innerState.mBytesSoFar; _EL_     innerState.mTimeLastNotification=now; _EL_     long totalBytesSoFar=innerState.mBytesThisSession + mService.mBytesSoFar; _EL_     if (Constants.LOGVV) { _EL_       Log.v(Constants.TAG,"downloaded " + mInfo.mCurrentBytes + " out of "+ mInfo.mTotalBytes); _EL_       Log.v(Constants.TAG,"     total " + totalBytesSoFar + " out of "+ mService.mTotalLength); _EL_     } _EL_     mService.notifyUpdateBytes(totalBytesSoFar); _EL_   } _EL_ } _EL_ ', '@Override public Document newDocument(){ _EL_   return new mf.org.apache.xerces.dom.DocumentImpl(); _EL_ } _EL_ ', 'public void handleTblRequestHandlerListButtonAddRequest(RequestInvocationEvent event) throws ModelControlException { _EL_   try { _EL_     Map values=getValues(); _EL_     onBeforeSaveProfile(values); _EL_     setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values); _EL_     SCSAML2SOAPBindingRequestHandlerListAddViewBean vb=(SCSAML2SOAPBindingRequestHandlerListAddViewBean)getViewBean(SCSAML2SOAPBindingRequestHandlerListAddViewBean.class); _EL_     unlockPageTrail(); _EL_     passPgSessionMap(vb); _EL_     vb.forwardTo(getRequestContext()); _EL_   } _EL_  catch (  AMConsoleException e) { _EL_     setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage()); _EL_   } _EL_ } _EL_ ', 'protected static void drawDataPoint(double x,double y,double xprev,double yprev,int size,int shape,Graphics gx){ _EL_   drawDataPoint(x,y,size,shape,gx); _EL_   gx.drawLine((int)x,(int)y,(int)xprev,(int)yprev); _EL_ } _EL_ ', 'static boolean chunkSet(InternalDistributedMember recipient,Set set,int CHUNK_SIZE_IN_BYTES,boolean includeValues,ObjectIntProcedure proc) throws IOException { _EL_   Iterator it=set.iterator(); _EL_   boolean keepGoing=true; _EL_   boolean sentLastChunk=false; _EL_   final HeapDataOutputStream mos=new HeapDataOutputStream(InitialImageOperation.CHUNK_SIZE_IN_BYTES + 2048,recipient.getVersionObject()); _EL_   do { _EL_     mos.reset(); _EL_     int avgItemSize=0; _EL_     int itemCount=0; _EL_     while ((mos.size() + avgItemSize) < InitialImageOperation.CHUNK_SIZE_IN_BYTES && it.hasNext()) { _EL_       Object key=it.next(); _EL_       DataSerializer.writeObject(key,mos); _EL_       itemCount++; _EL_       avgItemSize=mos.size() / itemCount; _EL_     } _EL_     DataSerializer.writeObject((Object)null,mos); _EL_     int lastMsg=it.hasNext() ? 0 : 1; _EL_     keepGoing=proc.executeWith(mos,lastMsg); _EL_     sentLastChunk=lastMsg == 1 && keepGoing; _EL_   } _EL_  while (keepGoing && it.hasNext()); _EL_   return sentLastChunk; _EL_ } _EL_ ', 'private int[] parseMetaDataInformation() throws UserError { _EL_   int[] selectedColumns=new int[metaData.size()]; _EL_   Set<String> usedColumnNames=new HashSet<>(); _EL_   int columnIndex=0; _EL_   int usedColumnIndex=0; _EL_   for (  ColumnMetaData column : metaData) { _EL_     if (!column.isRemoved()) { _EL_       selectedColumns[usedColumnIndex]=columnIndex; _EL_       usedColumnIndex++; _EL_       String columnName=column.getName(); _EL_       if (!usedColumnNames.contains(columnName)) { _EL_         usedColumnNames.add(columnName); _EL_       } _EL_  else { _EL_         throw new UserError(null,"data_import.non_unique_column_name",columnName); _EL_       } _EL_     } _EL_     columnIndex++; _EL_   } _EL_   int[] attributeColumns=Arrays.copyOf(selectedColumns,usedColumnIndex); _EL_   return attributeColumns; _EL_ } _EL_ ', 'static Field findField(Object instance,String name) throws NoSuchFieldException { _EL_   for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) { _EL_     try { _EL_       Field field=clazz.getDeclaredField(name); _EL_       if (!field.isAccessible()) { _EL_         field.setAccessible(true); _EL_       } _EL_       return field; _EL_     } _EL_  catch (    NoSuchFieldException e) { _EL_     } _EL_   } _EL_   throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass()); _EL_ } _EL_ ', 'SSLSession toSession(byte[] data,String host,int port){ _EL_   ByteArrayInputStream bais=new ByteArrayInputStream(data); _EL_   DataInputStream dais=new DataInputStream(bais); _EL_   try { _EL_     int type=dais.readInt(); _EL_     if (type != OPEN_SSL) { _EL_       log(new AssertionError("Unexpected type ID: " + type)); _EL_       return null; _EL_     } _EL_     int length=dais.readInt(); _EL_     byte[] sessionData=new byte[length]; _EL_     dais.readFully(sessionData); _EL_     int count=dais.readInt(); _EL_     X509Certificate[] certs=new X509Certificate[count]; _EL_     for (int i=0; i < count; i++) { _EL_       length=dais.readInt(); _EL_       byte[] certData=new byte[length]; _EL_       dais.readFully(certData); _EL_       certs[i]=OpenSSLX509Certificate.fromX509Der(certData); _EL_     } _EL_     return new OpenSSLSessionImpl(sessionData,host,port,certs,this); _EL_   } _EL_  catch (  IOException e) { _EL_     log(e); _EL_     return null; _EL_   } _EL_ } _EL_ ', 'private void addDumpFile(){ _EL_   addDumpFile(dumpFile); _EL_ } _EL_ ', "private static boolean dateByOrdinal(DateTimeFormatterBuilder bld,Collection<DateTimeFieldType> fields,boolean extended,boolean strictISO){ _EL_   boolean reducedPrec=false; _EL_   if (fields.remove(DateTimeFieldType.year())) { _EL_     bld.append(yearElement()); _EL_     if (fields.remove(DateTimeFieldType.dayOfYear())) { _EL_       appendSeparator(bld,extended); _EL_       bld.appendDayOfYear(3); _EL_     } _EL_  else { _EL_       reducedPrec=true; _EL_     } _EL_   } _EL_  else   if (fields.remove(DateTimeFieldType.dayOfYear())) { _EL_     bld.appendLiteral('-'); _EL_     bld.appendDayOfYear(3); _EL_   } _EL_   return reducedPrec; _EL_ } _EL_ ", 'public boolean isPageInRange(int pageNumber){ _EL_   for (int ind=0; ind < sequenceStarts.size(); ind++) { _EL_     if (sequenceStarts.get(ind) <= pageNumber && pageNumber <= sequenceEnds.get(ind))     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void dispose(){ _EL_   logDebug("Disposing."); _EL_   mSetupDone=false; _EL_   if (mServiceConn != null) { _EL_     logDebug("Unbinding from service."); _EL_     if (mContext != null)     mContext.unbindService(mServiceConn); _EL_   } _EL_   mDisposed=true; _EL_   mContext=null; _EL_   mServiceConn=null; _EL_   mService=null; _EL_   mPurchaseListener=null; _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public static <T extends DimensionalItemObject>List<T> asTypedList(Collection<DimensionalItemObject> collection){ _EL_   List<T> list=new ArrayList<>(); _EL_   if (collection != null) { _EL_     for (    DimensionalItemObject object : collection) { _EL_       list.add((T)object); _EL_     } _EL_   } _EL_   return list; _EL_ } _EL_ ', 'void addNewTable(String name,int tdefPageNumber,Short type,String linkedDbName,String linkedTableName) throws IOException { _EL_   addTable(name,Integer.valueOf(tdefPageNumber),type,linkedDbName,linkedTableName); _EL_   addToSystemCatalog(name,tdefPageNumber,type,linkedDbName,linkedTableName,_tableParentId); _EL_   addToAccessControlEntries(tdefPageNumber,_tableParentId,_newTableSIDs); _EL_ } _EL_ ', 'public static String hashpw(byte[] password0,final String salt){ _EL_   BCrypt B; _EL_   String real_salt; _EL_   byte passwordb[]=null, saltb[], hashed[]; _EL_   char minor=(char)0; _EL_   int rounds, off=0; _EL_   final StringBuffer rs=new StringBuffer(); _EL_   if (salt.charAt(0) != \'$\' || salt.charAt(1) != \'2\') { _EL_     throw new IllegalArgumentException("Invalid salt version"); _EL_   } _EL_   if (salt.charAt(2) == \'$\') { _EL_     off=3; _EL_   } _EL_  else { _EL_     minor=salt.charAt(2); _EL_     if (minor != \'a\' || salt.charAt(3) != \'$\') { _EL_       throw new IllegalArgumentException("Invalid salt revision"); _EL_     } _EL_     off=4; _EL_   } _EL_   if (salt.charAt(off + 2) > \'$\') { _EL_     throw new IllegalArgumentException("Missing salt rounds"); _EL_   } _EL_   rounds=Integer.parseInt(salt.substring(off,off + 2)); _EL_   real_salt=salt.substring(off + 3,off + 25); _EL_   try { _EL_     if (minor >= (byte)\'a\') { _EL_       passwordb=Arrays.copyOf(password0,password0.length + 1); _EL_       passwordb[passwordb.length - 1]=(byte)0; _EL_     } _EL_  else { _EL_       passwordb=Arrays.copyOf(password0,password0.length); _EL_     } _EL_     saltb=decode_base64(real_salt,BCRYPT_SALT_LEN); _EL_     B=new BCrypt(); _EL_     hashed=B.crypt_raw(passwordb,saltb,rounds,bf_crypt_ciphertext.clone()); _EL_   } _EL_   finally { _EL_     if (password0 != null) { _EL_       Arrays.fill(password0,(byte)\'\\0\'); _EL_       password0=null; _EL_     } _EL_     if (passwordb != null) { _EL_       Arrays.fill(passwordb,(byte)\'\\0\'); _EL_       passwordb=null; _EL_     } _EL_   } _EL_   rs.append("$2"); _EL_   if (minor >= \'a\') { _EL_     rs.append(minor); _EL_   } _EL_   rs.append("$"); _EL_   if (rounds < 10) { _EL_     rs.append("0"); _EL_   } _EL_   if (rounds > 30) { _EL_     throw new IllegalArgumentException("rounds exceeds maximum (30)"); _EL_   } _EL_   rs.append(Integer.toString(rounds)); _EL_   rs.append("$"); _EL_   rs.append(encode_base64(saltb,saltb.length)); _EL_   rs.append(encode_base64(hashed,bf_crypt_ciphertext.length * 4 - 1)); _EL_   return rs.toString(); _EL_ } _EL_ ', 'public void removeListener(@NotNull ConfigurationListener listener){ _EL_   if (myListeners != null) { _EL_     myListeners.remove(listener); _EL_     if (myListeners.isEmpty()) { _EL_       myListeners=null; _EL_     } _EL_   } _EL_ } _EL_ ', 'void reclaimScrapViews(List<View> views){ _EL_   if (mViewTypeCount == 1) { _EL_     views.addAll(mCurrentScrap); _EL_   } _EL_  else { _EL_     final int viewTypeCount=mViewTypeCount; _EL_     final ArrayList<View>[] scrapViews=mScrapViews; _EL_     for (int i=0; i < viewTypeCount; ++i) { _EL_       final ArrayList<View> scrapPile=scrapViews[i]; _EL_       views.addAll(scrapPile); _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean schedule(Runnable task,ClassLoader loader){ _EL_   boolean isPriority=false; _EL_   boolean isQueue=true; _EL_   boolean isWake=true; _EL_   return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake); _EL_ } _EL_ ', 'public static int hash2(int hash,Object x,Object y){ _EL_   return 0x20000000 | (hash + 7 * System.identityHashCode(x) + 11 * System.identityHashCode(y)); _EL_ } _EL_ ', 'public static double[] parseVectorString(String vectorString){ _EL_   String[] parsedString=vectorString.split(","); _EL_   double[] vector=new double[parsedString.length]; _EL_   for (int j=0; j < parsedString.length; j++) { _EL_     double val=Utils.doubleParsable(parsedString[j]); _EL_     vector[j]=Double.isNaN(val) ? 0 : val; _EL_   } _EL_   return vector; _EL_ } _EL_ ', 'public String globalInfo(){ _EL_   return "A filter that removes a range of" + " attributes from the dataset. Will " + "re-order the remaining attributes "+ "if invert matching sense is turned "+ "on and the attribute column indices "+ "are not specified in ascending order."; _EL_ } _EL_ ', 'public static <T>Stream<T> concat(Stream<? extends T> a,Stream<? extends T> b){ _EL_   Objects.requireNonNull(a); _EL_   Objects.requireNonNull(b); _EL_   @SuppressWarnings("unchecked") Spliterator<T> split=new Streams.ConcatSpliterator.OfRef<>((Spliterator<T>)a.spliterator(),(Spliterator<T>)b.spliterator()); _EL_   Stream<T> stream=StreamSupport.stream(split,a.isParallel() || b.isParallel()); _EL_   return stream.onClose(Streams.composedClose(a,b)); _EL_ } _EL_ ', 'public List<URI> volumeURIs(List<URI> uris,boolean delete,boolean remediate,ValCk... checks){ _EL_   List<URI> remediatedURIs=new ArrayList<URI>(); _EL_   List<Volume> volumes=dbClient.queryObject(Volume.class,uris); _EL_   List<Volume> remediatedVolumes=volumes(volumes,delete,remediate,checks); _EL_   for (  Volume volume : remediatedVolumes) { _EL_     remediatedURIs.add(volume.getId()); _EL_   } _EL_   return remediatedURIs; _EL_ } _EL_ ', 'private FormatString[] parse(String s){ _EL_   ArrayList<FormatString> al=new ArrayList<>(); _EL_   Matcher m=fsPattern.matcher(s); _EL_   for (int i=0, len=s.length(); i < len; ) { _EL_     if (m.find(i)) { _EL_       if (m.start() != i) { _EL_         checkText(s,i,m.start()); _EL_         al.add(new FixedString(s.substring(i,m.start()))); _EL_       } _EL_       al.add(new FormatSpecifier(m)); _EL_       i=m.end(); _EL_     } _EL_  else { _EL_       checkText(s,i,len); _EL_       al.add(new FixedString(s.substring(i))); _EL_       break; _EL_     } _EL_   } _EL_   return al.toArray(new FormatString[al.size()]); _EL_ } _EL_ ', 'private void updateIndexColumnButtons(){ _EL_   indexRemoveButton.setEnabled(false); _EL_   indexUpButton.setEnabled(false); _EL_   indexDownButton.setEnabled(false); _EL_   int index=selectedColumns.getSelectionIndex(); _EL_   if (index >= 0) { _EL_     indexRemoveButton.setEnabled(true); _EL_     if (index > 0) { _EL_       indexUpButton.setEnabled(true); _EL_     } _EL_  else     if (index < selectedColumns.getItemCount() - 1) { _EL_       indexDownButton.setEnabled(true); _EL_     } _EL_   } _EL_ } _EL_ ', 'public String urlForPOISearch(String tag,BoundingBox bb,int limit,int timeout){ _EL_   StringBuilder s=new StringBuilder(); _EL_   s.append(mService + "?data="); _EL_   String sBB="(" + bb.getLatSouth() + ","+ bb.getLonWest()+ ","+ bb.getLatNorth()+ ","+ bb.getLonEast()+ ")"; _EL_   String data="[out:json][timeout:" + timeout + "];("+ "node["+ tag+ "]"+ sBB+ ";"+ "way["+ tag+ "]"+ sBB+ ";"+ "relation["+ tag+ "]"+ sBB+ ";"+ ");out qt center "+ limit+ " tags;"; _EL_   Log.d(BonusPackHelper.LOG_TAG,"data=" + data); _EL_   s.append(URLEncoder.encode(data)); _EL_   return s.toString(); _EL_ } _EL_ ', 'private static String wikiToPlainText(String content){ _EL_   content=content.replaceAll("\\\\[\\\\[[iI]mage:[^\\\\]]*\\\\]\\\\]",""); _EL_   content=content.replaceAll("(?s)<!--.*?-->",""); _EL_   content=content.replaceAll("(?s)<ref>.*?</ref>",""); _EL_   content=content.replaceAll("(?s)\\\\{\\\\{([^{}]*?\\\\{\\\\{[^{}]*?\\\\}\\\\})+[^{}].*?\\\\}\\\\}",""); _EL_   content=content.replaceAll("(?s)\\\\{\\\\{.*?\\\\}\\\\}",""); _EL_   content=content.replaceAll("(?s)\\\\{\\\\|.*?\\\\|\\\\}",""); _EL_   content=content.replaceAll("\\\\[\\\\[[^\\\\]]*\\\\|",""); _EL_   content=content.replaceAll("\\\\[\\\\[",""); _EL_   content=content.replaceAll("\\\\]\\\\]",""); _EL_   content=content.replaceAll("(?s)<.*?>",""); _EL_   content=content.trim(); _EL_   final int size=content.length(); _EL_   int endOfFirstParagraph=content.indexOf("\\n",50); _EL_   if (endOfFirstParagraph < 0) { _EL_     endOfFirstParagraph=size; _EL_   } _EL_   content=content.substring(0,Math.min(endOfFirstParagraph,1024)); _EL_   return content; _EL_ } _EL_ ', 'private static int createPackedParams(SunGraphics2D sg2d,GlyphList gl){ _EL_   return (((gl.usePositions() ? 1 : 0) << OFFSET_POSITIONS) | ((gl.isSubPixPos() ? 1 : 0) << OFFSET_SUBPIXPOS) | ((gl.isRGBOrder() ? 1 : 0) << OFFSET_RGBORDER)| ((sg2d.lcdTextContrast & 0xff) << OFFSET_CONTRAST)); _EL_ } _EL_ ', 'public static int update(String sql,Object[] args){ _EL_   Connection c=null; _EL_   PreparedStatement p=null; _EL_   try { _EL_     c=getConnection(); _EL_     if (c == null)     return -1; _EL_     p=c.prepareStatement(sql); _EL_     int order=1; _EL_     if (args != null) { _EL_       for (int i=0; i < args.length; i++) { _EL_         Object o=args[i]; _EL_         setParameter(p,order++,o); _EL_       } _EL_     } _EL_     return p.executeUpdate(); _EL_   } _EL_  catch (  Exception e) { _EL_     if (log.isErrorEnabled())     log.error(sql + toString(args),e); _EL_   } _EL_  finally { _EL_     close(p,c); _EL_   } _EL_   return 0; _EL_ } _EL_ ', 'public boolean isLockSubject(){ _EL_   return true; _EL_ } _EL_ ', '@Override public int hashCode(){ _EL_   int code=0; _EL_   if (fPublicId != null) { _EL_     code+=fPublicId.hashCode(); _EL_   } _EL_   if (fLiteralSystemId != null) { _EL_     code+=fLiteralSystemId.hashCode(); _EL_   } _EL_   if (fBaseSystemId != null) { _EL_     code+=fBaseSystemId.hashCode(); _EL_   } _EL_   if (fExpandedSystemId != null) { _EL_     code+=fExpandedSystemId.hashCode(); _EL_   } _EL_   if (fNamespace != null) { _EL_     code+=fNamespace.hashCode(); _EL_   } _EL_   return code; _EL_ } _EL_ ', 'public QuickActionView addAction(Action action){ _EL_   checkShown(); _EL_   mActions.add(action); _EL_   return this; _EL_ } _EL_ ', 'protected boolean display(File helpFile) throws HelpException { _EL_   if (helpFile.exists()) { _EL_     loadAndWrite(helpFile); _EL_     return true; _EL_   } _EL_  else { _EL_     File notFound=new File(helpDir,NOT_FOUND); _EL_     if (notFound.exists())     loadAndWrite(notFound); _EL_  else     throw new HelpException("Topic not found, try \'help\' for more information"); _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public Point2D either(){ _EL_   return best1; _EL_ } _EL_ ', 'public static String rowToString(JSONArray ja){ _EL_   StringBuffer sb=new StringBuffer(); _EL_   for (int i=0; i < ja.length(); i+=1) { _EL_     if (i > 0) { _EL_       sb.append(\',\'); _EL_     } _EL_     Object object=ja.opt(i); _EL_     if (object != null) { _EL_       String string=object.toString(); _EL_       if (string.length() > 0 && (string.indexOf(\',\') >= 0 || string.indexOf(\'\\n\') >= 0 || string.indexOf(\'\\r\') >= 0 || string.indexOf(0) >= 0 || string.charAt(0) == \'"\')) { _EL_         sb.append(\'"\'); _EL_         int length=string.length(); _EL_         for (int j=0; j < length; j+=1) { _EL_           char c=string.charAt(j); _EL_           if (c >= \' \' && c != \'"\') { _EL_             sb.append(c); _EL_           } _EL_         } _EL_         sb.append(\'"\'); _EL_       } _EL_  else { _EL_         sb.append(string); _EL_       } _EL_     } _EL_   } _EL_   sb.append(\'\\n\'); _EL_   return sb.toString(); _EL_ } _EL_ ', 'private static void removeTable(Connection conn,String name) throws SQLException { _EL_   name=name.replace(\'.\',\'_\'); _EL_   Statement stat=conn.createStatement(); _EL_   stat.execute("DROP TABLE " + name); _EL_   DBUtil.commitEL(conn); _EL_ } _EL_ ', 'public boolean containsCategory(String category){ _EL_   return !hiddenBugCategorySet.contains(category); _EL_ } _EL_ ', 'static void pauseThread(long duration){ _EL_   try { _EL_     Thread.sleep(duration); _EL_   } _EL_  catch (  Exception e) { _EL_     s_logger.warn("Exception while trying to sleep",e); _EL_   } _EL_ } _EL_ ', 'final public void println(String v){ _EL_   try { _EL_     _out.println(v); _EL_   } _EL_  catch (  IOException e) { _EL_     log.log(Level.FINE,e.toString(),e); _EL_   } _EL_ } _EL_ ', 'public int read(char cbuf[],int offset,int length) throws IOException { _EL_   return sd.read(cbuf,offset,length); _EL_ } _EL_ ', 'public int read() throws IOException { _EL_   int val; _EL_   if ((val=is.read()) < 0) { _EL_     return -1; _EL_   } _EL_ switch (val & 0xf0) { _EL_ case 0xc0: _EL_ case 0xd0: _EL_     val=((val & 0x1f) << 6) | (is.read() & 0x3f); _EL_   break; _EL_ case 0xe0: _EL_ val=((val & 0x0f) << 12) | ((is.read() & 0x3f) << 6) | (is.read() & 0x3f); _EL_ break; _EL_ case 0xf0: _EL_ throw new UnsupportedEncodingException(); _EL_ default : _EL_ break; _EL_ } _EL_ return val; _EL_ } _EL_ ', 'private boolean rContainsRMInstruction(ProgramBlock pb,String varName){ _EL_   if (pb instanceof WhileProgramBlock) { _EL_     WhileProgramBlock tmp=(WhileProgramBlock)pb; _EL_     for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInstruction(c,varName))     return true; _EL_   } _EL_  else   if (pb instanceof IfProgramBlock) { _EL_     IfProgramBlock tmp=(IfProgramBlock)pb; _EL_     for (    ProgramBlock c : tmp.getChildBlocksIfBody())     if (rContainsRMInstruction(c,varName))     return true; _EL_     for (    ProgramBlock c : tmp.getChildBlocksElseBody())     if (rContainsRMInstruction(c,varName))     return true; _EL_   } _EL_  else   if (pb instanceof ForProgramBlock) { _EL_     ForProgramBlock tmp=(ForProgramBlock)pb; _EL_     for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInstruction(c,varName))     return true; _EL_   } _EL_  else   if (pb instanceof FunctionProgramBlock) { _EL_   } _EL_  else { _EL_     for (    Instruction inst : pb.getInstructions()) { _EL_       String instStr=inst.toString(); _EL_       if (instStr.contains("rmfilevar" + Lop.OPERAND_DELIMITOR + varName) || instStr.contains("rmvar" + Lop.OPERAND_DELIMITOR + varName)) { _EL_         return true; _EL_       } _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public ProjectImporter(final File rootFolder){ _EL_   assertNotNull("Root folder cannot be null.",rootFolder); _EL_   assertTrue("Root folder does not exist: " + rootFolder,rootFolder.exists()); _EL_   assertTrue("Root folder must be a folder. But was a file: " + rootFolder,rootFolder.isDirectory()); _EL_   assertTrue("Root folder directory content cannot be read: " + rootFolder,rootFolder.canRead()); _EL_   assertTrue("No files were found in the directory: " + rootFolder,null != rootFolder.listFiles()); _EL_   this.rootFolder=rootFolder; _EL_ } _EL_ ', 'public static boolean isRegistered(Class<?> clazz){ _EL_   return regModules.containsKey(clazz.getName()); _EL_ } _EL_ ', 'public Class<?> loadClass(String name) throws ClassNotFoundException { _EL_   return Class.forName(name); _EL_ } _EL_ ', 'private static int byteCompaction(int mode,int[] codewords,int codeIndex,StringBuilder result){ _EL_   if (mode == BYTE_COMPACTION_MODE_LATCH) { _EL_     int count=0; _EL_     long value=0; _EL_     char[] decodedData=new char[6]; _EL_     int[] byteCompactedCodewords=new int[6]; _EL_     boolean end=false; _EL_     int nextCode=codewords[codeIndex++]; _EL_     while ((codeIndex < codewords[0]) && !end) { _EL_       byteCompactedCodewords[count++]=nextCode; _EL_       value=900 * value + nextCode; _EL_       nextCode=codewords[codeIndex++]; _EL_       if (nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR) { _EL_         codeIndex--; _EL_         end=true; _EL_       } _EL_  else { _EL_         if ((count % 5 == 0) && (count > 0)) { _EL_           for (int j=0; j < 6; ++j) { _EL_             decodedData[5 - j]=(char)(value % 256); _EL_             value>>=8; _EL_           } _EL_           result.append(decodedData); _EL_           count=0; _EL_         } _EL_       } _EL_     } _EL_     if (codeIndex == codewords[0] && nextCode < TEXT_COMPACTION_MODE_LATCH) { _EL_       byteCompactedCodewords[count++]=nextCode; _EL_     } _EL_     for (int i=0; i < count; i++) { _EL_       result.append((char)byteCompactedCodewords[i]); _EL_     } _EL_   } _EL_  else   if (mode == BYTE_COMPACTION_MODE_LATCH_6) { _EL_     int count=0; _EL_     long value=0; _EL_     boolean end=false; _EL_     while (codeIndex < codewords[0] && !end) { _EL_       int code=codewords[codeIndex++]; _EL_       if (code < TEXT_COMPACTION_MODE_LATCH) { _EL_         count++; _EL_         value=900 * value + code; _EL_       } _EL_  else { _EL_         if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) { _EL_           codeIndex--; _EL_           end=true; _EL_         } _EL_       } _EL_       if ((count % 5 == 0) && (count > 0)) { _EL_         char[] decodedData=new char[6]; _EL_         for (int j=0; j < 6; ++j) { _EL_           decodedData[5 - j]=(char)(value & 0xFF); _EL_           value>>=8; _EL_         } _EL_         result.append(decodedData); _EL_         count=0; _EL_       } _EL_     } _EL_   } _EL_   return codeIndex; _EL_ } _EL_ ', 'private Object createInner(SimpleObject post,RequestContext context) throws ResponseException { _EL_   try { _EL_     String xml=completeXform(convertUuidsToIds(post)); _EL_     File file=File.createTempFile("projectbuendia",null); _EL_     processor.processXForm(xml,file.getAbsolutePath(),true,context.getRequest()); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new GenericRestException("Error storing xform data",e); _EL_   } _EL_ catch (  ResponseException e) { _EL_     throw e; _EL_   } _EL_ catch (  Exception e) { _EL_     throw new ConversionException("Error processing xform data",e); _EL_   } _EL_   Encounter encounter=guessEncounterFromXformSubmission(post); _EL_   if (encounter == null) { _EL_     return post; _EL_   } _EL_   SimpleObject returnJson=new SimpleObject(); _EL_   EncounterResource.populateJsonProperties(encounter,returnJson); _EL_   return returnJson; _EL_ } _EL_ ', 'public TimeSeriesCollection(){ _EL_   this(null,TimeZone.getDefault()); _EL_ } _EL_ ', 'public static <E>List<E> of(E e1,E e2,E e3){ _EL_   List<E> list=new ArrayList<>(); _EL_   list.add(e1); _EL_   list.add(e2); _EL_   list.add(e3); _EL_   return list; _EL_ } _EL_ ', 'public int alloc(int size){ _EL_   int index=n; _EL_   int len=array.length; _EL_   if (n + size >= len) { _EL_     byte[] aux=new byte[len + blockSize]; _EL_     System.arraycopy(array,0,aux,0,len); _EL_     array=aux; _EL_   } _EL_   n+=size; _EL_   return index; _EL_ } _EL_ ', '@Override public void addAttribute(String name,float value){ _EL_   String str=Float.toString(value); _EL_   if (str.endsWith(".0"))   str=str.substring(0,str.length() - 2); _EL_   current.setAttribute(name,str); _EL_ } _EL_ ', 'private void refreshChallengeCounts(){ _EL_   mDueChallengeCounts=mDueChallengeLogic.getDueChallengeCounts(mCategories); _EL_ } _EL_ ', 'private ImageData awtToSwt(final BufferedImage bufferedImage,final int width,final int height){ _EL_   final int[] awtPixels=new int[width * height]; _EL_   final ImageData swtImageData=new ImageData(width,height,24,PALETTE_DATA); _EL_   swtImageData.transparentPixel=TRANSPARENT_COLOR; _EL_   final int step=swtImageData.depth / 8; _EL_   final byte[] data=swtImageData.data; _EL_   bufferedImage.getRGB(0,0,width,height,awtPixels,0,width); _EL_   for (int i=0; i < height; i++) { _EL_     int idx=(0 + i) * swtImageData.bytesPerLine + 0 * step; _EL_     for (int j=0; j < width; j++) { _EL_       final int rgb=awtPixels[j + i * width]; _EL_       for (int k=swtImageData.depth - 8; k >= 0; k-=8) { _EL_         data[idx++]=(byte)(rgb >> k & 0xFF); _EL_       } _EL_     } _EL_   } _EL_   return swtImageData; _EL_ } _EL_ ', 'public static boolean isUnlimitedStrengthPolicyAvailable(){ _EL_   try { _EL_     return Cipher.getMaxAllowedKeyLength("AES") >= 256; _EL_   } _EL_  catch (  final NoSuchAlgorithmException e) { _EL_     e.printStackTrace(); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public long rsslim(){ _EL_   return Long.parseLong(fields[24]); _EL_ } _EL_ ', 'private void fillStackTrace(StringBuffer buffer,StackTraceElement[] elements){ _EL_   for (int index=0; index < elements.length; index++) { _EL_     buffer.append(elements[index]); _EL_     buffer.append("\\n"); _EL_   } _EL_ } _EL_ ', 'public static boolean isFileTypeSupported(int fileType){ _EL_   List providers=getMidiFileWriters(); _EL_   for (int i=0; i < providers.size(); i++) { _EL_     MidiFileWriter writer=(MidiFileWriter)providers.get(i); _EL_     if (writer.isFileTypeSupported(fileType)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void makeImmutable(){ _EL_   if (isMutable) { _EL_     isMutable=false; _EL_   } _EL_ } _EL_ ', 'public static double uniform(){ _EL_   return random.nextDouble(); _EL_ } _EL_ ', 'private AMSetupDSConfig(){ _EL_   Map map=ServicesDefaultValues.getDefaultValues(); _EL_   dsManager=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_DN); _EL_   suffix=(String)map.get(SetupConstants.CONFIG_VAR_ROOT_SUFFIX); _EL_   dsHostName=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_HOST); _EL_   dsPort=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_PORT); _EL_   dsAdminPwd=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_PWD); _EL_   basedir=(String)map.get(SetupConstants.CONFIG_VAR_BASE_DIR); _EL_   deployuri=(String)map.get(SetupConstants.CONFIG_VAR_SERVER_URI); _EL_ } _EL_ ', 'private boolean compareAndIncrementWorkerCount(int expect){ _EL_   return ctl.compareAndSet(expect,expect + 1); _EL_ } _EL_ ', 'private void makeItems(int fingerPosition,List<View> viewList){ _EL_   if (fingerPosition >= viewList.size()) { _EL_     return; _EL_   } _EL_   for (int i=0; i < viewList.size(); i++) { _EL_     int translationY=Math.min(Math.max(Math.abs(fingerPosition - i) * intervalHeight,10),maxTranslationHeight); _EL_     updateItemHeightAnimator(viewList.get(i),translationY); _EL_   } _EL_ } _EL_ ', 'private boolean pathIsWindows(String path){ _EL_   if (path != null && path.length() > 1) { _EL_     return (Character.isLetter(path.charAt(0)) && path.charAt(1) == \':\') || (path.startsWith("//") || path.startsWith("\\\\\\\\")); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static Element addChildElementValue(Element element,String childElementName,String childElementValue,Document document){ _EL_   Element newElement=addChildElement(element,childElementName,document); _EL_   newElement.appendChild(document.createTextNode(childElementValue)); _EL_   return newElement; _EL_ } _EL_ ', 'public static byte[] readBinaryFile(File sourceFile){ _EL_   byte[] result=null; _EL_   try { _EL_     BufferedInputStream input; _EL_     input=new BufferedInputStream(new FileInputStream(sourceFile)); _EL_     int num=input.available(); _EL_     result=new byte[num]; _EL_     input.read(result,0,num); _EL_     input.close(); _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_     result=null; _EL_   } _EL_   return result; _EL_ } _EL_ ', '@Override protected void thresholdReached() throws IOException { _EL_   if (prefix != null) { _EL_     outputFile=File.createTempFile(prefix,suffix,directory); _EL_   } _EL_   FileOutputStream fos=new FileOutputStream(outputFile); _EL_   memoryOutputStream.writeTo(fos); _EL_   currentOutputStream=fos; _EL_   memoryOutputStream=null; _EL_ } _EL_ ', 'public void removeIndexInterval(int index0,int index1){ _EL_   int rmMinIndex=Math.min(index0,index1); _EL_   int rmMaxIndex=Math.max(index0,index1); _EL_   int gapLength=(rmMaxIndex - rmMinIndex) + 1; _EL_   for (int i=rmMinIndex; i <= maxIndex; i++) { _EL_     setState(i,value.get(i + gapLength)); _EL_   } _EL_   int leadIndex=this.leadIndex; _EL_   if (leadIndex == 0 && rmMinIndex == 0) { _EL_   } _EL_  else   if (leadIndex > rmMaxIndex) { _EL_     leadIndex=this.leadIndex - gapLength; _EL_   } _EL_  else   if (leadIndex >= rmMinIndex) { _EL_     leadIndex=rmMinIndex - 1; _EL_   } _EL_   int anchorIndex=this.anchorIndex; _EL_   if (anchorIndex == 0 && rmMinIndex == 0) { _EL_   } _EL_  else   if (anchorIndex > rmMaxIndex) { _EL_     anchorIndex=this.anchorIndex - gapLength; _EL_   } _EL_  else   if (anchorIndex >= rmMinIndex) { _EL_     anchorIndex=rmMinIndex - 1; _EL_   } _EL_   if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) { _EL_     updateLeadAnchorIndices(anchorIndex,leadIndex); _EL_   } _EL_   fireValueChanged(); _EL_ } _EL_ ', 'public void rebuildEventList(boolean resetSelected){ _EL_   if (logger.isLoggable(Level.FINE)) { _EL_     logger.fine("rebuilding list"); _EL_   } _EL_   allEvents=null; _EL_   activeEvents=null; _EL_   hideDetails(); _EL_   initInterface(getActiveEvents(),resetSelected); _EL_   highlightCurrentEvent(currentTime); _EL_   firePropertyChange(ActiveEventsProperty,null,getActiveEvents()); _EL_ } _EL_ ', 'public void put(byte[] buffer,int offset,int count){ _EL_   if (count > (bytes.length - this.contentLength)) { _EL_     throw new IllegalArgumentException("buffer is too large"); _EL_   } _EL_   System.arraycopy(buffer,offset,bytes,this.contentLength,count); _EL_   this.contentLength+=count; _EL_ } _EL_ ', 'private void markReserved(int ropReg,int category){ _EL_   reservedRopRegs.set(ropReg,ropReg + category,true); _EL_ } _EL_ ', 'public static void registerDefaultResolvers(){ _EL_ synchronized (resolverList) { _EL_     resolverList.add(new ResourceResolver(new ResolverFragment())); _EL_     resolverList.add(new ResourceResolver(new ResolverLocalFilesystem())); _EL_     resolverList.add(new ResourceResolver(new ResolverXPointer())); _EL_     resolverList.add(new ResourceResolver(new ResolverDirectHTTP())); _EL_   } _EL_ } _EL_ ', 'private boolean processAuthenticationResponse(final HttpMethod method){ _EL_   LOG.trace("enter HttpMethodBase.processAuthenticationResponse(" + "HttpState, HttpConnection)"); _EL_   try { _EL_ switch (method.getStatusCode()) { _EL_ case HttpStatus.SC_UNAUTHORIZED: _EL_       return processWWWAuthChallenge(method); _EL_ case HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED: _EL_     return processProxyAuthChallenge(method); _EL_ default : _EL_   return false; _EL_ } _EL_ } _EL_  catch (Exception e) { _EL_ if (LOG.isErrorEnabled()) { _EL_ LOG.error(e.getMessage(),e); _EL_ } _EL_ return false; _EL_ } _EL_ } _EL_ ', '@Override public void drawRangeMarker(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Marker marker,Rectangle2D dataArea){ _EL_   if (marker instanceof ValueMarker) { _EL_     ValueMarker vm=(ValueMarker)marker; _EL_     double value=vm.getValue(); _EL_     Range range=axis.getRange(); _EL_     if (!range.contains(value)) { _EL_       return; _EL_     } _EL_     final Composite savedComposite=g2.getComposite(); _EL_     g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha())); _EL_     PlotOrientation orientation=plot.getOrientation(); _EL_     double v=axis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge()); _EL_     Line2D line=null; _EL_     if (orientation == PlotOrientation.HORIZONTAL) { _EL_       line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY()); _EL_     } _EL_  else     if (orientation == PlotOrientation.VERTICAL) { _EL_       line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v); _EL_     } _EL_  else { _EL_       throw new IllegalStateException(); _EL_     } _EL_     g2.setPaint(marker.getPaint()); _EL_     g2.setStroke(marker.getStroke()); _EL_     g2.draw(line); _EL_     String label=marker.getLabel(); _EL_     RectangleAnchor anchor=marker.getLabelAnchor(); _EL_     if (label != null) { _EL_       Font labelFont=marker.getLabelFont(); _EL_       g2.setFont(labelFont); _EL_       Point2D coordinates=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,line.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor); _EL_       Rectangle2D rect=TextUtils.calcAlignedStringBounds(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor()); _EL_       g2.setPaint(marker.getLabelBackgroundColor()); _EL_       g2.fill(rect); _EL_       g2.setPaint(marker.getLabelPaint()); _EL_       TextUtils.drawAlignedString(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor()); _EL_     } _EL_     g2.setComposite(savedComposite); _EL_   } _EL_  else   if (marker instanceof IntervalMarker) { _EL_     IntervalMarker im=(IntervalMarker)marker; _EL_     double start=im.getStartValue(); _EL_     double end=im.getEndValue(); _EL_     Range range=axis.getRange(); _EL_     if (!(range.intersects(start,end))) { _EL_       return; _EL_     } _EL_     final Composite savedComposite=g2.getComposite(); _EL_     g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha())); _EL_     double start2d=axis.valueToJava2D(start,dataArea,plot.getRangeAxisEdge()); _EL_     double end2d=axis.valueToJava2D(end,dataArea,plot.getRangeAxisEdge()); _EL_     double low=Math.min(start2d,end2d); _EL_     double high=Math.max(start2d,end2d); _EL_     PlotOrientation orientation=plot.getOrientation(); _EL_     Rectangle2D rect=null; _EL_     if (orientation == PlotOrientation.HORIZONTAL) { _EL_       low=Math.max(low,dataArea.getMinX()); _EL_       high=Math.min(high,dataArea.getMaxX()); _EL_       rect=new Rectangle2D.Double(low,dataArea.getMinY(),high - low,dataArea.getHeight()); _EL_     } _EL_  else     if (orientation == PlotOrientation.VERTICAL) { _EL_       low=Math.max(low,dataArea.getMinY()); _EL_       high=Math.min(high,dataArea.getMaxY()); _EL_       rect=new Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high - low); _EL_     } _EL_     Paint p=marker.getPaint(); _EL_     if (p instanceof GradientPaint) { _EL_       GradientPaint gp=(GradientPaint)p; _EL_       GradientPaintTransformer t=im.getGradientPaintTransformer(); _EL_       if (t != null) { _EL_         gp=t.transform(gp,rect); _EL_       } _EL_       g2.setPaint(gp); _EL_     } _EL_  else { _EL_       g2.setPaint(p); _EL_     } _EL_     g2.fill(rect); _EL_     if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) { _EL_       if (orientation == PlotOrientation.VERTICAL) { _EL_         Line2D line=new Line2D.Double(); _EL_         double x0=dataArea.getMinX(); _EL_         double x1=dataArea.getMaxX(); _EL_         g2.setPaint(im.getOutlinePaint()); _EL_         g2.setStroke(im.getOutlineStroke()); _EL_         if (range.contains(start)) { _EL_           line.setLine(x0,start2d,x1,start2d); _EL_           g2.draw(line); _EL_         } _EL_         if (range.contains(end)) { _EL_           line.setLine(x0,end2d,x1,end2d); _EL_           g2.draw(line); _EL_         } _EL_       } _EL_  else { _EL_         Line2D line=new Line2D.Double(); _EL_         double y0=dataArea.getMinY(); _EL_         double y1=dataArea.getMaxY(); _EL_         g2.setPaint(im.getOutlinePaint()); _EL_         g2.setStroke(im.getOutlineStroke()); _EL_         if (range.contains(start)) { _EL_           line.setLine(start2d,y0,start2d,y1); _EL_           g2.draw(line); _EL_         } _EL_         if (range.contains(end)) { _EL_           line.setLine(end2d,y0,end2d,y1); _EL_           g2.draw(line); _EL_         } _EL_       } _EL_     } _EL_     String label=marker.getLabel(); _EL_     RectangleAnchor anchor=marker.getLabelAnchor(); _EL_     if (label != null) { _EL_       Font labelFont=marker.getLabelFont(); _EL_       g2.setFont(labelFont); _EL_       Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,rect,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor); _EL_       Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor()); _EL_       g2.setPaint(marker.getLabelBackgroundColor()); _EL_       g2.fill(r); _EL_       g2.setPaint(marker.getLabelPaint()); _EL_       TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor()); _EL_     } _EL_     g2.setComposite(savedComposite); _EL_   } _EL_ } _EL_ ', 'private void init(){ _EL_   acceptableMethods=new ArrayList<>(); _EL_   acceptableMethods.add(new NoAuthenticationRequiredMethod()); _EL_   acceptableMethods.add(new GssApiMethod()); _EL_   acceptableMethods.add(new UsernamePasswordMethod()); _EL_ } _EL_ ', 'private boolean lockOrder(Order order){ _EL_   lock.lock(); _EL_   try { _EL_     return activeOrders.add(order.getId()); _EL_   } _EL_   finally { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', 'public void put(Buffer buffer){ _EL_   if (buffer.getLength() <= 2) { _EL_     return; _EL_   } _EL_   byte[] currentRtpPacketData=((byte[])buffer.getData()); _EL_   H264RtpHeaders h264RtpHeaders=new H264RtpHeaders(currentRtpPacketData); _EL_   if (h264RtpHeaders.getFUI_F()) { _EL_     return; _EL_   } _EL_   if (reassembledData == null) { _EL_     timestamp=buffer.getTimestamp(); _EL_     format=buffer.getFormat(); _EL_     seqNumber=buffer.getSequenceNumber(); _EL_     reassembledDataNALHeader=h264RtpHeaders.getNALHeader(); _EL_     reassembledData=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE]; _EL_     reassembledDataSize=new int[JavaPacketizer.H264_MAX_RTP_PKTS]; _EL_     reassembledDataHasStart=false; _EL_     reassembledDataHasEnd=false; _EL_   } _EL_   int posSeq=(int)(buffer.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK); _EL_   int payloadStartPosition=h264RtpHeaders.getHeaderSize(); _EL_   int payloadLength=buffer.getLength() - h264RtpHeaders.getHeaderSize(); _EL_   if (h264RtpHeaders.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) { _EL_     reassembledDataHasStart|=(h264RtpHeaders.getFUH_S()); _EL_     reassembledDataHasEnd|=(h264RtpHeaders.getFUH_E()); _EL_     reassembledDataPosSeqStart=((h264RtpHeaders.getFUH_S()) ? posSeq : reassembledDataPosSeqStart); _EL_     reassembledDataPosSeqEnd=((h264RtpHeaders.getFUH_E()) ? posSeq : reassembledDataPosSeqEnd); _EL_   } _EL_   reassembledDataSize[posSeq]=payloadLength; _EL_   reassembledDataFullSize+=payloadLength; _EL_   System.arraycopy(currentRtpPacketData,payloadStartPosition,reassembledData[posSeq],0,payloadLength); _EL_   videoOrientation=buffer.getVideoOrientation(); _EL_ } _EL_ ', 'public static final void writeStringArrayXml(String[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException { _EL_   if (val == null) { _EL_     out.startTag(null,"null"); _EL_     out.endTag(null,"null"); _EL_     return; _EL_   } _EL_   out.startTag(null,"string-array"); _EL_   if (name != null) { _EL_     out.attribute(null,"name",name); _EL_   } _EL_   final int N=val.length; _EL_   out.attribute(null,"num",Integer.toString(N)); _EL_   for (int i=0; i < N; i++) { _EL_     out.startTag(null,"item"); _EL_     out.attribute(null,"value",val[i]); _EL_     out.endTag(null,"item"); _EL_   } _EL_   out.endTag(null,"string-array"); _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public JdbcData(Connection connection,String table,boolean buffered){ _EL_   this.connection=connection; _EL_   this.table=table; _EL_   setBuffered(buffered); _EL_   try { _EL_     setColumnTypes(getJdbcColumnTypes()); _EL_   } _EL_  catch (  SQLException e) { _EL_     e.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'public void storeStackForException(Throwable t,int currentStackFrame){ _EL_   if (!exceptionStack.containsKey(t)) { _EL_     int[] s=new int[stackPointer + 1]; _EL_     System.arraycopy(stack,0,s,0,stackPointer); _EL_     s[stackPointer]=currentStackFrame; _EL_     exceptionStack.put(t,s); _EL_   } _EL_ } _EL_ ', 'public static byte[] readData(final URL url) throws IOException { _EL_   try (InputStream input=url.openStream()){ _EL_     return readData(input); _EL_   } _EL_  } _EL_ ', 'public boolean isValidCurrent(long checkTime){ _EL_   if (checkTime == 0 || (rDateList == null && rRulesList == null)) { _EL_     return false; _EL_   } _EL_   boolean found=false; _EL_   Iterator<RecurrenceRule> rulesIterator=getRecurrenceRuleIterator(); _EL_   while (rulesIterator.hasNext()) { _EL_     RecurrenceRule rule=rulesIterator.next(); _EL_     long currentTime=rule.validCurrent(getStartTime(),checkTime,getCurrentCount()); _EL_     currentTime=checkDateList(rDateList,currentTime,checkTime); _EL_     if ((currentTime > 0) && isValid(checkTime)) { _EL_       found=true; _EL_     } _EL_  else { _EL_       return false; _EL_     } _EL_   } _EL_   return found; _EL_ } _EL_ ', 'public static String toKilobytes(long bytes){ _EL_   if (bytes < 0)   return "? " + GENERAL_UNIT_KILOBYTES; _EL_   long kbytes=bytes / 1024; _EL_   if ((bytes & 512) != 0 || (bytes > 0 && bytes < 1024))   kbytes++; _EL_   return NUMBER_FORMAT0.format(kbytes) + GENERAL_UNIT_KILOBYTES; _EL_ } _EL_ ', 'private PendingIntent createRequestPendingIntent(@NonNull String pendingIntentClassName){ _EL_   PendingIntent pendingIntent=null; _EL_   try { _EL_     Class classOfPendingIntent=Class.forName(pendingIntentClassName); _EL_     if (classOfPendingIntent != null) { _EL_       Intent intent=new Intent(mContext,classOfPendingIntent); _EL_       pendingIntent=PendingIntent.getService(mContext,0,intent,PendingIntent.FLAG_UPDATE_CURRENT); _EL_     } _EL_   } _EL_  catch (  ClassNotFoundException e) { _EL_     e.printStackTrace(); _EL_   } _EL_   return pendingIntent; _EL_ } _EL_ ', 'public boolean isStatic(){ _EL_   return Modifier.isStatic(_method.getModifiers()); _EL_ } _EL_ ', 'public static String unifyLineSeparators(String s){ _EL_   return unifyLineSeparators(s,System.getProperty("line.separator")); _EL_ } _EL_ ', 'public static byte[] decryptKey(byte[] password,byte[] encryptedKey){ _EL_   try { _EL_     Cipher c=Cipher.getInstance(ENCRYPT_KEY_ALGORITHM); _EL_     c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(password,SECRET_KEY_ALGORITHM),CBC_SALT_KEY); _EL_     return c.doFinal(encryptedKey); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new IllegalStateException(ENCRYPT_KEY_ALGORITHM + " is not available",e); _EL_   } _EL_ } _EL_ ', 'private View fillFromSelection(int selectedLeft,int childrenLeft,int childrenRight){ _EL_   if (DEBUG)   Log.i(TAG,"fillFromSelection() selectedLeft: " + selectedLeft + " childrenLeft: "+ childrenLeft+ CHILDREN_RIGHT+ childrenRight+ M_FIRST_POSITION+ mFirstPosition); _EL_   final int fadingEdgeLength=getHorizontalFadingEdgeLength(); _EL_   final int selectedPosition=mSelectedPosition; _EL_   final int numRows=mNumRows; _EL_   final int horizontalSpacing=mHorizontalSpacing; _EL_   int columnStart; _EL_   int columnEnd=-1; _EL_   if (!mStackFromBottom) { _EL_     columnStart=selectedPosition - (selectedPosition % numRows); _EL_   } _EL_  else { _EL_     int invertedSelection=mItemCount - 1 - selectedPosition; _EL_     columnEnd=mItemCount - 1 - (invertedSelection - (invertedSelection % numRows)); _EL_     columnStart=Math.max(0,columnEnd - numRows + 1); _EL_   } _EL_   View sel; _EL_   View referenceView; _EL_   int leftSelectionPixel=getLeftSelectionPixel(childrenLeft,fadingEdgeLength,columnStart); _EL_   int rightSelectionPixel=getRightSelectionPixel(childrenRight,fadingEdgeLength,numRows,columnStart); _EL_   sel=makeColumn(mStackFromBottom ? columnEnd : columnStart,selectedLeft,true); _EL_   mFirstPosition=columnStart; _EL_   referenceView=mReferenceView; _EL_   adjustForLeftFadingEdge(referenceView,leftSelectionPixel,rightSelectionPixel); _EL_   adjustForRightFadingEdge(referenceView,leftSelectionPixel,rightSelectionPixel); _EL_   if (!mStackFromBottom) { _EL_     fillLeft(columnStart - numRows,referenceView.getLeft() - horizontalSpacing); _EL_     adjustViewsLeftOrRight(); _EL_     fillRight(columnStart + numRows,referenceView.getRight() + horizontalSpacing); _EL_   } _EL_  else { _EL_     fillRight(columnEnd + numRows,referenceView.getRight() + horizontalSpacing); _EL_     adjustViewsLeftOrRight(); _EL_     fillLeft(columnStart - 1,referenceView.getLeft() - horizontalSpacing); _EL_   } _EL_   return sel; _EL_ } _EL_ ', 'private static Field findField(Object instance,String name) throws NoSuchFieldException { _EL_   for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) { _EL_     try { _EL_       Field field=clazz.getDeclaredField(name); _EL_       if (!field.isAccessible()) { _EL_         field.setAccessible(true); _EL_       } _EL_       return field; _EL_     } _EL_  catch (    NoSuchFieldException e) { _EL_     } _EL_   } _EL_   throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass()); _EL_ } _EL_ ', 'private void injectContent(Inject injectContent) throws IOException, MojoExecutionException { _EL_   Map<Pattern,File> contents=getContentsMap(injectContent.getContents()); _EL_   File tmpFile=ioFactory.createTemporaryFile(injectContent.getDestinationFile()); _EL_   BufferedReader reader=null; _EL_   BufferedWriter writer=null; _EL_   try { _EL_     reader=ioFactory.newReader(injectContent.getDestinationFile()); _EL_     writer=ioFactory.newWriter(tmpFile); _EL_     String line; _EL_     while ((line=reader.readLine()) != null) { _EL_       File content=doesLineMatchId(contents,line); _EL_       if (content != null) { _EL_         ioFactory.writeContent(writer,content,getContentConverter(injectContent)); _EL_       } _EL_  else { _EL_         ioFactory.writeLine(writer,line); _EL_       } _EL_     } _EL_   } _EL_   finally { _EL_     if (reader != null) { _EL_       reader.close(); _EL_     } _EL_     if (writer != null) { _EL_       writer.flush(); _EL_       writer.close(); _EL_     } _EL_   } _EL_   ioFactory.moveTo(tmpFile,injectContent.getDestinationFile()); _EL_ } _EL_ ', 'public static <E>boolean isEmpty(CharSequence c){ _EL_   return (c == null) || c.length() == 0; _EL_ } _EL_ ', 'private static boolean createBooleanSetting(final Map<String,String> rawSettings,final String settingName,final boolean defaultValue){ _EL_   final String settingString=rawSettings.get(settingName); _EL_   if (settingString == null) { _EL_     return defaultValue; _EL_   } _EL_  else { _EL_     try { _EL_       return Boolean.parseBoolean(settingString); _EL_     } _EL_  catch (    final NumberFormatException exception) { _EL_       CUtilityFunctions.logException(exception); _EL_       return defaultValue; _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public void disconnectionNotification(String eventName,Object source){ _EL_   m_listenees.remove(source); _EL_ } _EL_ ', '@Override public boolean runAfter(List tasks,int size){ _EL_   for (int i=0; i < size; i++) { _EL_     CacheTask t=(CacheTask)tasks.get(i); _EL_     if (t instanceof RegisterListenerTask || t instanceof LookupTask) { _EL_       ProxyReg otherReg=t.getProxyReg(); _EL_       if (reg.equals(otherReg)) { _EL_         if (thisTaskSeqN > t.getSeqN())         return true; _EL_       } _EL_     } _EL_   } _EL_   return super.runAfter(tasks,size); _EL_ } _EL_ ', 'public double[] arrayCopy(){ _EL_   double[] array=new double[length()]; _EL_   for (  IndexValue iv : this)   array[iv.getIndex()]=iv.getValue(); _EL_   return array; _EL_ } _EL_ ', 'private static boolean parse(Class<?> service,URL u) throws ServiceConfigurationError { _EL_   InputStream in=null; _EL_   BufferedReader r=null; _EL_   try { _EL_     in=u.openStream(); _EL_     r=new BufferedReader(new InputStreamReader(in,"utf-8")); _EL_     int lc=1; _EL_     String ln; _EL_     while ((ln=r.readLine()) != null) { _EL_       int ci=ln.indexOf(\'#\'); _EL_       if (ci >= 0)       ln=ln.substring(0,ci); _EL_       ln=ln.trim(); _EL_       int n=ln.length(); _EL_       if (n != 0) { _EL_         if ((ln.indexOf(\' \') >= 0) || (ln.indexOf(\'\\t\') >= 0))         fail(service,u,lc,"Illegal configuration-file syntax"); _EL_         int cp=ln.codePointAt(0); _EL_         if (!Character.isJavaIdentifierStart(cp))         fail(service,u,lc,"Illegal provider-class name: " + ln); _EL_         for (int i=Character.charCount(cp); i < n; i+=Character.charCount(cp)) { _EL_           cp=ln.codePointAt(i); _EL_           if (!Character.isJavaIdentifierPart(cp) && (cp != \'.\'))           fail(service,u,lc,"Illegal provider-class name: " + ln); _EL_         } _EL_         return true; _EL_       } _EL_     } _EL_   } _EL_  catch (  FileNotFoundException x) { _EL_     return false; _EL_   } _EL_ catch (  IOException x) { _EL_     fail(service,": " + x); _EL_   } _EL_  finally { _EL_     try { _EL_       if (r != null)       r.close(); _EL_     } _EL_  catch (    IOException y) { _EL_       fail(service,": " + y); _EL_     } _EL_     try { _EL_       if (in != null)       in.close(); _EL_     } _EL_  catch (    IOException y) { _EL_       fail(service,": " + y); _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private void initPattern(){ _EL_   StringBuffer patternTemplateRegex=new StringBuffer(); _EL_   logger.debug("Get placeholder matcher"); _EL_   Matcher placeholderMatcher=getPlaceholderMatcher(); _EL_   logger.debug("Replace all placeholder with regex group capture"); _EL_   while (placeholderMatcher.find()) { _EL_     String group=placeholderMatcher.group(1); _EL_     if (!groups.contains(group)) { _EL_       logger.trace("New group found, add it, replace with a capture group"); _EL_       groups.add(group); _EL_       String groupRegex=getGroupRegex(group); _EL_       placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement("(?<" + group + ">"+ groupRegex+ ")")); _EL_     } _EL_  else { _EL_       logger.trace("Existing group found, replace with a back reference"); _EL_       placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement("\\\\k<" + group + ">")); _EL_     } _EL_   } _EL_   placeholderMatcher.appendTail(patternTemplateRegex); _EL_   String patternRegex=patternTemplateRegex.toString(); _EL_   logger.debug("pattern:" + patternRegex); _EL_   pattern=Pattern.compile(patternRegex); _EL_ } _EL_ ', 'protected void newLine(PrintWriter file,String string,boolean isManifest){ _EL_   String[] lines=string.split(NEW_LINE); _EL_   for (  String line : lines) { _EL_     String[] words=line.split(SPACE); _EL_     StringBuffer sb=new StringBuffer(); _EL_     for (    String word : words) { _EL_       if (checkStringLength(sb.toString() + word,isManifest)) { _EL_         sb.append(word + SPACE); _EL_       } _EL_  else { _EL_         sb.setLength(sb.length() - 1); _EL_         addLine(file,sb.toString()); _EL_         sb=new StringBuffer(word + SPACE); _EL_       } _EL_     } _EL_     if (sb.length() > 0) { _EL_       sb.setLength(sb.length() - 1); _EL_     } _EL_     addLine(file,sb.toString()); _EL_   } _EL_ } _EL_ ', 'public List<SoftWrapImpl> removeStartingFrom(int offset){ _EL_   int startIndex=getSoftWrapIndex(offset); _EL_   if (startIndex < 0) { _EL_     startIndex=-startIndex - 1; _EL_   } _EL_   if (startIndex >= myWraps.size()) { _EL_     return Collections.emptyList(); _EL_   } _EL_   List<SoftWrapImpl> tail=myWraps.subList(startIndex,myWraps.size()); _EL_   List<SoftWrapImpl> result=new ArrayList<SoftWrapImpl>(tail); _EL_   tail.clear(); _EL_   return result; _EL_ } _EL_ ', 'public static String truncate(String string,int length){ _EL_   if (string.length() > length) { _EL_     string=string.substring(0,length); _EL_   } _EL_   return string; _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public SortedSet<E> subSet(E start,E end){ _EL_   return subSet(start,true,end,false); _EL_ } _EL_ ', 'private boolean checkDisband(Legion legion){ _EL_   if (legion.isDisbanding()) { _EL_     if ((System.currentTimeMillis() / 1000) > legion.getDisbandTime()) { _EL_       disbandLegion(legion); _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void index(Tuple t,String field){ _EL_   String s; _EL_   if ((s=t.getString(field)) == null)   return; _EL_   StringTokenizer st=new StringTokenizer(s,m_delim); _EL_   while (st.hasMoreTokens()) { _EL_     String tok=st.nextToken(); _EL_     addString(tok,t); _EL_   } _EL_ } _EL_ ', 'public static void downto(float self,Number to,@ClosureParams(FirstParam.class) Closure closure){ _EL_   float to1=to.floatValue(); _EL_   if (self >= to1) { _EL_     for (float i=self; i >= to1; i--) { _EL_       closure.call(i); _EL_     } _EL_   } _EL_  else   throw new GroovyRuntimeException("The argument (" + to + ") to downto() cannot be greater than the value ("+ self+ ") it\'s called on."); _EL_ } _EL_ ', 'protected void parseDOMAttributes(Element element) throws SAML2Exception { _EL_   requestId=element.getAttribute(SAML2Constants.ID); _EL_   validateID(requestId); _EL_   version=element.getAttribute(SAML2Constants.VERSION); _EL_   validateVersion(version); _EL_   String issueInstantStr=element.getAttribute(SAML2Constants.ISSUE_INSTANT); _EL_   validateIssueInstant(issueInstantStr); _EL_   destinationURI=element.getAttribute(SAML2Constants.DESTINATION); _EL_   consent=element.getAttribute(SAML2Constants.CONSENT); _EL_ } _EL_ ', 'protected int readFully(InputStream in,byte buffer[]) throws java.io.IOException { _EL_   for (int i=0; i < buffer.length; i++) { _EL_     int q=in.read(); _EL_     if (q == -1)     return i; _EL_     buffer[i]=(byte)q; _EL_   } _EL_   return buffer.length; _EL_ } _EL_ ', '@CalledByNative private static void insertFullscreenInfoIntoList(ArrayList<FullscreenInfo> list,String origin,String embedder){ _EL_   list.add(new FullscreenInfo(origin,embedder,false)); _EL_ } _EL_ ', 'public static InputStream streamFromString(String location) throws IOException { _EL_   InputStream is=null; _EL_   URL url=urlFromString(location,null,false); _EL_   if (url != null) { _EL_     is=url.openStream(); _EL_   } _EL_  else { _EL_     File f=new File(location); _EL_     if (f.exists())     is=new FileInputStream(f); _EL_   } _EL_   if (is == null) { _EL_     return null; _EL_   } _EL_  else   if (isGZipFile(location)) { _EL_     return new GZIPInputStream(is); _EL_   } _EL_  else { _EL_     return is; _EL_   } _EL_ } _EL_ ', 'private void copyACLs(List<UnManagedCifsShareACL> origACLList,List<CifsShareACL> shareACLList,FileShare fileshare){ _EL_   CifsShareACL shareACL=null; _EL_   for (  UnManagedCifsShareACL origACL : origACLList) { _EL_     shareACL=new CifsShareACL(); _EL_     shareACL.setId(URIUtil.createId(CifsShareACL.class)); _EL_     shareACL.setUser(origACL.getUser()); _EL_     shareACL.setPermission(origACL.getPermission()); _EL_     shareACL.setShareName(origACL.getShareName()); _EL_     shareACL.setFileSystemId(fileshare.getId()); _EL_     shareACLList.add(shareACL); _EL_     _logger.info("share ACLs details {}",shareACL.toString()); _EL_   } _EL_ } _EL_ ', 'public ResourceListParser parse() throws ParserConfigurationException, SAXException, ParseFailureException { _EL_   try { _EL_     SAXParserFactory factory=SAXParserFactory.newInstance(); _EL_     SAXParser parser=factory.newSAXParser(); _EL_     parser.parse(mInputSource,this); _EL_     return this; _EL_   } _EL_  catch (  IOException e) { _EL_     throw new ParseFailureException("Failed to parse input source!",e); _EL_   } _EL_ } _EL_ ', 'protected void incorporateSignedProperties() throws DSSException { _EL_   signedPropertiesDom=DSSXMLUtils.addElement(documentDom,qualifyingPropertiesDom,XAdES,XADES_SIGNED_PROPERTIES); _EL_   signedPropertiesDom.setAttribute(ID,"xades-" + deterministicId); _EL_   incorporateSignedSignatureProperties(); _EL_ } _EL_ ', 'private ChannelSelection createChannelSelection(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){ _EL_   ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name()); _EL_   FilterFactory ff=CommonFactoryFinder.getFilterFactory(); _EL_   Map<String,Expression> options=contrastEnhancement.getOptions(); _EL_   options.put("algorithm",ff.literal("StretchToMinimumMaximum")); _EL_   options.put("minValue",ff.literal("1")); _EL_   options.put("maxValue",ff.literal("5")); _EL_   SelectedChannelType channelType=styleFactory.createSelectedChannelType("channel name",contrastEnhancement); _EL_   SelectedChannelType[] channels=new SelectedChannelType[3]; _EL_   channels[0]=channelType; _EL_   channels[1]=channelType; _EL_   channels[2]=channelType; _EL_   ChannelSelection channelSelection=styleFactory.createChannelSelection(channels); _EL_   return channelSelection; _EL_ } _EL_ ', 'public static float mean(float[] data,int[] inds){ _EL_   float mean=0; _EL_   for (int i=0; i < inds.length; i++) { _EL_     if (Float.isNaN(data[inds[i]]))     throw new IllegalArgumentException("NaN not allowed in mean calculation"); _EL_     mean+=data[inds[i]]; _EL_   } _EL_   mean/=inds.length; _EL_   return mean; _EL_ } _EL_ ', 'public int depth(){ _EL_   return pointer; _EL_ } _EL_ ', 'public void monitor(ScalingStateMonitorTask task){ _EL_   taskQueue.add(task); _EL_   startMonitor(); _EL_ } _EL_ ', 'public void insertNodeInto(MutableTreeNode newChild,MutableTreeNode parent,int index){ _EL_   parent.insert(newChild,index); _EL_   int[] newIndexs=new int[1]; _EL_   newIndexs[0]=index; _EL_   nodesWereInserted(parent,newIndexs); _EL_ } _EL_ ', 'private static void writeFile(File file,List<String> lines) throws IOException { _EL_   if (!file.exists())   file.createNewFile(); _EL_   FileWriter fw=new FileWriter(file); _EL_   BufferedWriter Bw=new BufferedWriter(fw); _EL_   PrintWriter pw=new PrintWriter(Bw); _EL_   for (  String line : lines)   pw.println(line); _EL_   Bw.close(); _EL_   fw.close(); _EL_   pw.close(); _EL_ } _EL_ ', 'public synchronized boolean verifyChunkAuthTag(int chunkIdx,byte[] chunkAuthTag) throws FileEncryptionException { _EL_   if ((chunkIdx < 0) || (chunkAuthTag == null) || (chunkAuthTag.length != backEncRandomAccessFile.CHUNK_TLEN)) { _EL_     throw new FileEncryptionException("Invalid auth tag parameter given!"); _EL_   } _EL_  else { _EL_     byte[] storedAuthTag=atagList.get(chunkIdx); _EL_     if (storedAuthTag == null || !Arrays.equals(chunkAuthTag,storedAuthTag)) { _EL_       return false; _EL_     } _EL_  else { _EL_       return true; _EL_     } _EL_   } _EL_ } _EL_ ', 'public static String guessMimeTypeFromExtension(String extension){ _EL_   if (extension == null || extension.isEmpty()) { _EL_     return null; _EL_   } _EL_   return extensionToMimeTypeMap.get(extension); _EL_ } _EL_ ', 'public <AnnotationType extends Annotation>void register(MethodBinder<AnnotationType> methodBinder){ _EL_   Set<AnnotatedMethod<AnnotationType>> annotatedMethods=AnnotatedMethods.get(methodBinder.getAnnotationClass(),annotatedType); _EL_   if (!annotatedMethods.isEmpty()) { _EL_     objectBinders.add(new AnnotatedMethodBinder<>(methodBinder,annotatedMethods)); _EL_   } _EL_ } _EL_ ', 'private Document parseRouteFile() throws Exception { _EL_   DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance(); _EL_   factory.setNamespaceAware(true); _EL_   DocumentBuilder builder=factory.newDocumentBuilder(); _EL_   return builder.parse(routeFile); _EL_ } _EL_ ', 'public void removeDTEDDirectoryHandler(DTEDDirectoryHandler handler){ _EL_   directories.remove(handler); _EL_ } _EL_ ', 'public default void addFile(final ContentProvider contentProvider,final String fileName,final EntryInformation entryInformation) throws IOException { _EL_   addFile(contentProvider,fileName,entryInformation,Optional.empty()); _EL_ } _EL_ ', 'protected void read_lookahead() throws java.lang.Exception { _EL_   lookahead=new Symbol[error_sync_size()]; _EL_   for (int i=0; i < error_sync_size(); i++) { _EL_     lookahead[i]=cur_token; _EL_     cur_token=scan(); _EL_   } _EL_   lookahead_pos=0; _EL_ } _EL_ ', 'public final void delayTask(@NotNull TransactionRunnable task){ _EL_   myDelayedTasks.add(task); _EL_ } _EL_ ', 'public TextEditor replaceAll(String regex,String replacement){ _EL_   if (text.length() > 0) { _EL_     final String r=replacement; _EL_     Pattern p=Pattern.compile(regex,Pattern.MULTILINE); _EL_     Matcher m=p.matcher(text); _EL_     StringBuffer sb=new StringBuffer(); _EL_     while (m.find()) { _EL_       m.appendReplacement(sb,r); _EL_     } _EL_     m.appendTail(sb); _EL_     text=new StringBuilder(sb.toString()); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'private static <T>int migrateAll(Migration<T> migration) throws Exception { _EL_   int migrated=0; _EL_   for (  T entity : migration.getAllEntities()) { _EL_     try { _EL_       if (migration.isMigrated(entity))       continue; _EL_     } _EL_  catch (    Exception x) { _EL_       LOG.error("Couldn\'t check if the entity \'{}\' is migrated due to occurred error",entity); _EL_       throw x; _EL_     } _EL_     try { _EL_       migration.migrate(entity); _EL_     } _EL_  catch (    Exception x) { _EL_       LOG.error("Error migrating the entity \'{}",entity); _EL_       throw x; _EL_     } _EL_     migrated++; _EL_   } _EL_   return migrated; _EL_ } _EL_ ', 'private void captureDifferentString(String oldString,String newString,Map<String,String> map,String appName){ _EL_   Reject.ifNull(appName); _EL_   Reject.ifNull(map); _EL_   if (oldString == null ? newString != null : !oldString.equals(newString)) { _EL_     map.put(appName,newString); _EL_   } _EL_ } _EL_ ', 'public void onChildThreadResumeBegin(){ _EL_   _threadCount.incrementAndGet(); _EL_ } _EL_ ', '@Override protected void drawXLabels(List<Double> xLabels,Double[] xTextLabelLocations,Canvas canvas,Paint paint,int left,int top,int bottom,double xPixelsPerUnit,double minX,double maxX){ _EL_   int length=xLabels.size(); _EL_   if (length > 0) { _EL_     boolean showLabels=mRenderer.isShowLabels(); _EL_     boolean showGridY=mRenderer.isShowGridY(); _EL_     DateFormat format=getDateFormat(xLabels.get(0),xLabels.get(length - 1)); _EL_     for (int i=0; i < length; i++) { _EL_       long label=Math.round(xLabels.get(i)); _EL_       float xLabel=(float)(left + xPixelsPerUnit * (label - minX)); _EL_       if (showLabels) { _EL_         paint.setColor(mRenderer.getXLabelsColor()); _EL_         canvas.drawLine(xLabel,bottom,xLabel,bottom + mRenderer.getLabelsTextSize() / 3,paint); _EL_         drawText(canvas,format.format(new Date(label)),xLabel,bottom + mRenderer.getLabelsTextSize() * 4 / 3,paint,mRenderer.getXLabelsAngle()); _EL_       } _EL_       if (showGridY) { _EL_         paint.setColor(mRenderer.getGridColor()); _EL_         canvas.drawLine(xLabel,bottom,xLabel,top,paint); _EL_       } _EL_     } _EL_   } _EL_   drawXTextLabels(xTextLabelLocations,canvas,paint,true,left,top,bottom,xPixelsPerUnit,minX,maxX); _EL_ } _EL_ ', 'public boolean equals(Object obj){ _EL_   if (this == obj) { _EL_     return true; _EL_   } _EL_   if (obj instanceof ECFieldF2m) { _EL_     ECFieldF2m o=(ECFieldF2m)obj; _EL_     if (this.m == o.m) { _EL_       if (this.rp == null) { _EL_         if (o.rp == null) { _EL_           return true; _EL_         } _EL_       } _EL_  else { _EL_         return Arrays.equals(this.ks,o.ks); _EL_       } _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static void chunkTaskSync(RegionWrapper region,final RunnableVal<int[]> task){ _EL_   final int p1x=region.minX; _EL_   final int p1z=region.minZ; _EL_   final int p2x=region.maxX; _EL_   final int p2z=region.maxZ; _EL_   final int bcx=p1x >> 4; _EL_   final int bcz=p1z >> 4; _EL_   final int tcx=p2x >> 4; _EL_   final int tcz=p2z >> 4; _EL_   task.value=new int[7]; _EL_   for (int x=bcx; x <= tcx; x++) { _EL_     for (int z=bcz; z <= tcz; z++) { _EL_       task.value[0]=x; _EL_       task.value[1]=z; _EL_       task.value[2]=task.value[0] << 4; _EL_       task.value[3]=task.value[1] << 4; _EL_       task.value[4]=task.value[2] + 15; _EL_       task.value[5]=task.value[3] + 15; _EL_       task.value[6]=0; _EL_       if (task.value[0] == bcx) { _EL_         task.value[2]=p1x; _EL_         task.value[6]=1; _EL_       } _EL_       if (task.value[0] == tcx) { _EL_         task.value[4]=p2x; _EL_         task.value[6]=1; _EL_       } _EL_       if (task.value[1] == bcz) { _EL_         task.value[3]=p1z; _EL_         task.value[6]=1; _EL_       } _EL_       if (task.value[1] == tcz) { _EL_         task.value[5]=p2z; _EL_         task.value[6]=1; _EL_       } _EL_       task.run(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public ElsaSerializerPojo make(){ _EL_   return new ElsaSerializerPojo(objectStack,singletons,registeredSers,registeredSerHeaders,registeredDeser,unknownClassNotification,new ElsaClassInfoResolver.ArrayBased(classes.toArray(new Class[0]))); _EL_ } _EL_ ', 'private void loadBinary(InputStream is) throws IOException { _EL_   if (is instanceof FileInputStream) { _EL_     FileInputStream fis=(FileInputStream)is; _EL_     FileChannel fc=fis.getChannel(); _EL_     MappedByteBuffer bb=fc.map(FileChannel.MapMode.READ_ONLY,0,(int)fc.size()); _EL_     bb.load(); _EL_     loadBinary(bb); _EL_     is.close(); _EL_   } _EL_  else { _EL_     loadBinary(new DataInputStream(is)); _EL_   } _EL_ } _EL_ ', 'private static boolean isTwoSlotType(ClassNode type){ _EL_   return type == ClassHelper.long_TYPE || type == ClassHelper.double_TYPE; _EL_ } _EL_ ', 'public SpecificationRunnerBuilder sections(String[] paramSections){ _EL_   Collections.addAll(this.sections,paramSections); _EL_   return this; _EL_ } _EL_ ', 'public void accept(final Path file) throws InterruptedException { _EL_   logger.info(String.format("Sending to thread pool; will queue if full: \\"%s\\".",file)); _EL_   permits.acquire(); _EL_   executor.execute(new ConsumerTask(file)); _EL_ } _EL_ ', 'private void addOptionList(final List<String> args,final String optName,final List<String> values){ _EL_   for (  final String value : values) { _EL_     if (value != null && !value.isEmpty()) { _EL_       args.add(optName); _EL_       args.add(value); _EL_     } _EL_   } _EL_ } _EL_ ', 'private Activity checkActivity(){ _EL_   Activity activity=mActivity.get(); _EL_   if (activity == null) { _EL_     throw new IllegalStateException("No activity set. Either subclass PermisoActivity or call Permiso.setActivity() in onCreate() and onResume() of your Activity."); _EL_   } _EL_   return activity; _EL_ } _EL_ ', '@Override public synchronized void start(){ _EL_   LOGGER.info("Starting the C2MON alive timer mechanism."); _EL_   timer=new Timer("C2MON-alive-timer"); _EL_   timer.schedule(this,INITIAL_SCAN_DELAY,SCAN_INTERVAL); _EL_   running=true; _EL_ } _EL_ ', 'protected static void writeRowCountDefinitions(TableCreator creator,ByteBuffer buffer){ _EL_   writeRowCountDefinitions(creator,buffer,creator.getIndexCount()); _EL_ } _EL_ ', 'public void send(String theString){ _EL_   send(theString.getBytes()); _EL_ } _EL_ ', 'public static _Fields findByThriftId(int fieldId){ _EL_ switch (fieldId) { _EL_ case 1: _EL_     return PATH; _EL_ case 2: _EL_   return OFFSET_LBA; _EL_ default : _EL_ return null; _EL_ } _EL_ } _EL_ ', 'private boolean nextItemIs(String match) throws IOException { _EL_   int c; _EL_   while (isWhiteSpace(c=buf.get())) { _EL_   } _EL_   for (int i=0; i < match.length(); i++) { _EL_     if (i > 0) { _EL_       c=buf.get(); _EL_     } _EL_     if (c != match.charAt(i)) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static Object deserializeObject(final byte[] objBytes,final ClassLoader loader) throws IOException, ClassNotFoundException { _EL_   ObjectInputStream objIn=null; _EL_   try { _EL_     objIn=new ClassLoaderObjectInputStream(new ByteArrayInputStream(objBytes),loader); _EL_     return objIn.readObject(); _EL_   } _EL_   finally { _EL_     close(objIn); _EL_   } _EL_ } _EL_ ', 'public IntervalImpl(int serialNum,long startIntervalDateTime,double coverageFactor,FramingFlowType intervalDataType,ISource source,IIntervalClassification intervalClassification,Version adeVersion) throws AdeInternalException { _EL_   a_adeVersion=adeVersion; _EL_   if (startIntervalDateTime < 0) { _EL_     throw new IllegalArgumentException(String.format("Interval start time must be " + "greater than 0! Failed creating new interval with parameters: serialNum=%d, " + "startIntervalDateTime=%d, coverageFactor=%s, intervalDataType=%s, source=%s, "+ "intervalClassification=%s, adeVersion=%s",serialNum,startIntervalDateTime,coverageFactor,intervalDataType,source,intervalClassification,adeVersion)); _EL_   } _EL_   m_startIntervalTime=startIntervalDateTime; _EL_   m_framingFlowType=intervalDataType; _EL_   m_serialNum=serialNum; _EL_   m_intervalClassification=intervalClassification; _EL_   if (m_intervalClassification == null) { _EL_     m_intervalClassification=IntervalClassificationEnum.REGULAR; _EL_   } _EL_   m_messageSummaryMap=new TreeMap<Integer,IMessageSummary>(); _EL_   m_endIntervalTime=m_startIntervalTime + m_framingFlowType.getDuration(); _EL_   m_source=source; _EL_   if (coverageFactor <= 0 || coverageFactor > 1) { _EL_     throw new AdeInternalException("Interval coverage factor must be between 0 (exclusive) and 1 (inclusive), but currently is: " + coverageFactor); _EL_   } _EL_   m_coverageFactor=coverageFactor; _EL_ } _EL_ ', 'public static boolean isTrue(Map<String,Object> dict,String key){ _EL_   return isTrue(dict,key,false); _EL_ } _EL_ ', 'public OutputStream bindStream(OutputStream output){ _EL_   OutputStream stream=m_streams.get(); _EL_   m_streams.set(output); _EL_   return stream; _EL_ } _EL_ ', 'private void initMapLayer(){ _EL_   float zoom=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight()); _EL_   Log.i(TAG,Float.toString(zoom)); _EL_   mapView.setCurrentZoom(zoom,0,0); _EL_   float width=mapView.getWidth() - zoom * image.getWidth(); _EL_   float height=mapView.getHeight() - zoom * image.getHeight(); _EL_   mapView.translate(width / 2,height / 2); _EL_ } _EL_ ', 'public static double sampleSkew(int size,double moment3,double sampleVariance){ _EL_   int n=size; _EL_   double s=Math.sqrt(sampleVariance); _EL_   double m3=moment3 * n; _EL_   return n * m3 / ((n - 1) * (n - 2) * s* s* s); _EL_ } _EL_ ', 'public static void evolve(Permutation p1,Permutation p2){ _EL_   int n=p1.size(); _EL_   if (n != p2.size()) { _EL_     throw new FrameworkException("permutations not same size"); _EL_   } _EL_   int cuttingPoint1=PRNG.nextInt(n); _EL_   int cuttingPoint2=PRNG.nextInt(n - 1); _EL_   if (cuttingPoint1 == cuttingPoint2) { _EL_     cuttingPoint2=n - 1; _EL_   } _EL_  else   if (cuttingPoint1 > cuttingPoint2) { _EL_     int swap=cuttingPoint1; _EL_     cuttingPoint1=cuttingPoint2; _EL_     cuttingPoint2=swap; _EL_   } _EL_   int[] parent1=p1.toArray(); _EL_   int[] parent2=p2.toArray(); _EL_   int[] offspring1=new int[n]; _EL_   int[] offspring2=new int[n]; _EL_   int[] replacement1=new int[n]; _EL_   int[] replacement2=new int[n]; _EL_   Arrays.fill(replacement1,-1); _EL_   Arrays.fill(replacement2,-1); _EL_   for (int i=cuttingPoint1; i <= cuttingPoint2; i++) { _EL_     offspring1[i]=parent2[i]; _EL_     offspring2[i]=parent1[i]; _EL_     replacement1[parent2[i]]=parent1[i]; _EL_     replacement2[parent1[i]]=parent2[i]; _EL_   } _EL_   for (int i=0; i < n; i++) { _EL_     if ((i < cuttingPoint1) || (i > cuttingPoint2)) { _EL_       int n1=parent1[i]; _EL_       int m1=replacement1[n1]; _EL_       int n2=parent2[i]; _EL_       int m2=replacement2[n2]; _EL_       while (m1 != -1) { _EL_         n1=m1; _EL_         m1=replacement1[m1]; _EL_       } _EL_       while (m2 != -1) { _EL_         n2=m2; _EL_         m2=replacement2[m2]; _EL_       } _EL_       offspring1[i]=n1; _EL_       offspring2[i]=n2; _EL_     } _EL_   } _EL_   p1.fromArray(offspring1); _EL_   p2.fromArray(offspring2); _EL_ } _EL_ ', 'public void finished(long chainLength){ _EL_   currentState=chainLength; _EL_   if (loggers != null) { _EL_     for (    Logger logger : loggers) { _EL_       logger.log(currentState); _EL_       logger.stopLogging(); _EL_     } _EL_   } _EL_   if (showOperatorAnalysis) { _EL_     showOperatorAnalysis(System.out); _EL_   } _EL_   if (operatorAnalysisFile != null) { _EL_     try { _EL_       PrintStream out=new PrintStream(new FileOutputStream(operatorAnalysisFile)); _EL_       showOperatorAnalysis(out); _EL_       out.flush(); _EL_       out.close(); _EL_     } _EL_  catch (    IOException e) { _EL_       e.printStackTrace(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean hasDelay(){ _EL_   return delay != -1; _EL_ } _EL_ ', 'void pushSpaceHandling(Attributes attrs) throws org.xml.sax.SAXParseException { _EL_   String value=attrs.getValue("xml:space"); _EL_   if (null == value) { _EL_     m_spacePreserveStack.push(m_spacePreserveStack.peekOrFalse()); _EL_   } _EL_  else   if (value.equals("preserve")) { _EL_     m_spacePreserveStack.push(true); _EL_   } _EL_  else   if (value.equals("default")) { _EL_     m_spacePreserveStack.push(false); _EL_   } _EL_  else { _EL_     SAXSourceLocator locator=getLocator(); _EL_     ErrorListener handler=m_stylesheetProcessor.getErrorListener(); _EL_     try { _EL_       handler.error(new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_ILLEGAL_XMLSPACE_VALUE,null),locator)); _EL_     } _EL_  catch (    TransformerException te) { _EL_       throw new org.xml.sax.SAXParseException(te.getMessage(),locator,te); _EL_     } _EL_     m_spacePreserveStack.push(m_spacePreserveStack.peek()); _EL_   } _EL_ } _EL_ ', 'protected void positiveClose(){ _EL_   freeContent(); _EL_ } _EL_ ', 'public InputStreamReader(java.io.InputStream is,java.lang.String enc) throws java.io.UnsupportedEncodingException { _EL_   internal=is; _EL_   this.enc=enc.intern(); _EL_ } _EL_ ', 'public int serverDelivery(Object message,Object consumer,int deliveryCount) throws Exception { _EL_   ProtonServerSenderContext protonSender=serverSenders.get(consumer); _EL_   if (protonSender != null) { _EL_     return protonSender.deliverMessage(message,deliveryCount); _EL_   } _EL_   return 0; _EL_ } _EL_ ', 'public static String decode(AbstractMessage msg,Boolean ext,int header){ _EL_   if (ext == false) { _EL_     return decode(msg); _EL_   } _EL_   return "Bootloader Message Type: " + header; _EL_ } _EL_ ', 'private Instance votedReclassifyExample(Instance example) throws Exception { _EL_   int classVotes[]=new int[getNumClasses()]; _EL_   for (int i=0; i < classVotes.length; i++) { _EL_     classVotes[i]=0; _EL_   } _EL_   for (Enumeration<RuleList> e=new WekaEnumeration<RuleList>(m_DecisionList); e.hasMoreElements(); ) { _EL_     RuleList rl=e.nextElement(); _EL_     int classValue=(int)rl.classifyInstance(example); _EL_     if (classValue >= 0) { _EL_       classVotes[classValue]++; _EL_     } _EL_   } _EL_   int maxVote=0; _EL_   int vote=-1; _EL_   for (int i=0; i < classVotes.length; i++) { _EL_     if (classVotes[i] > maxVote) { _EL_       maxVote=classVotes[i]; _EL_       vote=i; _EL_     } _EL_   } _EL_   if (vote >= 0) { _EL_     example.setClassValue(vote); _EL_   } _EL_  else { _EL_     throw new Exception("Error in instance classification."); _EL_   } _EL_   return example; _EL_ } _EL_ ', 'public DTMAxisIterator cloneIterator(){ _EL_   _isRestartable=false; _EL_   try { _EL_     final PrecedingIterator clone=(PrecedingIterator)super.clone(); _EL_     final int[] stackCopy=new int[_stack.length]; _EL_     System.arraycopy(_stack,0,stackCopy,0,_stack.length); _EL_     clone._stack=stackCopy; _EL_     return clone; _EL_   } _EL_  catch (  CloneNotSupportedException e) { _EL_     throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ITERATOR_CLONE_NOT_SUPPORTED,null)); _EL_   } _EL_ } _EL_ ', 'private boolean keyChainContainsPrivateKey(Collection<ECKey> keyChain,ECKey keyToAdd){ _EL_   if (keyChain == null || keyToAdd == null) { _EL_     return false; _EL_   } _EL_  else { _EL_     for (    ECKey loopKey : keyChain) { _EL_       if (Arrays.equals(keyToAdd.getPrivKeyBytes(),loopKey.getPrivKeyBytes())) { _EL_         return true; _EL_       } _EL_     } _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public RotationMatrixBuilder withThetas(double theta){ _EL_   for (  Plane plane : planes) { _EL_     plane.setTheta(theta); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'private void writeUserRegistry(LocalContainer container,File configDir,Map<String,String> users,Map<String,List<String>> groups) throws IOException { _EL_   File usersXML=new File(configDir,"cargo-users.xml"); _EL_   PrintStream writer=ServerConfigUtils.open(usersXML); _EL_   writer.println("  <basicRegistry id=\\"basic\\">"); _EL_   for (  Map.Entry<String,String> user : users.entrySet()) { _EL_     writer.print("    <user name=\\""); _EL_     writer.print(user.getKey()); _EL_     writer.print("\\" password=\\""); _EL_     writer.print(user.getValue()); _EL_     writer.println("\\"/>"); _EL_   } _EL_   for (  Map.Entry<String,List<String>> group : groups.entrySet()) { _EL_     writer.print("    <group name=\\""); _EL_     writer.print(group.getKey()); _EL_     writer.println("\\">"); _EL_     for (    String member : group.getValue()) { _EL_       writer.print("      <member name=\\""); _EL_       writer.print(member); _EL_       writer.println("\\"/>"); _EL_     } _EL_     writer.println("    </group>"); _EL_   } _EL_   writer.println("  </basicRegistry>"); _EL_   ServerConfigUtils.close(writer); _EL_ } _EL_ ', 'public static String valueOf(double value){ _EL_   return Double.toString(value); _EL_ } _EL_ ', '@GenIgnore static Record createRecord(String name,String address,Class itf,JsonObject metadata){ _EL_   return createRecord(name,address,itf.getName(),metadata); _EL_ } _EL_ ', 'public StopwatchCPU(){ _EL_   threadTimer=ManagementFactory.getThreadMXBean(); _EL_   start=threadTimer.getCurrentThreadCpuTime(); _EL_ } _EL_ ', 'public synchronized byte[] lookupAudio(String inputtype,String locale,String voice,String outputparams,String style,String effects,String inputtext) throws SQLException { _EL_   if (inputtype == null || locale == null || voice == null || inputtext == null) { _EL_     throw new NullPointerException("Null argument"); _EL_   } _EL_   byte[] audio=null; _EL_   String query="Select outputaudio FROM marycache WHERE inputtype = \'" + inputtype + "\' AND outputtype = \'AUDIO\' AND locale = \'"+ locale+ "\' AND voice = \'"+ voice+ "\' AND outputparams = \'"+ outputparams+ "\' AND style = \'"+ style+ "\' AND effects = \'"+ effects+ "\' AND inputtext = ?"; _EL_   PreparedStatement st=connection.prepareStatement(query); _EL_   st.setString(1,inputtext); _EL_   ResultSet results=st.executeQuery(); _EL_   if (results.next()) { _EL_     audio=results.getBytes(1); _EL_   } _EL_   return audio; _EL_ } _EL_ ', 'public void addCondition(final Condition condition){ _EL_   conditions.add(condition); _EL_   condition.setId(conditionIdCounter++); _EL_ } _EL_ ', 'public static byte[] readBytesFromByteBuffer(ByteBuffer byteBuffer){ _EL_   byte[] buffer=new byte[byteBuffer.remaining()]; _EL_   byteBuffer.get(buffer); _EL_   return buffer; _EL_ } _EL_ ', 'public static void log(final String msg,final Throwable t){ _EL_   if (DEBUG) { _EL_     log(msg); _EL_     t.printStackTrace(System.out); _EL_   } _EL_ } _EL_ ', 'public NSData(File file) throws IOException { _EL_   bytes=new byte[(int)file.length()]; _EL_   RandomAccessFile raf=new RandomAccessFile(file,"r"); _EL_   raf.read(bytes); _EL_   raf.close(); _EL_ } _EL_ ', 'public int cardinality(){ _EL_   int sum=0; _EL_   for (  long l : this.data)   sum+=Long.bitCount(l); _EL_   return sum; _EL_ } _EL_ ', 'private String deEscapeLiteral(String lit){ _EL_   return lit.replaceAll("\\\\\\\\\\"","\\""); _EL_ } _EL_ ', 'private static URI cookieUri(URI uri,HttpCookie cookie){ _EL_   URI cookieUri=uri; _EL_   if (cookie.getDomain() != null) { _EL_     String domain=cookie.getDomain(); _EL_     if (domain.charAt(0) == \'.\') { _EL_       domain=domain.substring(1); _EL_     } _EL_     try { _EL_       cookieUri=new URI(uri.getScheme() == null ? "http" : uri.getScheme(),domain,cookie.getPath() == null ? "/" : cookie.getPath(),null); _EL_     } _EL_  catch (    URISyntaxException e) { _EL_       Log.w(TAG,e); _EL_     } _EL_   } _EL_   return cookieUri; _EL_ } _EL_ ', 'public static void i(String msg,Object... args){ _EL_   if (!allowI)   return; _EL_   StackTraceElement caller=getCallerStackTraceElement(); _EL_   String tag=generateTag(caller); _EL_   if (sLevel > LEVEL_INFO) { _EL_     return; _EL_   } _EL_   if (args.length > 0) { _EL_     msg=String.format(msg,args); _EL_   } _EL_   Log.i(tag,msg); _EL_ } _EL_ ', 'public static <V>boolean addListNotNullValue(List<V> sourceList,V value){ _EL_   return (sourceList != null && value != null) ? sourceList.add(value) : false; _EL_ } _EL_ ', 'public DNewKeyStoreType(JFrame parent){ _EL_   super(parent,Dialog.ModalityType.DOCUMENT_MODAL); _EL_   setTitle(res.getString("DNewKeyStoreType.Title")); _EL_   initComponents(); _EL_ } _EL_ ', 'protected void sprint(long longField){ _EL_   sprint(String.valueOf(longField)); _EL_ } _EL_ ', 'private String substituteSubString(String input,String find,String replace){ _EL_   int find_length=find.length(); _EL_   int replace_length=replace.length(); _EL_   StringBuilder output=new StringBuilder(input); _EL_   int index=input.indexOf(find); _EL_   int outputOffset=0; _EL_   while (index > -1) { _EL_     output.replace(index + outputOffset,index + outputOffset + find_length,replace); _EL_     outputOffset=outputOffset + (replace_length - find_length); _EL_     index=input.indexOf(find,index + find_length); _EL_   } _EL_   return output.toString(); _EL_ } _EL_ ', 'public void removeListener(final L listener){ _EL_   Validate.notNull(listener,"Listener object cannot be null."); _EL_   listeners.remove(listener); _EL_ } _EL_ ', 'private int clampMag(int value,int absMin,int absMax){ _EL_   final int absValue=Math.abs(value); _EL_   if (absValue < absMin)   return 0; _EL_   if (absValue > absMax)   return value > 0 ? absMax : -absMax; _EL_   return value; _EL_ } _EL_ ', 'private static DecoderResult createDecoderResultFromAmbiguousValues(int ecLevel,int[] codewords,int[] erasureArray,int[] ambiguousIndexes,int[][] ambiguousIndexValues) throws FormatException, ChecksumException { _EL_   int[] ambiguousIndexCount=new int[ambiguousIndexes.length]; _EL_   int tries=100; _EL_   while (tries-- > 0) { _EL_     for (int i=0; i < ambiguousIndexCount.length; i++) { _EL_       codewords[ambiguousIndexes[i]]=ambiguousIndexValues[i][ambiguousIndexCount[i]]; _EL_     } _EL_     try { _EL_       return decodeCodewords(codewords,ecLevel,erasureArray); _EL_     } _EL_  catch (    ChecksumException ignored) { _EL_     } _EL_     if (ambiguousIndexCount.length == 0) { _EL_       throw ChecksumException.getChecksumInstance(); _EL_     } _EL_     for (int i=0; i < ambiguousIndexCount.length; i++) { _EL_       if (ambiguousIndexCount[i] < ambiguousIndexValues[i].length - 1) { _EL_         ambiguousIndexCount[i]++; _EL_         break; _EL_       } _EL_  else { _EL_         ambiguousIndexCount[i]=0; _EL_         if (i == ambiguousIndexCount.length - 1) { _EL_           throw ChecksumException.getChecksumInstance(); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   throw ChecksumException.getChecksumInstance(); _EL_ } _EL_ ', 'public int predBlockIndexForSourcesIndex(int sourcesIndex){ _EL_   return operands.get(sourcesIndex).blockIndex; _EL_ } _EL_ ', 'public LockableFileWriter(File file,Charset encoding,boolean append,String lockDir) throws IOException { _EL_   super(); _EL_   file=file.getAbsoluteFile(); _EL_   if (file.getParentFile() != null) { _EL_     FileUtils.forceMkdir(file.getParentFile()); _EL_   } _EL_   if (file.isDirectory()) { _EL_     throw new IOException("File specified is a directory"); _EL_   } _EL_   if (lockDir == null) { _EL_     lockDir=System.getProperty("java.io.tmpdir"); _EL_   } _EL_   File lockDirFile=new File(lockDir); _EL_   FileUtils.forceMkdir(lockDirFile); _EL_   testLockDir(lockDirFile); _EL_   lockFile=new File(lockDirFile,file.getName() + LCK); _EL_   createLock(); _EL_   out=initWriter(file,encoding,append); _EL_ } _EL_ ', 'void appendProgramDescription(final WrappingStringBuilder wb){ _EL_   if (!mProgramDescription.equals("")) { _EL_     wb.append(LS); _EL_     wb.setWrapIndent(0); _EL_     wb.wrapTextWithNewLines(mProgramDescription); _EL_   } _EL_ } _EL_ ', 'public static byte[] decode(String s) throws java.io.IOException { _EL_   return decode(s,NO_OPTIONS); _EL_ } _EL_ ', '@SuppressWarnings("deprecation") private static final URL toURL(String location,boolean file){ _EL_   if (file) { _EL_     File f=new File(location); _EL_     if (f.exists()) { _EL_       try { _EL_         return f.toURL(); _EL_       } _EL_  catch (      MalformedURLException murl) { _EL_         return null; _EL_       } _EL_     } _EL_  else { _EL_       return null; _EL_     } _EL_   } _EL_  else { _EL_     return getURL(location); _EL_   } _EL_ } _EL_ ', 'protected Object parseValue(String string){ _EL_   int openParen=string.indexOf("("); _EL_   String type=string.substring(0,openParen); _EL_   String value=string.substring(openParen + 1,string.length() - 1); _EL_   if (type.equals("String")) { _EL_     return value; _EL_   } _EL_  else   if (type.equals("Float")) { _EL_     return new Float(Float.parseFloat(value)); _EL_   } _EL_  else   if (type.equals("Integer")) { _EL_     return new Integer(Integer.parseInt(value)); _EL_   } _EL_  else   if (type.equals("List")) { _EL_     StringTokenizer tok=new StringTokenizer(value,","); _EL_     int size=tok.countTokens(); _EL_     int[] values=new int[size]; _EL_     for (int i=0; i < size; i++) { _EL_       float fval=Float.parseFloat(tok.nextToken()); _EL_       values[i]=Math.round(fval); _EL_     } _EL_     return values; _EL_   } _EL_  else { _EL_     throw new Error("Unknown type: " + type); _EL_   } _EL_ } _EL_ ', "public static String toUpperCase(String string){ _EL_   boolean changed=false; _EL_   char[] chars=string.toCharArray(); _EL_   for (int i=0; i != chars.length; i++) { _EL_     char ch=chars[i]; _EL_     if ('a' <= ch && 'z' >= ch) { _EL_       changed=true; _EL_       chars[i]=(char)(ch - 'a' + 'A'); _EL_     } _EL_   } _EL_   if (changed) { _EL_     return new String(chars); _EL_   } _EL_   return string; _EL_ } _EL_ ", 'public void makeClass(String str,boolean caseless){ _EL_   for (int i=0; i < str.length(); i++)   makeClass(str.charAt(i),caseless); _EL_ } _EL_ ', 'public Token nextRegex(Pattern pattern){ _EL_   if (!hasNextRegex(pattern))   throw new IllegalStateException("No more occurrences found!"); _EL_   Matcher matcher=anyMentionPattern.matcher(remaining); _EL_   if (!matcher.find())   throw new IllegalStateException("Couldn\'t find any matches!"); _EL_   final int start=currentPosition + matcher.start(); _EL_   final int end=currentPosition + matcher.end(); _EL_   stepTo(end); _EL_   return new Token(this,start,end); _EL_ } _EL_ ', 'public boolean removeNode(ServiceNode node){ _EL_   try { _EL_     return nodes.remove(node); _EL_   } _EL_  catch (  Exception e) { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public void execute() throws IOException { _EL_   String key="mqtt-" + (System.currentTimeMillis() / 1000); _EL_   String b64Key=Base64.encode(key); _EL_   sendHandshakeRequest(b64Key); _EL_   receiveHandshakeResponse(b64Key); _EL_ } _EL_ ', 'public void calculateMin(double min){ _EL_   if (this.min == -1) { _EL_     this.min=min; _EL_   } _EL_  else { _EL_     this.min=Math.min(this.min,min); _EL_   } _EL_ } _EL_ ', 'private void emitUntil(@Nonnegative int taskCountAllowed) throws IOException { _EL_   try { _EL_     while (emitQueue.size() > taskCountAllowed) { _EL_       Future<byte[]> future=emitQueue.remove(); _EL_       byte[] toWrite=future.get(); _EL_       blockSizes.add(toWrite.length); _EL_       out.write(toWrite); _EL_     } _EL_     tryEmit(); _EL_   } _EL_  catch (  ExecutionException e) { _EL_     throw new IOException(e); _EL_   } _EL_ catch (  InterruptedException e) { _EL_     throw new InterruptedIOException(); _EL_   } _EL_ } _EL_ ', 'void xrot(double theta){ _EL_   theta*=(pi / 180); _EL_   double ct=Math.cos(theta); _EL_   double st=Math.sin(theta); _EL_   float Nyx=(float)(yx * ct + zx * st); _EL_   float Nyy=(float)(yy * ct + zy * st); _EL_   float Nyz=(float)(yz * ct + zz * st); _EL_   float Nyo=(float)(yo * ct + zo * st); _EL_   float Nzx=(float)(zx * ct - yx * st); _EL_   float Nzy=(float)(zy * ct - yy * st); _EL_   float Nzz=(float)(zz * ct - yz * st); _EL_   float Nzo=(float)(zo * ct - yo * st); _EL_   yo=Nyo; _EL_   yx=Nyx; _EL_   yy=Nyy; _EL_   yz=Nyz; _EL_   zo=Nzo; _EL_   zx=Nzx; _EL_   zy=Nzy; _EL_   zz=Nzz; _EL_ } _EL_ ', 'private static CharHandler parseUnprintableExtCodes(String[] codeStrings){ _EL_   if (codeStrings.length != 1) { _EL_     throw new IllegalStateException("Unexpected code strings " + Arrays.asList(codeStrings)); _EL_   } _EL_   byte[] bytes=codesToBytes(codeStrings[0],true); _EL_   if (bytes.length != 1) { _EL_     throw new IllegalStateException("Unexpected code strings " + Arrays.asList(codeStrings)); _EL_   } _EL_   return new UnprintableExtCharHandler(bytes[0]); _EL_ } _EL_ ', 'private int measureHeight(int measureSpec){ _EL_   float result; _EL_   int specMode=MeasureSpec.getMode(measureSpec); _EL_   int specSize=MeasureSpec.getSize(measureSpec); _EL_   if (specMode == MeasureSpec.EXACTLY) { _EL_     result=specSize; _EL_   } _EL_  else { _EL_     result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom(); _EL_     if (specMode == MeasureSpec.AT_MOST) { _EL_       result=Math.min(result,specSize); _EL_     } _EL_   } _EL_   return (int)Math.ceil(result); _EL_ } _EL_ ', 'public static boolean isNull(URI id){ _EL_   return (id == null) || NULL_URI.equals(id); _EL_ } _EL_ ', 'public void updatePendingList(){ _EL_   while (mPendingList.size() > 0 && activeListHasRoom()) { _EL_     DownloadInfoRunnable pending=mPendingList.get(0); _EL_     pending.changeStatusState(new ActiveState(pending)); _EL_   } _EL_ } _EL_ ', '@SuppressWarnings("unused") public static float valueRangeLimit(float value,float startValue,float endValue){ _EL_   if (value < Math.min(startValue,endValue))   return Math.min(startValue,endValue); _EL_   if (value > Math.max(startValue,endValue))   return Math.max(startValue,endValue); _EL_   return value; _EL_ } _EL_ ', 'protected void createTitle(String title){ _EL_   String newTitle; _EL_   newTitle="Weka " + new Version(); _EL_   if (title.length() != 0) { _EL_     newTitle+=" - " + title; _EL_   } _EL_   setTitle(newTitle); _EL_ } _EL_ ', 'public void deleteItem(int position){ _EL_   if (!isDataListEmpty() && position >= 0 && position < mDataList.size()) { _EL_     mDataList.remove(position); _EL_     notifyItemRemoved(position); _EL_   } _EL_ } _EL_ ', 'private int calculateGraidentChannel(int sourceChannel,int destChannel,int distance,int offset){ _EL_   if (sourceChannel == destChannel) { _EL_     return sourceChannel; _EL_   } _EL_   float ratio=((float)offset) / ((float)distance); _EL_   int pos=(int)(Math.abs(sourceChannel - destChannel) * ratio); _EL_   if (sourceChannel > destChannel) { _EL_     return sourceChannel - pos; _EL_   } _EL_  else { _EL_     return sourceChannel + pos; _EL_   } _EL_ } _EL_ ', 'private void applyImageMatrix(float width,float height,boolean center,boolean animate){ _EL_   if (mBitmap != null && width > 0 && height > 0) { _EL_     mImageMatrix.reset(); _EL_     mImageMatrix.postTranslate((width - mBitmap.getWidth()) / 2,(height - mBitmap.getHeight()) / 2); _EL_     mapImagePointsByImageMatrix(); _EL_     if (mDegreesRotated > 0) { _EL_       mImageMatrix.postRotate(mDegreesRotated,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints)); _EL_       mapImagePointsByImageMatrix(); _EL_     } _EL_     float scale=Math.min(width / BitmapUtils.getRectWidth(mImagePoints),height / BitmapUtils.getRectHeight(mImagePoints)); _EL_     if (mScaleType == ScaleType.FIT_CENTER || (mScaleType == ScaleType.CENTER_INSIDE && scale < 1) || (scale > 1 && mAutoZoomEnabled)) { _EL_       mImageMatrix.postScale(scale,scale,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints)); _EL_       mapImagePointsByImageMatrix(); _EL_     } _EL_     mImageMatrix.postScale(mZoom,mZoom,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints)); _EL_     mapImagePointsByImageMatrix(); _EL_     RectF cropRect=mCropOverlayView.getCropWindowRect(); _EL_     cropRect.offset(-mZoomOffsetX * mZoom,-mZoomOffsetY * mZoom); _EL_     if (center) { _EL_       mZoomOffsetX=width > BitmapUtils.getRectWidth(mImagePoints) ? 0 : Math.max(Math.min(width / 2 - cropRect.centerX(),-BitmapUtils.getRectLeft(mImagePoints)),getWidth() - BitmapUtils.getRectRight(mImagePoints)) / mZoom; _EL_       mZoomOffsetY=height > BitmapUtils.getRectHeight(mImagePoints) ? 0 : Math.max(Math.min(height / 2 - cropRect.centerY(),-BitmapUtils.getRectTop(mImagePoints)),getHeight() - BitmapUtils.getRectBottom(mImagePoints)) / mZoom; _EL_     } _EL_  else { _EL_       mZoomOffsetX=Math.min(Math.max(mZoomOffsetX * mZoom,-cropRect.left),-cropRect.right + width) / mZoom; _EL_       mZoomOffsetY=Math.min(Math.max(mZoomOffsetY * mZoom,-cropRect.top),-cropRect.bottom + height) / mZoom; _EL_     } _EL_     mImageMatrix.postTranslate(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom); _EL_     cropRect.offset(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom); _EL_     mCropOverlayView.setCropWindowRect(cropRect); _EL_     mapImagePointsByImageMatrix(); _EL_     if (animate) { _EL_       mAnimation.setEndState(mImagePoints,mImageMatrix); _EL_       mImageView.startAnimation(mAnimation); _EL_     } _EL_  else { _EL_       mImageView.setImageMatrix(mImageMatrix); _EL_     } _EL_     updateImageBounds(false); _EL_   } _EL_ } _EL_ ', 'public static void addStartupListener(StartUpListener s){ _EL_   m_StartupListeners.add(s); _EL_ } _EL_ ', 'public static void closeQuiet(@Nullable SelectionKey rsrc){ _EL_   if (rsrc != null)   closeQuiet(rsrc.channel()); _EL_ } _EL_ ', 'private static Key createDESKey(byte[] bytes,int offset){ _EL_   byte[] keyBytes=new byte[7]; _EL_   System.arraycopy(bytes,offset,keyBytes,0,7); _EL_   byte[] material=new byte[8]; _EL_   material[0]=keyBytes[0]; _EL_   material[1]=(byte)(keyBytes[0] << 7 | (keyBytes[1] & 0xff) >>> 1); _EL_   material[2]=(byte)(keyBytes[1] << 6 | (keyBytes[2] & 0xff) >>> 2); _EL_   material[3]=(byte)(keyBytes[2] << 5 | (keyBytes[3] & 0xff) >>> 3); _EL_   material[4]=(byte)(keyBytes[3] << 4 | (keyBytes[4] & 0xff) >>> 4); _EL_   material[5]=(byte)(keyBytes[4] << 3 | (keyBytes[5] & 0xff) >>> 5); _EL_   material[6]=(byte)(keyBytes[5] << 2 | (keyBytes[6] & 0xff) >>> 6); _EL_   material[7]=(byte)(keyBytes[6] << 1); _EL_   oddParity(material); _EL_   return new SecretKeySpec(material,"DES"); _EL_ } _EL_ ', 'static void checkDesc(final String desc,final boolean canBeVoid){ _EL_   int end=checkDesc(desc,0,canBeVoid); _EL_   if (end != desc.length()) { _EL_     throw new IllegalArgumentException("Invalid descriptor: " + desc); _EL_   } _EL_ } _EL_ ', 'protected JsOutput newJsOutput(Module m) throws IOException { _EL_   return new JsOutput(m,isCompilingLanguageModule()); _EL_ } _EL_ ', 'private boolean scanExpr(SymbolTable symbolTable,Tokens tokens,String data,int currentOffset,int endOffset) throws XNIException { _EL_   int ch; _EL_   int openParen=0; _EL_   int closeParen=0; _EL_   int nameOffset, dataOffset; _EL_   boolean isQName=false; _EL_   String name=null; _EL_   String prefix=null; _EL_   String schemeData=null; _EL_   StringBuffer schemeDataBuff=new StringBuffer(); _EL_   while (true) { _EL_     if (currentOffset == endOffset) { _EL_       break; _EL_     } _EL_     ch=data.charAt(currentOffset); _EL_     while (ch == \' \' || ch == 0x0A || ch == 0x09 || ch == 0x0D) { _EL_       if (++currentOffset == endOffset) { _EL_         break; _EL_       } _EL_       ch=data.charAt(currentOffset); _EL_     } _EL_     if (currentOffset == endOffset) { _EL_       break; _EL_     } _EL_     byte chartype=(ch >= 0x80) ? CHARTYPE_NONASCII : fASCIICharMap[ch]; _EL_ switch (chartype) { _EL_ case CHARTYPE_OPEN_PAREN: _EL_       addToken(tokens,Tokens.XPTRTOKEN_OPEN_PAREN); _EL_     openParen++; _EL_   ++currentOffset; _EL_ break; _EL_ case CHARTYPE_CLOSE_PAREN: _EL_ addToken(tokens,Tokens.XPTRTOKEN_CLOSE_PAREN); _EL_ closeParen++; _EL_ ++currentOffset; _EL_ break; _EL_ case CHARTYPE_CARRET: _EL_ case CHARTYPE_COLON: _EL_ case CHARTYPE_DIGIT: _EL_ case CHARTYPE_EQUAL: _EL_ case CHARTYPE_LETTER: _EL_ case CHARTYPE_MINUS: _EL_ case CHARTYPE_NONASCII: _EL_ case CHARTYPE_OTHER: _EL_ case CHARTYPE_PERIOD: _EL_ case CHARTYPE_SLASH: _EL_ case CHARTYPE_UNDERSCORE: _EL_ case CHARTYPE_WHITESPACE: _EL_ if (openParen == 0) { _EL_ nameOffset=currentOffset; _EL_ currentOffset=scanNCName(data,endOffset,currentOffset); _EL_ if (currentOffset == nameOffset) { _EL_ reportError("InvalidShortHandPointer",new Object[]{data}); _EL_ return false; _EL_ } _EL_ if (currentOffset < endOffset) { _EL_ ch=data.charAt(currentOffset); _EL_ } _EL_  else { _EL_ ch=-1; _EL_ } _EL_ name=symbolTable.addSymbol(data.substring(nameOffset,currentOffset)); _EL_ prefix=XMLSymbols.EMPTY_STRING; _EL_ if (ch == \':\') { _EL_ if (++currentOffset == endOffset) { _EL_ return false; _EL_ } _EL_ ch=data.charAt(currentOffset); _EL_ prefix=name; _EL_ nameOffset=currentOffset; _EL_ currentOffset=scanNCName(data,endOffset,currentOffset); _EL_ if (currentOffset == nameOffset) { _EL_ return false; _EL_ } _EL_ if (currentOffset < endOffset) { _EL_ ch=data.charAt(currentOffset); _EL_ } _EL_  else { _EL_ ch=-1; _EL_ } _EL_ isQName=true; _EL_ name=symbolTable.addSymbol(data.substring(nameOffset,currentOffset)); _EL_ } _EL_ if (currentOffset != endOffset) { _EL_ addToken(tokens,Tokens.XPTRTOKEN_SCHEMENAME); _EL_ tokens.addToken(prefix); _EL_ tokens.addToken(name); _EL_ isQName=false; _EL_ } _EL_  else if (currentOffset == endOffset) { _EL_ addToken(tokens,Tokens.XPTRTOKEN_SHORTHAND); _EL_ tokens.addToken(name); _EL_ isQName=false; _EL_ } _EL_ closeParen=0; _EL_ break; _EL_ } _EL_  else if (openParen > 0 && closeParen == 0 && name != null) { _EL_ dataOffset=currentOffset; _EL_ currentOffset=scanData(data,schemeDataBuff,endOffset,currentOffset); _EL_ if (currentOffset == dataOffset) { _EL_ reportError("InvalidSchemeDataInXPointer",new Object[]{data}); _EL_ return false; _EL_ } _EL_ if (currentOffset < endOffset) { _EL_ ch=data.charAt(currentOffset); _EL_ } _EL_  else { _EL_ ch=-1; _EL_ } _EL_ schemeData=symbolTable.addSymbol(schemeDataBuff.toString()); _EL_ addToken(tokens,Tokens.XPTRTOKEN_SCHEMEDATA); _EL_ tokens.addToken(schemeData); _EL_ openParen=0; _EL_ schemeDataBuff.delete(0,schemeDataBuff.length()); _EL_ } _EL_  else { _EL_ return false; _EL_ } _EL_ } _EL_ } _EL_ return true; _EL_ } _EL_ ', 'public void addLine(int startLine,String sourceFile,int repeatCount,int outputLine,int outputIncrement){ _EL_   _lines.add(new Line(startLine,sourceFile,repeatCount,outputLine,outputIncrement)); _EL_ } _EL_ ', 'public String(StringBuffer stringbuffer){ _EL_   offset=0; _EL_ synchronized (stringbuffer) { _EL_     value=stringbuffer.shareValue(); _EL_     count=stringbuffer.length(); _EL_   } _EL_ } _EL_ ', 'public int size(){ _EL_   return all.size(); _EL_ } _EL_ ', 'public Process executeAsync(final CommandLine command,final Map<String,String> environment,final ExecuteResultHandler handler) throws IOException { _EL_   if (workingDirectory != null && !workingDirectory.exists()) { _EL_     throw new IOException(workingDirectory + " doesn\'t exist."); _EL_   } _EL_   return executeInternal(command,environment,workingDirectory,streamHandler,handler); _EL_ } _EL_ ', 'public static Range iterateToFindDomainBounds(XYDataset dataset,List visibleSeriesKeys,boolean includeInterval){ _EL_   ParamChecks.nullNotPermitted(dataset,"dataset"); _EL_   ParamChecks.nullNotPermitted(visibleSeriesKeys,"visibleSeriesKeys"); _EL_   double minimum=Double.POSITIVE_INFINITY; _EL_   double maximum=Double.NEGATIVE_INFINITY; _EL_   if (includeInterval && dataset instanceof IntervalXYDataset) { _EL_     IntervalXYDataset ixyd=(IntervalXYDataset)dataset; _EL_     Iterator iterator=visibleSeriesKeys.iterator(); _EL_     while (iterator.hasNext()) { _EL_       Comparable seriesKey=(Comparable)iterator.next(); _EL_       int series=dataset.indexOf(seriesKey); _EL_       int itemCount=dataset.getItemCount(series); _EL_       for (int item=0; item < itemCount; item++) { _EL_         double xvalue=ixyd.getXValue(series,item); _EL_         double lvalue=ixyd.getStartXValue(series,item); _EL_         double uvalue=ixyd.getEndXValue(series,item); _EL_         if (!Double.isNaN(xvalue)) { _EL_           minimum=Math.min(minimum,xvalue); _EL_           maximum=Math.max(maximum,xvalue); _EL_         } _EL_         if (!Double.isNaN(lvalue)) { _EL_           minimum=Math.min(minimum,lvalue); _EL_         } _EL_         if (!Double.isNaN(uvalue)) { _EL_           maximum=Math.max(maximum,uvalue); _EL_         } _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     Iterator iterator=visibleSeriesKeys.iterator(); _EL_     while (iterator.hasNext()) { _EL_       Comparable seriesKey=(Comparable)iterator.next(); _EL_       int series=dataset.indexOf(seriesKey); _EL_       int itemCount=dataset.getItemCount(series); _EL_       for (int item=0; item < itemCount; item++) { _EL_         double x=dataset.getXValue(series,item); _EL_         if (!Double.isNaN(x)) { _EL_           minimum=Math.min(minimum,x); _EL_           maximum=Math.max(maximum,x); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   if (minimum == Double.POSITIVE_INFINITY) { _EL_     return null; _EL_   } _EL_  else { _EL_     return new Range(minimum,maximum); _EL_   } _EL_ } _EL_ ', 'private void checkComplianceAttributes(AttrSet attrSet,boolean ignoreCompliance) throws AMException { _EL_   if (!ignoreCompliance && ComplianceServicesImpl.isComplianceUserDeletionEnabled()) { _EL_     complianceImpl.verifyAttributes(attrSet); _EL_   } _EL_ } _EL_ ', 'private void updateZoningMap(UnManagedExportMask mask,List<Initiator> initiators,List<StoragePort> storagePorts){ _EL_   ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePorts); _EL_   for (  ZoneInfo zoneInfo : zoningMap.values()) { _EL_     log.info("Found zone: {} for initiator {} and port {}",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()}); _EL_   } _EL_   mask.setZoningMap(zoningMap); _EL_ } _EL_ ', 'private boolean moveWithinSelectedRange(JTable table,int dx,int dy,ListSelectionModel rsm,ListSelectionModel csm){ _EL_   int totalCount; _EL_   int minX, maxX, minY, maxY; _EL_   boolean rs=table.getRowSelectionAllowed(); _EL_   boolean cs=table.getColumnSelectionAllowed(); _EL_   if (rs && cs) { _EL_     totalCount=table.getSelectedRowCount() * table.getSelectedColumnCount(); _EL_     minX=csm.getMinSelectionIndex(); _EL_     maxX=csm.getMaxSelectionIndex(); _EL_     minY=rsm.getMinSelectionIndex(); _EL_     maxY=rsm.getMaxSelectionIndex(); _EL_   } _EL_  else   if (rs) { _EL_     totalCount=table.getSelectedRowCount(); _EL_     minX=0; _EL_     maxX=table.getColumnCount() - 1; _EL_     minY=rsm.getMinSelectionIndex(); _EL_     maxY=rsm.getMaxSelectionIndex(); _EL_   } _EL_  else   if (cs) { _EL_     totalCount=table.getSelectedColumnCount(); _EL_     minX=csm.getMinSelectionIndex(); _EL_     maxX=csm.getMaxSelectionIndex(); _EL_     minY=0; _EL_     maxY=table.getRowCount() - 1; _EL_   } _EL_  else { _EL_     totalCount=0; _EL_     minX=maxX=minY=maxY=0; _EL_   } _EL_   boolean stayInSelection; _EL_   if (totalCount == 0 || (totalCount == 1 && table.isCellSelected(leadRow,leadColumn))) { _EL_     stayInSelection=false; _EL_     maxX=table.getColumnCount() - 1; _EL_     maxY=table.getRowCount() - 1; _EL_     minX=Math.min(0,maxX); _EL_     minY=Math.min(0,maxY); _EL_   } _EL_  else { _EL_     stayInSelection=true; _EL_   } _EL_   if (dy == 1 && leadColumn == -1) { _EL_     leadColumn=minX; _EL_     leadRow=-1; _EL_   } _EL_  else   if (dx == 1 && leadRow == -1) { _EL_     leadRow=minY; _EL_     leadColumn=-1; _EL_   } _EL_  else   if (dy == -1 && leadColumn == -1) { _EL_     leadColumn=maxX; _EL_     leadRow=maxY + 1; _EL_   } _EL_  else   if (dx == -1 && leadRow == -1) { _EL_     leadRow=maxY; _EL_     leadColumn=maxX + 1; _EL_   } _EL_   leadRow=Math.min(Math.max(leadRow,minY - 1),maxY + 1); _EL_   leadColumn=Math.min(Math.max(leadColumn,minX - 1),maxX + 1); _EL_   do { _EL_     calcNextPos(dx,minX,maxX,dy,minY,maxY); _EL_   } _EL_  while (stayInSelection && !table.isCellSelected(leadRow,leadColumn)); _EL_   return stayInSelection; _EL_ } _EL_ ', 'private double[][] xPrime(int t){ _EL_   double[][] x=new double[1][getNumLags() * numVars]; _EL_   for (int i=0; i < getNumLags(); i++) { _EL_     double[][] yPrime=yPrime(t - i - 1); _EL_     System.arraycopy(yPrime[0],0,x[0],i * numVars,numVars); _EL_   } _EL_   return x; _EL_ } _EL_ ', 'public int size(){ _EL_   return components.size(); _EL_ } _EL_ ', 'public static PublicKeySelector fromString(String type){ _EL_   if (type != null) { _EL_     for (    PublicKeySelector keySelector : PublicKeySelector.values()) { _EL_       if (type.equalsIgnoreCase(keySelector.type)) { _EL_         return keySelector; _EL_       } _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static SortedMap<Integer,Integer> generateSortedTagMap(String[] partitions,Map<String,String> tags){ _EL_   final SortedMap<Integer,Integer> tagHashMap=new TreeMap<Integer,Integer>(); _EL_   for (  Map.Entry<String,String> entry : tags.entrySet()) { _EL_     final String tagName=entry.getKey(); _EL_     final String tagValue=entry.getValue(); _EL_     if (tagValue == null || isPartitionTag(partitions,tagName))     continue; _EL_     tagHashMap.put(tagName.hashCode(),tagValue.hashCode()); _EL_   } _EL_   return tagHashMap; _EL_ } _EL_ ', 'protected static String shortenClassname(String nam,char c){ _EL_   final int lastdot=nam.lastIndexOf(c); _EL_   if (lastdot >= 0) { _EL_     nam=nam.substring(lastdot + 1); _EL_   } _EL_   return nam; _EL_ } _EL_ ', 'public void add(T graphic){ _EL_ synchronized (mLock) { _EL_     mGraphics.add(graphic); _EL_   } _EL_   postInvalidate(); _EL_ } _EL_ ', '@Override public void flip(X11ComponentPeer peer,Component target,VolatileImage xBackBuffer,int x1,int y1,int x2,int y2,BufferCapabilities.FlipContents flipAction){ _EL_   if (flipAction == BufferCapabilities.FlipContents.COPIED) { _EL_     SurfaceManager vsm=SurfaceManager.getManager(xBackBuffer); _EL_     SurfaceData sd=vsm.getPrimarySurfaceData(); _EL_     if (sd instanceof GLXVSyncOffScreenSurfaceData) { _EL_       GLXVSyncOffScreenSurfaceData vsd=(GLXVSyncOffScreenSurfaceData)sd; _EL_       SurfaceData bbsd=vsd.getFlipSurface(); _EL_       Graphics2D bbg=new SunGraphics2D(bbsd,Color.black,Color.white,null); _EL_       try { _EL_         bbg.drawImage(xBackBuffer,0,0,null); _EL_       } _EL_   finally { _EL_         bbg.dispose(); _EL_       } _EL_     } _EL_  else { _EL_       Graphics g=peer.getGraphics(); _EL_       try { _EL_         g.drawImage(xBackBuffer,x1,y1,x2,y2,x1,y1,x2,y2,null); _EL_       } _EL_   finally { _EL_         g.dispose(); _EL_       } _EL_       return; _EL_     } _EL_   } _EL_  else   if (flipAction == BufferCapabilities.FlipContents.PRIOR) { _EL_     return; _EL_   } _EL_   OGLSurfaceData.swapBuffers(peer.getContentWindow()); _EL_   if (flipAction == BufferCapabilities.FlipContents.BACKGROUND) { _EL_     Graphics g=xBackBuffer.getGraphics(); _EL_     try { _EL_       g.setColor(target.getBackground()); _EL_       g.fillRect(0,0,xBackBuffer.getWidth(),xBackBuffer.getHeight()); _EL_     } _EL_   finally { _EL_       g.dispose(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean addProperty(OwlProperty property){ _EL_   property.addRestriction(this); _EL_   return properties.add(property); _EL_ } _EL_ ', 'public static GoogleAnalytics initialiseGoogleAnalytics(Context context,String trackerId,final ExceptionParser callback){ _EL_   mAnalytics=GoogleAnalytics.getInstance(context); _EL_   mAnalytics.setLocalDispatchPeriod(1800); _EL_   mTracker=mAnalytics.newTracker(trackerId); _EL_   mTracker.enableExceptionReporting(true); _EL_   mTracker.enableAutoActivityTracking(true); _EL_   Thread.UncaughtExceptionHandler handler=Thread.getDefaultUncaughtExceptionHandler(); _EL_   if (handler != null && handler instanceof ExceptionReporter) { _EL_     ExceptionReporter exceptionReporter=(ExceptionReporter)handler; _EL_     exceptionReporter.setExceptionParser(callback); _EL_     Thread.setDefaultUncaughtExceptionHandler(exceptionReporter); _EL_     Log.d(LOG_TAG,"Analytics active."); _EL_   } _EL_  else { _EL_     Log.e(LOG_TAG,"Cannot set custom exception parser."); _EL_   } _EL_   return mAnalytics; _EL_ } _EL_ ', 'public ServiceID(DataInput in) throws IOException { _EL_   this.mostSig=in.readLong(); _EL_   this.leastSig=in.readLong(); _EL_ } _EL_ ', 'private void addFinally(ArrayList returnList,Stmnt finallyBlock) throws CompileError { _EL_   Bytecode bc=bytecode; _EL_   int n=returnList.size(); _EL_   for (int i=0; i < n; ++i) { _EL_     final int[] ret=(int[])returnList.get(i); _EL_     int pc=ret[0]; _EL_     bc.write16bit(pc,bc.currentPc() - pc + 1); _EL_     ReturnHook hook=new JsrHook2(this,ret); _EL_     finallyBlock.accept(this); _EL_     hook.remove(this); _EL_     if (!hasReturned) { _EL_       bc.addOpcode(Opcode.GOTO); _EL_       bc.addIndex(pc + 3 - bc.currentPc()); _EL_     } _EL_   } _EL_ } _EL_ ', 'public Object nextMeta() throws JSONException { _EL_   char c; _EL_   char q; _EL_   do { _EL_     c=next(); _EL_   } _EL_  while (Character.isWhitespace(c)); _EL_ switch (c) { _EL_ case 0: _EL_     throw syntaxError("Misshaped meta tag"); _EL_ case \'<\': _EL_   return XML.LT; _EL_ case \'>\': _EL_ return XML.GT; _EL_ case \'/\': _EL_ return XML.SLASH; _EL_ case \'=\': _EL_ return XML.EQ; _EL_ case \'!\': _EL_ return XML.BANG; _EL_ case \'?\': _EL_ return XML.QUEST; _EL_ case \'"\': _EL_ case \'\\\'\': _EL_ q=c; _EL_ for (; ; ) { _EL_ c=next(); _EL_ if (c == 0) { _EL_ throw syntaxError("Unterminated string"); _EL_ } _EL_ if (c == q) { _EL_ return Boolean.TRUE; _EL_ } _EL_ } _EL_ default : _EL_ for (; ; ) { _EL_ c=next(); _EL_ if (Character.isWhitespace(c)) { _EL_ return Boolean.TRUE; _EL_ } _EL_ switch (c) { _EL_ case 0: _EL_ case \'<\': _EL_ case \'>\': _EL_ case \'/\': _EL_ case \'=\': _EL_ case \'!\': _EL_ case \'?\': _EL_ case \'"\': _EL_ case \'\\\'\': _EL_ back(); _EL_ return Boolean.TRUE; _EL_ } _EL_ } _EL_ } _EL_ } _EL_ ', 'public static void writeJSONString(Collection collection,Writer out) throws IOException { _EL_   if (collection == null) { _EL_     out.write("null"); _EL_     return; _EL_   } _EL_   boolean first=true; _EL_   Iterator iter=collection.iterator(); _EL_   out.write(\'[\'); _EL_   while (iter.hasNext()) { _EL_     if (first)     first=false; _EL_  else     out.write(\',\'); _EL_     Object value=iter.next(); _EL_     if (value == null) { _EL_       out.write("null"); _EL_       continue; _EL_     } _EL_     JSONValue.writeJSONString(value,out); _EL_   } _EL_   out.write(\']\'); _EL_ } _EL_ ', 'protected int[] readColorTable(final int ncolors){ _EL_   final int nbytes=3 * ncolors; _EL_   int[] tab=null; _EL_   final byte[] c=new byte[nbytes]; _EL_   try { _EL_     rawData.get(c); _EL_     tab=new int[256]; _EL_     int i=0; _EL_     int j=0; _EL_     while (i < ncolors) { _EL_       final int r=(c[j++]) & 0xff; _EL_       final int g=(c[j++]) & 0xff; _EL_       final int b=(c[j++]) & 0xff; _EL_       tab[i++]=0xff000000 | (r << 16) | (g << 8)| b; _EL_     } _EL_   } _EL_  catch (  final BufferUnderflowException e) { _EL_     Log.w(TAG,"Format Error Reading Color Table",e); _EL_     status=STATUS_FORMAT_ERROR; _EL_   } _EL_   return tab; _EL_ } _EL_ ', 'void touch(boolean openReadOnly) throws IOException { _EL_   if (isReadOnly || openReadOnly) { _EL_     throw new IOException("Read only"); _EL_   } _EL_   lastModified=System.currentTimeMillis(); _EL_ } _EL_ ', '@SneakyThrows public void addKeyToKeystore(KeyStore keyStore,X509Certificate cert,RSAPrivateKey privateKey,String alias,String password){ _EL_   KeyStore.PasswordProtection pass=new KeyStore.PasswordProtection(password.toCharArray()); _EL_   Certificate[] certificateChain={cert}; _EL_   keyStore.setEntry(alias,new KeyStore.PrivateKeyEntry(privateKey,certificateChain),pass); _EL_ } _EL_ ', 'public boolean needsReload(File file){ _EL_   return fFilesToReoad.contains(file); _EL_ } _EL_ ', 'public PutRepositoryRequest source(byte[] repositoryDefinition){ _EL_   return source(repositoryDefinition,0,repositoryDefinition.length); _EL_ } _EL_ ', 'private void disableButtons(){ _EL_   setFireEnabled(false); _EL_   setSkipEnabled(false); _EL_   setTwistEnabled(false); _EL_   setNextEnabled(false); _EL_   butDone.setEnabled(false); _EL_   setFlipArmsEnabled(false); _EL_   setFireModeEnabled(false); _EL_   setNextTargetEnabled(false); _EL_ } _EL_ ', '@Override public void write(String str){ _EL_   int start=0; _EL_   while (start < str.length()) { _EL_     int end=Math.min(start + MAX_MESSAGE_LENGTH,str.length()); _EL_     Log.i(TAG,str.substring(start,end)); _EL_     start=end; _EL_   } _EL_ } _EL_ ', 'protected void addToQuarantineQueue(NodePortTuple npt){ _EL_   if (quarantineQueue.contains(npt) == false) { _EL_     quarantineQueue.add(npt); _EL_   } _EL_ } _EL_ ', 'private CarbonDictionarySortInfo createColumnSortInfo(CarbonDictionarySortModel[] dictionarySortModels){ _EL_   int[] sortIndex; _EL_   int[] sortIndexInverted; _EL_   Arrays.sort(dictionarySortModels); _EL_   sortIndex=new int[dictionarySortModels.length]; _EL_   sortIndexInverted=new int[dictionarySortModels.length]; _EL_   for (int i=0; i < dictionarySortModels.length; i++) { _EL_     CarbonDictionarySortModel dictionarySortModel=dictionarySortModels[i]; _EL_     sortIndex[i]=dictionarySortModel.getKey(); _EL_     sortIndexInverted[dictionarySortModel.getKey() - 1]=i + 1; _EL_   } _EL_   dictionarySortModels=null; _EL_   List<Integer> sortIndexList=convertToList(sortIndex); _EL_   List<Integer> sortIndexInvertedList=convertToList(sortIndexInverted); _EL_   return new CarbonDictionarySortInfo(sortIndexList,sortIndexInvertedList); _EL_ } _EL_ ', 'private void addFeature(JsonNode feature,int index){ _EL_   PointFeature feat=null; _EL_   try { _EL_     feat=PointFeature.fromJsonNode(feature); _EL_   } _EL_  catch (  EmptyPolygonException e) { _EL_     LOG.warn("Empty MultiPolygon, skipping."); _EL_     return; _EL_   } _EL_ catch (  UnsupportedGeometryException e) { _EL_     LOG.warn(e.message); _EL_     return; _EL_   } _EL_   if (feat == null) { _EL_     return; _EL_   } _EL_   addFeature(feat,index); _EL_ } _EL_ ', 'public BitString(final String value){ _EL_   this(value.length()); _EL_   for (int i=0; i < value.length(); i++) { _EL_     if (value.charAt(i) == \'1\') { _EL_       setBit(value.length() - (i + 1),true); _EL_     } _EL_  else     if (value.charAt(i) != \'0\') { _EL_       throw new IllegalArgumentException("Illegal character at position " + i); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void sort(Comparator<Individual> comparator){ _EL_   Collections.sort(individuals,comparator); _EL_ } _EL_ ', 'public void write(Writer writer) throws Exception { _EL_   writer.write(toString()); _EL_   writer.flush(); _EL_ } _EL_ ', "public static boolean isCglibRenamedMethod(Method renamedMethod){ _EL_   String name=renamedMethod.getName(); _EL_   if (name.startsWith(CGLIB_RENAMED_METHOD_PREFIX)) { _EL_     int i=name.length() - 1; _EL_     while (i >= 0 && Character.isDigit(name.charAt(i))) { _EL_       i--; _EL_     } _EL_     return ((i > CGLIB_RENAMED_METHOD_PREFIX.length()) && (i < name.length() - 1) && (name.charAt(i) == '$')); _EL_   } _EL_   return false; _EL_ } _EL_ ", 'public PWResetException(String bundleName,String errCode,Object[] args){ _EL_   super(bundleName,errCode,args); _EL_   errList=new ArrayList(1); _EL_   errList.add(getMessage()); _EL_ } _EL_ ', 'public static String[] unionArrays(String[] array1,String[] array2){ _EL_   if (array1 == null) { _EL_     return array2; _EL_   } _EL_   if (array2 == null) { _EL_     return array1; _EL_   } _EL_   Set<String> set=new LinkedHashSet<>(); _EL_   set.addAll(Arrays.asList(array1)); _EL_   set.addAll(Arrays.asList(array2)); _EL_   return set.toArray(new String[set.size()]); _EL_ } _EL_ ', '@Override public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException { _EL_   Node xpathOwnerNode=(Node)xctxt.getOwnerObject(); _EL_   if (xpathOwnerNode == null) { _EL_     return null; _EL_   } _EL_   int xpathOwnerNodeDTM=xctxt.getDTMHandleFromNode(xpathOwnerNode); _EL_   int currentNode=xctxt.getCurrentNode(); _EL_   DTM dtm=xctxt.getDTM(currentNode); _EL_   int docContext=dtm.getDocument(); _EL_   if (DTM.NULL == docContext) { _EL_     error(xctxt,XPATHErrorResources.ER_CONTEXT_HAS_NO_OWNERDOC,null); _EL_   } _EL_ { _EL_     Document currentDoc=XMLUtils.getOwnerDocument(dtm.getNode(currentNode)); _EL_     Document xpathOwnerDoc=XMLUtils.getOwnerDocument(xpathOwnerNode); _EL_     if (currentDoc != xpathOwnerDoc) { _EL_       throw new TransformerException(I18n.translate("xpath.funcHere.documentsDiffer")); _EL_     } _EL_   } _EL_   XNodeSet nodes=new XNodeSet(xctxt.getDTMManager()); _EL_   NodeSetDTM nodeSet=nodes.mutableNodeset(); _EL_ { _EL_     int hereNode=DTM.NULL; _EL_ switch (dtm.getNodeType(xpathOwnerNodeDTM)) { _EL_ case Node.ATTRIBUTE_NODE: _EL_ case Node.PROCESSING_INSTRUCTION_NODE: _EL_ { _EL_         hereNode=xpathOwnerNodeDTM; _EL_         nodeSet.addNode(hereNode); _EL_         break; _EL_       } _EL_ case Node.TEXT_NODE: _EL_ { _EL_       hereNode=dtm.getParent(xpathOwnerNodeDTM); _EL_       nodeSet.addNode(hereNode); _EL_       break; _EL_     } _EL_ default : _EL_   break; _EL_ } _EL_ } _EL_ nodeSet.detach(); _EL_ return nodes; _EL_ } _EL_ ', 'public static String grabClass(String signature){ _EL_   Matcher matcher=sigRE.matcher(signature); _EL_   boolean b=matcher.matches(); _EL_   if (!b && matcher.groupCount() != 4)   logger.error("Bad method signature: {}",signature); _EL_   return matcher.group(1); _EL_ } _EL_ ', 'public int size(){ _EL_   return nodes.size(); _EL_ } _EL_ ', '@Override public final E nextElement(){ _EL_   E result=m_Vector.get(m_Counter); _EL_   m_Counter++; _EL_   if (m_Counter == m_SpecialElement) { _EL_     m_Counter++; _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private ByteString escapeBytes(final ByteString value){ _EL_   if (!needEscaping(value)) { _EL_     return value; _EL_   } _EL_   final ByteStringBuilder builder=new ByteStringBuilder(); _EL_   for (int i=0; i < value.length(); i++) { _EL_     final byte b=value.byteAt(i); _EL_     if (isByteToEscape(b)) { _EL_       builder.appendByte(DN.NORMALIZED_ESC_BYTE); _EL_     } _EL_     builder.appendByte(b); _EL_   } _EL_   return builder.toByteString(); _EL_ } _EL_ ', 'public InputBuilder<T> repeatAll(int times){ _EL_   List<T> toAppend=new ArrayList<>(); _EL_   for (int i=0; i < times; i++) { _EL_     toAppend.addAll(input); _EL_   } _EL_   input.addAll(toAppend); _EL_   return this; _EL_ } _EL_ ', 'public final void renameClass(Map classnames){ _EL_   String jvmNewThisName=(String)classnames.get(Descriptor.toJvmName(thisclassname)); _EL_   if (jvmNewThisName != null)   thisclassname=Descriptor.toJavaName(jvmNewThisName); _EL_   constPool.renameClass(classnames); _EL_   AttributeInfo.renameClass(attributes,classnames); _EL_   ArrayList list=methods; _EL_   int n=list.size(); _EL_   for (int i=0; i < n; ++i) { _EL_     MethodInfo minfo=(MethodInfo)list.get(i); _EL_     String desc=minfo.getDescriptor(); _EL_     minfo.setDescriptor(Descriptor.rename(desc,classnames)); _EL_     AttributeInfo.renameClass(minfo.getAttributes(),classnames); _EL_   } _EL_   list=fields; _EL_   n=list.size(); _EL_   for (int i=0; i < n; ++i) { _EL_     FieldInfo finfo=(FieldInfo)list.get(i); _EL_     String desc=finfo.getDescriptor(); _EL_     finfo.setDescriptor(Descriptor.rename(desc,classnames)); _EL_     AttributeInfo.renameClass(finfo.getAttributes(),classnames); _EL_   } _EL_ } _EL_ ', '@SuppressWarnings("unused") public void handleButton3Request(RequestInvocationEvent event){ _EL_   backTrail(); _EL_   try { _EL_     String name=(String)getPageSessionAttribute(SAVE_VB_NAME); _EL_     ViewBean vb=getViewBean(Class.forName(name)); _EL_     passPgSessionMap(vb); _EL_     vb.forwardTo(getRequestContext()); _EL_   } _EL_  catch (  ClassNotFoundException e) { _EL_     debug.warning("AbstractAuditViewBean.handleButton3Request:",e); _EL_   } _EL_ } _EL_ ', 'public IonException(Throwable cause){ _EL_   super(cause.getMessage(),cause); _EL_ } _EL_ ', 'public final double distance(){ _EL_   return Math.sqrt(distance_square()); _EL_ } _EL_ ', 'public List<Challenge> challenges(){ _EL_   String responseField; _EL_   if (code == HTTP_UNAUTHORIZED) { _EL_     responseField="WWW-Authenticate"; _EL_   } _EL_  else   if (code == HTTP_PROXY_AUTH) { _EL_     responseField="Proxy-Authenticate"; _EL_   } _EL_  else { _EL_     return Collections.emptyList(); _EL_   } _EL_   return OkHeaders.parseChallenges(headers(),responseField); _EL_ } _EL_ ', 'byte[] toBytes(SSLSession session){ _EL_   if (!(session instanceof OpenSSLSessionImpl)) { _EL_     return null; _EL_   } _EL_   OpenSSLSessionImpl sslSession=(OpenSSLSessionImpl)session; _EL_   try { _EL_     ByteArrayOutputStream baos=new ByteArrayOutputStream(); _EL_     DataOutputStream daos=new DataOutputStream(baos); _EL_     daos.writeInt(OPEN_SSL); _EL_     byte[] data=sslSession.getEncoded(); _EL_     daos.writeInt(data.length); _EL_     daos.write(data); _EL_     Certificate[] certs=session.getPeerCertificates(); _EL_     daos.writeInt(certs.length); _EL_     for (    Certificate cert : certs) { _EL_       data=cert.getEncoded(); _EL_       daos.writeInt(data.length); _EL_       daos.write(data); _EL_     } _EL_     return baos.toByteArray(); _EL_   } _EL_  catch (  IOException e) { _EL_     log(e); _EL_     return null; _EL_   } _EL_ catch (  CertificateEncodingException e) { _EL_     log(e); _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public MersenneTwister(){ _EL_   mt=new int[N]; _EL_   setSeed(System.currentTimeMillis() + System.identityHashCode(this)); _EL_ } _EL_ ', 'public static byte[] encryptPassword(final String password,final byte[] seed) throws NoSuchAlgorithmException { _EL_   if (password == null || password.equals("")) { _EL_     return new byte[0]; _EL_   } _EL_   final MessageDigest messageDigest=MessageDigest.getInstance("SHA-1"); _EL_   final byte[] stage1=messageDigest.digest(password.getBytes()); _EL_   messageDigest.reset(); _EL_   final byte[] stage2=messageDigest.digest(stage1); _EL_   messageDigest.reset(); _EL_   messageDigest.update(seed); _EL_   messageDigest.update(stage2); _EL_   final byte[] digest=messageDigest.digest(); _EL_   final byte[] returnBytes=new byte[digest.length]; _EL_   for (int i=0; i < digest.length; i++) { _EL_     returnBytes[i]=(byte)(stage1[i] ^ digest[i]); _EL_   } _EL_   return returnBytes; _EL_ } _EL_ ', 'public int rows(){ _EL_   return rows; _EL_ } _EL_ ', 'public static String array2hex(final byte[] array){ _EL_   return byteArray2String(array,"0x",", ",true,16); _EL_ } _EL_ ', 'private byte[] writeCheckedBytes(MessageNano proto){ _EL_   BackupProtos.CheckedMessage wrapper=new BackupProtos.CheckedMessage(); _EL_   wrapper.payload=MessageNano.toByteArray(proto); _EL_   CRC32 checksum=new CRC32(); _EL_   checksum.update(wrapper.payload); _EL_   wrapper.checksum=checksum.getValue(); _EL_   return MessageNano.toByteArray(wrapper); _EL_ } _EL_ ', 'public double reduceTo(int width,int height,double limit){ _EL_   int w=getIconWidth(); _EL_   int h=getIconHeight(); _EL_   double scale=1.0; _EL_   if (w > width) { _EL_     scale=((double)width) / w; _EL_   } _EL_   if (h > height) { _EL_     scale=Math.min(scale,((double)height) / h); _EL_   } _EL_   if (scale < 1) { _EL_     if (limit > 0.0) { _EL_       scale=Math.max(scale,limit); _EL_     } _EL_     AffineTransform t=AffineTransform.getScaleInstance(scale,scale); _EL_     transformImage((int)Math.ceil(scale * w),(int)Math.ceil(scale * h),t,null); _EL_   } _EL_   return scale; _EL_ } _EL_ ', 'public void installBuiltinSound(String soundIdentifier,InputStream data) throws IOException { _EL_   builtinSounds.put(soundIdentifier,convertBuiltinSound(data)); _EL_ } _EL_ ', 'public static int findName(String name,int[] table){ _EL_   for (int i=0; i < table.length; i++) { _EL_     if (name.equals(getName(table[i]))) { _EL_       return i; _EL_     } _EL_   } _EL_   return -1; _EL_ } _EL_ ', 'private void scoreTrackResults(Collection<Track> tracks,SearchQuery query,Collection<ScoredResult> output){ _EL_   for (  Track track : tracks) { _EL_     double score=scoreTrackResult(query,track); _EL_     output.add(new ScoredResult(track,score)); _EL_   } _EL_ } _EL_ ', 'private Long currentTime(){ _EL_   return System.currentTimeMillis() / 1000; _EL_ } _EL_ ', 'private static byte[] encode(double latitude,double longitude){ _EL_   byte[] bytes=new byte[2 * Integer.BYTES]; _EL_   NumericUtils.intToSortableBytes(encodeLatitude(latitude),bytes,0); _EL_   NumericUtils.intToSortableBytes(encodeLongitude(longitude),bytes,Integer.BYTES); _EL_   return bytes; _EL_ } _EL_ ', 'public static void putLongVolatile(Object obj,long off,long val){ _EL_   UNSAFE.putLongVolatile(obj,off,val); _EL_ } _EL_ ', 'public static List<String> run(List<String> commands){ _EL_   return Shell.run("su",commands.toArray(new String[commands.size()]),null,false); _EL_ } _EL_ ', 'public void circle(double x,double y,double r){ _EL_   if (r < 0)   throw new IllegalArgumentException("circle radius can\'t be negative"); _EL_   double xs=scaleX(x); _EL_   double ys=scaleY(y); _EL_   double ws=factorX(2 * r); _EL_   double hs=factorY(2 * r); _EL_   if (ws <= 1 && hs <= 1)   pixel(x,y); _EL_  else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs)); _EL_   draw(); _EL_ } _EL_ ', 'final public void println(double v){ _EL_   Writer out=this.out; _EL_   if (out == null)   return; _EL_   print(v); _EL_   try { _EL_     out.write(_newline,0,_newline.length); _EL_   } _EL_  catch (  IOException e) { _EL_     log.log(Level.FINE,e.toString(),e); _EL_   } _EL_ } _EL_ ', 'public void writeSI32(int value) throws IOException { _EL_   flushBits(); _EL_   out.write(value & 0xff); _EL_   out.write(value >> 8); _EL_   out.write(value >> 16); _EL_   out.write(value >> 24); _EL_   bytesWritten+=4; _EL_ } _EL_ ', 'private static void map(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){ _EL_   final String value=sequence.toString(); _EL_   for (int i=0; i < value.length(); i++) { _EL_     final char c=value.charAt(i); _EL_     if (MAP_2_NULL.contains(c)) { _EL_       continue; _EL_     } _EL_     if (MAP_2_SPACE.contains(c)) { _EL_       if (canMapToSpace(buffer,trim)) { _EL_         buffer.append(SPACE_CHAR); _EL_       } _EL_       continue; _EL_     } _EL_     if (foldCase) { _EL_       final String mapping=CASE_MAP_TABLE.get(c); _EL_       if (mapping != null) { _EL_         buffer.append(mapping); _EL_         continue; _EL_       } _EL_     } _EL_     buffer.append(c); _EL_   } _EL_ } _EL_ ', 'public void addButtonPressedListener(FieldConfigStringButtonInterface listener){ _EL_   if (buttonPressedListenerList == null) { _EL_     buttonPressedListenerList=new ArrayList<FieldConfigStringButtonInterface>(); _EL_   } _EL_   buttonPressedListenerList.add(listener); _EL_ } _EL_ ', 'public void dispose(){ _EL_   logDebug("Disposing."); _EL_   mSetupDone=false; _EL_   if (mServiceConn != null) { _EL_     logDebug("Unbinding from service."); _EL_     if (mContext != null)     mContext.unbindService(mServiceConn); _EL_     mServiceConn=null; _EL_     mService=null; _EL_     mPurchaseListener=null; _EL_   } _EL_ } _EL_ ', 'private void fillXMLAttribute(Attributes att,int index){ _EL_   fillQName(fAttributeQName,att.getURI(index),att.getLocalName(index),att.getQName(index)); _EL_   String type=att.getType(index); _EL_   fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,att.getValue(index)); _EL_ } _EL_ ', 'public JComponent createPropertyGUI(PropertyConsumer pc){ _EL_   this.propertyConsumer=pc; _EL_   Properties props=new Properties(); _EL_   props=pc.getProperties(props); _EL_   Properties info=new Properties(); _EL_   info=pc.getPropertyInfo(info); _EL_   String prefix=pc.getPropertyPrefix(); _EL_   return createPropertyGUI(prefix,props,info); _EL_ } _EL_ ', 'public long copy(String filename,OutputStream out,long offset,long size) throws IOException, InterruptedException { _EL_   if (size < 0) { _EL_     return 0; _EL_   } _EL_   BufferedInputStream is=new BufferedInputStream(getFileInputStream(filename)); _EL_   byte[] buf=new byte[64 * 1024]; _EL_   int bytesRead; _EL_   long pos=0; _EL_   long remaining=size; _EL_   try { _EL_     if (offset != 0) { _EL_       is.skip(offset); _EL_       pos+=offset; _EL_     } _EL_     while (remaining != 0) { _EL_       int max=buf.length; _EL_       if (max > remaining) { _EL_         max=(int)remaining; _EL_       } _EL_       bytesRead=is.read(buf,0,max); _EL_       if (bytesRead == -1) { _EL_         break; _EL_       } _EL_       out.write(buf,0,bytesRead); _EL_       pos+=bytesRead; _EL_       remaining-=bytesRead; _EL_     } _EL_     out.flush(); _EL_   } _EL_  catch (  Exception e) { _EL_     out.flush(); _EL_   } _EL_  finally { _EL_     try { _EL_       is.close(); _EL_     } _EL_  catch (    Exception e) { _EL_     } _EL_   } _EL_   return pos; _EL_ } _EL_ ', 'private static void deserializeHeader(KdbHeader kdbHeader,DataInput dataInput) throws IOException { _EL_   kdbHeader.setFlags(dataInput.readInt()); _EL_   kdbHeader.setVersion(dataInput.readInt()); _EL_   byte[] buffer=new byte[16]; _EL_   dataInput.readFully(buffer); _EL_   kdbHeader.setMasterSeed(buffer); _EL_   buffer=new byte[16]; _EL_   dataInput.readFully(buffer); _EL_   kdbHeader.setEncryptionIv(buffer); _EL_   kdbHeader.setGroupCount(dataInput.readInt()); _EL_   kdbHeader.setEntryCount(dataInput.readInt()); _EL_   byte[] buffer32=new byte[32]; _EL_   dataInput.readFully(buffer32); _EL_   kdbHeader.setContentHash(buffer32); _EL_   buffer32=new byte[32]; _EL_   dataInput.readFully(buffer32); _EL_   kdbHeader.setTransformSeed(buffer32); _EL_   kdbHeader.setTransformRounds(dataInput.readInt()); _EL_ } _EL_ ', 'public List<JCAnnotation> transformAnnotations(OutputElement target,Tree.Declaration annotated){ _EL_   EnumSet<OutputElement> outputs; _EL_   if (annotated instanceof Tree.AnyClass) { _EL_     outputs=AnnotationUtil.outputs((Tree.AnyClass)annotated); _EL_   } _EL_  else   if (annotated instanceof Tree.AnyInterface) { _EL_     outputs=AnnotationUtil.outputs((Tree.AnyInterface)annotated); _EL_   } _EL_  else   if (annotated instanceof Tree.TypeAliasDeclaration) { _EL_     outputs=AnnotationUtil.outputs((Tree.TypeAliasDeclaration)annotated); _EL_   } _EL_  else   if (annotated instanceof Tree.Constructor) { _EL_     outputs=AnnotationUtil.outputs((Tree.Constructor)annotated); _EL_   } _EL_  else   if (annotated instanceof Tree.Enumerated) { _EL_     outputs=AnnotationUtil.outputs((Tree.Enumerated)annotated); _EL_   } _EL_  else   if (annotated instanceof Tree.AnyMethod) { _EL_     outputs=AnnotationUtil.outputs((Tree.AnyMethod)annotated); _EL_   } _EL_  else   if (annotated instanceof Tree.AttributeDeclaration) { _EL_     outputs=AnnotationUtil.outputs((Tree.AttributeDeclaration)annotated); _EL_   } _EL_  else   if (annotated instanceof Tree.AttributeGetterDefinition) { _EL_     outputs=AnnotationUtil.outputs((Tree.AttributeGetterDefinition)annotated); _EL_   } _EL_  else   if (annotated instanceof Tree.AttributeSetterDefinition) { _EL_     outputs=AnnotationUtil.outputs((Tree.AttributeSetterDefinition)annotated); _EL_   } _EL_  else   if (annotated instanceof Tree.ObjectDefinition) { _EL_     outputs=AnnotationUtil.outputs((Tree.ObjectDefinition)annotated); _EL_   } _EL_  else { _EL_     throw BugException.unhandledNodeCase(annotated); _EL_   } _EL_   return transform(annotated.getDeclarationModel(),target,annotated.getAnnotationList(),outputs); _EL_ } _EL_ ', 'public void addControlRoll(PilotingRollData control){ _EL_   controlRolls.addElement(control); _EL_ } _EL_ ', 'void processAddOnChanges(Window caller,AddOnDependencyChecker.AddOnChangesResult changes){ _EL_   if (addonsDialog != null) { _EL_     addonsDialog.setDownloadingUpdates(); _EL_   } _EL_   if (getView() != null) { _EL_     Set<AddOn> addOns=new HashSet<>(changes.getUninstalls()); _EL_     addOns.addAll(changes.getOldVersions()); _EL_     Set<Extension> extensions=new HashSet<>(); _EL_     extensions.addAll(changes.getUnloadExtensions()); _EL_     extensions.addAll(changes.getSoftUnloadExtensions()); _EL_     if (!warnUnsavedResourcesOrActiveActions(caller,addOns,extensions,true)) { _EL_       return; _EL_     } _EL_   } _EL_   uninstallAddOns(caller,changes.getUninstalls(),false); _EL_   Set<AddOn> allAddons=new HashSet<>(changes.getNewVersions()); _EL_   allAddons.addAll(changes.getInstalls()); _EL_   for (  AddOn addOn : allAddons) { _EL_     if (addonsDialog != null) { _EL_       addonsDialog.notifyAddOnDownloading(addOn); _EL_     } _EL_     downloadAddOn(addOn); _EL_   } _EL_ } _EL_ ', 'public void rederiveColor(){ _EL_   Color src=UIManager.getColor(uiDefaultParentName); _EL_   if (src != null) { _EL_     float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null); _EL_     tmp[0]=clamp(tmp[0] + hOffset); _EL_     tmp[1]=clamp(tmp[1] + sOffset); _EL_     tmp[2]=clamp(tmp[2] + bOffset); _EL_     int alpha=clamp(src.getAlpha() + aOffset); _EL_     argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24); _EL_   } _EL_  else { _EL_     float[] tmp=new float[3]; _EL_     tmp[0]=clamp(hOffset); _EL_     tmp[1]=clamp(sOffset); _EL_     tmp[2]=clamp(bOffset); _EL_     int alpha=clamp(aOffset); _EL_     argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24); _EL_   } _EL_ } _EL_ ', 'private void addSpan(CacheSpan span){ _EL_   TreeSet<CacheSpan> spansForKey=cachedSpans.get(span.key); _EL_   if (spansForKey == null) { _EL_     spansForKey=new TreeSet<CacheSpan>(); _EL_     cachedSpans.put(span.key,spansForKey); _EL_   } _EL_   spansForKey.add(span); _EL_   totalSpace+=span.length; _EL_   notifySpanAdded(span); _EL_ } _EL_ ', 'public boolean equals(Object obj){ _EL_   if (this == obj) { _EL_     return true; _EL_   } _EL_   if (!(obj instanceof URIName)) { _EL_     return false; _EL_   } _EL_   URIName other=(URIName)obj; _EL_   return uri.equals(other.getURI()); _EL_ } _EL_ ', 'void repaintChildren(){ _EL_   for (  Component child : panel.getComponents()) { _EL_     child.repaint(); _EL_   } _EL_ } _EL_ ', 'private static String readComment(String input,int index){ _EL_   String comment=null; _EL_   Matcher matcher=COMMENT_PATTERN.matcher(input.substring(index)); _EL_   if (matcher.find()) { _EL_     comment=matcher.group(1); _EL_     comment=comment.substring(1); _EL_   } _EL_   return comment; _EL_ } _EL_ ', 'public static int findNext(String str,char separator,char escapeChar,int start,StringBuilder split){ _EL_   int numPreEscapes=0; _EL_   for (int i=start; i < str.length(); i++) { _EL_     char curChar=str.charAt(i); _EL_     if (numPreEscapes == 0 && curChar == separator) { _EL_       return i; _EL_     } _EL_  else { _EL_       split.append(curChar); _EL_       numPreEscapes=(curChar == escapeChar) ? (++numPreEscapes) % 2 : 0; _EL_     } _EL_   } _EL_   return -1; _EL_ } _EL_ ', 'private static String guessContentType(String url){ _EL_   url=url.toLowerCase(); _EL_   if (url.endsWith(".webm")) { _EL_     return "video/webm"; _EL_   } _EL_  else   if (url.endsWith(".mp4")) { _EL_     return "video/mp4"; _EL_   } _EL_  else   if (url.matches(".*\\\\.jpe?g")) { _EL_     return "image/jpeg"; _EL_   } _EL_  else   if (url.endsWith(".png")) { _EL_     return "image/png"; _EL_   } _EL_  else   if (url.endsWith(".gif")) { _EL_     return "image/gif"; _EL_   } _EL_  else { _EL_     return "application/octet-stream"; _EL_   } _EL_ } _EL_ ', 'public static String extractCSVOutputLineDomain(String csvOut){ _EL_   String tokens[]=csvOut.split(",(?=([^\\"]*\\"[^\\"]*\\")*[^\\"]*$)",-1); _EL_   return tokens[1]; _EL_ } _EL_ ', 'public void connect(){ _EL_   connect(this.logWriter); _EL_ } _EL_ ', 'public IvrZoneset showActiveIvrZoneset() throws NetworkDeviceControllerException { _EL_   List<IvrZoneset> zonesets=showIvrZonesets(true); _EL_   return zonesets.isEmpty() ? null : zonesets.get(0); _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public static <K>ImmutableArray<K> empty(){ _EL_   return (ImmutableArray<K>)EMPTY; _EL_ } _EL_ ', 'public void replaceNonOptionalNonMinusNodesWith(final List<IGroupMemberNode> ordered,final boolean recomputeDefinitelyProduced){ _EL_   nonOptionalNonMinusNodes.clear(); _EL_   nonOptionalNonMinusNodes.addAll(ordered); _EL_   if (recomputeDefinitelyProduced) { _EL_     recomputeDefinitelyProduced(); _EL_   } _EL_ } _EL_ ', '@Override public int hashCode(){ _EL_   return type << 16 | value.hashCode() << 8 | otherValue.hashCode(); _EL_ } _EL_ ', 'protected void deleteTypeVertex(AtlasVertex instanceVertex,DataTypes.TypeCategory typeCategory,boolean force) throws AtlasException { _EL_ switch (typeCategory) { _EL_ case STRUCT: _EL_ case TRAIT: _EL_     deleteTypeVertex(instanceVertex,force); _EL_   break; _EL_ case CLASS: _EL_ deleteEntities(Collections.singletonList(instanceVertex)); _EL_ break; _EL_ default : _EL_ throw new IllegalStateException("Type category " + typeCategory + " not handled"); _EL_ } _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public void addCacheContext(GridCacheContext cacheCtx) throws IgniteCheckedException { _EL_   if (ctxMap.containsKey(cacheCtx.cacheId())) { _EL_     GridCacheContext<K,V> existing=ctxMap.get(cacheCtx.cacheId()); _EL_     throw new IgniteCheckedException("Failed to start cache due to conflicting cache ID " + "(change cache name and restart grid) [cacheName=" + cacheCtx.name() + ", conflictingCacheName="+ existing.name()+ \']\'); _EL_   } _EL_   CacheStoreManager mgr=cacheCtx.store(); _EL_   if (mgr.configured() && mgr.isLocal())   locStoreCnt.incrementAndGet(); _EL_   ctxMap.put(cacheCtx.cacheId(),cacheCtx); _EL_ } _EL_ ', 'public int compareTo(NamedMediaType other){ _EL_   return _name.compareTo(other._name); _EL_ } _EL_ ', 'protected ReplacedElement newIrreplaceableImageElement(int cssWidth,int cssHeight){ _EL_   BufferedImage missingImage; _EL_   ReplacedElement mre; _EL_   try { _EL_     missingImage=ImageUtil.createCompatibleBufferedImage(cssWidth,cssHeight,BufferedImage.TYPE_INT_RGB); _EL_     Graphics2D g=missingImage.createGraphics(); _EL_     g.setColor(Color.BLACK); _EL_     g.setBackground(Color.WHITE); _EL_     g.setFont(new Font("Serif",Font.PLAIN,12)); _EL_     g.drawString("Missing",0,12); _EL_     g.dispose(); _EL_     mre=new ImageReplacedElement(missingImage,cssWidth,cssHeight); _EL_   } _EL_  catch (  Exception e) { _EL_     mre=new EmptyReplacedElement(cssWidth < 0 ? 0 : cssWidth,cssHeight < 0 ? 0 : cssHeight); _EL_   } _EL_   return mre; _EL_ } _EL_ ', 'public boolean greaterThan(FXGVersion version){ _EL_   return (compareTo(version) > 0); _EL_ } _EL_ ', '@Override public DataSource createDataSource(Properties properties) throws SQLException { _EL_   Properties propertiesCopy=new Properties(); _EL_   if (properties != null) { _EL_     propertiesCopy.putAll(properties); _EL_   } _EL_   rejectUnsupportedOptions(propertiesCopy); _EL_   rejectPoolingOptions(propertiesCopy); _EL_   JdbcDataSource dataSource=new JdbcDataSource(); _EL_   setupH2DataSource(dataSource,propertiesCopy); _EL_   return dataSource; _EL_ } _EL_ ', 'public Set<String> find(T object){ _EL_   if (!locations.containsKey(object)) { _EL_     locations.put(object,new HashSet<>()); _EL_   } _EL_   return Collections.unmodifiableSet(locations.get(object)); _EL_ } _EL_ ', 'private void scrollCurrentItemToCenter(){ _EL_   final ViewItem currItem=mViewItems[BUFFER_CENTER]; _EL_   if (currItem == null) { _EL_     return; _EL_   } _EL_   final int currentViewCenter=currItem.getCenterX(); _EL_   if (mController.isScrolling() || mIsUserScrolling || isCurrentItemCentered()) { _EL_     Log.d(TAG,"[fling] mController.isScrolling() - " + mController.isScrolling()); _EL_     return; _EL_   } _EL_   int snapInTime=(int)(SNAP_IN_CENTER_TIME_MS * ((float)Math.abs(mCenterX - currentViewCenter)) / mDrawArea.width()); _EL_   Log.d(TAG,"[fling] Scroll to center."); _EL_   mController.scrollToPosition(currentViewCenter,snapInTime,false); _EL_ } _EL_ ', 'public boolean remove(String word){ _EL_   return m_Words.remove(word); _EL_ } _EL_ ', 'public synchronized void addRecentItem(T item){ _EL_   item=fromString(toString(item)); _EL_   if (m_RecentItems.size() > 0) { _EL_     if (item.equals(m_RecentItems.get(0)))     return; _EL_   } _EL_   m_RecentItems.remove(item); _EL_   m_RecentItems.add(0,item); _EL_   while (m_RecentItems.size() > m_MaxCount)   m_RecentItems.remove(m_RecentItems.size() - 1); _EL_   if (m_IgnoreChanges)   return; _EL_   writeProps(); _EL_   updateMenu(); _EL_   notifyRecentItemListenersOfAdd(item); _EL_ } _EL_ ', 'public void cfgPackage(ConfigurationValue cfgval,String name,String desc){ _EL_   packages.add(new PackageInfo(name,desc)); _EL_   packageNames.add(name); _EL_ } _EL_ ', '@Override public void close() throws IOException { _EL_   input.close(); _EL_ } _EL_ ', 'private void createBlockMirrorData(String name,int numBlockMirrors) throws Exception { _EL_   Volume volume=new Volume(); _EL_   URI volumeURI=URIUtil.createId(Volume.class); _EL_   testVolumeURIs.add(volumeURI); _EL_   volume.setId(volumeURI); _EL_   volume.setLabel("blockMirrorVolume"); _EL_   URI cgUri=createBlockConsistencyGroup("blockMirrorVolume-cg"); _EL_   volume.setConsistencyGroup(cgUri); _EL_   _dbClient.createObject(volume); _EL_   for (int i=1; i <= numBlockMirrors; i++) { _EL_     BlockMirror blockMirror=new BlockMirror(); _EL_     URI blockMirrorURI=URIUtil.createId(BlockMirror.class); _EL_     testBlockMirrorURIs.add(blockMirrorURI); _EL_     blockMirror.setId(blockMirrorURI); _EL_     blockMirror.setLabel(name + i); _EL_     blockMirror.setConsistencyGroup(cgUri); _EL_     _dbClient.createObject(blockMirror); _EL_   } _EL_ } _EL_ ', '@Override public synchronized void start(){ _EL_   if (running) { _EL_     return; _EL_   } _EL_   LOGGER.info("Starting server"); _EL_   if (endpoints.isEmpty()) { _EL_     int port=config.getInt(NetworkConfig.Keys.COAP_PORT); _EL_     LOGGER.log(Level.INFO,"No endpoints have been defined for server, setting up server endpoint on default port {0}",port); _EL_     addEndpoint(new CoapEndpoint(port,this.config)); _EL_   } _EL_   int started=0; _EL_   for (  Endpoint ep : endpoints) { _EL_     try { _EL_       ep.start(); _EL_       ++started; _EL_     } _EL_  catch (    IOException e) { _EL_       LOGGER.log(Level.SEVERE,"Cannot start server endpoint [" + ep.getAddress() + "]",e); _EL_     } _EL_   } _EL_   if (started == 0) { _EL_     throw new IllegalStateException("None of the server endpoints could be started"); _EL_   } _EL_  else { _EL_     running=true; _EL_   } _EL_ } _EL_ ', '@Override public void exceptionCaught(IoSession session,Throwable cause){ _EL_   final IoSessionInputStream in=(IoSessionInputStream)session.getAttribute(KEY_IN); _EL_   IOException e=null; _EL_   if (cause instanceof StreamIoException) { _EL_     e=(IOException)cause.getCause(); _EL_   } _EL_  else   if (cause instanceof IOException) { _EL_     e=(IOException)cause; _EL_   } _EL_   if (e != null && in != null) { _EL_     in.throwException(e); _EL_   } _EL_  else { _EL_     LOGGER.warn("Unexpected exception.",cause); _EL_     session.close(true); _EL_   } _EL_ } _EL_ ', 'protected void clearResult(){ _EL_   md.clearResult(); _EL_   localizationResult.setText("<HTML>Result: <BR><BR><BR></HTML>"); _EL_ } _EL_ ', 'public String[] parseConfiguration(File xmlFile) throws SAXException, IOException { _EL_   Document document=builder.parse(xmlFile); _EL_   return (parseConfiguration(document)); _EL_ } _EL_ ', 'private double empiricalHSIC(TetradMatrix Ky,TetradMatrix Kx,TetradMatrix Kz,int m){ _EL_   TetradMatrix Kyx=Ky.times(Kx); _EL_   TetradMatrix Kyz=Ky.times(Kz); _EL_   TetradMatrix Kzx=Kz.times(Kx); _EL_   TetradMatrix Kzreg=Kz.copy(); _EL_   for (int i=0; i < m; i++) { _EL_     double ent=(Kzreg.get(i,i) + this.regularizer); _EL_     Kzreg.set(i,i,ent); _EL_   } _EL_   TetradMatrix A=Kzreg.inverse(); _EL_   Kzreg=A.times(A); _EL_   TetradMatrix Kyzzregzx=new TetradMatrix(m,m); _EL_   A=Kyz.times(Kzreg); _EL_   Kyzzregzx=A.times(Kzx); _EL_   TetradMatrix Kyzzregzxzzregz=Kyzzregzx.copy(); _EL_   Kyzzregzxzzregz=Kyzzregzx.times(Kz); _EL_   A=Kyzzregzxzzregz.times(Kzreg); _EL_   Kyzzregzxzzregz=A.times(Kz); _EL_   double empHSIC=0.0; _EL_   for (int i=0; i < m; i++) { _EL_     empHSIC+=Kyx.get(i,i); _EL_     empHSIC+=(-2 * Kyzzregzx.get(i,i)); _EL_     empHSIC+=Kyzzregzxzzregz.get(i,i); _EL_   } _EL_   empHSIC/=Math.pow(m - 1,2); _EL_   double Bz=0.0; _EL_   for (int i=0; i < (m - 1); i++) { _EL_     for (int j=(i + 1); j < m; j++) { _EL_       Bz+=Math.pow(Kz.get(i,j),2); _EL_       Bz+=Math.pow(Kz.get(j,i),2); _EL_     } _EL_   } _EL_   Bz=(m * (m - 1)) / Bz; _EL_   empHSIC*=Bz; _EL_   return empHSIC; _EL_ } _EL_ ', 'public void create(String[] rpfFilePaths,String outputFile) throws MakeTocException { _EL_   create(rpfFilePaths,outputFile,false); _EL_ } _EL_ ', 'private synchronized void postEvent(EventInfo eventInfo){ _EL_   eventQueue.add(eventInfo); _EL_   notifyAll(); _EL_ } _EL_ ', 'public String chooseServerAlias(String keyType,Principal[] issuers,Socket sock){ _EL_   return sunX509KeyManager.chooseServerAlias(keyType,issuers,sock); _EL_ } _EL_ ', 'private void processBmpImage(BufferedImage image){ _EL_   if (!isError) { _EL_     File outputFile=new File(path,prefix + (numPage + 1) + ".bmp"); _EL_     try { _EL_       ImageIO.write(image,"bmp",outputFile); _EL_       addTempFile(outputFile); _EL_       addScanFile(outputFile); _EL_       numPage++; _EL_     } _EL_  catch (    IOException e) { _EL_       e.printStackTrace(); _EL_       endProcess(true,false); _EL_     } _EL_   } _EL_ } _EL_ ', 'public PathHandler(String path){ _EL_   this(Paths.get(path)); _EL_ } _EL_ ', 'public boolean loadLines(){ _EL_   boolean result=false; _EL_   try { _EL_     m_parser.parse(new InputSource(m_reader),this); _EL_     result=true; _EL_     m_success=true; _EL_   } _EL_  catch (  SAXException e) { _EL_     m_errorMessage="ErrorParsingData"; _EL_     m_errorDescription=e.getMessage(); _EL_   } _EL_ catch (  IOException e) { _EL_     m_errorMessage="ErrorReadingData"; _EL_     m_errorDescription=e.getMessage(); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private void loadIgnoreFile(final String srcFolder){ _EL_   ignoreFile=IgnoreFile.load(srcFolder); _EL_   if (ignoreFile == null) { _EL_     loadDefaultExcludePattern(srcFolder); _EL_   } _EL_ } _EL_ ', 'public PKCS10Attribute(PKCS9Attribute attr){ _EL_   this.attributeId=attr.getOID(); _EL_   this.attributeValue=attr.getValue(); _EL_ } _EL_ ', 'void verifyUniqueXids(List<OFMessage> msgs){ _EL_   if (seenXids == null)   seenXids=new HashSet<Long>(); _EL_   for (  OFMessage m : msgs) { _EL_     long xid=m.getXid(); _EL_     assertTrue("Xid in messags is 0",xid != 0); _EL_     assertFalse("Xid " + xid + " has already been used",seenXids.contains(xid)); _EL_     seenXids.add(xid); _EL_   } _EL_ } _EL_ ', 'void addNext(Node<T> n){ _EL_   nextNodes.add(n); _EL_   Collections.sort(nextNodes,isVertical ? verticalComparator : horizontalComparator); _EL_ } _EL_ ', 'protected void configDialogPropertyChange(PropertyChangeEvent event){ _EL_   log.debug("internal config dialog handler"); _EL_   firePropertyChange(PropertyChangeID.CONFIG_CHANGE,event.getOldValue(),event.getNewValue()); _EL_ } _EL_ ', 'public final String readUTF() throws IOException { _EL_   return decodeUTF(readUnsignedShort()); _EL_ } _EL_ ', 'private void myAdd(LinkedList<Integer> l,int i){ _EL_   l.add(i); _EL_ } _EL_ ', 'public static RepaintManager currentManager(Component c){ _EL_   return currentManager(AppContext.getAppContext()); _EL_ } _EL_ ', 'private boolean isRecoverPointInitiator(String portWWN){ _EL_   return portWWN.contains(RECOVERPOINT_INITIATOR_PREFIX); _EL_ } _EL_ ', '@Override public void send(Buffer buffer){ _EL_   _outProxy.write(_outWriter,buffer,false); _EL_ } _EL_ ', 'public void removeClickingListener(OnWheelClickedListener listener){ _EL_   clickingListeners.remove(listener); _EL_ } _EL_ ', 'public void addSection(final Section SECTION){ _EL_   if (null == SECTION)   return; _EL_   sections.add(SECTION); _EL_   Collections.sort(sections,new SectionComparator()); _EL_   fireUpdateEvent(SECTION_EVENT); _EL_ } _EL_ ', 'public void addAll(OVector v){ _EL_   expandFor(size + v.size - 1,null); _EL_   System.arraycopy(v.vector,0,vector,size - v.size,v.size); _EL_ } _EL_ ', 'public static void pipeAll(InputStream inStr,OutputStream outStr) throws IOException { _EL_   byte[] bs=new byte[BUFFER_SIZE]; _EL_   int numRead; _EL_   while ((numRead=inStr.read(bs,0,bs.length)) >= 0) { _EL_     outStr.write(bs,0,numRead); _EL_   } _EL_ } _EL_ ', 'public void sendMessageUntilStopCount(int stopCount){ _EL_   for (int i=processedWorkerCount; i < workers.size(); ++i) { _EL_     ActorRef worker=workers.get(i); _EL_     try { _EL_       Thread.sleep(1L); _EL_     } _EL_  catch (    InterruptedException e) { _EL_       logger.error("sleep exception " + e + " details: ",e); _EL_     } _EL_     worker.tell(OperationWorkerMsgType.PROCESS_REQUEST,originalManager); _EL_     processedWorkerCount++; _EL_     if (processedWorkerCount > stopCount) { _EL_       return; _EL_     } _EL_     logger.debug("REQ_SENT: {} / {} taskId {}",processedWorkerCount,requestTotalCount,taskIdTrim); _EL_   } _EL_ } _EL_ ', 'public static ArrayList<String> stringToArrayList(String string){ _EL_   return new ArrayList<>(Arrays.asList(string.split(","))); _EL_ } _EL_ ', 'private String pickCharset(){ _EL_   if (charset != null) { _EL_     return charset; _EL_   } _EL_  else   if (utf8Supported) { _EL_     return "UTF-8"; _EL_   } _EL_  else { _EL_     return System.getProperty("file.encoding"); _EL_   } _EL_ } _EL_ ', '@Override public void clear(){ _EL_   if (elementCount > 0) { _EL_     elementCount=0; _EL_     Arrays.fill(elementData,null); _EL_     modCount++; _EL_   } _EL_ } _EL_ ', 'public void addLayer(final LayerDefinition layer){ _EL_   layer.setMap(this); _EL_   layers.add(layer); _EL_ } _EL_ ', '@SuppressWarnings("unchecked") @Override protected Object applyUpdatesToManagedData(Object updates){ _EL_   boolean madeChanges=false; _EL_   List<String> words=(List<String>)updates; _EL_   log.info("Applying updates: " + words); _EL_   boolean ignoreCase=getIgnoreCase(); _EL_   for (  String word : words) { _EL_     if (ignoreCase)     word=word.toLowerCase(Locale.ROOT); _EL_     if (managedWords.add(word)) { _EL_       madeChanges=true; _EL_       log.info("Added word: {}",word); _EL_     } _EL_   } _EL_   return madeChanges ? managedWords : null; _EL_ } _EL_ ', 'protected void drawLabel(Canvas canvas,String labelText,DefaultRenderer renderer,List<RectF> prevLabelsBounds,int centerX,int centerY,float shortRadius,float longRadius,float currentAngle,float angle,int left,int right,int color,Paint paint,boolean line,boolean display){ _EL_   if (renderer.isShowLabels() || display) { _EL_     paint.setColor(color); _EL_     double rAngle=Math.toRadians(90 - (currentAngle + angle / 2)); _EL_     double sinValue=Math.sin(rAngle); _EL_     double cosValue=Math.cos(rAngle); _EL_     int x1=Math.round(centerX + (float)(shortRadius * sinValue)); _EL_     int y1=Math.round(centerY + (float)(shortRadius * cosValue)); _EL_     int x2=Math.round(centerX + (float)(longRadius * sinValue)); _EL_     int y2=Math.round(centerY + (float)(longRadius * cosValue)); _EL_     float size=renderer.getLabelsTextSize(); _EL_     float extra=Math.max(size / 2,10); _EL_     paint.setTextAlign(Align.LEFT); _EL_     if (x1 > x2) { _EL_       extra=-extra; _EL_       paint.setTextAlign(Align.RIGHT); _EL_     } _EL_     float xLabel=x2 + extra; _EL_     float yLabel=y2; _EL_     float width=right - xLabel; _EL_     if (x1 > x2) { _EL_       width=xLabel - left; _EL_     } _EL_     labelText=getFitText(labelText,width,paint); _EL_     float widthLabel=paint.measureText(labelText); _EL_     boolean okBounds=false; _EL_     while (!okBounds && line) { _EL_       boolean intersects=false; _EL_       int length=prevLabelsBounds.size(); _EL_       for (int j=0; j < length && !intersects; j++) { _EL_         RectF prevLabelBounds=prevLabelsBounds.get(j); _EL_         if (prevLabelBounds.intersects(xLabel,yLabel,xLabel + widthLabel,yLabel + size)) { _EL_           intersects=true; _EL_           yLabel=Math.max(yLabel,prevLabelBounds.bottom); _EL_         } _EL_       } _EL_       okBounds=!intersects; _EL_     } _EL_     if (line) { _EL_       y2=(int)(yLabel - size / 2); _EL_       canvas.drawLine(x1,y1,x2,y2,paint); _EL_       canvas.drawLine(x2,y2,x2 + extra,y2,paint); _EL_     } _EL_  else { _EL_       paint.setTextAlign(Align.CENTER); _EL_     } _EL_     canvas.drawText(labelText,xLabel,yLabel,paint); _EL_     if (line) { _EL_       prevLabelsBounds.add(new RectF(xLabel,yLabel,xLabel + widthLabel,yLabel + size)); _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public void write(char c[],int off,int len){ _EL_   if ((off < 0) || (off > c.length) || (len < 0)|| ((off + len) > c.length)|| ((off + len) < 0)) { _EL_     throw new IndexOutOfBoundsException(); _EL_   } _EL_  else   if (len == 0) { _EL_     return; _EL_   } _EL_   int newcount=count + len; _EL_   if (newcount > buf.length) { _EL_     buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount)); _EL_   } _EL_   System.arraycopy(c,off,buf,count,len); _EL_   count=newcount; _EL_ } _EL_ ', '@Deprecated public static EpisodeMatchingResult detectEpisodeFromFilename(File file){ _EL_   LOGGER.debug("Detect episodes/seasons from file " + file.getName()); _EL_   EpisodeMatchingResult result=new EpisodeMatchingResult(); _EL_   String fileName=file.getName(); _EL_   result=parseString(fileName); _EL_   Collections.sort(result.episodes); _EL_   Matcher matcher=stackingMarkerPattern.matcher(result.name); _EL_   result.stackingMarkerFound=matcher.matches(); _EL_   LOGGER.debug("returning result " + result); _EL_   return result; _EL_ } _EL_ ', 'public static TypedOperation createArrayCreation(ArrayType arrayType){ _EL_   List<Type> typeList=new ArrayList<>(); _EL_   typeList.add(JavaTypes.INT_TYPE); _EL_   TypeTuple inputTypes=new TypeTuple(typeList); _EL_   return new TypedTermOperation(new ArrayCreation(arrayType),inputTypes,arrayType); _EL_ } _EL_ ', 'public void fireEvent(final SPARQLUpdateEvent e){ _EL_   if (isReadOnly())   throw new UnsupportedOperationException(); _EL_   if (e == null)   throw new IllegalArgumentException(); _EL_   if (listeners.isEmpty()) { _EL_     return; _EL_   } _EL_   final ISPARQLUpdateListener[] a=listeners.toArray(new ISPARQLUpdateListener[0]); _EL_   for (  ISPARQLUpdateListener l : a) { _EL_     final ISPARQLUpdateListener listener=l; _EL_     try { _EL_       listener.updateEvent(e); _EL_     } _EL_  catch (    Throwable t) { _EL_       if (InnerCause.isInnerCause(t,InterruptedException.class)) { _EL_         throw new RuntimeException(t); _EL_       } _EL_       log.error(t,t); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void expungeStaleEntries(){ _EL_   for (Object x; (x=queue.poll()) != null; ) { _EL_ synchronized (queue) { _EL_       @SuppressWarnings("unchecked") Entry<K,V> e=(Entry<K,V>)x; _EL_       int i=indexFor(e.hash,table.length); _EL_       Entry<K,V> prev=table[i]; _EL_       Entry<K,V> p=prev; _EL_       while (p != null) { _EL_         Entry<K,V> next=p.next; _EL_         if (p == e) { _EL_           if (prev == e)           table[i]=next; _EL_  else           prev.next=next; _EL_           e.value=null; _EL_           size--; _EL_           break; _EL_         } _EL_         prev=p; _EL_         p=next; _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'protected boolean isNumeric(String text){ _EL_   text=text.trim(); _EL_   int tlen=text.length(); _EL_   for (int i=0; i < tlen; i++) { _EL_     if (Character.isDigit(text.charAt(i)) == false) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static boolean isChar(String desc){ _EL_   return desc.endsWith("C"); _EL_ } _EL_ ', 'public RSAPublicKeyImpl(byte[] encoded) throws InvalidKeyException { _EL_   decode(encoded); _EL_   RSAKeyFactory.checkRSAProviderKeyLengths(n.bitLength(),e); _EL_ } _EL_ ', 'Date toDate(Calendar calendar){ _EL_   return calendar.getTime(); _EL_ } _EL_ ', 'public boolean isClientAuthentication(){ _EL_   return clientAuthentication; _EL_ } _EL_ ', 'private JPanel createImageFilePanel(){ _EL_   JPanel panel=new JPanel(); _EL_   panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS)); _EL_   panel.add(imageFileName); _EL_   panel.add(Box.createHorizontalStrut(6)); _EL_   panel.add(new JButton(openImageFile)); _EL_   return panel; _EL_ } _EL_ ', 'void writeLine(BufferedWriter writer,String line) throws IOException { _EL_   writer.write(line); _EL_   writer.newLine(); _EL_ } _EL_ ', 'public Layer childAt(int index){ _EL_   return children.get(index); _EL_ } _EL_ ', 'private static void checkPermission(){ _EL_   SecurityManager security=System.getSecurityManager(); _EL_   if (security != null)   security.checkPermission(modifyThreadPermission); _EL_ } _EL_ ', 'public static Function<Value,Value> ofValue(){ _EL_   return VALUE; _EL_ } _EL_ ', 'public static String removeQuotes(String s){ _EL_   if (s == null) { _EL_     return null; _EL_   } _EL_   String trimmed=s.trim(); _EL_   if (trimmed.length() == 0) { _EL_     return trimmed; _EL_   } _EL_   int i=nextNonQuoteIndex(trimmed,0,true); _EL_   int j=nextNonQuoteIndex(trimmed,trimmed.length() - 1,false); _EL_   return trimmed.substring(i,j + 1); _EL_ } _EL_ ', 'public static boolean isDefinedNSDecl(SerializationHandler serializer,int attr,DTM dtm){ _EL_   if (DTM.NAMESPACE_NODE == dtm.getNodeType(attr)) { _EL_     String prefix=dtm.getNodeNameX(attr); _EL_     String uri=serializer.getNamespaceURIFromPrefix(prefix); _EL_     if ((null != uri) && uri.equals(dtm.getStringValue(attr)))     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public DBasicConstraints(JDialog parent,byte[] value) throws IOException { _EL_   super(parent); _EL_   setTitle(res.getString("DBasicConstraints.Title")); _EL_   initComponents(); _EL_   prepopulateWithValue(value); _EL_ } _EL_ ', 'private static int lastIndexOf(Object o,Object[] elements,int index){ _EL_   if (o == null) { _EL_     for (int i=index; i >= 0; i--)     if (elements[i] == null)     return i; _EL_   } _EL_  else { _EL_     for (int i=index; i >= 0; i--)     if (o.equals(elements[i]))     return i; _EL_   } _EL_   return -1; _EL_ } _EL_ ', 'public FloatColumn(int nrows,int capacity,float defaultValue){ _EL_   super(float.class,new Float(defaultValue)); _EL_   if (capacity < nrows) { _EL_     throw new IllegalArgumentException("Capacity value can not be less than the row count."); _EL_   } _EL_   m_values=new float[capacity]; _EL_   Arrays.fill(m_values,defaultValue); _EL_   m_size=nrows; _EL_ } _EL_ ', 'void readPRJ() throws IOException { _EL_   while (true) { _EL_     String S=isr.readLine(); _EL_     if (S == null)     return; _EL_     if (S.startsWith("EOP"))     return; _EL_   } _EL_ } _EL_ ', 'private void checkAlterPeriodConverters() throws SecurityException { _EL_   SecurityManager sm=System.getSecurityManager(); _EL_   if (sm != null) { _EL_     sm.checkPermission(new JodaTimePermission("ConverterManager.alterPeriodConverters")); _EL_   } _EL_ } _EL_ ', 'public boolean equals(final ArtifactCoordinates obj){ _EL_   return this == obj || obj != null && groupId.equals(obj.groupId) && artifactId.equals(obj.artifactId) && version.equals(obj.version) && classifier.equals(obj.classifier); _EL_ } _EL_ ', 'public void importFromChange(Change sourceChange){ _EL_   if (sourceChange.revision() > 0) { _EL_     this.revisionId=new NumericLiteralImpl(sourceChange.revision()); _EL_   } _EL_   if (sourceChange.timestamp() != null) { _EL_     Date date=sourceChange.timestamp(); _EL_     Calendar c=Calendar.getInstance(TimeZone.getTimeZone("UTC"),Locale.ROOT); _EL_     c.setTime(date); _EL_     this.lastModified=new LiteralImpl(DatatypeConverter.printDate(c),XMLSchema.DATETIME); _EL_   } _EL_ } _EL_ ', 'protected PrintWriter lineFileOut(Document doc){ _EL_   return lineFileOut; _EL_ } _EL_ ', 'public CallChainInfo(SootMethod m,Stmt s,String type){ _EL_   this.type=type; _EL_   this.link="as_call"; _EL_   this.method=m; _EL_   this.stmt=s; _EL_   calls=1; _EL_   if (type.equals("syscall"))   syscalls=1; _EL_ } _EL_ ', 'public static void notEmpty(String string,String msg){ _EL_   if (string == null || string.length() == 0)   throw new IllegalArgumentException(msg); _EL_ } _EL_ ', 'public static void resetContext(){ _EL_   contexts.set(null); _EL_ } _EL_ ', 'public static Object convertToParameterValues(Object object){ _EL_   Collection<Object> collection; _EL_   if (object instanceof Object[]) { _EL_     collection=Arrays.asList((Object[])object); _EL_   } _EL_  else   if (object instanceof Collection) { _EL_     collection=(Collection<Object>)object; _EL_   } _EL_  else { _EL_     LOGGER.warn("Unable to convert value, ignoring"); _EL_     return new Object[]{}; _EL_   } _EL_   List<Object> s=new LinkedList<Object>(); _EL_   for (  Object o : collection) { _EL_     Object converted=convertToParameterValue(o); _EL_     if (converted instanceof Object[]) { _EL_       s.addAll(Arrays.asList((Object[])converted)); _EL_     } _EL_  else { _EL_       s.add(converted); _EL_     } _EL_   } _EL_   return s.toArray(new Object[s.size()]); _EL_ } _EL_ ', 'public boolean logoutUser(String username,HttpServletRequest req){ _EL_   return logoutUser(username,req,true,true); _EL_ } _EL_ ', 'public CodeSourceFacade(final CodeSource codeSource){ _EL_   this.location=codeSource.getLocation(); _EL_   final Certificate[] certificates=codeSource.getCertificates(); _EL_   if (null == certificates || 0 == certificates.length) { _EL_     LOGGER.warning(String.format("no certificate found for %s",codeSource)); _EL_     this.firstCertificate=null; _EL_     return; _EL_   } _EL_   this.firstCertificate=(X509Certificate)certificates[0]; _EL_ } _EL_ ', 'public JdpBroadcaster(InetAddress address,InetAddress srcAddress,int port,int ttl) throws IOException, JdpException { _EL_   this.addr=address; _EL_   this.port=port; _EL_   ProtocolFamily family=(address instanceof Inet6Address) ? StandardProtocolFamily.INET6 : StandardProtocolFamily.INET; _EL_   channel=DatagramChannel.open(family); _EL_   channel.setOption(StandardSocketOptions.SO_REUSEADDR,true); _EL_   channel.setOption(StandardSocketOptions.IP_MULTICAST_TTL,ttl); _EL_   if (srcAddress != null) { _EL_     NetworkInterface interf=NetworkInterface.getByInetAddress(srcAddress); _EL_     try { _EL_       channel.bind(new InetSocketAddress(srcAddress,0)); _EL_     } _EL_  catch (    UnsupportedAddressTypeException ex) { _EL_       throw new JdpException("Unable to bind to source address"); _EL_     } _EL_     channel.setOption(StandardSocketOptions.IP_MULTICAST_IF,interf); _EL_   } _EL_ } _EL_ ', 'public void close() throws IOException { _EL_   rrdFile.close(); _EL_ } _EL_ ', 'public Vector rotateInDegree(double degree){ _EL_   return rotateInRadian(Math.toRadians(degree)); _EL_ } _EL_ ', 'public void put(int fieldNumber,FieldData data){ _EL_   int i=binarySearch(fieldNumber); _EL_   if (i >= 0) { _EL_     mData[i]=data; _EL_   } _EL_  else { _EL_     i=~i; _EL_     if (i < mSize && mData[i] == DELETED) { _EL_       mFieldNumbers[i]=fieldNumber; _EL_       mData[i]=data; _EL_       return; _EL_     } _EL_     if (mGarbage && mSize >= mFieldNumbers.length) { _EL_       gc(); _EL_       i=~binarySearch(fieldNumber); _EL_     } _EL_     if (mSize >= mFieldNumbers.length) { _EL_       int n=idealIntArraySize(mSize + 1); _EL_       int[] nkeys=new int[n]; _EL_       FieldData[] nvalues=new FieldData[n]; _EL_       System.arraycopy(mFieldNumbers,0,nkeys,0,mFieldNumbers.length); _EL_       System.arraycopy(mData,0,nvalues,0,mData.length); _EL_       mFieldNumbers=nkeys; _EL_       mData=nvalues; _EL_     } _EL_     if (mSize - i != 0) { _EL_       System.arraycopy(mFieldNumbers,i,mFieldNumbers,i + 1,mSize - i); _EL_       System.arraycopy(mData,i,mData,i + 1,mSize - i); _EL_     } _EL_     mFieldNumbers[i]=fieldNumber; _EL_     mData[i]=data; _EL_     mSize++; _EL_   } _EL_ } _EL_ ', 'void hideBorder(){ _EL_   Insets insets=getInsets(); _EL_   setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right)); _EL_ } _EL_ ', 'public void remove(String btxn){ _EL_ synchronized (filterMap) { _EL_     FilterProcessor oldfp=filterMap.get(btxn); _EL_     if (oldfp != null) { _EL_       globalExclusionFilters.remove(oldfp); _EL_       btxnFilters.remove(oldfp); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void add(double weight,double x,double y){ _EL_   observations.add(new WeightedObservedPoint(weight,x,y)); _EL_ } _EL_ ', 'public void supportTlsIntolerantServer(SSLSocket socket){ _EL_   socket.setEnabledProtocols(new String[]{"SSLv3"}); _EL_ } _EL_ ', 'public static List<ExecutionEntity> orderFromRootToLeaf(Collection<ExecutionEntity> executions){ _EL_   List<ExecutionEntity> orderedList=new ArrayList<ExecutionEntity>(executions.size()); _EL_   HashSet<String> previousIds=new HashSet<String>(); _EL_   for (  ExecutionEntity execution : executions) { _EL_     if (execution.getParentId() == null) { _EL_       orderedList.add(execution); _EL_       previousIds.add(execution.getId()); _EL_     } _EL_   } _EL_   while (orderedList.size() < executions.size()) { _EL_     for (    ExecutionEntity execution : executions) { _EL_       if (!previousIds.contains(execution.getId()) && previousIds.contains(execution.getParentId())) { _EL_         orderedList.add(execution); _EL_         previousIds.add(execution.getId()); _EL_       } _EL_     } _EL_   } _EL_   return orderedList; _EL_ } _EL_ ', 'public void initTKF91(){ _EL_   int iNumNodes=iParent.length; _EL_   double iBeta[]=new double[iNumNodes]; _EL_   iB=new double[iNumNodes]; _EL_   iE=new double[iNumNodes]; _EL_   iH=new double[iNumNodes]; _EL_   iN=new double[iNumNodes]; _EL_   iInitial=1.0; _EL_   for (int i=0; i < iNumNodes; i++) { _EL_     if (i == iNumNodes - 1) { _EL_       iBeta[i]=1.0 / iMu; _EL_       iH[i]=0.0; _EL_     } _EL_  else { _EL_       iBeta[i]=Math.exp((iLambda - iMu) * iTau[i]); _EL_       iBeta[i]=(1.0 - iBeta[i]) / (iMu - iLambda * iBeta[i]); _EL_       iH[i]=Math.exp(-iMu * iTau[i]) * (1.0 - iLambda * iBeta[i]); _EL_     } _EL_     iB[i]=iLambda * iBeta[i]; _EL_     iE[i]=iMu * iBeta[i]; _EL_     iN[i]=(1.0 - iMu * iBeta[i]) * (1.0 - iB[i]) - iH[i]; _EL_     iInitial*=(1.0 - iB[i]); _EL_   } _EL_ } _EL_ ', 'public static String serializeExpression(Node s){ _EL_   if (s instanceof ASTTerm) { _EL_     ASTTerm a=(ASTTerm)s; _EL_     return (a.isNotFlag() ? "!" : "") + " " + a.getTerm(); _EL_   } _EL_   String prefix=""; _EL_   String suffix=""; _EL_   String join=" "; _EL_   if (s instanceof ASTExpression) { _EL_     ASTExpression a=(ASTExpression)s; _EL_     prefix=(a.isNotFlag() ? "!" : "") + "("; _EL_     suffix=")"; _EL_     join=" " + a.getType() + " "; _EL_   } _EL_   List<String> children=new ArrayList<String>(); _EL_   for (int i=0; i < s.jjtGetNumChildren(); i++) { _EL_     children.add(serializeExpression(s.jjtGetChild(i))); _EL_   } _EL_   return prefix + StringUtils.join(children,join) + suffix; _EL_ } _EL_ ', 'private void defineInternalFrameMenuButtons(UIDefaults d){ _EL_   String p="InternalFrame:InternalFrameTitlePane:\\"InternalFrameTitlePane.menuButton\\""; _EL_   String c=PAINTER_PREFIX + "TitlePaneMenuButtonPainter"; _EL_   d.put(p + ".WindowNotFocused",new TitlePaneMenuButtonWindowNotFocusedState()); _EL_   d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0)); _EL_   d.put(p + "[Enabled].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_ENABLED)); _EL_   d.put(p + "[Disabled].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_DISABLED)); _EL_   d.put(p + "[MouseOver].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_MOUSEOVER)); _EL_   d.put(p + "[Pressed].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_PRESSED)); _EL_   d.put(p + "[Enabled+WindowNotFocused].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_ENABLED_WINDOWNOTFOCUSED)); _EL_   d.put(p + "[MouseOver+WindowNotFocused].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_MOUSEOVER_WINDOWNOTFOCUSED)); _EL_   d.put(p + "[Pressed+WindowNotFocused].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_PRESSED_WINDOWNOTFOCUSED)); _EL_   d.put(p + ".icon",new SeaGlassIcon(p,"iconPainter",19,18)); _EL_ } _EL_ ', 'public static Workflow.Method restoreFromCloneMethod(URI storage,List<URI> clone,Boolean updateOpStatus,boolean isCG){ _EL_   return new Workflow.Method("restoreFromCloneStep",storage,clone,updateOpStatus,isCG); _EL_ } _EL_ ', 'public void clearNameInUnoccupiedBlocks(){ _EL_   for (int i=0; i < mBlockEntries.size(); i++) { _EL_     Block b=mBlockEntries.get(i); _EL_     if (b.getState() == Block.UNOCCUPIED) { _EL_       b.setValue("  "); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static Object unserialize(Data data){ _EL_   try { _EL_     Class clazz=(Class)Class.forName((String)data.get("class")); _EL_     if (clazz.isEnum()) { _EL_       return Enum.valueOf(clazz,data.get("value")); _EL_     } _EL_  else     if (clazz == Vector3D.class) { _EL_       return new Vector3D(data.get("x"),data.get("y"),data.get("z")); _EL_     } _EL_  else     if (clazz == Vector2D.class) { _EL_       return new Vector2D(data.get("x"),(double)data.get("y")); _EL_     } _EL_  else { _EL_       return unserialize(clazz,data); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     throw new DataException(e); _EL_   } _EL_ } _EL_ ', 'public void pushTemplateFolder(@NotNull String folderName) throws IOException { _EL_   myLastTemplateFolders.push(resolveName(folderName)); _EL_ } _EL_ ', 'public void addEvent(SimEvent newEvent){ _EL_   double eventTime=newEvent.eventTime(); _EL_   if (eventTime >= maxTime) { _EL_     list.add(newEvent); _EL_     maxTime=eventTime; _EL_     return; _EL_   } _EL_   ListIterator<SimEvent> iterator=list.listIterator(); _EL_   SimEvent event; _EL_   while (iterator.hasNext()) { _EL_     event=iterator.next(); _EL_     if (event.eventTime() > eventTime) { _EL_       iterator.previous(); _EL_       iterator.add(newEvent); _EL_       return; _EL_     } _EL_   } _EL_   list.add(newEvent); _EL_ } _EL_ ', 'public DbSchemaEjbGenerator(GeneratedTables genTables,SchemaElement schemaElement){ _EL_   this(genTables,schemaElement,CollectionType.COLLECTION,false,false,false); _EL_ } _EL_ ', 'private static void addAbbreviation(String primitive,String abbreviation){ _EL_   abbreviationMap.put(primitive,abbreviation); _EL_   reverseAbbreviationMap.put(abbreviation,primitive); _EL_ } _EL_ ', 'private void initTreeMap(){ _EL_   if (entityType == null) { _EL_     entityType="Mouse"; _EL_   } _EL_   if (entityType.equalsIgnoreCase("Circle")) { _EL_     imageMap=RotatingEntityManager.getCircle(); _EL_   } _EL_   if (entityType.equalsIgnoreCase("Mouse")) { _EL_     imageMap=RotatingEntityManager.getMouse(); _EL_   } _EL_  else   if (entityType.equalsIgnoreCase("Amy")) { _EL_     imageMap=RotatingEntityManager.getRotatingTileset("amy",20); _EL_   } _EL_  else   if (entityType.equalsIgnoreCase("Arnold")) { _EL_     imageMap=RotatingEntityManager.getRotatingTileset("arno",20); _EL_   } _EL_  else   if (entityType.equalsIgnoreCase("Boy")) { _EL_     imageMap=RotatingEntityManager.getRotatingTileset("boy",20); _EL_   } _EL_  else   if (entityType.equalsIgnoreCase("Cow")) { _EL_     imageMap=RotatingEntityManager.getRotatingTileset("cow",25); _EL_   } _EL_  else   if (entityType.equalsIgnoreCase("Girl")) { _EL_     imageMap=RotatingEntityManager.getRotatingTileset("girl",20); _EL_   } _EL_  else   if (entityType.equalsIgnoreCase("Lion")) { _EL_     imageMap=RotatingEntityManager.getRotatingTileset("lion",15); _EL_   } _EL_  else   if (entityType.equalsIgnoreCase("Susi")) { _EL_     imageMap=RotatingEntityManager.getRotatingTileset("susi",20); _EL_   } _EL_  else   if (entityType.equalsIgnoreCase("Jake")) { _EL_     imageMap=RotatingEntityManager.getRotatingTileset("jake",20); _EL_   } _EL_  else   if (entityType.equalsIgnoreCase("Steve")) { _EL_     imageMap=RotatingEntityManager.getRotatingTileset("steve",20); _EL_   } _EL_   update(); _EL_ } _EL_ ', 'public static File locateReplicatorHomeDir(){ _EL_   if (replicatorHomeDir == null) { _EL_     String replicatorHome=System.getProperty(HOME_DIR); _EL_     if (replicatorHome == null)     replicatorHome=System.getProperty("user.dir"); _EL_     replicatorHomeDir=new File(replicatorHome); _EL_     if (!replicatorHomeDir.isDirectory()) { _EL_       throw new ServerRuntimeException("Replicator home does not exist or is invalid: " + replicatorHomeDir); _EL_     } _EL_   } _EL_   return replicatorHomeDir; _EL_ } _EL_ ', 'public StringData(String data){ _EL_   m_data=data; _EL_ } _EL_ ', 'void writeRepeatedSqr(DD xdd){ _EL_   if (xdd.ge(DD.valueOf(1)))   throw new IllegalArgumentException("Argument must be < 1"); _EL_   int count=0; _EL_   while (xdd.doubleValue() > 1e-300) { _EL_     count++; _EL_     if (count == 100)     count=count; _EL_     double x=xdd.doubleValue(); _EL_     DD xSqr=xdd.sqr(); _EL_     String s=xSqr.toString(); _EL_     DD xSqr2=DD.parse(s); _EL_     xdd=xSqr; _EL_   } _EL_ } _EL_ ', 'public java.lang.StringBuffer append(float f){ _EL_   internal.append(f); _EL_   return this; _EL_ } _EL_ ', 'public static final void open(File file) throws NoSuchMethodException { _EL_   if (Platform.isMacOSX()) { _EL_     execArgs("open",file.getAbsolutePath()); _EL_   } _EL_  else   if (Platform.isWindows()) { _EL_     if (file.isDirectory()) { _EL_       execArgs("explorer",file.getAbsolutePath()); _EL_     } _EL_  else { _EL_       execArgs("start",file.getAbsolutePath()); _EL_     } _EL_   } _EL_  else   if (Platform.isUnix() && hasUnixCommand("gnome-open")) { _EL_     execArgs("gnome-open",file.toString()); _EL_   } _EL_  else   if (Platform.isUnix() && hasUnixCommand("konqueror")) { _EL_     execArgs("konqueror",file.toString()); _EL_   } _EL_  else   if (Platform.isSolaris() && file.isDirectory()) { _EL_     execArgs("/usr/dt/bin/dtfile","-folder",file.getAbsolutePath()); _EL_   } _EL_  else { _EL_     throw new NoSuchMethodException("Cannot open files on this platform"); _EL_   } _EL_ } _EL_ ', 'public void close() throws java.io.IOException { _EL_   flushBuffer(); _EL_   m_os.close(); _EL_ } _EL_ ', 'private static String[] norm(String path){ _EL_   String[] elements=path.split("[/\\\\\\\\]"); _EL_   ArrayList<String> stack=new ArrayList<String>(); _EL_   for (  String e : elements) { _EL_     if (e.isEmpty() || e.equals("."))     continue; _EL_     if (e.equals("..")) { _EL_       if (!stack.isEmpty())       stack.remove(stack.size() - 1); _EL_  else       return null; _EL_       continue; _EL_     } _EL_     stack.add(e); _EL_   } _EL_   return stack.toArray(new String[stack.size()]); _EL_ } _EL_ ', 'static Random random(){ _EL_   if (null == LUCENE_TEST_CASE) { _EL_     return null; _EL_   } _EL_  else { _EL_     try { _EL_       Method randomMethod=LUCENE_TEST_CASE.getMethod("random"); _EL_       return (Random)randomMethod.invoke(null); _EL_     } _EL_  catch (    Exception e) { _EL_       throw new IllegalStateException("Unable to use reflection to invoke LuceneTestCase.random()",e); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected String record(String deployment){ _EL_   deployments.add(deployment); _EL_   return deployment; _EL_ } _EL_ ', '@Override public void onSuccess(DLSN value){ _EL_   if (value.getLogSegmentSequenceNo() != currentLogSegmentSeqNo) { _EL_     LOG.error("Ledger Seq No: {}, Expected: {}",value.getLogSegmentSequenceNo(),currentLogSegmentSeqNo); _EL_     errorsFound.set(true); _EL_   } _EL_   if (verifyEntryId && value.getEntryId() != currentEntryId) { _EL_     LOG.error("EntryId: {}, Expected: {}",value.getEntryId(),currentEntryId); _EL_     errorsFound.set(true); _EL_   } _EL_   syncLatch.countDown(); _EL_ } _EL_ ', 'private static void shutDownMySQLAbandonedConnectionCleanupThread(ClassLoader classLoader){ _EL_   try { _EL_     Class<?> mysqlCleanupThreadClass; _EL_     try { _EL_       mysqlCleanupThreadClass=classLoader.loadClass("com.mysql.jdbc.AbandonedConnectionCleanupThread"); _EL_     } _EL_  catch (    ClassNotFoundException e) { _EL_       LOG.trace("Failed to load MySQL abandoned connection cleanup thread class. Presuming DB App is " + "not being run with MySQL and ignoring",e); _EL_       return; _EL_     } _EL_     Method shutdownMethod=mysqlCleanupThreadClass.getMethod("shutdown"); _EL_     shutdownMethod.invoke(null); _EL_     LOG.debug("Successfully shutdown MySQL connection cleanup thread."); _EL_   } _EL_  catch (  Throwable e) { _EL_     LOG.warn("Failed to shutdown MySQL connection cleanup thread. Ignoring.",e); _EL_   } _EL_ } _EL_ ', 'public void write(byte[] buffer){ _EL_   if (isFinal) { _EL_     log.warning("attempting to write to a final SpeechData object"); _EL_     return; _EL_   } _EL_   byte[] newData=new byte[data.length + buffer.length]; _EL_   System.arraycopy(data,0,newData,0,data.length); _EL_   System.arraycopy(buffer,0,newData,data.length,buffer.length); _EL_   data=newData; _EL_ } _EL_ ', 'public String parse(String controlTemplate,Context controlContext) throws Exception { _EL_   this.controlContext=controlContext; _EL_   fillContextDefaults(this.controlContext); _EL_   fillContextProperties(this.controlContext); _EL_   Template template=getTemplate(controlTemplate,inputEncoding); _EL_   StringWriter sw=new StringWriter(); _EL_   template.merge(controlContext,sw); _EL_   return sw.toString(); _EL_ } _EL_ ', 'public static long writeFile(String path,byte[] jpeg,ExifInterface exif) throws IOException { _EL_   if (!createDirectoryIfNeeded(path)) { _EL_     Log.e(TAG,"Failed to create parent directory for file: " + path); _EL_     return -1; _EL_   } _EL_   if (exif != null) { _EL_     exif.writeExif(jpeg,path); _EL_     File f=new File(path); _EL_     return f.length(); _EL_   } _EL_  else { _EL_     return writeFile(path,jpeg); _EL_   } _EL_ } _EL_ ', 'private boolean checkForImageServers(){ _EL_   boolean imageServerExists=true; _EL_   List<URI> imageServerURIList=_dbClient.queryByType(ComputeImageServer.class,true); _EL_   ArrayList<URI> tempList=Lists.newArrayList(imageServerURIList.iterator()); _EL_   if (tempList.isEmpty()) { _EL_     imageServerExists=false; _EL_   } _EL_   return imageServerExists; _EL_ } _EL_ ', 'final long now(){ _EL_   return System.nanoTime(); _EL_ } _EL_ ', 'public void removeExtension(String ext){ _EL_ synchronized (exts) { _EL_     ext=ext.toLowerCase(); _EL_     exts.remove(ext); _EL_   } _EL_ } _EL_ ', 'protected SuballocatedIntVector findNamespaceContext(int elementNodeIndex){ _EL_   if (null != m_namespaceDeclSetElements) { _EL_     int wouldBeAt=findInSortedSuballocatedIntVector(m_namespaceDeclSetElements,elementNodeIndex); _EL_     if (wouldBeAt >= 0)     return (SuballocatedIntVector)m_namespaceDeclSets.elementAt(wouldBeAt); _EL_     if (wouldBeAt == -1)     return null; _EL_     wouldBeAt=-1 - wouldBeAt; _EL_     int candidate=m_namespaceDeclSetElements.elementAt(--wouldBeAt); _EL_     int ancestor=_parent(elementNodeIndex); _EL_     if (wouldBeAt == 0 && candidate < ancestor) { _EL_       int rootHandle=getDocumentRoot(makeNodeHandle(elementNodeIndex)); _EL_       int rootID=makeNodeIdentity(rootHandle); _EL_       int uppermostNSCandidateID; _EL_       if (getNodeType(rootHandle) == DTM.DOCUMENT_NODE) { _EL_         int ch=_firstch(rootID); _EL_         uppermostNSCandidateID=(ch != DTM.NULL) ? ch : rootID; _EL_       } _EL_  else { _EL_         uppermostNSCandidateID=rootID; _EL_       } _EL_       if (candidate == uppermostNSCandidateID) { _EL_         return (SuballocatedIntVector)m_namespaceDeclSets.elementAt(wouldBeAt); _EL_       } _EL_     } _EL_     while (wouldBeAt >= 0 && ancestor > 0) { _EL_       if (candidate == ancestor) { _EL_         return (SuballocatedIntVector)m_namespaceDeclSets.elementAt(wouldBeAt); _EL_       } _EL_  else       if (candidate < ancestor) { _EL_         do { _EL_           ancestor=_parent(ancestor); _EL_         } _EL_  while (candidate < ancestor); _EL_       } _EL_  else       if (wouldBeAt > 0) { _EL_         candidate=m_namespaceDeclSetElements.elementAt(--wouldBeAt); _EL_       } _EL_  else       break; _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public void addObserver(Observer observer){ _EL_   if (observer == null) { _EL_     throw new NullPointerException("observer == null"); _EL_   } _EL_ synchronized (this) { _EL_     if (!observers.contains(observer))     observers.add(observer); _EL_   } _EL_ } _EL_ ', 'protected double distance(int i,int k,int[] designations){ _EL_   return Math.sqrt(Math.max(selfK[i] - 2.0 / ownes[k] * evalSumK(i,k,designations) + meanSqrdNorms[k] * normConsts[k],0)); _EL_ } _EL_ ', 'public void add(String keyword,byte id){ _EL_   int key=getStringMapKey(keyword); _EL_   map[key]=new Keyword(keyword.toCharArray(),id,map[key]); _EL_ } _EL_ ', 'void release(Object owner,Field field){ _EL_   Map<String,Integer> fields=owners.get(owner); _EL_   if (fields != null) { _EL_     release(); _EL_     Integer count=fields.get(field.toGenericString()); _EL_     if (--count > 0) { _EL_       fields.put(field.toGenericString(),count); _EL_     } _EL_  else { _EL_       fields.remove(field.toGenericString()); _EL_     } _EL_   } _EL_   if (fields != null && fields.isEmpty()) { _EL_     owners.remove(owner); _EL_   } _EL_ } _EL_ ', 'public static List<DashboardDto> transformToDto(List<Dashboard> dashboards){ _EL_   if (dashboards == null) { _EL_     throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR); _EL_   } _EL_   List<DashboardDto> result=new ArrayList<DashboardDto>(); _EL_   for (  Dashboard dashboard : dashboards) { _EL_     result.add(transformToDto(dashboard)); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'static Executor screenExecutor(Executor e){ _EL_   if (!useCommonPool && e == ForkJoinPool.commonPool())   return asyncPool; _EL_   if (e == null)   throw new NullPointerException(); _EL_   return e; _EL_ } _EL_ ', 'public void addGroupPropertiesListener(GroupPropertiesListener groupPropertiesListener){ _EL_   groupPropertiesListeners.add(groupPropertiesListener); _EL_ } _EL_ ', 'public static void editGlobalFunctionComment(final AbstractSQLProvider provider,final INaviFunction function,final Integer commentId,final Integer userId,final String newComment) throws CouldntSaveDataException { _EL_   PostgreSQLCommentFunctions.editComment(provider,commentId,userId,newComment); _EL_ } _EL_ ', 'public synchronized void clearSessions(Context context,Boolean clearCredentials){ _EL_ synchronized (instance) { _EL_     while (mMXSessions.size() > 0) { _EL_       clearSession(context,mMXSessions.get(0),clearCredentials); _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean doesEntryExists(SSOToken token,String entryDN){ _EL_   try { _EL_     PersistentObject po=UMSObject.getObject(internalToken,new Guid(entryDN)); _EL_   } _EL_  catch (  UMSException ue) { _EL_     if (entryDN.indexOf("agents") < 0) { _EL_       if (debug.messageEnabled()) { _EL_         debug.message("DirectoryServicesImpl.doesProfileExist(): + " + "Exception caught: ",ue); _EL_       } _EL_     } _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private static char[] yy_unpack_cmap(String packed){ _EL_   char[] map=new char[0x10000]; _EL_   int i=0; _EL_   int j=0; _EL_   while (i < 86) { _EL_     int count=packed.charAt(i++); _EL_     char value=packed.charAt(i++); _EL_     do     map[j++]=value; _EL_  while (--count > 0); _EL_   } _EL_   return map; _EL_ } _EL_ ', 'private static int hashWrapperName(String xn){ _EL_   if (xn.length() < 3) { _EL_     return 0; _EL_   } _EL_   return (3 * xn.charAt(1) + xn.charAt(2)) % 16; _EL_ } _EL_ ', 'public boolean isString(String key){ _EL_   Object val=get(key); _EL_   return val instanceof String; _EL_ } _EL_ ', 'public Zdiagmat(Zmat A,int k) throws JampackException { _EL_   Parameters.BaseIndexNotChangeable=true; _EL_   basex=Parameters.BaseIndex; _EL_   if (k >= 0) { _EL_     if (k >= A.ncol) { _EL_       throw new JampackException("Diagonal out of range."); _EL_     } _EL_     order=Math.min(A.nrow,A.ncol - k); _EL_     re=new double[order]; _EL_     im=new double[order]; _EL_     for (int i=0; i < order; i++) { _EL_       re[i]=A.re[i][i + k]; _EL_       im[i]=A.im[i][i + k]; _EL_     } _EL_   } _EL_  else { _EL_     k=-k; _EL_     if (k >= A.nrow) { _EL_       throw new JampackException("Diagonal out of range."); _EL_     } _EL_     order=Math.min(A.nrow - k,A.ncol); _EL_     re=new double[order]; _EL_     im=new double[order]; _EL_     for (int i=0; i < order; i++) { _EL_       re[i]=A.re[i + k][i]; _EL_       im[i]=A.im[i + k][i]; _EL_     } _EL_   } _EL_   getProperties(); _EL_ } _EL_ ', 'public void buildNetwork(){ _EL_   Neuron firstNeuron=new Neuron(network,DEFAULT_NEURON_TYPE); _EL_   List<Neuron> currentLayer=new ArrayList<Neuron>(); _EL_   firstNeuron.setPosition(initialPosition); _EL_   currentLayer.add(firstNeuron); _EL_   int numNeuronsLastLayer=(int)Math.pow(numBrachesPerNeuron,numLayers); _EL_   double totalSpace=numNeuronsLastLayer * horizontalSpacing; _EL_   for (int layerIndex=1; layerIndex <= numLayers; layerIndex++) { _EL_     List<Neuron> tempList=new ArrayList<Neuron>(); _EL_     double layerSpacing=totalSpace / (int)Math.pow(numBrachesPerNeuron,layerIndex); _EL_     double branchWidth=layerSpacing * (numBrachesPerNeuron - 1); _EL_     for (    Neuron baseNeuron : currentLayer) { _EL_       network.addNeuron(baseNeuron); _EL_       double initialXOffset=branchWidth / 2; _EL_       for (int j=0; j < numBrachesPerNeuron; j++) { _EL_         Neuron targetNeuron=new Neuron(network,new LinearRule()); _EL_         targetNeuron.setLocation(baseNeuron.getX() - initialXOffset + (j * layerSpacing),initialPosition.y - (layerIndex * verticalSpacing)); _EL_         tempList.add(targetNeuron); _EL_         network.addNeuron(targetNeuron); _EL_         targetNeuron.setUpdatePriority(layerIndex); _EL_         Synapse synapse=new Synapse(network,baseNeuron,targetNeuron,new StaticSynapseRule()); _EL_         network.addSynapse(synapse); _EL_       } _EL_     } _EL_     currentLayer=tempList; _EL_   } _EL_ } _EL_ ', 'private static boolean areEqual(int fromIndex,CharSequence left,CharSequence right){ _EL_   if (left == right)   return true; _EL_   if ((left == null) || (right == null))   return false; _EL_   int n=left.length(); _EL_   if (right.length() != n)   return false; _EL_   for (int i=n; i > fromIndex; ) { _EL_     if (Character.toUpperCase(left.charAt(--i)) != Character.toUpperCase(right.charAt(i)))     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public Enumeration productions(){ _EL_   return _productions.elements(); _EL_ } _EL_ ', 'public void addTightSourceNode(ASTNode reference){ _EL_   fTightSourceRangeNodes.add(reference); _EL_   List<StructuralPropertyDescriptor> properties=reference.structuralPropertiesForType(); _EL_   for (Iterator<StructuralPropertyDescriptor> iterator=properties.iterator(); iterator.hasNext(); ) { _EL_     StructuralPropertyDescriptor descriptor=iterator.next(); _EL_     if (descriptor.isChildProperty()) { _EL_       ASTNode child=(ASTNode)reference.getStructuralProperty(descriptor); _EL_       if (child != null && isExtending(child,reference)) { _EL_         addTightSourceNode(child); _EL_       } _EL_     } _EL_  else     if (descriptor.isChildListProperty()) { _EL_       List<? extends ASTNode> children=(List<? extends ASTNode>)reference.getStructuralProperty(descriptor); _EL_       for (Iterator<? extends ASTNode> iterator2=children.iterator(); iterator2.hasNext(); ) { _EL_         ASTNode child=iterator2.next(); _EL_         if (isExtending(child,reference)) { _EL_           addTightSourceNode(child); _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public DJarInfo(JFrame parent) throws IOException { _EL_   this(parent,res.getString("DJarInfo.Title"),ModalityType.DOCUMENT_MODAL); _EL_ } _EL_ ', 'protected void transformPointArrayNoTouch(float[] pts){ _EL_   mMatrixValueToPx.mapPoints(pts); _EL_   mMatrixOffset.mapPoints(pts); _EL_ } _EL_ ', 'private void convertEscapedFunction(final StringBuilder target,final CharSequence escapedFunction) throws FBSQLParseException { _EL_   final String templateResult=FBEscapedFunctionHelper.convertTemplate(escapedFunction.toString(),mode); _EL_   target.append(templateResult != null ? templateResult : escapedFunction); _EL_ } _EL_ ', 'public static IPath stampToPath(final long stamp){ _EL_   fgCalendar.setTimeInMillis(stamp); _EL_   final StringBuffer buffer=new StringBuffer(256); _EL_   buffer.append(fgCalendar.get(Calendar.YEAR)); _EL_   buffer.append(IPath.SEPARATOR); _EL_   buffer.append(fgCalendar.get(Calendar.MONTH) + 1); _EL_   buffer.append(IPath.SEPARATOR); _EL_   buffer.append(fgCalendar.get(Calendar.WEEK_OF_YEAR)); _EL_   return new Path(buffer.toString()); _EL_ } _EL_ ', 'public void printUserMessage(UserMessage message){ _EL_   User user=message.user; _EL_   boolean ignored=message.ignored_compact; _EL_   if (ignored) { _EL_     printCompact("IGNORED",user); _EL_     return; _EL_   } _EL_   Color color=message.color; _EL_   boolean action=message.action; _EL_   String text=message.text; _EL_   TagEmotes emotes=message.emotes; _EL_   boolean highlighted=message.highlighted; _EL_   if (message.whisper && message.action) { _EL_     color=StyleConstants.getForeground(styles.info()); _EL_     highlighted=true; _EL_   } _EL_   closeCompactMode(); _EL_   MutableAttributeSet style; _EL_   if (highlighted) { _EL_     style=styles.highlight(color); _EL_   } _EL_  else { _EL_     style=styles.standard(); _EL_   } _EL_   print(getTimePrefix(),style); _EL_   printUser(user,action,message.whisper,message.id); _EL_   if (!highlighted && action && styles.actionColored()) { _EL_     style=styles.standard(user.getDisplayColor()); _EL_   } _EL_   printSpecials(text,user,style,emotes,false,message.bits > 0); _EL_   printNewline(); _EL_ } _EL_ ', 'public boolean connectImpl(String address,int port) throws IOException { _EL_   _socketTimeout=600000; _EL_   _nativeFd=-1; _EL_   _isClosed.set(false); _EL_ synchronized (_writeLock) { _EL_     boolean isConnect=nativeConnect(_socketFd,address,port); _EL_     return isConnect; _EL_   } _EL_ } _EL_ ', 'public static boolean isAccessModifier(String str){ _EL_   return str.equals("static") || str.equals("public") || str.equals("protected")|| str.equals("private")|| str.equals("final")|| str.equals("transient"); _EL_ } _EL_ ', 'protected void handleAppendRequestFailure(MemberState member,AppendRequest request,Throwable error){ _EL_   failAttempt(member,error); _EL_ } _EL_ ', 'private static SizePair selectSizePair(Camera camera,int desiredWidth,int desiredHeight){ _EL_   List<SizePair> validPreviewSizes=generateValidPreviewSizeList(camera); _EL_   SizePair selectedPair=null; _EL_   int minDiff=Integer.MAX_VALUE; _EL_   for (  SizePair sizePair : validPreviewSizes) { _EL_     Size size=sizePair.previewSize(); _EL_     int diff=Math.abs(size.getWidth() - desiredWidth) + Math.abs(size.getHeight() - desiredHeight); _EL_     if (diff < minDiff) { _EL_       selectedPair=sizePair; _EL_       minDiff=diff; _EL_     } _EL_   } _EL_   return selectedPair; _EL_ } _EL_ ', 'public static String decode(byte[] utf8) throws CharacterCodingException { _EL_   return decode(ByteBuffer.wrap(utf8),true); _EL_ } _EL_ ', 'protected final void acceptAnnotations(final MethodVisitor mv){ _EL_   int n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size(); _EL_   for (int i=0; i < n; ++i) { _EL_     TypeAnnotationNode an=visibleTypeAnnotations.get(i); _EL_     an.accept(mv.visitInsnAnnotation(an.typeRef,an.typePath,an.desc,true)); _EL_   } _EL_   n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size(); _EL_   for (int i=0; i < n; ++i) { _EL_     TypeAnnotationNode an=invisibleTypeAnnotations.get(i); _EL_     an.accept(mv.visitInsnAnnotation(an.typeRef,an.typePath,an.desc,false)); _EL_   } _EL_ } _EL_ ', 'public static <T>List<T> toList(T obj1,T obj2){ _EL_   List<T> list=new LinkedList<T>(); _EL_   list.add(obj1); _EL_   list.add(obj2); _EL_   return list; _EL_ } _EL_ ', 'protected void computeParameters(){ _EL_   if (m_SumOfWeights > 0) { _EL_     m_Mean=m_SumOfValues / m_SumOfWeights; _EL_     double stdDev=Math.sqrt(Math.abs(m_SumOfValuesSq - m_Mean * m_SumOfValues) / m_SumOfWeights); _EL_     if (stdDev > 1e-10) { _EL_       m_StandardDev=Math.max(m_Precision / (2 * 3),stdDev); _EL_     } _EL_   } _EL_ } _EL_ ', 'public String translateDataType(String sourceVendorName,String targetVendorName,String dataType,int size,int scale){ _EL_   return getDataType(targetVendorName,getDataTypeID(sourceVendorName,dataType),size,scale); _EL_ } _EL_ ', 'protected void moveDownSelected(){ _EL_   int selectedIndex=table.getSelectedRow(); _EL_   if (selectedIndex > -1) { _EL_     int index=data.moveDown(indexToModel(selectedIndex)); _EL_     setRowSelected(indexToView(index)); _EL_   } _EL_ } _EL_ ', 'JarWithFile(PathImpl backing){ _EL_   super(backing); _EL_ } _EL_ ', 'public List<Runnable> shutdownNow(){ _EL_   logger.info("Shutting down scanner immediately."); _EL_   return executor.shutdownNow(); _EL_ } _EL_ ', 'public static List<String> toRelativePaths(@NotNull VirtualFile root,@NotNull final Collection<FilePath> filePaths){ _EL_   ArrayList<String> rc=new ArrayList<String>(filePaths.size()); _EL_   for (  FilePath path : filePaths) { _EL_     rc.add(relativePath(root,path)); _EL_   } _EL_   return rc; _EL_ } _EL_ ', 'private void handleUnlockOrInstall(){ _EL_   if (isFinishing()) { _EL_     return; _EL_   } _EL_ switch (mKeyStore.state()) { _EL_ case UNINITIALIZED: _EL_ { _EL_       ensureKeyGuard(); _EL_       return; _EL_     } _EL_ case LOCKED: _EL_ { _EL_     new UnlockDialog(); _EL_     return; _EL_   } _EL_ case UNLOCKED: _EL_ { _EL_   if (!checkKeyGuardQuality()) { _EL_     new ConfigureKeyGuardDialog(); _EL_     return; _EL_   } _EL_   installIfAvailable(); _EL_   finish(); _EL_   return; _EL_ } _EL_ } _EL_ } _EL_ ', 'private void offsetStartTimeIfNecessary(Time startTime,Time endTime,String rrule,CalendarEventModel model){ _EL_   if (rrule == null || rrule.isEmpty()) { _EL_     return; _EL_   } _EL_   mEventRecurrence.parse(rrule); _EL_   if (mEventRecurrence.freq != EventRecurrence.WEEKLY) { _EL_     return; _EL_   } _EL_   if (mEventRecurrence.byday.length > mEventRecurrence.bydayCount) { _EL_     return; _EL_   } _EL_   int closestWeekday=Integer.MAX_VALUE; _EL_   int weekstart=EventRecurrence.day2TimeDay(mEventRecurrence.wkst); _EL_   int startDay=startTime.weekDay; _EL_   for (int i=0; i < mEventRecurrence.bydayCount; i++) { _EL_     int day=EventRecurrence.day2TimeDay(mEventRecurrence.byday[i]); _EL_     if (day == startDay) { _EL_       return; _EL_     } _EL_     if (day < weekstart) { _EL_       day+=7; _EL_     } _EL_     if (day > startDay && (day < closestWeekday || closestWeekday < startDay)) { _EL_       closestWeekday=day; _EL_     } _EL_     if (closestWeekday == Integer.MAX_VALUE || closestWeekday < startDay) { _EL_       if (day < closestWeekday) { _EL_         closestWeekday=day; _EL_       } _EL_     } _EL_   } _EL_   if (closestWeekday < startDay) { _EL_     closestWeekday+=7; _EL_   } _EL_   int daysOffset=closestWeekday - startDay; _EL_   startTime.monthDay+=daysOffset; _EL_   endTime.monthDay+=daysOffset; _EL_   long newStartTime=startTime.normalize(true); _EL_   long newEndTime=endTime.normalize(true); _EL_   model.mStart=newStartTime; _EL_   model.mEnd=newEndTime; _EL_ } _EL_ ', 'public Vector3 ceil(){ _EL_   return new Vector3(Math.ceil(x),Math.ceil(y),Math.ceil(z)); _EL_ } _EL_ ', 'public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){ _EL_   String subSignature=method.getSubSignature(); _EL_   if (subSignature.equals("java.lang.Throwable fillInStackTrace()")) { _EL_     java_lang_Throwable_fillInStackTrace(method,thisVar,returnVar,params); _EL_     return; _EL_   } _EL_  else { _EL_     defaultMethod(method,thisVar,returnVar,params); _EL_     return; _EL_   } _EL_ } _EL_ ', 'private void cleanUpFrontier(){ _EL_   while (!frontier.isEmpty() && isExplored(frontier.element()))   frontier.remove(); _EL_ } _EL_ ', 'private void parseAttributes(TypedArray a){ _EL_   barWidth=(int)a.getDimension(R.styleable.ProgressWheel_pwBarWidth,barWidth); _EL_   rimWidth=(int)a.getDimension(R.styleable.ProgressWheel_pwRimWidth,rimWidth); _EL_   spinSpeed=(int)a.getDimension(R.styleable.ProgressWheel_pwSpinSpeed,spinSpeed); _EL_   barLength=(int)a.getDimension(R.styleable.ProgressWheel_pwBarLength,barLength); _EL_   delayMillis=a.getInteger(R.styleable.ProgressWheel_pwDelayMillis,delayMillis); _EL_   if (delayMillis < 0) { _EL_     delayMillis=10; _EL_   } _EL_   if (a.hasValue(R.styleable.ProgressWheel_pwText)) { _EL_     setText(a.getString(R.styleable.ProgressWheel_pwText)); _EL_   } _EL_   barColor=a.getColor(R.styleable.ProgressWheel_pwBarColor,barColor); _EL_   textColor=a.getColor(R.styleable.ProgressWheel_pwTextColor,textColor); _EL_   rimColor=a.getColor(R.styleable.ProgressWheel_pwRimColor,rimColor); _EL_   circleColor=a.getColor(R.styleable.ProgressWheel_pwCircleColor,circleColor); _EL_   contourColor=a.getColor(R.styleable.ProgressWheel_pwContourColor,contourColor); _EL_   textSize=(int)a.getDimension(R.styleable.ProgressWheel_pwTextSize,textSize); _EL_   contourSize=a.getDimension(R.styleable.ProgressWheel_pwContourSize,contourSize); _EL_   a.recycle(); _EL_ } _EL_ ', 'public static byte[] concatenate(byte[] a,byte[] b){ _EL_   byte[] output=new byte[a.length + b.length]; _EL_   System.arraycopy(a,0,output,0,a.length); _EL_   System.arraycopy(b,0,output,a.length,b.length); _EL_   return output; _EL_ } _EL_ ', 'public final AssertSubscriber<T> assertTerminated(){ _EL_   if (cdl.getCount() != 0) { _EL_     throw new AssertionError("Not terminated",null); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'protected static void assertArgument(final boolean validArg,final String message,final Object... args){ _EL_   if (!validArg) { _EL_     throw new IllegalArgumentException(String.format(message,args)); _EL_   } _EL_ } _EL_ ', 'public static boolean isBeforeToday(Calendar _calendar){ _EL_   return _calendar.before(Calendar.getInstance()); _EL_ } _EL_ ', 'public static ViewItemGroup buildLoginUI(ModelApplication modelApp,Activity activity){ _EL_   ViewItemGroup viewItems=new ViewItemGroup(activity); _EL_   TextView usernameText=new TextView(activity); _EL_   usernameText.setText(R.string.username); _EL_   viewItems.addView(usernameText); _EL_   ViewItemFactory viewItemFactory=ViewItemFactory.instance(); _EL_   ViewItem usernameItem=viewItemFactory.create(LoginViewID.USERNAME,viewItemFactory.TEXT_DATATYPE_DB_ID,activity); _EL_   viewItems.addViewItem(usernameItem,new OmniText(modelApp.getUsername())); _EL_   TextView passwordText=new TextView(activity); _EL_   passwordText.setText(R.string.password); _EL_   viewItems.addView(passwordText); _EL_   ViewItem passwordItem=viewItemFactory.create(LoginViewID.PASSWORD,viewItemFactory.PASSWORD_INPUT_DATATYPE_DB_ID,activity); _EL_   viewItems.addViewItem(passwordItem,new OmniPasswordInput(modelApp.getPassword())); _EL_   return viewItems; _EL_ } _EL_ ', 'public void unMapVolumeFromSCSIInitiator(String volumeId,String initiatorId) throws Exception { _EL_   String uri=ScaleIOConstants.getUnmapVolumeToScsiInitiatorURI(volumeId); _EL_   ScaleIOUnmapVolumeToScsiInitiator unmapParm=new ScaleIOUnmapVolumeToScsiInitiator(); _EL_   unmapParm.setScsiInitiatorId(initiatorId); _EL_   post(URI.create(uri),getJsonForEntity(unmapParm)); _EL_ } _EL_ ', 'private static void addQuarterArc(Path2D.Float path,float x1,float y1,float x2,float y2,float curvature,boolean verticalStart){ _EL_   boolean down=y1 < y2; _EL_   boolean left=x1 > x2; _EL_   float cx1=0; _EL_   float cy1=0; _EL_   float cx2=0; _EL_   float cy2=0; _EL_   if (verticalStart) { _EL_     cx1=x1; _EL_     cy2=y2; _EL_     if (left) { _EL_       cx2=x1 - curvature; _EL_     } _EL_  else { _EL_       cx2=x1 + curvature; _EL_     } _EL_     if (down) { _EL_       cy1=y2 - curvature; _EL_     } _EL_  else { _EL_       cy1=y2 + curvature; _EL_     } _EL_   } _EL_  else { _EL_     cx2=x2; _EL_     cy1=y1; _EL_     if (left) { _EL_       cx1=x2 + curvature; _EL_     } _EL_  else { _EL_       cx1=x2 - curvature; _EL_     } _EL_     if (down) { _EL_       cy2=y1 + curvature; _EL_     } _EL_  else { _EL_       cy2=y1 - curvature; _EL_     } _EL_   } _EL_   path.curveTo(cx1,cy1,cx2,cy2,x2,y2); _EL_ } _EL_ ', '@Override public void parse(String content,Node block){ _EL_   this.block=block; _EL_   this.input=content.trim(); _EL_   this.index=0; _EL_   this.lastDelimiter=null; _EL_   this.lastBracket=null; _EL_   boolean moreToParse; _EL_   do { _EL_     moreToParse=parseInline(); _EL_   } _EL_  while (moreToParse); _EL_   processDelimiters(null); _EL_   mergeTextNodes(block.getFirstChild(),block.getLastChild()); _EL_ } _EL_ ', 'public static void random(byte[] b,int offset,int length){ _EL_   checkPositionIndex(offset,b.length,"offset"); _EL_   checkArgument(length > 0,"length must be greater than 0"); _EL_   checkPositionIndex(offset + length,b.length,"offset + length"); _EL_   byte[] buf=new byte[length]; _EL_   RNG.nextBytes(buf); _EL_   System.arraycopy(buf,0,b,offset,length); _EL_ } _EL_ ', 'public void removeAllScanningCallbacks(){ _EL_   scanningCallbacks.clear(); _EL_ } _EL_ ', 'public int read(byte[] buf,int off,int len) throws TTransportException { _EL_   if (inputStream_ == null) { _EL_     throw new TTransportException(TTransportException.NOT_OPEN,"Cannot read from null inputStream"); _EL_   } _EL_   int bytesRead; _EL_   try { _EL_     bytesRead=inputStream_.read(buf,off,len); _EL_   } _EL_  catch (  IOException iox) { _EL_     throw new TTransportException(TTransportException.UNKNOWN,iox); _EL_   } _EL_   if (bytesRead < 0) { _EL_     throw new TTransportException(TTransportException.END_OF_FILE); _EL_   } _EL_   return bytesRead; _EL_ } _EL_ ', 'public void handleManagerCreation() throws ManagementException { _EL_   if (!isServiceInitialised("handleManagerCreation")) { _EL_     return; _EL_   } _EL_   ObjectName managerMBeanName=MBeanJMXAdapter.getManagerName(); _EL_   ManagerMBeanBridge bridge=new ManagerMBeanBridge(service); _EL_   ManagerMXBean bean=new ManagerMBean(bridge); _EL_   service.registerInternalMBean(bean,managerMBeanName); _EL_ } _EL_ ', '@SuppressWarnings("unused") private boolean checkSetShape(Shape oldShape,Shape newShape){ _EL_   Shape currentShape=getShape(); _EL_   assert oldShape != newShape : "Wrong old shape assumption?"; _EL_   assert newShape != currentShape : "Redundant shape change? shape=" + currentShape; _EL_   assert oldShape == currentShape || oldShape.getParent() == currentShape : "Out-of-order shape change?" + "\\nparentShape=" + currentShape + "\\noldShape="+ oldShape+ "\\nnewShape="+ newShape; _EL_   return true; _EL_ } _EL_ ', 'protected boolean isFileVisible(File file){ _EL_   if (file == null || !file.exists() || !file.canRead() || file.isHidden()) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static String[] append(final String[] a,final String... b){ _EL_   final int alen=a.length; _EL_   final int blen=b.length; _EL_   final String[] res=Arrays.copyOf(a,alen + blen); _EL_   System.arraycopy(b,0,res,alen,blen); _EL_   return res; _EL_ } _EL_ ', 'public void delete() throws AMException, SSOException { _EL_   delete(false); _EL_ } _EL_ ', 'public String(byte[] bytes,int off,int len,java.lang.String enc) throws java.io.UnsupportedEncodingException { _EL_   this(bytesToChars(bytes,off,len,enc)); _EL_ } _EL_ ', 'private boolean initializeSearchItemset(BitVector bv,int[] scratchi,int[] iters){ _EL_   for (int i=0; i < scratchi.length; i++) { _EL_     iters[i]=(i == 0) ? bv.iter() : bv.iterAdvance(iters[i - 1]); _EL_     if (iters[i] < 0) { _EL_       return false; _EL_     } _EL_     scratchi[i]=bv.iterDim(iters[i]); _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private Rectangle computeEditorBounds(){ _EL_   if (row == -1 || column == -1)   return new Rectangle(0,0,0,0); _EL_   Rectangle cell=grid.getCellBounds(column,row); _EL_   Rectangle area=grid.getClientArea(); _EL_   if (cell.x < area.x + area.width) { _EL_     if (cell.x + cell.width > area.x + area.width) { _EL_       cell.width=area.x + area.width - cell.x; _EL_     } _EL_   } _EL_   Rectangle editorRect=new Rectangle(cell.x,cell.y,minimumWidth,minimumHeight); _EL_   if (grabHorizontal) { _EL_     editorRect.width=Math.max(cell.width,minimumWidth); _EL_   } _EL_   if (grabVertical) { _EL_     editorRect.height=Math.max(cell.height,minimumHeight); _EL_   } _EL_   if (horizontalAlignment == SWT.RIGHT) { _EL_     editorRect.x+=cell.width - editorRect.width; _EL_   } _EL_  else   if (horizontalAlignment == SWT.LEFT) { _EL_   } _EL_  else { _EL_     editorRect.x+=(cell.width - editorRect.width) / 2; _EL_   } _EL_   if (verticalAlignment == SWT.BOTTOM) { _EL_     editorRect.y+=cell.height - editorRect.height; _EL_   } _EL_  else   if (verticalAlignment == SWT.TOP) { _EL_   } _EL_  else { _EL_     editorRect.y+=(cell.height - editorRect.height) / 2; _EL_   } _EL_   return editorRect; _EL_ } _EL_ ', 'public int read(byte[] buffer,int offset,int length) throws IOException { _EL_   throw new UnsupportedOperationException(String.valueOf(this)); _EL_ } _EL_ ', 'public boolean isNewMessage(){ _EL_   if (message == null) { _EL_     throw new IllegalStateException("no message present"); _EL_   } _EL_   return message.startsWith("new(") || message.equals("new"); _EL_ } _EL_ ', 'private void installProperties(){ _EL_   System.setProperty("http.agent",UserAgentGenerator.getUserAgent()); _EL_   if (OSUtils.isMacOSX()) { _EL_     System.setProperty("apple.laf.useScreenMenuBar","true"); _EL_   } _EL_ } _EL_ ', 'private void loadRecipients(int addressType,HashSet<String> recipients,HashMap<Integer,EncodedStringValue[]> addressMap,boolean excludeMyNumber){ _EL_   EncodedStringValue[] array=addressMap.get(addressType); _EL_   if (array == null) { _EL_     return; _EL_   } _EL_   if (excludeMyNumber && array.length == 1) { _EL_     return; _EL_   } _EL_   String myNumber=excludeMyNumber ? mTelephonyManager.getLine1Number() : null; _EL_   for (  EncodedStringValue v : array) { _EL_     if (v != null) { _EL_       String number=v.getString(); _EL_       if ((myNumber == null || !PhoneNumberUtils.compare(number,myNumber)) && !recipients.contains(number)) { _EL_         recipients.add(number); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public static boolean isExtension(String filename,String extension){ _EL_   if (filename == null) { _EL_     return false; _EL_   } _EL_   if (extension == null || extension.length() == 0) { _EL_     return indexOfExtension(filename) == -1; _EL_   } _EL_   String fileExt=getExtension(filename); _EL_   return fileExt.equals(extension); _EL_ } _EL_ ', 'private String scriptFromDisk(String name){ _EL_   name=name.replace(\'\\\\\',\'/\'); _EL_   final char SEP=\';\'; _EL_   String pkgPart=""; _EL_   String pathPart=""; _EL_   String namePart=""; _EL_   int at=name.indexOf(SEP); _EL_   if (at > -1) { _EL_     int nextAt=name.indexOf(SEP,at + 1); _EL_     if (nextAt > -1) { _EL_       pathPart=name.substring(0,at); _EL_       pkgPart=name.substring(at + 1,nextAt); _EL_       namePart=name.substring(nextAt + 1); _EL_     } _EL_  else { _EL_       pathPart=name.substring(0,at); _EL_       namePart=name.substring(at + 1); _EL_     } _EL_   } _EL_  else { _EL_     at=name.lastIndexOf(\'/\'); _EL_     if (at > -1) { _EL_       int mx=name.lastIndexOf("/mx/"); _EL_       if (mx > -1) { _EL_         pathPart=name.substring(0,mx); _EL_         pkgPart=name.substring(mx + 1,at); _EL_       } _EL_  else { _EL_         pathPart=name.substring(0,at); _EL_       } _EL_       namePart=name.substring(at + 1); _EL_     } _EL_  else { _EL_       pathPart="."; _EL_       namePart=name; _EL_     } _EL_   } _EL_   String script=null; _EL_   try { _EL_     Charset realEncoding=null; _EL_     Charset bomEncoding=null; _EL_     InputStream in=locateScriptFile(pathPart,pkgPart,namePart); _EL_     if (in != null) { _EL_       try { _EL_         BufferedInputStream bis=new BufferedInputStream(in); _EL_         bomEncoding=getEncodingFromBOM(bis); _EL_         script=pullInSource(bis,bomEncoding); _EL_         realEncoding=getEncodingFromXMLDirective(script); _EL_       } _EL_   finally { _EL_         try { _EL_           in.close(); _EL_         } _EL_  catch (        IOException e) { _EL_         } _EL_       } _EL_     } _EL_     if (realEncoding != null && !realEncoding.equals(bomEncoding)) { _EL_       in=locateScriptFile(pathPart,pkgPart,namePart); _EL_       if (in != null) { _EL_         try { _EL_           BufferedInputStream bis=new BufferedInputStream(in); _EL_           getEncodingFromBOM(bis); _EL_           script=pullInSource(bis,realEncoding); _EL_         } _EL_   finally { _EL_           try { _EL_             in.close(); _EL_           } _EL_  catch (          IOException e) { _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_  catch (  FileNotFoundException fnf) { _EL_     fnf.printStackTrace(); _EL_   } _EL_   return script; _EL_ } _EL_ ', '@PrePersist public void prePersist(){ _EL_   lockTime=System.currentTimeMillis(); _EL_ } _EL_ ', 'public LibPadstack add(String p_name,ShapeConvex[] p_shapes,boolean p_attach_allowed,boolean p_placed_absolute){ _EL_   int pad_no=count() + 1; _EL_   LibPadstack new_padstack=new LibPadstack(p_name,pad_no,p_shapes,p_attach_allowed,p_placed_absolute); _EL_   padstack_list.add(new_padstack); _EL_   return new_padstack; _EL_ } _EL_ ', '@Override public void startContentModel(String elementName,Augmentations augs) throws XNIException { _EL_   if (fValidation) { _EL_     fDTDElementDeclName=elementName; _EL_     fMixedElementTypes.clear(); _EL_   } _EL_   if (fDTDGrammar != null)   fDTDGrammar.startContentModel(elementName,augs); _EL_   if (fDTDContentModelHandler != null) { _EL_     fDTDContentModelHandler.startContentModel(elementName,augs); _EL_   } _EL_ } _EL_ ', 'public OMRangeRings(LatLonPoint center,double radius,Length units,int nverts){ _EL_   super(center,radius,units,nverts); _EL_   centerPoint=createCenterPoint(); _EL_   form.setMaximumFractionDigits(2); _EL_ } _EL_ ', 'public static InputSource createInputSource(String s){ _EL_   try { _EL_     return new InputSource(new ByteArrayInputStream(s.getBytes("UTF-8"))); _EL_   } _EL_  catch (  UnsupportedEncodingException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ } _EL_ ', 'public static Preferences userRoot(){ _EL_   return factory.userRoot(); _EL_ } _EL_ ', 'public static String toDebugString(final long socketIdentifier){ _EL_   final int ipBits=(int)socketIdentifier; _EL_   final int port=extractPortNumber(socketIdentifier); _EL_   final int inode=(int)(socketIdentifier >> 48); _EL_   return Integer.toHexString(ipBits) + ":" + port+ "/"+ inode; _EL_ } _EL_ ', 'public static int XToTileX(int x,int tileGridXOffset,int tileWidth){ _EL_   x-=tileGridXOffset; _EL_   if (x < 0) { _EL_     x+=1 - tileWidth; _EL_   } _EL_   return x / tileWidth; _EL_ } _EL_ ', 'public Input(String name,@InputType int type,@Alignment int align,Connection connection){ _EL_   mName=name; _EL_   mType=type; _EL_   mAlign=align; _EL_   mConnection=connection; _EL_   if (mConnection != null) { _EL_     mConnection.setInput(this); _EL_   } _EL_ } _EL_ ', 'public static BshClassManager createClassManager(Interpreter interpreter){ _EL_   BshClassManager manager; _EL_   if (Capabilities.classExists("java.lang.ref.WeakReference") && Capabilities.classExists("java.util.HashMap") && Capabilities.classExists("bsh.classpath.ClassManagerImpl"))   try { _EL_     Class clas=Class.forName("bsh.classpath.ClassManagerImpl"); _EL_     manager=(BshClassManager)clas.newInstance(); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new InterpreterError("Error loading classmanager: " + e); _EL_   } _EL_  else   manager=new BshClassManager(); _EL_   if (interpreter == null)   interpreter=new Interpreter(); _EL_   manager.declaringInterpreter=interpreter; _EL_   return manager; _EL_ } _EL_ ', 'public int swap(){ _EL_   if (!mEgl.eglSwapBuffers(mEglDisplay,mEglSurface)) { _EL_     return mEgl.eglGetError(); _EL_   } _EL_   return EGL10.EGL_SUCCESS; _EL_ } _EL_ ', 'public void requestLastLoginTime(){ _EL_   operations.add(PasswordPolicyStateOperationType.GET_LAST_LOGIN_TIME); _EL_ } _EL_ ', 'public static Stream<String> wordsOf(String text){ _EL_   requireNonNull(text); _EL_   return WORDS.splitAsStream(text); _EL_ } _EL_ ', 'public void add(AppInfo info){ _EL_   if (mAppFilter != null && !mAppFilter.shouldShowApp(info.componentName)) { _EL_     return; _EL_   } _EL_   if (findActivity(data,info.componentName,info.user)) { _EL_     return; _EL_   } _EL_   data.add(info); _EL_   added.add(info); _EL_ } _EL_ ', 'public Joiner match(String field,Object... value){ _EL_   return match(field,Arrays.asList(value)); _EL_ } _EL_ ', 'private String removeYouTubeMarkup(String plot){ _EL_   if (plot == null)   return null; _EL_   return plot.replaceAll("\\\\[.*\\\\]",""); _EL_ } _EL_ ', 'private String createDashArrayString(List<Float> dashesArray){ _EL_   StringBuilder sb=new StringBuilder(); _EL_   if (dashesArray != null) { _EL_     int index=0; _EL_     for (    Float value : dashesArray) { _EL_       String str=Float.toString(value); _EL_       if (str.endsWith(".0")) { _EL_         sb.append(value.intValue()); _EL_       } _EL_  else { _EL_         sb.append(value); _EL_       } _EL_       if (index < dashesArray.size() - 1) { _EL_         sb.append(" "); _EL_       } _EL_       index++; _EL_     } _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'public long position(java.sql.Blob pattern,long start) throws SQLException { _EL_   return position(pattern.getBytes(0,(int)pattern.length()),start); _EL_ } _EL_ ', 'public boolean checkTableExists(TableDefinition table){ _EL_   String column=null; _EL_   for (  FieldDefinition field : table.getFields()) { _EL_     if (column == null) { _EL_       column=field.getName(); _EL_     } _EL_  else     if (field.isPrimaryKey()) { _EL_       column=field.getName(); _EL_       break; _EL_     } _EL_   } _EL_   String sql="SELECT " + column + " FROM "+ table.getFullName()+ " WHERE "+ column+ " <> "+ column; _EL_   DataReadQuery query=new DataReadQuery(sql); _EL_   query.setMaxRows(1); _EL_   try { _EL_     session.executeQuery(query); _EL_     return true; _EL_   } _EL_  catch (  Exception notFound) { _EL_     return false; _EL_   } _EL_  finally { _EL_   } _EL_ } _EL_ ', 'private int processColon(int length){ _EL_   if (_hasScheme) { _EL_     if (!readUserPass(length) && _buffer.length() > 0) { _EL_       _reader.goBack(); _EL_       _buffer.delete(_buffer.length() - 1,_buffer.length()); _EL_       int backtrackOnFail=_reader.getPosition() - _buffer.length() + length; _EL_       if (!readDomainName(_buffer.substring(length))) { _EL_         _reader.seek(backtrackOnFail); _EL_         readEnd(ReadEndState.InvalidUrl); _EL_       } _EL_       length=0; _EL_     } _EL_   } _EL_  else   if (readScheme() && _buffer.length() > 0) { _EL_     _hasScheme=true; _EL_     length=_buffer.length(); _EL_   } _EL_  else   if (_buffer.length() > 0 && _options.hasFlag(UrlDetectorOptions.ALLOW_SINGLE_LEVEL_DOMAIN) && _reader.canReadChars(1)) { _EL_     _reader.goBack(); _EL_     _buffer.delete(_buffer.length() - 1,_buffer.length()); _EL_     readDomainName(_buffer.toString()); _EL_   } _EL_  else { _EL_     readEnd(ReadEndState.InvalidUrl); _EL_     length=0; _EL_   } _EL_   return length; _EL_ } _EL_ ', 'public void compress(byte[] bytes,int off,int len,OutputStream os){ _EL_   try { _EL_     os.write(bytes,off,len); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ } _EL_ ', 'public void assertNotJoined(final UUID serviceId){ _EL_   m_triggers.add(new QuorumEventInvariant(QuorumEventEnum.SERVICE_JOIN,serviceId)); _EL_   if (isMember(m_quorum.getJoined(),serviceId))   broken(); _EL_ } _EL_ ', 'public int encryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException { _EL_   if ((inOff + blockSize) > in.length) { _EL_     throw new DataLengthException("input buffer too short"); _EL_   } _EL_   if ((outOff + blockSize) > out.length) { _EL_     throw new DataLengthException("output buffer too short"); _EL_   } _EL_   cipher.processBlock(cfbV,0,cfbOutV,0); _EL_   for (int i=0; i < blockSize; i++) { _EL_     out[outOff + i]=(byte)(cfbOutV[i] ^ in[inOff + i]); _EL_   } _EL_   System.arraycopy(cfbV,blockSize,cfbV,0,cfbV.length - blockSize); _EL_   System.arraycopy(out,outOff,cfbV,cfbV.length - blockSize,blockSize); _EL_   return blockSize; _EL_ } _EL_ ', 'public final void print(String value){ _EL_   try { _EL_     Element rootElement=workDoc.getDefaultRootElement(); _EL_     int deleteLines=rootElement.getElementCount() - linesMax; _EL_     for (int index=0; index < deleteLines; index++) { _EL_       Element elem=rootElement.getElement(0); _EL_       workDoc.remove(elem.getStartOffset(),elem.getEndOffset()); _EL_     } _EL_     workDoc.insertString(workDoc.getLength(),value,null); _EL_     textArea.setCaretPosition(workDoc.getLength()); _EL_   } _EL_  catch (  Exception exc) { _EL_     exc.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'private void addConnectionGroups(Collection<ConnectionGroup> connectionGroups){ _EL_   for (  ConnectionGroup connectionGroup : connectionGroups) { _EL_     APIConnectionGroup parent=retrievedGroups.get(connectionGroup.getParentIdentifier()); _EL_     if (parent != null) { _EL_       Collection<APIConnectionGroup> children=parent.getChildConnectionGroups(); _EL_       if (children == null) { _EL_         children=new ArrayList<APIConnectionGroup>(); _EL_         parent.setChildConnectionGroups(children); _EL_       } _EL_       APIConnectionGroup apiConnectionGroup=new APIConnectionGroup(connectionGroup); _EL_       retrievedGroups.put(connectionGroup.getIdentifier(),apiConnectionGroup); _EL_       children.add(apiConnectionGroup); _EL_     } _EL_  else     logger.debug("Connection group \\"{}\\" cannot be added to the tree: parent \\"{}\\" does not actually exist.",connectionGroup.getIdentifier(),connectionGroup.getParentIdentifier()); _EL_   } _EL_ } _EL_ ', 'public void loadMap(InputStream input,String groupID) throws Exception { _EL_   shapes=parser.parse(input,groupID); _EL_   boundaries=new ArrayList<Rect2D>(shapes.size()); _EL_   for (  IGeometric2D shape : shapes) { _EL_     boundaries.add(shape.getBounds()); _EL_   } _EL_ } _EL_ ', 'public void addDecoration(LineDecoration decoration){ _EL_   if (decoration != null) { _EL_     decorations.add(decoration); _EL_   } _EL_ } _EL_ ', 'private String parseLinkTitle(){ _EL_   String title=match(LINK_TITLE); _EL_   if (title != null) { _EL_     return Escaping.unescapeString(title.substring(1,title.length() - 1)); _EL_   } _EL_  else { _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public void recordSRDFOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,Object... extParam){ _EL_   try { _EL_     boolean opStatus=(Operation.Status.ready == status) ? true : false; _EL_     String evType; _EL_     evType=opType.getEvType(opStatus); _EL_     String evDesc=opType.getDescription(); _EL_     String opStage=AuditLogManager.AUDITOP_END; _EL_     _logger.info("opType: {} detail: {}",opType.toString(),evType.toString() + \':\' + evDesc); _EL_     recordBourneSRDFEvent(dbClient,getId(),evType,status,evDesc); _EL_     String id=(String)extParam[0]; _EL_ switch (opType) { _EL_ case CREATE_SRDF_LINK: _EL_       AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam); _EL_     break; _EL_ case SUSPEND_SRDF_LINK: _EL_   AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam); _EL_ break; _EL_ case DETACH_SRDF_LINK: _EL_ AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam); _EL_ break; _EL_ case PAUSE_SRDF_LINK: _EL_ AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam); _EL_ break; _EL_ case RESUME_SRDF_LINK: _EL_ AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam); _EL_ break; _EL_ case FAILOVER_SRDF_LINK: _EL_ AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam); _EL_ break; _EL_ case SWAP_SRDF_VOLUME: _EL_ AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam); _EL_ break; _EL_ case STOP_SRDF_LINK: _EL_ AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam); _EL_ break; _EL_ case SYNC_SRDF_LINK: _EL_ AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam); _EL_ break; _EL_ default : _EL_ _logger.error("unrecognized SRDF operation type"); _EL_ } _EL_ } _EL_  catch (Exception e) { _EL_ _logger.error("Failed to record SRDF operation {}, err: {}",opType.toString(),e); _EL_ } _EL_ } _EL_ ', 'public int size(){ _EL_   return m_RecentItems.size(); _EL_ } _EL_ ', 'public JCDiagnostic warning(LintCategory lc,String key,Object... args){ _EL_   return create(WARNING,lc,EnumSet.noneOf(DiagnosticFlag.class),null,null,key,args); _EL_ } _EL_ ', 'public Destructurer(final Tree.Pattern that,final GenerateJsVisitor gen,final Set<Declaration> directAccess,final String expvar,boolean first,final boolean forAssert){ _EL_   this.gen=gen; _EL_   jsw=gen == null ? null : gen.out; _EL_   names=gen == null ? null : gen.getNames(); _EL_   this.directAccess=directAccess; _EL_   this.expvar=expvar; _EL_   this.first=first; _EL_   this.forAssert=forAssert; _EL_   that.visit(this); _EL_   if (jsw != null && !attribs.isEmpty()) { _EL_     for (    Value attr : attribs) { _EL_       jsw.write(";",names.self((TypeDeclaration)attr.getContainer()),".",names.name(attr),"=",names.name(attr)); _EL_     } _EL_   } _EL_ } _EL_ ', '@SuppressWarnings("unused") public void handleTblSubConfigButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException { _EL_   submitCycle=true; _EL_   CCActionTable tbl=(CCActionTable)getChild(TBL_SUB_CONFIG); _EL_   tbl.restoreStateData(); _EL_   CCActionTableModel tblModel=(CCActionTableModel)tbl.getModel(); _EL_   Integer[] selected=tblModel.getSelectedRows(); _EL_   SerializedField szCache=(SerializedField)getChild(SZ_CACHE); _EL_   List list=szCache.getSerializedObj(); _EL_   Set<String> names=new HashSet<>(selected.length * 2); _EL_   for (  Integer index : selected) { _EL_     SMSubConfig sc=(SMSubConfig)list.get(index); _EL_     names.add(sc.getName()); _EL_   } _EL_   try { _EL_     AbstractAuditModel model=(AbstractAuditModel)getModel(); _EL_     model.deleteEventHandles(names); _EL_     if (selected.length == 1) { _EL_       setInlineAlertMessage(TYPE_INFO,INFORMATION_MESSAGE,"event.handler.message.deleted"); _EL_     } _EL_  else { _EL_       setInlineAlertMessage(TYPE_INFO,INFORMATION_MESSAGE,"event.handler.message.deleted.plural"); _EL_     } _EL_   } _EL_  catch (  AMConsoleException e) { _EL_     setInlineAlertMessage(TYPE_ERROR,ERROR_MESSAGE,e.getMessage()); _EL_   } _EL_   submitCycle=false; _EL_   forwardTo(); _EL_ } _EL_ ', 'public boolean isHealthy(boolean doExtensiveChecks){ _EL_   if (socket.isClosed() || socket.isInputShutdown() || socket.isOutputShutdown()) { _EL_     return false; _EL_   } _EL_   if (framedConnection != null) { _EL_     return true; _EL_   } _EL_   if (doExtensiveChecks) { _EL_     try { _EL_       int readTimeout=socket.getSoTimeout(); _EL_       try { _EL_         socket.setSoTimeout(1); _EL_         if (source.exhausted()) { _EL_           return false; _EL_         } _EL_         return true; _EL_       } _EL_   finally { _EL_         socket.setSoTimeout(readTimeout); _EL_       } _EL_     } _EL_  catch (    SocketTimeoutException ignored) { _EL_     } _EL_ catch (    IOException e) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public void addColumn(int index,Column column){ _EL_   validateColumn(column); _EL_   columnList.add(index,column); _EL_ } _EL_ ', 'private void init(){ _EL_   setTitle("New Hopfield Network"); _EL_   hopPropertiesPanel=new HopfieldPropertiesPanel(networkPanel); _EL_   hopPropertiesPanel.fillFieldValues(); _EL_   tabLogic.setLayout(new FlowLayout()); _EL_   tabLogic.add(hopPropertiesPanel); _EL_   tabLayout.add(layoutPanel); _EL_   layoutPanel=new MainLayoutPanel(false,this); _EL_   tabbedPane.addTab("Logic",tabLogic); _EL_   tabbedPane.addTab("Layout",layoutPanel); _EL_   setContentPane(tabbedPane); _EL_   Action helpAction=new ShowHelpAction(hopPropertiesPanel.getHelpPath()); _EL_   addButton(new JButton(helpAction)); _EL_ } _EL_ ', 'private double normVector(double[] z){ _EL_   double sum=0; _EL_   for (int i=0; i < problem.getNumberOfObjectives(); i++) { _EL_     sum+=z[i] * z[i]; _EL_   } _EL_   return Math.sqrt(sum); _EL_ } _EL_ ', 'public String forceGetValueAsString(){ _EL_   if (mValue == null) { _EL_     return ""; _EL_   } _EL_  else   if (mValue instanceof byte[]) { _EL_     if (mDataType == TYPE_ASCII) { _EL_       return new String((byte[])mValue,US_ASCII); _EL_     } _EL_  else { _EL_       return Arrays.toString((byte[])mValue); _EL_     } _EL_   } _EL_  else   if (mValue instanceof long[]) { _EL_     if (((long[])mValue).length == 1) { _EL_       return String.valueOf(((long[])mValue)[0]); _EL_     } _EL_  else { _EL_       return Arrays.toString((long[])mValue); _EL_     } _EL_   } _EL_  else   if (mValue instanceof Object[]) { _EL_     if (((Object[])mValue).length == 1) { _EL_       Object val=((Object[])mValue)[0]; _EL_       if (val == null) { _EL_         return ""; _EL_       } _EL_  else { _EL_         return val.toString(); _EL_       } _EL_     } _EL_  else { _EL_       return Arrays.toString((Object[])mValue); _EL_     } _EL_   } _EL_  else { _EL_     return mValue.toString(); _EL_   } _EL_ } _EL_ ', 'public int hashCode(){ _EL_   return 127 * factor.hashCode() + lag; _EL_ } _EL_ ', 'public void deserializeArchivedVersions() throws RuntimeException { _EL_   System.out.println("Deserializing archived instances in " + getArchiveDirectory() + "."); _EL_   File archive=new File(getArchiveDirectory()); _EL_   if (!archive.exists() || !archive.isDirectory()) { _EL_     return; _EL_   } _EL_   String[] listing=archive.list(); _EL_   for (  String archiveName : listing) { _EL_     if (!(archiveName.endsWith(".zip"))) { _EL_       continue; _EL_     } _EL_     try { _EL_       File file=new File(getArchiveDirectory(),archiveName); _EL_       ZipFile zipFile=new ZipFile(file); _EL_       ZipEntry entry=zipFile.getEntry("class_fields.ser"); _EL_       InputStream inputStream=zipFile.getInputStream(entry); _EL_       ObjectInputStream objectIn=new ObjectInputStream(inputStream); _EL_       Map<String,List<String>> classFields=(Map<String,List<String>>)objectIn.readObject(); _EL_       zipFile.close(); _EL_       for (      String className : classFields.keySet()) { _EL_         List<String> fieldNames=classFields.get(className); _EL_         Class<?> clazz=Class.forName(className); _EL_         ObjectStreamClass streamClass=ObjectStreamClass.lookup(clazz); _EL_         if (streamClass == null) { _EL_           System.out.println(); _EL_         } _EL_         for (        String fieldName : fieldNames) { _EL_           assert streamClass != null; _EL_           ObjectStreamField field=streamClass.getField(fieldName); _EL_           if (field == null) { _EL_             throw new RuntimeException("Field \'" + fieldName + "\' was dropped from class \'"+ className+ "\' as a serializable field! Please "+ "put it back!!!"+ "\\nIt used to be in "+ className+ " in this archive: "+ archiveName+ "."); _EL_           } _EL_         } _EL_       } _EL_     } _EL_  catch (    ClassNotFoundException e) { _EL_       throw new RuntimeException("Could not read class_fields.ser in archive + " + archiveName + " .",e); _EL_     } _EL_ catch (    IOException e) { _EL_       throw new RuntimeException("Problem reading archive" + archiveName + "; see cause.",e); _EL_     } _EL_     System.out.println("...Deserializing instances in " + archiveName + "..."); _EL_     ZipEntry zipEntry=null; _EL_     try { _EL_       File file=new File(getArchiveDirectory(),archiveName); _EL_       FileInputStream in=new FileInputStream(file); _EL_       ZipInputStream zipinputstream=new ZipInputStream(in); _EL_       while ((zipEntry=zipinputstream.getNextEntry()) != null) { _EL_         if (!zipEntry.getName().endsWith(".ser")) { _EL_           continue; _EL_         } _EL_         ObjectInputStream objectIn=new ObjectInputStream(zipinputstream); _EL_         objectIn.readObject(); _EL_         zipinputstream.closeEntry(); _EL_       } _EL_       zipinputstream.close(); _EL_     } _EL_  catch (    ClassNotFoundException e) { _EL_       throw new RuntimeException("Could not read object zipped file " + zipEntry.getName() + " in archive "+ archiveName+ ". "+ "Perhaps the class was renamed, moved to another package, or "+ "removed. In any case, please put it back where it was.",e); _EL_     } _EL_ catch (    IOException e) { _EL_       throw new RuntimeException("Problem reading archive" + archiveName + "; see cause.",e); _EL_     } _EL_   } _EL_   System.out.println("Finished deserializing archived instances."); _EL_ } _EL_ ', 'private void convertMaximalToMinimalEdgeRings(List ringEdges){ _EL_   for (Iterator i=ringEdges.iterator(); i.hasNext(); ) { _EL_     PolygonizeDirectedEdge de=(PolygonizeDirectedEdge)i.next(); _EL_     long label=de.getLabel(); _EL_     List intNodes=findIntersectionNodes(de,label); _EL_     if (intNodes == null)     continue; _EL_     for (Iterator iNode=intNodes.iterator(); iNode.hasNext(); ) { _EL_       Node node=(Node)iNode.next(); _EL_       computeNextCCWEdges(node,label); _EL_     } _EL_   } _EL_ } _EL_ ', 'public byte[] generateMAC(byte commandClass,byte[] ciphertext,byte sendingNode,byte receivingNode,byte[] iv) throws GeneralSecurityException { _EL_   traceHex("generateMAC ciphertext",ciphertext); _EL_   traceHex("generateMAC iv",iv); _EL_   int bufferSize=ciphertext.length + 4; _EL_   byte[] buffer=new byte[bufferSize]; _EL_   byte[] tempAuth=new byte[16]; _EL_   buffer[0]=commandClass; _EL_   buffer[1]=sendingNode; _EL_   buffer[2]=receivingNode; _EL_   buffer[3]=(byte)ciphertext.length; _EL_   System.arraycopy(ciphertext,0,buffer,4,ciphertext.length); _EL_   traceHex("generateMAC NetworkKey",networkKey.getEncoded()); _EL_   traceHex("generateMAC Raw Auth (minus IV)",buffer); _EL_   Cipher encryptCipher=Cipher.getInstance("AES/ECB/NoPadding"); _EL_   encryptCipher.init(Cipher.ENCRYPT_MODE,authKey); _EL_   tempAuth=encryptCipher.doFinal(iv); _EL_   traceHex("generateMAC tmp1",tempAuth); _EL_   byte[] encpck=new byte[16]; _EL_   int block=0; _EL_   for (int i=0; i < bufferSize; i++) { _EL_     encpck[block]=buffer[i]; _EL_     block++; _EL_     if (block == 16) { _EL_       for (int j=0; j < 16; j++) { _EL_         tempAuth[j]=(byte)(encpck[j] ^ tempAuth[j]); _EL_         encpck[j]=0; _EL_       } _EL_       Arrays.fill(encpck,(byte)0); _EL_       block=0; _EL_       encryptCipher.init(Cipher.ENCRYPT_MODE,authKey); _EL_       tempAuth=encryptCipher.doFinal(tempAuth); _EL_     } _EL_   } _EL_   if (block > 0) { _EL_     for (int i=0; i < 16; i++) { _EL_       tempAuth[i]=(byte)(encpck[i] ^ tempAuth[i]); _EL_     } _EL_     encryptCipher.init(Cipher.ENCRYPT_MODE,authKey); _EL_     tempAuth=encryptCipher.doFinal(tempAuth); _EL_   } _EL_   traceHex("generateMAC Computed Auth",tempAuth); _EL_   byte[] mac=new byte[8]; _EL_   System.arraycopy(tempAuth,0,mac,0,8); _EL_   return mac; _EL_ } _EL_ ', 'public void removeEventListener(ImageSharingListener listener) throws RcsServiceNotAvailableException, RcsGenericException { _EL_   if (mApi == null) { _EL_     throw new RcsServiceNotAvailableException(); _EL_   } _EL_   try { _EL_     WeakReference<IImageSharingListener> weakRef=mImageSharingListeners.remove(listener); _EL_     if (weakRef == null) { _EL_       return; _EL_     } _EL_     IImageSharingListener rcsListener=weakRef.get(); _EL_     if (rcsListener != null) { _EL_       mApi.removeEventListener2(rcsListener); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     RcsIllegalArgumentException.assertException(e); _EL_     throw new RcsGenericException(e); _EL_   } _EL_ } _EL_ ', 'private void writeJournal(ParcelFileDescriptor newState,Journal journal){ _EL_   try { _EL_     FileOutputStream outStream=new FileOutputStream(newState.getFileDescriptor()); _EL_     final byte[] journalBytes=writeCheckedBytes(journal); _EL_     outStream.write(journalBytes); _EL_     if (VERBOSE)     Log.v(TAG,"wrote " + journalBytes.length + " bytes of journal"); _EL_   } _EL_  catch (  IOException e) { _EL_     Log.w(TAG,"failed to write backup journal",e); _EL_   } _EL_ } _EL_ ', 'public boolean matches(String sa){ _EL_   if (_length != sa.length())   return false; _EL_   char[] buffer=_buffer; _EL_   int offset=_offset; _EL_   for (int i=_length - 1; i >= 0; i--)   if (_buffer[_offset + i] != sa.charAt(i))   return false; _EL_   return true; _EL_ } _EL_ ', 'public double computeMaxClassValueUsingPercentFactorPerSeries(DefaultChartData chartData,String[] series,double[] percentFactorPerSeries){ _EL_   double maxValue=0; _EL_   for (  String className : chartData.getClassNamesIncludingDisabled()) { _EL_     double total=0; _EL_     for (int i=0; i < series.length; i++) { _EL_       String seriesName=series[i]; _EL_       if (transposedHeightsAdditive)       total+=percentFactorPerSeries[i] * chartData.getValueAsDouble(seriesName,className); _EL_  else       total=Math.max(total,percentFactorPerSeries[i] * chartData.getValueAsDouble(seriesName,className)); _EL_     } _EL_     if (total > maxValue) { _EL_       maxValue=total; _EL_     } _EL_   } _EL_   return 1.1 * maxValue; _EL_ } _EL_ ', 'public int addChannel(Channel channel){ _EL_   int index=-1; _EL_ switch (channel.getChannelType()) { _EL_ case STANDARD: _EL_     mChannels.add(channel); _EL_   index=mChannels.size() - 1; _EL_ fireTableRowsInserted(index,index); _EL_ break; _EL_ case TRAFFIC: _EL_ mTrafficChannels.add(channel); _EL_ index=mChannels.size() - 1; _EL_ break; _EL_ default : _EL_ break; _EL_ } _EL_ broadcast(new ChannelEvent(channel,Event.NOTIFICATION_ADD)); _EL_ if (channel.getEnabled()) { _EL_ broadcast(new ChannelEvent(channel,Event.REQUEST_ENABLE)); _EL_ } _EL_ return index; _EL_ } _EL_ ', 'public static String join(Object... array){ _EL_   if (array == null) { _EL_     return null; _EL_   } _EL_   if (array.length == 0) { _EL_     return StringPool.EMPTY; _EL_   } _EL_   if (array.length == 1) { _EL_     return String.valueOf(array[0]); _EL_   } _EL_   final StringBuilder sb=new StringBuilder(array.length * 16); _EL_   for (int i=0; i < array.length; i++) { _EL_     sb.append(array[i]); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'public boolean hasTrait(final StoreTrait storeTrait){ _EL_   final Set<StoreTrait> traits=getTraits(); _EL_   return null != traits && traits.contains(storeTrait); _EL_ } _EL_ ', 'public void createSupply(MWMInOutBoundLine boundline,BigDecimal qtySupply){ _EL_   MProduct product=MProduct.get(boundline.getCtx(),boundline.getM_Product_ID()); _EL_   if (product.isBOM()) { _EL_     createMO(boundline,product,qtySupply); _EL_   } _EL_  else   if (product.isPurchased()) { _EL_     createRequisition(boundline,product,qtySupply); _EL_   } _EL_ } _EL_ ', 'public int size(){ _EL_   return parameters.size(); _EL_ } _EL_ ', '@Override public void loadXML(Node stepnode,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleXMLException { _EL_   try { _EL_     schemaName=XMLHandler.getTagValue(stepnode,"schemaName"); _EL_     tabelName=XMLHandler.getTagValue(stepnode,"TableName"); _EL_     mdkeySize=XMLHandler.getTagValue(stepnode,"MDKeySize"); _EL_     measureCount=XMLHandler.getTagValue(stepnode,"Measurecount"); _EL_     heirAndKeySize=XMLHandler.getTagValue(stepnode,"HeirAndKeySize"); _EL_     cubeName=XMLHandler.getTagValue(stepnode,"cubeName"); _EL_     groupByEnabled=XMLHandler.getTagValue(stepnode,"isGroupByEnabled"); _EL_     aggregatorClassString=XMLHandler.getTagValue(stepnode,"aggregatorClassString"); _EL_     aggregatorString=XMLHandler.getTagValue(stepnode,"aggregatorString"); _EL_     factDimLensString=XMLHandler.getTagValue(stepnode,"factDimLensString"); _EL_     levelAnddataTypeString=XMLHandler.getTagValue(stepnode,"levelAnddataTypeString"); _EL_     currentRestructNumber=Integer.parseInt(XMLHandler.getTagValue(stepnode,"currentRestructNumber")); _EL_     partitionID=XMLHandler.getTagValue(stepnode,"partitionID"); _EL_     segmentId=XMLHandler.getTagValue(stepnode,"segmentId"); _EL_     taskNo=XMLHandler.getTagValue(stepnode,"taskNo"); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new KettleXMLException("Unable to read step info from XML node",e); _EL_   } _EL_ } _EL_ ', 'public void readData(DataInput din) throws IOException { _EL_   reference=din.readUnsignedShort(); _EL_ } _EL_ ', 'private void emitCode(){ _EL_   LinkedList<Instantiation> worklist=new LinkedList<Instantiation>(); _EL_   worklist.add(new Instantiation(null,mainSubroutine)); _EL_   InsnList newInstructions=new InsnList(); _EL_   List<TryCatchBlockNode> newTryCatchBlocks=new ArrayList<TryCatchBlockNode>(); _EL_   List<LocalVariableNode> newLocalVariables=new ArrayList<LocalVariableNode>(); _EL_   while (!worklist.isEmpty()) { _EL_     Instantiation inst=worklist.removeFirst(); _EL_     emitSubroutine(inst,worklist,newInstructions,newTryCatchBlocks,newLocalVariables); _EL_   } _EL_   instructions=newInstructions; _EL_   tryCatchBlocks=newTryCatchBlocks; _EL_   localVariables=newLocalVariables; _EL_ } _EL_ ', 'public static double stDev(final List<Double> list){ _EL_   return Math.sqrt(variance(list)); _EL_ } _EL_ ', 'public static int compare(Date left,boolean right){ _EL_   return compare(left,right ? 1D : 0D); _EL_ } _EL_ ', 'private IBindingSet[] decodeNextChunk() throws IOException { _EL_   if (nsolutions == solutionSetCount) { _EL_     if (log.isDebugEnabled())     log.debug("Read solutionSet: name=" + name + ", solutionSetSize="+ nsolutions); _EL_     return null; _EL_   } _EL_   in.readInt(); _EL_   final int chunkSize=in.readInt(); _EL_   final int byteLength=in.readInt(); _EL_   final byte[] a=new byte[byteLength]; _EL_   in.readFully(a); _EL_   final DataInputBuffer buf=new DataInputBuffer(a); _EL_   final IBindingSet[] t=new IBindingSet[chunkSize]; _EL_   for (int i=0; i < chunkSize; i++) { _EL_     t[i]=decoder.decodeSolution(buf,true); _EL_     if (log.isTraceEnabled())     log.trace("Read: name=" + name + ", solution="+ t[i]); _EL_   } _EL_   nsolutions+=chunkSize; _EL_   if (log.isTraceEnabled())   log.trace("Read chunk: name=" + name + ", chunkSize="+ chunkSize+ ", bytesRead="+ (SolutionSetStreamEncoder.CHUNK_HEADER_SIZE + byteLength)+ ", solutionSetSize="+ nsolutions); _EL_   return t; _EL_ } _EL_ ', 'public UDPClientSocket(Logger logger){ _EL_   this.logger=logger; _EL_   try { _EL_     socket=new DatagramSocket(); _EL_     socket.setBroadcast(true); _EL_     socket.setSendBufferSize(1024 * 1024 * 8); _EL_     socket.setReceiveBufferSize(1024 * 1024 * 8); _EL_     socket.setSoTimeout(1); _EL_   } _EL_  catch (  SocketException e) { _EL_     logger.severe("**** FAILED TO CREATE SOCKET!"); _EL_     logger.severe("java.net.SocketException: " + e.getMessage()); _EL_     System.exit(1); _EL_   } _EL_ } _EL_ ', 'public void multiplyAllValuesBy(final double multiplyBy,final int RoundType){ _EL_   for (  final T t : keySet()) { _EL_     double val=mapValues.get(t); _EL_ switch (RoundType) { _EL_ case 1: _EL_       val=Math.floor(val * multiplyBy); _EL_     break; _EL_ case 2: _EL_   val=Math.round(val * multiplyBy); _EL_ break; _EL_ case 3: _EL_ val=Math.ceil(val * multiplyBy); _EL_ break; _EL_ default : _EL_ val=val * multiplyBy; _EL_ break; _EL_ } _EL_ put(t,(int)val); _EL_ } _EL_ } _EL_ ', 'protected void computeFolderChildren(File folder,boolean isIncluded,String[] pkgName,ArrayList vChildren,char[][] inclusionPatterns,char[][] exclusionPatterns) throws JavaModelException { _EL_   if (isIncluded) { _EL_     IPackageFragment pkg=getPackageFragment(pkgName); _EL_     vChildren.add(pkg); _EL_   } _EL_   try { _EL_     File[] members=folder.listFiles(); _EL_     boolean hasIncluded=isIncluded; _EL_     int length=members.length; _EL_     if (length > 0) { _EL_       JavaProject javaProject=(JavaProject)getJavaProject(); _EL_       String sourceLevel=javaProject.getOption(JavaCore.COMPILER_SOURCE,true); _EL_       String complianceLevel=javaProject.getOption(JavaCore.COMPILER_COMPLIANCE,true); _EL_       for (int i=0; i < length; i++) { _EL_         File member=members[i]; _EL_         String memberName=member.getName(); _EL_         if (member.isDirectory()) { _EL_           if (Util.isValidFolderNameForPackage(memberName,sourceLevel,complianceLevel)) { _EL_             String[] newNames=Util.arrayConcat(pkgName,manager.intern(memberName)); _EL_             boolean isMemberIncluded=false; _EL_             computeFolderChildren(member,isMemberIncluded,newNames,vChildren,inclusionPatterns,exclusionPatterns); _EL_           } _EL_         } _EL_  else { _EL_           if (!hasIncluded && Util.isValidCompilationUnitName(memberName,sourceLevel,complianceLevel)) { _EL_             hasIncluded=true; _EL_             IPackageFragment pkg=getPackageFragment(pkgName); _EL_             vChildren.add(pkg); _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_  catch (  IllegalArgumentException e) { _EL_     throw new JavaModelException(e,IJavaModelStatusConstants.ELEMENT_DOES_NOT_EXIST); _EL_   } _EL_ catch (  CoreException e) { _EL_     throw new JavaModelException(e); _EL_   } _EL_ } _EL_ ', 'public static String quote(File input){ _EL_   return quote(input.getAbsolutePath()); _EL_ } _EL_ ', 'private void readFromNet() throws IgniteCheckedException { _EL_   try { _EL_     inNetBuf.clear(); _EL_     int read=ch.read(inNetBuf); _EL_     if (read == -1)     throw new IgniteCheckedException("Failed to read remote node response (connection closed)."); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new IgniteCheckedException("Failed to write byte to socket.",e); _EL_   } _EL_ } _EL_ ', 'synchronized void clear(){ _EL_   maps=new Maps(); _EL_   tombstones.clear(); _EL_   ramBytesUsedCurrent.set(0); _EL_   if (mgr != null) { _EL_     mgr.removeListener(this); _EL_     mgr=null; _EL_   } _EL_ } _EL_ ', 'public synchronized void removeConsumer(ImageConsumer ic){ _EL_   ics.removeElement(ic); _EL_ } _EL_ ', 'private void updateAperture(int newValue,long now){ _EL_   int previous=targetAperture; _EL_   targetAperture=newValue; _EL_   targetAperture=Math.max(minAperture,targetAperture); _EL_   int maxAperture=Math.min(this.maxAperture,activeSockets.size() + activeFactories.size()); _EL_   targetAperture=Math.min(maxAperture,targetAperture); _EL_   lastApertureRefresh=now; _EL_   pendings.reset((minPendings + maxPendings) / 2); _EL_   if (targetAperture != previous) { _EL_     logger.debug("Current pending={}, new target={}, previous target={}",pendings.value(),targetAperture,previous); _EL_   } _EL_ } _EL_ ', 'public I buildInvocation(Object protocolKey,I invocation) throws ConfigException { _EL_   Objects.requireNonNull(invocation); _EL_   invocation=buildInvocation(invocation); _EL_   LruCache<Object,I> invocationCache=_invocationCache; _EL_   if (invocationCache != null) { _EL_     I oldInvocation; _EL_     oldInvocation=invocationCache.get(protocolKey); _EL_     if (oldInvocation != null && !oldInvocation.isModified()) { _EL_       return oldInvocation; _EL_     } _EL_     if (invocation.getURLLength() < _maxURLLength) { _EL_       invocationCache.put(protocolKey,invocation); _EL_     } _EL_   } _EL_   return invocation; _EL_ } _EL_ ', 'public WebResourceStatistics computeMark(WebResourceStatistics wrStatistics){ _EL_   float passed=wrStatistics.getNbOfPassed(); _EL_   if (passed == -1) { _EL_     wrStatistics.setRawMark(Float.valueOf(-1)); _EL_     return wrStatistics; _EL_   } _EL_   float failed=wrStatistics.getNbOfFailed(); _EL_   float needMoreInfo=wrStatistics.getNbOfNmi(); _EL_   if (failed == 0 && passed == 0) { _EL_     wrStatistics.setMark(Float.valueOf(0)); _EL_     return wrStatistics; _EL_   } _EL_   float ratioNMI=needMoreInfo / (passed + failed + needMoreInfo); _EL_   float result=((1 - ratioNMI) * passed / (passed + failed) + ratioNMI * needMoreInfo / (passed + failed + needMoreInfo)) * 100f; _EL_   wrStatistics.setMark(result); _EL_   return wrStatistics; _EL_ } _EL_ ', 'public static BinaryMessage checkAndCorrect(BinaryMessage message,int startIndex){ _EL_   boolean parityError=message.cardinality() % 2 != 0; _EL_   int syndrome=getSyndrome(message,startIndex); _EL_   if (syndrome == 0) { _EL_     if (parityError) { _EL_       message.flip(startIndex + 23); _EL_     } _EL_     message.setCRC(CRC.PASSED); _EL_     return message; _EL_   } _EL_   int original=message.getInt(0,22); _EL_   int index=-1; _EL_   int syndromeWeight=3; _EL_   int errors=0; _EL_   while (index < 23) { _EL_     if (index != -1) { _EL_       if (index > 0) { _EL_         message.flip(index - 1); _EL_       } _EL_       message.flip(index); _EL_       syndromeWeight=2; _EL_     } _EL_     syndrome=getSyndrome(message,startIndex); _EL_     if (syndrome > 0) { _EL_       for (int i=0; i < 23; i++) { _EL_         errors=Integer.bitCount(syndrome); _EL_         if (errors <= syndromeWeight) { _EL_           message.xor(12,11,syndrome); _EL_           message.rotateRight(i,startIndex,startIndex + 22); _EL_           if (index >= 0) { _EL_             errors++; _EL_           } _EL_           int corrected=message.getInt(0,22); _EL_           if (Integer.bitCount(original ^ corrected) > 3) { _EL_             message.setCRC(CRC.FAILED_CRC); _EL_             return message; _EL_           } _EL_           message.setCRC(CRC.PASSED); _EL_           return message; _EL_         } _EL_  else { _EL_           message.rotateLeft(startIndex,startIndex + 22); _EL_           syndrome=getSyndrome(message,startIndex); _EL_         } _EL_       } _EL_       index++; _EL_     } _EL_   } _EL_   message.setCRC(CRC.FAILED_CRC); _EL_   return message; _EL_ } _EL_ ', 'private String pickEncoding(InputSource inputSource){ _EL_   Reader reader=inputSource.getCharacterStream(); _EL_   if (reader != null) { _EL_     return CHARACTER_ENCODING; _EL_   } _EL_   String encoding=inputSource.getEncoding(); _EL_   return encoding == null ? DEFAULT_ENCODING : encoding; _EL_ } _EL_ ', '@Override public String generateURL(CategoryDataset dataset,int series,int category){ _EL_   String url=this.prefix; _EL_   Comparable seriesKey=dataset.getRowKey(series); _EL_   Comparable categoryKey=dataset.getColumnKey(category); _EL_   boolean firstParameter=!url.contains("?"); _EL_   url+=firstParameter ? "?" : "&amp;"; _EL_   try { _EL_     url+=this.seriesParameterName + "=" + URLEncoder.encode(seriesKey.toString(),"UTF-8"); _EL_     url+="&amp;" + this.categoryParameterName + "="+ URLEncoder.encode(categoryKey.toString(),"UTF-8"); _EL_   } _EL_  catch (  UnsupportedEncodingException ex) { _EL_     throw new RuntimeException(ex); _EL_   } _EL_   return url; _EL_ } _EL_ ', 'public boolean isIdleExpire(){ _EL_   if (!_lifecycle.isActive())   return true; _EL_   long now=currentTimeActual(); _EL_   long idleExpire=_threadIdleExpireTime.get(); _EL_   int idleCount=_idleCount.get(); _EL_   if (_idleMin < idleCount) { _EL_     long nextIdleExpire=now + _idleTimeout; _EL_     if (_idleMax < idleCount && _idleMin < _idleMax) { _EL_       _threadIdleExpireTime.compareAndSet(idleExpire,nextIdleExpire); _EL_       return true; _EL_     } _EL_  else     if (idleExpire < now && _threadIdleExpireTime.compareAndSet(idleExpire,nextIdleExpire)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void beginDisplay(DisplayEvent event) throws ModelControlException { _EL_   IdentitySubjectModel subjectModel=getSubjectModel(); _EL_   PolicyModel model=(PolicyModel)getModel(); _EL_   super.beginDisplay(event); _EL_   CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE); _EL_   Map supportedEntityTypes=model.getSupportedEntityTypes(realmName); _EL_   OptionList entityTypes=createOptionList(supportedEntityTypes); _EL_   entityTypes.add(0,"policy.subject.select.identity.type",""); _EL_   menu.setOptions(entityTypes); _EL_   menu.setValue(""); _EL_   CCAddRemove child=(CCAddRemove)getChild(VALUES_MULTIPLE_CHOICE_VALUE); _EL_   child.restoreStateData(); _EL_   OptionList selected=addRemoveModel.getSelectedOptionList(); _EL_   OptionList possible=helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,getPossibleValues(subjectModel,realmName)); _EL_   child.resetStateData(); _EL_   addRemoveModel.setAvailableOptionList(possible); _EL_ } _EL_ ', 'private void decode64(ByteBuffer infile,LongArrayPointer a){ _EL_   byte[] nbitplanes=new byte[N03]; _EL_   byte[] tmagic=new byte[2]; _EL_   infile.get(tmagic); _EL_   if (tmagic[0] != CODE_MAGIC[0] || tmagic[1] != CODE_MAGIC[1]) { _EL_     throw new RuntimeException("Compression error"); _EL_   } _EL_   this.nx=infile.getInt(); _EL_   this.ny=infile.getInt(); _EL_   this.scale=infile.getInt(); _EL_   long sumall=infile.getLong(); _EL_   infile.get(nbitplanes); _EL_   dodecode64(infile,a,nbitplanes); _EL_   a.set(0,sumall); _EL_ } _EL_ ', 'private static void createScript() throws Exception { _EL_   Class.forName("org.h2.Driver"); _EL_   Connection conn=DriverManager.getConnection("jdbc:h2:mem:test"); _EL_   Statement stat=conn.createStatement(); _EL_   stat.execute("CREATE TABLE TEST(NAME VARCHAR)"); _EL_   stat.execute("INSERT INTO TEST VALUES(\'Hello World\')"); _EL_   stat.execute("SCRIPT TO \'script.sql\'"); _EL_   stat.close(); _EL_   conn.close(); _EL_ } _EL_ ', 'public static double cauchy(){ _EL_   return Math.tan(Math.PI * (uniform() - 0.5)); _EL_ } _EL_ ', 'private WebDoc createLayout(WebDoc doc,MWorkflow wf,int activeNode,MWFNode[] nodes,ArrayList nodes_ID,int[][] imageMap){ _EL_   body b=doc.getBody(); _EL_   b.addElement(printWorkflow(activeNode,wf,nodes,nodes_ID,imageMap)); _EL_   b.addElement(new hr()); _EL_   b.addElement(printDescription(activeNode,wf,nodes,nodes_ID)); _EL_   b.addElement(new br()); _EL_   b.addElement(printControlPanel(activeNode,wf,nodes,nodes_ID)); _EL_   return doc; _EL_ } _EL_ ', '@Override public void requestPollRead(){ _EL_   try { _EL_     requestLoop(); _EL_   } _EL_  catch (  Exception e) { _EL_     log.log(Level.WARNING,e.toString(),e); _EL_   } _EL_ } _EL_ ', 'public MultiMatchQueryBuilder field(String field){ _EL_   fields.add(field); _EL_   return this; _EL_ } _EL_ ', 'void encode(OutputStream os,boolean include_h) throws IOException { _EL_   int q=params.q; _EL_   os.write(getEncoded(f)); _EL_   if (params.basisType == NTRUSigningKeyGenerationParameters.BASIS_TYPE_STANDARD) { _EL_     IntegerPolynomial fPrimeInt=fPrime.toIntegerPolynomial(); _EL_     for (int i=0; i < fPrimeInt.coeffs.length; i++) { _EL_       fPrimeInt.coeffs[i]+=q / 2; _EL_     } _EL_     os.write(fPrimeInt.toBinary(q)); _EL_   } _EL_  else { _EL_     os.write(getEncoded(fPrime)); _EL_   } _EL_   if (include_h) { _EL_     os.write(h.toBinary(q)); _EL_   } _EL_ } _EL_ ', 'private void signalNoAcks(){ _EL_   lock.lock(); _EL_   try { _EL_     allAcksRcvCond.signalAll(); _EL_   } _EL_   finally { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', 'private static String arrayToString(int[] array){ _EL_   StringBuilder sb=new StringBuilder(); _EL_   boolean first=true; _EL_   for (  int i : array) { _EL_     if (first) { _EL_       first=false; _EL_     } _EL_  else { _EL_       sb.append(" "); _EL_     } _EL_     sb.append(i); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'public static byte[] copy(byte[] source,byte[] target){ _EL_   int len=source.length; _EL_   if (len > target.length) { _EL_     target=new byte[len]; _EL_   } _EL_   System.arraycopy(source,0,target,0,len); _EL_   return target; _EL_ } _EL_ ', 'public double greatCircleDistance(Location location){ _EL_   if (location == null) { _EL_     throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","greatCircleDistance","missingLocation")); _EL_   } _EL_   double lat1Radians=Math.toRadians(this.latitude); _EL_   double lon1Radians=Math.toRadians(this.longitude); _EL_   double lat2Radians=Math.toRadians(location.latitude); _EL_   double lon2Radians=Math.toRadians(location.longitude); _EL_   if (lat1Radians == lat2Radians && lon1Radians == lon2Radians) { _EL_     return 0; _EL_   } _EL_   double a=Math.sin((lat2Radians - lat1Radians) / 2.0); _EL_   double b=Math.sin((lon2Radians - lon1Radians) / 2.0); _EL_   double c=a * a + Math.cos(lat1Radians) * Math.cos(lat2Radians) * b* b; _EL_   double distanceRadians=2.0 * Math.asin(Math.sqrt(c)); _EL_   return Double.isNaN(distanceRadians) ? 0 : distanceRadians; _EL_ } _EL_ ', '@Override public final void readFully(byte ba[],int off,int len) throws IOException { _EL_   dis.readFully(ba,off,len); _EL_ } _EL_ ', 'public void fireOperatorMoved(Operator operator){ _EL_   List<Operator> list=new LinkedList<>(); _EL_   list.add(operator); _EL_   fireOperatorsMoved(list); _EL_ } _EL_ ', 'public void remove(int i){ _EL_   individuals.remove(i); _EL_ } _EL_ ', '@Override public void modifyVariableId(String oldId,String newId){ _EL_   if (baseVar.equals(oldId)) { _EL_     baseVar=newId.replace("\'",""); _EL_   } _EL_ } _EL_ ', 'public static String repeat(String str,int count){ _EL_   final StringBuilder result=new StringBuilder(str.length() * count); _EL_   for (int i=0; i < count; i++) { _EL_     result.append(str); _EL_   } _EL_   return result.toString(); _EL_ } _EL_ ', '@Override public Node pickNode(final InferenceGraph g){ _EL_   treeCache.clear(); _EL_   Pair<List<Node>,Integer> bestPath=noPath; _EL_   for (  Node n : g.nodes) { _EL_     if (!Collections.disjoint(n.data,varsToSolve)) { _EL_       Pair<List<Node>,Integer> path=computeTreeToLeafs(n); _EL_       if (path.snd < bestPath.snd) { _EL_         bestPath=path; _EL_       } _EL_     } _EL_   } _EL_   if (bestPath == noPath) { _EL_     throw new NodeNotFoundException(g); _EL_   } _EL_   return bestPath.fst.head; _EL_ } _EL_ ', 'public AddUserFields(){ _EL_   m_attributeSpecs=new ArrayList<AttributeSpec>(); _EL_ } _EL_ ', 'private Rectangle findBounds(int AD_WF_Node_ID){ _EL_   for (int i=0; i < m_nodes.size(); i++) { _EL_     WFNode node=(WFNode)m_nodes.get(i); _EL_     if (node.getAD_WF_Node_ID() == AD_WF_Node_ID)     return node.getBounds(); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'protected void stopWorkers(Collection<WorkerThread> workers){ _EL_   if (workers == null) { _EL_     workers=this.workers; _EL_   } _EL_   final Iterator<WorkerThread> iter=workers.iterator(); _EL_   while (iter.hasNext()) { _EL_     final WorkerThread worker=iter.next(); _EL_     if ((worker.getStatus() & (WorkerThread.sENDED | WorkerThread.sENDING)) == 0) { _EL_       worker.signalShutdown(); _EL_       runningWorkers--; _EL_     } _EL_   } _EL_ } _EL_ ', 'public ArrayList<Mapping> cloneFrame(){ _EL_   if (stack[top] == null)   return null; _EL_   ArrayList<Mapping> clone=new ArrayList<Mapping>(); _EL_   for (Mapping map=topOfFrame(); map != null; map=next()) { _EL_     clone.add(map); _EL_   } _EL_   return clone; _EL_ } _EL_ ', 'private static int computeHashCode(int seed,Object... objects){ _EL_   if (objects == null || objects.length == 0) { _EL_     return seed * HashCode.PRIME; _EL_   } _EL_   int hc=seed; _EL_   for (  Object object : objects) { _EL_     hc=HashCode.PRIME * hc; _EL_     if (object instanceof byte[]) { _EL_       hc+=Arrays.hashCode((byte[])object); _EL_     } _EL_  else     if (object instanceof boolean[]) { _EL_       hc+=Arrays.hashCode((boolean[])object); _EL_     } _EL_  else     if (object instanceof short[]) { _EL_       hc+=Arrays.hashCode((short[])object); _EL_     } _EL_  else     if (object instanceof int[]) { _EL_       hc+=Arrays.hashCode((int[])object); _EL_     } _EL_  else     if (object instanceof long[]) { _EL_       hc+=Arrays.hashCode((long[])object); _EL_     } _EL_  else     if (object instanceof float[]) { _EL_       hc+=Arrays.hashCode((float[])object); _EL_     } _EL_  else     if (object instanceof double[]) { _EL_       hc+=Arrays.hashCode((double[])object); _EL_     } _EL_  else     if (object instanceof char[]) { _EL_       hc+=Arrays.hashCode((char[])object); _EL_     } _EL_  else     if (object instanceof Object[]) { _EL_       hc+=Arrays.hashCode((Object[])object); _EL_     } _EL_  else     if (object != null) { _EL_       hc+=object.hashCode(); _EL_     } _EL_   } _EL_   return hc; _EL_ } _EL_ ', 'protected float calculateStateTransitionPercentage(String name,boolean flapping){ _EL_   int flapInterval=getFlapInterval(name); _EL_   LinkedList<Boolean> list=getFlaps(name); _EL_   float lowWeight=getFlapLowWeight(name); _EL_   float highWeight=getFlapHighWeight(name); _EL_   float weightRange=highWeight - lowWeight; _EL_   float result=0; _EL_   for (int i=list.size() - 1; i >= 0; i--) { _EL_     boolean thisFlap=list.get(i); _EL_     if (flapping != thisFlap) { _EL_       float weight=lowWeight + (weightRange * i / (flapInterval - 1)); _EL_       result+=weight; _EL_     } _EL_   } _EL_   return result / flapInterval; _EL_ } _EL_ ', "public static String mangleName(Method method,boolean isFull){ _EL_   StringBuffer sb=new StringBuffer(); _EL_   sb.append(method.getName()); _EL_   Class[] params=method.getParameterTypes(); _EL_   for (int i=0; i < params.length; i++) { _EL_     sb.append('_'); _EL_     sb.append(mangleClass(params[i],isFull)); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ", 'private void saveState(){ _EL_   savedStartOffset=offsetAttribute.startOffset(); _EL_   savedEndOffset=offsetAttribute.endOffset(); _EL_   hasIllegalOffsets=(savedEndOffset - savedStartOffset != termAttribute.length()); _EL_   savedType=typeAttribute.type(); _EL_   if (savedBuffer.length < termAttribute.length()) { _EL_     savedBuffer=new char[ArrayUtil.oversize(termAttribute.length(),Character.BYTES)]; _EL_   } _EL_   System.arraycopy(termAttribute.buffer(),0,savedBuffer,0,termAttribute.length()); _EL_   iterator.text=savedBuffer; _EL_   hasSavedState=true; _EL_ } _EL_ ', 'private void printOutDefinedIPs(List<String> definedIPs){ _EL_   List<String> ipList=new ArrayList<>(); _EL_   for (  String ip : definedIPs) { _EL_     if (ip.indexOf(\':\') != -1) { _EL_       ipList.add("|- IPv6: " + ip); _EL_     } _EL_  else { _EL_       ipList.add("|- IPv4: " + ip); _EL_     } _EL_   } _EL_   Collections.sort(ipList); _EL_   for (  String ip : ipList) { _EL_     log.info(ip); _EL_   } _EL_ } _EL_ ', 'private void disposeCodec(IoSession session){ _EL_   disposeEncoder(session); _EL_   disposeDecoder(session); _EL_   disposeDecoderOut(session); _EL_ } _EL_ ', 'private static int transpositions(final CharSequence first,final CharSequence second){ _EL_   int transpositions=0; _EL_   for (int i=0; i < first.length(); i++) { _EL_     if (first.charAt(i) != second.charAt(i)) { _EL_       transpositions++; _EL_     } _EL_   } _EL_   return transpositions / 2; _EL_ } _EL_ ', '@Override public Object parseObject(final String source,final ParsePosition pos){ _EL_   return parser.parseObject(source,pos); _EL_ } _EL_ ', '@Override public default Stream<TimeSeriesCollection> stream(){ _EL_   return StreamSupport.stream(spliterator(),false); _EL_ } _EL_ ', 'private ManifestModInfo registerMod(File file,Manifest manifest){ _EL_   ManifestModInfo mod=loadMod(file,manifest); _EL_   if (mod != null) { _EL_     if (idMap.containsKey(mod.getModID())) { _EL_       ModInfo mod2=idMap.get(mod.getModID()); _EL_       duplicates.put(mod.getModID(),mod); _EL_       duplicates.put(mod.getModID(),mod2); _EL_       log.error("Duplicate mod IDs for files \'%s\' and \'%s\'",mod.getModFile(),mod2.getModFile()); _EL_     } _EL_  else { _EL_       modList.add(mod); _EL_       idMap.put(mod.getModID(),mod); _EL_     } _EL_   } _EL_   return mod; _EL_ } _EL_ ', 'protected Size2D arrangeNN(BlockContainer container,Graphics2D g2){ _EL_   List blocks=container.getBlocks(); _EL_   Block b=(Block)blocks.get(0); _EL_   Size2D s=b.arrange(g2,RectangleConstraint.NONE); _EL_   b.setBounds(new Rectangle2D.Double(0.0,0.0,s.width,s.height)); _EL_   return new Size2D(s.width,s.height); _EL_ } _EL_ ', 'public static boolean isContentType(String contentType,Message message){ _EL_   if (contentType == null) { _EL_     return message.getContentType() == null; _EL_   } _EL_  else { _EL_     return contentType.equals(message.getContentType()); _EL_   } _EL_ } _EL_ ', 'private static X509Certificate generateCertificate(String dn,int days,String applicationUri,KeyPair keys,org.opcfoundation.ua.transport.security.KeyPair issuerKeys,String... hostNames) throws GeneralSecurityException, IOException { _EL_   PrivateKey privkey=keys.getPrivate(); _EL_   PublicKey publicKey=keys.getPublic(); _EL_   return generateCertificate(dn,days,applicationUri,publicKey,privkey,issuerKeys,hostNames); _EL_ } _EL_ ', 'private String checkAllDependencies(HashMap<String,ModuleDescriptor> modlist){ _EL_   for (  ModuleDescriptor md : modlist.values()) { _EL_     String res=checkDependencies(md,modlist); _EL_     if (!res.isEmpty()) { _EL_       return res; _EL_     } _EL_   } _EL_   return ""; _EL_ } _EL_ ', 'public static void checkDirectoryIsWriteable(@NotNull File directory) throws IOException { _EL_   while (!directory.exists() || !directory.isDirectory()) { _EL_     directory=directory.getParentFile(); _EL_   } _EL_   if (!directory.canWrite()) { _EL_     throw new IOException("Cannot write to folder: " + directory.getAbsolutePath()); _EL_   } _EL_ } _EL_ ', 'private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException { _EL_   s.defaultWriteObject(); _EL_ } _EL_ ', 'public static boolean isJavaKeyword(String name){ _EL_   return tokens.contains(name); _EL_ } _EL_ ', 'protected String extractImportUrl(final Matcher matcher){ _EL_   return matcher.group(INDEX_URL); _EL_ } _EL_ ', '@Override public boolean equals(Object that){ _EL_   if (this == that) { _EL_     return true; _EL_   } _EL_   if (that == null) { _EL_     return false; _EL_   } _EL_   if (getClass() != that.getClass()) { _EL_     return false; _EL_   } _EL_   Collator other=(Collator)that; _EL_   return ((strength == other.strength) && (decmp == other.decmp)); _EL_ } _EL_ ', 'public static void writeFileList(XMLOutput xmlOutput,String tagName,Iterable<File> listValues) throws IOException { _EL_   if (listValues != null) { _EL_     writeFileList(xmlOutput,tagName,listValues.iterator()); _EL_   } _EL_ } _EL_ ', 'public DPolicyConstraints(JDialog parent){ _EL_   super(parent); _EL_   setTitle(res.getString("DPolicyConstraints.Title")); _EL_   initComponents(); _EL_ } _EL_ ', '@PreAuthorize(SpringEvalExpressions.HAS_AUTH_SYSTEM_ADMIN) @Override public ResponseEntity<Collection<String>> invalidateCaches(){ _EL_   final Collection<String> cacheNames=cacheManager.getCacheNames(); _EL_   LOGGER.info("Invalidating caches {}",cacheNames); _EL_   cacheNames.forEach(null); _EL_   return ResponseEntity.ok(cacheNames); _EL_ } _EL_ ', 'public static final void writeByteArrayXml(byte[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException { _EL_   if (val == null) { _EL_     out.startTag(null,"null"); _EL_     out.endTag(null,"null"); _EL_     return; _EL_   } _EL_   out.startTag(null,"byte-array"); _EL_   if (name != null) { _EL_     out.attribute(null,"name",name); _EL_   } _EL_   final int N=val.length; _EL_   out.attribute(null,"num",Integer.toString(N)); _EL_   StringBuilder sb=new StringBuilder(val.length * 2); _EL_   for (int i=0; i < N; i++) { _EL_     int b=val[i]; _EL_     int h=b >> 4; _EL_     sb.append(h >= 10 ? (\'a\' + h - 10) : (\'0\' + h)); _EL_     h=b & 0xff; _EL_     sb.append(h >= 10 ? (\'a\' + h - 10) : (\'0\' + h)); _EL_   } _EL_   out.text(sb.toString()); _EL_   out.endTag(null,"byte-array"); _EL_ } _EL_ ', 'public static void writeFile(final File destination,final List<String> contents) throws IOException { _EL_   final BufferedWriter bw=new BufferedWriter(new FileWriter(destination)); _EL_   try { _EL_     for (    String line : contents) { _EL_       bw.write(line); _EL_       bw.newLine(); _EL_     } _EL_     bw.flush(); _EL_   } _EL_   finally { _EL_     bw.close(); _EL_   } _EL_ } _EL_ ', 'public void cancelRequestsByTAG(Object TAG,boolean mayInterruptIfRunning){ _EL_   if (TAG == null) { _EL_     return; _EL_   } _EL_   for (  List<RequestHandle> requestList : requestMap.values()) { _EL_     if (requestList != null) { _EL_       for (      RequestHandle requestHandle : requestList) { _EL_         if (TAG.equals(requestHandle.getTag()))         requestHandle.cancel(mayInterruptIfRunning); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public static void drawSnapHorizontalMargin(ViewTransform transform,Graphics2D g,int x1,int x2,int y1,String text,boolean textOver){ _EL_   Canvas c=new Canvas(); _EL_   FontMetrics fm=c.getFontMetrics(sFont); _EL_   g.setFont(sFont); _EL_   int padding=transform.getSwingDimension(4); _EL_   Rectangle2D bounds=fm.getStringBounds(text,g); _EL_   int tw=(int)bounds.getWidth(); _EL_   int offset=6 * CONNECTION_ARROW_SIZE; _EL_   if (x1 > x2) { _EL_     int temp=x1; _EL_     x1=x2; _EL_     x2=temp; _EL_   } _EL_   int w=((x2 - x1) - (tw + 2 * padding)) / 2; _EL_   if (w <= padding) { _EL_     g.drawLine(x1,y1,x2,y1); _EL_     if (textOver) { _EL_       offset=-1 * offset / 2; _EL_     } _EL_     g.drawString(text,x1 + w + padding,y1 + offset); _EL_   } _EL_  else { _EL_     g.drawLine(x1,y1,x1 + w,y1); _EL_     g.drawLine(x2 - w,y1,x2,y1); _EL_     g.drawString(text,x1 + w + padding,(int)(y1 + (bounds.getHeight() / 2))); _EL_   } _EL_   g.drawLine(x1,y1 - CONNECTION_ARROW_SIZE,x1,y1 + CONNECTION_ARROW_SIZE); _EL_   g.drawLine(x2,y1 - CONNECTION_ARROW_SIZE,x2,y1 + CONNECTION_ARROW_SIZE); _EL_ } _EL_ ', 'public static GenericRecord subsetRecord(GenericRecord record,Schema subsetSchema){ _EL_   return subsetRecord(record,subsetSchema,null); _EL_ } _EL_ ', 'static public void queueOperation(Context context,OperationInfo args){ _EL_   args.calculateScheduledTime(); _EL_ synchronized (sWorkQueue) { _EL_     sWorkQueue.add(args); _EL_     sWorkQueue.notify(); _EL_   } _EL_   context.startService(new Intent(context,AsyncQueryServiceHelper.class)); _EL_ } _EL_ ', "private static Cell[] interpret(String string){ _EL_   Cell[] cells=new Cell[9]; _EL_   for (int i=0; i < string.length(); i++) { _EL_     int dig=string.charAt(i) - '1'; _EL_     int col=dig % 3; _EL_     int row=dig / 3; _EL_     cells[i]=new Cell(col,row); _EL_   } _EL_   return cells; _EL_ } _EL_ ", 'public Shape transform(Shape shape){ _EL_   Rectangle2D bounds=shape.getBounds2D(); _EL_   Point2D center=new Point2D.Double(bounds.getCenterX(),bounds.getCenterY()); _EL_   Point2D newCenter=transform(center); _EL_   double dx=newCenter.getX() - center.getX(); _EL_   double dy=newCenter.getY() - center.getY(); _EL_   AffineTransform at=AffineTransform.getTranslateInstance(dx,dy); _EL_   return at.createTransformedShape(shape); _EL_ } _EL_ ', 'private void init(){ _EL_   setTitle("New Competitive Group"); _EL_   compPropertiesPanel=CompetitivePropertiesPanel.createCompetitivePropertiesPanel(networkPanel,CompetitivePropsPanelType.CREATE_GROUP); _EL_   tabLogic.add(compPropertiesPanel); _EL_   layoutPanel=new MainLayoutPanel(false,this); _EL_   layoutPanel.setCurrentLayout(CompetitiveGroup.DEFAULT_LAYOUT); _EL_   tabLayout.add(layoutPanel); _EL_   tabbedPane.addTab("Logic",tabLogic); _EL_   tabbedPane.addTab("Layout",layoutPanel); _EL_   setContentPane(tabbedPane); _EL_   Action helpAction=new ShowHelpAction(compPropertiesPanel.getHelpPath()); _EL_   addButton(new JButton(helpAction)); _EL_ } _EL_ ', 'public static RevocationStatus check(X509Certificate cert,X509Certificate issuerCert) throws IOException, CertPathValidatorException { _EL_   CertId certId=null; _EL_   URI responderURI=null; _EL_   try { _EL_     X509CertImpl certImpl=X509CertImpl.toImpl(cert); _EL_     responderURI=getResponderURI(certImpl); _EL_     if (responderURI == null) { _EL_       throw new CertPathValidatorException("No OCSP Responder URI in certificate"); _EL_     } _EL_     certId=new CertId(issuerCert,certImpl.getSerialNumberObject()); _EL_   } _EL_  catch (  CertificateException|IOException e) { _EL_     throw new CertPathValidatorException("Exception while encoding OCSPRequest",e); _EL_   } _EL_   OCSPResponse ocspResponse=check(Collections.singletonList(certId),responderURI,issuerCert,null,null,Collections.<Extension>emptyList()); _EL_   return (RevocationStatus)ocspResponse.getSingleResponse(certId); _EL_ } _EL_ ', 'public static CompositeType forAlphaComposite(AlphaComposite ac){ _EL_ switch (ac.getRule()) { _EL_ case AlphaComposite.CLEAR: _EL_     return Clear; _EL_ case AlphaComposite.SRC: _EL_   if (ac.getAlpha() >= 1.0f) { _EL_     return SrcNoEa; _EL_   } _EL_  else { _EL_     return Src; _EL_   } _EL_ case AlphaComposite.DST: _EL_ return Dst; _EL_ case AlphaComposite.SRC_OVER: _EL_ if (ac.getAlpha() >= 1.0f) { _EL_ return SrcOverNoEa; _EL_ } _EL_  else { _EL_ return SrcOver; _EL_ } _EL_ case AlphaComposite.DST_OVER: _EL_ return DstOver; _EL_ case AlphaComposite.SRC_IN: _EL_ return SrcIn; _EL_ case AlphaComposite.DST_IN: _EL_ return DstIn; _EL_ case AlphaComposite.SRC_OUT: _EL_ return SrcOut; _EL_ case AlphaComposite.DST_OUT: _EL_ return DstOut; _EL_ case AlphaComposite.SRC_ATOP: _EL_ return SrcAtop; _EL_ case AlphaComposite.DST_ATOP: _EL_ return DstAtop; _EL_ case AlphaComposite.XOR: _EL_ return AlphaXor; _EL_ default : _EL_ throw new InternalError("Unrecognized alpha rule"); _EL_ } _EL_ } _EL_ ', 'public void removeTrackingIcon(Object tag){ _EL_   if (trackingIcons != null && trackingIcons.remove(tag)) { _EL_     repaint(); _EL_   } _EL_ } _EL_ ', 'public static File removeParent(File parent,File file){ _EL_   String absolutePath=file.getAbsolutePath(); _EL_   String parentAbsolutePath=parent.getAbsolutePath(); _EL_   String newPath=absolutePath.replace(parentAbsolutePath + "/",""); _EL_   return new File(newPath); _EL_ } _EL_ ', 'public static boolean almostEqual(double a,double b,double delta){ _EL_   return Math.abs(a - b) <= delta; _EL_ } _EL_ ', 'public void endElement(){ _EL_   nss.popContext(); _EL_ } _EL_ ', 'private JsonWriter open(int empty,String openBracket) throws IOException { _EL_   beforeValue(); _EL_   push(empty); _EL_   out.write(openBracket); _EL_   return this; _EL_ } _EL_ ', 'private double calculateLog(double value){ _EL_   return Math.log(value) / this.baseLog; _EL_ } _EL_ ', '@Override public boolean uploadFile(String source,String dest){ _EL_   FileInputStream fis; _EL_   try { _EL_     File file=new File(source); _EL_     fis=new FileInputStream(file); _EL_     mDBApi.putFileOverwrite(dest,fis,file.length(),null); _EL_     fis.close(); _EL_     return true; _EL_   } _EL_  catch (  DropboxUnlinkedException e) { _EL_     Log.d(String.valueOf(R.string.app_name),"User has unlinked.",e); _EL_     return false; _EL_   } _EL_ catch (  DropboxException e) { _EL_     Log.d(String.valueOf(R.string.app_name),"Something went wrong while uploading.",e); _EL_     return false; _EL_   } _EL_ catch (  FileNotFoundException e) { _EL_     Log.d(String.valueOf(R.string.app_name),"File not found.",e); _EL_     return false; _EL_   } _EL_ catch (  IOException e) { _EL_     e.printStackTrace(); _EL_     return false; _EL_   } _EL_ } _EL_ ', 'private File createZipFileHandle() throws IOException { _EL_   File zipFile=File.createTempFile("test","zip",tmpOutputFolder.getRoot()); _EL_   assertTrue(zipFile.delete()); _EL_   return zipFile; _EL_ } _EL_ ', 'public boolean removeHandler(String columnName){ _EL_   if (m_overrides == null)   return false; _EL_  else   return m_overrides.remove(columnName) != null; _EL_ } _EL_ ', 'public boolean isEmpty(){ _EL_   return (tag == null || tag.isEmpty()) && images.size() == 0; _EL_ } _EL_ ', 'public void touch(){ _EL_   touch=System.currentTimeMillis(); _EL_   if (worker != null) { _EL_     worker.touch(); _EL_   } _EL_ } _EL_ ', 'public CatalogEntry(String name,Vector args) throws CatalogException { _EL_   Integer iType=(Integer)entryTypes.get(name); _EL_   if (iType == null) { _EL_     throw new CatalogException(CatalogException.INVALID_ENTRY_TYPE); _EL_   } _EL_   int type=iType.intValue(); _EL_   try { _EL_     Integer iArgs=(Integer)entryArgs.get(type); _EL_     if (iArgs.intValue() != args.size()) { _EL_       throw new CatalogException(CatalogException.INVALID_ENTRY); _EL_     } _EL_   } _EL_  catch (  ArrayIndexOutOfBoundsException e) { _EL_     throw new CatalogException(CatalogException.INVALID_ENTRY_TYPE); _EL_   } _EL_   entryType=type; _EL_   this.args=args; _EL_ } _EL_ ', 'public void addMsgWaiting(MwiType type,int count,MwiProfile profile,boolean storeMessage){ _EL_   if (count > 255) { _EL_     count=255; _EL_   } _EL_   messages_.add(new MsgWaiting(type,count,profile,storeMessage)); _EL_ } _EL_ ', 'private void pushStack(int newTop){ _EL_   if (stackSize == stack.length) { _EL_     int[] newStack=new int[stackSize * 2]; _EL_     int[] newPathIndices=new int[stackSize * 2]; _EL_     String[] newPathNames=new String[stackSize * 2]; _EL_     System.arraycopy(stack,0,newStack,0,stackSize); _EL_     System.arraycopy(pathIndices,0,newPathIndices,0,stackSize); _EL_     System.arraycopy(pathNames,0,newPathNames,0,stackSize); _EL_     stack=newStack; _EL_     pathIndices=newPathIndices; _EL_     pathNames=newPathNames; _EL_   } _EL_   stack[stackSize++]=newTop; _EL_ } _EL_ ', 'private static void logHierarchy(String prefix,ClassLoader classLoader){ _EL_   if (!isDiagnosticsEnabled()) { _EL_     return; _EL_   } _EL_   ClassLoader systemClassLoader; _EL_   if (classLoader != null) { _EL_     final String classLoaderString=classLoader.toString(); _EL_     logDiagnostic(prefix + objectId(classLoader) + " == \'"+ classLoaderString+ "\'"); _EL_   } _EL_   try { _EL_     systemClassLoader=ClassLoader.getSystemClassLoader(); _EL_   } _EL_  catch (  SecurityException ex) { _EL_     logDiagnostic(prefix + "Security forbids determining the system classloader."); _EL_     return; _EL_   } _EL_   if (classLoader != null) { _EL_     StringBuffer buf=new StringBuffer(prefix + "ClassLoader tree:"); _EL_     for (; ; ) { _EL_       buf.append(objectId(classLoader)); _EL_       if (classLoader == systemClassLoader) { _EL_         buf.append(" (SYSTEM) "); _EL_       } _EL_       try { _EL_         classLoader=classLoader.getParent(); _EL_       } _EL_  catch (      SecurityException ex) { _EL_         buf.append(" --> SECRET"); _EL_         break; _EL_       } _EL_       buf.append(" --> "); _EL_       if (classLoader == null) { _EL_         buf.append("BOOT"); _EL_         break; _EL_       } _EL_     } _EL_     logDiagnostic(buf.toString()); _EL_   } _EL_ } _EL_ ', 'public void addGossipMember(GossipMember member){ _EL_   gossipMembers.add(member); _EL_ } _EL_ ', 'public static Collection<String> logFiles(){ _EL_   Collection<String> res=new ArrayList<>(fileAppenders.size()); _EL_   for (  FileAppender a : fileAppenders)   res.add(a.getFile()); _EL_   return res; _EL_ } _EL_ ', 'public boolean isCaseSensitive(){ _EL_   return m_caseSensitiveBox.isSelected(); _EL_ } _EL_ ', 'public boolean isNamespaceNode(Node n){ _EL_   if (Node.ATTRIBUTE_NODE == n.getNodeType()) { _EL_     String attrName=n.getNodeName(); _EL_     return (attrName.startsWith("xmlns:") || attrName.equals("xmlns")); _EL_   } _EL_   return false; _EL_ } _EL_ ', '@Override public int hashCode(){ _EL_   int hash=type.hashCode(); _EL_   if (name != null)   hash^=name.hashCode(); _EL_   if (actions != null)   hash^=actions.hashCode(); _EL_   return hash; _EL_ } _EL_ ', '@Override public boolean equals(Object obj){ _EL_   if (!(obj instanceof PolynomialFunction2D)) { _EL_     return false; _EL_   } _EL_   PolynomialFunction2D that=(PolynomialFunction2D)obj; _EL_   return Arrays.equals(this.coefficients,that.coefficients); _EL_ } _EL_ ', 'public AbstractBinaryTraversal(IBinaryTreeNode<T> node){ _EL_   if (node == null) { _EL_     throw new NullPointerException("AbstractBinaryTraversal received null starting point"); _EL_   } _EL_   stack.add(new Moment(node,initialPhase())); _EL_   advance(); _EL_ } _EL_ ', '@Override public void endElement(String uri,String localName,String qName) throws SAXException { _EL_   if (qName.equals(TAG_ROOT)) { _EL_   } _EL_  else   if (qName.equals(TAG_GROUP) || qName.equals(TAG_PROPERTY)) { _EL_     SettingsItem item=itemStack.remove(itemStack.size() - 1); _EL_     settingsItems.put(item.getKey(),item); _EL_   } _EL_  else { _EL_     throw new SAXException("Unknown tag or usage: " + localName); _EL_   } _EL_ } _EL_ ', '@Override public double value(int attIndex){ _EL_   int index=locateIndex(attIndex); _EL_   if ((index >= 0) && (m_Indices[index] == attIndex)) { _EL_     return m_AttValues[index]; _EL_   } _EL_  else { _EL_     return 0.0; _EL_   } _EL_ } _EL_ ', 'protected void decodeBitmapData(final GifFrame frame,byte[] dstPixels){ _EL_   if (frame != null) { _EL_     rawData.position(frame.bufferFrameStart); _EL_   } _EL_   final int nullCode=-1; _EL_   final int npix=(frame == null) ? width * height : frame.iw * frame.ih; _EL_   int available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, count, i, datum, data_size, first, top, bi, pi; _EL_   if (dstPixels == null || dstPixels.length < npix) { _EL_     dstPixels=new byte[npix]; _EL_   } _EL_   if (prefix == null) { _EL_     prefix=new short[MAX_STACK_SIZE]; _EL_   } _EL_   if (suffix == null) { _EL_     suffix=new byte[MAX_STACK_SIZE]; _EL_   } _EL_   if (pixelStack == null) { _EL_     pixelStack=new byte[MAX_STACK_SIZE + 1]; _EL_   } _EL_   data_size=read(); _EL_   clear=1 << data_size; _EL_   end_of_information=clear + 1; _EL_   available=clear + 2; _EL_   old_code=nullCode; _EL_   code_size=data_size + 1; _EL_   code_mask=(1 << code_size) - 1; _EL_   for (code=0; code < clear; code++) { _EL_     prefix[code]=0; _EL_     suffix[code]=(byte)code; _EL_   } _EL_   datum=bits=count=first=top=pi=bi=0; _EL_   for (i=0; i < npix; ) { _EL_     if (top == 0) { _EL_       if (bits < code_size) { _EL_         if (count == 0) { _EL_           count=readBlock(); _EL_           if (count <= 0) { _EL_             break; _EL_           } _EL_           bi=0; _EL_         } _EL_         datum+=((block[bi]) & 0xff) << bits; _EL_         bits+=8; _EL_         bi++; _EL_         count--; _EL_         continue; _EL_       } _EL_       code=datum & code_mask; _EL_       datum>>=code_size; _EL_       bits-=code_size; _EL_       if ((code > available) || (code == end_of_information)) { _EL_         break; _EL_       } _EL_       if (code == clear) { _EL_         code_size=data_size + 1; _EL_         code_mask=(1 << code_size) - 1; _EL_         available=clear + 2; _EL_         old_code=nullCode; _EL_         continue; _EL_       } _EL_       if (old_code == nullCode) { _EL_         pixelStack[top++]=suffix[code]; _EL_         old_code=code; _EL_         first=code; _EL_         continue; _EL_       } _EL_       in_code=code; _EL_       if (code == available) { _EL_         pixelStack[top++]=(byte)first; _EL_         code=old_code; _EL_       } _EL_       while (code > clear) { _EL_         pixelStack[top++]=suffix[code]; _EL_         code=prefix[code]; _EL_       } _EL_       first=(suffix[code]) & 0xff; _EL_       if (available >= MAX_STACK_SIZE) { _EL_         break; _EL_       } _EL_       pixelStack[top++]=(byte)first; _EL_       prefix[available]=(short)old_code; _EL_       suffix[available]=(byte)first; _EL_       available++; _EL_       if (((available & code_mask) == 0) && (available < MAX_STACK_SIZE)) { _EL_         code_size++; _EL_         code_mask+=available; _EL_       } _EL_       old_code=in_code; _EL_     } _EL_     top--; _EL_     dstPixels[pi++]=pixelStack[top]; _EL_     i++; _EL_   } _EL_   for (i=pi; i < npix; i++) { _EL_     dstPixels[i]=0; _EL_   } _EL_ } _EL_ ', 'public synchronized String findValue(String k){ _EL_   if (k == null) { _EL_     for (int i=nkeys; --i >= 0; )     if (keys[i] == null)     return values[i]; _EL_   } _EL_  else   for (int i=nkeys; --i >= 0; ) { _EL_     if (k.equalsIgnoreCase(keys[i]))     return values[i]; _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static byte[] decode(String input) throws ParseException { _EL_   if (input.length() == 0) { _EL_     return new byte[0]; _EL_   } _EL_   byte[] input58=new byte[input.length()]; _EL_   for (int i=0; i < input.length(); ++i) { _EL_     char c=input.charAt(i); _EL_     int digit=c < 128 ? INDEXES[c] : -1; _EL_     if (digit < 0) { _EL_       throw new ParseException("Illegal character " + c + " at position "+ i,i); _EL_     } _EL_     input58[i]=(byte)digit; _EL_   } _EL_   int zeros=0; _EL_   while (zeros < input58.length && input58[zeros] == 0) { _EL_     ++zeros; _EL_   } _EL_   byte[] decoded=new byte[input.length()]; _EL_   int outputStart=decoded.length; _EL_   for (int inputStart=zeros; inputStart < input58.length; ) { _EL_     decoded[--outputStart]=divmod(input58,inputStart,58,256); _EL_     if (input58[inputStart] == 0) { _EL_       ++inputStart; _EL_     } _EL_   } _EL_   while (outputStart < decoded.length && decoded[outputStart] == 0) { _EL_     ++outputStart; _EL_   } _EL_   return Arrays.copyOfRange(decoded,outputStart - zeros,decoded.length); _EL_ } _EL_ ', 'public boolean delete() throws IOException { _EL_   if (closed.compareAndSet(false,true)) { _EL_     close(false); _EL_     boolean success=allocatedNodesList.delete(); _EL_     success&=nioFile.delete(); _EL_     return success; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static IgniteLogger logger(GridKernalContext ctx,AtomicReference<IgniteLogger> logRef,Class<?> cls){ _EL_   IgniteLogger log=logRef.get(); _EL_   if (log == null) { _EL_     logRef.compareAndSet(null,ctx.log(cls)); _EL_     log=logRef.get(); _EL_   } _EL_   return log; _EL_ } _EL_ ', 'public byte receiveOneByte(){ _EL_   Log.d(TAG,"receiveOneByte() entrance"); _EL_   try { _EL_     acquireLock(); _EL_     mServerSocket.receive(mReceivePacket); _EL_     Log.d(TAG,"receive: " + (0 + mReceivePacket.getData()[0])); _EL_     return mReceivePacket.getData()[0]; _EL_   } _EL_  catch (  IOException e) { _EL_     e.printStackTrace(); _EL_   } _EL_   return Byte.MIN_VALUE; _EL_ } _EL_ ', 'public static List<ConstraintViolation> check(Resource resource,ProgressMonitor monitor){ _EL_   return check(resource,SPIN.constraint,null,monitor); _EL_ } _EL_ ', 'public static boolean isValidImdbId(String imdbId){ _EL_   if (StringUtils.isEmpty(imdbId)) { _EL_     return false; _EL_   } _EL_   return imdbId.matches("tt\\\\d{7}"); _EL_ } _EL_ ', 'protected void showRecordedVideo(){ _EL_   String absPath=mCurrentVideoFile.getAbsolutePath(); _EL_   Intent intent=new Intent(this,PlayerActivity.class); _EL_   intent.putExtra(PlayerActivity.EXTRA_VIDEO_PATH,absPath); _EL_   startActivity(intent); _EL_   mCurrentVideoFile=null; _EL_ } _EL_ ', 'private void write(Coordinate[] coords,int level,StringBuffer buf){ _EL_   startLine("<coordinates>",level,buf); _EL_   boolean isNewLine=false; _EL_   for (int i=0; i < coords.length; i++) { _EL_     if (i > 0) { _EL_       buf.append(TUPLE_SEPARATOR); _EL_     } _EL_     if (isNewLine) { _EL_       startLine("  ",level,buf); _EL_       isNewLine=false; _EL_     } _EL_     write(coords[i],buf); _EL_     if ((i + 1) % maxCoordinatesPerLine == 0 && i < coords.length - 1) { _EL_       buf.append("\\n"); _EL_       isNewLine=true; _EL_     } _EL_   } _EL_   buf.append("</coordinates>\\n"); _EL_ } _EL_ ', 'public static void swapPivot(DenseDoubleMatrix2D source,long diag,DenseDoubleMatrix2D s,DenseDoubleMatrix2D t){ _EL_   long swapRow=diag; _EL_   long swapCol=diag; _EL_   double maxValue=Math.abs(source.getDouble(diag,diag)); _EL_   long rows=source.getRowCount(); _EL_   long cols=source.getColumnCount(); _EL_   double abs=0; _EL_   for (long row=diag; row < rows; row++) { _EL_     for (long col=diag; col < cols; col++) { _EL_       abs=Math.abs(source.getDouble(row,col)); _EL_       if (abs > maxValue) { _EL_         maxValue=abs; _EL_         swapRow=row; _EL_         swapCol=col; _EL_       } _EL_     } _EL_   } _EL_   if (swapRow != diag) { _EL_     swapRows(source,swapRow,diag); _EL_     swapRows(t,swapRow,diag); _EL_   } _EL_   if (swapCol != diag) { _EL_     swapCols(source,swapCol,diag); _EL_     swapCols(s,swapCol,diag); _EL_   } _EL_ } _EL_ ', 'public boolean canPopupOverlapTaskBar(){ _EL_   boolean result=true; _EL_   try { _EL_     SecurityManager sm=System.getSecurityManager(); _EL_     if (sm != null) { _EL_       sm.checkPermission(SecurityConstants.AWT.SET_WINDOW_ALWAYS_ON_TOP_PERMISSION); _EL_     } _EL_   } _EL_  catch (  SecurityException se) { _EL_     result=false; _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public Job createJobForCreateCluster(String activitiXmlClasspathResourceName,List<Parameter> parameters) throws Exception { _EL_   return createJobForCreateCluster(activitiXmlClasspathResourceName,parameters,null); _EL_ } _EL_ ', 'private static String validateXML(String string) throws IOException { _EL_   for (int i=0; i < string.length(); i++) { _EL_     char ch=string.charAt(i); _EL_     if (!(ch == 9 || ch == 10 || ch == 13 || ch >= 32))     throw new IOException("Character reference \\"&#" + Integer.toString(ch) + "\\" is an invalid XML character."); _EL_   } _EL_   return string; _EL_ } _EL_ ', 'public void readValues(){ _EL_   readValues(false); _EL_ } _EL_ ', 'protected static boolean isAccessCompatibleWithInstantRun(int access){ _EL_   return ((access & Opcodes.ACC_ABSTRACT) == 0) && ((access & Opcodes.ACC_BRIDGE) == 0); _EL_ } _EL_ ', 'protected ASN1Sequence(ASN1Encodable[] array){ _EL_   for (int i=0; i != array.length; i++) { _EL_     seq.addElement(array[i]); _EL_   } _EL_ } _EL_ ', 'public ThreadedListenerManager(ExecutorService pool){ _EL_   managerNumber=MANAGER_COUNT.getAndIncrement(); _EL_   this.pool=pool; _EL_ } _EL_ ', 'private void computeOffsetSegment(LineSegment seg,int side,double distance,LineSegment offset){ _EL_   int sideSign=side == Position.LEFT ? 1 : -1; _EL_   double dx=seg.p1.x - seg.p0.x; _EL_   double dy=seg.p1.y - seg.p0.y; _EL_   double len=Math.sqrt(dx * dx + dy * dy); _EL_   double ux=sideSign * distance * dx / len; _EL_   double uy=sideSign * distance * dy / len; _EL_   offset.p0.x=seg.p0.x - uy; _EL_   offset.p0.y=seg.p0.y + ux; _EL_   offset.p1.x=seg.p1.x - uy; _EL_   offset.p1.y=seg.p1.y + ux; _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public synchronized E elementAt(int location){ _EL_   if (location < elementCount) { _EL_     return (E)elementData[location]; _EL_   } _EL_   throw arrayIndexOutOfBoundsException(location,elementCount); _EL_ } _EL_ ', 'private List<QoSRule> createQoSRules(JsonObject qosSettings){ _EL_   List<QoSRule> rules=new ArrayList<>(); _EL_   if (qosSettings.containsKey(JSON_FIELD_RULES)) { _EL_     JsonObject jsonRules=qosSettings.getJsonObject(JSON_FIELD_RULES); _EL_     for (    String urlPatternRegExp : jsonRules.fieldNames()) { _EL_       log.debug("Creating a new QoS rule object for URL pattern: " + urlPatternRegExp); _EL_       JsonObject jsonRule=jsonRules.getJsonObject(urlPatternRegExp); _EL_       Pattern urlPattern=Pattern.compile(urlPatternRegExp); _EL_       QoSRule rule=new QoSRule(urlPattern); _EL_       boolean addRule=false; _EL_       if (jsonRule.containsKey("reject")) { _EL_         addRule=true; _EL_         rule.setReject(jsonRule.getDouble("reject")); _EL_       } _EL_       if (jsonRule.containsKey("warn")) { _EL_         addRule=true; _EL_         rule.setWarn(jsonRule.getDouble("warn")); _EL_       } _EL_       if (addRule) { _EL_         rules.add(rule); _EL_       } _EL_  else { _EL_         log.warn("No or unknown QoS action defined for rule {}. This rule will not be loaded!",urlPatternRegExp); _EL_       } _EL_     } _EL_   } _EL_   return rules; _EL_ } _EL_ ', 'private Double formatDoubleValue(Double value,int places){ _EL_   BigDecimal bd=new BigDecimal(value); _EL_   bd=bd.setScale(places,RoundingMode.HALF_UP); _EL_   return bd.doubleValue(); _EL_ } _EL_ ', '@Override public void flush() throws IOException { _EL_   out.flush(); _EL_ } _EL_ ', 'protected int moveOrCopyFiles(boolean move,String what,File[] destFiles,File[] sourceFiles){ _EL_   int opCode=(move) ? OP_MOVE : OP_COPY; _EL_   mModifiedSrcFiles=(move) ? new ArrayList<String>() : null; _EL_   mModifiedDestFiles=new ArrayList<String>(); _EL_   openLogfile(); _EL_   onPreProcess(what,null,null,opCode); _EL_   int itemCount=0; _EL_   int pos=0; _EL_   int fileCount=destFiles.length; _EL_   while (pos < fileCount) { _EL_     File sourceFile=sourceFiles[pos]; _EL_     File destFile=destFiles[pos]; _EL_     File destRenamed=renameDuplicate(destFile); _EL_     if (osFileMoveOrCopy(move,destRenamed,sourceFile))     itemCount++; _EL_     log(((move) ? "MOVE /y " : "COPY /y "),getFilenameForLog(sourceFile)," ",getFilenameForLog(destRenamed)); _EL_     File sourceSidecar=getSidecar(sourceFile); _EL_     if (osFileExists(sourceSidecar)) { _EL_       File destSidecar=getSidecar(destRenamed); _EL_       if (osFileMoveOrCopy(move,destSidecar,sourceSidecar))       itemCount++; _EL_       log(((move) ? "MOVE /y " : "COPY /y "),getFilenameForLog(sourceSidecar)," ",getFilenameForLog(destSidecar)); _EL_     } _EL_     pos++; _EL_   } _EL_   int modifyCount=mModifiedDestFiles.size(); _EL_   String[] modifiedSourceFiles=((mModifiedSrcFiles != null) && (mModifiedSrcFiles.size() > 0)) ? mModifiedSrcFiles.toArray(new String[modifyCount]) : null; _EL_   onPostProcess(what,modifiedSourceFiles,(modifyCount > 0) ? mModifiedDestFiles.toArray(new String[modifyCount]) : null,itemCount,sourceFiles.length,opCode); _EL_   closeLogFile(); _EL_   return itemCount; _EL_ } _EL_ ', 'static boolean isCOctetStringValid(String value,int maxLength){ _EL_   if (value == null)   return true; _EL_   if (value.length() >= maxLength)   return false; _EL_   return true; _EL_ } _EL_ ', 'public Rectangle2D createProperBounds(double x1,double y1,double x2,double y2){ _EL_   double x=Math.min(x1,x2); _EL_   double y=Math.min(y1,y2); _EL_   double w=Math.abs(x1 - x2); _EL_   double h=Math.abs(y1 - y2); _EL_   return new Rectangle2D.Double(x,y,w,h); _EL_ } _EL_ ', 'public void addClearGraphDataButton(){ _EL_   JButton clearButton=new JButton("Clear"); _EL_   clearButton.setAction(RasterPlotActions.getClearGraphAction(this)); _EL_   buttonPanel.add(clearButton); _EL_ } _EL_ ', 'private void createFile(int number,String extention){ _EL_   for (int i=0; i < number; i++) { _EL_     try { _EL_       BufferedWriter output=new BufferedWriter(new FileWriter(new File(textInputFolder + "/File" + String.valueOf(i)+ extention))); _EL_       try { _EL_         output.write("File number "); _EL_         output.write(String.valueOf(i)); _EL_       } _EL_   finally { _EL_         output.close(); _EL_       } _EL_     } _EL_  catch (    IOException e) { _EL_       e.printStackTrace(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean isAnimal(){ _EL_   return typeString.contains(SUFFIX_ANIMAL); _EL_ } _EL_ ', 'public static String unifyLineSeparators(String s,String ls){ _EL_   if (s == null) { _EL_     return null; _EL_   } _EL_   if (ls == null) { _EL_     ls=System.getProperty("line.separator"); _EL_   } _EL_   if (!(ls.equals("\\n") || ls.equals("\\r") || ls.equals("\\r\\n"))) { _EL_     throw new IllegalArgumentException("Requested line separator is invalid."); _EL_   } _EL_   int length=s.length(); _EL_   StringBuilder buffer=new StringBuilder(length); _EL_   for (int i=0; i < length; i++) { _EL_     if (s.charAt(i) == \'\\r\') { _EL_       if ((i + 1) < length && s.charAt(i + 1) == \'\\n\') { _EL_         i++; _EL_       } _EL_       buffer.append(ls); _EL_     } _EL_  else     if (s.charAt(i) == \'\\n\') { _EL_       buffer.append(ls); _EL_     } _EL_  else { _EL_       buffer.append(s.charAt(i)); _EL_     } _EL_   } _EL_   return buffer.toString(); _EL_ } _EL_ ', 'public void addNotification(PingNotification notification){ _EL_   notifications.add(notification); _EL_ } _EL_ ', 'public List<Datastore> createNfsDatastore(ClusterComputeResource cluster,FileShareRestRep fileSystem,FileSystemExportParam export,URI datacenterId,String datastoreName){ _EL_   addNfsDatastoreTag(fileSystem,export,datacenterId,datastoreName); _EL_   List<Datastore> datastores=Lists.newArrayList(); _EL_   String fileServer=StringUtils.substringBefore(export.getMountPoint(),":"); _EL_   String mountPath=StringUtils.substringAfter(export.getMountPoint(),":"); _EL_   for (  HostSystem host : cluster.getHosts()) { _EL_     datastores.add(execute(new CreateNfsDatastore(host,fileServer,mountPath,datastoreName))); _EL_     addAffectedResource(fileSystem); _EL_     ExecutionUtils.clearRollback(); _EL_   } _EL_   return datastores; _EL_ } _EL_ ', 'private void checkSize(final int i){ _EL_   if (i >= max_size) { _EL_     final int old_size=max_size; _EL_     max_size+=increment_size; _EL_     if (max_size <= i) { _EL_       max_size=i + increment_size + 2; _EL_     } _EL_     final String[] temp=items; _EL_     items=new String[max_size]; _EL_     System.arraycopy(temp,0,items,0,old_size); _EL_     increment_size=incrementSize(increment_size); _EL_   } _EL_ } _EL_ ', 'static void checkInternalName(final String name,final int start,final int end,final String msg){ _EL_   int max=end == -1 ? name.length() : end; _EL_   try { _EL_     int begin=start; _EL_     int slash; _EL_     do { _EL_       slash=name.indexOf(\'/\',begin + 1); _EL_       if (slash == -1 || slash > max) { _EL_         slash=max; _EL_       } _EL_       checkIdentifier(name,begin,slash,null); _EL_       begin=slash + 1; _EL_     } _EL_  while (slash != max); _EL_   } _EL_  catch (  IllegalArgumentException unused) { _EL_     throw new IllegalArgumentException("Invalid " + msg + " (must be a fully qualified class name in internal form): "+ name); _EL_   } _EL_ } _EL_ ', 'protected void initializeTaskDone(Set<TaskImageContainer> tasks,Optional<Runnable> runnableWhenDone){ _EL_   Set<CaptureSession> sessionSet=new HashSet<>(); _EL_   Map<CaptureSession,Integer> sessionTaskCount=new HashMap<>(); _EL_   for (  TaskImageContainer task : tasks) { _EL_     sessionSet.add(task.mSession); _EL_     Integer currentCount=sessionTaskCount.get(task.mSession); _EL_     if (currentCount == null) { _EL_       sessionTaskCount.put(task.mSession,1); _EL_     } _EL_  else { _EL_       sessionTaskCount.put(task.mSession,currentCount + 1); _EL_     } _EL_   } _EL_ synchronized (mShadowTaskMap) { _EL_     for (    CaptureSession captureSession : sessionSet) { _EL_       BlockSignalProtocol protocol=new BlockSignalProtocol(); _EL_       protocol.setCount(sessionTaskCount.get(captureSession)); _EL_       final ImageShadowTask shadowTask; _EL_       shadowTask=new ImageShadowTask(protocol,captureSession,runnableWhenDone); _EL_       mShadowTaskMap.put(captureSession,shadowTask); _EL_       mProcessingTaskConsumer.enqueueTask(shadowTask); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static String unquote(String name){ _EL_   return isQuoted(name) ? name.substring(1,name.length() - 1) : name; _EL_ } _EL_ ', 'synchronized void redo(RTEditText editor){ _EL_   Stack<Operation> redoStack=getRedoStack(editor); _EL_   if (!redoStack.empty()) { _EL_     Stack<Operation> undoStack=getUndoStack(editor); _EL_     Operation op=redoStack.pop(); _EL_     push(op,undoStack); _EL_     op.redo(editor); _EL_     while (!redoStack.empty() && op.canMerge(redoStack.peek())) { _EL_       op=redoStack.pop(); _EL_       push(op,undoStack); _EL_       op.redo(editor); _EL_     } _EL_   } _EL_ } _EL_ ', 'private static <T>T reportJoin(Object r){ _EL_   if (r instanceof AltResult) { _EL_     Throwable x; _EL_     if ((x=((AltResult)r).ex) == null)     return null; _EL_     if (x instanceof CancellationException)     throw (CancellationException)x; _EL_     if (x instanceof CompletionException)     throw (CompletionException)x; _EL_     throw new CompletionException(x); _EL_   } _EL_   @SuppressWarnings("unchecked") T t=(T)r; _EL_   return t; _EL_ } _EL_ ', 'public int write(final Protein protein) throws IOException { _EL_   checkEntryHierarchy(); _EL_   if (entryHierarchy != null) { _EL_     for (    ProteinXref xref : protein.getCrossReferences()) { _EL_       final SimpleProtein simpleProtein=SimpleProtein.valueOf(protein,xref,entryHierarchy); _EL_       if (simpleProtein != null) { _EL_         final SimpleHash model=buildModelMap(simpleProtein,entryHierarchy); _EL_         Writer writer=null; _EL_         try { _EL_           final Template temp=freeMarkerConfig.getTemplate(freeMarkerTemplate); _EL_           checkTempDirectory(tempDirectory); _EL_           if (!tempDirectory.endsWith(File.separator)) { _EL_             tempDirectory=tempDirectory + File.separator; _EL_           } _EL_           UrlFriendlyIdGenerator gen=UrlFriendlyIdGenerator.getInstance(); _EL_           String urlFriendlyId=gen.generate(xref.getIdentifier()); _EL_           final Path newResultFile=Paths.get(tempDirectory + urlFriendlyId + ".svg"); _EL_           resultFiles.add(newResultFile); _EL_           writer=Files.newBufferedWriter(newResultFile,characterSet); _EL_           temp.process(model,writer); _EL_           writer.flush(); _EL_         } _EL_  catch (        TemplateException e) { _EL_           e.printStackTrace(); _EL_         } _EL_ catch (        IOException e) { _EL_           e.printStackTrace(); _EL_         } _EL_  finally { _EL_           if (writer != null) { _EL_             writer.close(); _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return 0; _EL_ } _EL_ ', 'public void writeIntoSPTKLF0File(String sptkFileName) throws IOException { _EL_   LEDataOutputStream lf0Data=new LEDataOutputStream(new BufferedOutputStream(new FileOutputStream(sptkFileName))); _EL_   for (int i=0; i < this.contour.length; i++) { _EL_     double f0Val=contour[i]; _EL_     if (contour[i] == 0.0f) { _EL_       lf0Data.writeFloat(NEGATIVE_MAXIMUM); _EL_     } _EL_  else { _EL_       lf0Data.writeFloat((float)Math.log(contour[i])); _EL_     } _EL_   } _EL_   lf0Data.flush(); _EL_   lf0Data.close(); _EL_ } _EL_ ', 'public static Thread start(long timeout){ _EL_   return start(Thread.currentThread(),timeout); _EL_ } _EL_ ', 'public static Element find(Node parent,String name){ _EL_   NodeList list=parent.getChildNodes(); _EL_   for (int i=0; i < list.getLength(); i++) { _EL_     Node n=list.item(i); _EL_     if (n instanceof Element) { _EL_       Element e=(Element)n; _EL_       if (name.equals(e.getAttribute("id"))) { _EL_         return e; _EL_       } _EL_     } _EL_     Element r=find(n,name); _EL_     if (r != null) { _EL_       return r; _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static RE mkStar(RE x){ _EL_   if (x.equals(epsilon) || x.equals(empty)) { _EL_     return epsilon; _EL_   } _EL_   RE res=new RE(ReOp.STAR); _EL_   res.unaryArg=x; _EL_   return res; _EL_ } _EL_ ', 'public void remove(final Object element){ _EL_   Set oldSelection=new HashSet(selection); _EL_   boolean rv=selection.remove(element); _EL_   if (rv) { _EL_     fireSelectionChanged(oldSelection,selection); _EL_   } _EL_   oldSelection=null; _EL_ } _EL_ ', '@Override public void mouseClicked(MouseEvent evt){ _EL_   delegate.mouseMoved(evt); _EL_ } _EL_ ', 'public void printf(Locale locale,String format,Object... args){ _EL_   out.printf(locale,format,args); _EL_   out.flush(); _EL_ } _EL_ ', 'public void transform(Source xmlSource,Result outputTarget) throws TransformerException { _EL_   transform(xmlSource,outputTarget,true); _EL_ } _EL_ ', 'public void addSuffix(DalvInsn insn){ _EL_   suffix.add(insn); _EL_ } _EL_ ', '@Override public Enumeration<Option> listOptions(){ _EL_   Vector<Option> newVector=new Vector<Option>(1); _EL_   newVector.addElement(new Option("\\tThe filename where output will be stored. Use - for stdout.\\n" + "\\t(default temp file)","O",1,"-O <file name>")); _EL_   return newVector.elements(); _EL_ } _EL_ ', 'private void closeSelector(){ _EL_   if (selector.isOpen()) { _EL_     if (log.isDebugEnabled())     log.debug("Closing all listening sockets."); _EL_     for (    SelectionKey key : selector.keys())     U.close(key.channel(),log); _EL_     if (log.isDebugEnabled())     log.debug("Closing NIO selector."); _EL_     U.close(selector,log); _EL_   } _EL_ } _EL_ ', 'public static Number sub(Number a,Number b){ _EL_   if (isFloatingPoint(a) || isFloatingPoint(b)) { _EL_     return a.doubleValue() - b.doubleValue(); _EL_   } _EL_  else { _EL_     return a.longValue() - b.longValue(); _EL_   } _EL_ } _EL_ ', 'public Builder requiredAttributes(final String... nameOrOIDs){ _EL_   return requiredAttributes(Arrays.asList(nameOrOIDs)); _EL_ } _EL_ ', 'private void showHistoryDialog(){ _EL_   JBList commandsList=new JBList(HistoryUtils.getCommandsFromHistory()); _EL_   commandsList.setCellRenderer(new HistoryListCellRenderer()); _EL_   commandsList.setEmptyText("No data to display"); _EL_   commandsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); _EL_   String[] buttons={"OK","Cancel"}; _EL_   int result=JOptionPane.showOptionDialog(toolWindowContent,commandsList,"Command history",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,buttons,buttons[0]); _EL_   if (result == 0) { _EL_     updateUiFromCommand((Command)commandsList.getSelectedValue()); _EL_   } _EL_ } _EL_ ', 'protected static byte[] read(InputStream is) throws IOException { _EL_   final boolean close=true; _EL_   ByteArrayOutputStream baos=new ByteArrayOutputStream(); _EL_   try { _EL_     int i; _EL_     while ((i=is.read()) != -1) { _EL_       baos.write(i); _EL_     } _EL_   } _EL_   finally { _EL_     try { _EL_       if (close) { _EL_         is.close(); _EL_       } _EL_       baos.close(); _EL_     } _EL_  catch (    Exception ex) { _EL_       log.warn("Could not close input/output stream: " + ex,ex); _EL_     } _EL_   } _EL_   return baos.toByteArray(); _EL_ } _EL_ ', 'public static <T>Streamable<T> fromPublisher(final Publisher<? extends T> publisher){ _EL_   Objects.requireNonNull(publisher); _EL_   final SeqSubscriber<T> sub=SeqSubscriber.subscriber(); _EL_   publisher.subscribe(sub); _EL_   return fromStream(sub.stream()); _EL_ } _EL_ ', 'public ProtobufConnection(Listener<MessageType> handler,MessageType prototype,int maxMessageSize,int timeoutMillis){ _EL_   this.handler=handler; _EL_   this.prototype=prototype; _EL_   this.maxMessageSize=Math.min(maxMessageSize,Integer.MAX_VALUE - 4); _EL_   setTimeoutEnabled(false); _EL_   setSocketTimeout(timeoutMillis); _EL_ } _EL_ ', 'public Notification find(Integer notificationID){ _EL_   Notification notification=new Notification(context,notificationID,null); _EL_   if (notification.getAttributes() == null)   notification.loadAttributesFromPreferences(); _EL_   return notification; _EL_ } _EL_ ', 'public GreenGradient(int maxCount){ _EL_   this.maxCount=maxCount; _EL_   factor=maxCount / Math.log(maxCount); _EL_ } _EL_ ', 'public static void writeHistogram(TDoubleDoubleHashMap distr,String filename) throws FileNotFoundException, IOException { _EL_   BufferedWriter aWriter=IOUtils.getBufferedWriter(filename); _EL_   aWriter.write("bin\\tcount"); _EL_   aWriter.newLine(); _EL_   double[] keys=distr.keys(); _EL_   Arrays.sort(keys); _EL_   for (  double key : keys) { _EL_     aWriter.write(String.valueOf(key)); _EL_     aWriter.write("\\t"); _EL_     aWriter.write(String.valueOf(distr.get(key))); _EL_     aWriter.newLine(); _EL_   } _EL_   aWriter.close(); _EL_ } _EL_ ', 'public static <T>CompletionStage<T> dereference(CompletionStage<? extends CompletionStage<T>> stage){ _EL_   return stage.thenCompose(Identity.INSTANCE); _EL_ } _EL_ ', 'public static Number plus(Character left,Number right){ _EL_   return NumberNumberPlus.plus(Integer.valueOf(left),right); _EL_ } _EL_ ', 'public static String clipStringIfNecessary(JComponent c,FontMetrics fm,String string,int availTextWidth){ _EL_   if ((string == null) || (string.equals(""))) { _EL_     return ""; _EL_   } _EL_   int textWidth=SwingUtilities2.stringWidth(c,fm,string); _EL_   if (textWidth > availTextWidth) { _EL_     return SwingUtilities2.clipString(c,fm,string,availTextWidth); _EL_   } _EL_   return string; _EL_ } _EL_ ', 'public boolean removeElement(Object obj){ _EL_ synchronized (actions) { _EL_     if (allowToChange) { _EL_       boolean result=actions.remove(obj); _EL_       if (actions.isEmpty()) { _EL_         if (headTask != null) { _EL_           cancel(); _EL_         } _EL_       } _EL_       return result; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void addSlide(@NonNull Fragment fragment){ _EL_   fragments.add(fragment); _EL_   addBackgroundColor(Color.TRANSPARENT); _EL_   pagerAdapter.notifyDataSetChanged(); _EL_ } _EL_ ', 'private static FloatBuffer createVertexArray(float[] coords){ _EL_   ByteBuffer bb=ByteBuffer.allocateDirect(coords.length * 4); _EL_   bb.order(ByteOrder.nativeOrder()); _EL_   FloatBuffer fb=bb.asFloatBuffer(); _EL_   fb.put(coords); _EL_   fb.position(0); _EL_   return fb; _EL_ } _EL_ ', 'protected void publish() throws MqttException, IOException { _EL_   sampleClientPub=new SampleAsyncWait(url,clientIdPub,cleanSession,quietMode,userName,password); _EL_   if (sampleClientPub != null) { _EL_     String topic="Sample/Java/v3"; _EL_     int qos=2; _EL_     String message="Message from async calback MQTTv3 Java client sample"; _EL_     try { _EL_       sampleClientPub.publish(topic,qos,message.getBytes()); _EL_     } _EL_  catch (    Throwable e) { _EL_       e.printStackTrace(); _EL_     } _EL_   } _EL_ } _EL_ ', 'private Object[] invWmSubBand(Image img,double[] wm,int n,double threshold){ _EL_   int m=0; _EL_   double z=0.0; _EL_   double v=0.0; _EL_   for (int i=0; i < img.getWidth() * img.getHeight(); i++) { _EL_     if (img.getData()[i] > threshold) { _EL_       z+=(img.getData()[i] * wm[i % n]); _EL_       v+=Math.abs(img.getData()[i]); _EL_       m++; _EL_     } _EL_   } _EL_   return new Object[]{m,z,v}; _EL_ } _EL_ ', 'public static void moveToDirectory(File src,File destDir,boolean createDestDir) throws IOException { _EL_   if (src == null) { _EL_     throw new NullPointerException("Source must not be null"); _EL_   } _EL_   if (destDir == null) { _EL_     throw new NullPointerException("Destination must not be null"); _EL_   } _EL_   if (!src.exists()) { _EL_     throw new FileNotFoundException("Source \'" + src + "\' does not exist"); _EL_   } _EL_   if (src.isDirectory()) { _EL_     moveDirectoryToDirectory(src,destDir,createDestDir); _EL_   } _EL_  else { _EL_     moveFileToDirectory(src,destDir,createDestDir); _EL_   } _EL_ } _EL_ ', 'private static TungstenProperties loadSecurityPropertiesFromFile(String propertiesFileLocation) throws ConfigurationException { _EL_   TungstenProperties securityProps=null; _EL_   FileInputStream securityConfigurationFileInputStream=null; _EL_   if (propertiesFileLocation == null && ClusterConfiguration.getClusterHome() == null) { _EL_     throw new ConfigurationException("No cluster.home found from which to configure cluster resources."); _EL_   } _EL_   File securityPropertiesFile; _EL_   if (propertiesFileLocation == null) { _EL_     File clusterConfDirectory=ClusterConfiguration.getDir(ClusterConfiguration.getGlobalConfigDirName(ClusterConfiguration.getClusterHome())); _EL_     securityPropertiesFile=new File(clusterConfDirectory.getPath(),SecurityConf.SECURITY_PROPERTIES_FILE_NAME); _EL_   } _EL_  else { _EL_     securityPropertiesFile=new File(propertiesFileLocation); _EL_   } _EL_   try { _EL_     securityProps=new TungstenProperties(); _EL_     securityConfigurationFileInputStream=new FileInputStream(securityPropertiesFile); _EL_     securityProps.load(securityConfigurationFileInputStream,true); _EL_     closeSecurityConfigurationFileInputStream(securityConfigurationFileInputStream); _EL_   } _EL_  catch (  FileNotFoundException e) { _EL_     String msg=MessageFormat.format("Cannot find configuration file: {0}",securityPropertiesFile.getPath()); _EL_     logger.debug(msg,e); _EL_     throw new ConfigurationException(msg); _EL_   } _EL_ catch (  IOException e) { _EL_     String msg=MessageFormat.format("Cannot load configuration file: {0}.\\n Reason: {1}",securityPropertiesFile.getPath(),e.getMessage()); _EL_     logger.debug(msg,e); _EL_     throw new ConfigurationException(msg); _EL_   } _EL_  finally { _EL_     closeSecurityConfigurationFileInputStream(securityConfigurationFileInputStream); _EL_   } _EL_   if (logger.isDebugEnabled()) { _EL_     logger.debug(MessageFormat.format(": {0}",securityPropertiesFile.getPath())); _EL_   } _EL_   securityProps.put(SecurityConf.SECURITY_PROPERTIES_PARENT_FILE_LOCATION,securityPropertiesFile.getAbsolutePath()); _EL_   return securityProps; _EL_ } _EL_ ', 'public static void close(InputStream in){ _EL_   try { _EL_     if (in != null) { _EL_       in.close(); _EL_     } _EL_   } _EL_  catch (  IOException ioE) { _EL_   } _EL_ } _EL_ ', 'private void startFileBasedMerge() throws CarbonSortKeyAndGroupByException { _EL_   try { _EL_     executorService.shutdown(); _EL_     executorService.awaitTermination(2,TimeUnit.DAYS); _EL_     dataSorterAndWriterExecutorService.shutdown(); _EL_     dataSorterAndWriterExecutorService.awaitTermination(2,TimeUnit.DAYS); _EL_   } _EL_  catch (  InterruptedException e) { _EL_     throw new CarbonSortKeyAndGroupByException("Problem while shutdown the server ",e); _EL_   } _EL_ } _EL_ ', 'public void insertUpdate(DocumentEvent e){ _EL_   if (!dirty) { _EL_     setDirty(true); _EL_   } _EL_ } _EL_ ', 'public DateTimeParseException(String message,CharSequence parsedData,int errorIndex){ _EL_   super(message); _EL_   this.parsedString=parsedData.toString(); _EL_   this.errorIndex=errorIndex; _EL_ } _EL_ ', 'protected Object readObjectImpl(Class cl) throws IOException { _EL_   try { _EL_     Object obj=cl.newInstance(); _EL_     if (_refs == null)     _refs=new ArrayList(); _EL_     _refs.add(obj); _EL_     HashMap fieldMap=getFieldMap(cl); _EL_     int code=read(); _EL_     for (; code >= 0 && code != \'z\'; code=read()) { _EL_       unread(); _EL_       Object key=readObject(); _EL_       Field field=(Field)fieldMap.get(key); _EL_       if (field != null) { _EL_         Object value=readObject(field.getType()); _EL_         field.set(obj,value); _EL_       } _EL_  else { _EL_         Object value=readObject(); _EL_       } _EL_     } _EL_     if (code != \'z\')     throw expect("map",code); _EL_     try { _EL_       Method method=cl.getMethod("readResolve",new Class[0]); _EL_       return method.invoke(obj,new Object[0]); _EL_     } _EL_  catch (    Exception e) { _EL_     } _EL_     return obj; _EL_   } _EL_  catch (  IOException e) { _EL_     throw e; _EL_   } _EL_ catch (  Exception e) { _EL_     throw new IOExceptionWrapper(e); _EL_   } _EL_ } _EL_ ', 'public static PlainText plain(int text){ _EL_   return plain(Integer.toString(text)); _EL_ } _EL_ ', 'public static boolean isToday(Calendar _calendar){ _EL_   Calendar now=Calendar.getInstance(); _EL_   if (now.get(Calendar.DAY_OF_MONTH) == _calendar.get(Calendar.DAY_OF_MONTH)) { _EL_     if (now.get(Calendar.MONTH) == _calendar.get(Calendar.MONTH)) { _EL_       if (now.get(Calendar.YEAR) == _calendar.get(Calendar.YEAR)) { _EL_         return true; _EL_       } _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void start(){ _EL_   managedPairs.add(createPort()); _EL_   fixNames(); _EL_   singlePorts.addObserver(observer,false); _EL_   for (  Ports<M> ports : multiPortsList) { _EL_     ports.addObserver(observer,false); _EL_   } _EL_ } _EL_ ', 'public Double read(String value){ _EL_   return Double.valueOf(value); _EL_ } _EL_ ', 'public boolean hasFeature(String feature,String version){ _EL_   if (feature.equals("Core")) { _EL_     return version == null || version.equals("1.0") || version.equals("2.0"); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private StoragePort assignPortBasedOnUsage(List<StoragePort> matchingTargetPorts,Map<StoragePort,Integer> portUsage){ _EL_   StoragePort foundPort=null; _EL_   for (  StoragePort matchedPort : matchingTargetPorts) { _EL_     if (portUsage.get(matchedPort) == null) { _EL_       portUsage.put(matchedPort,0); _EL_     } _EL_     if (foundPort == null) { _EL_       foundPort=matchedPort; _EL_     } _EL_  else { _EL_       if (portUsage.get(matchedPort) < portUsage.get(foundPort)) { _EL_         foundPort=matchedPort; _EL_       } _EL_     } _EL_   } _EL_   if (foundPort != null) { _EL_     portUsage.put(foundPort,portUsage.get(foundPort) + 1); _EL_   } _EL_   return foundPort; _EL_ } _EL_ ', 'public ExternalEvent nextEvent(){ _EL_   if (queue.size() == 0) { _EL_     return new ExternalEvent(Double.MAX_VALUE); _EL_   } _EL_   ExternalEvent ee=queue.get(nextEventIndex); _EL_   nextEventIndex++; _EL_   if (nextEventIndex >= queue.size()) { _EL_     queue=readEvents(nrofPreload); _EL_     nextEventIndex=0; _EL_   } _EL_   return ee; _EL_ } _EL_ ', 'public void appendToBuffer(StringBuilder buf){ _EL_   Iterator<double[]> iter=points.iterator(); _EL_   while (iter.hasNext()) { _EL_     double[] data=iter.next(); _EL_     for (int i=0; i < data.length; i++) { _EL_       if (i > 0) { _EL_         buf.append(","); _EL_       } _EL_       buf.append(data[i]); _EL_     } _EL_     if (iter.hasNext()) { _EL_       buf.append(" "); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void updateComboBox(JComboBox<Track> box){ _EL_   box.removeAllItems(); _EL_   box.addItem(null); _EL_   List<Track> tracks=getTrackByNameList(null); _EL_   for (  Track track : tracks) { _EL_     box.addItem(track); _EL_   } _EL_ } _EL_ ', 'public RefactoringSessionTransformer(final boolean projects){ _EL_   fProjects=projects; _EL_ } _EL_ ', 'public CompareResult open(){ _EL_   final ContentComparator[] comparatorArray=comparators.toArray(new ContentComparator[comparators.size()]); _EL_   final CustomCompareEditorInput input=new CustomCompareEditorInput(modified,original,ancestor,comparatorArray,compareConfiguration,externalCompareHandler); _EL_   if (compareConfiguration.isLeftEditable() || compareConfiguration.isRightEditable()) { _EL_     compareConfiguration.setProperty("org.eclipse.compare.internal.CONFIRM_SAVE_PROPERTY",Boolean.FALSE); _EL_     input.setAlwaysDirty(alwaysDirty); _EL_   } _EL_   input.addSaveListener(new ProxyCompareSaveListener()); _EL_   log.info(MessageFormat.format("Comparing {0} to {1}",getLabelNOLOC(modified),getLabelNOLOC(original))); _EL_   compareUIType.openCompareUI(input); _EL_   final boolean contentsIdentical=(input.getCompareResult() == null); _EL_   final boolean contentsSaved=(input.getSavedContents().length > 0); _EL_   return new CompareResult(contentsIdentical,input.wasOKPressed(),contentsSaved); _EL_ } _EL_ ', 'protected void addResource(String resource){ _EL_   if (!StringUtils.isEmpty(resource)) { _EL_     resources.add(resource); _EL_   } _EL_ } _EL_ ', 'public static boolean isNumeric(String maybeNumeric){ _EL_   return maybeNumeric != null && maybeNumeric.matches("[0-9]+"); _EL_ } _EL_ ', 'public void openKeyStore(File keyStoreFile,String defaultPassword){ _EL_   try { _EL_     if (!keyStoreFile.isFile()) { _EL_       JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("OpenAction.NotFile.message"),keyStoreFile),res.getString("OpenAction.OpenKeyStore.Title"),JOptionPane.WARNING_MESSAGE); _EL_       return; _EL_     } _EL_     if (isKeyStoreFileOpen(keyStoreFile)) { _EL_       JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("OpenAction.NoOpenKeyStoreAlreadyOpen.message"),keyStoreFile),res.getString("OpenAction.OpenKeyStore.Title"),JOptionPane.WARNING_MESSAGE); _EL_       return; _EL_     } _EL_     Password password=(defaultPassword != null) ? new Password(defaultPassword.toCharArray()) : null; _EL_     KeyStore openedKeyStore=null; _EL_     boolean firstTry=true; _EL_     while (true) { _EL_       if (password == null) { _EL_         password=showPasswordDialog(keyStoreFile); _EL_       } _EL_       if (password == null) { _EL_         return; _EL_       } _EL_       try { _EL_         openedKeyStore=KeyStoreUtil.load(keyStoreFile,password); _EL_         break; _EL_       } _EL_  catch (      KeyStoreLoadException klex) { _EL_         if (defaultPassword == null || !firstTry) { _EL_           int tryAgainChoice=showErrorMessage(keyStoreFile,klex); _EL_           if (tryAgainChoice == JOptionPane.NO_OPTION) { _EL_             return; _EL_           } _EL_         } _EL_       } _EL_       password.nullPassword(); _EL_       password=null; _EL_       firstTry=false; _EL_     } _EL_     if (openedKeyStore == null) { _EL_       JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("OpenAction.FileNotRecognisedType.message"),keyStoreFile.getName()),res.getString("OpenAction.OpenKeyStore.Title"),JOptionPane.WARNING_MESSAGE); _EL_       return; _EL_     } _EL_     kseFrame.addKeyStore(openedKeyStore,keyStoreFile,password); _EL_   } _EL_  catch (  FileNotFoundException ex) { _EL_     JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("OpenAction.NoReadFile.message"),keyStoreFile),res.getString("OpenAction.OpenKeyStore.Title"),JOptionPane.WARNING_MESSAGE); _EL_   } _EL_ catch (  Exception ex) { _EL_     DError.displayError(frame,ex); _EL_   } _EL_ } _EL_ ', 'public static String encode(String string){ _EL_   byte[] bytes; _EL_   try { _EL_     bytes=string.getBytes(PREFERRED_ENCODING); _EL_   } _EL_  catch (  UnsupportedEncodingException e) { _EL_     bytes=string.getBytes(); _EL_   } _EL_   return encodeBytes(bytes); _EL_ } _EL_ ', 'public final long addAndGet(long delta){ _EL_   for (; ; ) { _EL_     long current=get(); _EL_     long next=current + delta; _EL_     if (compareAndSet(current,next))     return next; _EL_   } _EL_ } _EL_ ', 'default long now(TimeUnit unit){ _EL_   return unit.convert(System.currentTimeMillis(),TimeUnit.MILLISECONDS); _EL_ } _EL_ ', 'private final void append(List<? super NameValuePair> l,final String k,final String v){ _EL_   if (v != null)   l.add(new NameValuePair(k,v)); _EL_ } _EL_ ', 'protected Properties createProperties(URL location) throws IOException { _EL_   InputStream is=null; _EL_   if (location != null) { _EL_     is=location.openStream(); _EL_   } _EL_   Properties tmpProperties=new Properties(); _EL_   if (is != null) { _EL_     tmpProperties.load(is); _EL_   } _EL_   return tmpProperties; _EL_ } _EL_ ', 'protected double calcPlanWeight(final T plan,final double maxScore){ _EL_   if (plan.getScore() == null) { _EL_     return Double.NaN; _EL_   } _EL_   double weight=Math.exp(this.beta * (plan.getScore() - maxScore)); _EL_   if (weight < MIN_WEIGHT)   weight=MIN_WEIGHT; _EL_   return weight; _EL_ } _EL_ ', 'public static boolean isExtension(String filename,Collection<String> extensions){ _EL_   if (filename == null) { _EL_     return false; _EL_   } _EL_   if (extensions == null || extensions.isEmpty()) { _EL_     return indexOfExtension(filename) == -1; _EL_   } _EL_   String fileExt=getExtension(filename); _EL_   for (  String extension : extensions) { _EL_     if (fileExt.equals(extension)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public java.lang.StringBuilder insert(int index,java.lang.String string){ _EL_   if (string == null) { _EL_     string="null"; _EL_   } _EL_   int min=string.length(); _EL_   if (min != 0) { _EL_     move(min,index); _EL_     string.getChars(0,min,value,index); _EL_     count+=min; _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public void mkdir(String key) throws IOException { _EL_   key=key.replace(" ",""); _EL_   if (key.endsWith("/") && !key.equals("/")) { _EL_     throw new InvalidParameterException("Trailing slash not allowed in zookeeper path"); _EL_   } _EL_   String[] split=key.split("/"); _EL_   StringBuilder builder=new StringBuilder(); _EL_   for (  String s : split) { _EL_     builder.append(s); _EL_     if (!s.isEmpty() && !exists(builder.toString())) { _EL_       zkState.set(builder.toString(),null); _EL_     } _EL_     builder.append("/"); _EL_   } _EL_ } _EL_ ', 'public double calculateLog(double value){ _EL_   return Math.log(value) / this.baseLog; _EL_ } _EL_ ', 'public static Vector3 pow(Vector3 o,double power){ _EL_   return new Vector3(Math.pow(o.x,power),Math.pow(o.y,power),Math.pow(o.z,power)); _EL_ } _EL_ ', '@Override public void flush(){ _EL_   flush(false); _EL_ } _EL_ ', 'public static float[] temperatureToRGB(int degreesK){ _EL_   int k=MathUtils.constrain(degreesK,1000,20000); _EL_   float a=(k % 100) / 100.0f; _EL_   int i=((k - 1000) / 100) * 3; _EL_   return new float[]{interp(i,a),interp(i + 1,a),interp(i + 2,a)}; _EL_ } _EL_ ', 'public AdvancedStateMap.Builder withName(Function<PropertiesMap,String> mapper){ _EL_   this.nameMapper=mapper; _EL_   return this; _EL_ } _EL_ ', 'protected void linearLayout(VisualTable labels){ _EL_   Rectangle2D b=getLayoutBounds(); _EL_   double breadth=getBreadth(b); _EL_   double span=m_hi - m_lo; _EL_   double pspan=m_prevhi - m_prevlo; _EL_   double vlo=0; _EL_   if (m_lo >= 0) { _EL_     vlo=Math.pow(10,Math.floor(MathLib.log10(m_lo))); _EL_   } _EL_  else { _EL_     vlo=-Math.pow(10,1 + Math.floor(MathLib.log10(-m_lo))); _EL_   } _EL_   Iterator iter=labels.tuples(); _EL_   while (iter.hasNext()) { _EL_     VisualItem item=(VisualItem)iter.next(); _EL_     reset(item); _EL_     double v=item.getDouble(VALUE); _EL_     double x=span == 0 ? 0 : ((v - m_lo) / span) * breadth; _EL_     set(item,x,b); _EL_   } _EL_   Index index=labels.index(VALUE); _EL_   double step=getLinearStep(span,span == 0 ? 0 : breadth / span); _EL_   if (step == 0)   step=1; _EL_   int r; _EL_   for (double x, v=vlo; v <= m_hi; v+=step) { _EL_     x=((v - m_lo) / span) * breadth; _EL_     if (x < -0.5) { _EL_       continue; _EL_     } _EL_  else     if ((r=index.get(v)) >= 0) { _EL_       VisualItem item=labels.getItem(r); _EL_       item.setVisible(true); _EL_       item.setEndVisible(true); _EL_     } _EL_  else { _EL_       VisualItem item=labels.addItem(); _EL_       item.set(LABEL,m_nf.format(v)); _EL_       item.setDouble(VALUE,v); _EL_       double f=pspan == 0 ? 0 : ((v - m_prevlo) / pspan); _EL_       if (f <= 0 || f >= 1.0)       item.setStartVisible(true); _EL_       set(item,f * breadth,b); _EL_       set(item,x,b); _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public synchronized boolean addAll(Collection<? extends E> collection){ _EL_   return addAll(elementCount,collection); _EL_ } _EL_ ', 'public boolean handleExceptionFromServer(Writer writer,Reader reader,Throwable ex){ _EL_   if (ex instanceof ClosedChannelException) { _EL_     if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,"Connection with client closed from [" + writer.getEndPointAddress() + "] endpoint."); _EL_     return true; _EL_   } _EL_   if (ex instanceof MarshalContextClearedException) { _EL_     if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,"Marshal context have been cleared, probably because the exported service class loader has been unloaded, service incoming invocation from [" + writer.getEndPointAddress() + "] endpoint."); _EL_     return true; _EL_   } _EL_   try { _EL_     String msg="LRMI Transport Protocol caught server exception caused by [" + writer.getEndPointAddress() + "] client."; _EL_     if (ex instanceof LRMIUnhandledException) { _EL_       if (_logger.isLoggable(Level.FINE))       _logger.log(Level.FINE,msg,ex); _EL_       LRMIUnhandledException lrmiue=(LRMIUnhandledException)ex; _EL_       if (lrmiue.getStage() == Stage.DESERIALIZATION) { _EL_         reader.resetContext(); _EL_       } _EL_       if (writer.isOpen())       writer.writeReply(new ReplyPacket(null,lrmiue)); _EL_       return false; _EL_     } _EL_  else     if (ex instanceof RuntimeException || ex instanceof InvalidClassException) { _EL_       if (_logger.isLoggable(Level.SEVERE))       _logger.log(Level.SEVERE,msg,ex); _EL_     } _EL_  else     if (ex instanceof UnmarshalException) { _EL_       if (_logger.isLoggable(Level.WARNING))       _logger.log(Level.WARNING,msg,ex); _EL_     } _EL_  else { _EL_       if (_logger.isLoggable(Level.FINE))       _logger.log(Level.FINE,msg,ex); _EL_     } _EL_     if (writer.isOpen())     writer.writeReply(new ReplyPacket(null,new ProtocolException(msg,ex))); _EL_     return true; _EL_   } _EL_  catch (  Exception ex2) { _EL_     if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,"Failed to send handledServerException to endpoint [" + writer.getEndPointAddress() + "] , the client disconnected from the server.",ex); _EL_     return true; _EL_   } _EL_ } _EL_ ', 'default String resourceName(String tableName,String type){ _EL_   return String.format(RESOURCE_NAME,tableName,type); _EL_ } _EL_ ', 'protected void updateComboBoxesLoadChange(){ _EL_   if (autoTrackCheckBox.isSelected()) { _EL_     updateLocationTrackComboBox(); _EL_   } _EL_   if (autoDestinationTrackCheckBox.isSelected()) { _EL_     updateDestinationTrackComboBox(); _EL_   } _EL_   if (autoFinalDestTrackCheckBox.isSelected()) { _EL_     updateFinalDestination(); _EL_   } _EL_ } _EL_ ', 'public String removeClassColumnTipText(){ _EL_   return "Remove the class column (if set) from the data."; _EL_ } _EL_ ', 'public static String join(NamedValue[] values,String separator){ _EL_   StringBuilder buff=new StringBuilder(); _EL_   for (int i=0; i < values.length; i++) { _EL_     buff.append(values[i]); _EL_     if (i < values.length - 1)     buff.append(separator); _EL_   } _EL_   return buff.toString(); _EL_ } _EL_ ', 'protected String sourceClass(Attribute c,double[] dist){ _EL_   if (c.isNominal()) { _EL_     return Integer.toString(Utils.maxIndex(dist)); _EL_   } _EL_  else { _EL_     return Double.toString(dist[0]); _EL_   } _EL_ } _EL_ ', 'int requestGroupData(char groupNum){ _EL_   setCurrDataGroup(groupNum); _EL_   currGrpItems=knownGrpItems.get(Integer.valueOf(getCurrDataGroup())); _EL_   char[] payLoad={groupNum}; _EL_   return (writeTelegram(payLoad,CMD_GROUP_READ,null)); _EL_ } _EL_ ', 'public void resume(){ _EL_   mPaused=false; _EL_   mLastFrameTime=System.currentTimeMillis(); _EL_   invalidate(); _EL_ } _EL_ ', 'protected void drawCenterText(Canvas c){ _EL_   CharSequence centerText=mChart.getCenterText(); _EL_   if (mChart.isDrawCenterTextEnabled() && centerText != null) { _EL_     PointF center=mChart.getCenterCircleBox(); _EL_     float innerRadius=mChart.isDrawHoleEnabled() && !mChart.isDrawSlicesUnderHoleEnabled() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius(); _EL_     RectF holeRect=mRectBuffer[0]; _EL_     holeRect.left=center.x - innerRadius; _EL_     holeRect.top=center.y - innerRadius; _EL_     holeRect.right=center.x + innerRadius; _EL_     holeRect.bottom=center.y + innerRadius; _EL_     RectF boundingRect=mRectBuffer[1]; _EL_     boundingRect.set(holeRect); _EL_     float radiusPercent=mChart.getCenterTextRadiusPercent() / 100f; _EL_     if (radiusPercent > 0.0) { _EL_       boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f); _EL_     } _EL_     if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) { _EL_       mCenterTextLastBounds.set(boundingRect); _EL_       mCenterTextLastValue=centerText; _EL_       float width=mCenterTextLastBounds.width(); _EL_       mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false); _EL_     } _EL_     float layoutHeight=mCenterTextLayout.getHeight(); _EL_     c.save(); _EL_     if (Build.VERSION.SDK_INT >= 18) { _EL_       Path path=new Path(); _EL_       path.addOval(holeRect,Path.Direction.CW); _EL_       c.clipPath(path); _EL_     } _EL_     c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f); _EL_     mCenterTextLayout.draw(c); _EL_     c.restore(); _EL_   } _EL_ } _EL_ ', 'public AllToAllPanel(AllToAll connector,NetworkPanel networkPanel){ _EL_   super(); _EL_   this.connection=connector; _EL_   allowSelfConnectPanel=new JPanel(new FlowLayout(FlowLayout.LEFT)); _EL_   allowSelfConnectPanel.add(new JLabel(" Allow Self Connections: ")); _EL_   allowSelfConnectPanel.add(allowSelfConnectChkBx); _EL_   fillFieldValues(); _EL_   add(allowSelfConnectPanel); _EL_ } _EL_ ', 'private void allocate_sections(int p_section_count){ _EL_   section_list.ensureCapacity(p_section_count); _EL_   while (section_list.size() < p_section_count) { _EL_     section_list.add(new MazeSearchElement()); _EL_   } _EL_ } _EL_ ', 'public boolean refreshNeeded(){ _EL_   return this.softTtl < System.currentTimeMillis(); _EL_ } _EL_ ', 'public static byte[] randomBytes(int length){ _EL_   byte[] bytes=new byte[length]; _EL_   SEEDED_RANDOM.nextBytes(bytes); _EL_   return bytes; _EL_ } _EL_ ', 'public WeightDistribution(ColumnExampleTable columnTable,int[] selection,int attributeNumber){ _EL_   calculateLabelWeights(columnTable,selection,attributeNumber); _EL_   leftLabelWeights=new double[totalLabelWeights.length]; _EL_   leftWeight=0; _EL_   totalWeight=getTotalWeight(totalLabelWeights); _EL_   if (hasMissings) { _EL_     missingsWeight=getTotalWeight(missingsLabelWeights); _EL_     rightWeight=totalWeight - missingsWeight; _EL_     rightLabelWeights=arrayDifference(totalLabelWeights,missingsLabelWeights); _EL_   } _EL_  else { _EL_     missingsWeight=0; _EL_     rightWeight=totalWeight; _EL_     rightLabelWeights=new double[totalLabelWeights.length]; _EL_     System.arraycopy(totalLabelWeights,0,rightLabelWeights,0,totalLabelWeights.length); _EL_   } _EL_ } _EL_ ', "public static String removeExtension(String fileName){ _EL_   int index=fileName.lastIndexOf('.'); _EL_   if (index == -1) { _EL_     return fileName; _EL_   } _EL_  else { _EL_     return fileName.substring(0,index); _EL_   } _EL_ } _EL_ ", 'public static DataFrame normalize(DataFrame dataFrame,double min,double max){ _EL_   return normalize(dataFrame,min,max,Collections.<String>emptyList()); _EL_ } _EL_ ', 'boolean isSocketScheme(String scheme){ _EL_   for (  String p : URIHelper.SOCKET_SCHEMES) { _EL_     if (p.equals(scheme)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', "public static String dbNameToVarName(String columnName){ _EL_   if (columnName == null)   return null; _EL_   StringBuilder fieldName=new StringBuilder(columnName.length()); _EL_   boolean toUpper=false; _EL_   for (int i=0; i < columnName.length(); i++) { _EL_     char ch=columnName.charAt(i); _EL_     if (ch == '_') { _EL_       toUpper=true; _EL_     } _EL_  else     if (toUpper) { _EL_       fieldName.append(Character.toUpperCase(ch)); _EL_       toUpper=false; _EL_     } _EL_  else { _EL_       fieldName.append(Character.toLowerCase(ch)); _EL_     } _EL_   } _EL_   return fieldName.toString(); _EL_ } _EL_ ", "static public String hexEncode(byte[] aInput){ _EL_   StringBuffer result=new StringBuffer(); _EL_   final char[] digits={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'}; _EL_   for (int idx=0; idx < aInput.length; ++idx) { _EL_     byte b=aInput[idx]; _EL_     result.append(digits[(b & 0xf0) >> 4]); _EL_     result.append(digits[b & 0x0f]); _EL_   } _EL_   return result.toString(); _EL_ } _EL_ ", 'private static Size clampSize(Size original,double maxArea,Size maxSize){ _EL_   if (original.getWidth() * original.getHeight() < maxArea && original.getWidth() < maxSize.getWidth() && original.getHeight() < maxSize.getHeight()) { _EL_     return original; _EL_   } _EL_   double ratio=Math.min(Math.sqrt(maxArea / original.area()),1.0f); _EL_   int width=(int)Math.round(original.width() * ratio); _EL_   int height=(int)Math.round(original.height() * ratio); _EL_   if (width > maxSize.width() || height > maxSize.height()) { _EL_     return computeFitWithinSize(original,maxSize); _EL_   } _EL_   return new Size(width,height); _EL_ } _EL_ ', 'public static byte[] encode(byte[] data){ _EL_   ByteArrayOutputStream bOut=new ByteArrayOutputStream(); _EL_   try { _EL_     encoder.encode(data,0,data.length,bOut); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new RuntimeException("exception encoding base64 string: " + e); _EL_   } _EL_   return bOut.toByteArray(); _EL_ } _EL_ ', 'public void addObserver(final FileAlterationObserver observer){ _EL_   if (observer != null) { _EL_     observers.add(observer); _EL_   } _EL_ } _EL_ ', 'public MAVLinkMessage(MAVLinkSchema schema,ByteBuffer buffer) throws MAVLinkProtocolException, MAVLinkUnknownMessage, BufferUnderflowException { _EL_   if (buffer.remaining() < NON_PAYLOAD_LENGTH) { _EL_     throw new BufferUnderflowException(); _EL_   } _EL_   int startPos=buffer.position(); _EL_   byte startSign=buffer.get(); _EL_   if (startSign != START_OF_FRAME) { _EL_     throw new MAVLinkProtocolException(String.format("Invalid start sign: %02x, should be %02x",startSign,START_OF_FRAME)); _EL_   } _EL_   int payloadLen=buffer.get() & 0xff; _EL_   if (buffer.remaining() < payloadLen + NON_PAYLOAD_LENGTH - 2) { _EL_     buffer.position(startPos); _EL_     throw new BufferUnderflowException(); _EL_   } _EL_   sequence=buffer.get(); _EL_   systemID=buffer.get() & 0xff; _EL_   componentID=buffer.get() & 0xff; _EL_   msgID=buffer.get() & 0xff; _EL_   this.schema=schema; _EL_   this.definition=schema.getMessageDefinition(msgID); _EL_   if (definition == null) { _EL_     buffer.position(buffer.position() + payloadLen + CRC_LENGTH); _EL_     throw new MAVLinkUnknownMessage(String.format("Unknown message: %s",msgID)); _EL_   } _EL_   if (payloadLen != definition.payloadLength) { _EL_     buffer.position(buffer.position() + payloadLen + CRC_LENGTH); _EL_     throw new MAVLinkUnknownMessage(String.format("Invalid payload len for msg %s (%s): %s, should be %s",definition.name,msgID,payloadLen,definition.payloadLength)); _EL_   } _EL_   this.payload=new byte[definition.payloadLength]; _EL_   buffer.get(payload); _EL_   crc=Short.reverseBytes(buffer.getShort()) & 0xffff; _EL_   int endPos=buffer.position(); _EL_   buffer.position(startPos); _EL_   int crcCalc=calculateCRC(buffer); _EL_   buffer.position(endPos); _EL_   if (crc != crcCalc) { _EL_     throw new MAVLinkUnknownMessage(String.format("CRC error for msg %s (%s): %02x, should be %02x",definition.name,msgID,crc,crcCalc)); _EL_   } _EL_   this.payloadBB=ByteBuffer.wrap(payload); _EL_   payloadBB.order(schema.getByteOrder()); _EL_ } _EL_ ', 'protected ScriptBuilder bigNum(long num){ _EL_   return bigNum(chunks.size(),num); _EL_ } _EL_ ', 'public final void change_entries(BrdTracep p_obj,Polyline p_new_polyline,int p_keep_at_start_count,int p_keep_at_end_count){ _EL_   int compensated_half_width=p_obj.get_half_width() + get_clearance_compensation(p_obj.clearance_idx(),p_obj.get_layer()); _EL_   ArrayList<ShapeTile> changed_shapes=offset_shapes(p_new_polyline,compensated_half_width,p_keep_at_start_count,p_new_polyline.plaline_len(-1) - p_keep_at_end_count); _EL_   int old_shape_count=p_obj.tree_shape_count(this); _EL_   int new_shape_count=changed_shapes.size() + p_keep_at_start_count + p_keep_at_end_count; _EL_   AwtreeNodeLeaf[] new_leaf_arr=new AwtreeNodeLeaf[new_shape_count]; _EL_   ShapeTile[] new_precalculated_tree_shapes=new ShapeTile[new_shape_count]; _EL_   AwtreeNodeLeaf[] old_entries=p_obj.get_search_tree_entries(this); _EL_   for (int index=0; index < p_keep_at_start_count; ++index) { _EL_     new_leaf_arr[index]=old_entries[index]; _EL_     new_precalculated_tree_shapes[index]=p_obj.get_tree_shape(this,index); _EL_   } _EL_   for (int index=p_keep_at_start_count; index < old_shape_count - p_keep_at_end_count; ++index) { _EL_     remove_leaf(old_entries[index]); _EL_   } _EL_   for (int i=0; i < p_keep_at_end_count; ++i) { _EL_     int new_index=new_shape_count - p_keep_at_end_count + i; _EL_     int old_index=old_shape_count - p_keep_at_end_count + i; _EL_     new_leaf_arr[new_index]=old_entries[old_index]; _EL_     new_leaf_arr[new_index].shape_index_in_object=new_index; _EL_     new_precalculated_tree_shapes[new_index]=p_obj.get_tree_shape(this,old_index); _EL_   } _EL_   for (int index=p_keep_at_start_count; index < new_shape_count - p_keep_at_end_count; ++index) { _EL_     new_precalculated_tree_shapes[index]=changed_shapes.get(index - p_keep_at_start_count); _EL_   } _EL_   p_obj.set_precalculated_tree_shapes(new_precalculated_tree_shapes,this); _EL_   for (int index=p_keep_at_start_count; index < new_shape_count - p_keep_at_end_count; ++index) { _EL_     new_leaf_arr[index]=insert(p_obj,index); _EL_   } _EL_   p_obj.set_search_tree_entries(this,new_leaf_arr); _EL_ } _EL_ ', 'static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError { _EL_   try { _EL_     Class providerClass=findProviderClass(className,cl,doFallback); _EL_     Object instance=providerClass.newInstance(); _EL_     if (DEBUG)     debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl); _EL_     return instance; _EL_   } _EL_  catch (  ClassNotFoundException x) { _EL_     throw new ConfigurationError("Provider " + className + " not found",x); _EL_   } _EL_ catch (  Exception x) { _EL_     throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x); _EL_   } _EL_ } _EL_ ', 'public void paintComponentBackground(Graphics g){ _EL_   super.paintComponentBackground(g); _EL_   int clipX=g.getClipX(); _EL_   int clipY=g.getClipY(); _EL_   int clipW=g.getClipWidth(); _EL_   int clipH=g.getClipHeight(); _EL_   int width=getWidth(); _EL_   int height=getHeight(); _EL_   int y=getY(); _EL_   if (infinite) { _EL_     int blockSize=getWidth() / 5; _EL_     int x=getX() + (int)((((float)value) / ((float)maxValue - minValue)) * (getWidth() - blockSize)); _EL_     g.clipRect(x,y,blockSize,height - 1); _EL_   } _EL_  else { _EL_     if (vertical) { _EL_       int actualHeight=(int)((((float)value) / ((float)maxValue - minValue)) * getHeight()); _EL_       y+=height - actualHeight; _EL_     } _EL_  else { _EL_       width=(int)((((float)value) / ((float)maxValue - minValue)) * getWidth()); _EL_     } _EL_     g.clipRect(getX(),y,width,height); _EL_   } _EL_   paintingFull=true; _EL_   super.paintComponentBackground(g); _EL_   paintingFull=false; _EL_   g.setClip(clipX,clipY,clipW,clipH); _EL_   if (thumbImage != null && !infinite) { _EL_     if (!vertical) { _EL_       int xPos=getX() + width - thumbImage.getWidth() / 2; _EL_       xPos=Math.max(getX(),xPos); _EL_       xPos=Math.min(getX() + getWidth() - thumbImage.getWidth(),xPos); _EL_       g.drawImage(thumbImage,xPos,y + height / 2 - thumbImage.getHeight() / 2); _EL_     } _EL_  else { _EL_       int yPos=y; _EL_       g.drawImage(thumbImage,getX() + width / 2 - thumbImage.getWidth() / 2,yPos); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void addAction(EntityAction ea){ _EL_   actions.addElement(ea); _EL_   processGameEvent(new GameNewActionEvent(this,ea)); _EL_ } _EL_ ', 'public static JSONObject readJSONObject(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException { _EL_   if (required) { _EL_     return jsonArray.getJSONObject(index); _EL_   } _EL_   if (notNull && jsonArray.isNull(index)) { _EL_     throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index)); _EL_   } _EL_   JSONObject value=null; _EL_   if (!jsonArray.isNull(index)) { _EL_     value=jsonArray.getJSONObject(index); _EL_   } _EL_   return value; _EL_ } _EL_ ', 'public static void waitElementToNotBePresent(SearchContext parent,By by,int waitInSeconds){ _EL_   Preconditions.checkNotNull(parent); _EL_   Preconditions.checkNotNull(by); _EL_   try { _EL_     WebElementWait wait=new WebElementWait(parent,waitInSeconds); _EL_     wait.until(null); _EL_   } _EL_  catch (  TimeoutException e) { _EL_     throw new TimeoutException(String.format("Element %s is still present after %s seconds",by,waitInSeconds),e); _EL_   } _EL_ } _EL_ ', 'public boolean isVimeoURLValid(){ _EL_   String videoID=getExtractedIdentifier(); _EL_   return videoID.length() > 0 && TextUtils.isDigitsOnly(videoID); _EL_ } _EL_ ', 'public final void pushSubContextList(SubContextList iter){ _EL_   m_axesIteratorStack.push(iter); _EL_ } _EL_ ', 'private void updateDownloadedFiles(SQLiteDatabase db,String newAccountName,String oldAccountName){ _EL_   String whereClause=ProviderTableMeta.FILE_ACCOUNT_OWNER + "=? AND " + ProviderTableMeta.FILE_STORAGE_PATH+ " IS NOT NULL"; _EL_   Cursor c=db.query(ProviderTableMeta.FILE_TABLE_NAME,null,whereClause,new String[]{newAccountName},null,null,null); _EL_   try { _EL_     if (c.moveToFirst()) { _EL_       String oldAccountPath=FileStorageUtils.getSavePath(oldAccountName); _EL_       String newAccountPath=FileStorageUtils.getSavePath(newAccountName); _EL_       File oldAccountFolder=new File(oldAccountPath); _EL_       File newAccountFolder=new File(newAccountPath); _EL_       oldAccountFolder.renameTo(newAccountFolder); _EL_       do { _EL_         String oldPath=c.getString(c.getColumnIndex(ProviderTableMeta.FILE_STORAGE_PATH)); _EL_         OCFile file=new OCFile(c.getString(c.getColumnIndex(ProviderTableMeta.FILE_PATH))); _EL_         String newPath=FileStorageUtils.getDefaultSavePathFor(newAccountName,file); _EL_         ContentValues cv=new ContentValues(); _EL_         cv.put(ProviderTableMeta.FILE_STORAGE_PATH,newPath); _EL_         db.update(ProviderTableMeta.FILE_TABLE_NAME,cv,ProviderTableMeta.FILE_STORAGE_PATH + "=?",new String[]{oldPath}); _EL_         Log_OC.v("SQL","Updated path of downloaded file: old file name == " + oldPath + ", new file name == "+ newPath); _EL_       } _EL_  while (c.moveToNext()); _EL_     } _EL_   } _EL_   finally { _EL_     c.close(); _EL_   } _EL_ } _EL_ ', 'private JsonNode parseLanguageResource(Resource resource) throws IOException { _EL_   InputStream stream=resource.asStream(); _EL_   if (stream == null)   return null; _EL_   try { _EL_     JsonNode tree=mapper.readTree(stream); _EL_     return tree; _EL_   } _EL_   finally { _EL_     stream.close(); _EL_   } _EL_ } _EL_ ', 'public Collection<Tuple2<TransitionState,Double>> startStates(){ _EL_   List<Tuple2<TransitionState,Double>> result=new ArrayList<Tuple2<TransitionState,Double>>(); _EL_ { _EL_     double score=Math.log(LINE_MRGN_PROB); _EL_     addNoSubGlyphStartState(result,new int[0],TransitionStateType.LMRGN,-1,score); _EL_   } _EL_   for (int destLanguage=0; destLanguage < numLanguages; ++destLanguage) { _EL_     SingleLanguageModel destLM=lm.get(destLanguage); _EL_     double destLanguagePrior=lm.languagePrior(destLanguage); _EL_     for (    int c : destLM.getActiveCharacters()) { _EL_       if (c != spaceCharIndex) { _EL_         double score=Math.log(1.0 - LINE_MRGN_PROB) + Math.log(getNgramProb(destLM,new int[0],c)) + Math.log(destLanguagePrior); _EL_         addGlyphStartStates(result,c,new int[]{c},TransitionStateType.TMPL,destLanguage,score); _EL_       } _EL_     } _EL_   } _EL_ { _EL_     double totalSpaceProb=0.0; _EL_     for (int language=0; language < numLanguages; ++language)     totalSpaceProb+=getNgramProb(lm.get(language),new int[0],spaceCharIndex) * lm.languagePrior(language); _EL_     double score=Math.log(1.0 - LINE_MRGN_PROB) + Math.log(totalSpaceProb); _EL_     addNoSubGlyphStartState(result,new int[]{spaceCharIndex},TransitionStateType.TMPL,-1,score); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private static Object cloneSerializableObject(Object o) throws IOException, ClassNotFoundException { _EL_   ByteArrayOutputStream b=new ByteArrayOutputStream(); _EL_   ObjectOutputStream out=new ObjectOutputStream(b); _EL_   out.writeObject(o); _EL_   out.flush(); _EL_   out.close(); _EL_   ByteArrayInputStream bi=new ByteArrayInputStream(b.toByteArray()); _EL_   ObjectInputStream in=new ObjectInputStream(bi); _EL_   return in.readObject(); _EL_ } _EL_ ', 'public boolean hasThree(){ _EL_   return points.size() > 2; _EL_ } _EL_ ', 'public ZipEntry(String name){ _EL_   Objects.requireNonNull(name,"name"); _EL_   if (name.length() > 0xFFFF) { _EL_     throw new IllegalArgumentException("entry name too long"); _EL_   } _EL_   this.name=name; _EL_ } _EL_ ', 'private T matchTokens(String targetToken,String requestToken){ _EL_   int wildcardIndex=0; _EL_   if (targetToken == null && requestToken == null) { _EL_     return exactMatch; _EL_   } _EL_   if (targetToken == null || requestToken == null) { _EL_     return noMatch; _EL_   } _EL_   int beginTargetIndex=0; _EL_   int beginRequestIndex=0; _EL_   String substr=null; _EL_   int targetTokenLength=targetToken.length(); _EL_   int requestTokenLength=requestToken.length(); _EL_   if (targetToken.indexOf(oneLevelWildcard,beginTargetIndex) != -1) { _EL_     while ((wildcardIndex=targetToken.indexOf(oneLevelWildcard,beginTargetIndex)) != -1) { _EL_       if (wildcardIndex > beginTargetIndex) { _EL_         substr=targetToken.substring(beginTargetIndex,wildcardIndex); _EL_         if ((beginRequestIndex=requestToken.indexOf(substr,beginRequestIndex)) == -1) { _EL_           return noMatch; _EL_         } _EL_         beginTargetIndex=beginTargetIndex + substr.length() + oneLevelWildcardLength; _EL_         beginRequestIndex=beginRequestIndex + substr.length(); _EL_       } _EL_  else { _EL_         if (wildcardIndex == beginTargetIndex) { _EL_           if (targetTokenLength == oneLevelWildcardLength) { _EL_             return wildcardMatch; _EL_           } _EL_  else { _EL_             beginTargetIndex=beginTargetIndex + oneLevelWildcardLength; _EL_             continue; _EL_           } _EL_         } _EL_       } _EL_     } _EL_     if (beginTargetIndex >= targetTokenLength) { _EL_       return wildcardMatch; _EL_     } _EL_     String targetStr=targetToken.substring(beginTargetIndex,targetTokenLength); _EL_     String remRequest=requestToken.substring(beginRequestIndex,requestTokenLength); _EL_     int remRequestIndex=-1; _EL_     if ((remRequestIndex=remRequest.lastIndexOf(targetStr,remRequest.length() - 1)) == -1) { _EL_       return noMatch; _EL_     } _EL_  else { _EL_       beginRequestIndex=beginRequestIndex + remRequestIndex; _EL_       if (beginRequestIndex + targetStr.length() >= requestTokenLength) { _EL_         return wildcardMatch; _EL_       } _EL_  else { _EL_         return noMatch; _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     if (targetToken.equals(requestToken)) { _EL_       return exactMatch; _EL_     } _EL_   } _EL_   return noMatch; _EL_ } _EL_ ', 'public void addVertex(ValueGraphVertex v){ _EL_   if (vertices.add(v)) { _EL_     if (v.representsParameter()) { _EL_       nParameter++; _EL_     } _EL_     if (representativeV == null) { _EL_       representativeV=v; _EL_     } _EL_   } _EL_ } _EL_ ', 'private void createViewToModel(int rowCount){ _EL_   int recreateFrom=0; _EL_   if (viewToModel != null) { _EL_     recreateFrom=Math.min(rowCount,viewToModel.length); _EL_     if (viewToModel.length != rowCount) { _EL_       Row[] oldViewToModel=viewToModel; _EL_       viewToModel=new Row[rowCount]; _EL_       System.arraycopy(oldViewToModel,0,viewToModel,0,recreateFrom); _EL_     } _EL_   } _EL_  else { _EL_     viewToModel=new Row[rowCount]; _EL_   } _EL_   int i; _EL_   for (i=0; i < recreateFrom; i++) { _EL_     viewToModel[i].modelIndex=i; _EL_   } _EL_   for (i=recreateFrom; i < rowCount; i++) { _EL_     viewToModel[i]=new Row(this,i); _EL_   } _EL_ } _EL_ ', 'public Set<String> files(){ _EL_   if (setFiles == null) { _EL_     throw new IllegalStateException("files were not computed yet"); _EL_   } _EL_   return Collections.unmodifiableSet(setFiles); _EL_ } _EL_ ', 'public static boolean isMac(){ _EL_   String osName=System.getProperty("os.name"); _EL_   osName=osName.toLowerCase(); _EL_   return osName.indexOf("mac") != -1; _EL_ } _EL_ ', 'private boolean isAssignableFrom(Throwable concreteThrowable,Set<Class<? extends Throwable>> throwableClasses){ _EL_   for (  Class<? extends Throwable> t : throwableClasses) { _EL_     if (t.isAssignableFrom(concreteThrowable.getClass())) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'protected void print(int v) throws IOException { _EL_   print(String.valueOf(v)); _EL_ } _EL_ ', 'public Object2DoubleOpenHashMap<IntRBTreeSet> confidenceMap(){ _EL_   List<ItemSet> itemSets=learn(); _EL_   Object2DoubleOpenHashMap<IntRBTreeSet> confidenceMap=new Object2DoubleOpenHashMap<>(itemSets.size()); _EL_   for (  ItemSet itemSet : itemSets) { _EL_     IntRBTreeSet itemSetCopy=new IntRBTreeSet(itemSet.items); _EL_     confidenceMap.put(itemSetCopy,itemSet.support / (double)setCount); _EL_   } _EL_   return confidenceMap; _EL_ } _EL_ ', 'private void extract(int minsupp,int minlength,int maxlength,int item,int[] postfix,int plen,int[] buf2,int[] buf3,boolean destruct,Collector col){ _EL_   if (header[item] == null) { _EL_     return; _EL_   } _EL_   if (header[item].sibling == null) { _EL_     if (header[item].count < minsupp) { _EL_       return; _EL_     } _EL_     extractLinear(header[item].count,minsupp,minlength,maxlength,item,postfix,plen,buf2,col); _EL_     if (destruct) { _EL_       Arrays.fill(header,null); _EL_     } _EL_     return; _EL_   } _EL_   int support=0; _EL_   for (FPNode cur=header[item]; cur != null; cur=cur.sibling) { _EL_     support+=cur.count; _EL_   } _EL_   if (support < minsupp) { _EL_     return; _EL_   } _EL_   Arrays.fill(buf3,0); _EL_   for (FPNode cur=header[item]; cur != null; cur=cur.sibling) { _EL_     for (FPNode parent=cur.parent; parent.key >= 0; parent=parent.parent) { _EL_       buf3[parent.key]+=cur.count; _EL_     } _EL_   } _EL_   final int mminlength=minlength - (plen + 1); _EL_   if (mminlength > 0) { _EL_     int fparents=0; _EL_     for (int i=0; i < item; i++) { _EL_       if (buf3[i] >= minsupp) { _EL_         fparents+=1; _EL_       } _EL_     } _EL_     if (fparents < mminlength) { _EL_       return; _EL_     } _EL_   } _EL_   final int last=item - 1; _EL_   FPTree proj=new FPTree(item); _EL_   for (FPNode cur=header[item]; cur != null; cur=cur.sibling) { _EL_     int j=buf2.length; _EL_     for (FPNode parent=cur.parent; parent.key >= 0; parent=parent.parent) { _EL_       if (buf3[parent.key] >= minsupp) { _EL_         buf2[--j]=parent.key; _EL_       } _EL_     } _EL_     if (buf2.length - j >= mminlength) { _EL_       proj.insert(proj,buf2,j,buf2.length,cur.count); _EL_     } _EL_   } _EL_   proj.reduceMemory(); _EL_   postfix[plen++]=item; _EL_   if (plen >= minlength && plen <= maxlength) { _EL_     col.collect(support,postfix,0,plen); _EL_   } _EL_   for (int j=last; j >= 0; j--) { _EL_     proj.extract(minsupp,minlength,maxlength,j,postfix,plen,buf2,buf3,destruct,col); _EL_   } _EL_   if (destruct) { _EL_     header[item]=null; _EL_   } _EL_ } _EL_ ', 'protected static int toDigit(char ch,int index) throws DSSException { _EL_   int digit=Character.digit(ch,16); _EL_   if (digit == -1) { _EL_     throw new DSSException("Illegal hexadecimal character " + ch + " at index "+ index); _EL_   } _EL_   return digit; _EL_ } _EL_ ', 'public final boolean split_traces_keep_point(){ _EL_   if (keep_point == null)   return false; _EL_   ItemSelectionFilter filter=new ItemSelectionFilter(ItemSelectionChoice.TRACES); _EL_   Collection<BrdItem> picked_items=r_board.pick_items(keep_point.keep_point,keep_point.on_layer,filter); _EL_   for (  BrdItem curr_item : picked_items) { _EL_     BrdTracep a_trace=(BrdTracep)curr_item; _EL_     int line_idx=a_trace.polyline_find_line_idx(keep_point.keep_point); _EL_     if (line_idx < 1)     continue; _EL_     ArrayList<BrdTracep> clean_list=a_trace.split_with_end_point(line_idx,keep_point.keep_point); _EL_     return clean_list.size() > 0; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static byte[] flipAllBitsInPlace(byte[] bytes,int index,int length){ _EL_   int endIndex=Math.min(bytes.length,index + length); _EL_   for (int i=index; i < endIndex; i++) { _EL_     bytes[i]=(byte)(bytes[i] ^ 0xff); _EL_   } _EL_   return bytes; _EL_ } _EL_ ', 'public CreateIndexRequest source(String source){ _EL_   return source(source.getBytes(Charsets.UTF_8)); _EL_ } _EL_ ', 'private void addUsers(User[] users,LocalConfiguration configuration){ _EL_   for (  User user : users) { _EL_     configuration.addUser(user.createUser()); _EL_   } _EL_ } _EL_ ', 'void tryToDrainBuffers(){ _EL_   if (evictionLock.tryLock()) { _EL_     try { _EL_       drainStatus.lazySet(PROCESSING); _EL_       drainBuffers(); _EL_     } _EL_   finally { _EL_       drainStatus.compareAndSet(PROCESSING,IDLE); _EL_       evictionLock.unlock(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static boolean copyFile(File source,File dest){ _EL_   File parentDest=dest.getParentFile(); _EL_   if (!parentDest.exists()) { _EL_     if (!createDirectory(parentDest.getAbsolutePath())) { _EL_       return false; _EL_     } _EL_   } _EL_   try { _EL_     Files.copy(source.toPath(),dest.toPath()); _EL_     return true; _EL_   } _EL_  catch (  IOException e) { _EL_     e.printStackTrace(); _EL_     return false; _EL_   } _EL_ } _EL_ ', '@Override public void generateRss(XmlWriter w,ExtensionProfile extProfile) throws IOException { _EL_   ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(3); _EL_   if (mimeType != null) { _EL_     attrs.add(new XmlWriter.Attribute("type",mimeType.getMediaType())); _EL_   } _EL_   if (uri != null) { _EL_     attrs.add(new XmlWriter.Attribute("url",uri)); _EL_   } _EL_   if (length != -1) { _EL_     attrs.add(new XmlWriter.Attribute("length",Long.toString(length))); _EL_   } _EL_   w.simpleElement(Namespaces.rssNs,"enclosure",attrs,null); _EL_ } _EL_ ', 'public static boolean deleteDirectory(final File path){ _EL_   if (path.exists()) { _EL_     File[] files=path.listFiles(); _EL_     for (    File file : files) { _EL_       if (file.isDirectory()) { _EL_         deleteDirectory(file); _EL_       } _EL_  else { _EL_         file.delete(); _EL_       } _EL_     } _EL_   } _EL_   return path.delete(); _EL_ } _EL_ ', 'public void morph(Component source,Component destination,int duration,Runnable onCompletion){ _EL_   morph(source,destination,duration,false,onCompletion); _EL_ } _EL_ ', 'public static Timestamp stringToTimeStamp(String dateTimeString,String dateTimeFormat,TimeZone tz,Locale locale) throws ParseException { _EL_   DateFormat dateFormat=toDateTimeFormat(dateTimeFormat,tz,locale); _EL_   Date parsedDate=dateFormat.parse(dateTimeString); _EL_   return new Timestamp(parsedDate.getTime()); _EL_ } _EL_ ', 'public void clearValues(){ _EL_   valueMap.clear(); _EL_ } _EL_ ', 'public static byte[] stringToByteArray(String input){ _EL_   char chars[]=input.toCharArray(); _EL_   byte bytes[]=new byte[chars.length]; _EL_   for (int i=0; i < chars.length; i++) { _EL_     bytes[i]=(byte)chars[i]; _EL_   } _EL_   return bytes; _EL_ } _EL_ ', 'public void playFileForUser(String fileName,String userName) throws SoundPlaybackException { _EL_   if (userName == null || userName.isEmpty()) { _EL_     userName=appProperties.getProperty("username_to_join_channel"); _EL_   } _EL_   try { _EL_     Guild guild=getUsersGuild(userName); _EL_     joinUsersCurrentChannel(userName); _EL_     playFile(fileName,guild); _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_   } _EL_ } _EL_ ', '@Deprecated public static void runFinalizersOnExit(boolean run){ _EL_   SecurityManager sm=System.getSecurityManager(); _EL_   if (sm != null) { _EL_     sm.checkExit(0); _EL_   } _EL_ synchronized (hooksList) { _EL_     finalizeOnExit=run; _EL_   } _EL_ } _EL_ ', 'public double[][] predictIntervals(double conf){ _EL_   updateMeanAndVariance(); _EL_   double val=Statistics.normalInverse(1.0 - (1.0 - conf) / 2.0); _EL_   double[][] arr=new double[1][2]; _EL_   arr[0][1]=m_Mean + val * Math.sqrt(m_Variance); _EL_   arr[0][0]=m_Mean - val * Math.sqrt(m_Variance); _EL_   return arr; _EL_ } _EL_ ', 'public static boolean checkSHA(final String shaHash,final File file){ _EL_   if (TextUtils.isEmpty(shaHash) || file == null || !FileUtils.isReadable(file)) { _EL_     Log.e("Given String is NULL or File is NULL or File is not readable"); _EL_     return false; _EL_   } _EL_   final String hash=getSHA(file); _EL_   if (hash == null) { _EL_     Log.e("calculated hash is NULL"); _EL_     return false; _EL_   } _EL_   return hash.equalsIgnoreCase(shaHash); _EL_ } _EL_ ', 'public Assignment update(Border border){ _EL_   Arrays.sort(cs); _EL_   int j=1; _EL_   boolean found=(cs[0].core == border.core); _EL_   for (int i=1; i < cs.length; i++) { _EL_     if (cs[i].core != cs[i - 1].core) { _EL_       cs[j++]=cs[i]; _EL_     } _EL_     found|=(cs[i].core == border.core); _EL_   } _EL_   if (found) { _EL_     if (j == 1) { _EL_       Border r=cs[0]; _EL_       cs=null; _EL_       return r; _EL_     } _EL_     if (j < cs.length) { _EL_       cs=Arrays.copyOf(cs,j); _EL_     } _EL_     return this; _EL_   } _EL_   if (j + 1 != cs.length) { _EL_     cs=Arrays.copyOf(cs,j + 1); _EL_   } _EL_   cs[j]=border; _EL_   return this; _EL_ } _EL_ ', 'public static String fromChar(int value){ _EL_   if (value > 0xffff)   return null; _EL_   String name; _EL_   initialize(); _EL_   name=(String)_byChar.get(new Integer(value)); _EL_   return name; _EL_ } _EL_ ', 'public static List<String> splitLines(final String content){ _EL_   if (content == null || content.length() == 0)   return Collections.emptyList(); _EL_   String[] lines=content.split("[\\\\r]?\\\\n"); _EL_   return Arrays.asList(lines); _EL_ } _EL_ ', '@Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState state,PlotRenderingInfo info){ _EL_   boolean b1=(area.getWidth() <= MINIMUM_WIDTH_TO_DRAW); _EL_   boolean b2=(area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW); _EL_   if (b1 || b2) { _EL_     return; _EL_   } _EL_   if (info != null) { _EL_     info.setPlotArea(area); _EL_   } _EL_   RectangleInsets insets=getInsets(); _EL_   insets.trim(area); _EL_   drawChipGrid(g2,area); _EL_   drawWaferEdge(g2,area); _EL_ } _EL_ ', 'public void addHole(EdgeRing holeER){ _EL_   holeER.setShell(this); _EL_   LinearRing hole=holeER.getRing(); _EL_   if (holes == null)   holes=new ArrayList(); _EL_   holes.add(hole); _EL_ } _EL_ ', 'private static void registerComponents(){ _EL_   registerComponent(BarChartComponent.class,BarChartGui.class); _EL_   registerComponent(DocViewerComponent.class,DocViewerDesktopComponent.class); _EL_   registerComponent(ConsoleComponent.class,ConsoleDesktopComponent.class); _EL_   registerComponent(DisplayComponent.class,DisplayComponentDesktopGui.class); _EL_   registerComponent(DataWorldComponent.class,DataWorldDesktopComponent.class); _EL_   registerComponent(HistogramComponent.class,HistogramGui.class); _EL_   registerComponent(NetworkComponent.class,NetworkDesktopComponent.class); _EL_   registerComponent(OdorWorldComponent.class,OdorWorldDesktopComponent.class); _EL_   registerComponent(PieChartComponent.class,PieChartGui.class); _EL_   registerComponent(ProjectionComponent.class,ProjectionGui.class); _EL_   registerComponent(ReaderComponent.class,ReaderComponentDesktopGui.class); _EL_   registerComponent(ScatterPlotComponent.class,ScatterPlotGui.class); _EL_   registerComponent(TimeSeriesPlotComponent.class,TimeSeriesPlotGui.class); _EL_   registerComponent(RasterPlotComponent.class,RasterPlotGui.class); _EL_   registerComponent(VisionWorldComponent.class,VisionWorldDesktopComponent.class); _EL_   registerComponent(GameComponent.class,GameDesktopComponent.class); _EL_   registerComponent(DeviceInteractionComponent.class,DeviceInteractionDesktopComponent.class); _EL_ } _EL_ ', 'private void initialize(Class<OpsType> opsType,Interface instance) throws InstantiationException, IllegalAccessException { _EL_   mOpsInstance=opsType.newInstance(); _EL_   mRetainedFragmentManager.put(opsType.getSimpleName(),mOpsInstance); _EL_   mOpsInstance.onConfiguration(instance,true); _EL_ } _EL_ ', 'private long skipInputBytes(long n) throws IOException { _EL_   cbLock.lock(); _EL_   try { _EL_     return iis.skipBytes(n); _EL_   } _EL_   finally { _EL_     cbLock.unlock(); _EL_   } _EL_ } _EL_ ', 'public byte[] generate64BitHashId() throws CryptoException { _EL_   try { _EL_     DERBitString publicKeyBitString=encodePublicKeyAsBitString(publicKey); _EL_     byte[] hash=DigestUtil.getMessageDigest(publicKeyBitString.getBytes(),DigestType.SHA1); _EL_     byte[] subHash=Arrays.copyOfRange(hash,12,20); _EL_     subHash[0]&=0x0F; _EL_     subHash[0]|=0x40; _EL_     return subHash; _EL_   } _EL_  catch (  IOException ex) { _EL_     throw new CryptoException(res.getString("NoGenerateKeyIdentifier.exception.message"),ex); _EL_   } _EL_ } _EL_ ', 'public static <C extends ConfigurationClient,S extends Configuration>CreateSubCommandHandler<C,S> create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,OptionalRelationDefinition<C,S> r) throws ArgumentException { _EL_   return new CreateSubCommandHandler<>(parser,p,r,null,p.child(r)); _EL_ } _EL_ ', 'public DSubjectInformationAccess(JDialog parent,byte[] value) throws IOException { _EL_   super(parent); _EL_   setTitle(res.getString("DSubjectInformationAccess.Title")); _EL_   initComponents(); _EL_   prepopulateWithValue(value); _EL_ } _EL_ ', 'private Figure readLineElement(IXMLElement elem) throws IOException { _EL_   HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>(); _EL_   readCoreAttributes(elem,a); _EL_   readTransformAttribute(elem,a); _EL_   readOpacityAttribute(elem,a); _EL_   readLineAttributes(elem,a); _EL_   if (FILL_COLOR.get(a) != null && STROKE_COLOR.get(a) == null) { _EL_     STROKE_COLOR.put(a,FILL_COLOR.get(a)); _EL_   } _EL_   if (FILL_GRADIENT.get(a) != null && STROKE_GRADIENT.get(a) == null) { _EL_     STROKE_GRADIENT.put(a,FILL_GRADIENT.get(a)); _EL_   } _EL_   FILL_COLOR.put(a,null); _EL_   FILL_GRADIENT.put(a,null); _EL_   double x1=toNumber(elem,readAttribute(elem,"x1","0")); _EL_   double y1=toNumber(elem,readAttribute(elem,"y1","0")); _EL_   double x2=toNumber(elem,readAttribute(elem,"x2","0")); _EL_   double y2=toNumber(elem,readAttribute(elem,"y2","0")); _EL_   Figure figure=factory.createLine(x1,y1,x2,y2,a); _EL_   elementObjects.put(elem,figure); _EL_   return figure; _EL_ } _EL_ ', 'public ListModel(final Object[] items){ _EL_   for (int i=0; i < items.length; ++i)   m_items.add(items[i]); _EL_ } _EL_ ', 'public boolean isSetCallType(){ _EL_   return __isset_bit_vector.get(__CALLTYPE_ISSET_ID); _EL_ } _EL_ ', 'private IBuffer mapSource(SourceMapper mapper,IBinaryType info,IClassFile bufferOwner){ _EL_   char[] contents=mapper.findSource(getType(),info); _EL_   if (contents != null) { _EL_     IBuffer buffer=BufferManager.createBuffer(bufferOwner); _EL_     if (buffer == null)     return null; _EL_     BufferManager bufManager=getBufferManager(); _EL_     bufManager.addBuffer(buffer); _EL_     if (buffer.getCharacters() == null) { _EL_       buffer.setContents(contents); _EL_     } _EL_     buffer.addBufferChangedListener(this); _EL_     mapper.mapSource(getOuterMostEnclosingType(),contents,info); _EL_     return buffer; _EL_   } _EL_  else { _EL_     IBuffer buffer=BufferManager.createNullBuffer(bufferOwner); _EL_     if (buffer == null)     return null; _EL_     BufferManager bufManager=getBufferManager(); _EL_     bufManager.addBuffer(buffer); _EL_     buffer.addBufferChangedListener(this); _EL_     return buffer; _EL_   } _EL_ } _EL_ ', 'private void computeStaticLoadMetrics(AccessProfile accessProfile) throws BaseCollectionException { _EL_   URI storageSystemId=accessProfile.getSystemId(); _EL_   StorageSystem storageSystem=null; _EL_   try { _EL_     storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemId); _EL_     _logger.info("started computeStaticLoadMetrics for storagesystem: {}",storageSystem.getLabel()); _EL_     VNXeApiClient client=getVnxUnityClient(accessProfile); _EL_     List<VNXeNasServer> nasServers=client.getNasServers(); _EL_     for (    VNXeNasServer nasServer : nasServers) { _EL_       if ((nasServer.getMode() == VNXeNasServer.NasServerModeEnum.DESTINATION) || nasServer.getIsReplicationDestination()) { _EL_         _logger.debug("Found a replication destination NasServer"); _EL_         continue; _EL_       } _EL_       if (nasServer.getIsSystem()) { _EL_         continue; _EL_       } _EL_       VirtualNAS virtualNAS=findvNasByNativeId(storageSystem,nasServer.getId()); _EL_       if (virtualNAS != null) { _EL_         _logger.info("Process db metrics for nas server : {}",nasServer.getName()); _EL_         StringMap dbMetrics=virtualNAS.getMetrics(); _EL_         if (dbMetrics == null) { _EL_           dbMetrics=new StringMap(); _EL_         } _EL_         StringMap tmpDbMetrics=populateDbMetrics(nasServer,client); _EL_         dbMetrics.putAll(tmpDbMetrics); _EL_         virtualNAS.setMetrics(dbMetrics); _EL_         _dbClient.updateObject(virtualNAS); _EL_       } _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     _logger.error("CollectStatisticsInformation failed. Storage system: {}",storageSystemId,e); _EL_   } _EL_ } _EL_ ', 'public final short readShort() throws java.io.IOException { _EL_   readFully(scratch,0,2); _EL_   return (short)((scratch[0] << 8) | (scratch[1] & 0xff)); _EL_ } _EL_ ', 'public static void main(String... args) throws Exception { _EL_   String[] pages={"quickstart.html","installation.html","tutorial.html","features.html","performance.html","advanced.html","grammar.html","functions.html","datatypes.html","build.html","history.html","faq.html"}; _EL_   StringBuilder buff=new StringBuilder(); _EL_   for (  String fileName : pages) { _EL_     String text=getContent(fileName); _EL_     for (    String page : pages) { _EL_       text=StringUtils.replaceAll(text,page + "#","#"); _EL_     } _EL_     text=disableRailroads(text); _EL_     text=removeHeaderFooter(fileName,text); _EL_     buff.append(text); _EL_   } _EL_   String finalText=buff.toString(); _EL_   File output=new File(BASE_DIR,"onePage.html"); _EL_   PrintWriter writer=new PrintWriter(new FileWriter(output)); _EL_   writer.println("<html><head><meta http-equiv=\\"Content-Type\\" " + "content=\\"text/html;charset=utf-8\\" /><title>"); _EL_   writer.println("H2 Documentation"); _EL_   writer.println("</title><link rel=\\"stylesheet\\" type=\\"text/css\\" " + "href=\\"stylesheetPdf.css\\" /></head><body>"); _EL_   writer.println("<h1>H2 Database Engine</h1>"); _EL_   writer.println("<p>Version " + Constants.getFullVersion() + "</p>"); _EL_   writer.println(finalText); _EL_   writer.println("</body></html>"); _EL_   writer.close(); _EL_ } _EL_ ', 'public static boolean isFileExist(String filePath){ _EL_   if (StringUtils.isBlank(filePath)) { _EL_     return false; _EL_   } _EL_   File file=new File(filePath); _EL_   return (file.exists() && file.isFile()); _EL_ } _EL_ ', 'public static double[] calculateTStats(double[] coef,double[] stderror,int k){ _EL_   double[] result=new double[k]; _EL_   for (int i=0; i < k; i++) { _EL_     result[i]=coef[i] / stderror[i]; _EL_   } _EL_   return result; _EL_ } _EL_ ', 'static void runBootstrappers(final CoreEarlyComponent early,final List<HeroicBootstrap> bootstrappers) throws Exception { _EL_   for (  final HeroicBootstrap bootstrap : bootstrappers) { _EL_     try { _EL_       bootstrap.run(early); _EL_     } _EL_  catch (    Exception e) { _EL_       throw new Exception("Failed to run bootstrapper " + bootstrap,e); _EL_     } _EL_   } _EL_ } _EL_ ', 'public byte[] toByteArray(){ _EL_   byte[] b=output.toByteArray(); _EL_   ByteArray.write16bit(numOfEntries,b,0); _EL_   return b; _EL_ } _EL_ ', 'protected void saveBuffer(String name){ _EL_   StringBuffer sb=m_History.getNamedBuffer(name); _EL_   if (sb != null) { _EL_     if (m_SaveOut.save(sb)) { _EL_       m_Log.logMessage("Save successful."); _EL_     } _EL_   } _EL_ } _EL_ ', 'public List<Recommendation> scheduleStorage(VirtualArray srcVarray,Set<URI> requestedVPlexSystems,URI srcStorageSystem,VirtualPool srcVpool,boolean isHARequest,VirtualArray requestedHaVarray,VirtualPool haVpool,VirtualPoolCapabilityValuesWrapper capabilities,Project project,VpoolUse vpoolUse,Map<VpoolUse,List<Recommendation>> currentRecommendations){ _EL_   _log.info("Executing VPlex high availability placement strategy"); _EL_   if (!isHARequest) { _EL_     return scheduleStorageForLocalVPLEXVolume(srcVarray,requestedVPlexSystems,srcStorageSystem,srcVpool,capabilities,project,vpoolUse,currentRecommendations); _EL_   } _EL_  else { _EL_     return scheduleStorageForDistributedVPLEXVolume(srcVarray,requestedVPlexSystems,srcStorageSystem,srcVpool,requestedHaVarray,haVpool,capabilities,project,vpoolUse,currentRecommendations); _EL_   } _EL_ } _EL_ ', '@NotNull public static List<String> completeRelativePath(@NotNull String baseDir,@NotNull String shownBaseDir,@NotNull String relativePath){ _EL_   List<String> result=Lists.newLinkedList(); _EL_   String bashBaseDir=OSUtil.toBashCompatible(baseDir); _EL_   for (  String path : completeAbsolutePath(baseDir + File.separator + relativePath,Predicates.<File>alwaysTrue())) { _EL_     if (path.startsWith(bashBaseDir)) { _EL_       result.add(shownBaseDir + path.substring(bashBaseDir.length())); _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'protected boolean isFileSpecifyingModuleSpecifier(String specifier){ _EL_   return specifier.length() > 0 && specifier.charAt(specifier.length() - 1) != IPath.SEPARATOR; _EL_ } _EL_ ', 'private int pathPositionAtLevel(int orgUnitLevel){ _EL_   return (orgUnitLevel - 1) * 12 + 2; _EL_ } _EL_ ', 'protected void addNumericTrainClass(double classValue,double weight){ _EL_   if (classValue > m_MaxTarget) { _EL_     m_MaxTarget=classValue; _EL_   } _EL_   if (classValue < m_MinTarget) { _EL_     m_MinTarget=classValue; _EL_   } _EL_   if (m_TrainClassVals == null) { _EL_     m_TrainClassVals=new double[100]; _EL_     m_TrainClassWeights=new double[100]; _EL_   } _EL_   if (m_NumTrainClassVals == m_TrainClassVals.length) { _EL_     double[] temp=new double[m_TrainClassVals.length * 2]; _EL_     System.arraycopy(m_TrainClassVals,0,temp,0,m_TrainClassVals.length); _EL_     m_TrainClassVals=temp; _EL_     temp=new double[m_TrainClassWeights.length * 2]; _EL_     System.arraycopy(m_TrainClassWeights,0,temp,0,m_TrainClassWeights.length); _EL_     m_TrainClassWeights=temp; _EL_   } _EL_   m_TrainClassVals[m_NumTrainClassVals]=classValue; _EL_   m_TrainClassWeights[m_NumTrainClassVals]=weight; _EL_   m_NumTrainClassVals++; _EL_ } _EL_ ', 'private List<Group> parseGroups(JSONArray groups,String groupType) throws JSONException, AdeUsageException { _EL_   if (groups.length() == 0)   throw new AdeUsageException("No groups specified for group of type " + groupType); _EL_   List<Group> currentGroups=new ArrayList<Group>(); _EL_   for (int i=0; i < groups.length(); i++) { _EL_     JSONObject group=groups.getJSONObject(i); _EL_     String name=group.getString("name"); _EL_     String dataType=group.getString("dataType"); _EL_     short evalOrder=group.getShort("evaluationOrder"); _EL_     String ruleName=group.getString("ruleName"); _EL_     if (!verifyStringParam(name,200,"[a-zA-Z0-9_ ]*") || name.equalsIgnoreCase("unassigned") || !validateDataType(dataType)|| evalOrder < 1 || !verifyStringParam(ruleName,200,"[a-zA-Z0-9_ ]*")) { _EL_       throw new AdeUsageException("Invalid parameters for a group of type " + groupType + " was specified"); _EL_     } _EL_     currentGroups.add(new Group(name,GroupType.valueOf(groupType),DataType.valueOf(dataType.toUpperCase()),evalOrder,ruleName)); _EL_   } _EL_   validateEvaluationOrderAndName(currentGroups); _EL_   return currentGroups; _EL_ } _EL_ ', 'public DoubleFft1d(int n){ _EL_   if (n < 1) { _EL_     throw new IllegalArgumentException("n must be greater than 0"); _EL_   } _EL_   this.n=n; _EL_   if (!ConcurrencyUtils.isPowerOf2(n)) { _EL_     if (getReminder(n,factors) >= 211) { _EL_       plan=Plans.BLUESTEIN; _EL_       nBluestein=ConcurrencyUtils.nextPow2(n * 2 - 1); _EL_       bk1=new double[2 * nBluestein]; _EL_       bk2=new double[2 * nBluestein]; _EL_       this.ip=new int[2 + (int)Math.ceil(2 + (1 << (int)(Math.log(nBluestein + 0.5) / Math.log(2)) / 2))]; _EL_       this.w=new double[nBluestein]; _EL_       int twon=2 * nBluestein; _EL_       nw=ip[0]; _EL_       if (twon > (nw << 2)) { _EL_         nw=twon >> 2; _EL_         makewt(nw); _EL_       } _EL_       nc=ip[1]; _EL_       if (nBluestein > (nc << 2)) { _EL_         nc=nBluestein >> 2; _EL_         makect(nc,w,nw); _EL_       } _EL_       bluesteini(); _EL_     } _EL_  else { _EL_       plan=Plans.MIXED_RADIX; _EL_       wtable=new double[4 * n + 15]; _EL_       wtable_r=new double[2 * n + 15]; _EL_       cffti(); _EL_       rffti(); _EL_     } _EL_   } _EL_  else { _EL_     plan=Plans.SPLIT_RADIX; _EL_     this.ip=new int[2 + (int)Math.ceil(2 + (1 << (int)(Math.log(n + 0.5) / Math.log(2)) / 2))]; _EL_     this.w=new double[n]; _EL_     int twon=2 * n; _EL_     nw=ip[0]; _EL_     if (twon > (nw << 2)) { _EL_       nw=twon >> 2; _EL_       makewt(nw); _EL_     } _EL_     nc=ip[1]; _EL_     if (n > (nc << 2)) { _EL_       nc=n >> 2; _EL_       makect(nc,w,nw); _EL_     } _EL_   } _EL_ } _EL_ ', "public static boolean isIdentifierHelperChar(char ch){ _EL_   return ':' == ch || '.' == ch || '-' == ch || '_' == ch; _EL_ } _EL_ ", 'public void addHeader(String line){ _EL_   header.add(line); _EL_ } _EL_ ', 'public static IAddress loadAddress(final ResultSet resultSet,final String columnName) throws SQLException { _EL_   Preconditions.checkNotNull(resultSet,"IE00500: Result set argument can not be null"); _EL_   Preconditions.checkNotNull(columnName,"IE00501: Column name argument can not be null"); _EL_   final String addressString=readString(resultSet,columnName); _EL_   return resultSet.wasNull() ? null : new CAddress(new BigInteger(addressString)); _EL_ } _EL_ ', 'private static String encode(String stringToEncode){ _EL_   String encoded; _EL_   try { _EL_     encoded=URLEncoder.encode(stringToEncode,UTF_8); _EL_   } _EL_  catch (  UnsupportedEncodingException e) { _EL_     throw new MCApiRuntimeException(e); _EL_   } _EL_   encoded=encoded.replace("*","%2A"); _EL_   encoded=encoded.replace("~","%7E"); _EL_   encoded=encoded.replace("+","%20"); _EL_   return encoded; _EL_ } _EL_ ', 'public static String toGetUrl(String url,Bundle params){ _EL_   if (params != null) { _EL_     if (!url.endsWith("?")) { _EL_       url=url + "?"; _EL_     } _EL_     for (    String key : params.keySet()) { _EL_       url=url + key + "="+ params.getString(key)+ "&"; _EL_     } _EL_   } _EL_   return url; _EL_ } _EL_ ', 'public void namespaceAfterStartElement(String prefix,String uri) throws SAXException { _EL_   if (m_firstTagNotEmitted && m_firstElementURI == null && m_firstElementName != null) { _EL_     String prefix1=getPrefixPart(m_firstElementName); _EL_     if (prefix1 == null && EMPTYSTRING.equals(prefix)) { _EL_       m_firstElementURI=uri; _EL_     } _EL_   } _EL_   startPrefixMapping(prefix,uri,false); _EL_ } _EL_ ', 'protected static String guessType(File file){ _EL_   String name=file.getName(); _EL_   String suffix=name.substring(name.lastIndexOf(".") + 1); _EL_   return mimeMap.get(suffix.toLowerCase(Locale.ROOT)); _EL_ } _EL_ ', 'public boolean isPublic(){ _EL_   return Modifier.isPublic(getAccessFlags()); _EL_ } _EL_ ', 'public void putLength(int len) throws IOException { _EL_   if (len < 128) { _EL_     write((byte)len); _EL_   } _EL_  else   if (len < (1 << 8)) { _EL_     write((byte)0x081); _EL_     write((byte)len); _EL_   } _EL_  else   if (len < (1 << 16)) { _EL_     write((byte)0x082); _EL_     write((byte)(len >> 8)); _EL_     write((byte)len); _EL_   } _EL_  else   if (len < (1 << 24)) { _EL_     write((byte)0x083); _EL_     write((byte)(len >> 16)); _EL_     write((byte)(len >> 8)); _EL_     write((byte)len); _EL_   } _EL_  else { _EL_     write((byte)0x084); _EL_     write((byte)(len >> 24)); _EL_     write((byte)(len >> 16)); _EL_     write((byte)(len >> 8)); _EL_     write((byte)len); _EL_   } _EL_ } _EL_ ', 'public void putGenericFontFamily(String familyName,Font font){ _EL_   genericFontFamilies.put(familyName.toLowerCase(),font); _EL_ } _EL_ ', 'private boolean writeReference(Object value,NodeMap node){ _EL_   String name=get(value); _EL_   int size=size(); _EL_   if (name != null) { _EL_     node.put(refer,name); _EL_     return true; _EL_   } _EL_   String unique=String.valueOf(size); _EL_   node.put(mark,unique); _EL_   put(value,unique); _EL_   return false; _EL_ } _EL_ ', 'private NSObject parseData() throws ParseException { _EL_   NSObject obj=null; _EL_   skip(); _EL_   if (accept(DATA_GSOBJECT_BEGIN_TOKEN)) { _EL_     skip(); _EL_     expect(DATA_GSBOOL_BEGIN_TOKEN,DATA_GSDATE_BEGIN_TOKEN,DATA_GSINT_BEGIN_TOKEN,DATA_GSREAL_BEGIN_TOKEN); _EL_     if (accept(DATA_GSBOOL_BEGIN_TOKEN)) { _EL_       skip(); _EL_       expect(DATA_GSBOOL_TRUE_TOKEN,DATA_GSBOOL_FALSE_TOKEN); _EL_       if (accept(DATA_GSBOOL_TRUE_TOKEN)) { _EL_         obj=new NSNumber(true); _EL_       } _EL_  else { _EL_         obj=new NSNumber(false); _EL_       } _EL_       skip(); _EL_     } _EL_  else     if (accept(DATA_GSDATE_BEGIN_TOKEN)) { _EL_       skip(); _EL_       String dateString=readInputUntil(DATA_END_TOKEN); _EL_       obj=new NSDate(dateString); _EL_     } _EL_  else     if (accept(DATA_GSINT_BEGIN_TOKEN,DATA_GSREAL_BEGIN_TOKEN)) { _EL_       skip(); _EL_       String numberString=readInputUntil(DATA_END_TOKEN); _EL_       obj=new NSNumber(numberString); _EL_     } _EL_     read(DATA_END_TOKEN); _EL_   } _EL_  else { _EL_     String dataString=readInputUntil(DATA_END_TOKEN); _EL_     dataString=dataString.replaceAll("\\\\s+",""); _EL_     int numBytes=dataString.length() / 2; _EL_     byte[] bytes=new byte[numBytes]; _EL_     for (int i=0; i < bytes.length; i++) { _EL_       String byteString=dataString.substring(i * 2,i * 2 + 2); _EL_       int byteValue=Integer.parseInt(byteString,16); _EL_       bytes[i]=(byte)byteValue; _EL_     } _EL_     obj=new NSData(bytes); _EL_     skip(); _EL_   } _EL_   return obj; _EL_ } _EL_ ', 'public boolean empty(){ _EL_   return individuals.size() == 0; _EL_ } _EL_ ', '@Override public String format(DateTimeFormatter formatter){ _EL_   Objects.requireNonNull(formatter,"formatter"); _EL_   return formatter.format(this); _EL_ } _EL_ ', 'public @DottedClassName String toDottedClassName(){ _EL_   return ClassName.toDottedClassName(className); _EL_ } _EL_ ', 'public DAddExtensions(JFrame parent,String title,X509ExtensionSet extensions,PublicKey authorityPublicKey,X500Name authorityCertName,BigInteger authorityCertSerialNumber,PublicKey subjectPublicKey){ _EL_   super(parent,Dialog.ModalityType.DOCUMENT_MODAL); _EL_   setTitle(res.getString("DAddExtensions.Title")); _EL_   this.extensions=extensions; _EL_   this.authorityPublicKey=authorityPublicKey; _EL_   this.authorityCertName=authorityCertName; _EL_   this.authorityCertSerialNumber=authorityCertSerialNumber; _EL_   this.subjectPublicKey=subjectPublicKey; _EL_   initComponents(); _EL_ } _EL_ ', 'public static <T>T invokeMethod(Object obj,String name,Object... params) throws NoSuchMethodException { _EL_   Class[] paramTypes=getParamTypes(params); _EL_   final Class<?> aClass=obj.getClass(); _EL_   Method method; _EL_   try { _EL_     method=aClass.getDeclaredMethod(name,paramTypes); _EL_   } _EL_  catch (  NoSuchMethodException e) { _EL_     method=aClass.getMethod(name,paramTypes); _EL_   } _EL_   method.setAccessible(true); _EL_   try { _EL_     return (T)method.invoke(obj,params); _EL_   } _EL_  catch (  IllegalAccessException|InvocationTargetException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ } _EL_ ', 'public void addNodes(NodeIterator iterator){ _EL_   if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null)); _EL_   if (null != iterator) { _EL_     Node obj; _EL_     while (null != (obj=iterator.nextNode())) { _EL_       addElement(obj); _EL_     } _EL_   } _EL_ } _EL_ ', '@SuppressWarnings("deprecation") protected void processStyledAttributes(@NonNull TypedArray a){ _EL_   float targetAspectRatioX=Math.abs(a.getFloat(R.styleable.ucrop_UCropView_ucrop_aspect_ratio_x,DEFAULT_ASPECT_RATIO)); _EL_   float targetAspectRatioY=Math.abs(a.getFloat(R.styleable.ucrop_UCropView_ucrop_aspect_ratio_y,DEFAULT_ASPECT_RATIO)); _EL_   if (targetAspectRatioX == SOURCE_IMAGE_ASPECT_RATIO || targetAspectRatioY == SOURCE_IMAGE_ASPECT_RATIO) { _EL_     mTargetAspectRatio=SOURCE_IMAGE_ASPECT_RATIO; _EL_   } _EL_  else { _EL_     mTargetAspectRatio=targetAspectRatioX / targetAspectRatioY; _EL_   } _EL_ } _EL_ ', 'public LogMessage(String template,int code){ _EL_   this(template,null,EMPTY_STRING_ARRAY,code,Optional.empty()); _EL_ } _EL_ ', "protected String action_translate(String act_string,int act_pos,Hashtable label_map,Hashtable label_types){ _EL_   int id_start; _EL_   int pos; _EL_   int len; _EL_   String id_str; _EL_   boolean in_id; _EL_   StringBuffer result; _EL_   char buffer[]; _EL_   if (act_string == null || act_string.length() == 0)   return act_string; _EL_   len=act_string.length(); _EL_   result=new StringBuffer(len + 50); _EL_   buffer=new char[len + 1]; _EL_   act_string.getChars(0,len,buffer,0); _EL_   buffer[len]='\\0'; _EL_   in_id=false; _EL_   for (pos=id_start=0; pos <= len; pos++) { _EL_     if (in_id) { _EL_       if (!is_id_char(buffer[pos])) { _EL_         id_str=new String(buffer,id_start,pos - id_start); _EL_         result.append(label_translate(id_str,act_pos,label_map,label_types)); _EL_         if (buffer[pos] != '\\0')         result.append(buffer,pos,1); _EL_         in_id=false; _EL_       } _EL_  else { _EL_       } _EL_     } _EL_  else { _EL_       if (is_id_start(buffer[pos])) { _EL_         in_id=true; _EL_         id_start=pos; _EL_       } _EL_  else { _EL_         if (buffer[pos] != '\\0')         result.append(buffer,pos,1); _EL_       } _EL_     } _EL_   } _EL_   return result.toString(); _EL_ } _EL_ ", 'public boolean canLoad(){ _EL_   return true; _EL_ } _EL_ ', 'public String generateXML(String sessionID,String versionName,long installAge,RequestData data) throws RequestFailureException { _EL_   XmlSerializer serializer=Xml.newSerializer(); _EL_   StringWriter writer=new StringWriter(); _EL_   try { _EL_     serializer.setOutput(writer); _EL_     serializer.startDocument("UTF-8",true); _EL_     serializer.startTag(null,"request"); _EL_     serializer.attribute(null,"protocol","3.0"); _EL_     serializer.attribute(null,"version","Android-1.0.0.0"); _EL_     serializer.attribute(null,"ismachine","1"); _EL_     serializer.attribute(null,"requestid","{" + data.getRequestID() + "}"); _EL_     serializer.attribute(null,"sessionid","{" + sessionID + "}"); _EL_     serializer.attribute(null,"installsource",data.getInstallSource()); _EL_     appendExtraAttributes("request",serializer); _EL_     serializer.startTag(null,"os"); _EL_     serializer.attribute(null,"platform","android"); _EL_     serializer.attribute(null,"version",Build.VERSION.RELEASE); _EL_     serializer.attribute(null,"arch","arm"); _EL_     serializer.endTag(null,"os"); _EL_     serializer.startTag(null,"app"); _EL_     serializer.attribute(null,"brand",getBrand()); _EL_     serializer.attribute(null,"client",getClient()); _EL_     serializer.attribute(null,"appid",getAppId()); _EL_     serializer.attribute(null,"version",versionName); _EL_     serializer.attribute(null,"nextversion",""); _EL_     serializer.attribute(null,"lang",getLanguage()); _EL_     serializer.attribute(null,"installage",String.valueOf(installAge)); _EL_     serializer.attribute(null,"ap",getAdditionalParameters()); _EL_     appendExtraAttributes("app",serializer); _EL_     if (data.isSendInstallEvent()) { _EL_       serializer.startTag(null,"event"); _EL_       serializer.attribute(null,"eventtype","2"); _EL_       serializer.attribute(null,"eventresult","1"); _EL_       serializer.endTag(null,"event"); _EL_     } _EL_  else { _EL_       serializer.startTag(null,"updatecheck"); _EL_       serializer.endTag(null,"updatecheck"); _EL_       serializer.startTag(null,"ping"); _EL_       serializer.attribute(null,"active","1"); _EL_       serializer.endTag(null,"ping"); _EL_     } _EL_     serializer.endTag(null,"app"); _EL_     serializer.endTag(null,"request"); _EL_     serializer.endDocument(); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new RequestFailureException("Caught an IOException creating the XML: ",e); _EL_   } _EL_ catch (  IllegalArgumentException e) { _EL_     throw new RequestFailureException("Caught an IllegalArgumentException creating the XML: ",e); _EL_   } _EL_ catch (  IllegalStateException e) { _EL_     throw new RequestFailureException("Caught an IllegalStateException creating the XML: ",e); _EL_   } _EL_   return writer.toString(); _EL_ } _EL_ ', 'protected boolean strictParseBoolean(String s){ _EL_   if (s == null || s.isEmpty()) { _EL_     throw new IllegalArgumentException("empty string does not represent a valid boolean"); _EL_   } _EL_   if (s.equalsIgnoreCase("true")) { _EL_     return true; _EL_   } _EL_   if (s.equalsIgnoreCase("false")) { _EL_     return false; _EL_   } _EL_   throw new IllegalArgumentException("Invalid string representing a boolean: " + s); _EL_ } _EL_ ', 'public String format(DateTimeFormatter formatter){ _EL_   Objects.requireNonNull(formatter,"formatter"); _EL_   return formatter.format(this); _EL_ } _EL_ ', 'private void initializeSourceCodeMap(String adaptedContent){ _EL_   sourceCodeWithLine=new LinkedHashMap<>(); _EL_   int lineNumber=1; _EL_   StringReader sr=new StringReader(adaptedContent); _EL_   BufferedReader br=new BufferedReader(sr); _EL_   String line; _EL_   try { _EL_     while ((line=br.readLine()) != null) { _EL_       sourceCodeWithLine.put(lineNumber,line); _EL_       lineNumber++; _EL_     } _EL_   } _EL_  catch (  IOException ex) { _EL_     LOGGER.error("Error occured while initialize source code map " + ex.getMessage()); _EL_   } _EL_ } _EL_ ', 'public Matrix U(){ _EL_   return U.clone(); _EL_ } _EL_ ', 'protected Set<String> allowedDuplicateErrorCodes(){ _EL_   return Collections.emptySet(); _EL_ } _EL_ ', 'public void removeFromCompletedList(DownloadInfoRunnable downloadInfoRunnable){ _EL_   mCompletedList.remove(downloadInfoRunnable); _EL_ } _EL_ ', 'protected void addShingledPhraseQueries(final BooleanQuery mainQuery,final List<Clause> clauses,final Collection<FieldParams> fields,int shingleSize,final float tiebreaker,final int slop) throws SyntaxError { _EL_   if (null == fields || fields.isEmpty() || null == clauses || clauses.size() < shingleSize)   return; _EL_   if (0 == shingleSize)   shingleSize=clauses.size(); _EL_   final int lastClauseIndex=shingleSize - 1; _EL_   StringBuilder userPhraseQuery=new StringBuilder(); _EL_   for (int i=0; i < clauses.size() - lastClauseIndex; i++) { _EL_     userPhraseQuery.append(\'"\'); _EL_     for (int j=0; j <= lastClauseIndex; j++) { _EL_       userPhraseQuery.append(clauses.get(i + j).val); _EL_       userPhraseQuery.append(\' \'); _EL_     } _EL_     userPhraseQuery.append(\'"\'); _EL_     userPhraseQuery.append(\' \'); _EL_   } _EL_   ExtendedSolrQueryParser pp=createEdismaxQueryParser(this,IMPOSSIBLE_FIELD_NAME); _EL_   pp.addAlias(IMPOSSIBLE_FIELD_NAME,tiebreaker,getFieldBoosts(fields)); _EL_   pp.setPhraseSlop(slop); _EL_   pp.setRemoveStopFilter(true); _EL_   pp.makeDismax=true; _EL_   pp.minClauseSize=2; _EL_   Query phrase=pp.parse(userPhraseQuery.toString()); _EL_   if (phrase != null) { _EL_     mainQuery.add(phrase,BooleanClause.Occur.SHOULD); _EL_   } _EL_ } _EL_ ', 'private void updateInfo(){ _EL_   m_updating=true; _EL_   nameField.setText(m_cc.getName()); _EL_   appsHostField.setText(m_cc.getAppsHost()); _EL_   appsPortField.setText(String.valueOf(m_cc.getAppsPort())); _EL_   bTestApps.setIcon(getStatusIcon(m_cc.isAppsServerOK(false))); _EL_   boolean rw=CConnection.isServerEmbedded() ? true : !m_cc.isAppsServerOK(false); _EL_   dbTypeLabel.setReadWrite(rw); _EL_   dbTypeField.setReadWrite(rw); _EL_   dbTypeField.setSelectedItem(m_cc.getType()); _EL_   hostLabel.setReadWrite(rw); _EL_   hostField.setReadWrite(rw); _EL_   hostField.setText(m_cc.getDbHost()); _EL_   portLabel.setReadWrite(rw); _EL_   dbPortField.setReadWrite(rw); _EL_   dbPortField.setText(String.valueOf(m_cc.getDbPort())); _EL_   sidLabel.setReadWrite(rw); _EL_   sidField.setReadWrite(rw); _EL_   sidField.setText(m_cc.getDbName()); _EL_   dbUidLabel.setReadWrite(rw); _EL_   dbUidField.setReadWrite(rw); _EL_   dbUidField.setText(m_cc.getDbUid()); _EL_   dbPwdField.setEditable(rw); _EL_   dbPwdField.setText(m_cc.getDbPwd()); _EL_   cbBequeath.setReadWrite(rw); _EL_   cbBequeath.setEnabled(m_cc.isOracle()); _EL_   cbBequeath.setSelected(m_cc.isBequeath()); _EL_   boolean fwEnabled=rw && m_cc.isViaFirewall() && m_cc.isOracle(); _EL_   cbFirewall.setReadWrite(rw && m_cc.isOracle()); _EL_   cbFirewall.setSelected(m_cc.isViaFirewall()); _EL_   fwHostLabel.setReadWrite(fwEnabled); _EL_   fwHostField.setReadWrite(fwEnabled); _EL_   fwHostField.setText(m_cc.getFwHost()); _EL_   fwPortLabel.setReadWrite(fwEnabled); _EL_   fwPortField.setReadWrite(fwEnabled); _EL_   fwPortField.setText(String.valueOf(m_cc.getFwPort())); _EL_   bTestDB.setToolTipText(m_cc.getConnectionURL()); _EL_   bTestDB.setIcon(getStatusIcon(m_cc.isDatabaseOK())); _EL_   m_updating=false; _EL_ } _EL_ ', 'public void createSnapshot() throws BackupException { _EL_   logger.debug("Creating snapshot: " + this.snapshotName); _EL_   processHelper.exec("Creating file system snapshot",lvcreateCmd); _EL_ } _EL_ ', 'public final Uri storeLogFile(final LogFile logFile,final int sessionId){ _EL_   final ContentValues values=new ContentValues(); _EL_   values.put(Schema.COL_MANUFACTURER,logFile.getManufacturer()); _EL_   values.put(Schema.COL_MODEL,logFile.getModel()); _EL_   values.put(Schema.COL_REVISION,logFile.getRevision()); _EL_   values.put(Schema.COL_SWID,logFile.getSwid()); _EL_   values.put(Schema.COL_SWVER,logFile.getSwVersion()); _EL_   values.put(Schema.COL_TIMESTAMP,System.currentTimeMillis()); _EL_   values.put(Schema.COL_SESSION_ID,sessionId); _EL_   return contentResolver.insert(ContentProvider.CONTENT_URI_LOGFILE,values); _EL_ } _EL_ ', 'public Map<String,String> merge(Map<String,String> curProps,Map<String,String> newProps) throws IOException { _EL_   Map<String,String> props=new HashMap<>(newProps); _EL_   for (  Map.Entry<String,String> e : curProps.entrySet()) { _EL_     String name=e.getKey(); _EL_     String curValue=e.getValue(); _EL_     if (props.containsKey(name)) { _EL_       props.put(name,curValue); _EL_     } _EL_   } _EL_   return props; _EL_ } _EL_ ', 'public Builder deletePreferredLanguage(){ _EL_   deleteFields.add("preferredLanguage"); _EL_   return this; _EL_ } _EL_ ', 'public void onPrepared(MediaPlayer player){ _EL_   mState=State.PLAYING; _EL_   updateNotification(String.format(getString(R.string.media_state_playing),mFile.getFileName())); _EL_   if (mMediaController != null) { _EL_     mMediaController.setEnabled(true); _EL_   } _EL_   player.seekTo(mStartPosition); _EL_   configAndStartMediaPlayer(); _EL_   if (!mPlayOnPrepared) { _EL_     processPauseRequest(); _EL_   } _EL_   if (mMediaController != null) { _EL_     mMediaController.updatePausePlay(); _EL_   } _EL_ } _EL_ ', 'public void toAllInRadius(WorldServer world,Vec3d pos,double radius){ _EL_   double maxDistance=radius * radius + radius * radius + radius * radius; _EL_   toAll(world.getPlayers(EntityPlayerMP.class,null)); _EL_ } _EL_ ', 'public static ECDHECryptography fromNamedCurveId(int supportedGroupId){ _EL_   SupportedGroup group=SupportedGroup.fromId(supportedGroupId); _EL_   if (group == null) { _EL_     return null; _EL_   } _EL_  else { _EL_     try { _EL_       return new ECDHECryptography(group.name()); _EL_     } _EL_  catch (    GeneralSecurityException e) { _EL_       LOGGER.log(Level.WARNING,"Cannot create ephemeral keys for group [{0}]: {1}",new Object[]{group.name(),e.getMessage()}); _EL_       return null; _EL_     } _EL_   } _EL_ } _EL_ ', 'public String asString(){ _EL_   StringBuilder buff=new StringBuilder(); _EL_   for (int i=0; i < arrayLevel; i++) { _EL_     if (refCount) { _EL_       buff.append("ptr< "); _EL_     } _EL_     buff.append("array< "); _EL_   } _EL_   if (refCount) { _EL_     if (!classObj.isPrimitive) { _EL_       buff.append("ptr< "); _EL_     } _EL_   } _EL_   buff.append(classObj.toString()); _EL_   if (refCount) { _EL_     if (!classObj.isPrimitive) { _EL_       buff.append(" >"); _EL_     } _EL_   } _EL_   for (int i=0; i < arrayLevel; i++) { _EL_     if (refCount) { _EL_       buff.append(" >"); _EL_     } _EL_  else { _EL_       if (!classObj.isPrimitive) { _EL_         buff.append("*"); _EL_       } _EL_     } _EL_     buff.append(" >"); _EL_   } _EL_   if (!refCount) { _EL_     if (isObject()) { _EL_       buff.append("*"); _EL_     } _EL_   } _EL_   return buff.toString(); _EL_ } _EL_ ', 'public List<JsonObject> executeParametrizedStatement(String statement,List<String> parameterNames,List<Object> parameterValues){ _EL_   JsonObject namedParams=JsonObject.create(); _EL_   for (int param=0; param < parameterNames.size(); param++) { _EL_     namedParams.put(parameterNames.get(param),parameterValues.get(param)); _EL_   } _EL_   ParameterizedN1qlQuery query=N1qlQuery.parameterized(statement,namedParams); _EL_   return executeQuery(query); _EL_ } _EL_ ', 'public final T endAll(){ _EL_   while (!tagStack.isEmpty()) { _EL_     end(); _EL_   } _EL_   return getSelf(); _EL_ } _EL_ ', 'private boolean linkLast(Node<E> node){ _EL_   if (count >= capacity)   return false; _EL_   Node<E> l=last; _EL_   node.prev=l; _EL_   last=node; _EL_   if (first == null)   first=node; _EL_  else   l.next=node; _EL_   ++count; _EL_   notEmpty.signal(); _EL_   return true; _EL_ } _EL_ ', 'void drawDivider(Canvas canvas,Rect bounds,int childIndex){ _EL_   final Drawable divider=mDivider; _EL_   final boolean clipDivider=mClipDivider; _EL_   if (!clipDivider) { _EL_     divider.setBounds(bounds); _EL_   } _EL_  else { _EL_     canvas.save(); _EL_     canvas.clipRect(bounds); _EL_   } _EL_   divider.draw(canvas); _EL_   if (clipDivider) { _EL_     canvas.restore(); _EL_   } _EL_ } _EL_ ', 'protected FormSpec(DefaultAlignment defaultAlignment,String encodedDescription){ _EL_   this(defaultAlignment,Sizes.DEFAULT,NO_GROW); _EL_   parseAndInitValues(encodedDescription.toLowerCase(Locale.ENGLISH)); _EL_ } _EL_ ', 'public static <T>List<T> decode(InputStream data,Parser<T> parser) throws IOException { _EL_   CodedInputStream stream=CodedInputStream.newInstance(data); _EL_   List<T> list=new ArrayList<>(); _EL_   while (!stream.isAtEnd()) { _EL_     int size=stream.readRawVarint32(); _EL_     byte[] element=stream.readRawBytes(size); _EL_     T decoded=parser.parseFrom(element); _EL_     list.add(decoded); _EL_   } _EL_   return list; _EL_ } _EL_ ', '@Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){ _EL_   if ((!getPlotLines()) || ((!(domainAxis instanceof CyclicNumberAxis)) && (!(rangeAxis instanceof CyclicNumberAxis))) || (item <= 0)) { _EL_     super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,dataset,series,item,crosshairState,pass); _EL_     return; _EL_   } _EL_   double xn=dataset.getXValue(series,item - 1); _EL_   double yn=dataset.getYValue(series,item - 1); _EL_   if (Double.isNaN(yn)) { _EL_     super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,dataset,series,item,crosshairState,pass); _EL_     return; _EL_   } _EL_   double[] x=new double[2]; _EL_   double[] y=new double[2]; _EL_   x[0]=xn; _EL_   y[0]=yn; _EL_   xn=dataset.getXValue(series,item); _EL_   yn=dataset.getYValue(series,item); _EL_   if (Double.isNaN(yn)) { _EL_     return; _EL_   } _EL_   x[1]=xn; _EL_   y[1]=yn; _EL_   double xcycleBound=Double.NaN; _EL_   double ycycleBound=Double.NaN; _EL_   boolean xBoundMapping=false, yBoundMapping=false; _EL_   CyclicNumberAxis cnax=null, cnay=null; _EL_   if (domainAxis instanceof CyclicNumberAxis) { _EL_     cnax=(CyclicNumberAxis)domainAxis; _EL_     xcycleBound=cnax.getCycleBound(); _EL_     xBoundMapping=cnax.isBoundMappedToLastCycle(); _EL_     if ((x[0] != x[1]) && ((xcycleBound >= x[0]) && (xcycleBound <= x[1]) || (xcycleBound >= x[1]) && (xcycleBound <= x[0]))) { _EL_       double[] nx=new double[3]; _EL_       double[] ny=new double[3]; _EL_       nx[0]=x[0]; _EL_       nx[2]=x[1]; _EL_       ny[0]=y[0]; _EL_       ny[2]=y[1]; _EL_       nx[1]=xcycleBound; _EL_       ny[1]=(y[1] - y[0]) * (xcycleBound - x[0]) / (x[1] - x[0]) + y[0]; _EL_       x=nx; _EL_       y=ny; _EL_     } _EL_   } _EL_   if (rangeAxis instanceof CyclicNumberAxis) { _EL_     cnay=(CyclicNumberAxis)rangeAxis; _EL_     ycycleBound=cnay.getCycleBound(); _EL_     yBoundMapping=cnay.isBoundMappedToLastCycle(); _EL_     if ((y[0] != y[1]) && ((ycycleBound >= y[0]) && (ycycleBound <= y[1]) || (ycycleBound >= y[1]) && (ycycleBound <= y[0]))) { _EL_       double[] nx=new double[x.length + 1]; _EL_       double[] ny=new double[y.length + 1]; _EL_       nx[0]=x[0]; _EL_       nx[2]=x[1]; _EL_       ny[0]=y[0]; _EL_       ny[2]=y[1]; _EL_       ny[1]=ycycleBound; _EL_       nx[1]=(x[1] - x[0]) * (ycycleBound - y[0]) / (y[1] - y[0]) + x[0]; _EL_       if (x.length == 3) { _EL_         nx[3]=x[2]; _EL_         ny[3]=y[2]; _EL_       } _EL_       x=nx; _EL_       y=ny; _EL_     } _EL_  else     if ((x.length == 3) && (y[1] != y[2]) && ((ycycleBound >= y[1]) && (ycycleBound <= y[2]) || (ycycleBound >= y[2]) && (ycycleBound <= y[1]))) { _EL_       double[] nx=new double[4]; _EL_       double[] ny=new double[4]; _EL_       nx[0]=x[0]; _EL_       nx[1]=x[1]; _EL_       nx[3]=x[2]; _EL_       ny[0]=y[0]; _EL_       ny[1]=y[1]; _EL_       ny[3]=y[2]; _EL_       ny[2]=ycycleBound; _EL_       nx[2]=(x[2] - x[1]) * (ycycleBound - y[1]) / (y[2] - y[1]) + x[1]; _EL_       x=nx; _EL_       y=ny; _EL_     } _EL_   } _EL_   if (x.length == 2) { _EL_     super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,dataset,series,item,crosshairState,pass); _EL_     return; _EL_   } _EL_   OverwriteDataSet newset=new OverwriteDataSet(x,y,dataset); _EL_   if (cnax != null) { _EL_     if (xcycleBound == x[0]) { _EL_       cnax.setBoundMappedToLastCycle(x[1] <= xcycleBound); _EL_     } _EL_     if (xcycleBound == x[1]) { _EL_       cnax.setBoundMappedToLastCycle(x[0] <= xcycleBound); _EL_     } _EL_   } _EL_   if (cnay != null) { _EL_     if (ycycleBound == y[0]) { _EL_       cnay.setBoundMappedToLastCycle(y[1] <= ycycleBound); _EL_     } _EL_     if (ycycleBound == y[1]) { _EL_       cnay.setBoundMappedToLastCycle(y[0] <= ycycleBound); _EL_     } _EL_   } _EL_   super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,newset,series,1,crosshairState,pass); _EL_   if (cnax != null) { _EL_     if (xcycleBound == x[1]) { _EL_       cnax.setBoundMappedToLastCycle(x[2] <= xcycleBound); _EL_     } _EL_     if (xcycleBound == x[2]) { _EL_       cnax.setBoundMappedToLastCycle(x[1] <= xcycleBound); _EL_     } _EL_   } _EL_   if (cnay != null) { _EL_     if (ycycleBound == y[1]) { _EL_       cnay.setBoundMappedToLastCycle(y[2] <= ycycleBound); _EL_     } _EL_     if (ycycleBound == y[2]) { _EL_       cnay.setBoundMappedToLastCycle(y[1] <= ycycleBound); _EL_     } _EL_   } _EL_   super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,newset,series,2,crosshairState,pass); _EL_   if (x.length == 4) { _EL_     if (cnax != null) { _EL_       if (xcycleBound == x[2]) { _EL_         cnax.setBoundMappedToLastCycle(x[3] <= xcycleBound); _EL_       } _EL_       if (xcycleBound == x[3]) { _EL_         cnax.setBoundMappedToLastCycle(x[2] <= xcycleBound); _EL_       } _EL_     } _EL_     if (cnay != null) { _EL_       if (ycycleBound == y[2]) { _EL_         cnay.setBoundMappedToLastCycle(y[3] <= ycycleBound); _EL_       } _EL_       if (ycycleBound == y[3]) { _EL_         cnay.setBoundMappedToLastCycle(y[2] <= ycycleBound); _EL_       } _EL_     } _EL_     super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,newset,series,3,crosshairState,pass); _EL_   } _EL_   if (cnax != null) { _EL_     cnax.setBoundMappedToLastCycle(xBoundMapping); _EL_   } _EL_   if (cnay != null) { _EL_     cnay.setBoundMappedToLastCycle(yBoundMapping); _EL_   } _EL_ } _EL_ ', 'public static void writeInt(DataOutput out,int v) throws IOException { _EL_   out.writeByte(0xff & v); _EL_   out.writeByte(0xff & (v >>> 8)); _EL_   out.writeByte(0xff & (v >>> 16)); _EL_   out.writeByte(0xff & (v >>> 24)); _EL_ } _EL_ ', 'public void writeField(final String name,final double value) throws java.io.IOException { _EL_   writeField(name,Double.toString(value)); _EL_ } _EL_ ', 'public Creature calculateNextCreature(final int questLevel){ _EL_   final List<Creature> possibleCreaturesToSpawn=new ArrayList<Creature>(); _EL_   int lastLevel=0; _EL_   for (  final Creature creature : sortedCreatures) { _EL_     if (creature.getLevel() > questLevel) { _EL_       break; _EL_     } _EL_     if (creature.getLevel() > lastLevel) { _EL_       possibleCreaturesToSpawn.clear(); _EL_       lastLevel=creature.getLevel(); _EL_     } _EL_     possibleCreaturesToSpawn.add(creature); _EL_   } _EL_   Creature creatureToSpawn=null; _EL_   if (possibleCreaturesToSpawn.size() == 0) { _EL_     creatureToSpawn=sortedCreatures.get(sortedCreatures.size() - 1); _EL_   } _EL_  else { _EL_     Collections.shuffle(possibleCreaturesToSpawn); _EL_     creatureToSpawn=possibleCreaturesToSpawn.get(0); _EL_   } _EL_   return creatureToSpawn; _EL_ } _EL_ ', '@Override public void deleteTrait(String guid,String traitNameToBeDeleted) throws AtlasException { _EL_   guid=ParamChecker.notEmpty(guid,"entity id"); _EL_   traitNameToBeDeleted=ParamChecker.notEmpty(traitNameToBeDeleted,"trait name"); _EL_   if (!typeSystem.isRegistered(traitNameToBeDeleted)) { _EL_     final String msg=String.format("trait=%s should be defined in type system before it can be deleted",traitNameToBeDeleted); _EL_     LOG.error(msg); _EL_     throw new TypeNotFoundException(msg); _EL_   } _EL_   repository.deleteTrait(guid,traitNameToBeDeleted); _EL_   onTraitDeletedFromEntity(repository.getEntityDefinition(guid),traitNameToBeDeleted); _EL_ } _EL_ ', 'public void addTables(Collection<Table> tables){ _EL_   for (Iterator<Table> it=tables.iterator(); it.hasNext(); ) { _EL_     addTable((Table)it.next()); _EL_   } _EL_ } _EL_ ', 'protected void writeFile(String template,Writer writer){ _EL_   if (template == null) { _EL_     throw new IllegalArgumentException("template content can not be null."); _EL_   } _EL_   BufferedWriter bufferedWriter=new BufferedWriter(writer); _EL_   String output=replace(template,null); _EL_   try { _EL_     bufferedWriter.append(output); _EL_   } _EL_  catch (  IOException e) { _EL_     logger.log(Diagnostic.Kind.ERROR,"write file failed"); _EL_     e.printStackTrace(); _EL_   } _EL_  finally { _EL_     try { _EL_       bufferedWriter.close(); _EL_     } _EL_  catch (    IOException e) { _EL_       e.printStackTrace(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public synchronized boolean clear(){ _EL_   if (isLoading()) { _EL_     return false; _EL_   } _EL_   loader=new Thread(null); _EL_   loader.start(); _EL_   return true; _EL_ } _EL_ ', 'public int indexOf(final RoundedToolItem item){ _EL_   checkWidget(); _EL_   return items.indexOf(item); _EL_ } _EL_ ', 'public Void call() throws Exception { _EL_   final List<Future<Void>> tasks=new LinkedList<Future<Void>>(); _EL_   try { _EL_     for (    IV<?,?> termId : graphs) { _EL_       final FutureTask<Void> ft=new FutureTask<Void>(new DrainIteratorTask(termId)); _EL_       tasks.add(ft); _EL_       executor.execute(ft); _EL_     } _EL_     for (    Future<Void> f : tasks) { _EL_       f.get(); _EL_     } _EL_   } _EL_  catch (  Throwable ex) { _EL_     for (    Future<Void> f : tasks)     f.cancel(true); _EL_     throw new RuntimeException(ex); _EL_   } _EL_  finally { _EL_     buffer.close(); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'protected void runFullImport(String dataConfig,Map<String,String> extraParams) throws Exception { _EL_   HashMap<String,String> params=new HashMap<>(); _EL_   params.put("command","full-import"); _EL_   params.put("debug","on"); _EL_   params.put("dataConfig",dataConfig); _EL_   params.put("clean","true"); _EL_   params.put("commit","true"); _EL_   params.putAll(extraParams); _EL_   NamedList l=new NamedList(); _EL_   for (  Map.Entry<String,String> e : params.entrySet()) { _EL_     l.add(e.getKey(),e.getValue()); _EL_   } _EL_   LocalSolrQueryRequest request=new LocalSolrQueryRequest(h.getCore(),l); _EL_   h.query("/dataimport",request); _EL_ } _EL_ ', 'public String userIdFromRange(Object ominId,Object omaxId){ _EL_   int minId=FunctionHandler.getInt(ominId); _EL_   int maxId=FunctionHandler.getInt(omaxId); _EL_   Stack<Integer> stack=getStack(minId,maxId); _EL_   if (stack.size() > 0) { _EL_     return Integer.toString(stack.pop()); _EL_   } _EL_   throw new IllegalArgumentException("Exhausted random User Ids. Range not large enough for the number of calls."); _EL_ } _EL_ ', 'public void start(){ _EL_   if (isStarted) { _EL_     log.info("Coordinator stream consumer already started"); _EL_     return; _EL_   } _EL_   log.info("Starting coordinator stream system consumer."); _EL_   systemConsumer.start(); _EL_   isStarted=true; _EL_ } _EL_ ', 'public static void generateBinaryOperationFlags(final ITranslationEnvironment environment,final long nextOffset,final String result,final OperandSize resultSize,final List<ReilInstruction> instructions) throws IllegalArgumentException { _EL_   Preconditions.checkNotNull(environment,"Error: Argument environment can\'t be null"); _EL_   Preconditions.checkNotNull(result,"Error: Argument result can\'t be null"); _EL_   Preconditions.checkNotNull(resultSize,"Error: Argument resultSize can\'t be null"); _EL_   Preconditions.checkNotNull(instructions,"Error: Argument instructions can\'t be null"); _EL_   final long baseOffset=nextOffset - instructions.size(); _EL_   long offset=nextOffset; _EL_   generateSignFlagCode(environment,offset,result,resultSize,instructions); _EL_   offset=(baseOffset + instructions.size()) - 1; _EL_   instructions.add(ReilHelpers.createBisz(offset + 1,resultSize,result,OperandSize.BYTE,Helpers.ZERO_FLAG)); _EL_   instructions.add(ReilHelpers.createStr(offset + 2,OperandSize.BYTE,"0",OperandSize.BYTE,Helpers.CARRY_FLAG)); _EL_   instructions.add(ReilHelpers.createStr(offset + 3,OperandSize.BYTE,"0",OperandSize.BYTE,Helpers.OVERFLOW_FLAG)); _EL_ } _EL_ ', 'public boolean isLabelMovable(){ _EL_   mxGraph graph=graphComponent.getGraph(); _EL_   String label=graph.getLabel(state.getCell()); _EL_   return graph.isLabelMovable(state.getCell()) && label != null && label.length() > 0; _EL_ } _EL_ ', 'public int writeTypeList(TypeList typeList){ _EL_   int off=data.position(); _EL_   short[] types=typeList.types; _EL_   writeInt(types.length); _EL_   for (  short type : types) { _EL_     writeShort(type); _EL_   } _EL_   return off; _EL_ } _EL_ ', 'public static void loadConfigResource(String resourceName) throws IOException { _EL_   config.clear(); _EL_   config.putAll(loadPropertiesFromResource(resourceName)); _EL_ } _EL_ ', 'public static void safeCloseStream(InputStream in){ _EL_   if (in != null) { _EL_     try { _EL_       in.close(); _EL_     } _EL_  catch (    Exception e) { _EL_       log.error(e.getMessage(),e); _EL_     } _EL_   } _EL_ } _EL_ ', 'private Transaction createTransaction() throws LeaseDeniedException, RemoteException, TransactionException { _EL_   ITransactionManagerProvider transactionManagerProvider=getTransactionManagerProvider(); _EL_   return (TransactionFactory.create(transactionManagerProvider.getTransactionManager(),_config.getTransactionTimeout())).transaction; _EL_ } _EL_ ', 'public void skipWhile(String skip) throws IOException { _EL_   char ch; _EL_   do { _EL_     ch=read(); _EL_   } _EL_  while (skip.indexOf(ch) > -1); _EL_   unreadCharacter(ch); _EL_ } _EL_ ', "public static String packageToPath(String packageName){ _EL_   return packageName.replace('.',File.separatorChar); _EL_ } _EL_ ", '@Override public boolean containsKey(Object key){ _EL_   if (key == null) { _EL_     return entryForNullKey != null; _EL_   } _EL_   int hash=key.hashCode(); _EL_   hash^=(hash >>> 20) ^ (hash >>> 12); _EL_   hash^=(hash >>> 7) ^ (hash >>> 4); _EL_   HashMapEntry<K,V>[] tab=table; _EL_   for (HashMapEntry<K,V> e=tab[hash & (tab.length - 1)]; e != null; e=e.next) { _EL_     K eKey=e.key; _EL_     if (eKey == key || (e.hash == hash && key.equals(eKey))) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'protected boolean isValidFragment(String fragment){ _EL_   if (fragment == null) { _EL_     return true; _EL_   } _EL_   return isOff(NO_FRAGMENTS); _EL_ } _EL_ ', 'private void rehash(){ _EL_   int oldCapacity=m_capacity; _EL_   HashEntry[] oldTable=m_table; _EL_   int newCapacity=2 * oldCapacity + 1; _EL_   m_capacity=newCapacity; _EL_   m_threshold=(int)(newCapacity * m_loadFactor); _EL_   m_table=new HashEntry[newCapacity]; _EL_   for (int i=oldCapacity - 1; i >= 0; i--) { _EL_     for (HashEntry old=oldTable[i]; old != null; ) { _EL_       HashEntry e=old; _EL_       old=old.next; _EL_       int newIndex=e.hash % newCapacity; _EL_       if (newIndex < 0)       newIndex=-newIndex; _EL_       e.next=m_table[newIndex]; _EL_       m_table[newIndex]=e; _EL_     } _EL_   } _EL_ } _EL_ ', 'public void savePoisFromAssets(){ _EL_   List<Poi> pois=poiAssetLoader.loadPoisFromAssets(); _EL_   Timber.d("Loaded %s poi, trying to insert them",pois.size()); _EL_   for (  Poi poi : pois) { _EL_     Timber.d("saving poi %s",poi); _EL_     savePoi(poi); _EL_     Timber.d("poi saved"); _EL_   } _EL_ } _EL_ ', 'private void createElement(Document doc,Element parentElement,String elementName,Color value){ _EL_   Element element=doc.createElement(elementName); _EL_   element.appendChild(doc.createTextNode(ColourUtils.fromColour(value))); _EL_   parentElement.appendChild(element); _EL_ } _EL_ ', 'void variableOperatorChanged(int row,String oper){ _EL_   ConditionalVariable variable=_variableList.get(row); _EL_   int oldOper=variable.getOpern(); _EL_   if (row > 0) { _EL_     if (oper.equals(Bundle.getMessage("LogicOR"))) { _EL_       variable.setOpern(Conditional.OPERATOR_OR); _EL_     } _EL_  else { _EL_       variable.setOpern(Conditional.OPERATOR_AND); _EL_     } _EL_   } _EL_  else { _EL_     variable.setOpern(Conditional.OPERATOR_NONE); _EL_   } _EL_   if (variable.getOpern() != oldOper) { _EL_     makeAntecedent(); _EL_   } _EL_ } _EL_ ', 'public void addHeader(String name,String val){ _EL_   mMsgHeader=mMsgHeader + name + ": "+ val+ mLineDelimiter; _EL_   addInternalHeaderFields(name,val); _EL_ } _EL_ ', 'public static void checkDuplicateRequest(RedisClient redisClient,String uri,Buffer buffer,String ttl,Handler<Boolean> callback){ _EL_   Integer timeToLive=parseTimeToLive(ttl); _EL_   String redisKey=getRedisKey(uri,HashCodeGenerator.createHashCode(uri,buffer.toString())); _EL_   handleStorage(redisClient,redisKey,timeToLive,callback); _EL_ } _EL_ ', 'boolean isHidden(View view){ _EL_   return mHiddenViews.contains(view); _EL_ } _EL_ ', 'public static void deleteRecursive(@NonNull File fileOrDirectory){ _EL_   deleteRecursive(fileOrDirectory,Collections.EMPTY_LIST); _EL_ } _EL_ ', 'static boolean doesMenuBarBorderToolBar(JMenuBar c){ _EL_   JToolBar tb=(JToolBar)MetalToolBarUI.findRegisteredComponentOfType(c,JToolBar.class); _EL_   if (tb != null && tb.getOrientation() == JToolBar.HORIZONTAL) { _EL_     JRootPane rp=SwingUtilities.getRootPane(c); _EL_     Point point=new Point(0,0); _EL_     point=SwingUtilities.convertPoint(c,point,rp); _EL_     int menuX=point.x; _EL_     int menuY=point.y; _EL_     point.x=point.y=0; _EL_     point=SwingUtilities.convertPoint(tb,point,rp); _EL_     return (point.x == menuX && menuY + c.getHeight() == point.y && c.getWidth() == tb.getWidth()); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private PriorityQueue<USField> createQueue(String fieldName,Map<String,Flt> words) throws IOException { _EL_   int numDocs=ir.numDocs(); _EL_   FreqQ res=new FreqQ(words.size()); _EL_   for (  String word : words.keySet()) { _EL_     float tf=words.get(word).x; _EL_     if (minTermFreq > 0 && tf < minTermFreq) { _EL_       continue; _EL_     } _EL_     int docFreq=ir.docFreq(new Term(fieldName,word)); _EL_     if (minDocFreq > 0 && docFreq < minDocFreq) { _EL_       continue; _EL_     } _EL_     if (docFreq == 0 || docFreq > maxDocFreq) { _EL_       continue; _EL_     } _EL_     float idf=similarity.idf(docFreq,numDocs); _EL_     float score=0; _EL_     if (isLogTf()) { _EL_       score=(float)(Math.log(tf + 1) * idf); _EL_     } _EL_  else { _EL_       score=tf * idf; _EL_     } _EL_     USField mltField; _EL_     if (isPayloadField(fieldName)) { _EL_       mltField=new USField(word,fieldName,score,tf,idf,docFreq,1.01f); _EL_     } _EL_  else { _EL_       mltField=new USField(word,fieldName,score,tf,idf,docFreq); _EL_     } _EL_     res.insertWithOverflow(mltField); _EL_   } _EL_   return res; _EL_ } _EL_ ', 'public static void eachObject(ObjectInputStream ois,Closure closure) throws IOException, ClassNotFoundException { _EL_   try { _EL_     while (true) { _EL_       try { _EL_         Object obj=ois.readObject(); _EL_         closure.call(obj); _EL_       } _EL_  catch (      EOFException e) { _EL_         break; _EL_       } _EL_     } _EL_     InputStream temp=ois; _EL_     ois=null; _EL_     temp.close(); _EL_   } _EL_   finally { _EL_     closeWithWarning(ois); _EL_   } _EL_ } _EL_ ', 'private static int exitWithStatus(int status){ _EL_   if (ToolIO.getMode() == ToolIO.SYSTEM) { _EL_     System.exit(status); _EL_   } _EL_   return status; _EL_ } _EL_ ', 'public static double distanceInMeters(final double latP1,final double latP2,final double lonP1,final double lonP2){ _EL_   double distRad=Math.acos(Math.sin(toRadians(latP1)) * Math.sin(toRadians(latP2)) + Math.cos(toRadians(latP1)) * Math.cos(toRadians(latP2)) * Math.cos(toRadians(lonP1 - lonP2))); _EL_   final double distAsDegree=toDegrees(distRad); _EL_   return distAsDegree * 60 * 1.1515* 1609.344; _EL_ } _EL_ ', 'public void processChallenge(final String challenge) throws MalformedChallengeException { _EL_   String s=AuthChallengeParser.extractScheme(challenge); _EL_   if (!s.equalsIgnoreCase(getSchemeName())) { _EL_     throw new MalformedChallengeException("Invalid NTLM challenge: " + challenge); _EL_   } _EL_   int i=challenge.indexOf(\' \'); _EL_   if (i != -1) { _EL_     s=challenge.substring(i,challenge.length()); _EL_     this.ntlmchallenge=s.trim(); _EL_     this.state=TYPE2_MSG_RECEIVED; _EL_   } _EL_  else { _EL_     this.ntlmchallenge=""; _EL_     if (this.state == UNINITIATED) { _EL_       this.state=INITIATED; _EL_     } _EL_  else { _EL_       this.state=FAILED; _EL_     } _EL_   } _EL_ } _EL_ ', 'public static BigInteger calculateA(BigInteger p,BigInteger q,BigInteger gA,BigInteger x2s){ _EL_   return gA.modPow(x2s,p); _EL_ } _EL_ ', 'public void addUndoEvent(UndoInterface event){ _EL_   if (shouldProcessUndoRedoAction()) { _EL_     boolean atEndOfList=(currentIndex >= undoList.size()); _EL_     if (!atEndOfList) { _EL_       while (undoList.size() > currentIndex) { _EL_         int lastIndex=undoList.size() - 1; _EL_         undoList.remove(lastIndex); _EL_       } _EL_     } _EL_     undoList.add(event); _EL_     currentIndex=undoList.size(); _EL_     updateMenuItems(); _EL_     logger.debug(event.getStringRepresentation()); _EL_   } _EL_ } _EL_ ', 'public static Exception establishCacheIfNeeded(PrintStream... progress){ _EL_   if (m_offline) { _EL_     return null; _EL_   } _EL_   if (REP_MIRROR == null) { _EL_     establishMirror(); _EL_   } _EL_   Exception problem=null; _EL_   if (INITIAL_CACHE_BUILD_NEEDED) { _EL_     for (    PrintStream p : progress) { _EL_       p.println("Caching repository meta data, please wait..."); _EL_     } _EL_     problem=refreshCache(progress); _EL_     INITIAL_CACHE_BUILD_NEEDED=false; _EL_   } _EL_   return problem; _EL_ } _EL_ ', 'public Spanny append(CharSequence text,ImageSpan imageSpan){ _EL_   text="." + text; _EL_   append(text); _EL_   setSpan(imageSpan,length() - text.length(),length() - text.length() + 1); _EL_   return this; _EL_ } _EL_ ', 'public static boolean validatePassword(String password,String correctHash) throws NoSuchAlgorithmException, InvalidKeySpecException { _EL_   return validatePassword(password.toCharArray(),correctHash); _EL_ } _EL_ ', 'public List<Snapshot> currentSnapshots(String repositoryName){ _EL_   List<Snapshot> snapshotList=new ArrayList<>(); _EL_   List<SnapshotsInProgress.Entry> entries=currentSnapshots(repositoryName,null); _EL_   for (  SnapshotsInProgress.Entry entry : entries) { _EL_     snapshotList.add(inProgressSnapshot(entry)); _EL_   } _EL_   CollectionUtil.timSort(snapshotList); _EL_   return Collections.unmodifiableList(snapshotList); _EL_ } _EL_ ', 'public void addCertificate(X509CertificateHolder certificate) throws CMSException { _EL_   certs.add(certificate.toASN1Structure()); _EL_ } _EL_ ', '@Override protected void paintTabBackground(Graphics g,int tabPlacement,int tabIndex,int x,int y,int w,int h,boolean isSelected){ _EL_   if (isSelected) { _EL_     if (tabPlacement == TOP) { _EL_       g.setColor(Color.white); _EL_       g.fillRoundRect(x,y,w,h + R + R,R,R); _EL_     } _EL_   } _EL_  else { _EL_   } _EL_ } _EL_ ', 'protected Range findRangeBounds(CategoryDataset dataset,boolean includeInterval){ _EL_   if (dataset == null) { _EL_     return null; _EL_   } _EL_   if (getDataBoundsIncludesVisibleSeriesOnly()) { _EL_     List visibleSeriesKeys=new ArrayList(); _EL_     int seriesCount=dataset.getRowCount(); _EL_     for (int s=0; s < seriesCount; s++) { _EL_       if (isSeriesVisible(s)) { _EL_         visibleSeriesKeys.add(dataset.getRowKey(s)); _EL_       } _EL_     } _EL_     return DatasetUtilities.findRangeBounds(dataset,visibleSeriesKeys,includeInterval); _EL_   } _EL_  else { _EL_     return DatasetUtilities.findRangeBounds(dataset,includeInterval); _EL_   } _EL_ } _EL_ ', 'protected String adminShutdown(){ _EL_   server.shutdown(); _EL_   return "admin.jsp"; _EL_ } _EL_ ', 'public long num_threads(){ _EL_   return Long.parseLong(fields[19]); _EL_ } _EL_ ', 'public void assignRole(AMRole role) throws AMException, SSOException { _EL_   assignRole(role.getDN()); _EL_ } _EL_ ', 'public OrderedThreadPoolExecutor(int corePoolSize,int maximumPoolSize){ _EL_   this(corePoolSize,maximumPoolSize,DEFAULT_KEEP_ALIVE,TimeUnit.SECONDS,Executors.defaultThreadFactory(),null); _EL_ } _EL_ ', 'public static <T extends Map.Entry<String,String>>String formEncode(Collection<T> parameters) throws IOException { _EL_   ByteArrayOutputStream b=new ByteArrayOutputStream(); _EL_   formEncode(parameters,b); _EL_   return new String(b.toByteArray()); _EL_ } _EL_ ', 'public void runNextPendingCommand(){ _EL_   Runnable runnable=deltaQueue.pop(); _EL_   runnable.run(); _EL_ } _EL_ ', 'public void stop(int timeout) throws InterruptedException { _EL_   if (!isclosed.compareAndSet(false,true)) { _EL_     return; _EL_   } _EL_   List<WebSocket> socketsToClose=null; _EL_ synchronized (connections) { _EL_     socketsToClose=new ArrayList<WebSocket>(connections); _EL_   } _EL_   for (  WebSocket ws : socketsToClose) { _EL_     ws.close(CloseFrame.GOING_AWAY); _EL_   } _EL_ synchronized (this) { _EL_     if (selectorthread != null && selectorthread != Thread.currentThread()) { _EL_       selector.wakeup(); _EL_       selectorthread.interrupt(); _EL_       selectorthread.join(timeout); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void removeAnnotation(int index){ _EL_   mAnnotations.remove(index); _EL_   mStringXY.removeByIndex(index); _EL_ } _EL_ ', 'public String replace(char oldChar,char newChar){ _EL_   char[] buffer=value; _EL_   int _offset=offset; _EL_   int _count=count; _EL_   int idx=_offset; _EL_   int last=_offset + _count; _EL_   boolean copied=false; _EL_   while (idx < last) { _EL_     if (buffer[idx] == oldChar) { _EL_       if (!copied) { _EL_         char[] newBuffer=new char[_count]; _EL_         System.arraycopy(buffer,_offset,newBuffer,0,_count); _EL_         buffer=newBuffer; _EL_         idx-=_offset; _EL_         last-=_offset; _EL_         copied=true; _EL_       } _EL_       buffer[idx]=newChar; _EL_     } _EL_     idx++; _EL_   } _EL_   return copied ? new String(0,count,buffer) : this; _EL_ } _EL_ ', 'private <Type extends Message>RpcCallback<Type> wrapsCallback(MockCallback<?> callback){ _EL_   EasyMock.reportMatcher(new WrapsCallback(callback)); _EL_   return null; _EL_ } _EL_ ', 'public boolean shouldSelectCell(EventObject e){ _EL_   log.finest(m_mField.getColumnName()); _EL_   return true; _EL_ } _EL_ ', '@Nonnull public BugInstance addClass(ClassNode classNode){ _EL_   String dottedClassName=ClassName.toDottedClassName(classNode.name); _EL_   ClassAnnotation classAnnotation=new ClassAnnotation(dottedClassName); _EL_   add(classAnnotation); _EL_   return this; _EL_ } _EL_ ', 'public static int parseUpperMap(String s) throws NumberFormatException { _EL_   int upperCase=MAP_UNDEFINED; _EL_   int length=s.length(); _EL_   if (length >= 4 && length <= 6) { _EL_     upperCase=Integer.parseInt(s,16); _EL_   } _EL_  else   if (s.length() != 0) { _EL_     throw new NumberFormatException(); _EL_   } _EL_   return upperCase; _EL_ } _EL_ ', '@Override public void run(){ _EL_   while (!isInterrupted()) { _EL_     try { _EL_       Reference ref=_queue.remove(); _EL_       _entryInfos.remove(ref); _EL_     } _EL_  catch (    InterruptedException e) { _EL_       interrupt(); _EL_       break; _EL_     } _EL_   } _EL_ } _EL_ ', 'private File createZipFile(int entryCount,int entrySize) throws IOException { _EL_   File result=createTemporaryZipFile(); _EL_   byte[] writeBuffer=new byte[8192]; _EL_   Random random=new Random(); _EL_   ZipOutputStream out=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(result))); _EL_   for (int entry=0; entry < entryCount; ++entry) { _EL_     ZipEntry ze=new ZipEntry(Integer.toHexString(entry)); _EL_     out.putNextEntry(ze); _EL_     for (int i=0; i < entrySize; i+=writeBuffer.length) { _EL_       random.nextBytes(writeBuffer); _EL_       int byteCount=Math.min(writeBuffer.length,entrySize - i); _EL_       out.write(writeBuffer,0,byteCount); _EL_     } _EL_     out.closeEntry(); _EL_   } _EL_   out.close(); _EL_   return result; _EL_ } _EL_ ', 'private boolean isValidPlaylistName(String newName){ _EL_   Playlist blankPlaylist=new Playlist(newName,false); _EL_   return !newName.isEmpty() && !musicLibrary.containsPlaylist(blankPlaylist); _EL_ } _EL_ ', 'public static <V extends SampledVertex>Set<V> createSampledPartition(Collection<V> vertices){ _EL_   Set<V> partition=new HashSet<V>(); _EL_   for (  V vertex : vertices) { _EL_     if (vertex.isSampled())     partition.add(vertex); _EL_   } _EL_   return partition; _EL_ } _EL_ ', 'public GremlinTransactionManager(GremlinGraphFactory graphFactory){ _EL_   super(); _EL_   this.graphFactory=graphFactory; _EL_ } _EL_ ', 'public void shiftBeans(BeanInstance toShiftTo,boolean save){ _EL_   if (save) { _EL_     m_originalCoords=new Vector<Point>(); _EL_   } _EL_   int targetX=toShiftTo.getX(); _EL_   int targetY=toShiftTo.getY(); _EL_   for (int i=0; i < m_subFlow.size(); i++) { _EL_     BeanInstance temp=(BeanInstance)m_subFlow.elementAt(i); _EL_     if (save) { _EL_       Point p=new Point(temp.getX() - targetX,temp.getY() - targetY); _EL_       m_originalCoords.add(p); _EL_     } _EL_     temp.setX(targetX); _EL_     temp.setY(targetY); _EL_   } _EL_ } _EL_ ', '@Override protected final List<LatLong> doInBackground(final Object... args){ _EL_   List<LatLong> points=new ArrayList<>(); _EL_   DataHelper dbHelper=new DataHelper(mContext); _EL_   final ArrayList<PositionRecord> positions=dbHelper.loadPositions((Integer)args[SESSION_ID],(Double)args[MIN_LAT_COL],(Double)args[MAX_LAT_COL],(Double)args[MIN_LON_COL],(Double)args[MAX_LON_COL]); _EL_   for (  PositionRecord position : positions) { _EL_     points.add(new LatLong(position.getLatitude(),position.getLongitude())); _EL_   } _EL_   return points; _EL_ } _EL_ ', 'public ProducerWorker(String topic,String message){ _EL_   this._topic=topic; _EL_   this._message=message; _EL_ } _EL_ ', 'private static boolean functionsAreAllowed(boolean isAddAllFunction,boolean isPutAllFunction,Class<?> classD,Class<?> classS){ _EL_   if (isAddAllFunction)   return collectionIsAssignableFrom(classD) && collectionIsAssignableFrom(classS); _EL_   if (isPutAllFunction)   return mapIsAssignableFrom(classD) && mapIsAssignableFrom(classS); _EL_   return isAssignableFrom(classD,classS); _EL_ } _EL_ ', 'private void loadOrgAccessUser(ArrayList<OrgAccess> list){ _EL_   PreparedStatement pstmt=null; _EL_   ResultSet rs=null; _EL_   String sql="SELECT * FROM AD_User_OrgAccess " + "WHERE AD_User_ID=? AND IsActive=\'Y\'"; _EL_   try { _EL_     pstmt=DB.prepareStatement(sql,get_TrxName()); _EL_     pstmt.setInt(1,getAD_User_ID()); _EL_     rs=pstmt.executeQuery(); _EL_     while (rs.next()) { _EL_       MUserOrgAccess oa=new MUserOrgAccess(getCtx(),rs,get_TrxName()); _EL_       loadOrgAccessAdd(list,new OrgAccess(oa.getAD_Client_ID(),oa.getAD_Org_ID(),oa.isReadOnly())); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     log.log(Level.SEVERE,sql,e); _EL_   } _EL_  finally { _EL_     DB.close(rs,pstmt); _EL_   } _EL_ } _EL_ ', 'public void close(){ _EL_ synchronized (mDiskCacheLock) { _EL_     if (mDiskLruCache != null) { _EL_       try { _EL_         if (!mDiskLruCache.isClosed()) { _EL_           mDiskLruCache.close(); _EL_         } _EL_       } _EL_  catch (      Throwable e) { _EL_         LogUtils.e(e.getMessage(),e); _EL_       } _EL_       mDiskLruCache=null; _EL_     } _EL_   } _EL_ } _EL_ ', 'private Map<URI,Integer> createVolumeMapForExportMask(ExportMask exportMask){ _EL_   Map<URI,Integer> map=new HashMap<>(); _EL_   for (  URI uri : ExportMaskUtils.getVolumeURIs(exportMask)) { _EL_     map.put(uri,ExportGroup.LUN_UNASSIGNED); _EL_   } _EL_   return map; _EL_ } _EL_ ', '@Override public void close() throws IOException { _EL_   SocketChannel s=_channel; _EL_   _channel=null; _EL_   SSLSocket sslSocket=_sslSocket; _EL_   _sslSocket=null; _EL_   if (sslSocket != null) { _EL_     try { _EL_       sslSocket.close(); _EL_     } _EL_  catch (    Exception e) { _EL_     } _EL_   } _EL_   if (s != null) { _EL_     try { _EL_       s.close(); _EL_     } _EL_  catch (    Exception e) { _EL_     } _EL_   } _EL_ } _EL_ ', 'public static Vector3D max(Vector3D a,Vector3D b){ _EL_   return new Vector3D(FastMath.max(a.getX(),b.getX()),FastMath.max(a.getY(),b.getY()),FastMath.max(a.getZ(),b.getZ())); _EL_ } _EL_ ', 'public static void waitForProcessOutput(Process self,OutputStream output,OutputStream error){ _EL_   Thread tout=consumeProcessOutputStream(self,output); _EL_   Thread terr=consumeProcessErrorStream(self,error); _EL_   try { _EL_     tout.join(); _EL_   } _EL_  catch (  InterruptedException ignore) { _EL_   } _EL_   try { _EL_     terr.join(); _EL_   } _EL_  catch (  InterruptedException ignore) { _EL_   } _EL_   try { _EL_     self.waitFor(); _EL_   } _EL_  catch (  InterruptedException ignore) { _EL_   } _EL_   closeStreams(self); _EL_ } _EL_ ', 'public CommandLine add(String... args){ _EL_   if (args != null && args.length > 0) { _EL_     Collections.addAll(line,args); _EL_   } _EL_   return this; _EL_ } _EL_ ', '@Override final Node<V> find(int h,long k){ _EL_   for (Node<V> e=first; e != null; ) { _EL_     int s; _EL_     if (((s=lockState) & (WAITER | WRITER)) != 0) { _EL_       if ((e.key == k)) { _EL_         return e; _EL_       } _EL_       e=e.next; _EL_     } _EL_  else     if (U.compareAndSwapInt(this,LOCKSTATE,s,s + READER)) { _EL_       TreeNode<V> r; _EL_       TreeNode<V> p; _EL_       try { _EL_         p=((r=root) == null ? null : r.findTreeNode(h,k)); _EL_       } _EL_   finally { _EL_         Thread w; _EL_         if (getAndAddInt(this,LOCKSTATE,-READER) == (READER | WAITER) && (w=waiter) != null) { _EL_           LockSupport.unpark(w); _EL_         } _EL_       } _EL_       return p; _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', '@Override public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){ _EL_   AxisState axisState=new AxisState(cursor); _EL_   if (isAxisLineVisible()) { _EL_     drawAxisLine(g2,cursor,dataArea,edge); _EL_   } _EL_   if (isTickMarksVisible()) { _EL_     drawTickMarks(g2,axisState,dataArea,edge); _EL_   } _EL_   if (isTickLabelsVisible()) { _EL_     for (int band=0; band < this.labelInfo.length; band++) { _EL_       axisState=drawTickLabels(band,g2,axisState,dataArea,edge); _EL_     } _EL_   } _EL_   if (getAttributedLabel() != null) { _EL_     axisState=drawAttributedLabel(getAttributedLabel(),g2,plotArea,dataArea,edge,axisState); _EL_   } _EL_  else { _EL_     axisState=drawLabel(getLabel(),g2,plotArea,dataArea,edge,axisState); _EL_   } _EL_   return axisState; _EL_ } _EL_ ', 'private ArrayList<URLCrawlDatum> readContents(Path fetchlist) throws IOException { _EL_   SequenceFile.Reader reader=new SequenceFile.Reader(fs,fetchlist,conf); _EL_   ArrayList<URLCrawlDatum> l=new ArrayList<URLCrawlDatum>(); _EL_   READ:   do { _EL_     Text key=new Text(); _EL_     CrawlDatum value=new CrawlDatum(); _EL_     if (!reader.next(key,value)) { _EL_       break READ; _EL_     } _EL_     l.add(new URLCrawlDatum(key,value)); _EL_   } _EL_  while (true); _EL_   reader.close(); _EL_   return l; _EL_ } _EL_ ', 'public static Color createRandomColour(){ _EL_   float r=rand.nextFloat(); _EL_   float g=rand.nextFloat(); _EL_   float b=rand.nextFloat(); _EL_   Color randomColor=new Color(r,g,b); _EL_   return randomColor; _EL_ } _EL_ ', 'public void abort(){ _EL_   cleanUp(); _EL_   if (mFuture != null) { _EL_     mFuture.cancel(true); _EL_     mFuture=null; _EL_   } _EL_   if (mExecutorService != null) { _EL_     mExecutorService.shutdownNow(); _EL_     mExecutorService=null; _EL_   } _EL_   mListener=null; _EL_ } _EL_ ', 'public void addCSPStateListener(CSPStateListener listener){ _EL_   listeners.add(listener); _EL_ } _EL_ ', 'public static void printWrappedText(final PrintStream stream,final String message){ _EL_   if (stream != null && message != null && !message.isEmpty()) { _EL_     stream.println(wrapText(message,MAX_LINE_WIDTH)); _EL_   } _EL_ } _EL_ ', 'public void removeAtRange(int index,int size){ _EL_   final int end=Math.min(mSize,index + size); _EL_   for (int i=index; i < end; i++) { _EL_     removeAt(i); _EL_   } _EL_ } _EL_ ', 'private synchronized Rect[] computeBoundingBoxes(){ _EL_   if (!boundingBoxes.isPresent()) { _EL_     Rect[] bb=new Rect[(int)contours.size()]; _EL_     for (int i=0; i < contours.size(); i++) { _EL_       bb[i]=boundingRect(contours.get(i)); _EL_     } _EL_     boundingBoxes=Optional.of(bb); _EL_   } _EL_   return boundingBoxes.get(); _EL_ } _EL_ ', 'public void addTimeline(final JSONObject timeline){ _EL_   TimelineChannel.notifyTimeline(timeline); _EL_   timelines.addFirst(timeline); _EL_   final int maxCnt=Symphonys.getInt("timelineCnt"); _EL_   if (timelines.size() > maxCnt) { _EL_     timelines.remove(maxCnt); _EL_   } _EL_ } _EL_ ', 'private boolean loadLOBData(){ _EL_   if (isStoreAttachmentsOnFileSystem) { _EL_     return loadLOBDataFromFileSystem(); _EL_   } _EL_   return loadLOBDataFromDB(); _EL_ } _EL_ ', 'protected void paintComponent(Graphics g){ _EL_   backgroundPainter.paint(g,getVisibleRect()); _EL_   TextUI ui=getUI(); _EL_   if (ui != null) { _EL_     Graphics scratchGraphics=g.create(); _EL_     try { _EL_       ui.update(scratchGraphics,this); _EL_     } _EL_   finally { _EL_       scratchGraphics.dispose(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static <T>List<T> copyToArrayListWithExtraCapacity(T[] elements,int extraCapacity){ _EL_   List<T> asList; _EL_   if (elements != null) { _EL_     asList=new ArrayList<T>(elements.length + extraCapacity); _EL_     asList.addAll(Arrays.asList(elements)); _EL_   } _EL_  else { _EL_     asList=new ArrayList<T>(extraCapacity); _EL_   } _EL_   return asList; _EL_ } _EL_ ', 'private boolean sendEventToListeners(ClusterEvent event){ _EL_   boolean success=true; _EL_   for (  String listenerId : Collections.unmodifiableSet(listeners.keySet())) { _EL_     logger.debug("Notifying listener {} of event {} for instance {}",listenerId,event.getType(),instanceId); _EL_     ClusterEventListener listener=listeners.get(listenerId); _EL_     if (listener != null && !listener.handleEvent(event)) { _EL_       success=false; _EL_     } _EL_   } _EL_   return success; _EL_ } _EL_ ', '@RequestMapping(method=RequestMethod.PUT,value="/{region}/{keys}",consumes={MediaType.APPLICATION_JSON_VALUE},produces={MediaType.APPLICATION_JSON_VALUE}) @ApiOperation(value="update data for key",notes="Update or insert (put) data for key in region." + "op=REPLACE, update (replace) data with key if and only if the key exists in region" + "op=CAS update (compare-and-set) value having key with a new value if and only if the \\"@old\\" value sent matches the current value for the key in region",response=void.class) @ApiResponses({@ApiResponse(code=200,message="OK."),@ApiResponse(code=400,message="Bad Request."),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=404,message="Region does not exist or if key is not mapped to some value for REPLACE or CAS."),@ApiResponse(code=409,message="For CAS, @old value does not match to the current value in region"),@ApiResponse(code=500,message="GemFire throws an error or exception.")}) @PreAuthorize("@securityService.authorize(\'WRITE\', #region, #keys)") public ResponseEntity<?> update(@PathVariable("region") String region,@PathVariable("keys") final String[] keys,@RequestParam(value="op",defaultValue="PUT") final String opValue,@RequestBody final String json){ _EL_   logger.debug("updating key(s) for region ({}) ",region); _EL_   region=decode(region); _EL_   if (keys.length > 1) { _EL_     return updateMultipleKeys(region,keys,json); _EL_   } _EL_  else { _EL_     return updateSingleKey(region,keys[0],json,opValue); _EL_   } _EL_ } _EL_ ', 'public static boolean fileExists(String fName){ _EL_   boolean result=false; _EL_   File file=new File(fName); _EL_   if (file != null) { _EL_     result=file.exists() && file.isFile(); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private static void _init(){ _EL_   addMethod("iConomy",new com.earth2me.essentials.register.payment.methods.iCo6()); _EL_   addMethod("iConomy",new com.earth2me.essentials.register.payment.methods.iCo5()); _EL_   addMethod("BOSEconomy",new com.earth2me.essentials.register.payment.methods.BOSE7()); _EL_   addMethod("Currency",new com.earth2me.essentials.register.payment.methods.MCUR()); _EL_   Dependencies.add("MultiCurrency"); _EL_   addMethod("Vault",new com.earth2me.essentials.register.payment.methods.VaultEco()); _EL_ } _EL_ ', 'public static String convertFileName(String name,int maxBytes){ _EL_   try { _EL_     return convertFileName(name,maxBytes,Charset.defaultCharset()); _EL_   } _EL_  catch (  CharacterCodingException cce) { _EL_     try { _EL_       return convertFileName(name,maxBytes,Charset.forName("UTF-8")); _EL_     } _EL_  catch (    CharacterCodingException e) { _EL_       throw new RuntimeException("UTF-8 should have encoded: " + name,e); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static void copy(URL url,File file) throws IOException { _EL_   InputStream is=url.openStream(); _EL_   try { _EL_     OutputStream os=new FileOutputStream(file); _EL_     try { _EL_       byte[] buffer=new byte[8192]; _EL_       int read; _EL_       while ((read=is.read(buffer)) > 0) { _EL_         os.write(buffer,0,read); _EL_       } _EL_     } _EL_   finally { _EL_       os.close(); _EL_     } _EL_   } _EL_   finally { _EL_     is.close(); _EL_   } _EL_ } _EL_ ', 'public void createAuthConfiguration(String name) throws AMConsoleException { _EL_   if ((name == null) || (name.length() == 0)) { _EL_     throw new AMConsoleException(getLocalizedString("authentication.config.missing.name")); _EL_   } _EL_   String[] params={currentRealm,name}; _EL_   logEvent("ATTEMPT_CREATE_AUTH_CONFIG",params); _EL_   String errorMsg=null; _EL_   try { _EL_     AMAuthConfigUtils.createNamedConfig(name,0,new HashMap(),currentRealm,getUserSSOToken()); _EL_     logEvent("SUCCEED_CREATE_AUTH_CONFIG",params); _EL_   } _EL_  catch (  SMSException e) { _EL_     errorMsg=getErrorString(e); _EL_     String[] paramsEx={currentRealm,name,errorMsg}; _EL_     logEvent("SMS_EXCEPTION_CREATE_AUTH_CONFIG",paramsEx); _EL_     debug.warning("problem creating auth instance",e); _EL_   } _EL_ catch (  SSOException e) { _EL_     errorMsg=getErrorString(e); _EL_     String[] paramsEx={currentRealm,name,errorMsg}; _EL_     logEvent("SSO_EXCEPTION_CREATE_AUTH_CONFIG",paramsEx); _EL_     debug.warning("problem creating auth instance",e); _EL_   } _EL_ catch (  AMConfigurationException e) { _EL_     errorMsg=getErrorString(e); _EL_     String[] paramsEx={currentRealm,name,errorMsg}; _EL_     logEvent("AUTH_CONFIGURATION_EXCEPTION_CREATE_AUTH_CONFIG",paramsEx); _EL_     debug.warning("problem creating auth instance",e); _EL_   } _EL_   if (errorMsg != null) { _EL_     throw new AMConsoleException(errorMsg); _EL_   } _EL_ } _EL_ ', 'public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int[] bandList){ _EL_   if (x < this.minX) { _EL_     throw new RasterFormatException("x lies outside the raster"); _EL_   } _EL_   if (y < this.minY) { _EL_     throw new RasterFormatException("y lies outside the raster"); _EL_   } _EL_   if ((x + width < x) || (x + width > this.minX + this.width)) { _EL_     throw new RasterFormatException("(x + width) is outside of Raster"); _EL_   } _EL_   if ((y + height < y) || (y + height > this.minY + this.height)) { _EL_     throw new RasterFormatException("(y + height) is outside of Raster"); _EL_   } _EL_   SampleModel sm; _EL_   if (bandList != null) { _EL_     sm=sampleModel.createSubsetSampleModel(bandList); _EL_   } _EL_  else { _EL_     sm=sampleModel; _EL_   } _EL_   int deltaX=x0 - x; _EL_   int deltaY=y0 - y; _EL_   return new BytePackedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this); _EL_ } _EL_ ', 'private void sendBuffer() throws IOException { _EL_   buf.flip(); _EL_   send(buf,buf.remaining()); _EL_   buf=null; _EL_ } _EL_ ', 'public void callEvent(Event event){ _EL_   if (event.isAsynchronous()) { _EL_     if (Thread.holdsLock(this)) { _EL_       throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from inside synchronized code."); _EL_     } _EL_     if (server.isPrimaryThread()) { _EL_       throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from primary server thread."); _EL_     } _EL_     fireEvent(event); _EL_   } _EL_  else { _EL_ synchronized (this) { _EL_       fireEvent(event); _EL_     } _EL_   } _EL_ } _EL_ ', '@Nullable private static PsiFile findFileToOpen(@NotNull List<PsiFile> files){ _EL_   PsiFile bestFile=null; _EL_   FolderConfiguration bestConfig=null; _EL_   for (  PsiFile file : files) { _EL_     PsiDirectory qualifiedDirectory=file.getParent(); _EL_     assert qualifiedDirectory != null : "Resource file\'s parent directory cannot be null"; _EL_     FolderConfiguration config=FolderConfiguration.getConfigForFolder(qualifiedDirectory.getName()); _EL_     if (bestConfig == null || config == null || config.compareTo(bestConfig) < 0) { _EL_       bestConfig=config; _EL_       bestFile=file; _EL_     } _EL_   } _EL_   return bestFile; _EL_ } _EL_ ', 'protected boolean areEqual(String string1,String string2,boolean caseMatters){ _EL_   return (caseMatters && string1.equals(string2)) || (!caseMatters && string1.equalsIgnoreCase(string2)); _EL_ } _EL_ ', 'protected void populateBlob(int id,byte[] baseContent,int requiredSize) throws SQLException { _EL_   Connection con=getConnectionViaDriverManager(); _EL_   CallableStatement cstmt=null; _EL_   try { _EL_     cstmt=con.prepareCall(EXECUTE_FILL_BINARY_BLOB); _EL_     cstmt.setInt(1,id); _EL_     cstmt.setBytes(2,baseContent); _EL_     cstmt.setInt(3,requiredSize); _EL_     cstmt.execute(); _EL_   } _EL_   finally { _EL_     closeQuietly(cstmt); _EL_     closeQuietly(con); _EL_   } _EL_ } _EL_ ', 'private void removeObservedFile(String localPath){ _EL_   File file=new File(localPath); _EL_   String parentPath=file.getParent(); _EL_   FolderObserver observer=mFolderObserversMap.get(parentPath); _EL_   if (observer != null) { _EL_     observer.stopWatching(file.getName()); _EL_     if (observer.isEmpty()) { _EL_       mFolderObserversMap.remove(parentPath); _EL_       Log_OC.d(TAG,"Observer removed for parent folder " + parentPath + "/"); _EL_     } _EL_   } _EL_  else { _EL_     Log_OC.d(TAG,"No observer to remove for path " + localPath); _EL_   } _EL_ } _EL_ ', 'public void makeImmutable(){ _EL_   if (mutable) { _EL_     if (results != null) { _EL_       int length=results.size(); _EL_       for (int i=0; i < length; i++) { _EL_         Result result=(Result)results.get(i); _EL_         result.makeImmutable(); _EL_       } _EL_       results=Collections.unmodifiableList(results); _EL_     } _EL_     mutable=false; _EL_   } _EL_ } _EL_ ', 'public Statement isNull(){ _EL_   statement.append(" IS NULL"); _EL_   return this; _EL_ } _EL_ ', 'public void clear(){ _EL_   processQueue(); _EL_   hash.clear(); _EL_ } _EL_ ', 'private void updateFavoriteStation(){ _EL_   String showString=null; _EL_   if (FmRadioStation.isFavoriteStation(mContext,mCurrentStation)) { _EL_     String stationName=FmRadioStation.getStationName(mContext,mCurrentStation,FmRadioStation.STATION_TYPE_FAVORITE); _EL_     FmRadioStation.updateStationToDb(mContext,stationName,FmRadioStation.STATION_TYPE_SEARCHED,mCurrentStation); _EL_     mButtonAddToFavorite.setImageResource(R.drawable.btn_fm_favorite_off_selector); _EL_     mTextStationName.setText(""); _EL_     showString=mProjectStringExt.getProjectString(mContext,R.string.toast_channel_deleted,R.string.toast_channel_deleted1); _EL_   } _EL_  else { _EL_     String stationName=FmRadioStation.getStationName(mContext,mCurrentStation,FmRadioStation.STATION_TYPE_SEARCHED); _EL_     if (FmRadioStation.isStationExist(mContext,mCurrentStation,FmRadioStation.STATION_TYPE_SEARCHED)) { _EL_       FmRadioStation.updateStationToDb(mContext,stationName,FmRadioStation.STATION_TYPE_FAVORITE,mCurrentStation); _EL_     } _EL_  else { _EL_       FmRadioStation.insertStationToDb(mContext,stationName,mCurrentStation,FmRadioStation.STATION_TYPE_FAVORITE); _EL_     } _EL_     mButtonAddToFavorite.setImageResource(R.drawable.btn_fm_favorite_on_selector); _EL_     mTextStationName.setText(stationName); _EL_     showString=mProjectStringExt.getProjectString(mContext,R.string.toast_channel_added,R.string.toast_channel_added1); _EL_   } _EL_   showToast(showString); _EL_ } _EL_ ', 'public int addAllAbsent(Collection<? extends E> c){ _EL_   Object[] cs=c.toArray(); _EL_   if (cs.length == 0)   return 0; _EL_   final ReentrantLock lock=this.lock; _EL_   lock.lock(); _EL_   try { _EL_     Object[] elements=getArray(); _EL_     int len=elements.length; _EL_     int added=0; _EL_     for (int i=0; i < cs.length; ++i) { _EL_       Object e=cs[i]; _EL_       if (indexOf(e,elements,0,len) < 0 && indexOf(e,cs,0,added) < 0)       cs[added++]=e; _EL_     } _EL_     if (added > 0) { _EL_       Object[] newElements=Arrays.copyOf(elements,len + added); _EL_       System.arraycopy(cs,0,newElements,len,added); _EL_       setArray(newElements); _EL_     } _EL_     return added; _EL_   } _EL_   finally { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', 'public Analyzer saveAnalysis(File file) throws IOException { _EL_   PrintStream ps=null; _EL_   try { _EL_     ps=new PrintStream(new BufferedOutputStream(new FileOutputStream(file))); _EL_     printAnalysis(ps); _EL_   } _EL_   finally { _EL_     if (ps != null) { _EL_       ps.close(); _EL_     } _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public Iterator<Capability> dependencies(){ _EL_   return m_Dependencies.iterator(); _EL_ } _EL_ ', "public final static int parseInt(String str){ _EL_   char c=str.charAt(0); _EL_   int length=str.length(); _EL_   boolean negative=(c == '-'); _EL_   int offset=1; _EL_   if (negative) { _EL_     if (length == 1 || length > 10) { _EL_       return Integer.parseInt(str); _EL_     } _EL_     c=str.charAt(offset++); _EL_   } _EL_  else { _EL_     if (length > 9) { _EL_       return Integer.parseInt(str); _EL_     } _EL_   } _EL_   if (c > '9' || c < '0') { _EL_     return Integer.parseInt(str); _EL_   } _EL_   int num=c - '0'; _EL_   if (offset < length) { _EL_     c=str.charAt(offset++); _EL_     if (c > '9' || c < '0') { _EL_       return Integer.parseInt(str); _EL_     } _EL_     num=(num * 10) + (c - '0'); _EL_     if (offset < length) { _EL_       c=str.charAt(offset++); _EL_       if (c > '9' || c < '0') { _EL_         return Integer.parseInt(str); _EL_       } _EL_       num=(num * 10) + (c - '0'); _EL_       if (offset < length) { _EL_         do { _EL_           c=str.charAt(offset++); _EL_           if (c > '9' || c < '0') { _EL_             return Integer.parseInt(str); _EL_           } _EL_           num=(num * 10) + (c - '0'); _EL_         } _EL_  while (offset < length); _EL_       } _EL_     } _EL_   } _EL_   return negative ? -num : num; _EL_ } _EL_ ", 'public BufferedHeader(final CharArrayBuffer buffer) throws ParseException { _EL_   super(); _EL_   if (buffer == null) { _EL_     throw new IllegalArgumentException("Char array buffer may not be null"); _EL_   } _EL_   int colon=buffer.indexOf(\':\'); _EL_   if (colon == -1) { _EL_     throw new ParseException("Invalid header: " + buffer.toString()); _EL_   } _EL_   String s=buffer.substringTrimmed(0,colon); _EL_   if (s.length() == 0) { _EL_     throw new ParseException("Invalid header: " + buffer.toString()); _EL_   } _EL_   this.buffer=buffer; _EL_   this.name=s; _EL_   this.valuePos=colon + 1; _EL_ } _EL_ ', 'public static String toDateString(java.util.Date date,String format){ _EL_   if (date == null)   return ""; _EL_   SimpleDateFormat dateFormat=null; _EL_   if (format != null) { _EL_     dateFormat=new SimpleDateFormat(format); _EL_   } _EL_  else { _EL_     dateFormat=new SimpleDateFormat(); _EL_   } _EL_   Calendar calendar=Calendar.getInstance(); _EL_   calendar.setTime(date); _EL_   return dateFormat.format(date); _EL_ } _EL_ ', '@Deprecated public static <T>T executeWithBackOff(AbstractGoogleClientRequest<T> client,String error,Object... errorArgs) throws IOException, InterruptedException { _EL_   return executeWithBackOff(client,String.format(error,errorArgs)); _EL_ } _EL_ ', 'private void checkServerResponseCode(HttpURLConnection urlConnection) throws RequestFailureException { _EL_   try { _EL_     if (urlConnection.getResponseCode() != 200) { _EL_       throw new RequestFailureException("Received " + urlConnection.getResponseCode() + " code instead of 200 (OK) from the server.  Aborting."); _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     throw new RequestFailureException("Failed to read response code from server: ",e); _EL_   } _EL_ } _EL_ ', 'public static void addResourceSource(ResourceSource source){ _EL_   ALL_RESOURCE_SOURCES.add(source); _EL_ } _EL_ ', 'private boolean connect_to_target(PlaPointInt p_from_point){ _EL_   if (nearest_target_item != null && target_set != null && !target_set.contains(nearest_target_item)) { _EL_     nearest_target_item=null; _EL_   } _EL_   if (nearest_target_item == null || !nearest_target_item.shares_net_no(net_nos)) { _EL_     return false; _EL_   } _EL_   boolean route_completed=false; _EL_   PlaPointInt connection_point=null; _EL_   if (nearest_target_item instanceof BrdAbit) { _EL_     BrdAbit target=(BrdAbit)nearest_target_item; _EL_     connection_point=target.center_get(); _EL_   } _EL_  else   if (nearest_target_item instanceof BrdTracep) { _EL_     return r_board.connect_to_trace(p_from_point,(BrdTracep)nearest_target_item,pen_half_width_arr[layer_active_no],clearance_class); _EL_   } _EL_  else   if (nearest_target_item instanceof BrdAreaConduction) { _EL_     connection_point=p_from_point; _EL_   } _EL_   if (connection_point != null) { _EL_     route_completed=itera_connect(p_from_point,connection_point); _EL_   } _EL_   return route_completed; _EL_ } _EL_ ', 'public boolean onGenericMotionEvent(MotionEvent ev){ _EL_   if ((ev.getSource() & InputDevice.SOURCE_CLASS_POINTER) == InputDevice.SOURCE_CLASS_POINTER) { _EL_     int action=ev.getAction(); _EL_ switch (action & MotionEvent.ACTION_MASK) { _EL_ case MotionEvent.ACTION_SCROLL: _EL_       float vScroll=ev.getAxisValue(MotionEvent.AXIS_VSCROLL); _EL_     if (vScroll > 0) { _EL_       if (mDeckView.ensureFocusedTask()) { _EL_         mDeckView.focusNextTask(true,false); _EL_       } _EL_     } _EL_  else { _EL_       if (mDeckView.ensureFocusedTask()) { _EL_         mDeckView.focusNextTask(false,false); _EL_       } _EL_     } _EL_   return true; _EL_ } _EL_ } _EL_ return false; _EL_ } _EL_ ', 'public void editElement(final Object element,final String columnPropertyName){ _EL_   final int columnIndex=TableViewerUtils.columnPropertyNameToColumnIndex(columnPropertyName,true,viewer); _EL_   viewer.editElement(element,columnIndex); _EL_ } _EL_ ', 'public Fp(ECCurve curve,ECFieldElement x,ECFieldElement y){ _EL_   this(curve,x,y,false); _EL_ } _EL_ ', 'private static String serializeDocumentInt(Document doc) throws TransformerException, IOException { _EL_   ByteArrayOutputStream s=new ByteArrayOutputStream(); _EL_   TransformerFactory factory=TransformerFactory.newInstance(); _EL_   Transformer transformer=factory.newTransformer(); _EL_   transformer.setOutputProperty(OutputKeys.METHOD,"xml"); _EL_   transformer.setOutputProperty(OutputKeys.INDENT,"yes"); _EL_   DOMSource source=new DOMSource(doc); _EL_   StreamResult outputTarget=new StreamResult(s); _EL_   transformer.transform(source,outputTarget); _EL_   return s.toString("UTF8"); _EL_ } _EL_ ', 'static double area(S2Point a,S2Point b,S2Point c){ _EL_   final double sa=b.angle(c); _EL_   final double sb=c.angle(a); _EL_   final double sc=a.angle(b); _EL_   final double s=0.5 * (sa + sb + sc); _EL_   if (s >= 3e-4) { _EL_     double s2=s * s; _EL_     double dmin=s - Math.max(sa,Math.max(sb,sc)); _EL_     if (dmin < 1e-2 * s * s2* s2) { _EL_       double area=girardArea(a,b,c); _EL_       if (dmin < s * (0.1 * area)) { _EL_         return area; _EL_       } _EL_     } _EL_   } _EL_   return 4 * Math.atan(Math.sqrt(Math.max(0.0,Math.tan(0.5 * s) * Math.tan(0.5 * (s - sa)) * Math.tan(0.5 * (s - sb))* Math.tan(0.5 * (s - sc))))); _EL_ } _EL_ ', 'private void hqr2(){ _EL_   int nn=this.n; _EL_   int n=nn - 1; _EL_   int low=0; _EL_   int high=nn - 1; _EL_   double eps=Math.pow(2.0,-52.0); _EL_   double exshift=0.0; _EL_   double p=0, q=0, r=0, s=0, z=0, t, w, x, y; _EL_   double norm=0.0; _EL_   for (int i=0; i < nn; i++) { _EL_     if (i < low | i > high) { _EL_       d[i]=H[i][i]; _EL_       e[i]=0.0; _EL_     } _EL_     for (int j=Math.max(i - 1,0); j < nn; j++) { _EL_       norm=norm + Math.abs(H[i][j]); _EL_     } _EL_   } _EL_   int iter=0; _EL_   while (n >= low) { _EL_     int l=n; _EL_     while (l > low) { _EL_       s=Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]); _EL_       if (s == 0.0) { _EL_         s=norm; _EL_       } _EL_       if (Math.abs(H[l][l - 1]) < eps * s) { _EL_         break; _EL_       } _EL_       l--; _EL_     } _EL_     if (l == n) { _EL_       H[n][n]=H[n][n] + exshift; _EL_       d[n]=H[n][n]; _EL_       e[n]=0.0; _EL_       n--; _EL_       iter=0; _EL_     } _EL_  else     if (l == n - 1) { _EL_       w=H[n][n - 1] * H[n - 1][n]; _EL_       p=(H[n - 1][n - 1] - H[n][n]) / 2.0; _EL_       q=p * p + w; _EL_       z=Math.sqrt(Math.abs(q)); _EL_       H[n][n]=H[n][n] + exshift; _EL_       H[n - 1][n - 1]=H[n - 1][n - 1] + exshift; _EL_       x=H[n][n]; _EL_       if (q >= 0) { _EL_         if (p >= 0) { _EL_           z=p + z; _EL_         } _EL_  else { _EL_           z=p - z; _EL_         } _EL_         d[n - 1]=x + z; _EL_         d[n]=d[n - 1]; _EL_         if (z != 0.0) { _EL_           d[n]=x - w / z; _EL_         } _EL_         e[n - 1]=0.0; _EL_         e[n]=0.0; _EL_         x=H[n][n - 1]; _EL_         s=Math.abs(x) + Math.abs(z); _EL_         p=x / s; _EL_         q=z / s; _EL_         r=Math.sqrt(p * p + q * q); _EL_         p=p / r; _EL_         q=q / r; _EL_         for (int j=n - 1; j < nn; j++) { _EL_           z=H[n - 1][j]; _EL_           H[n - 1][j]=q * z + p * H[n][j]; _EL_           H[n][j]=q * H[n][j] - p * z; _EL_         } _EL_         for (int i=0; i <= n; i++) { _EL_           z=H[i][n - 1]; _EL_           H[i][n - 1]=q * z + p * H[i][n]; _EL_           H[i][n]=q * H[i][n] - p * z; _EL_         } _EL_         for (int i=low; i <= high; i++) { _EL_           z=V[i][n - 1]; _EL_           V[i][n - 1]=q * z + p * V[i][n]; _EL_           V[i][n]=q * V[i][n] - p * z; _EL_         } _EL_       } _EL_  else { _EL_         d[n - 1]=x + p; _EL_         d[n]=x + p; _EL_         e[n - 1]=z; _EL_         e[n]=-z; _EL_       } _EL_       n=n - 2; _EL_       iter=0; _EL_     } _EL_  else { _EL_       x=H[n][n]; _EL_       y=0.0; _EL_       w=0.0; _EL_       if (l < n) { _EL_         y=H[n - 1][n - 1]; _EL_         w=H[n][n - 1] * H[n - 1][n]; _EL_       } _EL_       if (iter == 10) { _EL_         exshift+=x; _EL_         for (int i=low; i <= n; i++) { _EL_           H[i][i]-=x; _EL_         } _EL_         s=Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]); _EL_         x=y=0.75 * s; _EL_         w=-0.4375 * s * s; _EL_       } _EL_       if (iter == 30) { _EL_         s=(y - x) / 2.0; _EL_         s=s * s + w; _EL_         if (s > 0) { _EL_           s=Math.sqrt(s); _EL_           if (y < x) { _EL_             s=-s; _EL_           } _EL_           s=x - w / ((y - x) / 2.0 + s); _EL_           for (int i=low; i <= n; i++) { _EL_             H[i][i]-=s; _EL_           } _EL_           exshift+=s; _EL_           x=y=w=0.964; _EL_         } _EL_       } _EL_       iter=iter + 1; _EL_       int m=n - 2; _EL_       while (m >= l) { _EL_         z=H[m][m]; _EL_         r=x - z; _EL_         s=y - z; _EL_         p=(r * s - w) / H[m + 1][m] + H[m][m + 1]; _EL_         q=H[m + 1][m + 1] - z - r- s; _EL_         r=H[m + 2][m + 1]; _EL_         s=Math.abs(p) + Math.abs(q) + Math.abs(r); _EL_         p=p / s; _EL_         q=q / s; _EL_         r=r / s; _EL_         if (m == l) { _EL_           break; _EL_         } _EL_         if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) { _EL_           break; _EL_         } _EL_         m--; _EL_       } _EL_       for (int i=m + 2; i <= n; i++) { _EL_         H[i][i - 2]=0.0; _EL_         if (i > m + 2) { _EL_           H[i][i - 3]=0.0; _EL_         } _EL_       } _EL_       for (int k=m; k <= n - 1; k++) { _EL_         boolean notlast=(k != n - 1); _EL_         if (k != m) { _EL_           p=H[k][k - 1]; _EL_           q=H[k + 1][k - 1]; _EL_           r=(notlast ? H[k + 2][k - 1] : 0.0); _EL_           x=Math.abs(p) + Math.abs(q) + Math.abs(r); _EL_           if (x != 0.0) { _EL_             p=p / x; _EL_             q=q / x; _EL_             r=r / x; _EL_           } _EL_         } _EL_         if (x == 0.0) { _EL_           break; _EL_         } _EL_         s=Math.sqrt(p * p + q * q + r * r); _EL_         if (p < 0) { _EL_           s=-s; _EL_         } _EL_         if (s != 0) { _EL_           if (k != m) { _EL_             H[k][k - 1]=-s * x; _EL_           } _EL_  else           if (l != m) { _EL_             H[k][k - 1]=-H[k][k - 1]; _EL_           } _EL_           p=p + s; _EL_           x=p / s; _EL_           y=q / s; _EL_           z=r / s; _EL_           q=q / p; _EL_           r=r / p; _EL_           for (int j=k; j < nn; j++) { _EL_             p=H[k][j] + q * H[k + 1][j]; _EL_             if (notlast) { _EL_               p=p + r * H[k + 2][j]; _EL_               H[k + 2][j]=H[k + 2][j] - p * z; _EL_             } _EL_             H[k][j]=H[k][j] - p * x; _EL_             H[k + 1][j]=H[k + 1][j] - p * y; _EL_           } _EL_           for (int i=0; i <= Math.min(n,k + 3); i++) { _EL_             p=x * H[i][k] + y * H[i][k + 1]; _EL_             if (notlast) { _EL_               p=p + z * H[i][k + 2]; _EL_               H[i][k + 2]=H[i][k + 2] - p * r; _EL_             } _EL_             H[i][k]=H[i][k] - p; _EL_             H[i][k + 1]=H[i][k + 1] - p * q; _EL_           } _EL_           for (int i=low; i <= high; i++) { _EL_             p=x * V[i][k] + y * V[i][k + 1]; _EL_             if (notlast) { _EL_               p=p + z * V[i][k + 2]; _EL_               V[i][k + 2]=V[i][k + 2] - p * r; _EL_             } _EL_             V[i][k]=V[i][k] - p; _EL_             V[i][k + 1]=V[i][k + 1] - p * q; _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_   if (norm == 0.0) { _EL_     return; _EL_   } _EL_   for (n=nn - 1; n >= 0; n--) { _EL_     p=d[n]; _EL_     q=e[n]; _EL_     if (q == 0) { _EL_       int l=n; _EL_       H[n][n]=1.0; _EL_       for (int i=n - 1; i >= 0; i--) { _EL_         w=H[i][i] - p; _EL_         r=0.0; _EL_         for (int j=l; j <= n; j++) { _EL_           r=r + H[i][j] * H[j][n]; _EL_         } _EL_         if (e[i] < 0.0) { _EL_           z=w; _EL_           s=r; _EL_         } _EL_  else { _EL_           l=i; _EL_           if (e[i] == 0.0) { _EL_             if (w != 0.0) { _EL_               H[i][n]=-r / w; _EL_             } _EL_  else { _EL_               H[i][n]=-r / (eps * norm); _EL_             } _EL_           } _EL_  else { _EL_             x=H[i][i + 1]; _EL_             y=H[i + 1][i]; _EL_             q=(d[i] - p) * (d[i] - p) + e[i] * e[i]; _EL_             t=(x * s - z * r) / q; _EL_             H[i][n]=t; _EL_             if (Math.abs(x) > Math.abs(z)) { _EL_               H[i + 1][n]=(-r - w * t) / x; _EL_             } _EL_  else { _EL_               H[i + 1][n]=(-s - y * t) / z; _EL_             } _EL_           } _EL_           t=Math.abs(H[i][n]); _EL_           if ((eps * t) * t > 1) { _EL_             for (int j=i; j <= n; j++) { _EL_               H[j][n]=H[j][n] / t; _EL_             } _EL_           } _EL_         } _EL_       } _EL_     } _EL_  else     if (q < 0) { _EL_       int l=n - 1; _EL_       if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) { _EL_         H[n - 1][n - 1]=q / H[n][n - 1]; _EL_         H[n - 1][n]=-(H[n][n] - p) / H[n][n - 1]; _EL_       } _EL_  else { _EL_         cdiv(0.0,-H[n - 1][n],H[n - 1][n - 1] - p,q); _EL_         H[n - 1][n - 1]=cdivr; _EL_         H[n - 1][n]=cdivi; _EL_       } _EL_       H[n][n - 1]=0.0; _EL_       H[n][n]=1.0; _EL_       for (int i=n - 2; i >= 0; i--) { _EL_         double ra, sa, vr, vi; _EL_         ra=0.0; _EL_         sa=0.0; _EL_         for (int j=l; j <= n; j++) { _EL_           ra=ra + H[i][j] * H[j][n - 1]; _EL_           sa=sa + H[i][j] * H[j][n]; _EL_         } _EL_         w=H[i][i] - p; _EL_         if (e[i] < 0.0) { _EL_           z=w; _EL_           r=ra; _EL_           s=sa; _EL_         } _EL_  else { _EL_           l=i; _EL_           if (e[i] == 0) { _EL_             cdiv(-ra,-sa,w,q); _EL_             H[i][n - 1]=cdivr; _EL_             H[i][n]=cdivi; _EL_           } _EL_  else { _EL_             x=H[i][i + 1]; _EL_             y=H[i + 1][i]; _EL_             vr=(d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q; _EL_             vi=(d[i] - p) * 2.0 * q; _EL_             if (vr == 0.0 & vi == 0.0) { _EL_               vr=eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x)+ Math.abs(y)+ Math.abs(z)); _EL_             } _EL_             cdiv(x * r - z * ra + q * sa,x * s - z * sa - q * ra,vr,vi); _EL_             H[i][n - 1]=cdivr; _EL_             H[i][n]=cdivi; _EL_             if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) { _EL_               H[i + 1][n - 1]=(-ra - w * H[i][n - 1] + q * H[i][n]) / x; _EL_               H[i + 1][n]=(-sa - w * H[i][n] - q * H[i][n - 1]) / x; _EL_             } _EL_  else { _EL_               cdiv(-r - y * H[i][n - 1],-s - y * H[i][n],z,q); _EL_               H[i + 1][n - 1]=cdivr; _EL_               H[i + 1][n]=cdivi; _EL_             } _EL_           } _EL_           t=Math.max(Math.abs(H[i][n - 1]),Math.abs(H[i][n])); _EL_           if ((eps * t) * t > 1) { _EL_             for (int j=i; j <= n; j++) { _EL_               H[j][n - 1]=H[j][n - 1] / t; _EL_               H[j][n]=H[j][n] / t; _EL_             } _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_   for (int i=0; i < nn; i++) { _EL_     if (i < low | i > high) { _EL_       for (int j=i; j < nn; j++) { _EL_         V[i][j]=H[i][j]; _EL_       } _EL_     } _EL_   } _EL_   for (int j=nn - 1; j >= low; j--) { _EL_     for (int i=low; i <= high; i++) { _EL_       z=0.0; _EL_       for (int k=low; k <= Math.min(j,high); k++) { _EL_         z=z + V[i][k] * H[k][j]; _EL_       } _EL_       V[i][j]=z; _EL_     } _EL_   } _EL_ } _EL_ ', 'private void serializable(final IsolationLevels level) throws Exception { _EL_   clear(store); _EL_   final ValueFactory vf=store.getValueFactory(); _EL_   final IRI subj=vf.createIRI("http://test#s"); _EL_   final IRI pred=vf.createIRI("http://test#p"); _EL_   RepositoryConnection prep=store.getConnection(); _EL_   try { _EL_     prep.begin(level); _EL_     prep.add(subj,pred,vf.createLiteral(1)); _EL_     prep.commit(); _EL_   } _EL_   finally { _EL_     prep.close(); _EL_   } _EL_   final CountDownLatch start=new CountDownLatch(2); _EL_   final CountDownLatch observed=new CountDownLatch(2); _EL_   Thread t1=incrementBy(start,observed,level,vf,subj,pred,3); _EL_   Thread t2=incrementBy(start,observed,level,vf,subj,pred,5); _EL_   t2.start(); _EL_   t1.start(); _EL_   t2.join(); _EL_   t1.join(); _EL_   assertNotFailed(); _EL_   RepositoryConnection check=store.getConnection(); _EL_   try { _EL_     check.begin(level); _EL_     Literal lit=readLiteral(check,subj,pred); _EL_     int val=lit.intValue(); _EL_     if (val != 4 && val != 6) { _EL_       assertEquals(9,val); _EL_     } _EL_     check.commit(); _EL_   } _EL_   finally { _EL_     check.close(); _EL_   } _EL_ } _EL_ ', 'public static Array listToArrayRemoveEmpty(String list,char delimiter){ _EL_   int len=list.length(); _EL_   ArrayImpl array=new ArrayImpl(); _EL_   if (len == 0)   return array; _EL_   int last=0; _EL_   for (int i=0; i < len; i++) { _EL_     if (list.charAt(i) == delimiter) { _EL_       if (last < i)       array._append(list.substring(last,i)); _EL_       last=i + 1; _EL_     } _EL_   } _EL_   if (last < len)   array._append(list.substring(last)); _EL_   return array; _EL_ } _EL_ ', 'public static <T extends Object & java.lang.Comparable<? super T>>T min(Collection<? extends T> collection){ _EL_   Iterator<? extends T> it=collection.iterator(); _EL_   T min=it.next(); _EL_   while (it.hasNext()) { _EL_     T next=it.next(); _EL_     if (min.compareTo(next) > 0) { _EL_       min=next; _EL_     } _EL_   } _EL_   return min; _EL_ } _EL_ ', '@Override public ServerHeartbeat server(String address,int port,boolean isSSL,String clusterId,String displayName,boolean isDynamic){ _EL_   Objects.requireNonNull(address); _EL_   Objects.requireNonNull(clusterId); _EL_   if (address.isEmpty()) { _EL_     address="127.0.0.1"; _EL_   } _EL_   ClusterHeartbeat cluster=createCluster(clusterId); _EL_   ServerHeartbeat server; _EL_   if (isDynamic) { _EL_     server=cluster.createDynamicServer(address,port,isSSL); _EL_   } _EL_  else { _EL_     server=cluster.createServer(address,port,isSSL); _EL_   } _EL_   if (displayName != null) { _EL_     server.setDisplayName(displayName); _EL_   } _EL_   if (!isDynamic) { _EL_     cluster.addSeedServer(server); _EL_   } _EL_   return server; _EL_ } _EL_ ', 'private void findClub(){ _EL_   if (ce() == null) { _EL_     return; _EL_   } _EL_   String title=Messages.getString("FiringDisplay.FindClubDialog.title"); _EL_   String body=Messages.getString("FiringDisplay.FindClubDialog.message"); _EL_   if (!clientgui.doYesNoDialog(title,body)) { _EL_     return; _EL_   } _EL_   attacks.removeAllElements(); _EL_   attacks.addElement(new FindClubAction(cen)); _EL_   ready(); _EL_ } _EL_ ', 'public PDFXref(byte[] line){ _EL_   if (line == null) { _EL_     id=-1; _EL_     generation=-1; _EL_   } _EL_  else { _EL_     id=Integer.parseInt(new String(line,0,10)); _EL_     generation=Integer.parseInt(new String(line,11,5)); _EL_   } _EL_   compressed=false; _EL_ } _EL_ ', 'public SmoothMoves(){ _EL_   cycleStart=System.nanoTime() / 1000000; _EL_   startTimer(currentResolution); _EL_ } _EL_ ', 'public static void updatePriceLists(Properties ctx,ProductBean productBean,String trxName) throws OperationException { _EL_   ArrayList<ProductBean> list=productBean.getProductBeanList(); _EL_   if (list != null) { _EL_     int productId=productBean.getProductId(); _EL_     Iterator<ProductBean> iter=list.iterator(); _EL_     while (iter.hasNext()) { _EL_       ProductBean bean=iter.next(); _EL_       int priceListId=bean.getPriceListId(); _EL_       BigDecimal stdPrice=bean.getStdPrice(); _EL_       BigDecimal listPrice=bean.getListPrice(); _EL_       BigDecimal limitPrice=bean.getLimitPrice(); _EL_       MPriceList priceList=MPriceList.get(ctx,priceListId,trxName); _EL_       if (priceList.isTaxIncluded()) { _EL_         stdPrice=bean.getStdPriceIncl(); _EL_         listPrice=bean.getListPriceIncl(); _EL_         limitPrice=bean.getLimitPriceIncl(); _EL_       } _EL_       updatePriceLists(ctx,productId,priceListId,stdPrice,listPrice,limitPrice,trxName); _EL_     } _EL_   } _EL_ } _EL_ ', 'private String checkDependencies(ModuleDescriptor md,HashMap<String,ModuleDescriptor> modlist){ _EL_   logger.debug("Checking dependencies of " + md.getId()); _EL_   ModuleInterface[] requires=md.getRequires(); _EL_   if (requires != null) { _EL_     for (    ModuleInterface req : requires) { _EL_       String res=checkOneDependency(md,req,modlist); _EL_       if (!res.isEmpty()) { _EL_         return res; _EL_       } _EL_     } _EL_   } _EL_   return ""; _EL_ } _EL_ ', 'public void deserializeFunnel(List<Object> serializedFunnel){ _EL_   Set<Object> funnelStepAccumulator=new HashSet<>(); _EL_   for (  Object e : serializedFunnel) { _EL_     if (e != null) { _EL_       funnelStepAccumulator.add(e); _EL_     } _EL_  else { _EL_       funnelSteps.add(new HashSet<>(funnelStepAccumulator)); _EL_       funnelStepAccumulator.clear(); _EL_     } _EL_   } _EL_ } _EL_ ', "public static String appendParameter(CtClass type,String descriptor){ _EL_   int i=descriptor.indexOf(')'); _EL_   if (i < 0)   return descriptor; _EL_  else { _EL_     StringBuffer newdesc=new StringBuffer(); _EL_     newdesc.append(descriptor.substring(0,i)); _EL_     toDescriptor(newdesc,type); _EL_     newdesc.append(descriptor.substring(i)); _EL_     return newdesc.toString(); _EL_   } _EL_ } _EL_ ", 'public void addCatchClause(CatchClause clause){ _EL_   assertNotNull(clause); _EL_   if (catchClauses == null) { _EL_     catchClauses=new ArrayList<CatchClause>(); _EL_   } _EL_   catchClauses.add(clause); _EL_   clause.setParent(this); _EL_ } _EL_ ', 'public void unlock(Object key){ _EL_   String uid=String.valueOf(key); _EL_   Transaction tr=lockedUIDHashMap.get(uid); _EL_   if (tr == null) { _EL_     return; _EL_   } _EL_   try { _EL_     tr.commit(); _EL_   } _EL_  catch (  Exception e) { _EL_     logger.warn("Failed to commit transaction and unlocking the object, ignoring",e); _EL_   } _EL_  finally { _EL_     lockedUIDHashMap.remove(uid); _EL_   } _EL_ } _EL_ ', 'public List<Order> fetchOrders(int startIndex,int num){ _EL_   int endIndex=startIndex + num > orders.size() ? orders.size() : startIndex + num; _EL_   return orders.subList(startIndex,endIndex); _EL_ } _EL_ ', 'public boolean ensureSchemaAgreement(){ _EL_   long start=System.currentTimeMillis(); _EL_   Map<String,List<String>> schemas=null; _EL_   while (System.currentTimeMillis() - start < DbClientContext.MAX_SCHEMA_WAIT_MS) { _EL_     try { _EL_       log.info("sleep for {} seconds before checking schema versions.",DbClientContext.SCHEMA_RETRY_SLEEP_MILLIS / 1000); _EL_       Thread.sleep(DbClientContext.SCHEMA_RETRY_SLEEP_MILLIS); _EL_     } _EL_  catch (    InterruptedException ex) { _EL_       log.warn("Interrupted during sleep"); _EL_     } _EL_     schemas=getSchemaVersions(); _EL_     if (schemas.size() > 2) { _EL_       continue; _EL_     } _EL_     if (schemas.size() == 1) { _EL_       if (!schemas.containsKey(StorageProxy.UNREACHABLE)) { _EL_         return false; _EL_       } _EL_  else { _EL_         continue; _EL_       } _EL_     } _EL_     if (schemas.containsKey(StorageProxy.UNREACHABLE)) { _EL_       return true; _EL_     } _EL_   } _EL_   log.error("Unable to converge schema versions {}",schemas); _EL_   throw new IllegalStateException("Unable to converge schema versions"); _EL_ } _EL_ ', 'private TileStore(final SpriteStore store){ _EL_   this.store=store; _EL_   tiles=new ArrayList<Sprite>(); _EL_   tiles.add(store.getEmptySprite()); _EL_ } _EL_ ', 'public static String comparableQualifier(String qualifier){ _EL_   int i=_QUALIFIERS.indexOf(qualifier); _EL_   return i == -1 ? _QUALIFIERS.size() + "-" + qualifier : String.valueOf(i); _EL_ } _EL_ ', 'public boolean moreWorkThan(StoredBlock other){ _EL_   return chainWork.compareTo(other.chainWork) > 0; _EL_ } _EL_ ', 'public static Object evaluate(Object context,Object self,String expr,List<String> engineConfigs) throws CWLExpressionException { _EL_   String trimmedExpr=StringUtils.trim(expr); _EL_   if (trimmedExpr.startsWith("$")) { _EL_     trimmedExpr=trimmedExpr.substring(1); _EL_   } _EL_   String function=trimmedExpr; _EL_   if (trimmedExpr.startsWith("{")) { _EL_     function="(function()%expr)()"; _EL_     function=function.replace("%expr",trimmedExpr); _EL_   } _EL_   Context cx=Context.enter(); _EL_   cx.setOptimizationLevel(OPTIMIZATION_LEVEL); _EL_   cx.setMaximumInterpreterStackDepth(MAX_STACK_DEPTH); _EL_   cx.setClassShutter(new CWLExpressionDenyAllClassShutter()); _EL_   try { _EL_     Scriptable globalScope=cx.initStandardObjects(); _EL_     if (engineConfigs != null) { _EL_       for (int i=0; i < engineConfigs.size(); i++) { _EL_         Reader engineConfigReader=new StringReader(engineConfigs.get(i)); _EL_         cx.evaluateReader(globalScope,engineConfigReader,"engineConfig_" + i + ".js",1,null); _EL_       } _EL_     } _EL_     putToScope(EXPR_CONTEXT_NAME,context,cx,globalScope); _EL_     putToScope(EXPR_SELF_NAME,self,cx,globalScope); _EL_     Scriptable resultScope=cx.newObject(globalScope); _EL_     resultScope.setPrototype(globalScope); _EL_     resultScope.setParentScope(globalScope); _EL_     Object result=cx.evaluateString(resultScope,function,"script",1,null); _EL_     if (result == null || result instanceof Undefined) { _EL_       return null; _EL_     } _EL_     Object wrappedResult=Context.javaToJS(result,globalScope); _EL_     putToScope("$result",wrappedResult,cx,globalScope); _EL_     ScriptableObject.putProperty(globalScope,"$result",wrappedResult); _EL_     String finalFunction="(function() { " + "           var result = $result;" + "           var type = result instanceof Array? \\"array\\" : typeof result;"+ "           return JSON.stringify({ \\"result\\" : result, \\"type\\" : type }); "+ "     })()"; _EL_     Scriptable wrapScope=cx.newObject(globalScope); _EL_     wrapScope.setPrototype(globalScope); _EL_     wrapScope.setParentScope(globalScope); _EL_     result=cx.evaluateString(wrapScope,finalFunction,"script",1,null); _EL_     return castResult(result); _EL_   } _EL_  catch (  Exception e) { _EL_     String msg=String.format("Failed evaluating expression %s.",expr); _EL_     throw new CWLExpressionException(msg,e); _EL_   } _EL_  finally { _EL_     Context.exit(); _EL_   } _EL_ } _EL_ ', 'public static boolean isJarURL(URL url){ _EL_   String protocol=url.getProtocol(); _EL_   return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) || URL_PROTOCOL_VFSZIP.equals(protocol)|| URL_PROTOCOL_WSJAR.equals(protocol)); _EL_ } _EL_ ', 'protected void applySetTimestamp(Long timestamp) throws SQLException { _EL_   if (timestamp != null && conn.supportsControlTimestamp()) { _EL_     if (timestamp.longValue() != currentTimestamp) { _EL_       currentTimestamp=timestamp.longValue(); _EL_       statement.addBatch(conn.getControlTimestampQuery(timestamp)); _EL_     } _EL_   } _EL_ } _EL_ ', 'public Accessor(String className,ClassLoader classLoader,Class[] constructorTypes,Object[] constructorArgs){ _EL_   try { _EL_     fClass=Class.forName(className,true,classLoader); _EL_   } _EL_  catch (  ClassNotFoundException e) { _EL_     fail(); _EL_   } _EL_ catch (  ExceptionInInitializerError e) { _EL_     fail(); _EL_   } _EL_   Constructor constructor=null; _EL_   try { _EL_     constructor=fClass.getDeclaredConstructor(constructorTypes); _EL_   } _EL_  catch (  SecurityException e2) { _EL_     fail(); _EL_   } _EL_ catch (  NoSuchMethodException e2) { _EL_     fail(); _EL_   } _EL_   Assert.isNotNull(constructor); _EL_   constructor.setAccessible(true); _EL_   try { _EL_     fInstance=constructor.newInstance(constructorArgs); _EL_   } _EL_  catch (  IllegalArgumentException e) { _EL_     fail(); _EL_   } _EL_ catch (  InvocationTargetException e) { _EL_     fail(); _EL_   } _EL_ catch (  InstantiationException e) { _EL_     fail(); _EL_   } _EL_ catch (  IllegalAccessException e) { _EL_     fail(); _EL_   } _EL_ } _EL_ ', 'public static List<LoggedMqttMessage> parseMessageLog(final List<String> messages,final ProgressUpdater progress,final long current,final long max) throws SpyException { _EL_   try { _EL_     final long startTime=TimeUtils.getMonotonicTime(); _EL_     final int items=messages.size(); _EL_     final long chunkSize=items / 10; _EL_     final MqttMessageLogParser parser=new MqttMessageLogParser(); _EL_     final List<LoggedMqttMessage> list=new ArrayList<LoggedMqttMessage>(); _EL_     long item=0; _EL_     long reportAt=1; _EL_     for (int i=0; i < items; i++) { _EL_       final String message=messages.get(i); _EL_       if (progress != null) { _EL_         if (progress.isCancelled()) { _EL_           logger.info("Task cancelled!"); _EL_           return null; _EL_         } _EL_         item++; _EL_         if (item % 1000 == 0) { _EL_           progress.update(current + item,max); _EL_         } _EL_       } _EL_       if ((i > 0) && (i == (chunkSize * reportAt))) { _EL_         final long currentTime=TimeUtils.getMonotonicTime(); _EL_         final long timeTaken=currentTime - startTime; _EL_         final long totalTimeExpected=timeTaken * items / i; _EL_         if (timeTaken > 1000) { _EL_           logger.info("Processed {}%, estimated time left = {}s",reportAt * 10,(totalTimeExpected - timeTaken) / 1000); _EL_         } _EL_         reportAt++; _EL_       } _EL_       try { _EL_         list.add(parser.parse(message)); _EL_       } _EL_  catch (      XMLException e) { _EL_         logger.error("Can\'t process message " + message,e); _EL_       } _EL_     } _EL_     logger.info("Message audit log - parsed {} XML messages",list.size()); _EL_     return list; _EL_   } _EL_  catch (  XMLException e) { _EL_     throw new SpyException("Can\'t parse the message audit log file",e); _EL_   } _EL_ } _EL_ ', 'public void addRow(Object[] row) throws CarbonSortKeyAndGroupByException { _EL_   int currentSize=entryCount; _EL_   if (sortBufferSize == currentSize) { _EL_     LOGGER.debug("************ Writing to temp file ********** "); _EL_     File[] fileList; _EL_     if (procFiles.size() >= numberOfIntermediateFileToBeMerged) { _EL_ synchronized (lockObject) { _EL_         fileList=procFiles.toArray(new File[procFiles.size()]); _EL_         this.procFiles=new ArrayList<File>(1); _EL_       } _EL_       LOGGER.debug("Sumitting request for intermediate merging no of files: " + fileList.length); _EL_       startIntermediateMerging(fileList); _EL_     } _EL_     Object[][] recordHolderListLocal=recordHolderList; _EL_     try { _EL_       semaphore.acquire(); _EL_       dataSorterAndWriterExecutorService.submit(new DataSorterAndWriter(recordHolderListLocal)); _EL_     } _EL_  catch (    InterruptedException e) { _EL_       LOGGER.error("exception occurred while trying to acquire a semaphore lock: " + e.getMessage()); _EL_       throw new CarbonSortKeyAndGroupByException(e.getMessage()); _EL_     } _EL_     this.recordHolderList=new Object[this.sortBufferSize][]; _EL_     this.entryCount=0; _EL_   } _EL_   recordHolderList[entryCount++]=row; _EL_ } _EL_ ', 'public static byte[] decode(String data){ _EL_   int len=data.length() / 4 * 3; _EL_   ByteArrayOutputStream bOut=new ByteArrayOutputStream(len); _EL_   try { _EL_     encoder.decode(data,bOut); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new DecoderException("unable to decode base64 string: " + e.getMessage(),e); _EL_   } _EL_   return bOut.toByteArray(); _EL_ } _EL_ ', '@Uninterruptible public static Address unwindNativeStackFrame(Address currfp){ _EL_   if (VM.BuildForIA32) { _EL_     return currfp; _EL_   } _EL_   Address callee_fp; _EL_   Address fp=Magic.getCallerFramePointer(currfp); _EL_   Address ip; _EL_   do { _EL_     callee_fp=fp; _EL_     ip=Magic.getReturnAddressUnchecked(fp); _EL_     fp=Magic.getCallerFramePointer(fp); _EL_   } _EL_  while (!MemoryManager.addressInVM(ip) && fp.NE(StackFrameLayout.getStackFrameSentinelFP())); _EL_   if (VM.BuildForPowerPC) { _EL_     return fp; _EL_   } _EL_  else { _EL_     return callee_fp; _EL_   } _EL_ } _EL_ ', 'public static boolean isMimeTypeImage(String mimeType){ _EL_   return mimeType != null && mimeType.startsWith("image/"); _EL_ } _EL_ ', 'public FXMessageDialog(final Stage parent,final Parent group){ _EL_   this(parent); _EL_   content.setCenter(group); _EL_ } _EL_ ', '@Override protected int sizeOf(String key,BitmapDrawable value){ _EL_   final int bitmapSize=getBitmapSize(value) / 1024; _EL_   return bitmapSize == 0 ? 1 : bitmapSize; _EL_ } _EL_ ', 'public Matrix abs(){ _EL_   Matrix result=new Matrix(m,n); _EL_   for (int i=0; i < result.A.length; i++) { _EL_     for (int j=0; j < result.A[i].length; j++)     result.A[i][j]=Math.abs(A[i][j]); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private static DebuggerException parseExceptionOption(Node node){ _EL_   return new DebuggerException(parseStringOption(node,"exceptionName"),parseLongOption(node,"exceptionCode"),DebuggerExceptionHandlingAction.convertToHandlingAction(parseIntOption(node,"handlingAction"))); _EL_ } _EL_ ', 'public static void updateFinantare(SetGetModel m,String changedColumnName){ _EL_   BigDecimal valCofinantare=SetGetUtil.get_AttrValueAsBigDecimal(m,COLUMNNAME_A_Valoare_Cofinantare); _EL_   BigDecimal assetCost=SetGetUtil.get_AttrValueAsBigDecimal(m,COLUMNNAME_A_Asset_Cost); _EL_   BigDecimal valTert=SetGetUtil.get_AttrValueAsBigDecimal(m,COLUMNNAME_A_Valoare_Tert); _EL_   if (valCofinantare.signum() == 0 && valTert.signum() == 0) { _EL_     valCofinantare=assetCost; _EL_     valTert=Env.ZERO; _EL_   } _EL_  else   if (COLUMNNAME_A_Asset_Cost.equals(changedColumnName)) { _EL_     valCofinantare=assetCost.subtract(valTert); _EL_   } _EL_  else   if (COLUMNNAME_A_Valoare_Cofinantare.equals(changedColumnName)) { _EL_     valTert=assetCost.subtract(valCofinantare); _EL_   } _EL_  else   if (COLUMNNAME_A_Valoare_Tert.equals(changedColumnName)) { _EL_     valCofinantare=assetCost.subtract(valTert); _EL_   } _EL_  else { _EL_     valTert=assetCost.subtract(valCofinantare); _EL_   } _EL_   String tipFinantare=A_TIP_FINANTARE_Cofinantare; _EL_   if (valTert.signum() == 0) { _EL_     tipFinantare=A_TIP_FINANTARE_Proprie; _EL_   } _EL_  else   if (valCofinantare.signum() == 0) { _EL_     tipFinantare=A_TIP_FINANTARE_Terti; _EL_   } _EL_   m.set_AttrValue(COLUMNNAME_A_Tip_Finantare,tipFinantare); _EL_   m.set_AttrValue(COLUMNNAME_A_Valoare_Cofinantare,valCofinantare); _EL_   m.set_AttrValue(COLUMNNAME_A_Valoare_Tert,valTert); _EL_   if (A_TIP_FINANTARE_Proprie.equals(tipFinantare) && SetGetUtil.isPersistent(m)) { _EL_     m.set_AttrValue(COLUMNNAME_A_FundingMode_ID,null); _EL_   } _EL_ } _EL_ ', 'private void displayCalendar(){ _EL_   ListItem listItem=fieldResource.getSelectedItem(); _EL_   if (listItem == null)   return; _EL_   KeyNamePair pp=new KeyNamePair((Integer)listItem.getValue(),listItem.getLabel()); _EL_   int S_Resource_ID=pp.getKey(); _EL_   m_mAssignment.setS_Resource_ID(S_Resource_ID); _EL_   Date date=fieldDate.getValue(); _EL_   if (date == null)   date=new Timestamp(System.currentTimeMillis()); _EL_   m_loading=true; _EL_   schedulePane.recreate(S_Resource_ID,date); _EL_   m_loading=false; _EL_   invalidate(); _EL_ } _EL_ ', 'public LineString createLineString(CoordinateSequence coordinates){ _EL_   return new LineString(coordinates,this); _EL_ } _EL_ ', 'public static final float[] trim(float[] a,int size){ _EL_   if (a.length == size) { _EL_     return a; _EL_   } _EL_  else { _EL_     float[] b=new float[size]; _EL_     System.arraycopy(a,0,b,0,size); _EL_     return b; _EL_   } _EL_ } _EL_ ', 'public void close(){ _EL_   if (closed.compareAndSet(false,true)) { _EL_     doClose(); _EL_   } _EL_ } _EL_ ', '@Override public boolean connectionAllowed(String eventName){ _EL_   if (!eventName.equals("instance")) { _EL_     return false; _EL_   } _EL_   if (m_listenee != null) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'void subtractFlakes(int quantity){ _EL_   for (int i=0; i < quantity; ++i) { _EL_     int index=numFlakes - i - 1; _EL_     flakes.remove(index); _EL_   } _EL_   setNumFlakes(numFlakes - quantity); _EL_ } _EL_ ', 'public boolean requiredResourceName(Policy policy,String realmName,String name){ _EL_   getSvcTypeNameToActionsMap(policy,realmName); _EL_   return requiredResourceNameService.contains(name); _EL_ } _EL_ ', 'public static void main(String args[]){ _EL_   boolean ok=parseOptions(args); _EL_   if (!ok || !stripFiles(infiles,outfiles)) { _EL_     System.exit(1); _EL_   } _EL_ } _EL_ ', 'public AuthorityKeyIdentifierStructure(X509Certificate certificate) throws CertificateParsingException { _EL_   super(fromCertificate(certificate)); _EL_ } _EL_ ', 'JarFile open(final File jarFile) throws IOException { _EL_   isTrue(jarFile.exists(),"The JAR file must exists."); _EL_   return new JarFile(jarFile); _EL_ } _EL_ ', 'public void removeAllEmails(){ _EL_   emails.clear(); _EL_ } _EL_ ', 'protected void drawPath(Canvas canvas,List<Float> points,Paint paint,boolean circular){ _EL_   Path path=new Path(); _EL_   int height=canvas.getHeight(); _EL_   int width=canvas.getWidth(); _EL_   float[] tempDrawPoints; _EL_   if (points.size() < 4) { _EL_     return; _EL_   } _EL_   tempDrawPoints=calculateDrawPoints(points.get(0),points.get(1),points.get(2),points.get(3),height,width); _EL_   path.moveTo(tempDrawPoints[0],tempDrawPoints[1]); _EL_   path.lineTo(tempDrawPoints[2],tempDrawPoints[3]); _EL_   int length=points.size(); _EL_   for (int i=4; i < length; i+=2) { _EL_     if ((points.get(i - 1) < 0 && points.get(i + 1) < 0) || (points.get(i - 1) > height && points.get(i + 1) > height)) { _EL_       continue; _EL_     } _EL_     tempDrawPoints=calculateDrawPoints(points.get(i - 2),points.get(i - 1),points.get(i),points.get(i + 1),height,width); _EL_     if (!circular) { _EL_       path.moveTo(tempDrawPoints[0],tempDrawPoints[1]); _EL_     } _EL_     path.lineTo(tempDrawPoints[2],tempDrawPoints[3]); _EL_   } _EL_   if (circular) { _EL_     path.lineTo(points.get(0),points.get(1)); _EL_   } _EL_   canvas.drawPath(path,paint); _EL_ } _EL_ ', 'public PWResetAdminLog(SSOToken token){ _EL_   this.token=token; _EL_   if (logStatus) { _EL_     logger=(com.sun.identity.log.Logger)Logger.getLogger(logFile); _EL_   } _EL_   String lstr=SystemProperties.get(Constants.AM_LOCALE); _EL_   init(lstr); _EL_ } _EL_ ', 'public static boolean isLetter(Character self){ _EL_   return Character.isLetter(self); _EL_ } _EL_ ', 'public void callArgVisitors(XPathVisitor visitor){ _EL_   for (int i=0; i < m_argVec.size(); i++) { _EL_     Expression exp=(Expression)m_argVec.elementAt(i); _EL_     exp.callVisitors(new ArgExtOwner(exp),visitor); _EL_   } _EL_ } _EL_ ', 'public static boolean isExpression(String token,boolean isXml){ _EL_   String openExpr; _EL_   String closeExpr; _EL_   if (isXml) { _EL_     openExpr=OPEN_EXPR_XML; _EL_     closeExpr=CLOSE_EXPR_XML; _EL_   } _EL_  else { _EL_     openExpr=OPEN_EXPR; _EL_     closeExpr=CLOSE_EXPR; _EL_   } _EL_   if (token.startsWith(openExpr) && token.endsWith(closeExpr)) { _EL_     return true; _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public static Uri fromFile(File file){ _EL_   if (file == null) { _EL_     throw new NullPointerException("file"); _EL_   } _EL_   PathPart path=PathPart.fromDecoded(file.getAbsolutePath()); _EL_   return new HierarchicalUri("file",Part.EMPTY,path,Part.NULL,Part.NULL); _EL_ } _EL_ ', 'protected Object readFixedType(BinaryReaderExImpl reader) throws BinaryObjectException { _EL_   Object val=null; _EL_ switch (mode) { _EL_ case BYTE: _EL_     val=reader.readByteNullable(id); _EL_   break; _EL_ case SHORT: _EL_ val=reader.readShortNullable(id); _EL_ break; _EL_ case INT: _EL_ val=reader.readIntNullable(id); _EL_ break; _EL_ case LONG: _EL_ val=reader.readLongNullable(id); _EL_ break; _EL_ case FLOAT: _EL_ val=reader.readFloatNullable(id); _EL_ break; _EL_ case DOUBLE: _EL_ val=reader.readDoubleNullable(id); _EL_ break; _EL_ case CHAR: _EL_ val=reader.readCharNullable(id); _EL_ break; _EL_ case BOOLEAN: _EL_ val=reader.readBooleanNullable(id); _EL_ break; _EL_ case DECIMAL: _EL_ val=reader.readDecimal(id); _EL_ break; _EL_ case STRING: _EL_ val=reader.readString(id); _EL_ break; _EL_ case UUID: _EL_ val=reader.readUuid(id); _EL_ break; _EL_ case DATE: _EL_ val=reader.readDate(id); _EL_ break; _EL_ case TIMESTAMP: _EL_ val=reader.readTimestamp(id); _EL_ break; _EL_ case BYTE_ARR: _EL_ val=reader.readByteArray(id); _EL_ break; _EL_ case SHORT_ARR: _EL_ val=reader.readShortArray(id); _EL_ break; _EL_ case INT_ARR: _EL_ val=reader.readIntArray(id); _EL_ break; _EL_ case LONG_ARR: _EL_ val=reader.readLongArray(id); _EL_ break; _EL_ case FLOAT_ARR: _EL_ val=reader.readFloatArray(id); _EL_ break; _EL_ case DOUBLE_ARR: _EL_ val=reader.readDoubleArray(id); _EL_ break; _EL_ case CHAR_ARR: _EL_ val=reader.readCharArray(id); _EL_ break; _EL_ case BOOLEAN_ARR: _EL_ val=reader.readBooleanArray(id); _EL_ break; _EL_ case DECIMAL_ARR: _EL_ val=reader.readDecimalArray(id); _EL_ break; _EL_ case STRING_ARR: _EL_ val=reader.readStringArray(id); _EL_ break; _EL_ case UUID_ARR: _EL_ val=reader.readUuidArray(id); _EL_ break; _EL_ case DATE_ARR: _EL_ val=reader.readDateArray(id); _EL_ break; _EL_ case TIMESTAMP_ARR: _EL_ val=reader.readTimestampArray(id); _EL_ break; _EL_ case OBJECT_ARR: _EL_ val=reader.readObjectArray(id); _EL_ break; _EL_ case COL: _EL_ val=reader.readCollection(id,null); _EL_ break; _EL_ case MAP: _EL_ val=reader.readMap(id,null); _EL_ break; _EL_ case BINARY_OBJ: _EL_ val=reader.readBinaryObject(id); _EL_ break; _EL_ case ENUM: _EL_ val=reader.readEnum(id,field.getType()); _EL_ break; _EL_ case ENUM_ARR: _EL_ val=reader.readEnumArray(id,field.getType().getComponentType()); _EL_ break; _EL_ case BINARY: _EL_ case OBJECT: _EL_ val=reader.readObject(id); _EL_ break; _EL_ case CLASS: _EL_ val=reader.readClass(id); _EL_ break; _EL_ default : _EL_ assert false : "Invalid mode: " + mode; _EL_ } _EL_ return val; _EL_ } _EL_ ', 'protected void processPlayRequest(){ _EL_   tryToGetAudioFocus(); _EL_   if (mState == State.STOPPED) { _EL_     playMedia(); _EL_   } _EL_  else   if (mState == State.PAUSED) { _EL_     mState=State.PLAYING; _EL_     setUpAsForeground(String.format(getString(R.string.media_state_playing),mFile.getFileName())); _EL_     configAndStartMediaPlayer(); _EL_   } _EL_ } _EL_ ', 'public void finish(){ _EL_   m_bias=0; _EL_   m_out.flush(); _EL_ } _EL_ ', '@Override public Vector whatCanGoHere(int[] state){ _EL_   Vector ret=new Vector(); _EL_   for (int i=0; i < fNumElements; i++) { _EL_     if (state[i + 1] == STATE_START)     ret.addElement(fAllElements[i]); _EL_   } _EL_   return ret; _EL_ } _EL_ ', 'public void remove(RegionEntry entry,Object value){ _EL_   Object object=map.get(entry); _EL_   if (object == null)   return; _EL_   if (object instanceof Collection) { _EL_     Collection coll=(Collection)object; _EL_     boolean removed=false; _EL_     if (useList) { _EL_ synchronized (coll) { _EL_         removed=coll.remove(value); _EL_       } _EL_     } _EL_  else { _EL_       removed=coll.remove(value); _EL_     } _EL_     if (removed) { _EL_       if (coll.size() == 0) { _EL_         map.remove(entry); _EL_       } _EL_       atomicUpdater.decrementAndGet(this); _EL_     } _EL_   } _EL_  else { _EL_     if (object.equals(value)) { _EL_       map.remove(entry); _EL_     } _EL_     atomicUpdater.decrementAndGet(this); _EL_   } _EL_ } _EL_ ', 'private HashDataCache(DataCache<Pair<String,T>> cache,String algorithm){ _EL_   this.cache=cache; _EL_   this.algorithm=algorithm; _EL_   try { _EL_     MessageDigest.getInstance(algorithm); _EL_   } _EL_  catch (  NoSuchAlgorithmException e) { _EL_     String msg="Unable to get hash generator with algorithm: " + algorithm; _EL_     LOG.warn(msg,e); _EL_     throw new SystemConfigException(e); _EL_   } _EL_ } _EL_ ', 'private void marshallEnum(Object value,EnumType enumType) throws IOException { _EL_   LOG.debug("Enum value: {} of type: {}",value,enumType); _EL_   jsonGenerator.writeString(value.toString()); _EL_ } _EL_ ', 'private void initEvents(){ _EL_   setSelectionSounds(play,hScore,credits,quit,quitY,quitN); _EL_   play.setOnAction(null); _EL_   hScore.setOnAction(null); _EL_   credits.setOnAction(null); _EL_   quit.setOnAction(null); _EL_   quitY.setOnAction(null); _EL_   quitN.setOnAction(null); _EL_   scene.setOnKeyPressed(null); _EL_   scene.setOnKeyReleased(null); _EL_ } _EL_ ', 'public static boolean isFileTypeSupported(int fileType,Sequence sequence){ _EL_   List providers=getMidiFileWriters(); _EL_   for (int i=0; i < providers.size(); i++) { _EL_     MidiFileWriter writer=(MidiFileWriter)providers.get(i); _EL_     if (writer.isFileTypeSupported(fileType,sequence)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public byte[] windowNaf(byte width,BigInteger k){ _EL_   byte[] wnaf=new byte[k.bitLength() + 1]; _EL_   short pow2wB=(short)(1 << width); _EL_   BigInteger pow2wBI=BigInteger.valueOf(pow2wB); _EL_   int i=0; _EL_   int length=0; _EL_   while (k.signum() > 0) { _EL_     if (k.testBit(0)) { _EL_       BigInteger remainder=k.mod(pow2wBI); _EL_       if (remainder.testBit(width - 1)) { _EL_         wnaf[i]=(byte)(remainder.intValue() - pow2wB); _EL_       } _EL_  else { _EL_         wnaf[i]=(byte)remainder.intValue(); _EL_       } _EL_       k=k.subtract(BigInteger.valueOf(wnaf[i])); _EL_       length=i; _EL_     } _EL_  else { _EL_       wnaf[i]=0; _EL_     } _EL_     k=k.shiftRight(1); _EL_     i++; _EL_   } _EL_   length++; _EL_   byte[] wnafShort=new byte[length]; _EL_   System.arraycopy(wnaf,0,wnafShort,0,length); _EL_   return wnafShort; _EL_ } _EL_ ', 'private String mapCollectionName(String collectionName,boolean dest){ _EL_   if ((collectionRules.size() == 0) && (StringUtils.isBlank(defaultCollectionAppend))) { _EL_     return collectionName; _EL_   } _EL_   for (  String[] rule : collectionRules) { _EL_     String match=(dest) ? rule[0] : rule[1]; _EL_     String replace=(dest) ? rule[1] : rule[0]; _EL_     if (collectionName.contains(match)) { _EL_       return collectionName.replace(match,replace); _EL_     } _EL_   } _EL_   if (dest) { _EL_     return collectionName + defaultCollectionAppend; _EL_   } _EL_  else { _EL_     return collectionName.replace(defaultCollectionAppend,""); _EL_   } _EL_ } _EL_ ', 'static public void fillRandomIntegerUniform(IDoubleVector vec,Random rand,int min,int max){ _EL_   final int delta=max - min; _EL_   for (int i=0; i < vec.getLength(); ++i) { _EL_     vec.set(i,min + rand.nextInt(delta)); _EL_   } _EL_ } _EL_ ', '@Override public int hashCode(){ _EL_   return Arrays.hashCode(data); _EL_ } _EL_ ', 'private static void stoppingAnimation(Thread me){ _EL_   final FetcherInfo info=FetcherInfo.getFetcherInfo(); _EL_ synchronized (info.waitList) { _EL_     int index=-1; _EL_     for (int i=0; i < info.fetchers.length; i++) { _EL_       if (info.fetchers[i] == me) { _EL_         return; _EL_       } _EL_       if (info.fetchers[i] == null) { _EL_         index=i; _EL_       } _EL_     } _EL_     if (index >= 0) { _EL_       info.fetchers[index]=me; _EL_       info.numFetchers++; _EL_       me.setName("Image Fetcher " + index); _EL_       return; _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean name_is_equal(String p_name){ _EL_   if (p_name == null)   return false; _EL_   return p_name.equalsIgnoreCase(pkg_name); _EL_ } _EL_ ', 'protected void drawRangeMarkers(Graphics2D g2,Rectangle2D dataArea,int index,Layer layer){ _EL_   XYItemRenderer r=getRenderer(index); _EL_   if (r == null) { _EL_     return; _EL_   } _EL_   if (index >= getDatasetCount()) { _EL_     return; _EL_   } _EL_   Collection markers=getRangeMarkers(index,layer); _EL_   ValueAxis axis=getRangeAxisForDataset(index); _EL_   if (markers != null && axis != null) { _EL_     Iterator iterator=markers.iterator(); _EL_     while (iterator.hasNext()) { _EL_       Marker marker=(Marker)iterator.next(); _EL_       r.drawRangeMarker(g2,this,axis,marker,dataArea); _EL_     } _EL_   } _EL_ } _EL_ ', 'static byte[] decryptData(byte[] password,byte[] encryptedData){ _EL_   try { _EL_     Cipher c=Cipher.getInstance(ENCRYPT_DATA_ALGORITHM); _EL_     c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(password,SECRET_KEY_ALGORITHM),CBC_SALT_DATA); _EL_     return c.doFinal(encryptedData); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new IllegalStateException(ENCRYPT_DATA_ALGORITHM + " is not available",e); _EL_   } _EL_ } _EL_ ', 'public VPFLayer(){ _EL_   setProjectionChangePolicy(new com.bbn.openmap.layer.policy.ListResetPCPolicy(this)); _EL_   setMouseModeIDsForEvents(new String[]{"Gestures"}); _EL_ } _EL_ ', 'protected boolean shouldClose(PooledConnection con,int action){ _EL_   if (con.getConnectionVersion() < getPoolVersion())   return true; _EL_   if (con.isDiscarded())   return true; _EL_   if (isClosed())   return true; _EL_   if (!con.validate(action))   return true; _EL_   if (!terminateTransaction(con))   return true; _EL_   if (con.isMaxAgeExpired())   return true; _EL_  else   return false; _EL_ } _EL_ ', 'public Vector3D hsl(){ _EL_   float r=redf(); _EL_   float g=greenf(); _EL_   float b=bluef(); _EL_   float min=Math.min(Math.min(r,g),b); _EL_   float max=Math.max(Math.max(r,g),b); _EL_   float l=lighting(min,max); _EL_   float s=saturation(min,max,l); _EL_   float h=hue(r,g,b,min,max); _EL_   return new Vector3D(h,s,l); _EL_ } _EL_ ', 'public Future<Boolean> shutdownAwaiting(long timeoutForEach){ _EL_   ExecutorService executor=Executors.newScheduledThreadPool(0); _EL_   return executor.submit(createShutdown(timeoutForEach)); _EL_ } _EL_ ', 'public boolean isUnused(){ _EL_   return (numEntries < 1) && waitingThreads.isEmpty(); _EL_ } _EL_ ', 'public void changeDirectory(String path) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException { _EL_ synchronized (lock) { _EL_     if (!connected) { _EL_       throw new IllegalStateException("Client not connected"); _EL_     } _EL_     if (!authenticated) { _EL_       throw new IllegalStateException("Client not authenticated"); _EL_     } _EL_     communication.sendFTPCommand("CWD " + path); _EL_     FTPReply r=communication.readFTPReply(); _EL_     touchAutoNoopTimer(); _EL_     if (!r.isSuccessCode()) { _EL_       throw new FTPException(r); _EL_     } _EL_   } _EL_ } _EL_ ', 'private String removeQuote(String column){ _EL_   return column != null ? column.replaceAll(statementBuilder.getColumnQuote(),StringUtils.EMPTY) : null; _EL_ } _EL_ ', 'private boolean scrolledUpTimeout(){ _EL_   if (fixedChat || pauseKeyPressed) { _EL_     return false; _EL_   } _EL_   if (!styles.autoScroll()) { _EL_     return false; _EL_   } _EL_   long timePassed=System.currentTimeMillis() - lastChanged; _EL_   if (timePassed > 1000 * styles.autoScrollTimeout()) { _EL_     LOGGER.info("ScrolledUp Timeout (" + timePassed + ")"); _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private boolean zzRefill() throws java.io.IOException { _EL_   if (zzStartRead > 0) { _EL_     System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead); _EL_     zzEndRead-=zzStartRead; _EL_     zzCurrentPos-=zzStartRead; _EL_     zzMarkedPos-=zzStartRead; _EL_     zzStartRead=0; _EL_   } _EL_   if (zzCurrentPos >= zzBuffer.length) { _EL_     char newBuffer[]=new char[zzCurrentPos * 2]; _EL_     System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length); _EL_     zzBuffer=newBuffer; _EL_   } _EL_   int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead); _EL_   if (numRead > 0) { _EL_     zzEndRead+=numRead; _EL_     return false; _EL_   } _EL_   if (numRead == 0) { _EL_     int c=zzReader.read(); _EL_     if (c == -1) { _EL_       return true; _EL_     } _EL_  else { _EL_       zzBuffer[zzEndRead++]=(char)c; _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public List<Document> search(Query query,boolean prefixWildCard){ _EL_   List<Document> documents=new ArrayList<Document>(); _EL_   try { _EL_     IndexSearcher searcher=getSearcher(); _EL_     TopDocs search=searcher.search(query,10000); _EL_     for (    ScoreDoc scoreDoc : search.scoreDocs) { _EL_       Document doc=searcher.doc(scoreDoc.doc); _EL_       documents.add(doc); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_     throw new RuntimeException(e); _EL_   } _EL_   return documents; _EL_ } _EL_ ', "public void writeListEnd() throws IOException { _EL_   os.write('z'); _EL_ } _EL_ ", 'public static List<? extends Element> childElementList(Element element,Set<String> childElementNames){ _EL_   if (element == null)   return null; _EL_   List<Element> elements=new LinkedList<Element>(); _EL_   if (childElementNames == null)   return elements; _EL_   Node node=element.getFirstChild(); _EL_   if (node != null) { _EL_     do { _EL_       if (node.getNodeType() == Node.ELEMENT_NODE && childElementNames.contains(node.getNodeName())) { _EL_         Element childElement=(Element)node; _EL_         elements.add(childElement); _EL_       } _EL_     } _EL_  while ((node=node.getNextSibling()) != null); _EL_   } _EL_   return elements; _EL_ } _EL_ ', 'protected synchronized byte[] engineGenerateSeed(int numBytes){ _EL_   byte[] myBytes; _EL_   if (numBytes < 0) { _EL_     throw new NegativeArraySizeException(Integer.toString(numBytes)); _EL_   } _EL_   if (numBytes == 0) { _EL_     return EmptyArray.BYTE; _EL_   } _EL_   if (myRandom == null) { _EL_     myRandom=new SHA1PRNG_SecureRandomImpl(); _EL_     myRandom.engineSetSeed(getRandomBytes(DIGEST_LENGTH)); _EL_   } _EL_   myBytes=new byte[numBytes]; _EL_   myRandom.engineNextBytes(myBytes); _EL_   return myBytes; _EL_ } _EL_ ', 'public void addCaretListener(final ICaretListener listener){ _EL_   Preconditions.checkNotNull(listener,"Error: Listener can\'t be null"); _EL_   if (!m_listeners.contains(listener)) { _EL_     m_listeners.add(listener); _EL_   } _EL_ } _EL_ ', '@Deprecated static public SerialSensorManager instance(){ _EL_   return null; _EL_ } _EL_ ', 'protected void pushBidirectionalVipRoutes(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx,IPClient client,LBMember member){ _EL_   IDevice srcDevice=null; _EL_   IDevice dstDevice=null; _EL_   Collection<? extends IDevice> allDevices=deviceManager.getAllDevices(); _EL_   for (  IDevice d : allDevices) { _EL_     for (int j=0; j < d.getIPv4Addresses().length; j++) { _EL_       if (srcDevice == null && client.ipAddress == d.getIPv4Addresses()[j])       srcDevice=d; _EL_       if (dstDevice == null && member.address == d.getIPv4Addresses()[j]) { _EL_         dstDevice=d; _EL_         member.macString=dstDevice.getMACAddressString(); _EL_       } _EL_       if (srcDevice != null && dstDevice != null)       break; _EL_     } _EL_   } _EL_   if (srcDevice == null || dstDevice == null)   return; _EL_   Long srcIsland=topology.getL2DomainId(sw.getId()); _EL_   if (srcIsland == null) { _EL_     log.debug("No openflow island found for source {}/{}",sw.getStringId(),pi.getInPort()); _EL_     return; _EL_   } _EL_   boolean on_same_island=false; _EL_   boolean on_same_if=false; _EL_   for (  SwitchPort dstDap : dstDevice.getAttachmentPoints()) { _EL_     long dstSwDpid=dstDap.getSwitchDPID(); _EL_     Long dstIsland=topology.getL2DomainId(dstSwDpid); _EL_     if ((dstIsland != null) && dstIsland.equals(srcIsland)) { _EL_       on_same_island=true; _EL_       if ((sw.getId() == dstSwDpid) && (pi.getInPort() == dstDap.getPort())) { _EL_         on_same_if=true; _EL_       } _EL_       break; _EL_     } _EL_   } _EL_   if (!on_same_island) { _EL_     if (log.isTraceEnabled()) { _EL_       log.trace("No first hop island found for destination " + "device {}, Action = flooding",dstDevice); _EL_     } _EL_     return; _EL_   } _EL_   if (on_same_if) { _EL_     if (log.isTraceEnabled()) { _EL_       log.trace("Both source and destination are on the same " + "switch/port {}/{}, Action = NOP",sw.toString(),pi.getInPort()); _EL_     } _EL_     return; _EL_   } _EL_   SwitchPort[] srcDaps=srcDevice.getAttachmentPoints(); _EL_   Arrays.sort(srcDaps,clusterIdComparator); _EL_   SwitchPort[] dstDaps=dstDevice.getAttachmentPoints(); _EL_   Arrays.sort(dstDaps,clusterIdComparator); _EL_   int iSrcDaps=0, iDstDaps=0; _EL_   while ((iSrcDaps < srcDaps.length) && (iDstDaps < dstDaps.length)) { _EL_     SwitchPort srcDap=srcDaps[iSrcDaps]; _EL_     SwitchPort dstDap=dstDaps[iDstDaps]; _EL_     Long srcCluster=topology.getL2DomainId(srcDap.getSwitchDPID()); _EL_     Long dstCluster=topology.getL2DomainId(dstDap.getSwitchDPID()); _EL_     int srcVsDest=srcCluster.compareTo(dstCluster); _EL_     if (srcVsDest == 0) { _EL_       if (!srcDap.equals(dstDap) && (srcCluster != null) && (dstCluster != null)) { _EL_         Route routeIn=routingEngine.getRoute(srcDap.getSwitchDPID(),(short)srcDap.getPort(),dstDap.getSwitchDPID(),(short)dstDap.getPort(),0); _EL_         Route routeOut=routingEngine.getRoute(dstDap.getSwitchDPID(),(short)dstDap.getPort(),srcDap.getSwitchDPID(),(short)srcDap.getPort(),0); _EL_         if (routeIn != null) { _EL_           pushStaticVipRoute(true,routeIn,client,member,sw.getId()); _EL_         } _EL_         if (routeOut != null) { _EL_           pushStaticVipRoute(false,routeOut,client,member,sw.getId()); _EL_         } _EL_       } _EL_       iSrcDaps++; _EL_       iDstDaps++; _EL_     } _EL_  else     if (srcVsDest < 0) { _EL_       iSrcDaps++; _EL_     } _EL_  else { _EL_       iDstDaps++; _EL_     } _EL_   } _EL_   return; _EL_ } _EL_ ', 'public static String parseIdFromSameDocumentURI(String uri){ _EL_   if (uri.length() == 0) { _EL_     return null; _EL_   } _EL_   String id=uri.substring(1); _EL_   if (id != null && id.startsWith("xpointer(id(")) { _EL_     int i1=id.indexOf(\'\\\'\'); _EL_     int i2=id.indexOf(\'\\\'\',i1 + 1); _EL_     id=id.substring(i1 + 1,i2); _EL_   } _EL_   return id; _EL_ } _EL_ ', 'public void markUsed(long pos,int length){ _EL_   int start=getBlock(pos); _EL_   int blocks=getBlockCount(length); _EL_   set.set(start,start + blocks); _EL_ } _EL_ ', 'public CholMatrix(Matrix Arg){ _EL_   final double[][] A=Arg.toDoubleArray(); _EL_   n=(int)Arg.getRowCount(); _EL_   L=new double[n][n]; _EL_   isspd=(Arg.getColumnCount() == n); _EL_   double[] Lrowj=null; _EL_   double[] Lrowk=null; _EL_   double[] Aj=null; _EL_   for (int j=0; j < n; j++) { _EL_     Lrowj=L[j]; _EL_     Aj=A[j]; _EL_     double d=0.0; _EL_     for (int k=0; k < j; k++) { _EL_       Lrowk=L[k]; _EL_       double s=0.0; _EL_       for (int i=0; i < k; i++) { _EL_         s+=Lrowk[i] * Lrowj[i]; _EL_       } _EL_       Lrowj[k]=s=(Aj[k] - s) / Lrowk[k]; _EL_       d=d + s * s; _EL_       isspd=isspd & (A[k][j] == Aj[k]); _EL_     } _EL_     d=Aj[j] - d; _EL_     isspd=isspd & (d > 0.0); _EL_     Lrowj[j]=Math.sqrt(Math.max(d,0.0)); _EL_     for (int k=j + 1; k < n; k++) { _EL_       Lrowj[k]=0.0; _EL_     } _EL_   } _EL_ } _EL_ ', 'public static String readStringNZ(Memory mem,int address,int n){ _EL_   address&=Memory.addressMask; _EL_   if (address + n > MemoryMap.END_RAM) { _EL_     n=MemoryMap.END_RAM - address + 1; _EL_     if (n < 0) { _EL_       n=0; _EL_     } _EL_   } _EL_   byte[] bytes=new byte[Math.min(n,10000)]; _EL_   int length=0; _EL_   IMemoryReader memoryReader=MemoryReader.getMemoryReader(address,n,1); _EL_   for (; n > 0; n--) { _EL_     int b=memoryReader.readNext(); _EL_     if (b == 0) { _EL_       break; _EL_     } _EL_     if (length >= bytes.length) { _EL_       byte[] newBytes=new byte[bytes.length + 10000]; _EL_       System.arraycopy(bytes,0,newBytes,0,bytes.length); _EL_       bytes=newBytes; _EL_     } _EL_     bytes[length]=(byte)b; _EL_     length++; _EL_   } _EL_   return new String(bytes,0,length,Constants.charset); _EL_ } _EL_ ', 'static boolean shiftRight(int[] result,int resultLen,int[] source,int intCount,int count){ _EL_   int i; _EL_   boolean allZero=true; _EL_   for (i=0; i < intCount; i++)   allZero&=source[i] == 0; _EL_   if (count == 0) { _EL_     System.arraycopy(source,intCount,result,0,resultLen); _EL_     i=resultLen; _EL_   } _EL_  else { _EL_     int leftShiftCount=32 - count; _EL_     allZero&=(source[i] << leftShiftCount) == 0; _EL_     for (i=0; i < resultLen - 1; i++) { _EL_       result[i]=(source[i + intCount] >>> count) | (source[i + intCount + 1] << leftShiftCount); _EL_     } _EL_     result[i]=(source[i + intCount] >>> count); _EL_     i++; _EL_   } _EL_   return allZero; _EL_ } _EL_ ', '@Override public void agg(Object newVal){ _EL_   valueSet.add(newVal instanceof Long ? (Long)newVal : Long.valueOf(newVal.toString())); _EL_   firstTime=false; _EL_ } _EL_ ', 'public boolean containsBafBody(){ _EL_   Iterator<SootMethod> methodIt=methodIterator(); _EL_   while (methodIt.hasNext()) { _EL_     SootMethod m=methodIt.next(); _EL_     if (m.hasActiveBody() && m.getActiveBody() instanceof soot.baf.BafBody) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static String retainAllChars(String str,String retainChars){ _EL_   int pos=indexOfChars(str,retainChars); _EL_   if (pos == -1) { _EL_     return ""; _EL_   } _EL_   StringBuilder buf=new StringBuilder(); _EL_   do { _EL_     buf.append(str.charAt(pos)); _EL_     pos=indexOfChars(str,retainChars,pos + 1); _EL_   } _EL_  while (pos != -1); _EL_   return buf.toString(); _EL_ } _EL_ ', 'public synchronized void deleteLeastUsedConnection(){ _EL_   final HttpConnection connection=(HttpConnection)freeConnections.removeFirst(); _EL_   if (connection != null) { _EL_     deleteConnection(connection); _EL_   } _EL_  else   if (LOG.isDebugEnabled()) { _EL_     LOG.debug("Attempted to reclaim an unused connection but there were none."); _EL_   } _EL_ } _EL_ ', 'private int binarySearch(T x,int from,int to){ _EL_   while (from <= to) { _EL_     int m=(from + to) >>> 1; _EL_     if (comp.compare(x,data[m]) >= 0) { _EL_       from=m + 1; _EL_     } _EL_  else { _EL_       to=m - 1; _EL_     } _EL_   } _EL_   return from; _EL_ } _EL_ ', 'private TransitSchedule cleanUpSchedule(TransitSchedule newTransitSchedule){ _EL_   newTransitSchedule=TransitScheduleCleaner.removeRoutesWithoutDepartures(newTransitSchedule); _EL_   newTransitSchedule=TransitScheduleCleaner.removeEmptyLines(newTransitSchedule); _EL_   newTransitSchedule=TransitScheduleCleaner.removeStopsNotUsed(newTransitSchedule); _EL_   return newTransitSchedule; _EL_ } _EL_ ', 'public String patch_toText(List<Patch> patches){ _EL_   StringBuilder text=new StringBuilder(); _EL_   for (  Patch aPatch : patches) { _EL_     text.append(aPatch); _EL_   } _EL_   return text.toString(); _EL_ } _EL_ ', 'private void validateSortSize(){ _EL_   String sortSizeStr=carbonProperties.getProperty(CarbonCommonConstants.SORT_SIZE,CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL); _EL_   try { _EL_     int sortSize=Integer.parseInt(sortSizeStr); _EL_     if (sortSize < CarbonCommonConstants.SORT_SIZE_MIN_VAL) { _EL_       LOGGER.info("The batch size value \\"" + sortSizeStr + "\\" is invalid. Using the default value \\""+ CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL); _EL_       carbonProperties.setProperty(CarbonCommonConstants.SORT_SIZE,CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL); _EL_     } _EL_   } _EL_  catch (  NumberFormatException e) { _EL_     LOGGER.info("The batch size value \\"" + sortSizeStr + "\\" is invalid. Using the default value \\""+ CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL); _EL_     carbonProperties.setProperty(CarbonCommonConstants.SORT_SIZE,CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL); _EL_   } _EL_ } _EL_ ', 'public void finishPainting(boolean useCache){ _EL_   DataBufferInt dataBuffer=new DataBufferInt(w0 * h0); _EL_   int transparency=nativeFinishPainting(SunWritableRaster.stealData(dataBuffer,0),w0,h0); _EL_   SunWritableRaster.markDirty(dataBuffer); _EL_   int[] bands=BAND_OFFSETS[transparency - 1]; _EL_   WritableRaster raster=Raster.createPackedRaster(dataBuffer,w0,h0,w0,bands,null); _EL_   ColorModel cm=COLOR_MODELS[transparency - 1]; _EL_   Image img=new BufferedImage(cm,raster,false,null); _EL_   if (useCache) { _EL_     cache.setImage(getClass(),null,w0,h0,cacheArgs,img); _EL_   } _EL_   graphics.drawImage(img,x0,y0,null); _EL_ } _EL_ ', '@Override default CompletableFuture<OptionalDouble> averageDouble(final ToDoubleFunction<? super T> fn){ _EL_   return CompletableFuture.supplyAsync(null,getExec()); _EL_ } _EL_ ', 'public String next(){ _EL_   return next(ANY_PATTERN); _EL_ } _EL_ ', 'public XercesHTMLDocumentBuilderFactory(DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException { _EL_   super(settings); _EL_   try { _EL_     ClassLoader classLoader=ClassLoader.getSystemClassLoader(); _EL_     Class htmlBuilderClass=classLoader.loadClass("org.apache.html.dom.HTMLBuilder"); _EL_     htmlBuilderConstructor=htmlBuilderClass.getConstructor(NO_CLASSES); _EL_     getHTMLDocumentMethod=htmlBuilderClass.getMethod("getHTMLDocument",NO_CLASSES); _EL_     Class htmlDOMImpl=classLoader.loadClass("org.apache.html.dom.HTMLDOMImplementationImpl"); _EL_     Method method=htmlDOMImpl.getMethod("getHTMLDOMImplementation",NO_CLASSES); _EL_     domImpl=(DOMImplementation)method.invoke(null,NO_OBJECTS); _EL_     Class saxFactoryClass=classLoader.loadClass("org.apache.xerces.jaxp.SAXParserFactoryImpl"); _EL_     factory=(SAXParserFactory)saxFactoryClass.newInstance(); _EL_   } _EL_  catch (  InvocationTargetException ex) { _EL_     throw new DOMTestIncompatibleException(ex.getTargetException(),null); _EL_   } _EL_ catch (  Exception ex) { _EL_     throw new DOMTestIncompatibleException(ex,null); _EL_   } _EL_   if (settings != null) { _EL_     for (int i=0; i < settings.length; i++) { _EL_     } _EL_   } _EL_   try { _EL_     factory.newSAXParser(); _EL_   } _EL_  catch (  ParserConfigurationException ex) { _EL_     throw new DOMTestIncompatibleException(ex,null); _EL_   } _EL_ catch (  SAXException ex) { _EL_     throw new DOMTestIncompatibleException(ex,null); _EL_   } _EL_ } _EL_ ', 'public Macro(File file) throws EOFException, FileNotFoundException, IOException { _EL_   DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance(); _EL_   DocumentBuilder db=null; _EL_   Document doc=null; _EL_   try { _EL_     db=dbf.newDocumentBuilder(); _EL_     InputSource is=new InputSource(new UnicodeReader(new FileInputStream(file),FILE_ENCODING)); _EL_     is.setEncoding(FILE_ENCODING); _EL_     doc=db.parse(is); _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_     String desc=e.getMessage(); _EL_     if (desc == null) { _EL_       desc=e.toString(); _EL_     } _EL_     throw new IOException("Error parsing XML: " + desc); _EL_   } _EL_   macroRecords=new ArrayList(); _EL_   boolean parsedOK=initializeFromXMLFile(doc.getDocumentElement()); _EL_   if (parsedOK == false) { _EL_     name=null; _EL_     macroRecords.clear(); _EL_     macroRecords=null; _EL_     throw new IOException("Error parsing XML!"); _EL_   } _EL_ } _EL_ ', 'public static void deleteESInput(){ _EL_   String esPIRIndex=SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_NODES_PROPERTY) + ":" + SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_PORT_PROPERTY)+ "/"+ SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_INDEX_PROPERTY); _EL_   logger.info("ES input being deleted at " + esPIRIndex); _EL_   ProcessBuilder pDeletePIR=new ProcessBuilder("curl","-XDELETE",esPIRIndex); _EL_   try { _EL_     TestUtils.executeCommand(pDeletePIR); _EL_     logger.info("ES input deleted!"); _EL_   } _EL_  catch (  IOException e) { _EL_     e.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'private void terminateAndWaitFsyncService() throws Exception { _EL_   if (fsyncService.isTerminated())   return; _EL_   fsyncService.shutdown(); _EL_   fsyncService.awaitTermination(3600,TimeUnit.SECONDS); _EL_   Exception fsyncExceptionCopy=fsyncException; _EL_   if (fsyncExceptionCopy != null)   throw fsyncExceptionCopy; _EL_ } _EL_ ', 'private Location findFarthestLocation(Location location,Direction direction){ _EL_   Location farthest; _EL_   do { _EL_     farthest=location; _EL_     location=farthest.offset(direction); _EL_   } _EL_  while (gridOperator.isValidLocation(location) && gameGrid.get(location) == null); _EL_   return farthest; _EL_ } _EL_ ', 'public static int computeMinImageSampleSize(ImageSize srcSize){ _EL_   int srcWidth=srcSize.getWidth(); _EL_   int srcHeight=srcSize.getHeight(); _EL_   int targetWidth=maxBitmapSize.getWidth(); _EL_   int targetHeight=maxBitmapSize.getHeight(); _EL_   int widthScale=(int)Math.ceil((float)srcWidth / targetWidth); _EL_   int heightScale=(int)Math.ceil((float)srcHeight / targetHeight); _EL_   return Math.max(widthScale,heightScale); _EL_ } _EL_ ', 'private JSplitPane createMainSplitPane(){ _EL_   final JSplitPane mainSplitPane=new JSplitPane(); _EL_   mainSplitPane.setOneTouchExpandable(true); _EL_   mainSplitPane.setDividerLocation(250); _EL_   mainSplitPane.setResizeWeight(0.33); _EL_   mainSplitPane.setOrientation(JSplitPane.HORIZONTAL_SPLIT); _EL_   m_componentPanel.setBackground(Color.WHITE); _EL_   mainSplitPane.setLeftComponent(createProjectTreePanel()); _EL_   mainSplitPane.setRightComponent(m_componentPanel); _EL_   mainSplitPane.setBorder(new LineBorder(Color.GRAY)); _EL_   return mainSplitPane; _EL_ } _EL_ ', 'private boolean checkSetup(){ _EL_   this.txmgr=TransactionManagerImp.getTransactionManager(); _EL_   if (this.txmgr == null) { _EL_     try { _EL_       Hashtable<String,String> env=new Hashtable<String,String>(); _EL_       env.put(Context.INITIAL_CONTEXT_FACTORY,this.initialContextFactory); _EL_       env.put(Context.PROVIDER_URL,this.providerUrl); _EL_       Context ctx=new InitialContext(env); _EL_       this.txmgrServer=(UserTransactionServer)PortableRemoteObject.narrow(ctx.lookup(this.userTransactionServerLookupName),UserTransactionServer.class); _EL_     } _EL_  catch (    Exception e) { _EL_       e.printStackTrace(); _EL_       throw new RuntimeException(getNotFoundMessage()); _EL_     } _EL_     if (this.txmgrServer == null)     throw new RuntimeException(getNotFoundMessage()); _EL_   } _EL_   return this.txmgr != null; _EL_ } _EL_ ', 'public static FSDirectory newFSDirectory(Class<? extends FSDirectory> clazz,Path path) throws ReflectiveOperationException { _EL_   return newFSDirectory(clazz,path,FSLockFactory.getDefault()); _EL_ } _EL_ ', 'private static Element addElement(Document doc,Node parent,String tagName,String attr1,String val1,String attr2,String val2){ _EL_   Element elem=doc.createElement(tagName); _EL_   if (attr1 != null)   elem.setAttribute(attr1,val1); _EL_   if (attr2 != null)   elem.setAttribute(attr2,val2); _EL_   parent.appendChild(elem); _EL_   return elem; _EL_ } _EL_ ', 'public static String stream2String(InputStream is,int maxLength) throws IOException { _EL_   byte[] buffer=new byte[4096]; _EL_   StringWriter sw=new StringWriter(); _EL_   int totalRead=0; _EL_   int read=0; _EL_   do { _EL_     sw.write(new String(buffer,0,read)); _EL_     totalRead+=read; _EL_     read=is.read(buffer,0,buffer.length); _EL_   } _EL_  while (((-1 == maxLength) || (totalRead < maxLength)) && (read != -1)); _EL_   return sw.toString(); _EL_ } _EL_ ', "private static Couple<String> splitNameOfRemoteBranch(String branchName){ _EL_   int firstSlash=branchName.indexOf('/'); _EL_   String remoteName=firstSlash > -1 ? branchName.substring(0,firstSlash) : branchName; _EL_   String remoteBranchName=branchName.substring(firstSlash + 1); _EL_   return Couple.of(remoteName,remoteBranchName); _EL_ } _EL_ ", 'public static OutputStream encrypt(OutputStream unencryptedOutputStream,char[] password) throws EncryptionException, IOException { _EL_   OutputStream encryptedOutputStream=null; _EL_   PBEKeySpec pbeKeySpec=new PBEKeySpec(password); _EL_   PBEParameterSpec pbeParameterSpec=new PBEParameterSpec(SALT,ITERATION_COUNT); _EL_   try { _EL_     SecretKeyFactory secretKeyFactory=SecretKeyFactory.getInstance(ENCRYPTION_ALGORITHM,CRYPTOPROVIDER); _EL_     SecretKey pbeKey=secretKeyFactory.generateSecret(pbeKeySpec); _EL_     Cipher cipher=Cipher.getInstance(ENCRYPTION_ALGORITHM,CRYPTOPROVIDER); _EL_     cipher.init(Cipher.ENCRYPT_MODE,pbeKey,pbeParameterSpec); _EL_     encryptedOutputStream=new CipherOutputStream(unencryptedOutputStream,cipher); _EL_   } _EL_  catch (  GeneralSecurityException e) { _EL_     throw new EncryptionException("There was a problem during the encryption process. See the stacktrace for details.",e); _EL_   } _EL_   return encryptedOutputStream; _EL_ } _EL_ ', 'public static String rightPad(String original,int length,char padChar){ _EL_   if (original.length() >= length) { _EL_     return original; _EL_   } _EL_   return original + stringOfChar(padChar,length - original.length()); _EL_ } _EL_ ', 'private boolean checkSelectForSwipe(int action,MotionEvent motionEvent,int pointerIndex){ _EL_   if (mSelected != null || action != MotionEvent.ACTION_MOVE || mActionState == ACTION_STATE_DRAG || !mCallback.isItemViewSwipeEnabled()) { _EL_     return false; _EL_   } _EL_   if (mRecyclerView.getScrollState() == RecyclerView.SCROLL_STATE_DRAGGING) { _EL_     return false; _EL_   } _EL_   final ViewHolder vh=findSwipedView(motionEvent); _EL_   if (vh == null) { _EL_     return false; _EL_   } _EL_   final int movementFlags=mCallback.getAbsoluteMovementFlags(mRecyclerView,vh); _EL_   final int swipeFlags=(movementFlags & ACTION_MODE_SWIPE_MASK) >> (DIRECTION_FLAG_COUNT * ACTION_STATE_SWIPE); _EL_   if (swipeFlags == 0) { _EL_     return false; _EL_   } _EL_   final float x=MotionEventCompat.getX(motionEvent,pointerIndex); _EL_   final float y=MotionEventCompat.getY(motionEvent,pointerIndex); _EL_   final float dx=x - mInitialTouchX; _EL_   final float dy=y - mInitialTouchY; _EL_   final float absDx=Math.abs(dx); _EL_   final float absDy=Math.abs(dy); _EL_   if (absDx < mSlop && absDy < mSlop) { _EL_     return false; _EL_   } _EL_   if (absDx > absDy) { _EL_     if (dx < 0 && (swipeFlags & LEFT) == 0) { _EL_       return false; _EL_     } _EL_     if (dx > 0 && (swipeFlags & RIGHT) == 0) { _EL_       return false; _EL_     } _EL_   } _EL_  else { _EL_     if (dy < 0 && (swipeFlags & UP) == 0) { _EL_       return false; _EL_     } _EL_     if (dy > 0 && (swipeFlags & DOWN) == 0) { _EL_       return false; _EL_     } _EL_   } _EL_   mDx=mDy=0f; _EL_   mActivePointerId=MotionEventCompat.getPointerId(motionEvent,0); _EL_   select(vh,ACTION_STATE_SWIPE); _EL_   if (mPreOpened != null && mPreOpened != vh && vh != null) { _EL_     closeOpenedPreItem(); _EL_   } _EL_   return true; _EL_ } _EL_ ', 'protected void reloadSwipeStateInView(View frontView,int position){ _EL_   if (!opened.get(position)) { _EL_     ViewCompat.setTranslationX(frontView,0.0f); _EL_   } _EL_  else { _EL_     if (openedRight.get(position)) { _EL_       ViewCompat.setTranslationX(frontView,swipeListView.getWidth()); _EL_     } _EL_  else { _EL_       ViewCompat.setTranslationX(frontView,-swipeListView.getWidth()); _EL_     } _EL_   } _EL_ } _EL_ ', 'void reset(){ _EL_   System.arraycopy(iv,0,k,0,blockSize); _EL_ } _EL_ ', 'public Matrix3 multiplyByVerticalFlip(){ _EL_   double[] m=this.m; _EL_   m[2]+=m[1]; _EL_   m[5]+=m[4]; _EL_   m[8]+=m[7]; _EL_   m[1]=-m[1]; _EL_   m[4]=-m[4]; _EL_   m[7]=-m[7]; _EL_   return this; _EL_ } _EL_ ', 'public void shutdown() throws DataSourceException { _EL_   if (createdSessionFactory) { _EL_     if (sessionFactory != null && !sessionFactory.isClosed()) { _EL_       try { _EL_         sessionFactory.close(); _EL_       } _EL_   finally { _EL_         sessionFactory=null; _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'private String stringifyIP(byte[] ip){ _EL_   String temp=""; _EL_   for (int i=0; i < ip.length / 2; i++) { _EL_     temp+=Integer.toString(ip[i] & 0x00FF) + "."; _EL_   } _EL_   temp=temp.substring(0,temp.length() - 1); _EL_   temp+="/"; _EL_   for (int i=ip.length / 2; i < ip.length; i++) { _EL_     temp+=Integer.toString(ip[i] & 0x00FF) + "."; _EL_   } _EL_   temp=temp.substring(0,temp.length() - 1); _EL_   return temp; _EL_ } _EL_ ', 'public COpenFunctionAction(final CGraphWindow parent,final IViewContainer container,final INaviFunction function){ _EL_   super(String.format("Open function %s",function.getName())); _EL_   Preconditions.checkNotNull(parent,"IE02163: Parent argument can not be null"); _EL_   Preconditions.checkNotNull(container,"IE02164: Container argument can not be null"); _EL_   m_parent=parent; _EL_   m_container=container; _EL_   m_function=function; _EL_ } _EL_ ', 'public static byte[] hexStringToBytes(String hexString){ _EL_   if (hexString == null || hexString.equals("")) { _EL_     return null; _EL_   } _EL_   hexString=hexString.toUpperCase(); _EL_   int length=hexString.length() / 2; _EL_   char[] hexChars=hexString.toCharArray(); _EL_   byte[] d=new byte[length]; _EL_   for (int i=0; i < length; i++) { _EL_     int pos=i * 2; _EL_     d[i]=(byte)(charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1])); _EL_   } _EL_   return d; _EL_ } _EL_ ', 'public void writeString(final String s){ _EL_   final byte[] bytes=s.getBytes(); _EL_   final int len=bytes.length; _EL_   writeInt(len); _EL_   System.arraycopy(bytes,0,buffer,offset,len); _EL_   offset+=len; _EL_   pad(); _EL_ } _EL_ ', 'private void mergeNetworks(Network tzone,Network sZone){ _EL_   List<String> addedEndPoints=new ArrayList<String>(sZone.retrieveEndpoints()); _EL_   StringSet newEndPoints=sZone.retrieveEndpoints(); _EL_   for (  String endpoint : tzone.retrieveEndpoints()) { _EL_     if (newEndPoints.contains(endpoint)) { _EL_       addedEndPoints.remove(endpoint); _EL_     } _EL_   } _EL_   if (!addedEndPoints.isEmpty()) { _EL_     tzone.addEndpoints(addedEndPoints,true); _EL_   } _EL_   tzone.setNativeGuid(sZone.getNativeGuid()); _EL_ } _EL_ ', 'static public void println(String msg){ _EL_   println(msg,CLLogLevel.normal); _EL_ } _EL_ ', 'private static ByteString readChunk(InputStream in,final int chunkSize) throws IOException { _EL_   final byte[] buf=new byte[chunkSize]; _EL_   int bytesRead=0; _EL_   while (bytesRead < chunkSize) { _EL_     final int count=in.read(buf,bytesRead,chunkSize - bytesRead); _EL_     if (count == -1) { _EL_       break; _EL_     } _EL_     bytesRead+=count; _EL_   } _EL_   if (bytesRead == 0) { _EL_     return null; _EL_   } _EL_  else { _EL_     return ByteString.copyFrom(buf,0,bytesRead); _EL_   } _EL_ } _EL_ ', 'public ReverseGeoCode(InputStream placenames,boolean majorOnly) throws IOException { _EL_   createKdTree(placenames,majorOnly); _EL_ } _EL_ ', "protected String patchName(String qname){ _EL_   final int lastColon=qname.lastIndexOf(':'); _EL_   if (lastColon > 0) { _EL_     final int firstColon=qname.indexOf(':'); _EL_     final String prefix=qname.substring(0,firstColon); _EL_     final String localName=qname.substring(lastColon + 1); _EL_     final String uri=m_prefixMap.lookupNamespace(prefix); _EL_     if (uri != null && uri.length() == 0) { _EL_       return localName; _EL_     } _EL_  else     if (firstColon != lastColon) { _EL_       return prefix + ':' + localName; _EL_     } _EL_   } _EL_   return qname; _EL_ } _EL_ ", 'public static String fromTag(ListTag<Tag> tag){ _EL_   StringBuilder builder=new StringBuilder(); _EL_   builder.append(ARRAY_START); _EL_   boolean start=true; _EL_   for (  Tag value : tag.getValue()) { _EL_     if (start) { _EL_       start=false; _EL_     } _EL_  else { _EL_       builder.append(ELEMENT_SEPERATOR); _EL_     } _EL_     builder.append(fromGenericTag(value)); _EL_   } _EL_   builder.append(ARRAY_END); _EL_   return builder.toString(); _EL_ } _EL_ ', 'public Vector rotateInRadian(double radians){ _EL_   final double length=length(); _EL_   double angle=angleInRadian(); _EL_   angle+=radians; _EL_   final Vector result=new Vector(Math.cos(angle),Math.sin(angle)); _EL_   return result.multiply(length); _EL_ } _EL_ ', 'private static Map<String,Set<String>> parseSparseFields(MultivaluedMap<String,String> queryParams){ _EL_   Map<String,Set<String>> result=new HashMap<>(); _EL_   for (  Map.Entry<String,List<String>> kv : queryParams.entrySet()) { _EL_     String key=kv.getKey(); _EL_     if (key.startsWith("fields[") && key.endsWith("]")) { _EL_       String type=key.substring(7,key.length() - 1); _EL_       LinkedHashSet<String> filters=new LinkedHashSet<>(); _EL_       for (      String filterParams : kv.getValue()) { _EL_         Collections.addAll(filters,filterParams.split(",")); _EL_       } _EL_       if (!filters.isEmpty()) { _EL_         result.put(type,filters); _EL_       } _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public Element signWithWSSSAMLTokenProfile(Document doc,java.security.cert.Certificate cert,String assertionID,String algorithm,List ids) throws XMLSignatureException { _EL_   return signWithWSSSAMLTokenProfile(doc,cert,assertionID,algorithm,ids,SOAPBindingConstants.WSF_10_VERSION); _EL_ } _EL_ ', '@Override public void addURL(URL url,boolean isScanned){ _EL_   if (containsURL(url)) { _EL_     return; _EL_   } _EL_   super.addURL(url,isScanned); _EL_   if (isScanned)   _pendingScanRoots.add(new ScanRoot(url,null)); _EL_ } _EL_ ', 'public void add(final int start,final int end,final byte status){ _EL_   final int s=start - mStart; _EL_   if (s < mInterval.length && end > mStart) { _EL_     Arrays.fill(mInterval,Math.max(s,0),Math.min(end - mStart,mInterval.length),status); _EL_   } _EL_ } _EL_ ', 'public void reset(){ _EL_   alpha=initAlpha; _EL_   neighborhoodSize=initNeighborhoodSize; _EL_ } _EL_ ', 'private void reload(){ _EL_   Document doc=textPane.getDocument(); _EL_   doc.putProperty(Document.StreamDescriptionProperty,null); _EL_   reference=currentReference; _EL_   loadPage(currentPage); _EL_ } _EL_ ', 'protected void drawHexagon(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow,String direction){ _EL_   Polygon hexagon=new Polygon(); _EL_   if (direction.equals(mxConstants.DIRECTION_NORTH) || direction.equals(mxConstants.DIRECTION_SOUTH)) { _EL_     hexagon.addPoint(x + (int)(0.5 * w),y); _EL_     hexagon.addPoint(x + w,y + (int)(0.25 * h)); _EL_     hexagon.addPoint(x + w,y + (int)(0.75 * h)); _EL_     hexagon.addPoint(x + (int)(0.5 * w),y + h); _EL_     hexagon.addPoint(x,y + (int)(0.75 * h)); _EL_     hexagon.addPoint(x,y + (int)(0.25 * h)); _EL_   } _EL_  else { _EL_     hexagon.addPoint(x + (int)(0.25 * w),y); _EL_     hexagon.addPoint(x + (int)(0.75 * w),y); _EL_     hexagon.addPoint(x + w,y + (int)(0.5 * h)); _EL_     hexagon.addPoint(x + (int)(0.75 * w),y + h); _EL_     hexagon.addPoint(x + (int)(0.25 * w),y + h); _EL_     hexagon.addPoint(x,y + (int)(0.5 * h)); _EL_   } _EL_   drawPolygon(hexagon,fillColor,fillPaint,penColor,shadow); _EL_ } _EL_ ', 'private boolean isStatic(Field field){ _EL_   int modifier=field.getModifiers(); _EL_   if (Modifier.isStatic(modifier)) { _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void init(String componentName) throws LogException { _EL_   accessLogger=Logger.getLogger(componentName + ".access"); _EL_   errorLogger=Logger.getLogger(componentName + ".error"); _EL_ } _EL_ ', 'private View fillLeft(int pos,int nextRight){ _EL_   if (DEBUG)   Log.i(TAG,"fillLeft() pos: " + pos + " nextRight: "+ nextRight+ M_FIRST_POSITION+ mFirstPosition); _EL_   View selectedView=null; _EL_   final int end=mListPadding.left; _EL_   while (nextRight > end && pos >= 0) { _EL_     View temp=makeColumn(pos,nextRight,false); _EL_     if (temp != null) { _EL_       selectedView=temp; _EL_     } _EL_     nextRight=mReferenceView.getLeft() - mHorizontalSpacing; _EL_     mFirstPosition=pos; _EL_     pos-=mNumRows; _EL_   } _EL_   if (mStackFromBottom) { _EL_     mFirstPosition=Math.max(0,pos + 1); _EL_   } _EL_   return selectedView; _EL_ } _EL_ ', 'public void removeDefaultValue(String value) throws SMSException, SSOException { _EL_   Set defaultValues=getDefaultValues(); _EL_   if (defaultValues != Collections.EMPTY_SET) { _EL_     defaultValues.remove(value); _EL_     updateDefaultValues(defaultValues); _EL_   } _EL_ } _EL_ ', 'protected Signature mergeSignatures(Signature first,Signature second,int numBins){ _EL_   int d2=-1; _EL_   for (int i=0; i < second.spec.length; i+=2) { _EL_     if (second.spec[i] >= 0) { _EL_       assert (d2 == -1) : "Merging with non-1-signature?!?"; _EL_       d2=i; _EL_     } _EL_   } _EL_   assert (d2 >= 0) : "Merging with empty signature?"; _EL_   if (first.spec[d2] >= 0) { _EL_     return null; _EL_   } _EL_   final ModifiableDBIDs intersection=DBIDUtil.intersection(first.ids,second.ids); _EL_   final int support=intersection.size(); _EL_   double width=(second.spec[d2 + 1] - second.spec[d2] + 1.) / (double)numBins; _EL_   double expect=first.ids.size() * width; _EL_   if (support <= expect || support < minClusterSize) { _EL_     return null; _EL_   } _EL_   final double test=PoissonDistribution.rawProbability(support,expect); _EL_   if ((poissonThreshold) <= test) { _EL_     return null; _EL_   } _EL_   int[] spec=first.spec.clone(); _EL_   spec[d2]=second.spec[d2]; _EL_   spec[d2 + 1]=second.spec[d2]; _EL_   final Signature newsig=new Signature(spec,intersection); _EL_   if (LOG.isDebugging()) { _EL_     LOG.debug(newsig.toString()); _EL_   } _EL_   return newsig; _EL_ } _EL_ ', '@Override public int hashCode(){ _EL_   return super.hashCode(); _EL_ } _EL_ ', 'public IgniteDeploymentException(Throwable cause){ _EL_   this(cause.getMessage(),cause); _EL_ } _EL_ ', 'public synchronized boolean enter(CnATreeElement obj) throws TransactionAbortedException { _EL_   if (aborted) { _EL_     throw new TransactionAbortedException(); _EL_   } _EL_   visited.add(obj); _EL_   if (this.initiator != null) { _EL_     return false; _EL_   } _EL_   this.initiator=obj; _EL_   aborted=false; _EL_   return true; _EL_ } _EL_ ', 'public Options addOption(Option opt){ _EL_   String key=opt.getKey(); _EL_   if (opt.hasLongOpt()) { _EL_     longOpts.put(opt.getLongOpt(),opt); _EL_   } _EL_   if (opt.isRequired()) { _EL_     if (requiredOpts.contains(key)) { _EL_       requiredOpts.remove(requiredOpts.indexOf(key)); _EL_     } _EL_     requiredOpts.add(key); _EL_   } _EL_   shortOpts.put(key,opt); _EL_   return this; _EL_ } _EL_ ', 'public void propertyChange(PropertyChangeEvent pce){ _EL_   if (pce.getPropertyName() == MapBean.BackgroundProperty && backgroundSlave) { _EL_     map.setBckgrnd((Paint)pce.getNewValue()); _EL_   } _EL_ } _EL_ ', 'public TransitionBuilder addFrame(int imageResource){ _EL_   mFrames.add(imageResource); _EL_   return this; _EL_ } _EL_ ', 'public String nextCDATA() throws JSONException { _EL_   char c; _EL_   int i; _EL_   StringBuffer sb=new StringBuffer(); _EL_   for (; ; ) { _EL_     c=next(); _EL_     if (end()) { _EL_       throw syntaxError("Unclosed CDATA"); _EL_     } _EL_     sb.append(c); _EL_     i=sb.length() - 3; _EL_     if (i >= 0 && sb.charAt(i) == \']\' && sb.charAt(i + 1) == \']\' && sb.charAt(i + 2) == \'>\') { _EL_       sb.setLength(i); _EL_       return sb.toString(); _EL_     } _EL_   } _EL_ } _EL_ ', 'private static boolean needsSkylightUpdate(FastCubeBlockAccess access,MutableBlockPos pos){ _EL_   if (access.getBlockLightOpacity(pos) >= 15) { _EL_     return false; _EL_   } _EL_   int computedLight=access.computeLightValue(pos); _EL_   for (  EnumFacing facing : EnumFacing.values()) { _EL_     pos.move(facing); _EL_     int currentLight=access.getLightFor(EnumSkyBlock.SKY,pos); _EL_     int currentOpacity=Math.max(1,access.getBlockLightOpacity(pos)); _EL_     pos.move(facing.getOpposite()); _EL_     if (computedLight == currentLight - currentOpacity) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static void expand(Rectangle2D r,double amount){ _EL_   r.setRect(r.getX() - amount,r.getY() - amount,r.getWidth() + 2 * amount,r.getHeight() + 2 * amount); _EL_ } _EL_ ', 'static void stringToPacket(String s,DatagramPacket packet){ _EL_   byte[] bytes=s.getBytes(); _EL_   System.arraycopy(bytes,0,packet.getData(),0,bytes.length); _EL_   packet.setLength(bytes.length); _EL_ } _EL_ ', 'private ArrayList<PROCLUSCluster> assignPoints(ArrayDBIDs m_current,long[][] dimensions,Relation<V> database){ _EL_   ModifiableDBIDs[] clusterIDs=new ModifiableDBIDs[dimensions.length]; _EL_   for (int i=0; i < m_current.size(); i++) { _EL_     clusterIDs[i]=DBIDUtil.newHashSet(); _EL_   } _EL_   DBIDArrayIter m_i=m_current.iter(); _EL_   for (DBIDIter it=database.iterDBIDs(); it.valid(); it.advance()) { _EL_     V p=database.get(it); _EL_     double minDist=Double.NaN; _EL_     int best=-1, i=0; _EL_     for (m_i.seek(0); m_i.valid(); m_i.advance(), i++) { _EL_       V m=database.get(m_i); _EL_       double currentDist=manhattanSegmentalDistance(p,m,dimensions[i]); _EL_       if (!(minDist <= currentDist)) { _EL_         minDist=currentDist; _EL_         best=i; _EL_       } _EL_     } _EL_     assert best >= 0; _EL_     ModifiableDBIDs ids=clusterIDs[best]; _EL_     ids.add(it); _EL_   } _EL_   ArrayList<PROCLUSCluster> clusters=new ArrayList<>(m_current.size()); _EL_   for (int i=0; i < dimensions.length; i++) { _EL_     ModifiableDBIDs objectIDs=clusterIDs[i]; _EL_     if (!objectIDs.isEmpty()) { _EL_       long[] clusterDimensions=dimensions[i]; _EL_       double[] centroid=Centroid.make(database,objectIDs).getArrayRef(); _EL_       clusters.add(new PROCLUSCluster(objectIDs,clusterDimensions,centroid)); _EL_     } _EL_  else { _EL_       clusters.add(null); _EL_     } _EL_   } _EL_   if (LOG.isDebugging()) { _EL_     StringBuilder msg=new StringBuilder(); _EL_     msg.append(\'\\n\'); _EL_     msg.append("clusters ").append(clusters).append(\'\\n\'); _EL_     LOG.debugFine(msg.toString()); _EL_   } _EL_   return clusters; _EL_ } _EL_ ', 'public boolean isInitialized(){ _EL_   return _initialized; _EL_ } _EL_ ', 'public boolean removeShutdownHook(Thread hook){ _EL_   if (hook == null) { _EL_     throw new NullPointerException("hook == null"); _EL_   } _EL_   if (shuttingDown) { _EL_     throw new IllegalStateException("VM already shutting down"); _EL_   } _EL_ synchronized (shutdownHooks) { _EL_     return shutdownHooks.remove(hook); _EL_   } _EL_ } _EL_ ', 'boolean checkCameraSize(CameraOptions cameraId){ _EL_   boolean sizeAvailable=false; _EL_   Camera camera=null; _EL_   Method method=getCameraOpenMethod(); _EL_   if (method != null) { _EL_     try { _EL_       camera=(Camera)method.invoke(camera,new Object[]{cameraId.getValue()}); _EL_     } _EL_  catch (    Exception e) { _EL_       camera=Camera.open(); _EL_     } _EL_   } _EL_  else { _EL_     camera=Camera.open(); _EL_   } _EL_   if (camera == null) { _EL_     return false; _EL_   } _EL_   Parameters param=camera.getParameters(); _EL_   List<Camera.Size> sizes=param.getSupportedPreviewSizes(); _EL_   for (  Camera.Size size : sizes) { _EL_     if ((size.width == H264Config.QVGA_WIDTH && size.height == H264Config.QVGA_HEIGHT) || (size.width == H264Config.CIF_WIDTH && size.height == H264Config.CIF_HEIGHT) || (size.width == H264Config.VGA_WIDTH && size.height == H264Config.VGA_HEIGHT)) { _EL_       sizeAvailable=true; _EL_       break; _EL_     } _EL_   } _EL_   camera.release(); _EL_   return sizeAvailable; _EL_ } _EL_ ', 'public void append(final String s){ _EL_   if (first) { _EL_     first=false; _EL_   } _EL_  else { _EL_     builder.append(space); _EL_   } _EL_   builder.append(s); _EL_ } _EL_ ', 'public static ByteArrayOutputStream encode(String plaintext) throws IOException, MessagingException { _EL_   ByteArrayOutputStream out=new ByteArrayOutputStream(); _EL_   byte[] in=plaintext.getBytes(); _EL_   ByteArrayOutputStream inStream=new ByteArrayOutputStream(); _EL_   inStream.write(in,0,in.length); _EL_   if ((in.length % 3) == 1) { _EL_     inStream.write(0); _EL_     inStream.write(0); _EL_   } _EL_  else   if ((in.length % 3) == 2) { _EL_     inStream.write(0); _EL_   } _EL_   inStream.writeTo(MimeUtility.encode(out,"base64")); _EL_   return out; _EL_ } _EL_ ', 'public LookupListTable lookupList(){ _EL_   if (lookupListTable.get() == null) { _EL_     lookupListTable.compareAndSet(null,gsub.createLookupList()); _EL_   } _EL_   return lookupListTable.get(); _EL_ } _EL_ ', 'public long sum(){ _EL_   return deltaSum.get(); _EL_ } _EL_ ', 'private static boolean isWordBoundary(CharSequence singleChar,String wordSeparators){ _EL_   return TextUtils.isEmpty(singleChar) || wordSeparators.contains(singleChar); _EL_ } _EL_ ', 'public void executeBlocking(String desc,BlockingConsumer<MongoClient> operation) throws InterruptedException { _EL_   while (true) { _EL_     MongoClient primary=primaryConnectionSupplier.get(); _EL_     try { _EL_       operation.accept(primary); _EL_       return; _EL_     } _EL_  catch (    Throwable t) { _EL_       errorHandler.accept(desc,t); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void write(char[] cbuf) throws java.io.IOException { _EL_   write(cbuf,0,cbuf.length); _EL_ } _EL_ ', 'protected TableViewer createTable(Composite parent,int span){ _EL_   Table table=new Table(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE| SWT.FULL_SELECTION); _EL_   GridData data=new GridData(GridData.FILL_BOTH | GridData.GRAB_HORIZONTAL); _EL_   data.horizontalSpan=span; _EL_   table.setLayoutData(data); _EL_   TableLayout layout=new TableLayout(); _EL_   layout.addColumnData(new ColumnWeightData(100,true)); _EL_   table.setLayout(layout); _EL_   TableColumn col=new TableColumn(table,SWT.NONE); _EL_   col.setResizable(true); _EL_   return new TableViewer(table); _EL_ } _EL_ ', 'public void lineTo(float x,float y){ _EL_   mPoints.add(PathPoint.lineTo(x,y)); _EL_ } _EL_ ', 'public void flagActionItems(){ _EL_   if (!mIsActionItemsStale) { _EL_     return; _EL_   } _EL_   boolean flagged=false; _EL_   for (  WeakReference<MenuPresenter> ref : mPresenters) { _EL_     final MenuPresenter presenter=ref.get(); _EL_     if (presenter == null) { _EL_       mPresenters.remove(ref); _EL_     } _EL_  else { _EL_       flagged|=presenter.flagActionItems(); _EL_     } _EL_   } _EL_   if (flagged) { _EL_     mActionItems.clear(); _EL_     mNonActionItems.clear(); _EL_     ArrayList<MenuItemImpl> visibleItems=getVisibleItems(); _EL_     final int itemsSize=visibleItems.size(); _EL_     for (int i=0; i < itemsSize; i++) { _EL_       MenuItemImpl item=visibleItems.get(i); _EL_       if (item.isActionButton()) { _EL_         mActionItems.add(item); _EL_       } _EL_  else { _EL_         mNonActionItems.add(item); _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     mActionItems.clear(); _EL_     mNonActionItems.clear(); _EL_     mNonActionItems.addAll(getVisibleItems()); _EL_   } _EL_   mIsActionItemsStale=false; _EL_ } _EL_ ', 'protected boolean[] canHandleMissing(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing,int missingLevel){ _EL_   if (missingLevel == 100) { _EL_     print("100% "); _EL_   } _EL_   print("missing"); _EL_   if (predictorMissing) { _EL_     print(" predictor"); _EL_     if (classMissing) { _EL_       print(" and"); _EL_     } _EL_   } _EL_   if (classMissing) { _EL_     print(" class"); _EL_   } _EL_   print(" values"); _EL_   printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType); _EL_   print("..."); _EL_   ArrayList<String> accepts=new ArrayList<String>(); _EL_   accepts.add("missing"); _EL_   accepts.add("value"); _EL_   accepts.add("train"); _EL_   int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2; _EL_   return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numTest,numClasses,accepts); _EL_ } _EL_ ', 'private void disableButtons(){ _EL_   for (  DeployCommand cmd : DeployCommand.values()) { _EL_     setButtonEnabled(cmd,false); _EL_   } _EL_   butDone.setEnabled(false); _EL_   setLoadEnabled(false); _EL_   setUnloadEnabled(false); _EL_   setAssaultDropEnabled(false); _EL_ } _EL_ ', 'public Artifact load(File path) throws IOException { _EL_   return load(new ArtifactName(path.getName()),path); _EL_ } _EL_ ', 'private static final boolean isHeaderEnd(StringBuilder sb){ _EL_   int len=sb.length(); _EL_   if (len > 2) { _EL_     if (LF2.equals(sb.substring(len - 2))) { _EL_       return true; _EL_     } _EL_   } _EL_   if (len > 4) { _EL_     if (CRLF2.equals(sb.substring(len - 4))) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', '@Override public Enumeration<Option> listOptions(){ _EL_   Vector<Option> result=new Vector<Option>(); _EL_   result.addElement(new Option("\\tSQL query to execute.","Q",1,"-Q <query>")); _EL_   result.addElement(new Option("\\tReturn sparse rather than normal instances.","S",0,"-S")); _EL_   result.addElement(new Option("\\tThe username to use for connecting.","U",1,"-U <username>")); _EL_   result.addElement(new Option("\\tThe password to use for connecting.","P",1,"-P <password>")); _EL_   result.add(new Option("\\tThe custom properties file to use instead of default ones,\\n" + "\\tcontaining the database parameters.\\n" + "\\t(default: none)","custom-props",1,"-custom-props <file>")); _EL_   result.addElement(new Option("\\tEnables debug output.","D",0,"-D")); _EL_   return result.elements(); _EL_ } _EL_ ', 'public TSActionDelay(TransitSectionAction tsa,int delay){ _EL_   _tsa=tsa; _EL_   _delay=delay; _EL_ } _EL_ ', 'public DAddExtensions(JDialog parent,X509ExtensionSet extensions,PublicKey authorityPublicKey,X500Name authorityCertName,BigInteger authorityCertSerialNumber,PublicKey subjectPublicKey){ _EL_   super(parent,Dialog.ModalityType.DOCUMENT_MODAL); _EL_   setTitle(res.getString("DAddExtensions.Title")); _EL_   this.extensions=(X509ExtensionSet)extensions.clone(); _EL_   this.authorityPublicKey=authorityPublicKey; _EL_   this.authorityCertName=authorityCertName; _EL_   this.authorityCertSerialNumber=authorityCertSerialNumber; _EL_   this.subjectPublicKey=subjectPublicKey; _EL_   initComponents(); _EL_ } _EL_ ', 'public void add(IMultiPoint pt){ _EL_   if (inProgress) { _EL_     throw new ConcurrentModificationException("Can\'t add point while iterator in progress"); _EL_   } _EL_   points.add(pt); _EL_ } _EL_ ', 'public static boolean isCglibProxyClass(Class<?> clazz){ _EL_   return (clazz != null && isCglibProxyClassName(clazz.getName())); _EL_ } _EL_ ', 'private DiscoveryInformation verifyDiscovered(AuthSuccess authResp,DiscoveryInformation discovered) throws DiscoveryException { _EL_   if (authResp == null || authResp.getIdentity() == null) { _EL_     _log.info("Assertion is not about an identifier"); _EL_     return null; _EL_   } _EL_   if (authResp.isVersion2())   return verifyDiscovered2(authResp,discovered); _EL_  else   return verifyDiscovered1(authResp,discovered); _EL_ } _EL_ ', 'private ConcurrentMap<GridCacheVersion,IgniteInternalTx> transactionMap(IgniteInternalTx tx){ _EL_   return (tx.near() && !tx.local()) ? nearIdMap : idMap; _EL_ } _EL_ ', 'public void stop(){ _EL_ synchronized (this) { _EL_     mStopped=true; _EL_     if (mListenerThread == null) { _EL_       return; _EL_     } _EL_   } _EL_   mListenerThread.interrupt(); _EL_   try { _EL_     if (mServerSocket != null) { _EL_       mServerSocket.close(); _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_   } _EL_ } _EL_ ', 'public static byte[] decode(byte[] data,String pri_key){ _EL_   try { _EL_     Cipher cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding"); _EL_     java.security.Key k=getPrivateKey(pri_key); _EL_     cipher.init(Cipher.DECRYPT_MODE,k); _EL_     byte[] deBytes=cipher.doFinal(data); _EL_     return deBytes; _EL_   } _EL_  catch (  Exception e) { _EL_     log.error(pri_key,e); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static int deriveARGB(Color color1,Color color2,float midPoint){ _EL_   int r=color1.getRed() + (int)((color2.getRed() - color1.getRed()) * midPoint + 0.5f); _EL_   int g=color1.getGreen() + (int)((color2.getGreen() - color1.getGreen()) * midPoint + 0.5f); _EL_   int b=color1.getBlue() + (int)((color2.getBlue() - color1.getBlue()) * midPoint + 0.5f); _EL_   int a=color1.getAlpha() + (int)((color2.getAlpha() - color1.getAlpha()) * midPoint + 0.5f); _EL_   return ((a & 0xFF) << 24) | ((r & 0xFF) << 16) | ((g & 0xFF) << 8)| (b & 0xFF); _EL_ } _EL_ ', 'static AttackStrategy create(String params){ _EL_   String[] arg=params.split(",",-1); _EL_   if (arg.length != 3) { _EL_     throw new IllegalArgumentException("Invalid compound description: \'" + params + "\'"); _EL_   } _EL_   Pair<String,String> desc=parseStrategy(arg[1]); _EL_   TargetSelectionStrategy targeter=TargetSelectionStrategyFactory.get(desc.first(),desc.second()); _EL_   desc=parseStrategy(arg[2]); _EL_   PositioningStrategy positioner=PositioningStrategyFactory.get(desc.first(),desc.second()); _EL_   return new CompoundAttackStrategy(getSubStrategy(arg[0]),targeter,positioner); _EL_ } _EL_ ', 'public OrderedThreadPoolExecutor(){ _EL_   this(DEFAULT_INITIAL_THREAD_POOL_SIZE,DEFAULT_MAX_THREAD_POOL,DEFAULT_KEEP_ALIVE,TimeUnit.SECONDS,Executors.defaultThreadFactory(),null); _EL_ } _EL_ ', 'final public void writeChunk(L locator,KVO<O>[] chunk) throws MockStaleLocatorException { _EL_ synchronized (this) { _EL_     if (staleLocators.contains(locator.getPartitionId())) { _EL_       throw new MockStaleLocatorException(locator); _EL_     } _EL_     if (!knownLocators.contains(locator.getPartitionId())) { _EL_       throw new RuntimeException("Locator not registered on DS: " + locator); _EL_     } _EL_   } _EL_   acceptWrite(locator,chunk); _EL_ } _EL_ ', 'public Event event(int id){ _EL_   if (!host) { _EL_     return (Event)events.get(new Integer(id)); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'private void initValues(){ _EL_   IPreferenceStore store=doGetPreferenceStore(); _EL_   final String storedItems=store.getString(CheckerPreferences.PREF_CHECKER_CUSTOM_CLASSES); _EL_   if (!storedItems.equals("")) { _EL_     customCheckers.setItems(storedItems.split(",")); _EL_   } _EL_ } _EL_ ', 'private void loadProperties(){ _EL_   String property=System.getProperty("carbon.properties.filepath"); _EL_   if (null == property) { _EL_     property=CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH; _EL_   } _EL_   File file=new File(property); _EL_   LOGGER.info("Property file path: " + file.getAbsolutePath()); _EL_   FileInputStream fis=null; _EL_   try { _EL_     if (file.exists()) { _EL_       fis=new FileInputStream(file); _EL_       carbonProperties.load(fis); _EL_     } _EL_   } _EL_  catch (  FileNotFoundException e) { _EL_     LOGGER.error("The file: " + CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH + " does not exist"); _EL_   } _EL_ catch (  IOException e) { _EL_     LOGGER.error("Error while reading the file: " + CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH); _EL_   } _EL_  finally { _EL_     if (null != fis) { _EL_       try { _EL_         fis.close(); _EL_       } _EL_  catch (      IOException e) { _EL_         LOGGER.error("Error while closing the file stream for file: " + CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH); _EL_       } _EL_     } _EL_   } _EL_   print(); _EL_ } _EL_ ', 'public static Date stringToDate(String strdate,@SuppressWarnings("SameParameterValue") String format){ _EL_   Date date=null; _EL_   SimpleDateFormat formatter=new SimpleDateFormat(format); _EL_   try { _EL_     date=formatter.parse(strdate); _EL_   } _EL_  catch (  ParseException e) { _EL_     e.printStackTrace(); _EL_   } _EL_   return date; _EL_ } _EL_ ', '@Nullable public static String md5(@Nullable File file,@Nullable IgniteLogger log){ _EL_   if (file != null)   return file.isFile() ? fileMd5(file,log) : directoryMd5(file,log); _EL_   return null; _EL_ } _EL_ ', 'public void init(int size,int certainty,SecureRandom random){ _EL_   this.size=size; _EL_   this.certainty=certainty; _EL_   this.random=random; _EL_ } _EL_ ', '@Override public boolean hasNext(){ _EL_   if (allRowsResult.size() == 0) { _EL_     return false; _EL_   } _EL_   totalRecordCounter++; _EL_   listRecordCounter++; _EL_   if (listRecordCounter == 0 || (listRecordCounter >= currentRowPointer.size() && currentListCounter < allRowsResult.size())) { _EL_     listRecordCounter=0; _EL_     currentRowPointer=allRowsResult.get(currentListCounter); _EL_     currentListCounter++; _EL_   } _EL_   return totalRecordCounter < totalNumberOfRecords; _EL_ } _EL_ ', 'public void trimToSize(){ _EL_   delegate.trimToSize(); _EL_ } _EL_ ', 'JSONStringer open(Scope empty,String openBracket) throws JSONException { _EL_   if (stack.isEmpty() && out.length() > 0) { _EL_     throw new JSONException("Nesting problem: multiple top-level roots"); _EL_   } _EL_   beforeValue(); _EL_   stack.add(empty); _EL_   out.append(openBracket); _EL_   return this; _EL_ } _EL_ ', 'public static final String asciiBoard(Position pos){ _EL_   StringBuilder ret=new StringBuilder(400); _EL_   String nl=String.format(Locale.US,"%n"); _EL_   ret.append("    +----+----+----+----+----+----+----+----+"); _EL_   ret.append(nl); _EL_   for (int y=7; y >= 0; y--) { _EL_     ret.append("    |"); _EL_     for (int x=0; x < 8; x++) { _EL_       ret.append(\' \'); _EL_       int p=pos.getPiece(Position.getSquare(x,y)); _EL_       if (p == Piece.EMPTY) { _EL_         boolean dark=Position.darkSquare(x,y); _EL_         ret.append(dark ? ".. |" : "   |"); _EL_       } _EL_  else { _EL_         ret.append(Piece.isWhite(p) ? \' \' : \'*\'); _EL_         String pieceName=pieceToChar(p); _EL_         if (pieceName.length() == 0)         pieceName="P"; _EL_         ret.append(pieceName); _EL_         ret.append(" |"); _EL_       } _EL_     } _EL_     ret.append(nl); _EL_     ret.append("    +----+----+----+----+----+----+----+----+"); _EL_     ret.append(nl); _EL_   } _EL_   return ret.toString(); _EL_ } _EL_ ', 'public final void clear(){ _EL_   caches.clear(); _EL_   sections.clear(); _EL_ } _EL_ ', 'static Set<Node> toNodeSet(Iterator<Node> i){ _EL_   Set<Node> nodeSet=new HashSet<Node>(); _EL_   while (i.hasNext()) { _EL_     Node n=i.next(); _EL_     nodeSet.add(n); _EL_     if (n.getNodeType() == Node.ELEMENT_NODE) { _EL_       NamedNodeMap nnm=n.getAttributes(); _EL_       for (int j=0, length=nnm.getLength(); j < length; j++) { _EL_         nodeSet.add(nnm.item(j)); _EL_       } _EL_     } _EL_   } _EL_   return nodeSet; _EL_ } _EL_ ', 'public static void runConcurrently(final Callable<Void> task,final int times) throws Exception { _EL_   final ExecutorService service=Executors.newFixedThreadPool(5); _EL_   final List<Future<?>> futures=new ArrayList<Future<?>>(); _EL_   for (int i=0; i < times; i++) { _EL_     futures.add(service.submit(task)); _EL_   } _EL_   for (  final Future<?> future : futures) { _EL_     future.get(); _EL_   } _EL_ } _EL_ ', 'public static void addPortUse(Map<StoragePort,Integer> portUseCounts,StoragePort port){ _EL_   if (!portUseCounts.containsKey(port)) { _EL_     portUseCounts.put(port,1); _EL_   } _EL_  else { _EL_     Integer newCount=portUseCounts.get(port) + 1; _EL_     portUseCounts.put(port,newCount); _EL_   } _EL_ } _EL_ ', 'public void popElemAttributeSet(){ _EL_   m_attrSetStack.pop(); _EL_ } _EL_ ', '@Override public synchronized CacheObject<V> put(K key,CacheObject<V> value){ _EL_   if (cache.size() >= maxSize) { _EL_     if (removeExpired() <= 0) { _EL_       if (cacheFullRemoveType instanceof RemoveTypeNotRemove) { _EL_         return null; _EL_       } _EL_       if (fullRemoveOne() == null) { _EL_         return null; _EL_       } _EL_     } _EL_   } _EL_   value.setEnterTime(System.currentTimeMillis()); _EL_   cache.put(key,value); _EL_   return value; _EL_ } _EL_ ', 'private String createConnectionName(){ _EL_   StringBuilder nameBuffer=new StringBuilder(); _EL_   nameBuffer.append(getConnectionType()); _EL_   nameBuffer.append("-"); _EL_   nameBuffer.append(_host); _EL_   nameBuffer.append("-"); _EL_   nameBuffer.append(_port); _EL_   return nameBuffer.toString(); _EL_ } _EL_ ', '@POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/discover") @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskResourceRep discoverHost(@PathParam("id") URI id){ _EL_   ArgValidator.checkFieldUriType(id,Host.class,"id"); _EL_   Host host=queryObject(Host.class,id,true); _EL_   return doDiscoverHost(host); _EL_ } _EL_ ', 'public static final void readFully(InputStream i,byte b[],int off,int len) throws IOException { _EL_   if (len < 0) { _EL_     throw new IndexOutOfBoundsException(); _EL_   } _EL_   int n=0; _EL_   while (n < len) { _EL_     int count=i.read(b,off + n,len - n); _EL_     if (count < 0) { _EL_       throw new EOFException(); _EL_     } _EL_     n+=count; _EL_   } _EL_ } _EL_ ', 'private void addOrUpdateNode(AStarNode newNode){ _EL_   boolean found=false; _EL_   for (  AStarNode toUpdate : closedNodes) { _EL_     if (newNode.equals(toUpdate)) { _EL_       toUpdate.updateDistance(newNode.getG(),newNode.parent); _EL_       found=true; _EL_       break; _EL_     } _EL_   } _EL_   if (!found) { _EL_     openQueue.offer(newNode); _EL_   } _EL_ } _EL_ ', 'public static File toFile(JavaFileObject javaFileObject){ _EL_   return new File(javaFileObject.getName()); _EL_ } _EL_ ', 'public static MultiSegmentPowerLawBipartiteGraph buildRandomMultiSegmentBipartiteGraph(int maxNumSegments,int maxNumEdgesPerSegment,int leftSize,int rightSize,double edgeProbability,Random random){ _EL_   MultiSegmentPowerLawBipartiteGraph multiSegmentPowerLawBipartiteGraph=new MultiSegmentPowerLawBipartiteGraph(maxNumSegments,maxNumEdgesPerSegment,leftSize / 2,(int)(rightSize * edgeProbability / 2),2.0,rightSize / 2,(int)(leftSize * edgeProbability / 2),2.0,new IdentityEdgeTypeMask(),new NullStatsReceiver()); _EL_   for (int i=0; i < leftSize; i++) { _EL_     for (int j=0; j < rightSize; j++) { _EL_       if (random.nextDouble() < edgeProbability) { _EL_         multiSegmentPowerLawBipartiteGraph.addEdge(i,j,(byte)0); _EL_       } _EL_     } _EL_   } _EL_   return multiSegmentPowerLawBipartiteGraph; _EL_ } _EL_ ', 'public static String execute(String command){ _EL_   return SubprocessUttility.execute(command); _EL_ } _EL_ ', 'public synchronized void updateProgress(final int value){ _EL_   final Thread t=Thread.currentThread(); _EL_   final MyInteger v=mIndividualThreadProgress.get(t); _EL_   if (v == null) { _EL_     mIndividualThreadProgress.put(t,new MyInteger(value)); _EL_   } _EL_  else { _EL_     v.setValue(value); _EL_   } _EL_   if (value > mLastReportedProgress) { _EL_     int min=Integer.MAX_VALUE; _EL_     for (    final MyInteger m : mIndividualThreadProgress.values()) { _EL_       if (m.getValue() < min) { _EL_         min=m.getValue(); _EL_       } _EL_     } _EL_     if (min > mLastReportedProgress) { _EL_       mLastReportedProgress=min; _EL_       Diagnostic.progress("Processed " + min + "% of "+ mName); _EL_     } _EL_   } _EL_ } _EL_ ', 'private ContextHandler createContextHandler(String directory,boolean isInJar,File installRootDirectory,int expiresInSeconds){ _EL_   final ContextHandler contextHandler=new ContextHandler(); _EL_   final ResourceHandler resourceHandler=new ExpiresResourceHandler(expiresInSeconds); _EL_   final String directoryWithSlash="/" + directory; _EL_   contextHandler.setContextPath(directoryWithSlash); _EL_   Resource directoryResource=getDirectoryResource(directory,isInJar,installRootDirectory); _EL_   directoryResource=new JsMinifyingResource(directoryResource); _EL_   if (isInJar) { _EL_     directoryResource=new CachingResource(directoryResource,directoryWithSlash); _EL_   } _EL_   resourceHandler.setBaseResource(directoryResource); _EL_   if (!isInJar) { _EL_     resourceHandler.setMinMemoryMappedContentLength(0); _EL_   } _EL_   contextHandler.setHandler(resourceHandler); _EL_   return contextHandler; _EL_ } _EL_ ', 'public boolean startsWith(java.lang.CharSequence prefix){ _EL_   return startsWith(prefix,0); _EL_ } _EL_ ', 'private List<ContainerInitializer> jspInitializers(){ _EL_   JettyJasperInitializer sci=new JettyJasperInitializer(); _EL_   ContainerInitializer initializer=new ContainerInitializer(sci,null); _EL_   List<ContainerInitializer> initializers=new ArrayList<ContainerInitializer>(); _EL_   initializers.add(initializer); _EL_   return initializers; _EL_ } _EL_ ', 'public static TempPath createDirectory() throws IOException { _EL_   return wrap(Files.createTempDirectory(PREFIX)); _EL_ } _EL_ ', '@Override public boolean input(Instance instance){ _EL_   if (getInputFormat() == null) { _EL_     throw new IllegalStateException("No input instance format defined"); _EL_   } _EL_   if (m_NewBatch) { _EL_     resetQueue(); _EL_     m_NewBatch=false; _EL_   } _EL_   push((Instance)instance.copy()); _EL_   return true; _EL_ } _EL_ ', 'public Collection<String> listColumns(String table) throws DatabaseException { _EL_   Collection<String> result=new ArrayList<String>(); _EL_   ResultSet rs=null; _EL_   try { _EL_     DatabaseMetaData dbm=connection.getMetaData(); _EL_     rs=dbm.getColumns(null,null,table,null); _EL_     while (rs.next()) { _EL_       result.add(rs.getString("COLUMN_NAME")); _EL_     } _EL_   } _EL_  catch (  SQLException e) { _EL_     throw new DatabaseException(e); _EL_   } _EL_  finally { _EL_     if (rs != null) { _EL_       try { _EL_         rs.close(); _EL_       } _EL_  catch (      SQLException e) { _EL_       } _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public void addCreatedResource(Location location,Resource resource){ _EL_   resourceList.add(resource); _EL_   locationToResourceMap.put(location,resource); _EL_ } _EL_ ', 'protected boolean isQuorumMaintained(){ _EL_   if (nodeCount == 1) { _EL_     log.info("There\'s no way to maintain quorum on single node deployments. Proceed anyway."); _EL_     return true; _EL_   } _EL_   int quorumNodeCnt=nodeCount / 2 + 1; _EL_   CoordinatorClient coordinatorClient=coordinator.getCoordinatorClient(); _EL_   List<Service> allActiveDbsvcs=coordinatorClient.locateAllSvcsAllVers(Constants.DBSVC_NAME); _EL_   List<String> otherActiveDbsvcIds=new ArrayList<>(); _EL_   String mySvcId=coordinator.getMySvcId(); _EL_   String localDbSvcId="db" + mySvcId.substring(mySvcId.lastIndexOf("-")); _EL_   for (  Service activeDbsvc : allActiveDbsvcs) { _EL_     if (!localDbSvcId.equals(activeDbsvc.getId())) { _EL_       otherActiveDbsvcIds.add(activeDbsvc.getId()); _EL_     } _EL_   } _EL_   log.info("List of active dbsvc instances on other nodes: {}, expect {} instances to maintain quorum",otherActiveDbsvcIds,quorumNodeCnt); _EL_   boolean isMaintained=otherActiveDbsvcIds.size() >= quorumNodeCnt; _EL_   if (!isMaintained) { _EL_     log.info("quorum would lost if reboot the current node. Retrying..."); _EL_   } _EL_   return isMaintained; _EL_ } _EL_ ', 'public static void scheduleNextAlarm(Context context){ _EL_   scheduleNextAlarm(context,AlertUtils.createAlarmManager(context),REMINDER_QUERY_BATCH_SIZE,System.currentTimeMillis()); _EL_ } _EL_ ', 'public void requestStop(){ _EL_   stopRequested.set(true); _EL_ } _EL_ ', '@SafeVarargs public static <T>T[] join(IntFunction<T[]> arrayFunction,T[]... arrays){ _EL_   if (arrays.length == 0) { _EL_     return arrayFunction.apply(0); _EL_   } _EL_   if (arrays.length == 1) { _EL_     return arrays[0]; _EL_   } _EL_   if (arrays.length == 2) { _EL_     return join(arrayFunction,arrays[0],arrays[1]); _EL_   } _EL_   T[] notNull=null; _EL_   int finalSize=0; _EL_   int nullArrays=0; _EL_   List<T> list=new ArrayList<>(arrays.length * 10); _EL_   for (  T[] array : arrays) { _EL_     if ((array == null) || (array.length == 0)) { _EL_       nullArrays++; _EL_     } _EL_  else { _EL_       notNull=array; _EL_       finalSize+=array.length; _EL_       Collections.addAll(list,array); _EL_     } _EL_   } _EL_   if (nullArrays == arrays.length) { _EL_     return arrayFunction.apply(0); _EL_   } _EL_   if (nullArrays == (arrays.length - 1)) { _EL_     return notNull; _EL_   } _EL_   return list.toArray(arrayFunction.apply(list.size())); _EL_ } _EL_ ', 'private static Set<String> splitPath(RelaxedURL url){ _EL_   Set<String> results=new HashSet<String>(); _EL_   Set<String> queries=normalizeQuery(url.getQuery()); _EL_   results.add("/"); _EL_   for (  String q : queries) { _EL_     results.add("/?" + q); _EL_   } _EL_   Set<String> paths=splitPath(url.getPath()); _EL_   results.addAll(paths); _EL_   for (  String p : paths) { _EL_     for (    String q : queries) { _EL_       results.add(p + "?" + q); _EL_     } _EL_   } _EL_   return results; _EL_ } _EL_ ', 'public ActionForward initBestSellingReport(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws ApplicationException, OperationException { _EL_   ActionForward fwd=init(mapping,form,request,response); _EL_   if (fwd != null)   return fwd; _EL_   SellingItemForm reportForm=(SellingItemForm)form; _EL_   String timePeriod=ReportDateManager.TODAY; _EL_   String dateRange=Constants.FIXED_DATE_RANGE; _EL_   reportForm.setTimePeriod(timePeriod); _EL_   reportForm.setDateRange(dateRange); _EL_   reportForm.setFromDate(""); _EL_   reportForm.setToDate(""); _EL_   reportForm.validate(mapping,request); _EL_   return mapping.findForward(INIT_BEST_SELLING_REPORT); _EL_ } _EL_ ', '@Override public void transactionBegin(){ _EL_   for (  BigdataGraphListener listener : listeners) { _EL_     listener.transactionBegin(); _EL_   } _EL_ } _EL_ ', 'public synchronized void add(Job job){ _EL_   boolean canRunImmediately=dagManager.addJob(job); _EL_   if (canRunImmediately) { _EL_     LOG.debug("Job " + job + " is ready to run."); _EL_     jobsToRun.add(job); _EL_   } _EL_   incrementSubmittedJobCount(); _EL_ } _EL_ ', 'public void addConstant(ConstantPoolEntry entry){ _EL_   if (entry instanceof Utf8Constant) { _EL_     Utf8Constant utf8=(Utf8Constant)entry; _EL_     _utf8Map.put(utf8.getValue(),utf8); _EL_   } _EL_   _entries.add(entry); _EL_ } _EL_ ', 'public void addData(ArrayList<ChartSet> data){ _EL_   this.data=data; _EL_ } _EL_ ', 'static void writeRule(ZoneOffsetTransitionRule rule,DataOutput out) throws IOException { _EL_   int month=rule.month; _EL_   byte dom=rule.dom; _EL_   int dow=rule.dow; _EL_   LocalTime time=rule.time; _EL_   boolean timeEndOfDay=rule.timeEndOfDay; _EL_   TimeDefinition timeDefinition=rule.timeDefinition; _EL_   ZoneOffset standardOffset=rule.standardOffset; _EL_   ZoneOffset offsetBefore=rule.offsetBefore; _EL_   ZoneOffset offsetAfter=rule.offsetAfter; _EL_   int timeSecs=(timeEndOfDay ? 86400 : time.toSecondOfDay()); _EL_   int stdOffset=standardOffset.getTotalSeconds(); _EL_   int beforeDiff=offsetBefore.getTotalSeconds() - stdOffset; _EL_   int afterDiff=offsetAfter.getTotalSeconds() - stdOffset; _EL_   int timeByte=(timeSecs % 3600 == 0 ? (timeEndOfDay ? 24 : time.getHour()) : 31); _EL_   int stdOffsetByte=(stdOffset % 900 == 0 ? stdOffset / 900 + 128 : 255); _EL_   int beforeByte=(beforeDiff == 0 || beforeDiff == 1800 || beforeDiff == 3600 ? beforeDiff / 1800 : 3); _EL_   int afterByte=(afterDiff == 0 || afterDiff == 1800 || afterDiff == 3600 ? afterDiff / 1800 : 3); _EL_   int dowByte=(dow == -1 ? 0 : dow); _EL_   int b=(month << 28) + ((dom + 32) << 22) + (dowByte << 19)+ (timeByte << 14)+ (timeDefinition.ordinal() << 12)+ (stdOffsetByte << 4)+ (beforeByte << 2)+ afterByte; _EL_   out.writeInt(b); _EL_   if (timeByte == 31) { _EL_     out.writeInt(timeSecs); _EL_   } _EL_   if (stdOffsetByte == 255) { _EL_     out.writeInt(stdOffset); _EL_   } _EL_   if (beforeByte == 3) { _EL_     out.writeInt(offsetBefore.getTotalSeconds()); _EL_   } _EL_   if (afterByte == 3) { _EL_     out.writeInt(offsetAfter.getTotalSeconds()); _EL_   } _EL_ } _EL_ ', '@SuppressWarnings("unchecked typecast") public static <T>TypeSerializer<T> deserialize(byte[] bytes) throws IOException { _EL_   ByteArrayInputStream bis=new ByteArrayInputStream(bytes); _EL_   ObjectInput in=null; _EL_   try { _EL_     in=new ObjectInputStream(bis); _EL_     return (TypeSerializer<T>)in.readObject(); _EL_   } _EL_  catch (  ClassNotFoundException e) { _EL_     throw new IOException("Could not deserialize class"); _EL_   } _EL_  finally { _EL_     try { _EL_       bis.close(); _EL_     } _EL_  catch (    IOException ex) { _EL_     } _EL_     try { _EL_       if (in != null) { _EL_         in.close(); _EL_       } _EL_     } _EL_  catch (    IOException ex) { _EL_     } _EL_   } _EL_ } _EL_ ', 'public void showSelectedNeuronProperties(){ _EL_   NeuronDialog dialog=NeuronDialog.createNeuronDialog(getSelectedNeurons()); _EL_   dialog.setModalityType(Dialog.ModalityType.MODELESS); _EL_   dialog.pack(); _EL_   dialog.setLocationRelativeTo(null); _EL_   dialog.setVisible(true); _EL_ } _EL_ ', 'private static boolean hasChangesOfChildren(long last,PageContext pc,Class clazz){ _EL_   java.lang.reflect.Method[] methods=clazz.getMethods(); _EL_   java.lang.reflect.Method method; _EL_   Class[] params; _EL_   for (int i=0; i < methods.length; i++) { _EL_     method=methods[i]; _EL_     if (method.getDeclaringClass() == clazz) { _EL_       if (_hasChangesOfChildren(pc,last,method.getReturnType()))       return true; _EL_       params=method.getParameterTypes(); _EL_       for (int y=0; y < params.length; y++) { _EL_         if (_hasChangesOfChildren(pc,last,params[y]))         return true; _EL_       } _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public T webImage(String url){ _EL_   return webImage(url,true,false,0xFF000000); _EL_ } _EL_ ', 'private Map<Installment,List<Receipt>> consolidateTuplesInstallmentWise(final List<InstallmentReceiptTuple> tuples){ _EL_   final Map<Installment,List<Receipt>> consolidated=new HashMap<Installment,List<Receipt>>(); _EL_   for (  final InstallmentReceiptTuple t : tuples) { _EL_     List<Receipt> receiptsForInstallment=consolidated.get(t.installment); _EL_     if (receiptsForInstallment == null) { _EL_       receiptsForInstallment=new ArrayList<Receipt>(); _EL_       consolidated.put(t.installment,receiptsForInstallment); _EL_     } _EL_     if (!receiptsForInstallment.contains(t.receipt))     receiptsForInstallment.add(t.receipt); _EL_   } _EL_   LOGGER.info("consolidateTuplesInstallmentWise() returned: " + consolidated); _EL_   return consolidated; _EL_ } _EL_ ', 'public static boolean isValidEmail(String email){ _EL_   final String emailPattern="^[_A-Za-z0-9-]+(\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$"; _EL_   Matcher matcher; _EL_   Pattern pattern=Pattern.compile(emailPattern); _EL_   matcher=pattern.matcher(email); _EL_   if (matcher != null)   return matcher.matches(); _EL_  else   return false; _EL_ } _EL_ ', 'public void add(LineMergeDirectedEdge directedEdge){ _EL_   directedEdges.add(directedEdge); _EL_ } _EL_ ', 'public static ApplicationXml parseApplicationXmlFromFile(File file,EntityResolver entityResolver) throws IOException, JDOMException { _EL_   InputStream in=null; _EL_   try { _EL_     in=new FileInputStream(file); _EL_     return parseApplicationXml(in,entityResolver); _EL_   } _EL_   finally { _EL_     if (in != null) { _EL_       try { _EL_         in.close(); _EL_       } _EL_  catch (      IOException ioe) { _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public String report(){ _EL_   StringBuffer report=new StringBuffer(); _EL_   intHashTable=new int[table.tableSize]; _EL_   calculateSlotUsage(); _EL_   int max=maxCollisions(); _EL_   int[] slotUsageCount=new int[max + 1]; _EL_   for (  int i : intHashTable) { _EL_     slotUsageCount[i]++; _EL_   } _EL_   report.append("Total number of entries: " + numEntries + "\\n"); _EL_   report.append("   Load factor:" + (numEntries / (1.0f * table.tableSize) + "\\n\\n")); _EL_   float weightedAvg=0.0f; _EL_   int numNonEmpty=0; _EL_   report.append("Number of hits\\tNumber of slots\\n"); _EL_   for (int j=0; j <= max; j++) { _EL_     if (slotUsageCount[j] != 0) { _EL_       report.append(j + "\\t" + slotUsageCount[j]+ "\\n"); _EL_       if (j != 0) { _EL_         weightedAvg+=slotUsageCount[j] * j; _EL_         numNonEmpty+=slotUsageCount[j]; _EL_       } _EL_     } _EL_   } _EL_   weightedAvg/=numNonEmpty; _EL_   report.append("\\n  Slot statistics: min=" + minCollisions() + ", max="+ max+ ", weightedAvg:"+ weightedAvg); _EL_   return report.toString(); _EL_ } _EL_ ', 'public void addSubscriptionToStore(final String topic,final String clientId){ _EL_   final ClientTopicCouple subscription=new ClientTopicCouple(clientId,topic); _EL_   if (!topics.contains(subscription)) { _EL_     logger.debug("Added subscription " + topic + " ("+ clientId+ ") to store"); _EL_     subscriptionsStore.add(subscription); _EL_     topics.add(topic); _EL_   } _EL_ } _EL_ ', 'public boolean zip(String zipLocation,String toBeZippedName){ _EL_   boolean ret=false; _EL_   if (verbose)   Debug.put("zip"); _EL_   File toBeZipped=new File(toBeZippedName); _EL_   if (toBeZipped.exists()) { _EL_     try { _EL_       FileUtils.saveZipFile(zipLocation,toBeZipped); _EL_       ret=true; _EL_     } _EL_  catch (    FileNotFoundException e) { _EL_       e.printStackTrace(); _EL_     } _EL_ catch (    IOException e) { _EL_       e.printStackTrace(); _EL_     } _EL_   } _EL_   return ret; _EL_ } _EL_ ', 'private HashMap<Integer,Boolean> generateExpandedStateMap(){ _EL_   HashMap<Integer,Boolean> parentListItemHashMap=new HashMap<>(); _EL_   int childCount=0; _EL_   Object listItem; _EL_   ParentWrapper parentWrapper; _EL_   int listItemCount=mItemList.size(); _EL_   for (int i=0; i < listItemCount; i++) { _EL_     if (mItemList.get(i) != null) { _EL_       listItem=getListItem(i); _EL_       if (listItem instanceof ParentWrapper) { _EL_         parentWrapper=(ParentWrapper)listItem; _EL_         parentListItemHashMap.put(i - childCount,parentWrapper.isExpanded()); _EL_       } _EL_  else { _EL_         childCount++; _EL_       } _EL_     } _EL_   } _EL_   return parentListItemHashMap; _EL_ } _EL_ ', 'public void addAudioPacketListener(Listener<AudioPacket> listener){ _EL_   mAudioPacketBroadcaster.addListener(listener); _EL_ } _EL_ ', 'public DeltaCRLIndicatorExtension(Boolean critical,Object value) throws IOException { _EL_   super(PKIXExtensions.DeltaCRLIndicator_Id,critical.booleanValue(),value,NAME,LABEL); _EL_ } _EL_ ', 'public JavaEnvironment(File javaPath){ _EL_   Objects.requireNonNull(javaPath); _EL_   this.javaPath=javaPath; _EL_ } _EL_ ', 'void addCallback(JSObject source,String method,JSFunction callback,boolean async){ _EL_   String key=source.toJSPointer() + "." + method; _EL_   callbacks.put(key,callback); _EL_   String id=JSObject.ID_KEY; _EL_   String self=source.toJSPointer(); _EL_   String js=self + "." + method+ "=function(){"+ "var len=arguments.length;var url=\'/!cn1command/"+ self+ "."+ method+ "?\'; "+ "for (var i=0; i<len; i++){"+ "var val = arguments[i]; var strval=val;"+ "if ( (typeof(val) == \'object\') || (typeof(val) == \'function\')){ "+ "var id = val."+ id+ "; "+ "if (typeof(id)==\'undefined\' || typeof("+ jsLookupTable+ "[id]) == \'undefined\' || "+ jsLookupTable+ "[id]."+ id+ "!=id){"+ jsLookupTable+ ".push(val); id="+ jsLookupTable+ ".indexOf(val); Object.defineProperty(val,\\""+ id+ "\\",{value:id, enumerable:false});"+ "}"+ "strval=\'"+ jsLookupTable+ "[\'+id+\']\'"+ "}"+ "url += encodeURIComponent(typeof(val))+\'=\'+encodeURIComponent(strval);"+ "if (i < len-1){ url += \'&\';}"+ "} window.location.href=url;"+ "}"; _EL_   exec(js,async); _EL_ } _EL_ ', 'public void removeAllBlocksFromSection(){ _EL_   for (int i=mBlockEntries.size(); i > 0; i--) { _EL_     Block b=mBlockEntries.get(i - 1); _EL_     if (b != null) { _EL_       b.removePropertyChangeListener(mBlockListeners.get(i - 1)); _EL_     } _EL_     mBlockListeners.remove(i - 1); _EL_     mBlockEntries.remove(i - 1); _EL_   } _EL_   for (int i=mForwardEntryPoints.size(); i > 0; i--) { _EL_     mForwardEntryPoints.remove(i - 1); _EL_   } _EL_   for (int i=mReverseEntryPoints.size(); i > 0; i--) { _EL_     mReverseEntryPoints.remove(i - 1); _EL_   } _EL_   initializationNeeded=false; _EL_ } _EL_ ', 'public static void writeStringToFile(Path file,String text) throws IOException { _EL_   byte[] buf=text.getBytes(StandardCharsets.UTF_8); _EL_   Files.write(file,buf); _EL_ } _EL_ ', 'private static boolean isOperatorVariableAccess(final INaviOperandTreeNode node){ _EL_   final List<INaviOperandTreeNode> children=node.getChildren(); _EL_   if (children.size() == 2) { _EL_     final INaviOperandTreeNode child0=children.get(0); _EL_     final INaviOperandTreeNode child1=children.get(1); _EL_     return isVariable(child0) ^ isVariable(child1); _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public void addAction(UpdateAction action){ _EL_   actionList.add(action); _EL_   for (  UpdateManagerListener listener : listeners) { _EL_     listener.actionAdded(action); _EL_   } _EL_ } _EL_ ', 'public void load(DataInput rafIn) throws IOException, MaryConfigurationException { _EL_   int numIdx=rafIn.readInt(); _EL_   idxInterval=rafIn.readInt(); _EL_   if (idxInterval <= 0) { _EL_     throw new MaryConfigurationException("read negative index interval -- file seems corrupt"); _EL_   } _EL_   bytePtrs=new long[numIdx]; _EL_   timePtrs=new long[numIdx]; _EL_   int numBytesToRead=16 * numIdx + 16; _EL_   byte[] data=new byte[numBytesToRead]; _EL_   rafIn.readFully(data); _EL_   DataInput bufIn=new DataInputStream(new ByteArrayInputStream(data)); _EL_   for (int i=0; i < numIdx; i++) { _EL_     bytePtrs[i]=bufIn.readLong(); _EL_     timePtrs[i]=bufIn.readLong(); _EL_     if (i > 0) { _EL_       if (bytePtrs[i] < bytePtrs[i - 1] || timePtrs[i] < timePtrs[i - 1]) { _EL_         throw new MaryConfigurationException("File seems corrupt: Pointer positions in index fields are not strictly monotonously rising"); _EL_       } _EL_     } _EL_   } _EL_   bufIn.readLong(); _EL_   bufIn.readLong(); _EL_ } _EL_ ', 'public URL find(String classname){ _EL_   String jarname="/" + classname.replace(\'.\',\'/\') + ".class"; _EL_   return thisClass.getResource(jarname); _EL_ } _EL_ ', 'public void signoff(String uniqueID){ _EL_   Debug.message("crfp","CRFPServer: Client" + uniqueID + " signing off!"); _EL_   caches.remove(uniqueID); _EL_   viewAttributeLists.remove(uniqueID); _EL_   timestamps.remove(uniqueID); _EL_ } _EL_ ', 'private String createNonCGSrdfPairStepsOnEmptyGroup(List<VolumeDescriptor> sourceDescriptors,List<VolumeDescriptor> targetDescriptors,RemoteDirectorGroup group,Map<URI,Volume> uriVolumeMap,String waitFor,Workflow workflow){ _EL_   StorageSystem system=dbClient.queryObject(StorageSystem.class,group.getSourceStorageSystemUri()); _EL_   URI vpoolChangeUri=getVirtualPoolChangeVolume(sourceDescriptors); _EL_   log.info("VPoolChange URI {}",vpoolChangeUri); _EL_   List<URI> sourceURIs=VolumeDescriptor.getVolumeURIs(sourceDescriptors); _EL_   List<URI> targetURIs=new ArrayList<>(); _EL_   for (  URI sourceURI : sourceURIs) { _EL_     Volume source=uriVolumeMap.get(sourceURI); _EL_     StringSet srdfTargets=source.getSrdfTargets(); _EL_     for (    String targetStr : srdfTargets) { _EL_       URI targetURI=URI.create(targetStr); _EL_       targetURIs.add(targetURI); _EL_     } _EL_   } _EL_   Method createListMethod=createListReplicasMethod(system.getId(),sourceURIs,targetURIs,vpoolChangeUri,true); _EL_   Method rollbackMethod=rollbackSRDFLinksMethod(system.getId(),sourceURIs,targetURIs,false); _EL_   String stepId=workflow.createStep(CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_GROUP,CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_DESC,waitFor,system.getId(),system.getSystemType(),getClass(),createListMethod,rollbackMethod,null); _EL_   return stepId; _EL_ } _EL_ ', 'public static Long downsamplerTimestamp(Long millitimestamp,long windowSize){ _EL_   return millitimestamp - (millitimestamp % windowSize); _EL_ } _EL_ ', 'public void error(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException { _EL_   String formattedMsg=e.getMessage(); _EL_   SAXSourceLocator locator=getLocator(); _EL_   ErrorListener handler=m_stylesheetProcessor.getErrorListener(); _EL_   try { _EL_     handler.error(new TransformerException(formattedMsg,locator)); _EL_   } _EL_  catch (  TransformerException te) { _EL_     throw new org.xml.sax.SAXException(te); _EL_   } _EL_ } _EL_ ', 'private void putHead(String key,TemplateSubPatternAssociation assoc){ _EL_   if (key.equals(PsuedoNames.PSEUDONAME_TEXT))   m_textPatterns=assoc; _EL_  else   if (key.equals(PsuedoNames.PSEUDONAME_ROOT))   m_docPatterns=assoc; _EL_  else   if (key.equals(PsuedoNames.PSEUDONAME_COMMENT))   m_commentPatterns=assoc; _EL_   m_patternTable.put(key,assoc); _EL_ } _EL_ ', 'public UnionPathIterator(Compiler compiler,int opPos) throws javax.xml.transform.TransformerException { _EL_   super(); _EL_   opPos=OpMap.getFirstChildPos(opPos); _EL_   loadLocationPaths(compiler,opPos,0); _EL_ } _EL_ ', 'public IStatus run(IProgressMonitor monitor) throws InvocationTargetException { _EL_   ZipFile zipFile=null; _EL_   FileOutputStream fos=null; _EL_   BufferedOutputStream dest=null; _EL_   BufferedInputStream is=null; _EL_   jobStatus=Status.OK_STATUS; _EL_   try { _EL_     zipFile=new ZipFile(archive); _EL_     monitor.beginTask("Uncompressing " + archive.getName(),zipFile.size()); _EL_     Enumeration<? extends ZipEntry> entries=zipFile.entries(); _EL_     while (entries.hasMoreElements()) { _EL_       ZipEntry zipEntry=entries.nextElement(); _EL_       String currentEntry=zipEntry.getName(); _EL_       File destFile=new File(targetDir,currentEntry); _EL_       File destinationParent=destFile.getParentFile(); _EL_       if (!zipEntry.isDirectory()) { _EL_         destinationParent.mkdirs(); _EL_         is=new BufferedInputStream(zipFile.getInputStream(zipEntry)); _EL_         int numBytesRead; _EL_         byte bytes[]=new byte[BUFSIZE]; _EL_         fos=new FileOutputStream(destFile); _EL_         dest=new BufferedOutputStream(fos,BUFSIZE); _EL_         while ((numBytesRead=is.read(bytes,0,BUFSIZE)) != -1) { _EL_           dest.write(bytes,0,numBytesRead); _EL_         } _EL_         dest.flush(); _EL_       } _EL_  else { _EL_         destFile.mkdirs(); _EL_       } _EL_       monitor.worked(1); _EL_       if (monitor.isCanceled()) { _EL_         jobStatus=Status.CANCEL_STATUS; _EL_         break; _EL_       } _EL_     } _EL_     if (!monitor.isCanceled()) { _EL_       jobStatus=Status.OK_STATUS; _EL_     } _EL_   } _EL_  catch (  ZipException ze) { _EL_     String errormsg=errorMessage("It may be corrupted?"); _EL_     jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,errormsg); _EL_     CorePluginLog.logError(ze,errormsg); _EL_   } _EL_ catch (  IOException ioe) { _EL_     String errormsg=errorMessage(); _EL_     jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,errormsg); _EL_     CorePluginLog.logError(ioe,errormsg); _EL_   } _EL_  finally { _EL_     try { _EL_       if (zipFile != null) { _EL_         zipFile.close(); _EL_       } _EL_       if (is != null) { _EL_         is.close(); _EL_       } _EL_       if (dest != null) { _EL_         dest.close(); _EL_       } _EL_     } _EL_  catch (    IOException ioe) { _EL_       String errormsg=errorMessage(); _EL_       jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,errormsg); _EL_       CorePluginLog.logError(ioe,errormsg); _EL_     } _EL_   } _EL_   return jobStatus; _EL_ } _EL_ ', 'protected void errorMessage(String msg) throws IOException { _EL_   String str=msg + ", read " + m_Tokenizer.toString(); _EL_   if (m_Lines > 0) { _EL_     int line=Integer.parseInt(str.replaceAll(".* line ","")); _EL_     str=str.replaceAll(" line .*"," line " + (m_Lines + line - 1)); _EL_   } _EL_   throw new IOException(str); _EL_ } _EL_ ', 'public static void spooky4(final BitVector bv,final long prefixLength,final long seed,final long[] state,final long[] tuple){ _EL_   long h0, h1, h2, h3; _EL_   h0=seed; _EL_   h1=seed; _EL_   h2=ARBITRARY_BITS; _EL_   h3=ARBITRARY_BITS; _EL_   long pos; _EL_   if (prefixLength >= 2 * Long.SIZE) { _EL_     final int p=4 * (int)((prefixLength - 2 * Long.SIZE) / (4 * Long.SIZE)); _EL_     h0=state[p + 0]; _EL_     h1=state[p + 1]; _EL_     h2=state[p + 2]; _EL_     h3=state[p + 3]; _EL_     pos=p * Long.SIZE + 2 * Long.SIZE; _EL_   } _EL_  else   pos=0; _EL_   long remaining=prefixLength - pos; _EL_   if (remaining >= Long.SIZE * 2) { _EL_     h0+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE); _EL_     h1+=bv.getLong(pos + 1 * Long.SIZE,pos + 2 * Long.SIZE); _EL_     remaining-=2 * Long.SIZE; _EL_     pos+=2 * Long.SIZE; _EL_   } _EL_   if (remaining > Long.SIZE) { _EL_     h2+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE); _EL_     h3+=bv.getLong(pos + 1 * Long.SIZE,prefixLength); _EL_   } _EL_  else   if (remaining > 0) { _EL_     h2+=bv.getLong(pos,prefixLength); _EL_   } _EL_  else { _EL_     h2+=ARBITRARY_BITS; _EL_     h3+=ARBITRARY_BITS; _EL_   } _EL_   h0+=prefixLength; _EL_   h3^=h2; _EL_   h2=Long.rotateLeft(h2,15); _EL_   h3+=h2; _EL_   h0^=h3; _EL_   h3=Long.rotateLeft(h3,52); _EL_   h0+=h3; _EL_   h1^=h0; _EL_   h0=Long.rotateLeft(h0,26); _EL_   h1+=h0; _EL_   h2^=h1; _EL_   h1=Long.rotateLeft(h1,51); _EL_   h2+=h1; _EL_   h3^=h2; _EL_   h2=Long.rotateLeft(h2,28); _EL_   h3+=h2; _EL_   h0^=h3; _EL_   h3=Long.rotateLeft(h3,9); _EL_   h0+=h3; _EL_   h1^=h0; _EL_   h0=Long.rotateLeft(h0,47); _EL_   h1+=h0; _EL_   h2^=h1; _EL_   h1=Long.rotateLeft(h1,54); _EL_   h2+=h1; _EL_   h3^=h2; _EL_   h2=Long.rotateLeft(h2,32); _EL_   h3+=h2; _EL_   h0^=h3; _EL_   h3=Long.rotateLeft(h3,25); _EL_   h0+=h3; _EL_   h1^=h0; _EL_   h0=Long.rotateLeft(h0,63); _EL_   h1+=h0; _EL_ switch (tuple.length) { _EL_ case 4: _EL_     tuple[3]=h3; _EL_ case 3: _EL_   tuple[2]=h2; _EL_ case 2: _EL_ tuple[1]=h1; _EL_ case 1: _EL_ tuple[0]=h0; _EL_ } _EL_ } _EL_ ', 'public boolean hasNext(){ _EL_   if (deal > 32000) { _EL_     sc.close(); _EL_   } _EL_   return (deal <= 32000); _EL_ } _EL_ ', 'private void filterNodeMap(ConcurrentMap<String,Collection<ClusterNode>> map,final ClusterNode exclNode){ _EL_   for (  String cacheName : registeredCaches.keySet()) { _EL_     String maskedName=maskNull(cacheName); _EL_     while (true) { _EL_       Collection<ClusterNode> oldNodes=map.get(maskedName); _EL_       if (oldNodes == null || oldNodes.isEmpty())       break; _EL_       Collection<ClusterNode> newNodes=new ArrayList<>(oldNodes); _EL_       if (!newNodes.remove(exclNode))       break; _EL_       if (map.replace(maskedName,oldNodes,newNodes))       break; _EL_     } _EL_   } _EL_ } _EL_ ', 'public void storeDevice(Device d){ _EL_   if (!isMaster)   return; _EL_   if (d == null)   return; _EL_   long now=System.nanoTime(); _EL_   writeUpdatedDeviceToStorage(d); _EL_   lastWriteTimes.put(d.getDeviceKey(),now); _EL_ } _EL_ ', 'private static void adjustAbs(double[] array,int lower,int upper){ _EL_   int j, k; _EL_   double temp; _EL_   j=lower; _EL_   k=lower * 2; _EL_   while (k <= upper) { _EL_     if ((k < upper) && (Math.abs(array[k - 1]) < Math.abs(array[k]))) { _EL_       k+=1; _EL_     } _EL_     if (Math.abs(array[j - 1]) < Math.abs(array[k - 1])) { _EL_       temp=array[j - 1]; _EL_       array[j - 1]=array[k - 1]; _EL_       array[k - 1]=temp; _EL_     } _EL_     j=k; _EL_     k*=2; _EL_   } _EL_ } _EL_ ', 'public synchronized IAudioProcessor remove(int index){ _EL_   IAudioProcessor processor=processors.remove(index); _EL_   buildFinalProcessor(); _EL_   return processor; _EL_ } _EL_ ', 'private static void taskStarted(ProgressThread task){ _EL_   for (  ProgressThreadStateListener l : listener.getListeners(ProgressThreadStateListener.class)) { _EL_     l.progressThreadStarted(task); _EL_   } _EL_ } _EL_ ', 'private void throwExceptionIfDestroyed(String method) throws DeepstreamRecordDestroyedException { _EL_   if (this.isDestroyed) { _EL_     throw new DeepstreamRecordDestroyedException(method); _EL_   } _EL_ } _EL_ ', 'static String escapeBytes(final ByteString input){ _EL_   final StringBuilder builder=new StringBuilder(input.size()); _EL_   for (int i=0; i < input.size(); i++) { _EL_     final byte b=input.byteAt(i); _EL_ switch (b) { _EL_ case 0x07: _EL_       builder.append("\\\\a"); _EL_     break; _EL_ case \'\\b\': _EL_   builder.append("\\\\b"); _EL_ break; _EL_ case \'\\f\': _EL_ builder.append("\\\\f"); _EL_ break; _EL_ case \'\\n\': _EL_ builder.append("\\\\n"); _EL_ break; _EL_ case \'\\r\': _EL_ builder.append("\\\\r"); _EL_ break; _EL_ case \'\\t\': _EL_ builder.append("\\\\t"); _EL_ break; _EL_ case 0x0b: _EL_ builder.append("\\\\v"); _EL_ break; _EL_ case \'\\\\\': _EL_ builder.append("\\\\\\\\"); _EL_ break; _EL_ case \'\\\'\': _EL_ builder.append("\\\\\\\'"); _EL_ break; _EL_ case \'"\': _EL_ builder.append("\\\\\\""); _EL_ break; _EL_ default : _EL_ if (b >= 0x20) { _EL_ builder.append((char)b); _EL_ } _EL_  else { _EL_ builder.append(\'\\\\\'); _EL_ builder.append((char)(\'0\' + ((b >>> 6) & 3))); _EL_ builder.append((char)(\'0\' + ((b >>> 3) & 7))); _EL_ builder.append((char)(\'0\' + (b & 7))); _EL_ } _EL_ break; _EL_ } _EL_ } _EL_ return builder.toString(); _EL_ } _EL_ ', 'public void load() throws IOException { _EL_   if (magicNumber == 0) { _EL_     try (InputReaderLittleEndian ins=new InputReaderLittleEndian(new FileInputStreamAdapter(fileName))){ _EL_       magicNumber=ins.readLong(); _EL_       if (magicNumber != MAGIC_NUMBER)       throw new IOException("Input file is not a DAA file."); _EL_       version=ins.readLong(); _EL_       if (version > DAA_VERSION)       throw new IOException("DAA version requires later version of MEGAN."); _EL_       diamondBuild=ins.readLong(); _EL_       dbSeqs=ins.readLong(); _EL_       dbSeqsUsed=ins.readLong(); _EL_       dbLetters=ins.readLong(); _EL_       flags=ins.readLong(); _EL_       queryRecords=ins.readLong(); _EL_       modeRank=ins.readInt(); _EL_       gapOpen=ins.readInt(); _EL_       gapExtend=ins.readInt(); _EL_       reward=ins.readInt(); _EL_       penalty=ins.readInt(); _EL_       reserved1=ins.readInt(); _EL_       reserved2=ins.readInt(); _EL_       reserved3=ins.readInt(); _EL_       k=ins.readDouble(); _EL_       lambda=ins.readDouble(); _EL_       reserved4=ins.readDouble(); _EL_       reserved5=ins.readDouble(); _EL_       for (int i=0; i < scoreMatrix.length; i++) { _EL_         scoreMatrix[i]=(byte)ins.read(); _EL_       } _EL_       scoreMatrixName=Basic.toString(scoreMatrix); _EL_       for (int i=0; i < blockSize.length; i++)       blockSize[i]=ins.readLong(); _EL_       if (blockSize[0] == 0)       throw new IOException("Invalid DAA file. DIAMOND run probably has not completed successfully."); _EL_       for (int i=0; i < blockTypeRank.length; i++) { _EL_         blockTypeRank[i]=(byte)ins.read(); _EL_ switch (BlockType.value(blockTypeRank[i])) { _EL_ case ref_names: _EL_           if (refNamesBlockIndex != -1)           throw new IOException("DAA file contains multiple ref_names blocks, not implemented."); _EL_         refNamesBlockIndex=i; _EL_       break; _EL_ case ref_lengths: _EL_     if (refLengthsBlockIndex != -1)     throw new IOException("DAA file contains multiple ref_lengths blocks, not implemented."); _EL_   refLengthsBlockIndex=i; _EL_ break; _EL_ case alignments: _EL_ if (alignmentsBlockIndex != -1) throw new IOException("DAA file contains multiple alignments blocks, not implemented."); _EL_ alignmentsBlockIndex=i; _EL_ break; _EL_ } _EL_ } _EL_ if (refNamesBlockIndex == -1) throw new IOException("DAA file contains 0 ref_names blocks, not implemented."); _EL_ if (refLengthsBlockIndex == -1) throw new IOException("DAA file contains 0 ref_lengths blocks, not implemented."); _EL_ if (alignmentsBlockIndex == -1) throw new IOException("DAA file contains 0 alignments blocks, not implemented."); _EL_ if (refLengthsBlockIndex < refNamesBlockIndex) throw new IOException("DAA file contains ref_lengths block before ref_names block, not implemented."); _EL_ headerSize=ins.getPosition(); _EL_ lnK=Math.log(k); _EL_ } _EL_  } _EL_ } _EL_ ', 'private final void countAll() throws IOException { _EL_   MultiDocValues.OrdinalMap ordinalMap; _EL_   if (dv instanceof MultiDocValues.MultiSortedSetDocValues) { _EL_     ordinalMap=((MultiSortedSetDocValues)dv).mapping; _EL_   } _EL_  else { _EL_     ordinalMap=null; _EL_   } _EL_   IndexReader origReader=state.getOrigReader(); _EL_   for (  LeafReaderContext context : origReader.leaves()) { _EL_     LeafReader reader=context.reader(); _EL_     SortedSetDocValues segValues=reader.getSortedSetDocValues(field); _EL_     if (segValues == null) { _EL_       continue; _EL_     } _EL_     Bits liveDocs=reader.getLiveDocs(); _EL_     if (ordinalMap != null) { _EL_       final LongValues ordMap=ordinalMap.getGlobalOrds(context.ord); _EL_       int numSegOrds=(int)segValues.getValueCount(); _EL_       final int[] segCounts=new int[numSegOrds]; _EL_       int docID; _EL_       while ((docID=segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) { _EL_         if (liveDocs == null || liveDocs.get(docID)) { _EL_           int term=(int)segValues.nextOrd(); _EL_           while (term != SortedSetDocValues.NO_MORE_ORDS) { _EL_             segCounts[term]++; _EL_             term=(int)segValues.nextOrd(); _EL_           } _EL_         } _EL_       } _EL_       for (int ord=0; ord < numSegOrds; ord++) { _EL_         int count=segCounts[ord]; _EL_         if (count != 0) { _EL_           counts[(int)ordMap.get(ord)]+=count; _EL_         } _EL_       } _EL_     } _EL_  else { _EL_       int docID; _EL_       while ((docID=segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) { _EL_         if (liveDocs == null || liveDocs.get(docID)) { _EL_           int term=(int)segValues.nextOrd(); _EL_           while (term != SortedSetDocValues.NO_MORE_ORDS) { _EL_             counts[term]++; _EL_             term=(int)segValues.nextOrd(); _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public void addToParent(Element headerE) throws Exception { _EL_   Document doc=headerE.getOwnerDocument(); _EL_   Element securityE=doc.createElementNS(wsseNS,WSSEConstants.TAG_WSSE + ":" + WSSEConstants.TAG_SECURITYT); _EL_   securityE.setAttributeNS(SOAPBindingConstants.NS_XML,WSSEConstants.TAG_XML_WSSE,wsseNS); _EL_   headerE.appendChild(securityE); _EL_   Document binaryTokenD=XMLUtils.toDOMDocument(toString(),debug); _EL_   Element binaryTokenE=binaryTokenD.getDocumentElement(); _EL_   securityE.appendChild(doc.importNode(binaryTokenE,true)); _EL_ } _EL_ ', "public final static int skipSpaces(final String in,final int start){ _EL_   int pos=start; _EL_   while (pos < in.length() && (in.charAt(pos) == ' ' || in.charAt(pos) == '\\n')) { _EL_     pos++; _EL_   } _EL_   return pos < in.length() ? pos : -1; _EL_ } _EL_ ", '@Override public Assignment sample(){ _EL_   if (!samples.isEmpty()) { _EL_     int selection=sampler.nextInt(samples.size()); _EL_     Assignment selected=samples.get(selection); _EL_     return selected; _EL_   } _EL_  else { _EL_     log.warning("distribution has no samples"); _EL_     return new Assignment(); _EL_   } _EL_ } _EL_ ', '@SneakyThrows public static X509Certificate readCertificate(InputStream is){ _EL_   return (X509Certificate)CERT_FACTORY.generateCertificate(is); _EL_ } _EL_ ', 'public GuacamoleHTTPTunnelMap(){ _EL_   executor.scheduleAtFixedRate(new TunnelTimeoutTask(TUNNEL_TIMEOUT * 1000l),TUNNEL_TIMEOUT,TUNNEL_TIMEOUT,TimeUnit.SECONDS); _EL_ } _EL_ ', 'private void rename(Table table){ _EL_   if (renameDefinitions != null) { _EL_     for (    Column col : table.getAllColumns()) { _EL_       String newColName=renameDefinitions.getNewColumnName(table.getSchema(),table.getName(),col.getName()); _EL_       if (newColName != null)       col.setName(newColName); _EL_     } _EL_     String newTableName=renameDefinitions.getNewTableName(table.getSchema(),table.getName()); _EL_     String newSchemaName=renameDefinitions.getNewSchemaName(table.getSchema(),table.getName()); _EL_     if (newTableName != null)     table.setTable(newTableName); _EL_     if (newSchemaName != null)     table.setSchema(newSchemaName); _EL_   } _EL_ } _EL_ ', 'public synchronized boolean put(long fp){ _EL_   int index=(int)(fp & this.mask); _EL_   long[] list=this.table[index]; _EL_   if (list != null) { _EL_     int listlen=list.length; _EL_     for (int i=0; i < listlen; i++) { _EL_       if (list[i] == fp)       return true; _EL_     } _EL_   } _EL_   if (count >= threshold) { _EL_     rehash(); _EL_     index=(int)(fp & this.mask); _EL_     list=this.table[index]; _EL_   } _EL_   int len=(list == null ? 0 : list.length); _EL_   long[] newList=new long[len + 1]; _EL_   if (list != null)   System.arraycopy(list,0,newList,0,len); _EL_   newList[len]=fp; _EL_   this.table[index]=newList; _EL_   this.count++; _EL_   return false; _EL_ } _EL_ ', 'public int nice(){ _EL_   return Integer.parseInt(fields[18]); _EL_ } _EL_ ', 'float layerSize(int p_76490_1_){ _EL_   if ((float)p_76490_1_ < (float)this.heightLimit * 0.3F) { _EL_     return -1.0F; _EL_   } _EL_  else { _EL_     float f=(float)this.heightLimit / 2.0F; _EL_     float f1=f - (float)p_76490_1_; _EL_     float f2=MathHelper.sqrt_float(f * f - f1 * f1); _EL_     if (f1 == 0.0F) { _EL_       f2=f; _EL_     } _EL_  else     if (Math.abs(f1) >= f) { _EL_       return 0.0F; _EL_     } _EL_     return f2 * 0.5F; _EL_   } _EL_ } _EL_ ', 'public static Method findStaticMethod(Class<?> type,String name,Class<?>... args) throws NoSuchMethodException { _EL_   Method method=findMethod(type,name,args); _EL_   if (!Modifier.isStatic(method.getModifiers())) { _EL_     throw new NoSuchMethodException("Method \'" + name + "\' is not static"); _EL_   } _EL_   return method; _EL_ } _EL_ ', 'public void addPhonenumber(String aPhonenumber){ _EL_   if (mPhoneNumbers.indexOf(aPhonenumber) < 0) { _EL_     mPhoneNumbers.add(aPhonenumber); _EL_   } _EL_ } _EL_ ', "public static final String digitsAndPlusOnly(Matcher matcher){ _EL_   StringBuilder buffer=new StringBuilder(); _EL_   String matchingRegion=matcher.group(); _EL_   for (int i=0, size=matchingRegion.length(); i < size; i++) { _EL_     char character=matchingRegion.charAt(i); _EL_     if (character == '+' || Character.isDigit(character)) { _EL_       buffer.append(character); _EL_     } _EL_   } _EL_   return buffer.toString(); _EL_ } _EL_ ", 'private static Reader openInput(String from){ _EL_   try { _EL_     return CliUtils.reader(from); _EL_   } _EL_  catch (  IOException e) { _EL_     log.error("Error finding input",e); _EL_     System.exit(1); _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public PublisherConcatArray<T> concatAdditionalSourceFirst(Publisher<? extends T> source){ _EL_   int n=array.length; _EL_   @SuppressWarnings("unchecked") Publisher<? extends T>[] newArray=new Publisher[n + 1]; _EL_   System.arraycopy(array,0,newArray,1,n); _EL_   newArray[0]=source; _EL_   return new PublisherConcatArray<>(delayError,newArray); _EL_ } _EL_ ', 'protected void doPublish(String tenantId,List<T> items,String subscriber,int retryCount,long delay) throws Exception { _EL_   String data=mapper.writeValueAsString(items); _EL_   TextMessage tm=session.createTextMessage(data); _EL_   if (tenantId != null) { _EL_     tm.setStringProperty("tenant",tenantId); _EL_   } _EL_   if (subscriber != null) { _EL_     tm.setStringProperty("subscriber",subscriber); _EL_   } _EL_   tm.setIntProperty("retryCount",retryCount); _EL_   if (delay > 0) { _EL_     tm.setLongProperty("_AMQ_SCHED_DELIVERY",System.currentTimeMillis() + delay); _EL_   } _EL_   if (log.isLoggable(Level.FINEST)) { _EL_     log.finest("Publish: " + tm); _EL_   } _EL_   producer.send(tm); _EL_ } _EL_ ', 'protected void checkValid() throws URIException { _EL_   if (!(equals(_scheme,DEFAULT_SCHEME) || _scheme == null)) { _EL_     throw new URIException(URIException.PARSING,"wrong class use"); _EL_   } _EL_ } _EL_ ', 'public PrivateKeyUsageExtension(Boolean critical,Object value) throws CertificateException, IOException { _EL_   this.extensionId=PKIXExtensions.PrivateKeyUsage_Id; _EL_   this.critical=critical.booleanValue(); _EL_   this.extensionValue=(byte[])value; _EL_   DerInputStream str=new DerInputStream(this.extensionValue); _EL_   DerValue[] seq=str.getSequence(2); _EL_   for (int i=0; i < seq.length; i++) { _EL_     DerValue opt=seq[i]; _EL_     if (opt.isContextSpecific(TAG_BEFORE) && !opt.isConstructed()) { _EL_       if (notBefore != null) { _EL_         throw new CertificateParsingException("Duplicate notBefore in PrivateKeyUsage."); _EL_       } _EL_       opt.resetTag(DerValue.tag_GeneralizedTime); _EL_       str=new DerInputStream(opt.toByteArray()); _EL_       notBefore=str.getGeneralizedTime(); _EL_     } _EL_  else     if (opt.isContextSpecific(TAG_AFTER) && !opt.isConstructed()) { _EL_       if (notAfter != null) { _EL_         throw new CertificateParsingException("Duplicate notAfter in PrivateKeyUsage."); _EL_       } _EL_       opt.resetTag(DerValue.tag_GeneralizedTime); _EL_       str=new DerInputStream(opt.toByteArray()); _EL_       notAfter=str.getGeneralizedTime(); _EL_     } _EL_  else     throw new IOException("Invalid encoding of " + "PrivateKeyUsageExtension"); _EL_   } _EL_ } _EL_ ', '@Override public List<Period> generatePeriods(DateTimeUnit dateTimeUnit){ _EL_   Calendar cal=getCalendar(); _EL_   dateTimeUnit.setMonth(1); _EL_   dateTimeUnit.setDay(1); _EL_   List<Period> periods=Lists.newArrayList(); _EL_   int year=dateTimeUnit.getYear(); _EL_   while (dateTimeUnit.getYear() == year) { _EL_     periods.add(createPeriod(dateTimeUnit,cal)); _EL_     dateTimeUnit=cal.plusMonths(dateTimeUnit,2); _EL_   } _EL_   return periods; _EL_ } _EL_ ', '@Deprecated public static JSONObject parseJson(String response) throws JSONException, FacebookError { _EL_   if (response.equals("false")) { _EL_     throw new FacebookError("request failed"); _EL_   } _EL_   if (response.equals("true")) { _EL_     response="{value : true}"; _EL_   } _EL_   JSONObject json=new JSONObject(response); _EL_   if (json.has("error")) { _EL_     JSONObject error=json.getJSONObject("error"); _EL_     throw new FacebookError(error.getString("message"),error.getString("type"),0); _EL_   } _EL_   if (json.has("error_code") && json.has("error_msg")) { _EL_     throw new FacebookError(json.getString("error_msg"),"",Integer.parseInt(json.getString("error_code"))); _EL_   } _EL_   if (json.has("error_code")) { _EL_     throw new FacebookError("request failed","",Integer.parseInt(json.getString("error_code"))); _EL_   } _EL_   if (json.has("error_msg")) { _EL_     throw new FacebookError(json.getString("error_msg")); _EL_   } _EL_   if (json.has("error_reason")) { _EL_     throw new FacebookError(json.getString("error_reason")); _EL_   } _EL_   return json; _EL_ } _EL_ ', 'public SpyVersions loadVersions() throws XMLException { _EL_   setLoading(true); _EL_   final String urlString=propertyLoader.getProperty(BasePropertyNames.VERSION_INFO_URL) + "?current=" + currentRelease; _EL_   try { _EL_     final URL url=new URL(urlString); _EL_     final String xml=IOUtils.toString(url.openStream()); _EL_     versions=(SpyVersions)loadFromString(xml); _EL_   } _EL_  catch (  IOException|NullPointerException e) { _EL_     throw new XMLException("Cannot read version info from " + urlString,e); _EL_   } _EL_   setLoading(false); _EL_   return versions; _EL_ } _EL_ ', 'public void addFooterView(View view){ _EL_   mFooterViews.add(view); _EL_   notifyDataSetChanged(); _EL_ } _EL_ ', 'public void addFirst(String seq){ _EL_   queue=seq + queue.substring(pos); _EL_   pos=0; _EL_ } _EL_ ', 'public void exprSetParent(ExpressionNode n){ _EL_   super.exprSetParent(n); _EL_   int nArgs=m_argVec.size(); _EL_   for (int i=0; i < nArgs; i++) { _EL_     Expression arg=(Expression)m_argVec.elementAt(i); _EL_     arg.exprSetParent(n); _EL_   } _EL_ } _EL_ ', 'public final boolean isRegistered(){ _EL_   return !canonicalName.startsWith("x-") && !canonicalName.startsWith("X-"); _EL_ } _EL_ ', 'public void bail(String message,boolean printUsageStatement){ _EL_   Debug.output(message); _EL_   if (printUsageStatement)   printUsage(); _EL_   System.exit(0); _EL_ } _EL_ ', 'private void assertTimestampsEqualWithEpsilon(long expected,long actual,int epsilon,String desc){ _EL_   assertTrue("Expected a " + desc + " time within "+ epsilon+ "ms of "+ expected+ " but got "+ actual,Math.abs(actual - expected) < epsilon); _EL_ } _EL_ ', 'public SpiderSitemapXMLParser(SpiderParam params){ _EL_   super(); _EL_   if (params == null) { _EL_     throw new IllegalArgumentException("Parameter params must not be null."); _EL_   } _EL_   this.params=params; _EL_ } _EL_ ', 'public boolean isEmpty(){ _EL_   return mEventQueue.isEmpty(); _EL_ } _EL_ ', 'public void readEntries(TableKelp table,InSegment reader,SegmentEntryCallback cb){ _EL_   TempBuffer tBuf=TempBuffer.createLarge(); _EL_   byte[] buffer=tBuf.buffer(); _EL_   InStore sIn=reader.getStoreRead(); _EL_   byte[] tableKey=new byte[TableKelp.TABLE_KEY_SIZE]; _EL_   for (int ptr=length() - BLOCK_SIZE; ptr > 0; ptr-=BLOCK_SIZE) { _EL_     sIn.read(getAddress() + ptr,buffer,0,buffer.length); _EL_     int index=0; _EL_     long seq=BitsUtil.readLong(buffer,index); _EL_     index+=8; _EL_     if (seq != getSequence()) { _EL_       log.warning(L.l("Invalid sequence {0} expected {1} at 0x{2}",seq,getSequence(),Long.toHexString(getAddress() + ptr))); _EL_       break; _EL_     } _EL_     System.arraycopy(buffer,index,tableKey,0,tableKey.length); _EL_     index+=tableKey.length; _EL_     if (!Arrays.equals(tableKey,_tableKey)) { _EL_       log.warning(L.l("Invalid table {0} table {1} at 0x{2}",Hex.toShortHex(tableKey),Hex.toShortHex(_tableKey),Long.toHexString(getAddress() + ptr))); _EL_       break; _EL_     } _EL_     int head=index; _EL_     while (head < BLOCK_SIZE && buffer[head] != 0) { _EL_       head=readEntry(table,buffer,head,cb,getAddress()); _EL_     } _EL_     boolean isCont=buffer[head + 1] != 0; _EL_     if (!isCont) { _EL_       break; _EL_     } _EL_   } _EL_   tBuf.free(); _EL_ } _EL_ ', 'static int numberOfHosts(Map<URI,List<Initiator>> net2InitiatorsMap){ _EL_   Set<URI> hostSet=new HashSet<URI>(); _EL_   for (  List<Initiator> initiators : net2InitiatorsMap.values()) { _EL_     for (    Initiator init : initiators) { _EL_       hostSet.add(init.getHost()); _EL_     } _EL_   } _EL_   return hostSet.size(); _EL_ } _EL_ ', 'public void addCertificates(Store certStore) throws CMSException { _EL_   certs.addAll(CMSUtils.getCertificatesFromStore(certStore)); _EL_ } _EL_ ', 'protected AttributesImpl startPrefixMapping(Element element,NamespaceStack namespaceStack) throws SAXException { _EL_   AttributesImpl namespaceAttributes=null; _EL_   Namespace elementNamespace=element.getNamespace(); _EL_   if ((elementNamespace != null) && !isIgnoreableNamespace(elementNamespace,namespaceStack)) { _EL_     namespaceStack.push(elementNamespace); _EL_     contentHandler.startPrefixMapping(elementNamespace.getPrefix(),elementNamespace.getURI()); _EL_     namespaceAttributes=addNamespaceAttribute(namespaceAttributes,elementNamespace); _EL_   } _EL_   List<Namespace> declaredNamespaces=element.declaredNamespaces(); _EL_   for (  Namespace namespace : declaredNamespaces) { _EL_     if (!isIgnoreableNamespace(namespace,namespaceStack)) { _EL_       namespaceStack.push(namespace); _EL_       contentHandler.startPrefixMapping(namespace.getPrefix(),namespace.getURI()); _EL_       namespaceAttributes=addNamespaceAttribute(namespaceAttributes,namespace); _EL_     } _EL_   } _EL_   return namespaceAttributes; _EL_ } _EL_ ', 'private static DataFlavor[] convertToArray(List<DataFlavor> dataFlavourList){ _EL_   DataFlavor[] array=new DataFlavor[dataFlavourList.size()]; _EL_   dataFlavourList.toArray(array); _EL_   return array; _EL_ } _EL_ ', 'public static String translateAttribute(String attributes) throws IOException { _EL_   short[] flags=strAttrToBooleanFlags(attributes); _EL_   StringBuilder sb=new StringBuilder(); _EL_   if (flags[READ_ONLY] == YES)   sb.append(" +R"); _EL_  else   if (flags[READ_ONLY] == NO)   sb.append(" -R"); _EL_   if (flags[HIDDEN] == YES)   sb.append(" +H"); _EL_  else   if (flags[HIDDEN] == NO)   sb.append(" -H"); _EL_   if (flags[SYSTEM] == YES)   sb.append(" +S"); _EL_  else   if (flags[SYSTEM] == NO)   sb.append(" -S"); _EL_   if (flags[ARCHIVE] == YES)   sb.append(" +A"); _EL_  else   if (flags[ARCHIVE] == NO)   sb.append(" -A"); _EL_   return sb.toString(); _EL_ } _EL_ ', 'public static int nextIndexId(){ _EL_   return msgIdx.getAndIncrement(); _EL_ } _EL_ ', 'private void fillFieldValues(){ _EL_   if (isCreationPanel) { _EL_     phrase.setText("" + Hearing.DEFAULT_PHRASE); _EL_     outputAmount.setText("" + Hearing.DEFAULT_OUTPUT_AMOUNT); _EL_   } _EL_  else { _EL_     phrase.setText("" + hearingSensor.getPhrase()); _EL_     outputAmount.setText("" + hearingSensor.getOutputAmount()); _EL_   } _EL_ } _EL_ ', 'public static boolean checkSecurityInfos(String endpoint,Identity clientIdentity,List<SecurityInfo> securityInfos){ _EL_   if (clientIdentity.isSecure()) { _EL_     if (securityInfos == null || securityInfos.isEmpty()) { _EL_       LOG.warn("Client \'{}\' without security info try to connect through the secure endpoint",endpoint); _EL_       return false; _EL_     } _EL_  else { _EL_       for (      SecurityInfo securityInfo : securityInfos) { _EL_         if (checkSecurityInfo(endpoint,clientIdentity,securityInfo)) { _EL_           return true; _EL_         } _EL_       } _EL_       return false; _EL_     } _EL_   } _EL_  else   if (securityInfos != null && !securityInfos.isEmpty()) { _EL_     LOG.warn("Client \'{}\' must connect using DTLS",endpoint); _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public static ArrayList<ByteString> byteArraysToStrings(ArrayList<byte[]> byteArrays){ _EL_   if (byteArrays == null) { _EL_     return null; _EL_   } _EL_   ArrayList<ByteString> byteStrings=new ArrayList<ByteString>(); _EL_   for (  byte[] bytes : byteArrays) { _EL_     byteStrings.add(ByteString.of(bytes)); _EL_   } _EL_   return byteStrings; _EL_ } _EL_ ', 'void addIndex(IndexType type,List<String> columnNames){ _EL_   IndexDefinition index=new IndexDefinition(); _EL_   index.indexName=tableName + "_" + indexes.size(); _EL_   index.columnNames=New.arrayList(columnNames); _EL_   index.type=type; _EL_   indexes.add(index); _EL_ } _EL_ ', 'public Builder withKeyStoreKeyPassword(String keyStoreKeyPassword){ _EL_   properties.setProperty(NettyOptions.SSL_KEY_STORE_KEY_PASSWORD,Assert.notNull(keyStoreKeyPassword,"trustStorePassword")); _EL_   return this; _EL_ } _EL_ ', 'public ZookeeperStateMachineEnsemble(CuratorFramework curatorClient,String basePath){ _EL_   this(curatorClient,basePath,true,DEFAULT_LOGSIZE); _EL_ } _EL_ ', 'public static CustomShortcutSet createShortcut(char ch){ _EL_   Character mnemonic=Character.valueOf(ch); _EL_   String shortcut=SystemInfo.isMac && SystemInfo.isJavaVersionAtLeast("1.7") ? "control alt pressed " + mnemonic : "alt pressed " + mnemonic; _EL_   return CustomShortcutSet.fromString(shortcut); _EL_ } _EL_ ', 'public static void resetCounters(){ _EL_   errors=0; _EL_   warnings=0; _EL_ } _EL_ ', 'public void write(CeylonConfig config,File source,OutputStream out) throws IOException { _EL_   if (source.isFile()) { _EL_     InputStream in=null; _EL_     try { _EL_       in=new FileInputStream(source); _EL_       write(config,in,out); _EL_     } _EL_   finally { _EL_       if (in != null) { _EL_         try { _EL_           in.close(); _EL_         } _EL_  catch (        IOException e) { _EL_         } _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     throw new FileNotFoundException("Couldn\'t open source configuration file"); _EL_   } _EL_ } _EL_ ', 'protected synchronized void updateLocation(Point newLocn){ _EL_   prev=locn; _EL_   locn=newLocn; _EL_   if (Math.abs(locn.x - prev.x) > hysteresis || Math.abs(locn.y - prev.y) > hysteresis) { _EL_     if (timer.isRunning())     timer.stop(); _EL_   } _EL_  else { _EL_     if (!timer.isRunning())     timer.start(); _EL_   } _EL_ } _EL_ ', '@Override public int compareTo(Value o){ _EL_   if (o instanceof StringVal) { _EL_     return str.compareTo(((StringVal)o).str); _EL_   } _EL_  else { _EL_     return 0; _EL_   } _EL_ } _EL_ ', 'public void removeColumn(Column c){ _EL_   int idx=m_columns.indexOf(c); _EL_   if (idx < 0) { _EL_     throw new IllegalArgumentException("No such column."); _EL_   } _EL_   removeColumn(idx); _EL_ } _EL_ ', 'public synchronized void write(String logData){ _EL_   if (logEnabled) { _EL_     histData.append(logData); _EL_     histData.revalidate(); _EL_ synchronized (histData) { _EL_       histData.notify(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void closeConnection(){ _EL_   try { _EL_     if (m_connection != null) { _EL_       m_connection.close(); _EL_     } _EL_   } _EL_  catch (  final SQLException exception) { _EL_     NaviLogger.severe("Error: Closing the database connection failed with exception: %s",exception); _EL_   } _EL_   m_connection=null; _EL_ } _EL_ ', 'public StructEmBayesSearchEditor(StructEmBayesSearchRunner semBayesEstWrapper){ _EL_   this(semBayesEstWrapper.getEstimatedBayesIm(),semBayesEstWrapper.getDataSet()); _EL_ } _EL_ ', 'public void removeActionListener(ActionListener listener){ _EL_   forwardProjectionButton.addActionListener(listener); _EL_   backProjectionButton.addActionListener(listener); _EL_ } _EL_ ', 'boolean isLiteral(int index){ _EL_   if (isValidMask() && index < string.length()) { _EL_     return literalMask.get(index); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'protected Granularity generateGranularity(String granularity,GranularityParser granularityParser) throws BadApiRequestException { _EL_   try { _EL_     return granularityParser.parseGranularity(granularity); _EL_   } _EL_  catch (  GranularityParseException e) { _EL_     LOG.error(UNKNOWN_GRANULARITY.logFormat(granularity),granularity); _EL_     throw new BadApiRequestException(e.getMessage()); _EL_   } _EL_ } _EL_ ', 'public WordIterator(){ _EL_   this(Locale.getDefault()); _EL_ } _EL_ ', '@Override public void close(){ _EL_   if (leaf != null) { _EL_     leaf.close(); _EL_     leaf=null; _EL_   } _EL_   ccMgr.releaseIndexLocks(); _EL_   dirsMayBeUpdated=null; _EL_ } _EL_ ', 'public void resize(int size){ _EL_   if (buffer != null) { _EL_     if (size >= 0 && size < buffer.size()) { _EL_       int oldLastIndex=buffer.size() - 1; _EL_       int newLastIndex=size - 1; _EL_       for (int i=oldLastIndex; i > newLastIndex; i--) { _EL_         buffer.remove(i); _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     if (size >= 0 && size < offsets.size()) { _EL_       long offset=offsets.get(size); _EL_       byteCache.resize(key,offset); _EL_       ArrayList<Long> newOffsets=new ArrayList<Long>(size); _EL_       for (int i=0; i < size; i++) { _EL_         newOffsets.add(offsets.get(i)); _EL_       } _EL_       offsets=newOffsets; _EL_     } _EL_   } _EL_ } _EL_ ', 'public static byte[] splitUint8To2bytes(char uint8){ _EL_   if (uint8 < 0 || uint8 > 0xff) { _EL_     throw new RuntimeException("Out of Boundary"); _EL_   } _EL_   String hexString=Integer.toHexString(uint8); _EL_   byte low; _EL_   byte high; _EL_   if (hexString.length() > 1) { _EL_     high=(byte)Integer.parseInt(hexString.substring(0,1),16); _EL_     low=(byte)Integer.parseInt(hexString.substring(1,2),16); _EL_   } _EL_  else { _EL_     high=0; _EL_     low=(byte)Integer.parseInt(hexString.substring(0,1),16); _EL_   } _EL_   byte[] result=new byte[]{high,low}; _EL_   return result; _EL_ } _EL_ ', 'protected void sprint(short shortField){ _EL_   sprint(String.valueOf(shortField)); _EL_ } _EL_ ', 'protected void initFromDir(String prefix,File dir){ _EL_   File[] files; _EL_   files=dir.listFiles(new ClassFileFilter()); _EL_   for (  File file : files) { _EL_     if (prefix == null) { _EL_       add(file.getName()); _EL_     } _EL_  else { _EL_       add(prefix + "." + file.getName()); _EL_     } _EL_   } _EL_   files=dir.listFiles(new DirectoryFilter()); _EL_   for (  File file : files) { _EL_     if (prefix == null) { _EL_       initFromDir(file.getName(),file); _EL_     } _EL_  else { _EL_       initFromDir(prefix + "." + file.getName(),file); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void removeBandwidth(String name){ _EL_   if (name != null)   if (bandwidthList != null) { _EL_     for (int i=0; i < bandwidthList.size(); i++) { _EL_       Object o=bandwidthList.elementAt(i); _EL_       if (o instanceof BandwidthField) { _EL_         BandwidthField b=(BandwidthField)o; _EL_         try { _EL_           String type=b.getType(); _EL_           if (type != null) { _EL_             if (name.equals(type)) { _EL_               bandwidthList.remove(b); _EL_             } _EL_           } _EL_         } _EL_  catch (        SdpParseException e) { _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'protected static void succeed(){ _EL_   System.exit(0); _EL_ } _EL_ ', "public static String collapseNewlines(String argStr){ _EL_   char last=argStr.charAt(0); _EL_   StringBuffer argBuf=new StringBuffer(); _EL_   for (int cIdx=0; cIdx < argStr.length(); cIdx++) { _EL_     char ch=argStr.charAt(cIdx); _EL_     if (ch != '\\n' || last != '\\n') { _EL_       argBuf.append(ch); _EL_       last=ch; _EL_     } _EL_   } _EL_   return argBuf.toString(); _EL_ } _EL_ ", '@Override protected String generateJavadoc(int index) throws Exception { _EL_   throw new Exception("Not used!"); _EL_ } _EL_ ', 'public T removeLast(){ _EL_   if (rows.size() != 0)   rows.remove(rows.size() - 1); _EL_   return instance(); _EL_ } _EL_ ', 'public static void ensureVisible(String componentName){ _EL_   if (verbose) { _EL_     log("ensureVisible(" + componentName + ")"); _EL_   } _EL_   ensureVisible(findByName(componentName)); _EL_ } _EL_ ', 'public void endRepresentation(){ _EL_   if (!representationProtectionsSet) { _EL_     if (currentRepresentationProtections != null) { _EL_       Collections.sort(currentRepresentationProtections,this); _EL_     } _EL_     representationProtections=currentRepresentationProtections; _EL_     representationProtectionsSet=true; _EL_   } _EL_  else { _EL_     if (currentRepresentationProtections == null) { _EL_       Assertions.checkState(representationProtections == null); _EL_     } _EL_  else { _EL_       Collections.sort(currentRepresentationProtections,this); _EL_       Assertions.checkState(currentRepresentationProtections.equals(representationProtections)); _EL_     } _EL_   } _EL_   currentRepresentationProtections=null; _EL_ } _EL_ ', 'public StandardPieSectionLabelGenerator(String labelFormat){ _EL_   this(labelFormat,NumberFormat.getNumberInstance(),NumberFormat.getPercentInstance()); _EL_ } _EL_ ', 'public static CharSequence[] split(CharSequence line,int delimiter){ _EL_   CharSequence[] tokens0=split(line,delimiter,N); _EL_   if (tokens0.length < N) { _EL_     return tokens0; _EL_   } _EL_  else { _EL_     CharSequence[] tokens1=split(tokens0[N - 1],delimiter); _EL_     CharSequence[] tokens2=new CharSequence[tokens0.length + tokens1.length - 1]; _EL_     System.arraycopy(tokens0,0,tokens2,0,tokens0.length - 1); _EL_     System.arraycopy(tokens1,0,tokens2,tokens0.length - 1,tokens1.length); _EL_     return tokens2; _EL_   } _EL_ } _EL_ ', 'public CCTimer(Object t,String s,float seconds){ _EL_   target=t; _EL_   selector=s; _EL_   interval=seconds; _EL_   elapsed=-1; _EL_   try { _EL_     Class<?> cls=target.getClass(); _EL_     invocation=cls.getMethod(s,Float.TYPE); _EL_   } _EL_  catch (  NoSuchMethodException e) { _EL_     e.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'public Tuple read() throws IOException { _EL_   try { _EL_     Map fields=jsonTupleStream.next(); _EL_     if (fields == null) { _EL_       Map m=new HashMap(); _EL_       m.put("EOF",true); _EL_       return new Tuple(m); _EL_     } _EL_  else { _EL_       String msg=(String)fields.get("EXCEPTION"); _EL_       if (msg != null) { _EL_         HandledException ioException=new HandledException(msg); _EL_         throw ioException; _EL_       } _EL_       if (trace) { _EL_         fields.put("_CORE_",this.baseUrl); _EL_         if (slice != null) { _EL_           fields.put("_SLICE_",slice); _EL_         } _EL_       } _EL_       if (fieldMappings != null) { _EL_         fields=mapFields(fields,fieldMappings); _EL_       } _EL_       return new Tuple(fields); _EL_     } _EL_   } _EL_  catch (  HandledException e) { _EL_     throw new IOException("--> " + this.baseUrl + ":"+ e.getMessage()); _EL_   } _EL_ catch (  Exception e) { _EL_     throw new IOException("--> " + this.baseUrl + ": An exception has occurred on the server, refer to server log for details.",e); _EL_   } _EL_ } _EL_ ', 'private String compute(String left,double right,boolean isInteger){ _EL_   if (left == null && Double.isNaN(right)) { _EL_     return null; _EL_   } _EL_   if (isInteger && right == (int)right) { _EL_     return (left == null ? "" : left) + (int)right; _EL_   } _EL_  else   if (Double.isInfinite(right)) { _EL_     return (left == null ? "" : left) + Tools.formatNumber(right); _EL_   } _EL_  else { _EL_     return (left == null ? "" : left) + (Double.isNaN(right) ? "" : right); _EL_   } _EL_ } _EL_ ', 'public void removePropertyChangeListener(final PropertyChangeListener listener){ _EL_   propertyChangeSupport.removePropertyChangeListener(listener); _EL_ } _EL_ ', 'public void loadXML(Node stepnode,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleXMLException { _EL_   try { _EL_     this.tabelName=XMLHandler.getTagValue(stepnode,"TableName"); _EL_     this.outputRowSize=XMLHandler.getTagValue(stepnode,"outputRowSize"); _EL_     this.factDimLensString=XMLHandler.getTagValue(stepnode,"factDimLensString"); _EL_     this.tableName=XMLHandler.getTagValue(stepnode,"tableName"); _EL_     this.databaseName=XMLHandler.getTagValue(stepnode,"databaseName"); _EL_     this.dimensionCount=XMLHandler.getTagValue(stepnode,"dimensionCount"); _EL_     this.noDictionaryDims=XMLHandler.getTagValue(stepnode,"noDictionaryDims"); _EL_     this.noDictionaryDimsMapping=XMLHandler.getTagValue(stepnode,"noDictionaryDimsMapping"); _EL_     this.complexDimensionCount=XMLHandler.getTagValue(stepnode,"complexDimensionCount"); _EL_     this.measureCount=XMLHandler.getTagValue(stepnode,"measureCount"); _EL_     this.updateMemberRequest=XMLHandler.getTagValue(stepnode,"isUpdateMemberRequest"); _EL_     this.measureDataType=XMLHandler.getTagValue(stepnode,"measureDataType"); _EL_     this.partitionID=XMLHandler.getTagValue(stepnode,"partitionID"); _EL_     this.segmentId=XMLHandler.getTagValue(stepnode,"segmentId"); _EL_     this.taskNo=XMLHandler.getTagValue(stepnode,"taskNo"); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new KettleXMLException("Unable to read step info from XML node",e); _EL_   } _EL_ } _EL_ ', 'public final int[] hashSignature(final int[] signature){ _EL_   int[] hash=new int[stages]; _EL_   int rows=signature.length / stages; _EL_   for (int i=0; i < signature.length; i++) { _EL_     int stage=Math.min(i / rows,stages - 1); _EL_     hash[stage]=(int)((hash[stage] + (long)signature[i] * LARGE_PRIME) % buckets); _EL_   } _EL_   return hash; _EL_ } _EL_ ', 'private void addTriggerGroupName(String groupName) throws JobPersistenceException, ResourceException { _EL_   addRepoListName(groupName,TRIGGER_GROUP_NAMES_RESOURCE_PATH,"names"); _EL_ } _EL_ ', 'public String readString() throws IOException { _EL_   int firstByte=readByte(); _EL_   int length=readInt(firstByte,PREFIX_8_BITS); _EL_   byte[] encoded=new byte[length]; _EL_   bytesLeft-=length; _EL_   in.readFully(encoded); _EL_   return new String(encoded,"UTF-8"); _EL_ } _EL_ ', 'private Bitmap readAndDecompressThumbnail(File file){ _EL_   try { _EL_     if (file.length() > 0) { _EL_       FileInputStream instream=new FileInputStream(file); _EL_       ReadableByteChannel bytechan=Channels.newChannel(instream); _EL_       ByteBuffer buff=ByteBuffer.allocateDirect((int)file.length()); _EL_       if (buff != null) { _EL_         bytechan.read(buff); _EL_         instream.close(); _EL_         buff.rewind(); _EL_         PDQImage pthumb=DecompressionService.decompressThumbnailImage(buff); _EL_         if (pthumb != null) { _EL_           Bitmap bm=ConversionService.convertPDQImageToBitmap(pthumb,false); _EL_           pthumb.close(); _EL_           return bm; _EL_         } _EL_       } _EL_     } _EL_   } _EL_  catch (  IOException ex) { _EL_     ex.printStackTrace(); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public Rectangle2D shrink(Rectangle2D area,Rectangle2D result){ _EL_   if (result == null) { _EL_     result=new Rectangle2D.Double(); _EL_   } _EL_   result.setRect(area.getX() + this.left,area.getY() + this.top,area.getWidth() - this.left - this.right,area.getHeight() - this.top - this.bottom); _EL_   return result; _EL_ } _EL_ ', 'public static String assertJQ(SolrQueryRequest req,String... tests) throws Exception { _EL_   return assertJQ(req,JSONTestUtil.DEFAULT_DELTA,tests); _EL_ } _EL_ ', 'protected void buildAbsoluteStats(String name,long value,long time) throws InterruptedException { _EL_   List<XYDataItem> stats=statsCollection.getStats(name); _EL_   if (stats == null) { _EL_     stats=statsCollection.newStats(name,maxSeries); _EL_   } _EL_  else { _EL_     XYDataItem data=new XYDataItem(time,value); _EL_     statsCollection.lockForUpdate(); _EL_     try { _EL_       stats.add(data); _EL_       houseKeepStats(stats); _EL_     } _EL_   finally { _EL_       statsCollection.releaseLock(); _EL_     } _EL_     if (listeners != null) { _EL_       StatsCollectionEvent event=new StatsCollectionEvent(name,data); _EL_       for (      StatsCollectionListener listener : listeners) { _EL_         if (listener.isEnabled()) { _EL_           listener.statsCollected(event); _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'protected void serialize(String filename){ _EL_   classifier.serializeClassifier(filename); _EL_ } _EL_ ', 'public static _Fields findByThriftId(int fieldId){ _EL_ switch (fieldId) { _EL_ case 1: _EL_     return BEGIN_IN_BOTH; _EL_ case 2: _EL_   return NEWINT; _EL_ case 3: _EL_ return NEWBYTE; _EL_ case 4: _EL_ return NEWSHORT; _EL_ case 5: _EL_ return NEWLONG; _EL_ case 6: _EL_ return NEWDOUBLE; _EL_ case 7: _EL_ return NEWSTRUCT; _EL_ case 8: _EL_ return NEWLIST; _EL_ case 9: _EL_ return NEWSET; _EL_ case 10: _EL_ return NEWMAP; _EL_ case 11: _EL_ return NEWSTRING; _EL_ case 12: _EL_ return END_IN_BOTH; _EL_ default : _EL_ return null; _EL_ } _EL_ } _EL_ ', 'protected Size2D arrangeFN(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){ _EL_   List blocks=container.getBlocks(); _EL_   Block b=(Block)blocks.get(0); _EL_   Size2D s=b.arrange(g2,RectangleConstraint.NONE); _EL_   double width=constraint.getWidth(); _EL_   Rectangle2D bounds=new Rectangle2D.Double((width - s.width) / 2.0,0.0,s.width,s.height); _EL_   b.setBounds(bounds); _EL_   return new Size2D((width - s.width) / 2.0,s.height); _EL_ } _EL_ ', 'private Object processExecute(Statement proxy,Method method,Object[] args) throws Throwable { _EL_   long startTime=logSlowQuery ? System.currentTimeMillis() : 0L; _EL_   try { _EL_     if (method.getName() == "executeQuery")     return newProxiedResultSet(proxy,method,args); _EL_     return targetInvoke(method,args); _EL_   } _EL_   finally { _EL_     if (logSlowQuery)     logQuery(proxy,args,startTime); _EL_   } _EL_ } _EL_ ', 'public int incr(T k,int delta){ _EL_   Integer i=counts.get(k); _EL_   if (i == null) { _EL_     i=0; _EL_   } _EL_   int next=i.intValue() + delta; _EL_   if (next < 0) { _EL_     throw new java.lang.ArithmeticException(); _EL_   } _EL_   if (next == 0) { _EL_     counts.remove(k); _EL_   } _EL_  else { _EL_     counts.put(k,i + delta); _EL_   } _EL_   return i; _EL_ } _EL_ ', 'public void send(final OscPacket thePacket,final TcpClient theClient){ _EL_   theClient.send(thePacket.getBytes()); _EL_ } _EL_ ', 'public static Map<String,MappedClass> fillInTheGaps(Map<String,MappedClass> mappedClasses,MappingMode mode){ _EL_   for (  String originalName : mappedClasses.keySet()) { _EL_     mappedClasses=fillGap(mappedClasses.get(originalName),mappedClasses,mode); _EL_   } _EL_   return mappedClasses; _EL_ } _EL_ ', 'public static Script createMultiSigInputScriptBytes(List<byte[]> signatures){ _EL_   checkArgument(signatures.size() <= 16); _EL_   ScriptBuilder builder=new ScriptBuilder(); _EL_   builder.smallNum(0); _EL_   for (  byte[] signature : signatures)   builder.data(signature); _EL_   return builder.build(); _EL_ } _EL_ ', 'public synchronized <T extends EventListener>void add(Class<T> t,T l){ _EL_   if (l == null) { _EL_     return; _EL_   } _EL_   if (!t.isInstance(l)) { _EL_     throw new IllegalArgumentException("Listener " + l + " is not of type "+ t); _EL_   } _EL_   if (listenerList == NULL_ARRAY) { _EL_     listenerList=new Object[]{t,l}; _EL_   } _EL_  else { _EL_     int i=listenerList.length; _EL_     Object[] tmp=new Object[i + 2]; _EL_     System.arraycopy(listenerList,0,tmp,0,i); _EL_     tmp[i]=t; _EL_     tmp[i + 1]=l; _EL_     listenerList=tmp; _EL_   } _EL_ } _EL_ ', 'public static void gc2gc(double c1[],int m1,double g1,double c2[],int m2,double g2){ _EL_   double[] gc2gc_buff=Arrays.copyOf(c1,m1 + 1); _EL_   c2[0]=gc2gc_buff[0]; _EL_   for (int i=1; i <= m2; i++) { _EL_     double ss1=0.0; _EL_     double ss2=0.0; _EL_     int min=m1 < i ? m1 : i - 1; _EL_     for (int k=1; k <= min; k++) { _EL_       int mk=i - k; _EL_       double cc=gc2gc_buff[k] * c2[mk]; _EL_       ss2+=k * cc; _EL_       ss1+=mk * cc; _EL_     } _EL_     if (i <= m1)     c2[i]=gc2gc_buff[i] + (g2 * ss2 - g1 * ss1) / i; _EL_  else     c2[i]=(g2 * ss2 - g1 * ss1) / i; _EL_   } _EL_ } _EL_ ', 'public static boolean between(Date baseDate,Date startDate,Date endDate){ _EL_   if (startDate.equals(endDate) || endDate.before(startDate)) { _EL_     return false; _EL_   } _EL_   if ((startDate.before(baseDate) || startDate.equals(baseDate)) && (endDate.after(baseDate) || endDate.equals(baseDate))) { _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void addListener(final TimeoutEventListener listener){ _EL_   final long timeout=listener.getTimeout(); _EL_   if (timeout > 0) { _EL_     listeners.add(listener); _EL_ synchronized (stateLock) { _EL_       pendingListenerMinDelay=Math.min(pendingListenerMinDelay,timeout); _EL_       stateLock.notifyAll(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static String[] convertStrings(List<String> strings){ _EL_   String[] ret=new String[strings.size()]; _EL_   for (int i=0; i < ret.length; i++) { _EL_     ret[i]=strings.get(i); _EL_   } _EL_   return ret; _EL_ } _EL_ ', '@Override public void write(byte[] buffer,int offset,int length){ _EL_   if (isClosed() || isHead()) { _EL_     return; _EL_   } _EL_   int byteLength=_offset; _EL_   while (true) { _EL_     int sublen=Math.min(length,SIZE - byteLength); _EL_     System.arraycopy(buffer,offset,_buffer,byteLength,sublen); _EL_     offset+=sublen; _EL_     length-=sublen; _EL_     byteLength+=sublen; _EL_     if (length <= 0) { _EL_       break; _EL_     } _EL_     _offset=byteLength; _EL_     flushByteBuffer(); _EL_     byteLength=_offset; _EL_   } _EL_   _offset=byteLength; _EL_ } _EL_ ', 'private void appendTag(String tagName,String value){ _EL_   xml.append("\\n<"); _EL_   xml.append(tagName); _EL_   xml.append("><![CDATA["); _EL_   xml.append(value); _EL_   xml.append("]]></"); _EL_   xml.append(tagName); _EL_   xml.append(">"); _EL_ } _EL_ ', '@Override public CertificateTokenValidationExtraInfo extraInfo(){ _EL_   return extraInfo; _EL_ } _EL_ ', 'public void addTopLevelContents(Collection<ContentElement> contents){ _EL_   topLevelContents.addAll(contents); _EL_ } _EL_ ', 'public static void withInstance(Map<String,Object> args,Closure c) throws SQLException, ClassNotFoundException { _EL_   Sql sql=null; _EL_   try { _EL_     sql=newInstance(args); _EL_     c.call(sql); _EL_   } _EL_   finally { _EL_     if (sql != null)     sql.close(); _EL_   } _EL_ } _EL_ ', 'public void write(byte[] buffer,int offset,int length,boolean isEnd) throws IOException { _EL_   throw new UnsupportedOperationException(String.valueOf(this)); _EL_ } _EL_ ', 'private boolean addIndexEntry(ServiceType resourceType,String resourceName,String policyName) throws PolicyException { _EL_   ResourceIndex resourceIndex=(ResourceIndex)resourceIndices.get(resourceType.getName()); _EL_   if (resourceIndex == null) { _EL_     resourceIndex=refreshResourceIndexFromDataStore(resourceType); _EL_   } _EL_   return resourceIndex.addIndexEntry(resourceName,policyName); _EL_ } _EL_ ', 'private static void deleteFrom(int deleteAt,int[] starts,int numStarts){ _EL_   while (starts[--numStarts] > deleteAt) { _EL_     starts[numStarts]-=1; _EL_   } _EL_ } _EL_ ', 'public static boolean useSubjectCredsOnly(GSSCaller caller){ _EL_   if (caller instanceof HttpCaller) { _EL_     return false; _EL_   } _EL_   String propValue=AccessController.doPrivileged(new GetPropertyAction("javax.security.auth.useSubjectCredsOnly","true")); _EL_   return (!propValue.equalsIgnoreCase("false")); _EL_ } _EL_ ', 'public void add(String fieldName,String value){ _EL_   if (fieldName == null)   throw new IllegalArgumentException("fieldname == null"); _EL_   if (value == null)   throw new IllegalArgumentException("value == null"); _EL_   if (fieldName.length() == 0 || fieldName.indexOf(\'\\0\') != -1 || value.indexOf(\'\\0\') != -1) { _EL_     throw new IllegalArgumentException("Unexpected header: " + fieldName + ": "+ value); _EL_   } _EL_   addLenient(fieldName,value); _EL_ } _EL_ ', 'public void deleteStorage(StorageData storageData) throws BusinessException, IOException { _EL_   StorageData local=getLocalStorageDataObject(storageData); _EL_ synchronized (local) { _EL_     if ((storageRecorder.isRecordingOn() || storageRecorder.isRecordingScheduled()) && Objects.equals(local,recorderStorageData)) { _EL_       throw new BusinessException("Delete the storage " + local + ".",StorageErrorCodeEnum.STORAGE_ALREADY_CLOSED); _EL_     } _EL_     if (local.isStorageOpened()) { _EL_       StorageWriter writer=openedStoragesMap.get(local); _EL_       if (writer != null) { _EL_         writer.cancel(); _EL_       } _EL_       openedStoragesMap.remove(local); _EL_     } _EL_     deleteCompleteStorageDataFromDisk(local); _EL_     existingStoragesSet.remove(local); _EL_   } _EL_ } _EL_ ', 'public CoapResponse advanced(Request request){ _EL_   assignClientUriIfEmpty(request); _EL_   return synchronous(request); _EL_ } _EL_ ', '@Override public boolean conditionOk(Example example){ _EL_   boolean isOk=true; _EL_   for (  Attribute attribute : checkedAttributes) { _EL_     isOk&=!Double.isNaN(example.getValue(attribute)); _EL_   } _EL_   return isOk; _EL_ } _EL_ ', 'private void loadBinary(InputStream is) throws IOException { _EL_   if (useNewIO && is instanceof FileInputStream) { _EL_     FileInputStream fis=(FileInputStream)is; _EL_     if (useIndexing) { _EL_       loadBinaryIndex(new URL(indexName)); _EL_       mapDatabase(fis); _EL_     } _EL_  else { _EL_       loadMappedBinary(fis); _EL_     } _EL_   } _EL_  else { _EL_     DataInputStream dis=new DataInputStream(new BufferedInputStream(is)); _EL_     loadBinary(dis); _EL_   } _EL_ } _EL_ ', 'public VNXeCommandJob deleteLunsFromLunGroup(String lunGroupId,List<String> luns){ _EL_   LunGroupModifyParam param=new LunGroupModifyParam(); _EL_   List<LunAddParam> lunDelete=new ArrayList<LunAddParam>(); _EL_   for (  String lunId : luns) { _EL_     VNXeBase lun=new VNXeBase(lunId); _EL_     LunAddParam lunAdd=new LunAddParam(); _EL_     lunAdd.setLun(lun); _EL_     lunDelete.add(lunAdd); _EL_   } _EL_   param.setLunDelete(lunDelete); _EL_   LunGroupRequests req=new LunGroupRequests(_khClient); _EL_   return req.modifyLunGroupAsync(lunGroupId,param); _EL_ } _EL_ ', 'public void removeLocators(LookupLocator[] locators){ _EL_   testSetForNull(locators); _EL_ synchronized (this) { _EL_     if (terminated) { _EL_       throw new IllegalStateException("discovery terminated"); _EL_     } _EL_     HashMap groupsMap=new HashMap(1); _EL_     for (int i=0; i < locators.length; i++) { _EL_       LocatorReg reg=removeDiscoveredLocator(locators[i]); _EL_       if (reg != null) { _EL_         groupsMap.put(reg.proxy,reg.memberGroups); _EL_         continue; _EL_       } _EL_       reg=findReg(locators[i]); _EL_       if (reg != null) { _EL_         undiscoveredLocators.remove(reg); _EL_       } _EL_     } _EL_     if (!groupsMap.isEmpty() && !listeners.isEmpty()) { _EL_       addNotify((ArrayList)listeners.clone(),groupsMap,true); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void add(final IProgressOperation operation){ _EL_   final GridBagConstraints constraints=new GridBagConstraints(); _EL_   constraints.fill=GridBagConstraints.HORIZONTAL; _EL_   constraints.gridy=counter++; _EL_   constraints.gridx=0; _EL_   constraints.weightx=1; _EL_   constraints.weighty=1; _EL_   m_progressPanel.add(operation.getProgressPanel(),constraints); _EL_ } _EL_ ', 'public KeyStoreBuilder withProvider(final String providerName){ _EL_   Provider provider=Security.getProvider(providerName); _EL_   if (provider == null) { _EL_     throw new IllegalArgumentException("No such provider: " + providerName); _EL_   } _EL_   return withProvider(provider); _EL_ } _EL_ ', 'public static HttpURLConnection toHttpConnection(Request... requests){ _EL_   return toHttpConnection(Arrays.asList(requests)); _EL_ } _EL_ ', 'private static char[] zzUnpackCMap(String packed){ _EL_   char[] map=new char[0x10000]; _EL_   int i=0; _EL_   int j=0; _EL_   while (i < 198) { _EL_     int count=packed.charAt(i++); _EL_     char value=packed.charAt(i++); _EL_     do     map[j++]=value; _EL_  while (--count > 0); _EL_   } _EL_   return map; _EL_ } _EL_ ', 'public CompositeRouteFinder(final GameMap map,final HashMap<Match<Territory>,Integer> matches){ _EL_   m_map=map; _EL_   m_matches=matches; _EL_   s_logger.finer("Initializing CompositeRouteFinderClass..."); _EL_ } _EL_ ', 'public TCPEndpoint(String host,int port){ _EL_   this(host,port,null,null); _EL_ } _EL_ ', 'public long stime(){ _EL_   return Long.parseLong(fields[14]); _EL_ } _EL_ ', 'public ProgramRewriter(ArrayList<HopRewriteRule> hRewrites,ArrayList<StatementBlockRewriteRule> sbRewrites){ _EL_   _dagRuleSet=new ArrayList<HopRewriteRule>(); _EL_   _dagRuleSet.addAll(hRewrites); _EL_   _sbRuleSet=new ArrayList<StatementBlockRewriteRule>(); _EL_   _sbRuleSet.addAll(sbRewrites); _EL_ } _EL_ ', 'private JMenu createSettingsMenu(){ _EL_   final JMenu menu=new JMenu("Settings"); _EL_   menu.setMnemonic(\'S\'); _EL_   menu.add(new CActionShowSettingsDialog(getParent())); _EL_   menu.add(new JSeparator()); _EL_   menu.add(new CActionInitialCallgraphSettings(getParent())); _EL_   menu.add(new CActionInitialFlowgraphSettings(getParent())); _EL_   return menu; _EL_ } _EL_ ', 'public static void writeString(DataOutputStream os,String s) throws IOException { _EL_   if (s == null) { _EL_     os.writeInt(-1); _EL_   } _EL_  else { _EL_     byte array[]=s.getBytes(); _EL_     os.writeInt(array.length); _EL_     os.write(array); _EL_   } _EL_ } _EL_ ', 'private List<String> createCommands(){ _EL_   List<String> commands=createNodeCommands(nodejsFile,tsFile); _EL_   List<String> args=createNodeArgs(); _EL_   if (args != null) { _EL_     commands.addAll(args); _EL_   } _EL_   return commands; _EL_ } _EL_ ', 'public static Thread consumeProcessErrorStream(Process self,Appendable error){ _EL_   Thread thread=new Thread(new TextDumper(self.getErrorStream(),error)); _EL_   thread.start(); _EL_   return thread; _EL_ } _EL_ ', 'public StrBuilder deleteFirst(final String str){ _EL_   final int len=(str == null ? 0 : str.length()); _EL_   if (len > 0) { _EL_     final int index=indexOf(str,0); _EL_     if (index >= 0) { _EL_       deleteImpl(index,index + len,len); _EL_     } _EL_   } _EL_   return this; _EL_ } _EL_ ', 'final public void trimToSize(){ _EL_   for (  GazEntry ge : gaz.values()) { _EL_     ge.trimToSize(); _EL_   } _EL_ } _EL_ ', 'public boolean containsSelectAccount(){ _EL_   return prompts.contains(PROMPT_SELECT_ACCOUNT); _EL_ } _EL_ ', 'protected static void quickSort(Instances insts,int[] indices,int attidx,int left,int right){ _EL_   if (left < right) { _EL_     int middle=partition(insts,indices,attidx,left,right); _EL_     quickSort(insts,indices,attidx,left,middle); _EL_     quickSort(insts,indices,attidx,middle + 1,right); _EL_   } _EL_ } _EL_ ', 'public Image flipImageHorizontally(Image image,boolean maintainOpacity){ _EL_   int[] rgb=image.getRGB(); _EL_   int[] newRGB=new int[rgb.length]; _EL_   int width=image.getWidth(); _EL_   int height=image.getHeight(); _EL_   for (int y=0; y < height; y++) { _EL_     for (int x=0; x < width; x++) { _EL_       newRGB[(width - x - 1) + y * width]=rgb[x + y * width]; _EL_     } _EL_   } _EL_   return EncodedImage.createFromRGB(newRGB,width,height,!maintainOpacity); _EL_ } _EL_ ', 'private void readSegments() throws IOException { _EL_   for (  SegmentExtent10 extent : _segmentExtents) { _EL_     try (ReadStream is=openRead(extent.address(),extent.length())){ _EL_       is.skip(extent.length() - BLOCK_SIZE); _EL_       long sequence=BitsUtil.readLong(is); _EL_       byte[] tableKey=new byte[TABLE_KEY_SIZE]; _EL_       is.readAll(tableKey,0,tableKey.length); _EL_       if (sequence > 0) { _EL_         Segment10 segment=new Segment10(sequence,tableKey,extent); _EL_         _segments.add(segment); _EL_       } _EL_     } _EL_    } _EL_ } _EL_ ', 'public static double projectTimeWithin24Hours(double time){ _EL_   double secondsInOneDay=60 * 60 * 24; _EL_   if (time == Double.NEGATIVE_INFINITY || time == Double.POSITIVE_INFINITY) { _EL_     DebugLib.stopSystemAndReportInconsistency("time is not allowed to be minus or plus infinity"); _EL_   } _EL_   while (time < 0) { _EL_     time+=secondsInOneDay; _EL_   } _EL_   if (time < secondsInOneDay) { _EL_     return time; _EL_   } _EL_  else { _EL_     return ((time / secondsInOneDay) - (Math.floor(time / secondsInOneDay))) * secondsInOneDay; _EL_   } _EL_ } _EL_ ', 'private byte[] updateMinMaxForNoDictionary(byte[] valueWithLength){ _EL_   ByteBuffer buffer=ByteBuffer.wrap(valueWithLength); _EL_   byte[] actualValue=new byte[buffer.getShort()]; _EL_   buffer.get(actualValue); _EL_   return actualValue; _EL_ } _EL_ ', '@SuppressWarnings("unchecked") public static void checkType(Map<String,Object> map,String name){ _EL_   Map<String,Object> tmap; _EL_   if (map.get(MetamodelGenerator.KEY_TYPE) instanceof Map) { _EL_     tmap=(Map<String,Object>)map.get(MetamodelGenerator.KEY_TYPE); _EL_   } _EL_  else   if (map.get(MetamodelGenerator.KEY_TYPE) instanceof String) { _EL_     tmap=new HashMap<String,Object>(); _EL_     tmap.put(MetamodelGenerator.KEY_NAME,map.get(MetamodelGenerator.KEY_TYPE)); _EL_   } _EL_  else { _EL_     tmap=map; _EL_   } _EL_   int join=name.indexOf(\'&\'); _EL_   if (join > 0) { _EL_     while (join > 0 && !pointyBracketsEven(name.substring(0,join))) { _EL_       join=name.indexOf(\'&\',join + 1); _EL_     } _EL_     if (join > 0) { _EL_       Assert.assertEquals("not an intersection type","i",tmap.get("comp")); _EL_       checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(0,join)); _EL_       checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(join + 1)); _EL_       return; _EL_     } _EL_   } _EL_   join=name.indexOf(\'|\'); _EL_   if (join > 0) { _EL_     while (join > 0 && !pointyBracketsEven(name.substring(0,join))) { _EL_       join=name.indexOf(\'|\',join + 1); _EL_     } _EL_     if (join > 0) { _EL_       Assert.assertEquals("not a union type","u",tmap.get("comp")); _EL_       checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(0,join)); _EL_       checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(join + 1)); _EL_       return; _EL_     } _EL_   } _EL_   int sep=name.indexOf(\'<\'); _EL_   String typeParams=null; _EL_   if (sep > 0) { _EL_     typeParams=name.substring(sep + 1,name.length() - 1); _EL_     name=name.substring(0,sep); _EL_   } _EL_   if (tmap.containsKey(MetamodelGenerator.KEY_PACKAGE)) { _EL_     Assert.assertEquals(name,String.format("%s::%s",packageName(tmap),tmap.get(MetamodelGenerator.KEY_NAME))); _EL_   } _EL_  else { _EL_     Assert.assertEquals(name,tmap.get(MetamodelGenerator.KEY_NAME)); _EL_   } _EL_   if (typeParams != null) { _EL_     List<Map<String,Object>> tparms=(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPE_PARAMS); _EL_     Assert.assertFalse("Type parameters shouldn\'t be empty",tparms.isEmpty()); _EL_     checkTypeParameters(0,tparms,typeParams); _EL_   } _EL_ } _EL_ ', 'private Object _deserializeStruct(Element elStruct) throws ConverterException { _EL_   String type=elStruct.getAttribute("type"); _EL_   Struct struct=new StructImpl(); _EL_   NodeList list=elStruct.getChildNodes(); _EL_   int len=list.getLength(); _EL_   for (int i=0; i < len; i++) { _EL_     Node node=list.item(i); _EL_     if (node instanceof Element) { _EL_       Element var=(Element)node; _EL_       Element value=getChildElement((Element)node); _EL_       if (value != null) { _EL_         struct.setEL(var.getAttribute("name"),_deserialize(value)); _EL_       } _EL_     } _EL_   } _EL_   if (struct.size() == 0 && type != null && type.length() > 0) { _EL_     return ""; _EL_   } _EL_   return struct; _EL_ } _EL_ ', 'public QuerierCLI(String[] args){ _EL_   cliOptions=createOptions(); _EL_   try { _EL_     CommandLineParser parser=new GnuParser(); _EL_     commandLine=parser.parse(cliOptions,args,true); _EL_     if (hasOption("h")) { _EL_       printHelp(); _EL_       System.exit(1); _EL_     } _EL_     if (!parseOptions()) { _EL_       logger.info("The provided options are not valid"); _EL_       printHelp(); _EL_       System.exit(1); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_     System.exit(1); _EL_   } _EL_ } _EL_ ', 'public In(File file){ _EL_   if (file == null)   throw new NullPointerException("argument is null"); _EL_   try { _EL_     FileInputStream fis=new FileInputStream(file); _EL_     scanner=new Scanner(new BufferedInputStream(fis),CHARSET_NAME); _EL_     scanner.useLocale(LOCALE); _EL_   } _EL_  catch (  IOException ioe) { _EL_     throw new IllegalArgumentException("Could not open " + file); _EL_   } _EL_ } _EL_ ', 'protected ExtendedDismaxConfiguration createConfiguration(String qstr,SolrParams localParams,SolrParams params,SolrQueryRequest req){ _EL_   return new ExtendedDismaxConfiguration(localParams,params,req); _EL_ } _EL_ ', 'protected double computeMaxYAxisValueLogScale(double maxValue){ _EL_   double v=0; _EL_   int mantisse=0; _EL_   int exponent=0; _EL_   while (v < maxValue) { _EL_     if (mantisse < 9)     mantisse++; _EL_  else { _EL_       mantisse=1; _EL_       exponent++; _EL_     } _EL_     v=mantisse * Math.pow(10,exponent); _EL_   } _EL_   return Math.log10(v); _EL_ } _EL_ ', 'public void addFocusClearedListener(FocusClearedListener focusClearedListener){ _EL_   mFocusClearedListeners.add(focusClearedListener); _EL_ } _EL_ ', 'public void addItemListener(ItemListener aListener){ _EL_   listenerList.add(ItemListener.class,aListener); _EL_ } _EL_ ', 'public static MosaicLevy createMosaicLevy(final MosaicId mosaicId){ _EL_   return new MosaicLevy(MosaicTransferFeeType.Absolute,generateRandomAccount(),mosaicId,Quantity.fromValue(123)); _EL_ } _EL_ ', 'public int rankOf(double value){ _EL_   int ret=0; _EL_   if (!hasCapacity()) { _EL_     ret=Arrays.binarySearch(data,value); _EL_     if (ret < 0) { _EL_       return -ret - 1; _EL_     } _EL_  else { _EL_       return ret; _EL_     } _EL_   } _EL_  else { _EL_     for (int i=0; i < next; i++) { _EL_       if (data[i] < value) { _EL_         ret++; _EL_       } _EL_     } _EL_     return ret; _EL_   } _EL_ } _EL_ ', 'public static <T>Predicate<T> not(Predicate<T> predicate){ _EL_   return predicate.negate(); _EL_ } _EL_ ', 'private static void addMarginTopToContentChild(View mContentChild,int statusBarHeight){ _EL_   if (mContentChild == null) { _EL_     return; _EL_   } _EL_   if (!TAG_MARGIN_ADDED.equals(mContentChild.getTag())) { _EL_     FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mContentChild.getLayoutParams(); _EL_     lp.topMargin+=statusBarHeight; _EL_     mContentChild.setLayoutParams(lp); _EL_     mContentChild.setTag(TAG_MARGIN_ADDED); _EL_   } _EL_ } _EL_ ', 'static byte[] hexStringToByteArray(String hexString){ _EL_   String s=hexString; _EL_   int len=s.length(); _EL_   if (len % 2 == 1) { _EL_     s="0" + s; _EL_     len++; _EL_   } _EL_   byte[] data=new byte[len / 2]; _EL_   for (int i=0; i < len; i+=2) { _EL_     data[i / 2]=(byte)((Character.digit(s.charAt(i),16) << 4) + Character.digit(s.charAt(i + 1),16)); _EL_   } _EL_   return data; _EL_ } _EL_ ', 'public int send(byte[] buffer,int offset,int count){ _EL_   checkArrayBounds(buffer,offset,count); _EL_   if (count == 0) { _EL_     return 0; _EL_   } _EL_   byte[] data=buffer; _EL_   if (offset > 0) { _EL_     data=new byte[count]; _EL_     System.arraycopy(buffer,offset,data,0,count); _EL_   } _EL_   IntOut bytesSentOut=new IntOut(); _EL_   try { _EL_     IDevice.checkResult(LibIMobileDevice.idevice_connection_send(getRef(),data,count,bytesSentOut)); _EL_     return bytesSentOut.getValue(); _EL_   } _EL_   finally { _EL_     bytesSentOut.delete(); _EL_   } _EL_ } _EL_ ', 'private void fetchSchema() throws ExecutionException, RpcException, TimeoutException { _EL_   Message schema=Rpc.get(myClient.getSchema(),FETCH_SCHEMA_TIMEOUT_MS,TimeUnit.MILLISECONDS); _EL_   LOG.info("Schema with " + schema.entities.length + " classes, "+ schema.constants.length+ " constant sets"); _EL_   int atoms=0; _EL_   for (  Entity type : schema.entities) { _EL_     if (AtomMetadata.find(type) != null) { _EL_       atoms++; _EL_     } _EL_     Dynamic.register(type); _EL_   } _EL_   LOG.info("Schema with " + atoms + " atoms"); _EL_   for (  ConstantSet set : schema.constants) { _EL_     ConstantSet.register(set); _EL_   } _EL_ } _EL_ ', 'private void append(StringBuilder buffer,double[] data,String prefix,String separator,String suffix){ _EL_   buffer.append(prefix); _EL_   for (int i=0; i < data.length; ++i) { _EL_     if (i > 0) { _EL_       buffer.append(separator); _EL_     } _EL_     buffer.append(data[i]); _EL_   } _EL_   buffer.append(suffix); _EL_ } _EL_ ', 'public T toRealArray(){ _EL_   return _outputArrayType.cast(ArrayMultidimensionalizer.multidimensionalize(_real,_dimensions)); _EL_ } _EL_ ', 'private ArrayList<WritableComparable> readPartitions(FileSystem fs,Path p,JobConf job) throws IOException { _EL_   SequenceFile.Reader reader=new SequenceFile.Reader(fs,p,job); _EL_   ArrayList<WritableComparable> parts=new ArrayList<WritableComparable>(); _EL_   try { _EL_     DoubleWritable key=new DoubleWritable(); _EL_     NullWritable value=NullWritable.get(); _EL_     while (reader.next(key,value)) { _EL_       parts.add(key); _EL_       key=new DoubleWritable(); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_  finally { _EL_     IOUtilFunctions.closeSilently(reader); _EL_   } _EL_   reader.close(); _EL_   return parts; _EL_ } _EL_ ', 'public boolean pollSeqno(long seqno){ _EL_   return seqno <= diskLog.getMaxSeqno(); _EL_ } _EL_ ', 'private static void drawLine(int x0,int y0,int x1,int y1,boolean[][] pic){ _EL_   final int xres=pic.length, yres=pic[0].length; _EL_   y0=(y0 < 0) ? 0 : (y0 >= yres) ? (yres - 1) : y0; _EL_   y1=(y1 < 0) ? 0 : (y1 >= yres) ? (yres - 1) : y1; _EL_   x0=(x0 < 0) ? 0 : (x0 >= xres) ? (xres - 1) : x0; _EL_   x1=(x1 < 0) ? 0 : (x1 >= xres) ? (xres - 1) : x1; _EL_   final int dx=+Math.abs(x1 - x0), sx=x0 < x1 ? 1 : -1; _EL_   final int dy=-Math.abs(y1 - y0), sy=y0 < y1 ? 1 : -1; _EL_   int err=dx + dy; _EL_   for (; ; ) { _EL_     pic[x0][y0]=true; _EL_     if (x0 == x1 && y0 == y1) { _EL_       break; _EL_     } _EL_     final int e2=err << 1; _EL_     if (e2 > dy) { _EL_       err+=dy; _EL_       x0+=sx; _EL_     } _EL_     if (e2 < dx) { _EL_       err+=dx; _EL_       y0+=sy; _EL_     } _EL_   } _EL_ } _EL_ ', 'public String process(Item item) throws ProcessException { _EL_   int count=0; _EL_   Item inPhrase=SUB_PHRASE_PATH.findItem(item); _EL_   for (Item p=inPhrase; p != null; p=p.getPrevious()) { _EL_     count++; _EL_   } _EL_   return Integer.toString(rail(count)); _EL_ } _EL_ ', 'public E push(E value){ _EL_   elements.add(value); _EL_   return value; _EL_ } _EL_ ', 'public long cardinality(final int tailIndex){ _EL_   return rangeCount(tailIndex); _EL_ } _EL_ ', 'public static void createResponse(HttpServletRequest request,HttpServletResponse response,HttpServlet servlet,Properties cookieProperties,WebDoc doc,boolean debug) throws IOException { _EL_   response.setHeader("Cache-Control","no-cache"); _EL_   response.setContentType("text/html; charset=UTF-8"); _EL_   if (cookieProperties != null) { _EL_     Cookie cookie=new Cookie(WebEnv.COOKIE_INFO,propertiesEncode(cookieProperties)); _EL_     cookie.setComment("(c) adempiere, Inc - Jorg Janke"); _EL_     cookie.setSecure(false); _EL_     cookie.setPath("/"); _EL_     if (cookieProperties.size() == 0)     cookie.setMaxAge(0); _EL_  else     cookie.setMaxAge(2592000); _EL_     response.addCookie(cookie); _EL_   } _EL_   if (debug && WebEnv.DEBUG) { _EL_     WebEnv.addFooter(request,response,servlet,doc.getBody()); _EL_   } _EL_   PrintWriter out=response.getWriter(); _EL_   doc.output(out); _EL_   out.flush(); _EL_   if (out.checkError())   log.log(Level.SEVERE,"error writing"); _EL_   out.close(); _EL_ } _EL_ ', 'public static Long toLong(Object o) throws PageException { _EL_   if (o instanceof Long)   return (Long)o; _EL_   return Long.valueOf(toLongValue(o)); _EL_ } _EL_ ', '@Override public void shutdown(){ _EL_   if (!shouldKeepAdbAlive) { _EL_     AndroidDebugBridge.disconnectBridge(); _EL_     AndroidDebugBridge.terminate(); _EL_   } _EL_   logger.info("stopping Device Manager"); _EL_ } _EL_ ', '@Override public void resetViewableArea(){ _EL_   throw new RuntimeException("resetViewableArea called in PdfDecoderFx"); _EL_ } _EL_ ', 'public static Lexicon buildWumpusLex(){ _EL_   Lexicon l=new Lexicon(); _EL_   ArrayList<LexWord> list=new ArrayList<LexWord>(); _EL_   list.add(new LexWord("stench",(float)0.05)); _EL_   list.add(new LexWord("breeze",(float)0.10)); _EL_   list.add(new LexWord("wumpus",(float)0.15)); _EL_   list.add(new LexWord("pits",(float)0.05)); _EL_   list.add(new LexWord("friend",(float)0.10)); _EL_   list.add(new LexWord("enemy",(float)0.10)); _EL_   list.add(new LexWord("dog",(float)0.10)); _EL_   list.add(new LexWord("superhero",(float)0.20)); _EL_   list.add(new LexWord("virus",(float)0.15)); _EL_   l.put("NOUN",list); _EL_   ArrayList<LexWord> verbList=new ArrayList<LexWord>(); _EL_   verbList.add(new LexWord("is",(float)0.10)); _EL_   verbList.add(new LexWord("feel",(float)0.10)); _EL_   verbList.add(new LexWord("smells",(float)0.10)); _EL_   verbList.add(new LexWord("stinks",(float)0.05)); _EL_   verbList.add(new LexWord("wants",(float)0.20)); _EL_   verbList.add(new LexWord("flies",(float)0.10)); _EL_   verbList.add(new LexWord("keeps",(float)0.05)); _EL_   verbList.add(new LexWord("leaves",(float)0.10)); _EL_   verbList.add(new LexWord("throws",(float)0.20)); _EL_   l.put("VERB",verbList); _EL_   ArrayList<LexWord> adjList=new ArrayList<LexWord>(); _EL_   adjList.add(new LexWord("right",(float)0.10)); _EL_   adjList.add(new LexWord("dead",(float)0.05)); _EL_   adjList.add(new LexWord("smelly",(float)0.02)); _EL_   adjList.add(new LexWord("breezy",(float)0.02)); _EL_   adjList.add(new LexWord("foul",(float)0.10)); _EL_   adjList.add(new LexWord("black",(float)0.05)); _EL_   adjList.add(new LexWord("white",(float)0.05)); _EL_   adjList.add(new LexWord("callous",(float)0.10)); _EL_   adjList.add(new LexWord("proud",(float)0.10)); _EL_   adjList.add(new LexWord("right",(float)0.10)); _EL_   adjList.add(new LexWord("gold",(float)0.06)); _EL_   adjList.add(new LexWord("normal",(float)0.25)); _EL_   l.put("ADJS",adjList); _EL_   l.addLexWords("ADVERB","here","0.05","ahead","0.05","nearby","0.02","quickly","0.05","badly","0.05","slowly","0.08","sadly","0.10","silently","0.10","easily","0.10","seldom","0.10","sometimes","0.10","loudly","0.10","cordially","0.05","frequently","0.05"); _EL_   l.addLexWords("PRONOUN","me","0.10","you","0.03","i","0.10","it","0.10","us","0.07","they","0.20","he","0.20","she","0.20"); _EL_   l.addLexWords("RELPRO","that","0.40","which","0.15","who","0.20","whom","0.02","whose","0.08","whabt","0.15"); _EL_   l.addLexWords(buildNameLexicon()); _EL_   l.addLexWords("ARTICLE","the","0.40","a","0.30","an","0.10","every","0.05","some","0.15"); _EL_   l.addLexWords("PREP","to","0.20","in","0.10","on","0.05","near","0.10","after","0.10","among","0.05","around","0.20","against","0.10","across","0.10"); _EL_   l.addLexWords("CONJ","and","0.50","or","0.10","but","0.20","yet","0.02","since","0.08","unless","0.10"); _EL_   l.addLexWords("DIGIT","0","0.20","1","0.20","2","0.20","3","0.20","4","0.20"); _EL_   return l; _EL_ } _EL_ ', 'public void add(X509TrustManager mgr){ _EL_   if (mgr instanceof X509Extensions) { _EL_     managers.add((X509Extensions)mgr); _EL_   } _EL_  else { _EL_     managers.add(new X509ExtensionsWrapper(mgr)); _EL_   } _EL_ } _EL_ ', 'public Iterator<TreeNode> findChildren(){ _EL_   List<TreeNode> nodes; _EL_   if (children == null)   nodes=Collections.emptyList(); _EL_  else   nodes=children; _EL_   return nodes.iterator(); _EL_ } _EL_ ', 'private static char[] zzUnpackCMap(String packed){ _EL_   char[] map=new char[0x10000]; _EL_   int i=0; _EL_   int j=0; _EL_   while (i < 164) { _EL_     int count=packed.charAt(i++); _EL_     char value=packed.charAt(i++); _EL_     do     map[j++]=value; _EL_  while (--count > 0); _EL_   } _EL_   return map; _EL_ } _EL_ ', 'public static double I(double P[][],int j,int k){ _EL_   double I=0.0; _EL_   double p_x=P[j][j]; _EL_   double p_y=P[k][k]; _EL_   double p_xy=P[j][k]; _EL_   I+=p_xy * Math.log(p_xy / (p_x * p_y)); _EL_   I+=(1. - p_xy) * Math.log((1. - p_xy) / ((1. - p_x) * (1. - p_y))); _EL_   return I; _EL_ } _EL_ ', 'static String valueToString(Object value,int indentFactor,int indent){ _EL_   if (value == null || value.equals(null)) { _EL_     return "null"; _EL_   } _EL_   try { _EL_     if (value instanceof String) { _EL_       return quote((String)value); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_   } _EL_   if (value instanceof Float || value instanceof Double || value instanceof Byte|| value instanceof Short|| value instanceof Integer|| value instanceof Long) { _EL_     return numberToString(value); _EL_   } _EL_   if (value instanceof Boolean) { _EL_     return value.toString(); _EL_   } _EL_   if (value instanceof Map) { _EL_     return print((Map)value,indentFactor,indent); _EL_   } _EL_   if (value instanceof List) { _EL_     return print((List)value,indentFactor,indent); _EL_   } _EL_   return quote(value.toString()); _EL_ } _EL_ ', 'public static boolean isRetainedAtRuntime(Class<? extends Annotation> annotationType){ _EL_   Retention retention=annotationType.getAnnotation(Retention.class); _EL_   return retention != null && retention.value() == RetentionPolicy.RUNTIME; _EL_ } _EL_ ', 'public void addClassPath(String classpath){ _EL_   char sep=CauchoUtil.getPathSeparatorChar(); _EL_   int head=0; _EL_   int tail=0; _EL_   while (head < classpath.length()) { _EL_     tail=classpath.indexOf(sep,head); _EL_     String segment=null; _EL_     if (tail < 0) { _EL_       segment=classpath.substring(head); _EL_       head=classpath.length(); _EL_     } _EL_  else { _EL_       segment=classpath.substring(head,tail); _EL_       head=tail + 1; _EL_     } _EL_     if (segment.equals(""))     continue; _EL_  else     if (segment.endsWith(".jar") || segment.endsWith(".zip"))     addMergePath(JarPath.create(VfsOld.lookup(segment))); _EL_  else     addMergePath(VfsOld.lookup(segment)); _EL_   } _EL_ } _EL_ ', '@Singleton public static synchronized void loadDirectories(String firstOption) throws InvalidConfigException { _EL_   if (userIdDirectories == null) { _EL_     userIdDirectories=new TreeMap<String,String>(); _EL_     userIdDirectories.put("",(firstOption == null) ? "-" : firstOption); _EL_     Properties properties=directoriesProperties(); _EL_     for (    Map.Entry<Object,Object> entry : properties.entrySet()) { _EL_       String key=StringUtils.trim((String)entry.getKey()); _EL_       String value=StringUtils.trim((String)entry.getValue()); _EL_       if (key != null && value != null) { _EL_         userIdDirectories.put(key,value); _EL_       } _EL_  else { _EL_         String error=DIRECTORIES_PROPFILE_PATH + " has been been configured wrong."; _EL_         LOG.error(error); _EL_         throw new InvalidConfigException(InvalidConfigException.TYPE.INVALID_PROPERTIES_FILE,error); _EL_       } _EL_     } _EL_     if ((userIdDirectories.size() - 1) == 0) { _EL_       String error="No licenses could be loaded from " + DIRECTORIES_PROPFILE_PATH + ". Please check configuration."; _EL_       LOG.error(error); _EL_       throw new InvalidConfigException(InvalidConfigException.TYPE.INVALID_PROPERTIES_FILE,error); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static Individuum nullIndividuum(int dim){ _EL_   short[] gene=new short[dim]; _EL_   Arrays.fill(gene,DONT_CARE); _EL_   return new Individuum(0.0,gene); _EL_ } _EL_ ', 'public List<Class<?>> findAllClasses(String uri) throws IOException, ClassNotFoundException { _EL_   List<Class<?>> classes=new ArrayList<>(); _EL_   List<String> strings=findAllStrings(uri); _EL_   for (  String className : strings) { _EL_     Class<?> clazz=_classLoader.loadClass(className); _EL_     classes.add(clazz); _EL_   } _EL_   return classes; _EL_ } _EL_ ', 'public void shuffleInventory(@Nonnull IInventory inv,@Nonnull Random random){ _EL_   final List<ItemStack> list=getInventoryList(inv); _EL_   Collections.shuffle(list,random); _EL_   for (int i=0; i < inv.getSizeInventory(); ++i) { _EL_     inv.setInventorySlotContents(i,list.get(i)); _EL_   } _EL_ } _EL_ ', '@Override public String format(double value,int formatNumber){ _EL_   if (formatNumber % 2 == 0) { _EL_     return format.format(value); _EL_   } _EL_  else { _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public void runAsserts(List<Step> list,int size,Boolean needAssignee){ _EL_   assertEquals(size,list.size()); _EL_   for (int i=0; i < size; i++) { _EL_     runAsserts(list.get(i),i,needAssignee); _EL_   } _EL_ } _EL_ ', 'public static boolean registerTransform(final String transformURI){ _EL_   final boolean added=transforms.add(transformURI); _EL_   return added; _EL_ } _EL_ ', 'public synchronized void co_exit(int thisCoroutine){ _EL_   m_activeIDs.clear(thisCoroutine); _EL_   m_nextCoroutine=NOBODY; _EL_   notify(); _EL_ } _EL_ ', 'public void shrink(){ _EL_   if (c.length == length) { _EL_     return; _EL_   } _EL_   char[] newc=new char[length]; _EL_   System.arraycopy(c,0,newc,0,length); _EL_   c=newc; _EL_ } _EL_ ', 'public ANDCondition(Condition... conditions){ _EL_   Reject.ifNull(conditions); _EL_   this.conditions=Arrays.asList(conditions); _EL_ } _EL_ ', 'private void dropDownstreamTo(long absolutePosition){ _EL_   int relativePosition=(int)(absolutePosition - totalBytesDropped); _EL_   int allocationIndex=relativePosition / allocationLength; _EL_   for (int i=0; i < allocationIndex; i++) { _EL_     allocator.release(dataQueue.remove()); _EL_     totalBytesDropped+=allocationLength; _EL_   } _EL_ } _EL_ ', 'public HopImpl(String hostName,int portNumber,String trans){ _EL_   host=hostName; _EL_   if (host.indexOf(":") >= 0)   if (host.indexOf("[") < 0)   host="[" + host + "]"; _EL_   port=portNumber; _EL_   transport=trans; _EL_ } _EL_ ', 'private void updateControls(){ _EL_   Spinner difficulty=(Spinner)findViewById(R.id.spinner_difficultyLevel); _EL_   difficulty.setSelection(GameActivity.getDifficultyIndex()); _EL_   Button resume=(Button)findViewById(R.id.button_resumeGame); _EL_   resume.setEnabled(GameActivity.canResumeFromSave()); _EL_   CheckBox neverLoseBall=(CheckBox)findViewById(R.id.checkbox_neverLoseBall); _EL_   neverLoseBall.setChecked(GameActivity.getNeverLoseBall()); _EL_   CheckBox soundEffectsEnabled=(CheckBox)findViewById(R.id.checkbox_soundEffectsEnabled); _EL_   soundEffectsEnabled.setChecked(GameActivity.getSoundEffectsEnabled()); _EL_   TextView highScore=(TextView)findViewById(R.id.text_highScore); _EL_   highScore.setText(String.valueOf(mHighScore)); _EL_ } _EL_ ', 'public boolean allowMultipleAdditions(String systemName){ _EL_   return true; _EL_ } _EL_ ', 'protected static boolean isObjectClassPresent(Set objectClasses,String objectClass){ _EL_   if (objectClasses != null && !objectClasses.isEmpty()) { _EL_     Iterator itr=objectClasses.iterator(); _EL_     while (itr.hasNext()) { _EL_       String serviceOC=(String)itr.next(); _EL_       if (serviceOC.equalsIgnoreCase(objectClass)) { _EL_         return true; _EL_       } _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void writeField(final String name,final int value) throws java.io.IOException { _EL_   writeField(name,Integer.toString(value)); _EL_ } _EL_ ', 'public void sync() throws IOException { _EL_   try { _EL_     latch.await(); _EL_   } _EL_  catch (  InterruptedException e) { _EL_     Thread.interrupted(); _EL_     throw IOExceptionSupport.create(e); _EL_   } _EL_   failOnError(); _EL_ } _EL_ ', 'public static void closeSilently(Closeable closeable){ _EL_   if (closeable == null) { _EL_     return; _EL_   } _EL_   try { _EL_     closeable.close(); _EL_   } _EL_  catch (  RuntimeException rethrown) { _EL_     throw rethrown; _EL_   } _EL_ catch (  Exception ignored) { _EL_   } _EL_ } _EL_ ', 'public synchronized boolean append(final byte[] data){ _EL_   if (data == null) { _EL_     if (Cfg.DEBUG) { _EL_       Check.log(TAG + " (append) null data"); _EL_     } _EL_     return true; _EL_   } _EL_   FileOutputStream fout=null; _EL_   OutputStream out=null; _EL_   try { _EL_     fout=new FileOutputStream(file,true); _EL_     out=new BufferedOutputStream(fout,data.length); _EL_     out.write(data); _EL_     out.flush(); _EL_   } _EL_  catch (  final Exception ex) { _EL_     return false; _EL_   } _EL_  finally { _EL_     if (fout != null) { _EL_       try { _EL_         fout.close(); _EL_       } _EL_  catch (      final IOException e) { _EL_         if (Cfg.EXCEPTION) { _EL_           Check.log(e); _EL_         } _EL_         if (Cfg.DEBUG) { _EL_           Check.log(TAG + " Error: " + e.toString()); _EL_         } _EL_       } _EL_     } _EL_     if (out != null) { _EL_       try { _EL_         out.close(); _EL_       } _EL_  catch (      final IOException e) { _EL_         if (Cfg.EXCEPTION) { _EL_           Check.log(e); _EL_         } _EL_         if (Cfg.DEBUG) { _EL_           Check.log(TAG + " Error: " + e.toString()); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', '@SuppressWarnings({"unchecked","rawtypes"}) private void notifyListListeners(){ _EL_   if (!listListeners.isEmpty()) { _EL_     List temp=new ArrayList(sensorDataObjects.values()); _EL_     temp.addAll(objectStorages.values()); _EL_     for (    ListListener<?> listListener : listListeners) { _EL_       listListener.contentChanged(temp); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static InetAddress intToInetAddress(int hostAddress){ _EL_   if (hostAddress == 0)   return null; _EL_   byte[] addressBytes={(byte)(0xff & hostAddress),(byte)(0xff & (hostAddress >> 8)),(byte)(0xff & (hostAddress >> 16)),(byte)(0xff & (hostAddress >> 24))}; _EL_   try { _EL_     return InetAddress.getByAddress(addressBytes); _EL_   } _EL_  catch (  UnknownHostException e) { _EL_     throw new AssertionError(); _EL_   } _EL_ } _EL_ ', 'private AFTPClient actionOpen() throws IOException, PageException { _EL_   required("server",server); _EL_   required("username",username); _EL_   required("password",password); _EL_   AFTPClient client=getClient(); _EL_   writeCfftp(client); _EL_   return client; _EL_ } _EL_ ', 'private static char[] zzUnpackCMap(String packed){ _EL_   int size=0; _EL_   for (int i=0, length=packed.length(); i < length; i+=2) { _EL_     size+=packed.charAt(i); _EL_   } _EL_   char[] map=new char[size]; _EL_   int i=0; _EL_   int j=0; _EL_   while (i < packed.length()) { _EL_     int count=packed.charAt(i++); _EL_     char value=packed.charAt(i++); _EL_     do     map[j++]=value; _EL_  while (--count > 0); _EL_   } _EL_   return map; _EL_ } _EL_ ', 'public V putIfAbsent(final K k,final V v){ _EL_   final WeakReference<V> ref=newWeakRef(k,v,referenceQueue); _EL_   final WeakReference<V> oldRef=map.putIfAbsent(k,ref); _EL_   final V oldVal=oldRef == null ? null : oldRef.get(); _EL_   if (oldRef != null && oldVal == null) { _EL_     if (map.replace(k,oldRef,ref)) { _EL_       if (queue.add(v) && DEBUG) { _EL_         log.debug("put: key=" + k + ", val="+ v); _EL_       } _EL_       didUpdate(k,ref,oldRef); _EL_       return null; _EL_     } _EL_   } _EL_   if (oldVal == null) { _EL_     if (queue.add(v) && DEBUG) { _EL_       log.debug("put: key=" + k + ", val="+ v); _EL_     } _EL_     didUpdate(k,ref,null); _EL_     return null; _EL_   } _EL_   return oldVal; _EL_ } _EL_ ', 'public int diff_commonSuffix(String text1,String text2){ _EL_   int text1_length=text1.length(); _EL_   int text2_length=text2.length(); _EL_   int n=Math.min(text1_length,text2_length); _EL_   for (int i=1; i <= n; i++) { _EL_     if (text1.charAt(text1_length - i) != text2.charAt(text2_length - i)) { _EL_       return i - 1; _EL_     } _EL_   } _EL_   return n; _EL_ } _EL_ ', 'public void close(){ _EL_   if (elementLayers != null) { _EL_     elementLayers.clear(); _EL_     elementLayers=null; _EL_   } _EL_   inputSource=null; _EL_   curListener=null; _EL_ } _EL_ ', 'public void start(){ _EL_   if (monitorThread != null) { _EL_     if (!monitorThread.isAlive()) { _EL_       startMonitorThread(); _EL_     } _EL_  else { _EL_       LOG.error("The monitor thread is already running"); _EL_     } _EL_   } _EL_  else { _EL_     startMonitorThread(); _EL_   } _EL_ } _EL_ ', '@HLEUnimplemented @HLEFunction(nid=0x41E73E95,version=271) public int sceUsbCamPollReadVideoFrameEnd(){ _EL_   if (jpegBuffer == null || jpegBuffer.isNull()) { _EL_     return SceKernelErrors.ERROR_USBCAM_NO_READ_ON_VIDEO_FRAME; _EL_   } _EL_   if (currentVideoFrameCount <= lastVideoFrameCount) { _EL_     if (log.isDebugEnabled()) { _EL_       log.debug(String.format("sceUsbCamPollReadVideoFrameEnd not frame end (%d - %d)",currentVideoFrameCount,lastVideoFrameCount)); _EL_     } _EL_     return SceKernelErrors.ERROR_USBCAM_NO_VIDEO_FRAME_AVAILABLE; _EL_   } _EL_   return writeCurrentVideoImage(jpegBuffer,jpegBufferSize); _EL_ } _EL_ ', 'public void scale(int factor){ _EL_   if (m_icon != null) { _EL_     removeAll(); _EL_     Image pic=m_icon.getImage(); _EL_     int width=m_icon.getIconWidth(); _EL_     int height=m_icon.getIconHeight(); _EL_     int reduction=width / factor; _EL_     width-=reduction; _EL_     height-=reduction; _EL_     pic=pic.getScaledInstance(width,height,Image.SCALE_SMOOTH); _EL_     m_icon=new ImageIcon(pic); _EL_     m_visualLabel=new JLabel(m_icon); _EL_     add(m_visualLabel,BorderLayout.CENTER); _EL_     Dimension d=m_visualLabel.getPreferredSize(); _EL_     Dimension d2=new Dimension((int)d.getWidth() + 10,(int)d.getHeight() + 10); _EL_     setMinimumSize(d2); _EL_     setPreferredSize(d2); _EL_     setMaximumSize(d2); _EL_   } _EL_ } _EL_ ', 'public String toLowerCamel(){ _EL_   return toCamel(CaseFormat.LOWER_CAMEL); _EL_ } _EL_ ', 'protected List<BlockObject> sortFullCopySourceList(List<BlockObject> fcSourceObjects){ _EL_   List<BlockObject> sortedSourceObjects=new ArrayList<BlockObject>(); _EL_   Map<String,BlockObject> fcSourcObjectsMap=new HashMap<String,BlockObject>(); _EL_   for (  BlockObject fcSourceObject : fcSourceObjects) { _EL_     fcSourcObjectsMap.put(fcSourceObject.getLabel(),fcSourceObject); _EL_   } _EL_   List<String> fcSourceLabels=new ArrayList<String>(fcSourcObjectsMap.keySet()); _EL_   Collections.sort(fcSourceLabels); _EL_   for (  String fcSourceLabel : fcSourceLabels) { _EL_     sortedSourceObjects.add(fcSourcObjectsMap.get(fcSourceLabel)); _EL_   } _EL_   return sortedSourceObjects; _EL_ } _EL_ ', 'protected void createRegistry(int port){ _EL_   if (rmiRegistry == null) { _EL_     try { _EL_       if (logger.isDebugEnabled()) { _EL_         logger.debug("Starting RMI registry on registryPort: " + port); _EL_       } _EL_       rmiRegistry=LocateRegistry.createRegistry(port); _EL_     } _EL_  catch (    Throwable e) { _EL_       throw new ServerRuntimeException("Unable to start rmi registry on registryPort: " + port,e); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void poll(final UdpSocketStatisticsHandler handler){ _EL_   this.statisticsHandler=handler; _EL_   try { _EL_     fileLoader.load(); _EL_     final ByteBuffer buffer=fileLoader.getBuffer(); _EL_     lineParser.reset(); _EL_     lineParser.handleToken(buffer,buffer.position(),buffer.limit()); _EL_   } _EL_   finally { _EL_     this.statisticsHandler=null; _EL_   } _EL_   monitoredSockets.purgeEntriesOlderThan(updateCount); _EL_   updateCount++; _EL_ } _EL_ ', 'private void resetInternal(){ _EL_   mTransitionState=TRANSITION_NONE; _EL_   Arrays.fill(mStartAlphas,0); _EL_   mStartAlphas[0]=255; _EL_   Arrays.fill(mAlphas,0); _EL_   mAlphas[0]=255; _EL_   Arrays.fill(mIsLayerOn,false); _EL_   mIsLayerOn[0]=true; _EL_ } _EL_ ', 'private void handleDoneQuery(final UUID queryId,final Future<Void> doneQueryFuture){ _EL_   try { _EL_     doneQueryFuture.get(); _EL_     throw new InterruptedException(); _EL_   } _EL_  catch (  InterruptedException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ catch (  ExecutionException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ } _EL_ ', 'synchronized public static List<String> formerIdentities(){ _EL_   if (instance == null) { _EL_     instance=new NodeIdentity(); _EL_     log.info("Using {} as the JMRI Node identity",instance.getIdentity()); _EL_   } _EL_   return instance.getFormerIdentities(); _EL_ } _EL_ ', 'public final double doOperation(){ _EL_   final int dim=parameter.getDimension(); _EL_   double sum=0.0; _EL_   if (usesPriorOnSum) { _EL_     for (int i=0; i < dim; i++) { _EL_       sum+=Math.abs(parameter.getParameterValue(i)); _EL_     } _EL_   } _EL_   final int pos=MathUtils.nextInt(dim); _EL_   final int value=(int)parameter.getParameterValue(pos); _EL_   double logq=0.0; _EL_   if (value == 0) { _EL_     logq=bitFlipHelper.flipZero(pos,dim,sum); _EL_   } _EL_  else   if (value == 1) { _EL_     logq=bitFlipHelper.flipOne(pos,dim,sum); _EL_   } _EL_  else   if (value == -1) { _EL_     logq=bitFlipHelper.flipNegOne(pos,dim,sum); _EL_   } _EL_  else { _EL_     throw new RuntimeException("expected 1 or 0 or -1"); _EL_   } _EL_   if (!usesPriorOnSum) { _EL_     logq=0; _EL_   } _EL_   return logq; _EL_ } _EL_ ', 'public void init(Object o,int depth,int traversal){ _EL_   m_queue.clear(); _EL_   m_depth=depth; _EL_   if (traversal < 0 || traversal >= Constants.TRAVERSAL_COUNT)   throw new IllegalArgumentException("Unrecognized traversal type: " + traversal); _EL_   m_traversal=traversal; _EL_   m_includeNodes=(traversal == Constants.NODE_TRAVERSAL || traversal == Constants.NODE_AND_EDGE_TRAVERSAL); _EL_   m_includeEdges=(traversal == Constants.EDGE_TRAVERSAL || traversal == Constants.NODE_AND_EDGE_TRAVERSAL); _EL_   if (m_includeNodes) { _EL_     if (o instanceof Node) { _EL_       m_queue.add(o,0); _EL_     } _EL_  else { _EL_       Iterator tuples=(Iterator)o; _EL_       while (tuples.hasNext())       m_queue.add(tuples.next(),0); _EL_     } _EL_   } _EL_  else { _EL_     if (o instanceof Node) { _EL_       Node n=(Node)o; _EL_       m_queue.visit(n,0); _EL_       Iterator edges=getEdges(n); _EL_       while (edges.hasNext()) { _EL_         Edge e=(Edge)edges.next(); _EL_         Node nn=e.getAdjacentNode(n); _EL_         m_queue.visit(nn,1); _EL_         if (m_queue.getDepth(e) < 0)         m_queue.add(e,1); _EL_       } _EL_     } _EL_  else { _EL_       Iterator tuples=(Iterator)o; _EL_       while (tuples.hasNext()) { _EL_         Node n=(Node)tuples.next(); _EL_         m_queue.visit(n,0); _EL_         Iterator edges=getEdges(n); _EL_         while (edges.hasNext()) { _EL_           Edge e=(Edge)edges.next(); _EL_           Node nn=e.getAdjacentNode(n); _EL_           m_queue.visit(nn,1); _EL_           if (m_queue.getDepth(e) < 0)           m_queue.add(e,1); _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public JapaneseDate dateEpochDay(long epochDay){ _EL_   return new JapaneseDate(LocalDate.ofEpochDay(epochDay)); _EL_ } _EL_ ', 'public long convertTransverseMercatorToGeodetic(double Easting,double Northing){ _EL_   double c; _EL_   double de; _EL_   double dlam; _EL_   double eta; _EL_   double eta2; _EL_   double eta3; _EL_   double eta4; _EL_   double ftphi; _EL_   int i; _EL_   double sn; _EL_   double sr; _EL_   double t; _EL_   double tan2; _EL_   double tan4; _EL_   double t10; _EL_   double t11; _EL_   double t12; _EL_   double t13; _EL_   double t14; _EL_   double t15; _EL_   double t16; _EL_   double t17; _EL_   double tmd; _EL_   double tmdo; _EL_   long Error_Code=TRANMERC_NO_ERROR; _EL_   if ((Easting < (TranMerc_False_Easting - TranMerc_Delta_Easting)) || (Easting > (TranMerc_False_Easting + TranMerc_Delta_Easting))) { _EL_     Error_Code|=TRANMERC_EASTING_ERROR; _EL_   } _EL_   if ((Northing < (TranMerc_False_Northing - TranMerc_Delta_Northing)) || (Northing > (TranMerc_False_Northing + TranMerc_Delta_Northing))) { _EL_     Error_Code|=TRANMERC_NORTHING_ERROR; _EL_   } _EL_   if (Error_Code == TRANMERC_NO_ERROR) { _EL_     tmdo=TranMerc_ap * TranMerc_Origin_Lat - TranMerc_bp * Math.sin(2.0 * TranMerc_Origin_Lat) + TranMerc_cp * Math.sin(4.0 * TranMerc_Origin_Lat) - TranMerc_dp * Math.sin(6.0 * TranMerc_Origin_Lat) + TranMerc_ep * Math.sin(8.0 * TranMerc_Origin_Lat); _EL_     tmd=tmdo + (Northing - TranMerc_False_Northing) / TranMerc_Scale_Factor; _EL_     sr=TranMerc_a * (1.e0 - TranMerc_es) / Math.pow(Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(0.e0),2)),3); _EL_     ftphi=tmd / sr; _EL_     for (i=0; i < 5; i++) { _EL_       t10=TranMerc_ap * ftphi - TranMerc_bp * Math.sin(2.0 * ftphi) + TranMerc_cp * Math.sin(4.0 * ftphi) - TranMerc_dp * Math.sin(6.0 * ftphi) + TranMerc_ep * Math.sin(8.0 * ftphi); _EL_       sr=TranMerc_a * (1.e0 - TranMerc_es) / Math.pow(Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(ftphi),2)),3); _EL_       ftphi=ftphi + (tmd - t10) / sr; _EL_     } _EL_     sr=TranMerc_a * (1.e0 - TranMerc_es) / Math.pow(Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(ftphi),2)),3); _EL_     sn=TranMerc_a / Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(ftphi),2)); _EL_     c=Math.cos(ftphi); _EL_     t=Math.tan(ftphi); _EL_     tan2=t * t; _EL_     tan4=tan2 * tan2; _EL_     eta=TranMerc_ebs * Math.pow(c,2); _EL_     eta2=eta * eta; _EL_     eta3=eta2 * eta; _EL_     eta4=eta3 * eta; _EL_     de=Easting - TranMerc_False_Easting; _EL_     if (Math.abs(de) < 0.0001)     de=0.0; _EL_     t10=t / (2.e0 * sr * sn* Math.pow(TranMerc_Scale_Factor,2)); _EL_     t11=t * (5.e0 + 3.e0 * tan2 + eta - 4.e0 * Math.pow(eta,2) - 9.e0 * tan2 * eta) / (24.e0 * sr * Math.pow(sn,3)* Math.pow(TranMerc_Scale_Factor,4)); _EL_     t12=t * (61.e0 + 90.e0 * tan2 + 46.e0 * eta + 45.E0 * tan4 - 252.e0 * tan2 * eta - 3.e0 * eta2 + 100.e0 * eta3 - 66.e0 * tan2 * eta2 - 90.e0 * tan4 * eta + 88.e0 * eta4 + 225.e0 * tan4 * eta2 + 84.e0 * tan2 * eta3 - 192.e0 * tan2 * eta4) / (720.e0 * sr * Math.pow(sn,5)* Math.pow(TranMerc_Scale_Factor,6)); _EL_     t13=t * (1385.e0 + 3633.e0 * tan2 + 4095.e0 * tan4 + 1575.e0 * Math.pow(t,6)) / (40320.e0 * sr * Math.pow(sn,7)* Math.pow(TranMerc_Scale_Factor,8)); _EL_     Latitude=ftphi - Math.pow(de,2) * t10 + Math.pow(de,4) * t11 - Math.pow(de,6) * t12 + Math.pow(de,8) * t13; _EL_     t14=1.e0 / (sn * c * TranMerc_Scale_Factor); _EL_     t15=(1.e0 + 2.e0 * tan2 + eta) / (6.e0 * Math.pow(sn,3) * c* Math.pow(TranMerc_Scale_Factor,3)); _EL_     t16=(5.e0 + 6.e0 * eta + 28.e0 * tan2 - 3.e0 * eta2 + 8.e0 * tan2 * eta + 24.e0 * tan4 - 4.e0 * eta3 + 4.e0 * tan2 * eta2 + 24.e0 * tan2 * eta3) / (120.e0 * Math.pow(sn,5) * c* Math.pow(TranMerc_Scale_Factor,5)); _EL_     t17=(61.e0 + 662.e0 * tan2 + 1320.e0 * tan4 + 720.e0 * Math.pow(t,6)) / (5040.e0 * Math.pow(sn,7) * c* Math.pow(TranMerc_Scale_Factor,7)); _EL_     dlam=de * t14 - Math.pow(de,3) * t15 + Math.pow(de,5) * t16 - Math.pow(de,7) * t17; _EL_     Longitude=TranMerc_Origin_Long + dlam; _EL_     if (Math.abs(Latitude) > (90.0 * PI / 180.0))     Error_Code|=TRANMERC_NORTHING_ERROR; _EL_     if ((Longitude) > (PI)) { _EL_       Longitude-=(2 * PI); _EL_       if (Math.abs(Longitude) > PI)       Error_Code|=TRANMERC_EASTING_ERROR; _EL_     } _EL_     if (Math.abs(dlam) > (9.0 * PI / 180) * Math.cos(Latitude)) { _EL_       Error_Code|=TRANMERC_LON_WARNING; _EL_     } _EL_     if (Latitude > 1.0e10)     Error_Code|=TRANMERC_LON_WARNING; _EL_   } _EL_   return (Error_Code); _EL_ } _EL_ ', 'private void checkEmpty(){ _EL_   for (int i=0; i < gridCount(); i++) { _EL_     IgniteCache<Integer,String> cache=jcache(i); _EL_     assertEquals(0,cache.localSize()); _EL_     assertEquals(0,cache.size()); _EL_     for (    CachePeekMode peekMode : CachePeekMode.values()) { _EL_       assertEquals(0,cache.localSize(peekMode)); _EL_       assertEquals(0,cache.size(peekMode)); _EL_     } _EL_   } _EL_   checkPrimarySize(0); _EL_ } _EL_ ', 'Node<K,V> find(int h,Object k){ _EL_   Node<K,V> e=this; _EL_   if (k != null) { _EL_     do { _EL_       K ek; _EL_       if (e.hash == h && ((ek=e.key) == k || ek != null && myHashingStrategy.equals((K)k,ek))) { _EL_         return e; _EL_       } _EL_     } _EL_  while ((e=e.next) != null); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static void addLanguage(Language language){ _EL_   if (language == null)   return; _EL_   ArrayList<Language> list=new ArrayList<Language>(Arrays.asList(s_languages)); _EL_   list.add(language); _EL_   s_languages=new Language[list.size()]; _EL_   list.toArray(s_languages); _EL_ } _EL_ ', 'protected void doAddUser(User user) throws UsersRepositoryException { _EL_   Connection conn=null; _EL_   PreparedStatement addUserStatement=null; _EL_   try { _EL_     conn=openConnection(); _EL_     addUserStatement=conn.prepareStatement(m_insertUserSql); _EL_     setUserForInsertStatement(user,addUserStatement); _EL_     addUserStatement.execute(); _EL_   } _EL_  catch (  SQLException sqlExc) { _EL_     sqlExc.printStackTrace(); _EL_     throw new UsersRepositoryException("Error accessing database",sqlExc); _EL_   } _EL_  finally { _EL_     theJDBCUtil.closeJDBCStatement(addUserStatement); _EL_     theJDBCUtil.closeJDBCConnection(conn); _EL_   } _EL_ } _EL_ ', 'void blockMix128(long k1,long k2){ _EL_   h1^=mixK1(k1); _EL_   h1=Long.rotateLeft(h1,27); _EL_   h1+=h2; _EL_   h1=(h1 * 5) + 0x52dce729; _EL_   h2^=mixK2(k2); _EL_   h2=Long.rotateLeft(h2,31); _EL_   h2+=h1; _EL_   h2=(h2 * 5) + 0x38495ab5; _EL_ } _EL_ ', 'private void registerHost(SimEvent ev){ _EL_   NetworkHost hs=(NetworkHost)ev.getData(); _EL_   hostlist.put(hs.getId(),hs); _EL_ } _EL_ ', '@Override public void reconcileFlow(OFMatchReconcile ofmRcIn,EventPriority priority){ _EL_   if (ofmRcIn == null)   return; _EL_   OFMatchReconcile myOfmRc=new OFMatchReconcile(ofmRcIn); _EL_   flowQueue.offer(myOfmRc,priority); _EL_   ctrFlowReconcileRequest.increment(); _EL_   Date currTime=new Date(); _EL_   long delay=0; _EL_   if (currTime.after(new Date(lastReconcileTime.getTime() + 1000))) { _EL_     delay=0; _EL_   } _EL_  else { _EL_     delay=FLOW_RECONCILE_DELAY_MILLISEC; _EL_   } _EL_   flowReconcileTask.reschedule(delay,TimeUnit.MILLISECONDS); _EL_   if (logger.isTraceEnabled()) { _EL_     logger.trace("Reconciling flow: {}, total: {}",myOfmRc.toString(),flowQueue.size()); _EL_   } _EL_ } _EL_ ', 'void createJar(FileOutputStream outStream,Map<String,byte[]> all) throws IOException { _EL_   JarOutputStream jar=new JarOutputStream(outStream); _EL_   for (  Entry<String,byte[]> entry : all.entrySet()) { _EL_     String name=entry.getKey(); _EL_     JarEntry jar_entry=new JarEntry(name); _EL_     jar.putNextEntry(jar_entry); _EL_     jar.write(entry.getValue()); _EL_     jar.closeEntry(); _EL_   } _EL_   jar.flush(); _EL_   jar.close(); _EL_ } _EL_ ', 'public void expectServerProxyFailed(){ _EL_   expectedApiCalls.add(new ApiCall(SERVER_PROXY_FAILED)); _EL_ } _EL_ ', 'public Object remove(final Object key){ _EL_   return parameters.remove(key); _EL_ } _EL_ ', '@Override public void recalculateAttributeStatistics(Attribute attribute){ _EL_   List<Attribute> allAttributes=new ArrayList<Attribute>(); _EL_   allAttributes.add(attribute); _EL_   recalculateAttributeStatistics(allAttributes); _EL_ } _EL_ ', 'public boolean isEmpty(){ _EL_   return children.isEmpty(); _EL_ } _EL_ ', 'public void insertColumn(int columnIndex,ColumnSpec columnSpec){ _EL_   if (columnIndex < 1 || columnIndex > getColumnCount()) { _EL_     throw new IndexOutOfBoundsException("The column index " + columnIndex + "must be in the range [1, "+ getColumnCount()+ "]."); _EL_   } _EL_   colSpecs.add(columnIndex - 1,columnSpec); _EL_   shiftComponentsHorizontally(columnIndex,false); _EL_   adjustGroupIndices(colGroupIndices,columnIndex,false); _EL_ } _EL_ ', 'public int addClientExternal(SSOToken token,Map props) throws AMClientCapException { _EL_ synchronized (externalClientData) { _EL_     extCapInstance.addClient(token,props); _EL_     String ct=getClientType(props); _EL_     Map eMap=mergeWithParent(props); _EL_     externalClientData.put(ct,eMap); _EL_     addToIndexes(ct,eMap); _EL_   } _EL_   return 0; _EL_ } _EL_ ', 'public static void delete(File resourceToDelete) throws IOException { _EL_   if (resourceToDelete.exists()) { _EL_     delete(resourceToDelete.toPath()); _EL_   } _EL_ } _EL_ ', 'public double inferenceByGibbsSampling(Document d,double[] pzd,int numBurnIn,int numSampling){ _EL_   Arrays.fill(pzd,0); _EL_   double loglikelihood=0.0; _EL_   for (int i=0; i < numBurnIn + numSampling; i++) { _EL_     loglikelihood+=gibbsSampling(d); _EL_     if (i >= numBurnIn) { _EL_       for (      int topic : d.topics) { _EL_         if (topic != NO_TOPIC)         pzd[topic]++; _EL_       } _EL_     } _EL_  else { _EL_       loglikelihood=0; _EL_     } _EL_   } _EL_   normalize(pzd,alpha); _EL_   return loglikelihood / numSampling; _EL_ } _EL_ ', 'public static void remove(String dbgToken){ _EL_   dbgTable.remove(dbgToken); _EL_ } _EL_ ', 'protected void checkSAXVersion(Hashtable h){ _EL_   if (null == h)   h=new Hashtable(); _EL_   final String SAX_VERSION1_CLASS="org.xml.sax.Parser"; _EL_   final String SAX_VERSION1_METHOD="parse"; _EL_   final String SAX_VERSION2_CLASS="org.xml.sax.XMLReader"; _EL_   final String SAX_VERSION2_METHOD="parse"; _EL_   final String SAX_VERSION2BETA_CLASSNF="org.xml.sax.helpers.AttributesImpl"; _EL_   final String SAX_VERSION2BETA_METHODNF="setAttributes"; _EL_   final Class oneStringArg[]={java.lang.String.class}; _EL_   final Class attributesArg[]={org.xml.sax.Attributes.class}; _EL_   try { _EL_     Class clazz=ObjectFactory.findProviderClass(SAX_VERSION2BETA_CLASSNF,ObjectFactory.findClassLoader(),true); _EL_     Method method=clazz.getMethod(SAX_VERSION2BETA_METHODNF,attributesArg); _EL_     h.put(VERSION + "SAX","2.0"); _EL_   } _EL_  catch (  Exception e) { _EL_     h.put(ERROR + VERSION + "SAX","ERROR attempting to load SAX version 2 class: " + e.toString()); _EL_     h.put(ERROR,ERROR_FOUND); _EL_     try { _EL_       Class clazz=ObjectFactory.findProviderClass(SAX_VERSION2_CLASS,ObjectFactory.findClassLoader(),true); _EL_       Method method=clazz.getMethod(SAX_VERSION2_METHOD,oneStringArg); _EL_       h.put(VERSION + "SAX-backlevel","2.0beta2-or-earlier"); _EL_     } _EL_  catch (    Exception e2) { _EL_       h.put(ERROR + VERSION + "SAX","ERROR attempting to load SAX version 2 class: " + e.toString()); _EL_       h.put(ERROR,ERROR_FOUND); _EL_       try { _EL_         Class clazz=ObjectFactory.findProviderClass(SAX_VERSION1_CLASS,ObjectFactory.findClassLoader(),true); _EL_         Method method=clazz.getMethod(SAX_VERSION1_METHOD,oneStringArg); _EL_         h.put(VERSION + "SAX-backlevel","1.0"); _EL_       } _EL_  catch (      Exception e3) { _EL_         h.put(ERROR + VERSION + "SAX-backlevel","ERROR attempting to load SAX version 1 class: " + e3.toString()); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'protected boolean isRecompilationNeeded(int[] loadedChecksums){ _EL_   this.checksums[0]=calculateChecksum(); _EL_   if (this.checksums[0] != loadedChecksums[0]) { _EL_     if (Trace.swcChecksum) { _EL_       Trace.trace("isRecompilationNeeded: calculated checksum differs from last checksum, recompile"); _EL_     } _EL_     return true; _EL_   } _EL_   if (!isSwcChecksumEnabled) { _EL_     if (Trace.swcChecksum) { _EL_       Trace.trace("isRecompilationNeeded: checksums equal, swc-checksum disabled, incremental compile"); _EL_     } _EL_     return false; _EL_   } _EL_   Map<QName,Long> signatureChecksums=swcDefSignatureChecksums; _EL_   if (signatureChecksums == null) { _EL_     if (Trace.swcChecksum) { _EL_       Trace.trace("isRecompilationNeeded: checksums equal, signatureChecksums is null, incremental compile"); _EL_     } _EL_   } _EL_  else { _EL_     for (    Map.Entry<QName,Long> entry : signatureChecksums.entrySet()) { _EL_       QName qName=(QName)entry.getKey(); _EL_       Long dataSignatureChecksum=(Long)entry.getValue(); _EL_       Long swcSignatureChecksum=swcContext.getChecksum(qName); _EL_       if (swcSignatureChecksum == null && qName != null) { _EL_         Source source=swcContext.getSource(qName.getNamespace(),qName.getLocalPart()); _EL_         if (source != null) { _EL_           swcSignatureChecksum=new Long(source.getLastModified()); _EL_         } _EL_       } _EL_       if (Trace.swcChecksum) { _EL_         if (dataSignatureChecksum == null) { _EL_           throw new IllegalStateException("dataSignatureChecksum should never be null"); _EL_         } _EL_       } _EL_       if (dataSignatureChecksum != null && swcSignatureChecksum == null) { _EL_         if (Trace.swcChecksum) { _EL_           Trace.trace("isRecompilationNeeded: signature checksums not equal, recompile"); _EL_           Trace.trace("compare " + entry.getKey()); _EL_           Trace.trace("data =  " + dataSignatureChecksum); _EL_           Trace.trace("swc  =  " + swcSignatureChecksum); _EL_         } _EL_         return true; _EL_       } _EL_       if (dataSignatureChecksum != null) { _EL_         if (dataSignatureChecksum.longValue() != swcSignatureChecksum.longValue()) { _EL_           if (Trace.swcChecksum) { _EL_             Trace.trace("isRecompilationNeeded: signature checksums not equal, recompile"); _EL_             Trace.trace("compare " + entry.getKey()); _EL_             Trace.trace("data =  " + dataSignatureChecksum); _EL_             Trace.trace("swc  =  " + swcSignatureChecksum); _EL_           } _EL_           return true; _EL_         } _EL_       } _EL_  else { _EL_         return true; _EL_       } _EL_     } _EL_   } _EL_   boolean result=!areSwcFileChecksumsEqual(); _EL_   if (Trace.swcChecksum) { _EL_     Trace.trace("isRecompilationNeeded: " + (result ? "recompile" : "incremental compile")); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private void adjustMinPrefForSpanningComps(DimConstraint[] specs,Float[] defPush,FlowSizeSpec fss,ArrayList<LinkedDimGroup>[] groupsLists){ _EL_   for (int r=groupsLists.length - 1; r >= 0; r--) { _EL_     ArrayList<LinkedDimGroup> groups=groupsLists[r]; _EL_     for (    LinkedDimGroup group : groups) { _EL_       if (group.span == 1) { _EL_         continue; _EL_       } _EL_       int[] sizes=group.getMinPrefMax(); _EL_       for (int s=LayoutUtil.MIN; s <= LayoutUtil.PREF; s++) { _EL_         int cSize=sizes[s]; _EL_         if (cSize == LayoutUtil.NOT_SET) { _EL_           continue; _EL_         } _EL_         int rowSize=0; _EL_         int sIx=(r << 1) + 1; _EL_         int len=Math.min((group.span << 1),fss.sizes.length - sIx) - 1; _EL_         for (int j=sIx; j < sIx + len; j++) { _EL_           int sz=fss.sizes[j][s]; _EL_           if (sz != LayoutUtil.NOT_SET) { _EL_             rowSize+=sz; _EL_           } _EL_         } _EL_         if (rowSize < cSize && len > 0) { _EL_           for (int eagerness=0, newRowSize=0; eagerness < 4 && newRowSize < cSize; eagerness++) { _EL_             newRowSize=fss.expandSizes(specs,defPush,cSize,sIx,len,s,eagerness); _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public static String dumpAsHex(byte[] byteBuffer,int length){ _EL_   StringBuilder outputBuilder=new StringBuilder(length * 4); _EL_   int p=0; _EL_   int rows=length / 8; _EL_   for (int i=0; (i < rows) && (p < length); i++) { _EL_     int ptemp=p; _EL_     for (int j=0; j < 8; j++) { _EL_       String hexVal=Integer.toHexString(byteBuffer[ptemp] & 0xff); _EL_       if (hexVal.length() == 1) { _EL_         hexVal="0" + hexVal; _EL_       } _EL_       outputBuilder.append(hexVal + " "); _EL_       ptemp++; _EL_     } _EL_     outputBuilder.append("    "); _EL_     for (int j=0; j < 8; j++) { _EL_       int b=0xff & byteBuffer[p]; _EL_       if (b > 32 && b < 127) { _EL_         outputBuilder.append((char)b + " "); _EL_       } _EL_  else { _EL_         outputBuilder.append(". "); _EL_       } _EL_       p++; _EL_     } _EL_     outputBuilder.append("\\n"); _EL_   } _EL_   int n=0; _EL_   for (int i=p; i < length; i++) { _EL_     String hexVal=Integer.toHexString(byteBuffer[i] & 0xff); _EL_     if (hexVal.length() == 1) { _EL_       hexVal="0" + hexVal; _EL_     } _EL_     outputBuilder.append(hexVal + " "); _EL_     n++; _EL_   } _EL_   for (int i=n; i < 8; i++) { _EL_     outputBuilder.append("   "); _EL_   } _EL_   outputBuilder.append("    "); _EL_   for (int i=p; i < length; i++) { _EL_     int b=0xff & byteBuffer[i]; _EL_     if (b > 32 && b < 127) { _EL_       outputBuilder.append((char)b + " "); _EL_     } _EL_  else { _EL_       outputBuilder.append(". "); _EL_     } _EL_   } _EL_   outputBuilder.append("\\n"); _EL_   return outputBuilder.toString(); _EL_ } _EL_ ', 'public void parseFile(ChatEventParseListener listener){ _EL_ synchronized (this) { _EL_     @SuppressWarnings("unused") long startTime=System.currentTimeMillis(); _EL_     BufferedReader reader=null; _EL_     try { _EL_       reader=new BufferedReader(new FileReader(pathToFile)); _EL_       String currentLine=reader.readLine(); _EL_       while (currentLine != null) { _EL_         try { _EL_           ChatEvent event=ChatEventUtils.deserializeChatEvent(currentLine); _EL_           if (!listener.onNewEventParsed(event)) { _EL_             break; _EL_           } _EL_         } _EL_  catch (        Throwable t) { _EL_           LOG.warn("Error reading chat event line " + currentLine + " skipping ChatEvent",t); _EL_         } _EL_         currentLine=reader.readLine(); _EL_       } _EL_       listener.onParseCompleted(); _EL_     } _EL_  catch (    IOException ioe) { _EL_       throw new RuntimeException(ioe); _EL_     } _EL_  finally { _EL_       if (reader != null) { _EL_         try { _EL_           reader.close(); _EL_         } _EL_  catch (        Throwable t) { _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'private CoderResult escapeSequenceOther(short newByte){ _EL_   if (newByte >= 0x20 && newByte <= 0x2F) { _EL_     state=ESCAPE_SEQUENCE_OTHER; _EL_     versionSequenceAllowed=false; _EL_     queue.write(newByte); _EL_   } _EL_  else   if (newByte >= 0x30 && newByte <= 0x7E) { _EL_     state=NORMAL_BYTES; _EL_     versionSequenceAllowed=false; _EL_     queue.reset(); _EL_   } _EL_  else { _EL_     return malformedInput(ERR_ESCBYTE); _EL_   } _EL_   return CoderResult.UNDERFLOW; _EL_ } _EL_ ', '@Nullable public static NetworkParameters fromID(String id){ _EL_   if (id.equals(ID_MAINNET)) { _EL_     return MainNetParams.get(); _EL_   } _EL_  else   if (id.equals(ID_TESTNET)) { _EL_     return TestNet3Params.get(); _EL_   } _EL_  else   if (id.equals(ID_UNITTESTNET)) { _EL_     return UnitTestParams.get(); _EL_   } _EL_  else   if (id.equals(ID_REGTEST)) { _EL_     return RegTestParams.get(); _EL_   } _EL_  else   if (id.equals(ID_ALPHANET)) { _EL_     return AlphaNetParams.get(); _EL_   } _EL_  else { _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public void addCertificatesAndCRLs(CertStore certStore) throws CertStoreException, CMSException { _EL_   certs.addAll(CMSUtils.getCertificatesFromStore(certStore)); _EL_   crls.addAll(CMSUtils.getCRLsFromStore(certStore)); _EL_ } _EL_ ', 'private double findAngle(Point originPoint,Point targetPoint){ _EL_   int x1=originPoint.x; _EL_   int y1=originPoint.y; _EL_   int x2=targetPoint.x; _EL_   int y2=targetPoint.y; _EL_   double angle=0.0; _EL_   double offset=0.0; _EL_   double sideA=x2 - x1; _EL_   double sideB=0.0; _EL_   if (y1 >= y2) { _EL_     sideB=y1 - y2; _EL_     offset=Math.toRadians(-90); _EL_   } _EL_  else { _EL_     sideB=-(y2 - y1); _EL_     offset=Math.toRadians(90); _EL_   } _EL_   if (sideB == 0) { _EL_     return angle; _EL_   } _EL_   angle=Math.atan(sideA / sideB); _EL_   return angle + offset; _EL_ } _EL_ ', 'public void appendWhitespace(Appendable writer) throws IOException { _EL_   writer.append(whiteSpace); _EL_ } _EL_ ', '@Override public byte[] bitcoinSerialize(){ _EL_   if (headerBytesValid && transactionBytesValid) { _EL_     Preconditions.checkNotNull(payload,"Bytes should never be null if headerBytesValid && transactionBytesValid"); _EL_     if (length == payload.length) { _EL_       return payload; _EL_     } _EL_  else { _EL_       byte[] buf=new byte[length]; _EL_       System.arraycopy(payload,offset,buf,0,length); _EL_       return buf; _EL_     } _EL_   } _EL_   ByteArrayOutputStream stream=new UnsafeByteArrayOutputStream(length == UNKNOWN_LENGTH ? HEADER_SIZE + guessTransactionsLength() : length); _EL_   try { _EL_     writeHeader(stream); _EL_     writeTransactions(stream); _EL_   } _EL_  catch (  IOException e) { _EL_   } _EL_   return stream.toByteArray(); _EL_ } _EL_ ', '@Override public Set<String> vertexMatchPatternLabels(){ _EL_   return Collections.emptySet(); _EL_ } _EL_ ', 'public boolean resetUnreadCounts(int aSection){ _EL_   boolean retCode=false; _EL_   ArrayList<RoomSummary> summariesList=mSummaryListByGroupPosition.get(aSection); _EL_   if (null != summariesList) { _EL_     for (int summaryIdx=0; summaryIdx < summariesList.size(); summaryIdx++) { _EL_       retCode|=resetUnreadCount(aSection,summaryIdx); _EL_     } _EL_   } _EL_  else { _EL_     Log.w(DBG_CLASS_NAME,"## resetUnreadCounts(): section " + aSection + " was not found in the sections summary list"); _EL_   } _EL_   return retCode; _EL_ } _EL_ ', 'public static void addCategory(LexiconCategory category){ _EL_   categories.add(category); _EL_ } _EL_ ', 'private Tuple<Message,Connection> tryOtherMessages(){ _EL_   List<Tuple<Message,Connection>> messages=new ArrayList<Tuple<Message,Connection>>(); _EL_   Collection<Message> msgCollection=getMessageCollection(); _EL_   for (  Connection con : getConnections()) { _EL_     DTNHost other=con.getOtherNode(getHost()); _EL_     ProphetV2Router othRouter=(ProphetV2Router)other.getRouter(); _EL_     if (othRouter.isTransferring()) { _EL_       continue; _EL_     } _EL_     for (    Message m : msgCollection) { _EL_       if (othRouter.hasMessage(m.getId())) { _EL_         continue; _EL_       } _EL_       if ((othRouter.getPredFor(m.getTo()) >= getPredFor(m.getTo()))) { _EL_         messages.add(new Tuple<Message,Connection>(m,con)); _EL_       } _EL_     } _EL_   } _EL_   if (messages.size() == 0) { _EL_     return null; _EL_   } _EL_   Collections.sort(messages,new TupleComparator()); _EL_   return tryMessagesForConnected(messages); _EL_ } _EL_ ', 'protected int makePressColor(){ _EL_   int r=(this.backgroundColor >> 16) & 0xFF; _EL_   int g=(this.backgroundColor >> 8) & 0xFF; _EL_   int b=(this.backgroundColor >> 0) & 0xFF; _EL_   r=(r - 30 < 0) ? 0 : r - 30; _EL_   g=(g - 30 < 0) ? 0 : g - 30; _EL_   b=(b - 30 < 0) ? 0 : b - 30; _EL_   return Color.rgb(r,g,b); _EL_ } _EL_ ', 'public static void cacheClientUserId(ConsumerBean consumerBean,Long internalId,String clientId){ _EL_   cacheClientUserId(consumerBean.getShort_name(),internalId,clientId); _EL_ } _EL_ ', 'protected void processEntity(IXMLReader reader,IXMLEntityResolver entityResolver) throws Exception { _EL_   if (!XMLUtil.checkLiteral(reader,"NTITY")) { _EL_     XMLUtil.skipTag(reader); _EL_     return; _EL_   } _EL_   XMLUtil.skipWhitespace(reader,null); _EL_   char ch=XMLUtil.readChar(reader,\'\\0\'); _EL_   if (ch == \'%\') { _EL_     XMLUtil.skipWhitespace(reader,null); _EL_     entityResolver=this.parameterEntityResolver; _EL_   } _EL_  else { _EL_     reader.unread(ch); _EL_   } _EL_   String key=XMLUtil.scanIdentifier(reader); _EL_   XMLUtil.skipWhitespace(reader,null); _EL_   ch=XMLUtil.readChar(reader,\'%\'); _EL_   String systemID=null; _EL_   String publicID=null; _EL_ switch (ch) { _EL_ case \'P\': _EL_     if (!XMLUtil.checkLiteral(reader,"UBLIC")) { _EL_       XMLUtil.skipTag(reader); _EL_       return; _EL_     } _EL_   XMLUtil.skipWhitespace(reader,null); _EL_ publicID=XMLUtil.scanString(reader,\'%\',this.parameterEntityResolver); _EL_ XMLUtil.skipWhitespace(reader,null); _EL_ systemID=XMLUtil.scanString(reader,\'%\',this.parameterEntityResolver); _EL_ XMLUtil.skipWhitespace(reader,null); _EL_ XMLUtil.readChar(reader,\'%\'); _EL_ break; _EL_ case \'S\': _EL_ if (!XMLUtil.checkLiteral(reader,"YSTEM")) { _EL_ XMLUtil.skipTag(reader); _EL_ return; _EL_ } _EL_ XMLUtil.skipWhitespace(reader,null); _EL_ systemID=XMLUtil.scanString(reader,\'%\',this.parameterEntityResolver); _EL_ XMLUtil.skipWhitespace(reader,null); _EL_ XMLUtil.readChar(reader,\'%\'); _EL_ break; _EL_ case \'"\': _EL_ case \'\\\'\': _EL_ reader.unread(ch); _EL_ String value=XMLUtil.scanString(reader,\'%\',this.parameterEntityResolver); _EL_ entityResolver.addInternalEntity(key,value); _EL_ XMLUtil.skipWhitespace(reader,null); _EL_ XMLUtil.readChar(reader,\'%\'); _EL_ break; _EL_ default : _EL_ XMLUtil.skipTag(reader); _EL_ } _EL_ if (systemID != null) { _EL_ entityResolver.addExternalEntity(key,publicID,systemID); _EL_ } _EL_ } _EL_ ', '@Override final Node<V> find(int h,int k){ _EL_   for (Node<V> e=first; e != null; ) { _EL_     int s; _EL_     if (((s=lockState) & (WAITER | WRITER)) != 0) { _EL_       if ((e.key == k)) { _EL_         return e; _EL_       } _EL_       e=e.next; _EL_     } _EL_  else     if (U.compareAndSwapInt(this,LOCKSTATE,s,s + READER)) { _EL_       TreeNode<V> r; _EL_       TreeNode<V> p; _EL_       try { _EL_         p=((r=root) == null ? null : r.findTreeNode(h,k)); _EL_       } _EL_   finally { _EL_         Thread w; _EL_         if (getAndAddInt(this,LOCKSTATE,-READER) == (READER | WAITER) && (w=waiter) != null) { _EL_           LockSupport.unpark(w); _EL_         } _EL_       } _EL_       return p; _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public boolean isPublic(){ _EL_   return Modifier.isPublic(flags); _EL_ } _EL_ ', '@Override public boolean receiveImage(ImageToProcess img,TaskImageContainer task,boolean blockUntilImageRelease,boolean closeOnImageRelease,Optional<Runnable> runnableWhenDone) throws InterruptedException { _EL_   Set<TaskImageContainer> passTasks=new HashSet<TaskImageContainer>(1); _EL_   passTasks.add(task); _EL_   return receiveImage(img,passTasks,blockUntilImageRelease,closeOnImageRelease,runnableWhenDone); _EL_ } _EL_ ', 'public static S2CellId fromFaceIJ(int face,int i,int j){ _EL_   long n[]={0,face << (POS_BITS - 33)}; _EL_   int bits=(face & SWAP_MASK); _EL_   for (int k=7; k >= 0; --k) { _EL_     bits=getBits(n,i,j,k,bits); _EL_   } _EL_   S2CellId s=new S2CellId((((n[1] << 32) + n[0]) << 1) + 1); _EL_   return s; _EL_ } _EL_ ', 'private void updateActions(final INaviProject project){ _EL_   m_loadProjectAction.setEnabled(!project.isLoaded()); _EL_   if (m_addAddressSpaceAction != null) { _EL_     m_addAddressSpaceAction.setEnabled(project.isLoaded()); _EL_   } _EL_   m_searchViewAction.setEnabled(project.isLoaded()); _EL_   m_forwardAction.setEnabled(project.isLoaded()); _EL_ } _EL_ ', 'void close() throws IOException { _EL_   stream.close(); _EL_ } _EL_ ', 'public boolean truncateTooLongNumber(PhoneNumber number){ _EL_   if (isValidNumber(number)) { _EL_     return true; _EL_   } _EL_   PhoneNumber numberCopy=new PhoneNumber(); _EL_   numberCopy.mergeFrom(number); _EL_   long nationalNumber=number.getNationalNumber(); _EL_   do { _EL_     nationalNumber/=10; _EL_     numberCopy.setNationalNumber(nationalNumber); _EL_     if (isPossibleNumberWithReason(numberCopy) == ValidationResult.TOO_SHORT || nationalNumber == 0) { _EL_       return false; _EL_     } _EL_   } _EL_  while (!isValidNumber(numberCopy)); _EL_   number.setNationalNumber(nationalNumber); _EL_   return true; _EL_ } _EL_ ', 'public static boolean isWithinTimeComparisonEpsilon(long timeMicros){ _EL_   long now=Utils.getSystemNowMicrosUtc(); _EL_   return Math.abs(timeMicros - now) < timeComparisonEpsilon; _EL_ } _EL_ ', 'private JLabel createWeekday(String title){ _EL_   JLabel label=new JLabel(title); _EL_   label.setHorizontalAlignment(SwingConstants.CENTER); _EL_   label.setHorizontalTextPosition(SwingConstants.CENTER); _EL_   label.setRequestFocusEnabled(false); _EL_   label.setBackground(AdempierePLAF.getPrimary1()); _EL_   label.setForeground(Color.white); _EL_   label.setOpaque(true); _EL_   return label; _EL_ } _EL_ ', 'public static int indexOf(String value,String substring){ _EL_   return value != null && substring != null ? value.indexOf(substring) : -1; _EL_ } _EL_ ', 'public void addPreprocessorDirective(String directive){ _EL_   if (mPreprocessorDirectives == null)   mPreprocessorDirectives=new ArrayList<String>(); _EL_   mPreprocessorDirectives.add(directive); _EL_ } _EL_ ', 'public Profiler clearResults(){ _EL_   lapped.clear(); _EL_   return this; _EL_ } _EL_ ', '@Override public GraphQuery has(final String key,final Object value){ _EL_   criteria.add(new Has(key,value)); _EL_   return this; _EL_ } _EL_ ', 'private void printTypeMembers(List<? extends Element> members,List<TypeElement> innerClass){ _EL_   for (  Element element : members) { _EL_     if (isPublicOrProtected(element)) { _EL_       printMember(element,innerClass); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void initializeBasicVariables(final int startColumn){ _EL_   basicVariables=new int[getWidth() - 1]; _EL_   basicRows=new int[getHeight()]; _EL_   Arrays.fill(basicVariables,-1); _EL_   for (int i=startColumn; i < getWidth() - 1; i++) { _EL_     Integer row=findBasicRow(i); _EL_     if (row != null) { _EL_       basicVariables[i]=row; _EL_       basicRows[row]=i; _EL_     } _EL_   } _EL_ } _EL_ ', 'public String phonemise(String text,String pos,StringBuilder g2pMethod){ _EL_   String result=userdictLookup(text,pos); _EL_   if (result != null) { _EL_     g2pMethod.append("userdict"); _EL_     return result; _EL_   } _EL_   result=lexiconLookup(text,pos); _EL_   if (result != null) { _EL_     g2pMethod.append("lexicon"); _EL_     return result; _EL_   } _EL_   String normalised=MaryUtils.normaliseUnicodeLetters(text,getLocale()); _EL_   if (!normalised.equals(text)) { _EL_     result=userdictLookup(normalised,pos); _EL_     if (result != null) { _EL_       g2pMethod.append("userdict"); _EL_       return result; _EL_     } _EL_     result=lexiconLookup(normalised,pos); _EL_     if (result != null) { _EL_       g2pMethod.append("lexicon"); _EL_       return result; _EL_     } _EL_   } _EL_   String phones=lts.predictPronunciation(text); _EL_   result=lts.syllabify(phones); _EL_   if (result != null) { _EL_     g2pMethod.append("rules"); _EL_     return result; _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static void stop(int exit_code){ _EL_   System.exit(exit_code); _EL_ } _EL_ ', 'private FieldODEStateAndDerivative<Decimal64> state(double t){ _EL_   return new FieldODEStateAndDerivative<>(zero.add(t),new Decimal64[0],new Decimal64[0]); _EL_ } _EL_ ', 'public static int hash(Object object){ _EL_   return object == null ? 0 : object.hashCode(); _EL_ } _EL_ ', 'private void assertPivot(String field,Object value,int count,PivotField actual){ _EL_   assertEquals("FIELD: " + actual.toString(),field,actual.getField()); _EL_   assertEquals("VALUE: " + actual.toString(),value,actual.getValue()); _EL_   assertEquals("COUNT: " + actual.toString(),count,actual.getCount()); _EL_ } _EL_ ', 'public String toXMLString() throws FSMsgException { _EL_   return toXMLString(true,true); _EL_ } _EL_ ', 'public static void walkFileTree(File directory,FileTreeVisitor visitor){ _EL_   visitor.preVisitDirectory(directory); _EL_   File[] files=directory.listFiles(); _EL_   if (files != null) { _EL_     for (    File file : files) { _EL_       if (file.isDirectory()) { _EL_         walkFileTree(file,visitor); _EL_       } _EL_  else { _EL_         visitor.visitFile(file); _EL_       } _EL_     } _EL_   } _EL_   visitor.postVisitDirectory(directory); _EL_ } _EL_ ', 'public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException { _EL_   if ((inOff + blockSize) > in.length) { _EL_     throw new DataLengthException("input buffer too short"); _EL_   } _EL_   if ((outOff + blockSize) > out.length) { _EL_     throw new DataLengthException("output buffer too short"); _EL_   } _EL_   cipher.processBlock(ofbV,0,ofbOutV,0); _EL_   for (int i=0; i < blockSize; i++) { _EL_     out[outOff + i]=(byte)(ofbOutV[i] ^ in[inOff + i]); _EL_   } _EL_   System.arraycopy(ofbV,blockSize,ofbV,0,ofbV.length - blockSize); _EL_   System.arraycopy(ofbOutV,0,ofbV,ofbV.length - blockSize,blockSize); _EL_   return blockSize; _EL_ } _EL_ ', 'public String commandTopic(String command){ _EL_   if (command == null) { _EL_     command="+"; _EL_   } _EL_   return cmdTopic.replace("{COMMAND}",command); _EL_ } _EL_ ', 'private static void checkForNullElement(Object[] arg,String argName){ _EL_   if ((arg == null) || (arg.length == 0)) { _EL_     throw new IllegalArgumentException("Argument " + argName + "[] cannot be null or empty."); _EL_   } _EL_   for (int i=0; i < arg.length; i++) { _EL_     if (arg[i] == null) { _EL_       throw new IllegalArgumentException("Argument\'s element " + argName + "["+ i+ "] cannot be null."); _EL_     } _EL_   } _EL_ } _EL_ ', 'public InputStream executeDownload(String url,String cookie) throws IOException { _EL_   String[][] headerParams=new String[][]{{"Cookie",cookie},{"User-Agent","AndroidDownloadManager/6.0.1 (Linux; U; Android 6.0.1; Nexus 6P Build/MTC19T)"}}; _EL_   HttpEntity httpEntity=executeGet(url,null,headerParams); _EL_   return httpEntity.getContent(); _EL_ } _EL_ ', 'public MorfologikFilterFactory(Map<String,String> args){ _EL_   super(args); _EL_   final String DICTIONARY_RESOURCE_ATTRIBUTE="dictionary-resource"; _EL_   String dictionaryResource=get(args,DICTIONARY_RESOURCE_ATTRIBUTE); _EL_   if (dictionaryResource != null && !dictionaryResource.isEmpty()) { _EL_     throw new IllegalArgumentException("The " + DICTIONARY_RESOURCE_ATTRIBUTE + " attribute is no "+ "longer supported. Use the \'"+ DICTIONARY_ATTRIBUTE+ "\' attribute instead (see LUCENE-6833)."); _EL_   } _EL_   resourceName=get(args,DICTIONARY_ATTRIBUTE); _EL_   if (!args.isEmpty()) { _EL_     throw new IllegalArgumentException("Unknown parameters: " + args); _EL_   } _EL_ } _EL_ ', 'public static <T>T wrapThrow(Callable<T> callable,Code _finally){ _EL_   try { _EL_     return callable.call(); _EL_   } _EL_  catch (  RuntimeException e) { _EL_     throw e; _EL_   } _EL_ catch (  Exception e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_  finally { _EL_     wrapThrow(_finally); _EL_   } _EL_ } _EL_ ', 'public static String padLeft(String str,int totalChars){ _EL_   if (str == null)   str="null"; _EL_   StringBuffer sb=new StringBuffer(); _EL_   for (int i=0; i < totalChars - str.length(); i++) { _EL_     sb.append(" "); _EL_   } _EL_   sb.append(str); _EL_   return sb.toString(); _EL_ } _EL_ ', 'protected void decodeImageData(){ _EL_   int NullCode=-1; _EL_   int npix=iw * ih; _EL_   int available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, count, i, datum, data_size, first, top, bi, pi; _EL_   if ((pixels == null) || (pixels.length < npix)) { _EL_     pixels=new byte[npix]; _EL_   } _EL_   if (prefix == null)   prefix=new short[MaxStackSize]; _EL_   if (suffix == null)   suffix=new byte[MaxStackSize]; _EL_   if (pixelStack == null)   pixelStack=new byte[MaxStackSize + 1]; _EL_   data_size=read(); _EL_   clear=1 << data_size; _EL_   end_of_information=clear + 1; _EL_   available=clear + 2; _EL_   old_code=NullCode; _EL_   code_size=data_size + 1; _EL_   code_mask=(1 << code_size) - 1; _EL_   for (code=0; code < clear; code++) { _EL_     prefix[code]=0; _EL_     suffix[code]=(byte)code; _EL_   } _EL_   datum=bits=count=first=top=pi=bi=0; _EL_   for (i=0; i < npix; ) { _EL_     if (top == 0) { _EL_       if (bits < code_size) { _EL_         if (count == 0) { _EL_           count=readBlock(); _EL_           if (count <= 0)           break; _EL_           bi=0; _EL_         } _EL_         datum+=(((int)block[bi]) & 0xff) << bits; _EL_         bits+=8; _EL_         bi++; _EL_         count--; _EL_         continue; _EL_       } _EL_       code=datum & code_mask; _EL_       datum>>=code_size; _EL_       bits-=code_size; _EL_       if ((code > available) || (code == end_of_information))       break; _EL_       if (code == clear) { _EL_         code_size=data_size + 1; _EL_         code_mask=(1 << code_size) - 1; _EL_         available=clear + 2; _EL_         old_code=NullCode; _EL_         continue; _EL_       } _EL_       if (old_code == NullCode) { _EL_         pixelStack[top++]=suffix[code]; _EL_         old_code=code; _EL_         first=code; _EL_         continue; _EL_       } _EL_       in_code=code; _EL_       if (code == available) { _EL_         pixelStack[top++]=(byte)first; _EL_         code=old_code; _EL_       } _EL_       while (code > clear) { _EL_         pixelStack[top++]=suffix[code]; _EL_         code=prefix[code]; _EL_       } _EL_       first=((int)suffix[code]) & 0xff; _EL_       if (available >= MaxStackSize)       break; _EL_       pixelStack[top++]=(byte)first; _EL_       prefix[available]=(short)old_code; _EL_       suffix[available]=(byte)first; _EL_       available++; _EL_       if (((available & code_mask) == 0) && (available < MaxStackSize)) { _EL_         code_size++; _EL_         code_mask+=available; _EL_       } _EL_       old_code=in_code; _EL_     } _EL_     top--; _EL_     pixels[pi++]=pixelStack[top]; _EL_     i++; _EL_   } _EL_   for (i=pi; i < npix; i++) { _EL_     pixels[i]=0; _EL_   } _EL_ } _EL_ ', 'public UnixTerminal() throws IOException { _EL_   this(System.in,System.out,Charset.defaultCharset()); _EL_ } _EL_ ', '@Override public boolean isCellEditable(int rowIndex,int columnIndex){ _EL_   ProcessFunctionParameterValue value=valueList.get(rowIndex); _EL_ switch (columnIndex) { _EL_ case COL_OPTIONAL: _EL_     return value.optional; _EL_ case COL_VALUE: _EL_   if (value.optional) { _EL_     return value.included; _EL_   } _EL_  else { _EL_     return true; _EL_   } _EL_ case COL_PARAMETER: _EL_ case COL_TYPE: _EL_ default : _EL_ return false; _EL_ } _EL_ } _EL_ ', 'private void checkStreams(){ _EL_   if ((System.currentTimeMillis() - lastChecked) / 1000 < CHECK_DELAY) { _EL_     return; _EL_   } _EL_   lastChecked=System.currentTimeMillis(); _EL_   Set<StreamInfo> remove=new HashSet<>(); _EL_   for (  StreamInfo info : data) { _EL_     if (!info.isValid() || !info.getOnline()) { _EL_       remove.add(info); _EL_     } _EL_   } _EL_   for (  StreamInfo info : remove) { _EL_     data.remove(info); _EL_     itemRemoved(info); _EL_   } _EL_   if (remove.isEmpty()) { _EL_     listDataChanged(); _EL_   } _EL_ } _EL_ ', '@Override public void actionPerformed(ActionEvent ev){ _EL_   final megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer(); _EL_   if (remoteServiceBrowser != null) { _EL_     String url=remoteServiceBrowser.getURL(); _EL_     String user=remoteServiceBrowser.getUser(); _EL_     String password=remoteServiceBrowser.getPasswd(); _EL_     String command="openServer url=\'" + url + "\'"; _EL_     if (user.length() > 0)     command+=" user=\'" + user + "\'"; _EL_     if (password.length() > 0) { _EL_ synchronized (syncObject) { _EL_         OpenRemoteServerCommand.hiddenPassword=password; _EL_       } _EL_       command+=" password=\'" + HIDDEN_PASSWORD + "\'"; _EL_     } _EL_     command+=";"; _EL_     if (url.length() > 0) { _EL_       execute(command); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static String verifyCertificate(X509Certificate cert,Collection<CRL> crls,Calendar calendar){ _EL_   if (SignUtils.hasUnsupportedCriticalExtension(cert))   return "Has unsupported critical extension"; _EL_   try { _EL_     cert.checkValidity(calendar.getTime()); _EL_   } _EL_  catch (  Exception e) { _EL_     return e.getMessage(); _EL_   } _EL_   if (crls != null) { _EL_     for (    CRL crl : crls) { _EL_       if (crl.isRevoked(cert))       return "Certificate revoked"; _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'AudioCapabilities(int[] supportedEncodings,int maxChannelCount){ _EL_   if (supportedEncodings != null) { _EL_     this.supportedEncodings=Arrays.copyOf(supportedEncodings,supportedEncodings.length); _EL_     Arrays.sort(this.supportedEncodings); _EL_   } _EL_  else { _EL_     this.supportedEncodings=new int[0]; _EL_   } _EL_   this.maxChannelCount=maxChannelCount; _EL_ } _EL_ ', 'public static ResponseCode createExtension(String name){ _EL_   StringBuffer buffer=new StringBuffer(name.length() + 2); _EL_   if (!name.startsWith("X")) { _EL_     buffer.append(\'X\'); _EL_   } _EL_   buffer.append(name); _EL_   return new ResponseCode(buffer.toString()); _EL_ } _EL_ ', 'public java.lang.StringBuilder append(boolean b){ _EL_   if (b) { _EL_     return append("true"); _EL_   } _EL_   return append("false"); _EL_ } _EL_ ', 'public void deleteServers(Set servers) throws AMConsoleException { _EL_   if (servers.contains(SystemProperties.getServerInstanceName())) { _EL_     throw new AMConsoleException(getLocalizedString("exception.cannot.delete.this.server.instance")); _EL_   } _EL_   String serverName=null; _EL_   try { _EL_     if ((servers != null) && !servers.isEmpty()) { _EL_       SSOToken token=getUserSSOToken(); _EL_       for (Iterator i=servers.iterator(); i.hasNext(); ) { _EL_         serverName=(String)i.next(); _EL_         String[] param={serverName}; _EL_         logEvent("ATTEMPT_DELETE_SERVER",param); _EL_         ServerConfiguration.deleteServerInstance(token,serverName); _EL_         logEvent("SUCCEED_DELETE_SERVER",param); _EL_       } _EL_     } _EL_   } _EL_  catch (  SMSException e) { _EL_     String[] params={serverName,e.getMessage()}; _EL_     logEvent("SMS_EXCEPTION_DELETE_SERVER",params); _EL_     throw new AMConsoleException(getErrorString(e)); _EL_   } _EL_ catch (  SSOException e) { _EL_     String[] params={serverName,e.getMessage()}; _EL_     logEvent("SSO_EXCEPTION_DELETE_SERVER",params); _EL_     throw new AMConsoleException(getErrorString(e)); _EL_   } _EL_ } _EL_ ', 'static void sort(float[] a,int left,int right,float[] work,int workBase,int workLen){ _EL_   while (left <= right && Float.isNaN(a[right])) { _EL_     --right; _EL_   } _EL_   for (int k=right; --k >= left; ) { _EL_     float ak=a[k]; _EL_     if (ak != ak) { _EL_       a[k]=a[right]; _EL_       a[right]=ak; _EL_       --right; _EL_     } _EL_   } _EL_   doSort(a,left,right,work,workBase,workLen); _EL_   int hi=right; _EL_   while (left < hi) { _EL_     int middle=(left + hi) >>> 1; _EL_     float middleValue=a[middle]; _EL_     if (middleValue < 0.0f) { _EL_       left=middle + 1; _EL_     } _EL_  else { _EL_       hi=middle; _EL_     } _EL_   } _EL_   while (left <= right && Float.floatToRawIntBits(a[left]) < 0) { _EL_     ++left; _EL_   } _EL_   for (int k=left, p=left - 1; ++k <= right; ) { _EL_     float ak=a[k]; _EL_     if (ak != 0.0f) { _EL_       break; _EL_     } _EL_     if (Float.floatToRawIntBits(ak) < 0) { _EL_       a[k]=0.0f; _EL_       a[++p]=-0.0f; _EL_     } _EL_   } _EL_ } _EL_ ', 'public void fatalError(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException { _EL_   String formattedMsg=e.getMessage(); _EL_   SAXSourceLocator locator=getLocator(); _EL_   ErrorListener handler=m_stylesheetProcessor.getErrorListener(); _EL_   try { _EL_     handler.fatalError(new TransformerException(formattedMsg,locator)); _EL_   } _EL_  catch (  TransformerException te) { _EL_     throw new org.xml.sax.SAXException(te); _EL_   } _EL_ } _EL_ ', 'private void createRecursivly(String path) throws KeeperException, InterruptedException { _EL_   try { _EL_     if (zk.exists(path,true) == null && path.length() > 0) { _EL_       String temp=path.substring(0,path.lastIndexOf(File.separator)); _EL_       createRecursivly(temp); _EL_       zk.create(path,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT); _EL_     } _EL_  else { _EL_       return; _EL_     } _EL_   } _EL_  catch (  KeeperException e) { _EL_     throw e; _EL_   } _EL_ catch (  InterruptedException e) { _EL_     throw e; _EL_   } _EL_ } _EL_ ', 'public void stopRecording(){ _EL_   mHandler.sendMessage(mHandler.obtainMessage(MSG_STOP_RECORDING)); _EL_   mHandler.sendMessage(mHandler.obtainMessage(MSG_QUIT)); _EL_ } _EL_ ', 'private void writeTag(String name,Tag tag) throws IOException { _EL_   TagType type=tag.getType(); _EL_   byte[] nameBytes=name.getBytes(StandardCharsets.UTF_8); _EL_   if (type == TagType.END) { _EL_     throw new IOException("Named TAG_End not permitted."); _EL_   } _EL_   os.writeByte(type.getId()); _EL_   os.writeShort(nameBytes.length); _EL_   os.write(nameBytes); _EL_   writeTagPayload(tag); _EL_ } _EL_ ', 'public int hashCode(){ _EL_   if (myhash == -1) { _EL_     if (timestamp == null) { _EL_       myhash=signerCertPath.hashCode(); _EL_     } _EL_  else { _EL_       myhash=signerCertPath.hashCode() + timestamp.hashCode(); _EL_     } _EL_   } _EL_   return myhash; _EL_ } _EL_ ', 'public TypeVariableBV typeVariable(){ _EL_   int id=typeVariableList.size(); _EL_   typeVariableList.add(null); _EL_   TypeVariableBV result=new TypeVariableBV(id,this); _EL_   typeVariableList.set(id,result); _EL_   return result; _EL_ } _EL_ ', 'public static void downto(Number self,Number to,@ClosureParams(FirstParam.class) Closure closure){ _EL_   int self1=self.intValue(); _EL_   int to1=to.intValue(); _EL_   if (self1 >= to1) { _EL_     for (int i=self1; i >= to1; i--) { _EL_       closure.call(i); _EL_     } _EL_   } _EL_  else   throw new GroovyRuntimeException("The argument (" + to + ") to downto() cannot be greater than the value ("+ self+ ") it\'s called on."); _EL_ } _EL_ ', 'public void add(SelectClauseElementRaw element){ _EL_   selectClauseElements.add(element); _EL_ } _EL_ ', 'public synchronized void removePvChangeListener(PvChangeListener l){ _EL_   log.debug("-PvListener:" + String.valueOf(this) + "->"+ String.valueOf(l)); _EL_   PvChangeListeners.remove(l); _EL_ } _EL_ ', 'public void loadFromProperties(Properties properties){ _EL_   projected=StringUtil.getBooleanValue(properties,"ProjectionInfo.Projected",false,true); _EL_   tiePoint=StringUtil.getDoubleArray(properties,"ProjectionInfo.TiePoint",null,true); _EL_   scale=StringUtil.getDoubleArray(properties,"ProjectionInfo.Scale",null,true); _EL_   globe=StringUtil.getStringValue(properties,"ProjectionInfo.Globe",null,true); _EL_   rasterWidth=StringUtil.getIntegerValue(properties,"ProjectionInfo.RasterWidth",true,0,true); _EL_   rasterLength=StringUtil.getIntegerValue(properties,"ProjectionInfo.RasterLength",true,0,true); _EL_   datumCode=StringUtil.getIntegerValue(properties,"ProjectionInfo.DatumCode",true,0,false); _EL_   ellipsoidCode=StringUtil.getIntegerValue(properties,"ProjectionInfo.DatumCode",true,0,false); _EL_   semiMajorAxis=StringUtil.getDoubleValue(properties,"ProjectionInfo.SemiMajorAxis",true,Double.NaN,false); _EL_   semiMinorAxis=StringUtil.getDoubleValue(properties,"ProjectionInfo.SemiMinorAxis",true,Double.NaN,false); _EL_   inverseFlattening=StringUtil.getDoubleValue(properties,"ProjectionInfo.InverseFlattening",false,Double.NaN,false); _EL_   gcsPrimeMeridianLon=StringUtil.getDoubleValue(properties,"ProjectionInfo.GCSPrimeMeridianLon",false,Double.NaN,false); _EL_   projCode=StringUtil.getIntegerValue(properties,"ProjectionInfo.ProjectionCode",true,0,false); _EL_   pcsCode=StringUtil.getIntegerValue(properties,"ProjectionInfo.ProjectionCoordinateSystemCode",true,0,false); _EL_   coordTransformCode=StringUtil.getIntegerValue(properties,"ProjectionInfo.CoordTransformCode",true,0,false); _EL_   stdParallel1=StringUtil.getDoubleValue(properties,"ProjectionInfo.StdParallel1",false,Double.NaN,false); _EL_   poleLat=(int)(Math.signum(stdParallel1) * 90); _EL_   stdParallel2=StringUtil.getDoubleValue(properties,"ProjectionInfo.StdParallel1",false,Double.NaN,false); _EL_   naturalOriginLon=StringUtil.getDoubleValue(properties,"ProjectionInfo.NaturalOriginLon",false,Double.NaN,false); _EL_   naturalOriginLat=StringUtil.getDoubleValue(properties,"ProjectionInfo.NaturalOriginLat",false,Double.NaN,false); _EL_   falseOriginLon=StringUtil.getDoubleValue(properties,"ProjectionInfo.FalseOriginLon",false,Double.NaN,false); _EL_   falseOriginLat=StringUtil.getDoubleValue(properties,"ProjectionInfo.FalseOriginLat",false,Double.NaN,false); _EL_   falseEasting=StringUtil.getDoubleValue(properties,"ProjectionInfo.FalseEasting",false,Double.NaN,false); _EL_   falseNorthing=StringUtil.getDoubleValue(properties,"ProjectionInfo.FalseNorthing",false,Double.NaN,false); _EL_   centerEasting=StringUtil.getDoubleValue(properties,"ProjectionInfo.CenterEasting",false,Double.NaN,false); _EL_   centerNorthing=StringUtil.getDoubleValue(properties,"ProjectionInfo.CenterNorthing",false,Double.NaN,false); _EL_   centerLon=StringUtil.getDoubleValue(properties,"ProjectionInfo.CenterLon",false,Double.NaN,false); _EL_   centerLat=StringUtil.getDoubleValue(properties,"ProjectionInfo.CenterLat",false,Double.NaN,false); _EL_   scaleAtNaturalOrigin=StringUtil.getDoubleValue(properties,"ProjectionInfo.ScaleAtNaturalOrigin",false,Double.NaN,false); _EL_   scaleAtCenter=StringUtil.getDoubleValue(properties,"ProjectionInfo.ScaleAtCenter",false,Double.NaN,false); _EL_   azimuth=StringUtil.getDoubleValue(properties,"ProjectionInfo.Azimuth",false,Double.NaN,false); _EL_   straightVertPoleLon=StringUtil.getDoubleValue(properties,"ProjectionInfo.StraightVertPoleLon",false,Double.NaN,false); _EL_   gcsCitation=StringUtil.getStringValue(properties,"ProjectionInfo.GCSCitation",null,false); _EL_   pcsCitation=StringUtil.getStringValue(properties,"ProjectionInfo.PCSCitation",null,false); _EL_   projLinearUnits=StringUtil.getStringValue(properties,"ProjectionInfo.ProjLinearUnits","meter",false); _EL_   if (coordTransformCode == GeoKey.Code_Undefined) { _EL_     String citation=(pcsCitation == null ? "" : pcsCitation.toLowerCase()); _EL_     if (citation.contains("mercator") && (citation.contains("web") || citation.contains("pseudo") || citation.contains("global"))) { _EL_       coordTransformCode=GeoKey.Code_CT_Mercator; _EL_       if (Double.isNaN(naturalOriginLon))       naturalOriginLon=0; _EL_       if (Double.isNaN(falseEasting))       falseEasting=0; _EL_       if (Double.isNaN(falseNorthing))       falseNorthing=0; _EL_       if (citation.contains("auxiliary") && citation.contains("sphere")) { _EL_         if (!Double.isNaN(semiMajorAxis))         semiMinorAxis=semiMajorAxis; _EL_  else { _EL_           semiMajorAxis=SEMI_MAJOR_AXIS[0]; _EL_           semiMinorAxis=SEMI_MINOR_AXIS[0]; _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public static double gamma(double x){ _EL_   double P[]={1.60119522476751861407E-4,1.19135147006586384913E-3,1.04213797561761569935E-2,4.76367800457137231464E-2,2.07448227648435975150E-1,4.94214826801497100753E-1,9.99999999999999996796E-1}; _EL_   double Q[]={-2.31581873324120129819E-5,5.39605580493303397842E-4,-4.45641913851797240494E-3,1.18139785222060435552E-2,3.58236398605498653373E-2,-2.34591795718243348568E-1,7.14304917030273074085E-2,1.00000000000000000320E0}; _EL_   double p, z; _EL_   double q=Math.abs(x); _EL_   if (q > 33.0) { _EL_     if (x < 0.0) { _EL_       p=Math.floor(q); _EL_       if (p == q) { _EL_         throw new ArithmeticException("gamma: overflow"); _EL_       } _EL_       z=q - p; _EL_       if (z > 0.5) { _EL_         p+=1.0; _EL_         z=q - p; _EL_       } _EL_       z=q * Math.sin(Math.PI * z); _EL_       if (z == 0.0) { _EL_         throw new ArithmeticException("gamma: overflow"); _EL_       } _EL_       z=Math.abs(z); _EL_       z=Math.PI / (z * stirlingFormula(q)); _EL_       return -z; _EL_     } _EL_  else { _EL_       return stirlingFormula(x); _EL_     } _EL_   } _EL_   z=1.0; _EL_   while (x >= 3.0) { _EL_     x-=1.0; _EL_     z*=x; _EL_   } _EL_   while (x < 0.0) { _EL_     if (x == 0.0) { _EL_       throw new ArithmeticException("gamma: singular"); _EL_     } _EL_  else     if (x > -1.E-9) { _EL_       return (z / ((1.0 + 0.5772156649015329 * x) * x)); _EL_     } _EL_     z/=x; _EL_     x+=1.0; _EL_   } _EL_   while (x < 2.0) { _EL_     if (x == 0.0) { _EL_       throw new ArithmeticException("gamma: singular"); _EL_     } _EL_  else     if (x < 1.e-9) { _EL_       return (z / ((1.0 + 0.5772156649015329 * x) * x)); _EL_     } _EL_     z/=x; _EL_     x+=1.0; _EL_   } _EL_   if ((x == 2.0) || (x == 3.0)) { _EL_     return z; _EL_   } _EL_   x-=2.0; _EL_   p=polevl(x,P,6); _EL_   q=polevl(x,Q,7); _EL_   return z * p / q; _EL_ } _EL_ ', 'public ShowProgress(){ _EL_   start=last=System.currentTimeMillis(); _EL_ } _EL_ ', 'public static RepositoryExpression parseRepositoryExpression(String toParse) throws ParseError { _EL_   StreamTokenizer t=Parser.tokenize(toParse); _EL_   Term creator=Parser.parseTerm(t); _EL_   List<Operation> operations=Parser.parseOperationList(t); _EL_   RepositoryExpression ex=new RepositoryExpression(creator); _EL_   if (!operations.isEmpty()) { _EL_     throw new ParseError("Expression must represent a simple repository, e.g. \'internal(revision=3)\'."); _EL_   } _EL_   return ex; _EL_ } _EL_ ', '@Override public synchronized void close() throws IOException { _EL_   buffer=null; _EL_   notifyAll(); _EL_ } _EL_ ', 'public void addSection(SourceSection section){ _EL_   sections.add(section); _EL_ } _EL_ ', 'private FgsRunner.Type computeType(){ _EL_   Object model=getDataModel(); _EL_   if (model == null && getSourceGraph() != null) { _EL_     model=getSourceGraph(); _EL_   } _EL_   if (model == null) { _EL_     throw new RuntimeException("Data source is unspecified. You may need to double click all your data boxes, \\n" + "then click Save, and then right click on them and select Propagate Downstream. \\n" + "The issue is that we use a seed to simulate from IM\'s, so your data is not saved to \\n"+ "file when you save the session. It can, however, be recreated from the saved seed."); _EL_   } _EL_   if (model instanceof Graph) { _EL_     type=FgsRunner.Type.GRAPH; _EL_   } _EL_  else   if (model instanceof DataSet) { _EL_     DataSet dataSet=(DataSet)model; _EL_     if (dataSet.isContinuous()) { _EL_       type=FgsRunner.Type.CONTINUOUS; _EL_     } _EL_  else     if (dataSet.isDiscrete()) { _EL_       type=FgsRunner.Type.DISCRETE; _EL_     } _EL_  else { _EL_       throw new IllegalStateException("Data set must either be continuous or discrete."); _EL_     } _EL_   } _EL_  else   if (model instanceof ICovarianceMatrix) { _EL_     type=FgsRunner.Type.CONTINUOUS; _EL_   } _EL_  else   if (model instanceof DataModelList) { _EL_     DataModelList list=(DataModelList)model; _EL_     if (allContinuous(list)) { _EL_       type=FgsRunner.Type.CONTINUOUS; _EL_     } _EL_  else     if (allDiscrete(list)) { _EL_       type=FgsRunner.Type.DISCRETE; _EL_     } _EL_  else { _EL_       throw new IllegalArgumentException("Data must be either all discrete or all continuous."); _EL_     } _EL_   } _EL_   return type; _EL_ } _EL_ ', 'public static boolean approxEquals(final double a,final double b,final double tolerance){ _EL_   if (Double.isNaN(a) || Double.isNaN(b)) { _EL_     return false; _EL_   } _EL_   if (a == b) { _EL_     return true; _EL_   } _EL_   if (Double.isInfinite(a) || Double.isInfinite(b)) { _EL_     return false; _EL_   } _EL_   if (a >= (b - tolerance) && a <= (b + tolerance)) { _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static Map<String,Object> loadJsonModel(File jsFile){ _EL_   try { _EL_     Map<String,Object> model=JavaScriptResolver.readJsonModel(jsFile); _EL_     if (model == null) { _EL_       throw new CompilerErrorException("Can\'t find metamodel definition in " + jsFile.getAbsolutePath()); _EL_     } _EL_     if (!model.containsKey("$mod-bin")) { _EL_       throw new CeylonRunJsException("The JavaScript module " + jsFile + " is not compatible with the current version of ceylon-js"); _EL_     } _EL_     return model; _EL_   } _EL_  catch (  IOException ex) { _EL_     throw new CompilerErrorException("Error loading model from " + jsFile); _EL_   } _EL_ } _EL_ ', 'private List<Volume> createVolumeData(String name,int numVolumes){ _EL_   List<Volume> volumes=new ArrayList<Volume>(); _EL_   URI cgUri=createBlockConsistencyGroup(name + "-cg"); _EL_   for (int i=1; i <= numVolumes; i++) { _EL_     Volume volume=new Volume(); _EL_     URI volumeURI=URIUtil.createId(Volume.class); _EL_     testVolumeURIs.add(volumeURI); _EL_     volume.setId(volumeURI); _EL_     volume.setLabel(name + i); _EL_     volume.setConsistencyGroup(cgUri); _EL_     _dbClient.createObject(volume); _EL_   } _EL_   return volumes; _EL_ } _EL_ ', 'private static <T>T hashMapToObject(LinkedHashMap map,Class<T> type){ _EL_   try { _EL_     return stringToObject(mapper.writeValueAsString(map),type); _EL_   } _EL_  catch (  IOException e) { _EL_     log.warn("Could not create a object of the class " + type.getName() + " out of the map "+ map.toString()+ " :"+ e.getMessage()); _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public static _Fields findByThriftId(int fieldId){ _EL_ switch (fieldId) { _EL_ case 0: _EL_     return SUCCESS; _EL_ default : _EL_   return null; _EL_ } _EL_ } _EL_ ', 'public boolean checkError(){ _EL_   return pw.checkError(); _EL_ } _EL_ ', 'public List<PdfDocument> splitBySize(long size){ _EL_   List<PageRange> splitRanges=new ArrayList<>(); _EL_   int currentPage=1; _EL_   int numOfPages=pdfDocument.getNumberOfPages(); _EL_   while (currentPage <= numOfPages) { _EL_     PageRange nextRange=getNextRange(currentPage,numOfPages,size); _EL_     splitRanges.add(nextRange); _EL_     List<Integer> allPages=nextRange.getAllPages(); _EL_     currentPage=(int)allPages.get(allPages.size() - 1) + 1; _EL_   } _EL_   return extractPageRanges(splitRanges); _EL_ } _EL_ ', 'public String readLine(){ _EL_   String line; _EL_   try { _EL_     line=scanner.nextLine(); _EL_   } _EL_  catch (  NoSuchElementException e) { _EL_     line=null; _EL_   } _EL_   return line; _EL_ } _EL_ ', 'public static byte[] decode(final String s){ _EL_   return Base64.decode(s,Base64.NO_OPTIONS); _EL_ } _EL_ ', 'public static GradientPaint makeRedPaint(final double width,final double height){ _EL_   return new GradientPaint(0f,0f,new Color(200,50,50),(float)width / 2,(float)height / 2,new Color(255,100,100),true); _EL_ } _EL_ ', 'public static List<String> matchNumbers(String text){ _EL_   String pattern="\\\\d+[0-9]+"; _EL_   Pattern pat=Pattern.compile(pattern); _EL_   Matcher m=pat.matcher(text); _EL_   List<String> matches=new ArrayList<String>(); _EL_   while (m.find()) { _EL_     matches.add(m.group()); _EL_   } _EL_   return matches; _EL_ } _EL_ ', 'private boolean deleteStorage(TrackerServer trackerServer,String groupName,String storageIpAddr) throws IOException { _EL_   byte[] header; _EL_   byte[] bGroupName; _EL_   byte[] bs; _EL_   int len; _EL_   Socket trackerSocket; _EL_   trackerSocket=trackerServer.getSocket(); _EL_   OutputStream out=trackerSocket.getOutputStream(); _EL_   bs=groupName.getBytes(ClientGlobal.g_charset); _EL_   bGroupName=new byte[ProtoCommon.FDFS_GROUP_NAME_MAX_LEN]; _EL_   if (bs.length <= ProtoCommon.FDFS_GROUP_NAME_MAX_LEN) { _EL_     len=bs.length; _EL_   } _EL_  else { _EL_     len=ProtoCommon.FDFS_GROUP_NAME_MAX_LEN; _EL_   } _EL_   Arrays.fill(bGroupName,(byte)0); _EL_   System.arraycopy(bs,0,bGroupName,0,len); _EL_   int ipAddrLen; _EL_   byte[] bIpAddr=storageIpAddr.getBytes(ClientGlobal.g_charset); _EL_   if (bIpAddr.length < ProtoCommon.FDFS_IPADDR_SIZE) { _EL_     ipAddrLen=bIpAddr.length; _EL_   } _EL_  else { _EL_     ipAddrLen=ProtoCommon.FDFS_IPADDR_SIZE - 1; _EL_   } _EL_   header=ProtoCommon.packHeader(ProtoCommon.TRACKER_PROTO_CMD_SERVER_DELETE_STORAGE,ProtoCommon.FDFS_GROUP_NAME_MAX_LEN + ipAddrLen,(byte)0); _EL_   byte[] wholePkg=new byte[header.length + bGroupName.length + ipAddrLen]; _EL_   System.arraycopy(header,0,wholePkg,0,header.length); _EL_   System.arraycopy(bGroupName,0,wholePkg,header.length,bGroupName.length); _EL_   System.arraycopy(bIpAddr,0,wholePkg,header.length + bGroupName.length,ipAddrLen); _EL_   out.write(wholePkg); _EL_   ProtoCommon.RecvPackageInfo pkgInfo=ProtoCommon.recvPackage(trackerSocket.getInputStream(),ProtoCommon.TRACKER_PROTO_CMD_RESP,0); _EL_   this.errno=pkgInfo.errno; _EL_   return pkgInfo.errno == 0; _EL_ } _EL_ ', '@Override public UUID createEntryNode(UUID parentNode){ _EL_   UUID uuid=UUID.randomUUID(); _EL_   graphServer.addVertex(uuid); _EL_   graphServer.addEdge(uuid,parentNode); _EL_   return uuid; _EL_ } _EL_ ', 'protected void assertDeliveryStates(final Collection<CustomerOrderDelivery> deliveries,final Map<String,String> expectedState){ _EL_   for (  CustomerOrderDelivery delivery : deliveries) { _EL_     assertEquals("Delivery " + delivery.getDeliveryGroup() + ", no "+ delivery.getDeliveryNum(),expectedState.get(delivery.getDeliveryGroup()),delivery.getDeliveryStatus()); _EL_   } _EL_ } _EL_ ', '@Nullable @WorkerThread static File writeBitmapToFile(@NonNull Bitmap bitmap,@NonNull File file){ _EL_   FileOutputStream fileStream=null; _EL_   try { _EL_     ByteArrayOutputStream byteStream=new ByteArrayOutputStream(); _EL_     bitmap.compress(Bitmap.CompressFormat.PNG,0,byteStream); _EL_     fileStream=new FileOutputStream(file); _EL_     fileStream.write(byteStream.toByteArray()); _EL_     return file; _EL_   } _EL_  catch (  IOException e) { _EL_     Log.e(TAG,e.getMessage(),e); _EL_   } _EL_  finally { _EL_     if (fileStream != null) { _EL_       try { _EL_         fileStream.close(); _EL_       } _EL_  catch (      IOException e) { _EL_         Log.e(TAG,e.getMessage(),e); _EL_       } _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public ElemTemplateElement replaceChild(ElemTemplateElement newChildElem,ElemTemplateElement oldChildElem){ _EL_   if (oldChildElem == null || oldChildElem.getParentElem() != this)   return null; _EL_   ElemTemplateElement prev=oldChildElem.getPreviousSiblingElem(); _EL_   if (null != prev)   prev.m_nextSibling=newChildElem; _EL_   if (m_firstChild == oldChildElem)   m_firstChild=newChildElem; _EL_   newChildElem.m_parentNode=this; _EL_   oldChildElem.m_parentNode=null; _EL_   newChildElem.m_nextSibling=oldChildElem.m_nextSibling; _EL_   oldChildElem.m_nextSibling=null; _EL_   return newChildElem; _EL_ } _EL_ ', 'protected int hash(Object key1,Object key2,Object key3){ _EL_   int h=0; _EL_   if (key1 != null) { _EL_     h^=key1.hashCode(); _EL_   } _EL_   if (key2 != null) { _EL_     h^=key2.hashCode(); _EL_   } _EL_   if (key3 != null) { _EL_     h^=key3.hashCode(); _EL_   } _EL_   h+=~(h << 9); _EL_   h^=(h >>> 14); _EL_   h+=(h << 4); _EL_   h^=(h >>> 10); _EL_   return h; _EL_ } _EL_ ', 'public void flush() throws IOException { _EL_   flushBuffer(); _EL_   _outputStream.flush(); _EL_ } _EL_ ', 'private void addEntryToInfoList(Entry entry,List<EntryInfo> entryInfoList){ _EL_   if (entryInfoList != null) { _EL_     String typeToAdd=entry.getType(); _EL_     if (typeToAdd.equals(DbLogic.Constants.quotation)) { _EL_       typeToAdd=DbLogic.Constants.note; _EL_     } _EL_     entryInfoList.add(new EntryInfo(entry.getId(),entry.getNoteOrTitle(""),entry.getQuotation(""),entry.getIsPublic(),entry.hasFirstChildId(),entry.hasParentId(),typeToAdd)); _EL_   } _EL_ } _EL_ ', 'private void updateSliding(float newPositionNormalized){ _EL_   currentSlide=newPositionNormalized; _EL_   state=currentSlide == 1 ? EXPANDED : currentSlide == 0 ? COLLAPSED : SLIDING; _EL_   float slideY=Math.abs((currentSlide * maxSlide) - maxSlide); _EL_   slidableView.setY(slideY); _EL_   invalidate(); _EL_   notifyListeners(currentSlide); _EL_ } _EL_ ', 'void flush(VcfWriter writer) throws IOException { _EL_   if (mPrevRecord != null) { _EL_     if (!mPrevDense) { _EL_       writeCount(writer,mPrevRecord); _EL_     } _EL_  else { _EL_       mVcfFilterStatistics.increment(Stat.DENSITY_WINDOW_COUNT); _EL_     } _EL_   } _EL_   mPrevRecord=null; _EL_   mPrevDense=false; _EL_ } _EL_ ', 'public VideoStream(String streamStr){ _EL_   String[] args=streamStr.split("&"); _EL_   Map<String,String> argMap=new HashMap<String,String>(); _EL_   for (  String arg : args) { _EL_     String[] argsValues=arg.split("="); _EL_     if (argsValues != null) { _EL_       if (argsValues.length >= 2) { _EL_         argMap.put(argsValues[0],argsValues[1]); _EL_       } _EL_     } _EL_   } _EL_   mUrl=argMap.get("url"); _EL_ } _EL_ ', 'protected void flush(){ _EL_   stream.flush(); _EL_ } _EL_ ', 'private ServerStarter startServers() throws Exception { _EL_   ServerStarter srvStarter=new ServerStarter(); _EL_   Thread t=new Thread(srvStarter); _EL_   t.setDaemon(true); _EL_   t.setName("Server Starter"); _EL_   t.start(); _EL_   srvStarter.waitForServerStart(); _EL_   return srvStarter; _EL_ } _EL_ ', 'public Pagination evaluate(final Class entityClass){ _EL_   Paginate paginate=entityClass != null ? (Paginate)entityClass.getAnnotation(Paginate.class) : null; _EL_   int defaultLimit=paginate != null ? paginate.defaultLimit() : DEFAULT_PAGE_LIMIT; _EL_   int maxLimit=paginate != null ? paginate.maxLimit() : MAX_PAGE_LIMIT; _EL_   evaluate(defaultLimit,maxLimit); _EL_   generateTotals=generateTotals && (paginate == null || paginate.countable()); _EL_   return this; _EL_ } _EL_ ', 'public RuntimeCollector(Algorithm algorithm,int frequency,ResultFileWriter writer){ _EL_   super(algorithm,frequency,FrequencyType.EVALUATIONS); _EL_   this.writer=writer; _EL_   startTime=System.nanoTime(); _EL_ } _EL_ ', 'public boolean deregisterServiceProvider(Object provider){ _EL_   Object oprovider=map.get(provider.getClass()); _EL_   if (provider == oprovider) { _EL_     map.remove(provider.getClass()); _EL_     poset.remove(provider); _EL_     if (provider instanceof RegisterableService) { _EL_       RegisterableService rs=(RegisterableService)provider; _EL_       rs.onDeregistration(registry,category); _EL_     } _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public NewestFirstComparator(Date now){ _EL_   Preconditions.checkNotNull(now); _EL_   mNow=new Date(now.getTime() + MILLIS_IN_DAY); _EL_ } _EL_ ', 'protected void update(Comparable x,Object y){ _EL_   int index=indexOf(x); _EL_   if (index < 0) { _EL_     throw new SeriesException("No observation for x = " + x); _EL_   } _EL_  else { _EL_     ComparableObjectItem item=getDataItem(index); _EL_     item.setObject(y); _EL_     fireSeriesChanged(); _EL_   } _EL_ } _EL_ ', 'public void writeField(String name,float value) throws java.io.IOException { _EL_   writeField(name,Float.toString(value)); _EL_ } _EL_ ', 'public byte[] decodeData(byte[] data,int numErrorCorrectionBytes) throws ReedSolomonException, DataTooLargeException { _EL_   if (data == null || data.length == 0) { _EL_     return null; _EL_   } _EL_   if (data.length > 256) { _EL_     throw new DataTooLargeException("Data exceeds 256 bytes! Too large"); _EL_   } _EL_   int[] dataInts=new int[data.length]; _EL_   for (int i=0; i < data.length; i++) { _EL_     dataInts[i]=data[i] & 0xFF; _EL_   } _EL_   int totalBytes=data.length - numErrorCorrectionBytes; _EL_   decoder.decode(dataInts,numErrorCorrectionBytes); _EL_   ByteArrayOutputStream bos=new ByteArrayOutputStream(); _EL_   for (int i=0; i < totalBytes && i < dataInts.length; i++) { _EL_     bos.write(dataInts[i]); _EL_   } _EL_   return bos.toByteArray(); _EL_ } _EL_ ', 'public Shape createScrollButtonApart(int x,int y,int w,int h){ _EL_   path.reset(); _EL_   path.moveTo(x,y); _EL_   path.lineTo(x,y + h); _EL_   path.lineTo(x + w,y + h); _EL_   addScrollGapPath(x,y,w,h,true); _EL_   path.closePath(); _EL_   return path; _EL_ } _EL_ ', 'public static boolean isValidMobile(@NonNull String mobile){ _EL_   if (!TextUtils.isEmpty(mobile) && mobile.length() == 10) { _EL_     if (mobile.startsWith("9") || mobile.startsWith("8") || mobile.startsWith("7")) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public String convertError(String filename,int line,int column,String message){ _EL_   String srcFilename=null; _EL_   int destLine=0; _EL_   int srcLine=0; _EL_   for (int i=0; i < _lines.size(); i++) { _EL_     Line map=_lines.get(i); _EL_     if (filename != null && !filename.endsWith(_dstFilename)) { _EL_     } _EL_  else     if (map._dstLine <= line && line <= map.getLastDestinationLine()) { _EL_       srcFilename=map._srcFilename; _EL_       srcLine=map.getSourceLine(line); _EL_     } _EL_   } _EL_   if (srcFilename != null)   return srcFilename + ":" + srcLine+ ": "+ message; _EL_  else   return filename + ":" + line+ ": "+ message; _EL_ } _EL_ ', 'public static Number sinh(Number a){ _EL_   return Math.sinh(a.doubleValue()); _EL_ } _EL_ ', 'public void addNotification(@NotNull Notification notification){ _EL_   NotificationItem item=new NotificationItem(resources,notification,delegate,panel); _EL_   notificationWidget.add(notification); _EL_ } _EL_ ', '@Nullable public static IgnoreDescriptor forMethod(Class cls,Method mthd){ _EL_   if (mthd.isAnnotationPresent(IgniteIgnore.class)) { _EL_     IgniteIgnore ignore=mthd.getAnnotation(IgniteIgnore.class); _EL_     String reason=ignore.value(); _EL_     if (F.isEmpty(reason))     throw new IllegalArgumentException("Reason is not set for ignored test [class=" + cls.getName() + ", method="+ mthd.getName()+ \']\'); _EL_     return new IgnoreDescriptor(reason,ignore.forceFailure()); _EL_   } _EL_  else   return null; _EL_ } _EL_ ', 'public static ModifiableDBIDs randomSample(DBIDs source,int k,Random random){ _EL_   if (k < 0 || k > source.size()) { _EL_     throw new IllegalArgumentException("Illegal value for size of random sample: " + k + " > "+ source.size()+ " or < 0"); _EL_   } _EL_   if (random == null) { _EL_     random=new FastNonThreadsafeRandom(); _EL_   } _EL_   if (k < source.size() >> 1) { _EL_     ArrayDBIDs aids=DBIDUtil.ensureArray(source); _EL_     DBIDArrayIter iter=aids.iter(); _EL_     HashSetModifiableDBIDs sample=DBIDUtil.newHashSet(k); _EL_     while (sample.size() < k) { _EL_       iter.seek(random.nextInt(aids.size())); _EL_       sample.add(iter); _EL_     } _EL_     return sample; _EL_   } _EL_  else { _EL_     ArrayModifiableDBIDs sample=DBIDUtil.newArray(source); _EL_     randomShuffle(sample,random,k); _EL_     for (int i=sample.size() - 1; i >= k; i--) { _EL_       sample.remove(i); _EL_     } _EL_     return sample; _EL_   } _EL_ } _EL_ ', 'protected int drawMessageSize(){ _EL_   int sizeDiff=sizeRange[0] == sizeRange[1] ? 0 : rng.nextInt(sizeRange[1] - sizeRange[0]); _EL_   return sizeRange[0] + sizeDiff; _EL_ } _EL_ ', 'public static String[] grabArgs(String signature){ _EL_   Matcher matcher=sigRE.matcher(signature); _EL_   boolean b=matcher.matches(); _EL_   if (!b && matcher.groupCount() != 4)   logger.error("Bad method signature: {}",signature); _EL_   String args=matcher.group(4); _EL_   if (args.isEmpty())   return new String[0]; _EL_   return args.split(","); _EL_ } _EL_ ', 'public V put(K key,V value){ _EL_   final int hash; _EL_   int index; _EL_   if (key == null) { _EL_     hash=0; _EL_     index=indexOfNull(); _EL_   } _EL_  else { _EL_     hash=key.hashCode(); _EL_     index=indexOf(key,hash); _EL_   } _EL_   if (index >= 0) { _EL_     index=(index << 1) + 1; _EL_     final V old=(V)mArray[index]; _EL_     mArray[index]=value; _EL_     return old; _EL_   } _EL_   index=~index; _EL_   if (mSize >= mHashes.length) { _EL_     final int n=mSize >= (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (mSize >= BASE_SIZE ? (BASE_SIZE * 2) : BASE_SIZE); _EL_     final int[] ohashes=mHashes; _EL_     final Object[] oarray=mArray; _EL_     allocArrays(n); _EL_     if (mHashes.length > 0) { _EL_       System.arraycopy(ohashes,0,mHashes,0,ohashes.length); _EL_       System.arraycopy(oarray,0,mArray,0,oarray.length); _EL_     } _EL_     freeArrays(ohashes,oarray,mSize); _EL_   } _EL_   if (index < mSize) { _EL_     System.arraycopy(mHashes,index,mHashes,index + 1,mSize - index); _EL_     System.arraycopy(mArray,index << 1,mArray,(index + 1) << 1,(mSize - index) << 1); _EL_   } _EL_   mHashes[index]=hash; _EL_   mArray[index << 1]=key; _EL_   mArray[(index << 1) + 1]=value; _EL_   mSize++; _EL_   return null; _EL_ } _EL_ ', 'protected void reset(){ _EL_   Arrays.fill(m_isCandidate,true); _EL_ } _EL_ ', 'public boolean deleteRSetStep(URI rpSystemId,List<URI> volumeIds,String token) throws InternalException { _EL_   List<String> replicationSetNames=new ArrayList<String>(); _EL_   try { _EL_     List<RecoverPointVolumeProtectionInfo> volumeProtectionInfoList=new ArrayList<RecoverPointVolumeProtectionInfo>(); _EL_     ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,rpSystemId); _EL_     RecoverPointClient rp=RPHelper.getRecoverPointClient(rpSystem); _EL_     for (    URI volumeId : volumeIds) { _EL_       Volume volume=_dbClient.queryObject(Volume.class,volumeId); _EL_       RecoverPointVolumeProtectionInfo volumeProtectionInfo=rp.getProtectionInfoForVolume(RPHelper.getRPWWn(volume.getId(),_dbClient)); _EL_       Volume sourceVolume=RPHelper.getRPSourceVolume(_dbClient,volume); _EL_       VirtualPool virtualPool=_dbClient.queryObject(VirtualPool.class,sourceVolume.getVirtualPool()); _EL_       volumeProtectionInfo.setMetroPoint(VirtualPool.vPoolSpecifiesMetroPoint(virtualPool)); _EL_       volumeProtectionInfoList.add(volumeProtectionInfo); _EL_       replicationSetNames.add(volume.getRSetName()); _EL_     } _EL_     if (!volumeProtectionInfoList.isEmpty()) { _EL_       rp.deleteReplicationSets(volumeProtectionInfoList); _EL_     } _EL_     WorkflowStepCompleter.stepSucceded(token); _EL_   } _EL_  catch (  Exception e) { _EL_     _log.error(String.format("deleteRSetStep Failed - Replication Sets: %s",replicationSetNames.toString())); _EL_     return stepFailed(token,e,"deleteRSetStep"); _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private void moveToNext(){ _EL_   checkMainThread(); _EL_   scheduled.set(false); _EL_   Bitmap next=pending.poll(); _EL_   if (next != null) { _EL_     if (current != null && !finished.offer(current))     throw new RuntimeException("Could not add image to finished queue"); _EL_     current=next; _EL_     invalidateSelf(); _EL_     ensureScheduled(); _EL_     frameAvailableSubject.onNext(null); _EL_     fpsCounter.update(); _EL_   } _EL_ } _EL_ ', 'public final long readLong() throws java.io.IOException { _EL_   readFully(scratch,0,8); _EL_   int h=((scratch[0] & 0xff) << 24) | ((scratch[1] & 0xff) << 16) | ((scratch[2] & 0xff) << 8)| ((scratch[3] & 0xff) << 0); _EL_   int l=((scratch[4] & 0xff) << 24) | ((scratch[5] & 0xff) << 16) | ((scratch[6] & 0xff) << 8)| ((scratch[7] & 0xff) << 0); _EL_   return (((long)h) << 32L) | ((long)l) & 0xffffffffL; _EL_ } _EL_ ', 'private Log discoverLogImplementation(String logCategory) throws LogConfigurationException { _EL_   if (isDiagnosticsEnabled()) { _EL_     logDiagnostic("Discovering a Log implementation..."); _EL_   } _EL_   initConfiguration(); _EL_   Log result=null; _EL_   String specifiedLogClassName=findUserSpecifiedLogClassName(); _EL_   if (specifiedLogClassName != null) { _EL_     if (isDiagnosticsEnabled()) { _EL_       logDiagnostic("Attempting to load user-specified log class \'" + specifiedLogClassName + "\'..."); _EL_     } _EL_     result=createLogFromClass(specifiedLogClassName,logCategory,true); _EL_     if (result == null) { _EL_       StringBuffer messageBuffer=new StringBuffer("User-specified log class \'"); _EL_       messageBuffer.append(specifiedLogClassName); _EL_       messageBuffer.append("\' cannot be found or is not useable."); _EL_       if (specifiedLogClassName != null) { _EL_         informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_LOG4J_LOGGER); _EL_         informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_JDK14_LOGGER); _EL_         informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_LUMBERJACK_LOGGER); _EL_         informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_SIMPLE_LOGGER); _EL_       } _EL_       throw new LogConfigurationException(messageBuffer.toString()); _EL_     } _EL_     return result; _EL_   } _EL_   if (isDiagnosticsEnabled()) { _EL_     logDiagnostic("No user-specified Log implementation; performing discovery" + " using the standard supported logging implementations..."); _EL_   } _EL_   for (int i=0; (i < classesToDiscover.length) && (result == null); ++i) { _EL_     result=createLogFromClass(classesToDiscover[i],logCategory,true); _EL_   } _EL_   if (result == null) { _EL_     throw new LogConfigurationException("No suitable Log implementation"); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public ViaHeader createViaHeader(String host,int port,String transport,String branch) throws ParseException, InvalidArgumentException { _EL_   if (host == null || transport == null)   throw new NullPointerException("null arg"); _EL_   Via via=new Via(); _EL_   if (branch != null)   via.setBranch(branch); _EL_   if (host.indexOf(\':\') >= 0 && host.indexOf(\'[\') < 0) { _EL_     if (stripAddressScopeZones) { _EL_       int zoneStart=host.indexOf(\'%\'); _EL_       if (zoneStart != -1)       host=host.substring(0,zoneStart); _EL_     } _EL_     host=\'[\' + host + \']\'; _EL_   } _EL_   via.setHost(host); _EL_   via.setPort(port); _EL_   via.setTransport(transport); _EL_   return via; _EL_ } _EL_ ', 'private Object[] resolveParameters(Executable executable,Optional<Object> target,Object outerInstance,ExtensionContext extensionContext,ExtensionRegistry extensionRegistry){ _EL_   Preconditions.notNull(target,"target must not be null"); _EL_   Parameter[] parameters=executable.getParameters(); _EL_   Object[] values=new Object[parameters.length]; _EL_   int start=0; _EL_   if (outerInstance != null) { _EL_     values[0]=outerInstance; _EL_     start=1; _EL_   } _EL_   for (int i=start; i < parameters.length; i++) { _EL_     ParameterContext parameterContext=new DefaultParameterContext(parameters[i],i,target); _EL_     values[i]=resolveParameter(parameterContext,executable,extensionContext,extensionRegistry); _EL_   } _EL_   return values; _EL_ } _EL_ ', "public static boolean isValidNameChar(char c){ _EL_   return isValidNameStartChar(c) || (c >= '0' && c <= '9'); _EL_ } _EL_ ", "protected static boolean id_start_char(int ch){ _EL_   return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch == '_'); _EL_ } _EL_ ", 'public int hashCode(){ _EL_   int fhash=(family != null) ? family.hashCode() : 0; _EL_   return fhash ^ style ^ size; _EL_ } _EL_ ', 'private CommandHandlerEnum(final Command command1){ _EL_   this.command=command1; _EL_ } _EL_ ', 'public static boolean isFloat(String desc){ _EL_   return desc.endsWith("F"); _EL_ } _EL_ ', 'public void componentResized(ComponentEvent e){ _EL_   JScrollBar bar=getVerticalScrollBar(); _EL_   int incr=(int)(getSize().getHeight() - (bar.getUnitIncrement(1) * 3)); _EL_   getVerticalScrollBar().setBlockIncrement(incr); _EL_ } _EL_ ', 'public void removeModel(Model model){ _EL_   models.remove(model); _EL_ } _EL_ ', 'public void readMap(int map_Number){ _EL_   InputStream map_file; _EL_   try { _EL_     map_file=new FileInputStream("src/Asset/stage0" + map_Number + ".stg"); _EL_     try { _EL_       byte[] data=new byte[map_file.available()]; _EL_       map_file.read(data); _EL_       map_file.close(); _EL_       String load_data=new String(data,"EUC-KR"); _EL_       makeMap(load_data); _EL_     } _EL_  catch (    IOException e) { _EL_       e.printStackTrace(); _EL_     } _EL_   } _EL_  catch (  FileNotFoundException e1) { _EL_     e1.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'public static double hoeffdingLn(double trials,double observed,double prob){ _EL_   return -2 * Math.pow(trials * prob - observed,2) / trials; _EL_ } _EL_ ', 'public void run(){ _EL_   RandomAccessFile reader=null; _EL_   try { _EL_     long last=0; _EL_     long position=0; _EL_     while (run && reader == null) { _EL_       try { _EL_         reader=new RandomAccessFile(file,RAF_MODE); _EL_       } _EL_  catch (      FileNotFoundException e) { _EL_         listener.fileNotFound(); _EL_       } _EL_       if (reader == null) { _EL_         try { _EL_           Thread.sleep(delayMillis); _EL_         } _EL_  catch (        InterruptedException e) { _EL_         } _EL_       } _EL_  else { _EL_         position=end ? file.length() : 0; _EL_         last=System.currentTimeMillis(); _EL_         reader.seek(position); _EL_       } _EL_     } _EL_     while (run) { _EL_       boolean newer=FileUtils.isFileNewer(file,last); _EL_       long length=file.length(); _EL_       if (length < position) { _EL_         listener.fileRotated(); _EL_         try { _EL_           RandomAccessFile save=reader; _EL_           reader=new RandomAccessFile(file,RAF_MODE); _EL_           position=0; _EL_           IOUtils.closeQuietly(save); _EL_         } _EL_  catch (        FileNotFoundException e) { _EL_           listener.fileNotFound(); _EL_         } _EL_         continue; _EL_       } _EL_  else { _EL_         if (length > position) { _EL_           position=readLines(reader); _EL_           last=System.currentTimeMillis(); _EL_         } _EL_  else         if (newer) { _EL_           position=0; _EL_           reader.seek(position); _EL_           position=readLines(reader); _EL_           last=System.currentTimeMillis(); _EL_         } _EL_       } _EL_       if (reOpen) { _EL_         IOUtils.closeQuietly(reader); _EL_       } _EL_       try { _EL_         Thread.sleep(delayMillis); _EL_       } _EL_  catch (      InterruptedException e) { _EL_       } _EL_       if (run && reOpen) { _EL_         reader=new RandomAccessFile(file,RAF_MODE); _EL_         reader.seek(position); _EL_       } _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     listener.handle(e); _EL_   } _EL_  finally { _EL_     IOUtils.closeQuietly(reader); _EL_   } _EL_ } _EL_ ', '@Override public void onNestedPreScroll(View target,int dx,int dy,int[] consumed){ _EL_   if ((!mPullRefreshEnable && !mPullLoadEnable)) { _EL_     return; _EL_   } _EL_   if (Math.abs(dy) > 200) { _EL_     return; _EL_   } _EL_   if (!isConfirm) { _EL_     if (dy < 0 && !canChildScrollUp()) { _EL_       mCurrentAction=PULL_REFRESH; _EL_       isConfirm=true; _EL_     } _EL_  else     if (dy > 0 && !canChildScrollDown()) { _EL_       mCurrentAction=LOAD_MORE; _EL_       isConfirm=true; _EL_     } _EL_   } _EL_   if (moveSpinner(-dy)) { _EL_     consumed[1]+=dy; _EL_   } _EL_ } _EL_ ', 'public void add(Match match,AppliedRegion appliedRegion){ _EL_   add(match,appliedRegion,false); _EL_ } _EL_ ', 'public void reset(){ _EL_   techTree.checkSubTree(techTree.getPathForRow(0),true); _EL_ } _EL_ ', 'public boolean isEmpty(){ _EL_   return nodes.isEmpty() && ways.isEmpty() && relations.isEmpty(); _EL_ } _EL_ ', 'public static void assertBool(boolean b){ _EL_   if (verbose) { _EL_     log("assertBool(" + b + ")"); _EL_   } _EL_   if (!b) { _EL_     throw new RuntimeException(); _EL_   } _EL_ } _EL_ ', 'private static void postInit(){ _EL_   debugAll=dbgTable.containsKey(debugAllToken); _EL_ } _EL_ ', 'private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError { _EL_   RetryPolicy retryPolicy=request.getRetryPolicy(); _EL_   int oldTimeout=request.getTimeoutMs(); _EL_   try { _EL_     retryPolicy.retry(exception); _EL_   } _EL_  catch (  VolleyError e) { _EL_     request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout)); _EL_     throw e; _EL_   } _EL_   request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout)); _EL_ } _EL_ ', 'public static List<File> sortInBatch(File file,Comparator<String> cmp) throws IOException { _EL_   return sortInBatch(file,cmp,DEFAULTMAXTEMPFILES); _EL_ } _EL_ ', 'public void addDirectorySet(Context context,String path){ _EL_   TinyDB tinydb=new TinyDB(context); _EL_   ArrayList<String> file=tinydb.getListString("directories"); _EL_   file.add(path); _EL_   tinydb.putListString("directories",file); _EL_ } _EL_ ', 'private FastConcurrentSkipListMap.Node<K,V> hiNode(){ _EL_   if (hi == null)   return m.findLast(); _EL_  else   if (hiInclusive)   return m.findNear(hi,m.LT | m.EQ); _EL_  else   return m.findNear(hi,m.LT); _EL_ } _EL_ ', 'protected void processEventProperties(Properties eventProps){ _EL_   int status; _EL_   Node node; _EL_   Line line; _EL_   String cmd=eventProps.getProperty(COMMAND_FIELD); _EL_   int index=PropUtils.intFromProperties(eventProps,INDEX_FIELD,ERROR_VALUE_INT); _EL_   if (cmd.equals(NODE_OBJECT)) { _EL_     int shape=PropUtils.intFromProperties(eventProps,SHAPE_FIELD,ERROR_VALUE_INT); _EL_     if (index == ERROR_VALUE_INT) { _EL_       Debug.error("NMGL: error parsing object index for node."); _EL_       return; _EL_     } _EL_     node=nodeList.get(index); _EL_     if (shape == 11) { _EL_       String icon=eventProps.getProperty(ICON_FIELD); _EL_       if (DEBUG)       Debug.output("NetMapReader: jimage  " + icon); _EL_     } _EL_     if (shape == NODE_DELETE) { _EL_       if (node != null) { _EL_         lineList.del(node); _EL_         nodeList.del(node); _EL_       } _EL_     } _EL_  else     if (shape == NODE_MOVE && node != null) { _EL_       setNodePositionFromEventProps(node,eventProps); _EL_       lineList.move(node); _EL_       node.setTime(Double.parseDouble(eventProps.getProperty(TIME_FIELD,"0"))); _EL_     } _EL_  else { _EL_       status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,0); _EL_       int menu=PropUtils.intFromProperties(eventProps,MENU_FIELD,0); _EL_       String label=eventProps.getProperty(LABEL_FIELD); _EL_       if (label == null) { _EL_         label=eventProps.getProperty(INDEX_FIELD); _EL_       } _EL_       String ip=eventProps.getProperty(IP_FIELD); _EL_       boolean isLocalhost=false; _EL_       if (ip != null && localhostIP != null) { _EL_         isLocalhost=localhostIP.equals(ip); _EL_         if (DEBUG) { _EL_           Debug.output("NetMapGraphicLoader displaying a node running on the localhost: " + localhostIP); _EL_         } _EL_       } _EL_       if (DEBUG) { _EL_         Debug.output("Creating node (" + label + ")"); _EL_       } _EL_       try { _EL_         if (shape != ERROR_VALUE_INT) { _EL_           node=nodeList.add(label,index,shape,menu,status); _EL_           node.setLocalhost(isLocalhost); _EL_         } _EL_       } _EL_  catch (      Exception e) { _EL_         Debug.error("NMGL: error creating node"); _EL_       } _EL_       setNodePositionFromEventProps(node,eventProps); _EL_     } _EL_   } _EL_  else   if (cmd.equals(NODE_OBJECT_STATUS)) { _EL_     if (index == ERROR_VALUE_INT) { _EL_       Debug.error("NMGL: error parsing object index for status update."); _EL_       return; _EL_     } _EL_     node=nodeList.get(index); _EL_     if (node != null) { _EL_       status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,ERROR_VALUE_INT); _EL_       if (status != ERROR_VALUE_INT) { _EL_         node.setStatus(status); _EL_       } _EL_     } _EL_   } _EL_  else   if (cmd.equals(LINK_OBJECT_STATUS)) { _EL_     if (index == ERROR_VALUE_INT) { _EL_       Debug.error("NMGL: error parsing line index for status update."); _EL_       return; _EL_     } _EL_     line=lineList.get(index); _EL_     if (line != null) { _EL_       status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,ERROR_VALUE_INT); _EL_       if (status != ERROR_VALUE_INT) { _EL_         line.setStatus(status); _EL_       } _EL_     } _EL_   } _EL_  else   if (cmd.equals(LINK_OBJECT)) { _EL_     if (index == ERROR_VALUE_INT) { _EL_       Debug.error("NMGL: error parsing line index for link."); _EL_       return; _EL_     } _EL_     line=lineList.get(index); _EL_     int shape=PropUtils.intFromProperties(eventProps,SHAPE_FIELD,ERROR_VALUE_INT); _EL_     if (shape == NODE_DELETE) { _EL_       lineList.del(index); _EL_     } _EL_  else { _EL_       status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,0); _EL_       int node1=PropUtils.intFromProperties(eventProps,LINK_NODE1_FIELD,ERROR_VALUE_INT); _EL_       int node2=PropUtils.intFromProperties(eventProps,LINK_NODE2_FIELD,ERROR_VALUE_INT); _EL_       if (node1 == ERROR_VALUE_INT || node2 == ERROR_VALUE_INT) { _EL_         Debug.error("NMGL: error parsing node indexes for link"); _EL_         return; _EL_       } _EL_       Node n1=nodeList.get(node1); _EL_       Node n2=nodeList.get(node2); _EL_       if (n1 != null && n2 != null) { _EL_         lineList.add(String.valueOf(index),index,shape,status,n1,n2); _EL_       } _EL_  else { _EL_         if (DEBUG) { _EL_           Debug.output("NetMapGraphicLoader: can\'t create lobj, nodes are undefined"); _EL_         } _EL_       } _EL_     } _EL_   } _EL_  else   if (cmd.equals(REFRESH) || cmd.equals(UPDATE)) { _EL_   } _EL_  else   if (cmd.equals(CLEAR)) { _EL_     if (nodeList != null) { _EL_       nodeList.flush(); _EL_     } _EL_     if (lineList != null) { _EL_       lineList.flush(); _EL_     } _EL_   } _EL_  else { _EL_     if (DEBUG) { _EL_       Debug.output("NMGL: received unused event: " + eventProps.toString()); _EL_     } _EL_   } _EL_   manageGraphics(); _EL_ } _EL_ ', 'protected static void addIdRepoAMSDKPlugin(SSOToken token,String orgName) throws SMSException, SSOException { _EL_   ServiceConfigManager scm=new ServiceConfigManager(ServiceManager.REALM_SERVICE,token); _EL_   ServiceConfig sc=scm.getOrganizationConfig(orgName,null); _EL_   Map attributes=new HashMap(); _EL_   Set values=new HashSet(); _EL_   values.add("com.iplanet.am.sdk.AMSDKRepo"); _EL_   attributes.put("sunIdRepoClass",values); _EL_   values=new HashSet(); _EL_   values.add(DNMapper.realmNameToAMSDKName(DNMapper.orgNameToDN(orgName))); _EL_   attributes.put("amSDKOrgName",values); _EL_   sc.addSubConfig("amsdk1","amSDK",0,attributes); _EL_ } _EL_ ', 'public static String onKeyPress(String key){ _EL_   pin=pin.concat(key); _EL_   return pin; _EL_ } _EL_ ', 'public boolean isHierachic(String string){ _EL_   int index=string.indexOf(m_Seperator); _EL_   if ((index == (string.length() - 1)) || (index == -1)) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public Shape paintLayer(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c,View view){ _EL_   Color base=getColor(); _EL_   Color color=base != null ? new Color(base.getRed(),base.getGreen(),base.getBlue(),255) : null; _EL_   if (color == null) { _EL_     g.setColor(c.getSelectionColor()); _EL_   } _EL_  else { _EL_     g.setColor(color); _EL_   } _EL_   if (offs0 == view.getStartOffset() && offs1 == view.getEndOffset()) { _EL_     Rectangle alloc; _EL_     if (bounds instanceof Rectangle) { _EL_       alloc=(Rectangle)bounds; _EL_     } _EL_  else { _EL_       alloc=bounds.getBounds(); _EL_     } _EL_     g.fillRect(alloc.x,alloc.y,c.getWidth() - alloc.x,alloc.height); _EL_   } _EL_  else { _EL_     try { _EL_       Shape shape=view.modelToView(offs0,Position.Bias.Forward,offs1,Position.Bias.Backward,bounds); _EL_       Rectangle r=(shape instanceof Rectangle) ? (Rectangle)shape : shape.getBounds(); _EL_       g.fillRect(0,r.y,c.getWidth(),r.height); _EL_       return r; _EL_     } _EL_  catch (    BadLocationException e) { _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'synchronized void receive(char oneChar) throws IOException { _EL_   if (buffer == null) { _EL_     throw new IOException("Pipe is closed"); _EL_   } _EL_   if (lastReader != null && !lastReader.isAlive()) { _EL_     throw new IOException("Pipe broken"); _EL_   } _EL_   lastWriter=Thread.currentThread(); _EL_   try { _EL_     while (buffer != null && out == in) { _EL_       notifyAll(); _EL_       wait(1000); _EL_       if (lastReader != null && !lastReader.isAlive()) { _EL_         throw new IOException("Pipe broken"); _EL_       } _EL_     } _EL_   } _EL_  catch (  InterruptedException e) { _EL_     throw new InterruptedIOException(); _EL_   } _EL_   if (buffer == null) { _EL_     throw new IOException("Pipe is closed"); _EL_   } _EL_   if (in == -1) { _EL_     in=0; _EL_   } _EL_   buffer[in++]=oneChar; _EL_   if (in == buffer.length) { _EL_     in=0; _EL_   } _EL_ } _EL_ ', 'public static final ByteBuffer bufferToByteBuffer(final byte[] buffer,final ByteOrder order){ _EL_   final ByteBuffer retBuff=ByteBuffer.wrap(buffer); _EL_   retBuff.order(order); _EL_   return retBuff; _EL_ } _EL_ ', 'public static void writeSingleByte(OutputStream out,int b) throws IOException { _EL_   byte[] buffer=new byte[1]; _EL_   buffer[0]=(byte)(b & 0xff); _EL_   out.write(buffer); _EL_ } _EL_ ', 'private URI processLocalFiles(URI uri){ _EL_   String uriStr=uri.toString(); _EL_   if (uriStr.startsWith("file:")) { _EL_     uriStr="file:" + System.getProperty("user.dir") + "/"+ uriStr.substring(5); _EL_     URL url; _EL_     try { _EL_       url=new URL(uriStr); _EL_       return url.toURI(); _EL_     } _EL_  catch (    Exception e) { _EL_       e.printStackTrace(); _EL_     } _EL_   } _EL_   return uri; _EL_ } _EL_ ', 'public void reset(){ _EL_   count=0; _EL_   startTime=System.currentTimeMillis(); _EL_ } _EL_ ', 'public int readInt() throws IOException { _EL_   length+=4; _EL_   int k1=in.read(); _EL_   if (k1 < 0)   return 0; _EL_   int k2=in.read() << 8; _EL_   int k3=in.read() << 16; _EL_   return k1 + k2 + k3+ (in.read() << 24); _EL_ } _EL_ ', 'public void addTransformation(TagTransformation tagTransformation){ _EL_   if (tagTransformation != null) { _EL_     mappings.put(tagTransformation.getSourceTag(),tagTransformation); _EL_   } _EL_ } _EL_ ', '@Override public boolean isFileModified(long fileTimeStamp,long endOffset){ _EL_   boolean isFileModified=false; _EL_   if (getLastModifiedTime() > fileTimeStamp || getSize() > endOffset) { _EL_     isFileModified=true; _EL_   } _EL_   return isFileModified; _EL_ } _EL_ ', 'public String nextString(){ _EL_   nextClean(\'"\'); _EL_   StringBuilder sb=new StringBuilder(); _EL_   for (; ; ) { _EL_     char c=next(); _EL_ switch (c) { _EL_ case 0: _EL_ case \'\\n\': _EL_ case \'\\r\': _EL_       throw syntaxError("Unterminated string"); _EL_ case \'\\\\\': _EL_     c=next(); _EL_ switch (c) { _EL_ case \'b\': _EL_     sb.append(\'\\b\'); _EL_   break; _EL_ case \'t\': _EL_ sb.append(\'\\t\'); _EL_ break; _EL_ case \'n\': _EL_ sb.append(\'\\n\'); _EL_ break; _EL_ case \'f\': _EL_ sb.append(\'\\f\'); _EL_ break; _EL_ case \'r\': _EL_ sb.append(\'\\r\'); _EL_ break; _EL_ case \'u\': _EL_ sb.append((char)Integer.parseInt(next(4),16)); _EL_ break; _EL_ default : _EL_ sb.append(c); _EL_ } _EL_ break; _EL_ case \'"\': _EL_ return sb.toString(); _EL_ default : _EL_ if (c < \' \') { _EL_ throw syntaxError("Unescaped control character (ascii " + ((int)c) + ") in string"); _EL_ } _EL_ sb.append(c); _EL_ break; _EL_ } _EL_ } _EL_ } _EL_ ', 'public double evaluate(VectorInstance x,VectorInstance y) throws Exception { _EL_   double dotProd=x.dotProduct(y); _EL_   return Math.pow(m_gamma * dotProd + m_coef0,m_degree); _EL_ } _EL_ ', 'private boolean isDbConfigurationPresent(){ _EL_   return StringUtils.isNotBlank(selectColumn) && StringUtils.isNotBlank(tableName); _EL_ } _EL_ ', 'public boolean isIncompleteNumericalRun(String pin){ _EL_   final int len=pin.length(); _EL_   int consecutive=0; _EL_   char last=pin.charAt(0); _EL_   for (int i=1; i < len; i++) { _EL_     final char c=pin.charAt(i); _EL_     if (last == c) { _EL_       consecutive++; _EL_     } _EL_  else { _EL_       consecutive=0; _EL_     } _EL_     last=c; _EL_     if (consecutive >= 2) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private static char[] zzUnpackCMap(String packed){ _EL_   char[] map=new char[0x10000]; _EL_   int i=0; _EL_   int j=0; _EL_   while (i < 190) { _EL_     int count=packed.charAt(i++); _EL_     char value=packed.charAt(i++); _EL_     do     map[j++]=value; _EL_  while (--count > 0); _EL_   } _EL_   return map; _EL_ } _EL_ ', 'protected void parseDOMAttributes(Element element) throws SAML2Exception { _EL_   super.parseDOMAttributes(element); _EL_ } _EL_ ', 'private static double distance(double x1,double y1,double x2,double y2){ _EL_   return Math.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1)); _EL_ } _EL_ ', 'protected void drawCenterText(Canvas c){ _EL_   SpannableString centerText=mChart.getCenterText(); _EL_   if (mChart.isDrawCenterTextEnabled() && centerText != null) { _EL_     PointF center=mChart.getCenterCircleBox(); _EL_     float innerRadius=mChart.isDrawHoleEnabled() && mChart.isHoleTransparent() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius(); _EL_     RectF holeRect=mRectBuffer[0]; _EL_     holeRect.left=center.x - innerRadius; _EL_     holeRect.top=center.y - innerRadius; _EL_     holeRect.right=center.x + innerRadius; _EL_     holeRect.bottom=center.y + innerRadius; _EL_     RectF boundingRect=mRectBuffer[1]; _EL_     boundingRect.set(holeRect); _EL_     float radiusPercent=mChart.getCenterTextRadiusPercent(); _EL_     if (radiusPercent > 0.0) { _EL_       boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f); _EL_     } _EL_     if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) { _EL_       mCenterTextLastBounds.set(boundingRect); _EL_       mCenterTextLastValue=centerText; _EL_       float width=mCenterTextLastBounds.width(); _EL_       mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false); _EL_     } _EL_     float layoutHeight=mCenterTextLayout.getHeight(); _EL_     c.save(); _EL_     c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f); _EL_     mCenterTextLayout.draw(c); _EL_     c.restore(); _EL_   } _EL_ } _EL_ ', 'public String pad(String value,int places,String padCharacter){ _EL_   StringBuilder sb=new StringBuilder(); _EL_   sb.append(value); _EL_   while (sb.length() < places) { _EL_     sb.append(padCharacter); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'private static ResultCode registerErrorResultCode(final int intValue,final LocalizableMessage name,final Enum resultCodeEnum){ _EL_   final ResultCode t=new ResultCode(intValue,name,true,resultCodeEnum); _EL_   ELEMENTS.put(intValue,t); _EL_   return t; _EL_ } _EL_ ', 'public void addAll(ExceptionSet other){ _EL_   exceptionSet.or(other.exceptionSet); _EL_   explicitSet.or(other.explicitSet); _EL_   size=countBits(exceptionSet); _EL_   commonSupertype=null; _EL_ } _EL_ ', '@HLEUnimplemented @HLEFunction(nid=0x574A8C3F,version=271) public int sceUsbCamStartVideo(){ _EL_   if (!setupVideo()) { _EL_     log.warn(String.format("Cannot find webcam")); _EL_   } _EL_   return 0; _EL_ } _EL_ ', 'protected ResourceLoaderLicenseLocator(final Charset charset,final String... licenseFiles){ _EL_   if (licenseFiles == null || licenseFiles.length == 0) { _EL_     throw new IllegalArgumentException("No license files specified"); _EL_   } _EL_   if (charset == null) { _EL_     throw new NullPointerException("Charset is null"); _EL_   } _EL_   this.licenseFiles=new ArrayList<String>(Arrays.asList(licenseFiles)); _EL_   this.charset=charset; _EL_ } _EL_ ', 'private static boolean isIntendedException(Exception e,Class<?> clazz){ _EL_   final String message=e.getMessage(); _EL_   return (!TextUtils.isEmpty(message) && message.startsWith(clazz.getName())); _EL_ } _EL_ ', 'static public void addNotificationListener(JMXConnector jmxConnector,Class<?> mbeanInterface,String mbeanName,NotificationListener notificationListener,boolean ignored) throws InstanceNotFoundException, Exception { _EL_   MBeanServerConnection mbsc=jmxConnector.getMBeanServerConnection(); _EL_   ObjectName objectName=generateMBeanObjectName(mbeanInterface.getName(),mbeanName); _EL_   mbsc.addNotificationListener(objectName,notificationListener,null,null); _EL_ } _EL_ ', 'private void deleteAttrs(SvcReg reg,EntryRep entry,boolean checkDups){ _EL_   EntryClass eclass=entry.eclass; _EL_   deleteInstance(eclass); _EL_   Object[] fields=entry.fields; _EL_   if (fields.length == 0) { _EL_     ArrayList regs=serviceByEmptyAttr.get(eclass); _EL_     if (regs == null || (checkDups && hasEmptyAttr(reg,eclass)))     return; _EL_     int idx=regs.indexOf(reg); _EL_     if (idx >= 0) { _EL_       regs.remove(idx); _EL_       if (regs.isEmpty())       serviceByEmptyAttr.remove(eclass); _EL_     } _EL_     return; _EL_   } _EL_   for (int fldidx=fields.length; --fldidx >= 0; ) { _EL_     eclass=getDefiningClass(eclass,fldidx); _EL_     HashMap[] attrMaps=serviceByAttr.get(eclass); _EL_     if (attrMaps == null || attrMaps[fldidx] == null || (checkDups && hasAttr(reg,eclass,fldidx,fields[fldidx])))     continue; _EL_     HashMap map=attrMaps[fldidx]; _EL_     Object value=fields[fldidx]; _EL_     ArrayList regs=(ArrayList)map.get(value); _EL_     if (regs == null)     continue; _EL_     int idx=regs.indexOf(reg); _EL_     if (idx < 0)     continue; _EL_     regs.remove(idx); _EL_     if (!regs.isEmpty())     continue; _EL_     map.remove(value); _EL_     if (!map.isEmpty())     continue; _EL_     attrMaps[fldidx]=null; _EL_     if (allNull(attrMaps))     serviceByAttr.remove(eclass); _EL_   } _EL_ } _EL_ ', 'public static boolean isClassLiteralPossible(ClassNode classNode){ _EL_   return Modifier.isPublic(classNode.getModifiers()); _EL_ } _EL_ ', 'private Properties loadLogFile(License license,boolean create){ _EL_   Properties log=new Properties(); _EL_   File logFile=getLogFile(license); _EL_   try { _EL_     if (create && logFile.createNewFile()) { _EL_       logger.fine("Created license log file: " + logFile.getAbsolutePath()); _EL_     } _EL_     final InputStream in=new FileInputStream(logFile); _EL_     try { _EL_       log.load(in); _EL_     } _EL_   finally { _EL_       in.close(); _EL_     } _EL_   } _EL_  catch (  FileNotFoundException ex) { _EL_     if (create) { _EL_       logger.log(Level.SEVERE,"Unable to create license log file: " + logFile.getAbsolutePath(),ex); _EL_     } _EL_  else { _EL_       logger.fine("Log file does not yet exist"); _EL_     } _EL_   } _EL_ catch (  IOException ex) { _EL_     logger.log(Level.WARNING,"Unable to access license log file: " + logFile.getAbsolutePath(),ex); _EL_   } _EL_   return log; _EL_ } _EL_ ', 'public HTMLStripCharFilterFactory(Map<String,String> args){ _EL_   super(args); _EL_   escapedTags=getSet(args,"escapedTags"); _EL_   if (!args.isEmpty()) { _EL_     throw new IllegalArgumentException("Unknown parameters: " + args); _EL_   } _EL_ } _EL_ ', 'public static int update(long id,V v){ _EL_   String passwd=(String)v.value("password"); _EL_   if (!X.isEmpty(passwd)) { _EL_     passwd=encrypt(passwd); _EL_     v.set("password",passwd,true); _EL_   } _EL_  else { _EL_     v.remove("password"); _EL_   } _EL_   return Helper.update(id,v.set("updated",System.currentTimeMillis()),User.class); _EL_ } _EL_ ', 'public double likelihood(String[] doc,String tag){ _EL_   double likelihood=0; _EL_   if (ntw.rowSum(tag) == 0) { _EL_     return likelihood; _EL_   } _EL_   Counter<String> nwd=new Counter<String>(); _EL_   for (  String w : doc) { _EL_     nwd.inc(w,1); _EL_   } _EL_   double norm=0; _EL_   Map<String,Double> prwd=new Hashtable<String,Double>(); _EL_   for (  Entry<String,Long> e : nwd) { _EL_     double prw=prw(e.getKey()); _EL_     norm+=prw; _EL_     prwd.put(e.getKey(),prw); _EL_   } _EL_   for (  Entry<String,Double> e : prwd.entrySet()) { _EL_     double prw=e.getValue() / norm; _EL_     likelihood+=ptr(tag,e.getKey()) * prw * (1.0 - pcm()); _EL_   } _EL_   likelihood+=ptr(tag,NOISE) * pcm(); _EL_   return likelihood; _EL_ } _EL_ ', 'public void addLastItem(M model){ _EL_   addItem(mDatas.size(),model); _EL_ } _EL_ ', 'static boolean hasLocalizedMessages(){ _EL_   return GUIMediator.isEnglishLocale() || !FIRST_MESSAGE.equals(I18n.tr(FIRST_MESSAGE)); _EL_ } _EL_ ', 'public static DockerImage fromImageName(String imageName){ _EL_   imageName=prepare(imageName); _EL_   String[] parts=imageName.split(SECTION_SEPARATOR); _EL_ switch (parts.length) { _EL_ case 1: _EL_     return fromParts(null,null,parts[0]); _EL_ case 2: _EL_   if (isValidNamespace(parts[0])) { _EL_     return fromParts(null,parts[0],parts[1]); _EL_   } _EL_  else { _EL_     return fromParts(parts[0],null,parts[1]); _EL_   } _EL_ case 3: _EL_ return fromParts(parts[0],parts[1],parts[2]); _EL_ default : _EL_ throw new IllegalArgumentException("Invalid image format: " + imageName); _EL_ } _EL_ } _EL_ ', 'public synchronized void listen(final Set<NotificationChannel> channelNames){ _EL_   m_channels.addAll(channelNames); _EL_ } _EL_ ', 'public static void deleteDirectory(File directory) throws IOException { _EL_   if (!directory.exists()) { _EL_     return; _EL_   } _EL_   if (!isSymlink(directory)) { _EL_     cleanDirectory(directory); _EL_   } _EL_   if (!directory.delete()) { _EL_     String message="Unable to delete directory " + directory + "."; _EL_     throw new IOException(message); _EL_   } _EL_ } _EL_ ', 'private void displayNonVerbose(ConsoleApplication app,String categoryName,String typeName,Tag tag,Set<String> propertyNames){ _EL_   if (!app.isScriptFriendly()) { _EL_     displayPropertyOptionKey(app); _EL_     app.println(); _EL_     app.println(); _EL_   } _EL_   TableBuilder builder=new TableBuilder(); _EL_   builder.appendHeading(INFO_DSCFG_HEADING_COMPONENT_NAME.get()); _EL_   builder.appendHeading(INFO_DSCFG_HEADING_COMPONENT_TYPE.get()); _EL_   builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_NAME.get()); _EL_   builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_OPTIONS.get()); _EL_   builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_SYNTAX.get()); _EL_   builder.addSortKey(0); _EL_   builder.addSortKey(1); _EL_   builder.addSortKey(2); _EL_   for (  String category : categoryMap.keySet()) { _EL_     if (categoryName != null && !categoryName.equals(category)) { _EL_       continue; _EL_     } _EL_     Map<String,AbstractManagedObjectDefinition<?,?>> subTypes=categoryMap.get(category); _EL_     for (    String type : subTypes.keySet()) { _EL_       if (typeName != null && !typeName.equals(type)) { _EL_         continue; _EL_       } _EL_       AbstractManagedObjectDefinition<?,?> mod=subTypes.get(type); _EL_       if (cannotDisplay(app,mod,tag)) { _EL_         continue; _EL_       } _EL_       Set<PropertyDefinition<?>> pds=getPropertyDefinitions(mod); _EL_       for (      PropertyDefinition<?> pd : pds) { _EL_         if (cannotDisplay(app,pd,propertyNames)) { _EL_           continue; _EL_         } _EL_         builder.startRow(); _EL_         builder.appendCell(category); _EL_         builder.appendCell(type); _EL_         builder.appendCell(pd.getName()); _EL_         builder.appendCell(getPropertyOptionSummary(pd)); _EL_         PropertyDefinitionUsageBuilder v=new PropertyDefinitionUsageBuilder(false); _EL_         builder.appendCell(v.getUsage(pd)); _EL_       } _EL_     } _EL_   } _EL_   TablePrinter printer; _EL_   if (app.isScriptFriendly()) { _EL_     printer=createScriptFriendlyTablePrinter(app.getOutputStream()); _EL_   } _EL_  else { _EL_     printer=new TextTablePrinter(app.getOutputStream()); _EL_   } _EL_   builder.print(printer); _EL_ } _EL_ ', 'public List<Long> deleteEmptyFolders(){ _EL_   ArrayList<Long> folderIds=new ArrayList<Long>(); _EL_   SQLiteDatabase db=mOpenHelper.getWritableDatabase(); _EL_   db.beginTransaction(); _EL_   try { _EL_     String selection=LauncherSettings.Favorites.ITEM_TYPE + " = " + LauncherSettings.Favorites.ITEM_TYPE_FOLDER+ " AND "+ LauncherSettings.Favorites._ID+ " NOT IN (SELECT "+ LauncherSettings.Favorites.CONTAINER+ " FROM "+ TABLE_FAVORITES+ ")"; _EL_     Cursor c=db.query(TABLE_FAVORITES,new String[]{LauncherSettings.Favorites._ID},selection,null,null,null,null); _EL_     while (c.moveToNext()) { _EL_       folderIds.add(c.getLong(0)); _EL_     } _EL_     c.close(); _EL_     if (folderIds.size() > 0) { _EL_       db.delete(TABLE_FAVORITES,Utilities.createDbSelectionQuery(LauncherSettings.Favorites._ID,folderIds),null); _EL_     } _EL_     db.setTransactionSuccessful(); _EL_   } _EL_  catch (  SQLException ex) { _EL_     Log.e(TAG,ex.getMessage(),ex); _EL_     folderIds.clear(); _EL_   } _EL_  finally { _EL_     db.endTransaction(); _EL_   } _EL_   return folderIds; _EL_ } _EL_ ', 'private Document parse(final String data){ _EL_   if (docBuilder == null || data == null) { _EL_     return null; _EL_   } _EL_   Document document=null; _EL_   try { _EL_     String buf=BEGINPART + data + ENDPART; _EL_     InputSource inputSource=new InputSource(new StringReader(buf)); _EL_     document=docBuilder.parse(inputSource); _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_   } _EL_   return document; _EL_ } _EL_ ', 'public boolean isProductionJournal(Set<String> productionCopies,Volume volume){ _EL_   for (  String productionCopy : productionCopies) { _EL_     if (productionCopy.equalsIgnoreCase(volume.getRpCopyName())) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static String decode(final String escaped) throws URIException { _EL_   try { _EL_     final byte[] rawdata=URLCodec.decodeUrl(EncodingUtil.getAsciiBytes(escaped)); _EL_     return EncodingUtil.getString(rawdata,URI.getDefaultProtocolCharset()); _EL_   } _EL_  catch (  final DecoderException e) { _EL_     throw new URIException(e.getMessage()); _EL_   } _EL_ } _EL_ ', 'void waitBeforeNextPoll(int pollingInterval) throws InterruptedException { _EL_ synchronized (this) { _EL_     wait(pollingInterval); _EL_   } _EL_   if (!pollOutstanding) { _EL_     return; _EL_   } _EL_   log.debug("--- extra wait"); _EL_   for (int i=0; i < 20; i++) { _EL_ synchronized (this) { _EL_       wait(pollingInterval / 4); _EL_     } _EL_     log.debug("-------------extra wait"); _EL_     if (!pollOutstanding) { _EL_       return; _EL_     } _EL_   } _EL_ } _EL_ ', 'private void shiftMappingVectorTokensLeft(int lineNum,int startCol,int shift){ _EL_   boolean lastWasBeginTLAToken=false; _EL_   int lastBeginTLATokCol=-777; _EL_   Vector line=(Vector)mappingVector.elementAt(lineNum); _EL_   for (int i=0; i < line.size(); i++) { _EL_     MappingObject obj=(MappingObject)line.elementAt(i); _EL_     if (obj.getType() == MappingObject.BEGIN_TLATOKEN) { _EL_       MappingObject.BeginTLAToken tobj=(MappingObject.BeginTLAToken)obj; _EL_       int col=tobj.getColumn(); _EL_       if (col >= startCol) { _EL_         tobj.setColumn(col - shift); _EL_       } _EL_       lastWasBeginTLAToken=true; _EL_       lastBeginTLATokCol=tobj.getColumn(); _EL_     } _EL_  else { _EL_       if (obj.getType() == MappingObject.END_TLATOKEN) { _EL_         MappingObject.EndTLAToken tobj=(MappingObject.EndTLAToken)obj; _EL_         int col=tobj.getColumn(); _EL_         if (col >= startCol) { _EL_           tobj.setColumn(col - shift); _EL_         } _EL_         if (lastWasBeginTLAToken && tobj.getColumn() <= lastBeginTLATokCol) { _EL_           PcalDebug.ReportBug("PcalTLAGen.shiftMappingVectorTokensLeft created a null TLA Token"); _EL_         } _EL_       } _EL_  else       if (obj.getType() == MappingObject.SOURCE_TOKEN) { _EL_         MappingObject.SourceToken tobj=(MappingObject.SourceToken)obj; _EL_         int col=tobj.getBeginColumn(); _EL_         if (col >= startCol) { _EL_           tobj.setBeginColumn(col - shift); _EL_         } _EL_         col=tobj.getEndColumn(); _EL_         if (col >= startCol) { _EL_           tobj.setEndColumn(col - shift); _EL_         } _EL_         lastWasBeginTLAToken=false; _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'protected Dimension computeLengths(String annoText){ _EL_   String[] lines=Util.splitLines(annoText); _EL_   int lineLength=0; _EL_   for (  String line : lines) { _EL_     if (line.length() > lineLength)     lineLength=line.length(); _EL_   } _EL_   return new Dimension(lineLength + 5,lines.length + 1); _EL_ } _EL_ ', 'public static void writeImageMap(PrintWriter writer,String name,ChartRenderingInfo info,ToolTipTagFragmentGenerator toolTipTagFragmentGenerator,URLTagFragmentGenerator urlTagFragmentGenerator) throws IOException { _EL_   writer.println(ImageMapUtilities.getImageMap(name,info,toolTipTagFragmentGenerator,urlTagFragmentGenerator)); _EL_ } _EL_ ', 'ImportNoteBuilder addMessage(ImportNoteMessage.Type type,String message){ _EL_   if (!Strings.isNullOrEmpty(message)) { _EL_     messages.add(new ImportNoteMessage(type,message)); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException { _EL_   return toXMLString(includeNS,declareNS,false); _EL_ } _EL_ ', 'public static List<String> asStringList(Collection<? extends Object> objects){ _EL_   List<String> list=new ArrayList<>(); _EL_   for (  Object object : objects) { _EL_     list.add(String.valueOf(object)); _EL_   } _EL_   return list; _EL_ } _EL_ ', 'public <E extends T>E min(Iterable<E> iterable){ _EL_   Iterator<E> iterator=iterable.iterator(); _EL_   E minSoFar=iterator.next(); _EL_   while (iterator.hasNext()) { _EL_     minSoFar=min(minSoFar,iterator.next()); _EL_   } _EL_   return minSoFar; _EL_ } _EL_ ', 'public static List<ItemStack> consolidateItemStacks(List<ItemStack> inputStacks){ _EL_   List<ItemStack> outputStacks=new ArrayList<ItemStack>(); _EL_   for (  ItemStack sourceIS : inputStacks) { _EL_     boolean bFound=false; _EL_     for (    ItemStack destIS : outputStacks) { _EL_       if (destIS != null && sourceIS != null && itemStackIngredientsMatch(destIS,sourceIS)) { _EL_         bFound=true; _EL_         destIS.stackSize+=sourceIS.stackSize; _EL_       } _EL_     } _EL_     if (!bFound)     outputStacks.add(sourceIS.copy()); _EL_   } _EL_   return outputStacks; _EL_ } _EL_ ', 'public static int howManyDaysOld(long time){ _EL_   return (int)((System.currentTimeMillis() - time) / DateUtils.DAY_IN_MILLIS); _EL_ } _EL_ ', 'protected Character isWFXMLChar(String chardata){ _EL_   Character refInvalidChar; _EL_   if (chardata == null || (chardata.length() == 0)) { _EL_     return null; _EL_   } _EL_   char[] dataarray=chardata.toCharArray(); _EL_   int datalength=dataarray.length; _EL_   if (fIsXMLVersion11) { _EL_     int i=0; _EL_     while (i < datalength) { _EL_       if (XML11Char.isXML11Invalid(dataarray[i++])) { _EL_         char ch=dataarray[i - 1]; _EL_         if (XMLChar.isHighSurrogate(ch) && i < datalength) { _EL_           char ch2=dataarray[i++]; _EL_           if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) { _EL_             continue; _EL_           } _EL_         } _EL_         refInvalidChar=new Character(ch); _EL_         return refInvalidChar; _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     int i=0; _EL_     while (i < datalength) { _EL_       if (XMLChar.isInvalid(dataarray[i++])) { _EL_         char ch=dataarray[i - 1]; _EL_         if (XMLChar.isHighSurrogate(ch) && i < datalength) { _EL_           char ch2=dataarray[i++]; _EL_           if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) { _EL_             continue; _EL_           } _EL_         } _EL_         refInvalidChar=new Character(ch); _EL_         return refInvalidChar; _EL_       } _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public final ParallelFlux<T> doOnNext(Consumer<? super T> onNext){ _EL_   Objects.requireNonNull(onNext,"onNext"); _EL_   return doOnSignal(this,onNext,null,null,null,null,null,null,null); _EL_ } _EL_ ', 'public void modify(SSOToken token,String objName,ModificationItem[] mods) throws SMSException, SSOException { _EL_   if ((objName == null) || (objName.length() == 0) || (mods == null)|| (mods.length == 0)) { _EL_     throw new IllegalArgumentException("SMSEnhancedFlatFileObject.modify: " + "One or more arguments is null or empty"); _EL_   } _EL_   mRWLock.readRequest(); _EL_   try { _EL_     if (!root.isExists(mRootDir,objName)) { _EL_       String errmsg="SMSEnhancedFlatFileObject.modify: object " + objName + " not found."; _EL_       mDebug.error(errmsg); _EL_       throw new ServiceNotFoundException(errmsg); _EL_     } _EL_   } _EL_   finally { _EL_     mRWLock.readDone(); _EL_   } _EL_   mRWLock.writeRequest(); _EL_   try { _EL_     SMSFlatFileTreeNode node=root.getChild(objName); _EL_     if (node == null) { _EL_       String errmsg="SMSEnhancedFlatFileObject.modify: object " + objName + " not found."; _EL_       mDebug.error(errmsg); _EL_       throw new ServiceNotFoundException(errmsg); _EL_     } _EL_     String filepath=node.getAttributeFilename(mRootDir); _EL_     if (filepath == null) { _EL_       String errmsg="SMSEnhancedFlatFileObject.modify: object " + objName + " not found."; _EL_       mDebug.error(errmsg); _EL_       throw new ServiceNotFoundException(errmsg); _EL_     } _EL_     File filehandle=new File(filepath); _EL_     if (!filehandle.isFile()) { _EL_       String errmsg="SMSEnhancedFlatFileObject.modify: Attributes file for " + "object " + objName + " not found."; _EL_       mDebug.error(errmsg); _EL_       throw new ServiceNotFoundException(errmsg); _EL_     } _EL_     Properties props=loadProperties(filehandle,objName); _EL_     boolean hasSunXmlKeyValue=props.getProperty(SMSEntry.ATTR_XML_KEYVAL) != null; _EL_     for (int i=0; i < mods.length; i++) { _EL_       modifyValues(objName,mods[i],props); _EL_     } _EL_     saveProperties(props,filehandle,objName); _EL_     String newSunXMLKeyValue=props.getProperty(SMSEntry.ATTR_XML_KEYVAL); _EL_     if (newSunXMLKeyValue != null) { _EL_       Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,newSunXMLKeyValue); _EL_       if (!hasSunXmlKeyValue) { _EL_         deleteSunXmlKeyValFiles(node); _EL_       } _EL_       createSunXmlKeyValFiles(node,xmlKeyVals); _EL_       saveDirectoryTree(); _EL_     } _EL_   } _EL_   finally { _EL_     mRWLock.writeDone(); _EL_   } _EL_ } _EL_ ', 'public void removeOnTabSelectedListener(OnTabSelectedListener listener){ _EL_   if (listener != null) { _EL_     mListeners.remove(listener); _EL_   } _EL_ } _EL_ ', 'public ConnectUriManager(List<String> connectUri) throws THLException { _EL_   this.uriList=connectUri; _EL_   if (connectUri.size() == 0) { _EL_     throw new THLException("Connect URI value is empty; must be a list of one or more THL URIs"); _EL_   } _EL_ } _EL_ ', 'public static InputStream toInputStream(String input,Charset encoding){ _EL_   return new ByteArrayInputStream(input.getBytes(Charsets.toCharset(encoding))); _EL_ } _EL_ ', 'public static PublicKey generatePublicKey(String encodedPublicKey){ _EL_   try { _EL_     byte[] decodedKey=Base64.decode(encodedPublicKey); _EL_     KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM); _EL_     return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey)); _EL_   } _EL_  catch (  NoSuchAlgorithmException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ catch (  InvalidKeySpecException e) { _EL_     Log.e(TAG,"Invalid key specification."); _EL_     throw new IllegalArgumentException(e); _EL_   } _EL_ catch (  Base64DecoderException e) { _EL_     Log.e(TAG,"Base64 decoding failed."); _EL_     throw new IllegalArgumentException(e); _EL_   } _EL_ } _EL_ ', 'public NumberTick(Number number,String label,TextAnchor textAnchor,TextAnchor rotationAnchor,double angle){ _EL_   super(number.doubleValue(),label,textAnchor,rotationAnchor,angle); _EL_   this.number=number; _EL_ } _EL_ ', 'private boolean isStoppable(){ _EL_   return (isRunning() && getCache() != null); _EL_ } _EL_ ', 'public static boolean isPublic(int mod){ _EL_   return Modifier.isPublic(mod); _EL_ } _EL_ ', 'public static Map<String,Object> createUserPrefMap(GenericValue rec) throws GeneralException { _EL_   return addPrefToMap(rec,new LinkedHashMap<String,Object>()); _EL_ } _EL_ ', 'public JSONBuffer appendString(Object cont){ _EL_   if (stack.empty() || stack.peek() != Operand.ARRAY) { _EL_     throw new JSONException("Appending string outside of array context."); _EL_   } _EL_   addQuotedString(cont); _EL_   addSeparator(); _EL_   return this; _EL_ } _EL_ ', 'public synchronized void remove(IAudioProcessor processor){ _EL_   processors.remove(processor); _EL_   buildFinalProcessor(); _EL_ } _EL_ ', 'private int endRecoverAnimation(ViewHolder viewHolder,boolean override){ _EL_   final int recoverAnimSize=mRecoverAnimations.size(); _EL_   for (int i=recoverAnimSize - 1; i >= 0; i--) { _EL_     final RecoverAnimation anim=mRecoverAnimations.get(i); _EL_     if (anim.mViewHolder == viewHolder) { _EL_       anim.mOverridden|=override; _EL_       if (!anim.mEnded) { _EL_         anim.cancel(); _EL_       } _EL_       mRecoverAnimations.remove(i); _EL_       return anim.mAnimationType; _EL_     } _EL_   } _EL_   return 0; _EL_ } _EL_ ', 'private boolean isMethodContained(Method m,List<Method> wrapperMethods){ _EL_   String name=m.getName(); _EL_   Class<?>[] paramTypes=m.getParameterTypes(); _EL_   Class<?> returnType=m.getReturnType(); _EL_   for (  Method wm : wrapperMethods) { _EL_     if (name.equals(wm.getName()) && Arrays.equals(paramTypes,wm.getParameterTypes()) && returnType == wm.getReturnType()) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void deleteNode(Node n){ _EL_   Assert.check(nodes.contains(n)); _EL_   nodes.remove(n); _EL_   notifyUpdate(n,null); _EL_ } _EL_ ', 'void updatePressed(ActionEvent e,boolean newRoute){ _EL_   String uName=_userName.getText(); _EL_   Route g=checkNamesOK(); _EL_   if (g == null) { _EL_     return; _EL_   } _EL_   g.setUserName(uName); _EL_   g.clearOutputTurnouts(); _EL_   g.clearOutputSensors(); _EL_   g.clearRouteSensors(); _EL_   initializeIncludedList(); _EL_   setTurnoutInformation(g); _EL_   setSensorInformation(g); _EL_   g.setOutputScriptName(scriptFile.getText()); _EL_   g.setOutputSoundName(soundFile.getText()); _EL_   setControlInformation(g); _EL_   curRoute=g; _EL_   finishUpdate(); _EL_   status1.setText((newRoute ? Bundle.getMessage("RouteAddStatusCreated") : Bundle.getMessage("RouteAddStatusUpdated")) + ": \\"" + uName+ "\\" ("+ _includedTurnoutList.size()+ " "+ Bundle.getMessage("Turnouts")+ ", "+ _includedSensorList.size()+ " "+ Bundle.getMessage("Sensors")+ ")"); _EL_ } _EL_ ', '@TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1) private Response<BitmapDrawable> doParse(NetworkResponse response){ _EL_   byte[] data=response.data; _EL_   BitmapFactory.Options decodeOptions=new BitmapFactory.Options(); _EL_   decodeOptions.inInputShareable=true; _EL_   decodeOptions.inPurgeable=true; _EL_   decodeOptions.inPreferredConfig=mDecodeConfig; _EL_   Bitmap bitmap; _EL_   if (mMaxWidth == 0 && mMaxHeight == 0) { _EL_     bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions); _EL_   } _EL_  else { _EL_     decodeOptions.inJustDecodeBounds=true; _EL_     BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions); _EL_     int actualWidth=decodeOptions.outWidth; _EL_     int actualHeight=decodeOptions.outHeight; _EL_     int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight); _EL_     int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth); _EL_     decodeOptions.inJustDecodeBounds=false; _EL_     if (Utils.hasGingerbreadMR1()) { _EL_       decodeOptions.inPreferQualityOverSpeed=PREFER_QUALITY_OVER_SPEED; _EL_     } _EL_     decodeOptions.inSampleSize=ImageUtils.findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight); _EL_     Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions); _EL_     if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) { _EL_       bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true); _EL_       tempBitmap.recycle(); _EL_     } _EL_  else { _EL_       bitmap=tempBitmap; _EL_     } _EL_   } _EL_   if (bitmap == null) { _EL_     return Response.error(new ParseError(response)); _EL_   } _EL_  else { _EL_     BitmapDrawable drawable; _EL_     if (Utils.hasHoneycomb()) { _EL_       drawable=new BitmapDrawable(mResources,bitmap); _EL_     } _EL_  else { _EL_       drawable=new RecyclingBitmapDrawable(mResources,bitmap); _EL_     } _EL_     return Response.success(drawable,HttpHeaderParser.parseCacheHeaders(response)); _EL_   } _EL_ } _EL_ ', 'public double evaluate(VectorInstance x,double[] y) throws Exception { _EL_   VectorInstance diff=x.subtract(y); _EL_   double result=-m_gamma * diff.dotProduct(diff); _EL_   return Math.exp(result); _EL_ } _EL_ ', '@Override public int batchSize(){ _EL_   return batchSize; _EL_ } _EL_ ', 'public static final byte[] decodeUrl(byte[] bytes) throws DecoderException { _EL_   if (bytes == null) { _EL_     return null; _EL_   } _EL_   ByteArrayOutputStream buffer=new ByteArrayOutputStream(); _EL_   for (int i=0; i < bytes.length; i++) { _EL_     int b=bytes[i]; _EL_     if (b == \'+\') { _EL_       buffer.write(\' \'); _EL_     } _EL_  else     if (b == \'%\') { _EL_       try { _EL_         int u=Character.digit((char)bytes[++i],16); _EL_         int l=Character.digit((char)bytes[++i],16); _EL_         if (u == -1 || l == -1) { _EL_           throw new DecoderException("Invalid URL encoding"); _EL_         } _EL_         buffer.write((char)((u << 4) + l)); _EL_       } _EL_  catch (      ArrayIndexOutOfBoundsException e) { _EL_         throw new DecoderException("Invalid URL encoding"); _EL_       } _EL_     } _EL_  else { _EL_       buffer.write(b); _EL_     } _EL_   } _EL_   return buffer.toByteArray(); _EL_ } _EL_ ', 'public void clear(){ _EL_   mAttachedScrap.clear(); _EL_   recycleAndClearCachedViews(); _EL_ } _EL_ ', 'public void addDataSet(T d){ _EL_   if (d == null)   return; _EL_   mYValCount+=d.getEntryCount(); _EL_   mYValueSum+=d.getYValueSum(); _EL_   if (mDataSets.size() <= 0) { _EL_     mYMax=d.getYMax(); _EL_     mYMin=d.getYMin(); _EL_     if (d.getAxisDependency() == AxisDependency.LEFT) { _EL_       mLeftAxisMax=d.getYMax(); _EL_       mLeftAxisMin=d.getYMin(); _EL_     } _EL_  else { _EL_       mRightAxisMax=d.getYMax(); _EL_       mRightAxisMin=d.getYMin(); _EL_     } _EL_   } _EL_  else { _EL_     if (mYMax < d.getYMax())     mYMax=d.getYMax(); _EL_     if (mYMin > d.getYMin())     mYMin=d.getYMin(); _EL_     if (d.getAxisDependency() == AxisDependency.LEFT) { _EL_       if (mLeftAxisMax < d.getYMax())       mLeftAxisMax=d.getYMax(); _EL_       if (mLeftAxisMin > d.getYMin())       mLeftAxisMin=d.getYMin(); _EL_     } _EL_  else { _EL_       if (mRightAxisMax < d.getYMax())       mRightAxisMax=d.getYMax(); _EL_       if (mRightAxisMin > d.getYMin())       mRightAxisMin=d.getYMin(); _EL_     } _EL_   } _EL_   mDataSets.add(d); _EL_   handleEmptyAxis(getFirstLeft(),getFirstRight()); _EL_ } _EL_ ', 'private double[] pruneEM(Tree tree,NodeRef node,ColourChangeMatrix mm,MetaPopulation mp){ _EL_   double[] p=new double[colourCount]; _EL_   if (tree.isExternal(node)) { _EL_     p[getColour(node)]=1.0; _EL_   } _EL_  else { _EL_     NodeRef leftChild=tree.getChild(node,0); _EL_     NodeRef rightChild=tree.getChild(node,1); _EL_     double[] left=pruneEM(tree,leftChild,mm,mp); _EL_     double[] right=pruneEM(tree,rightChild,mm,mp); _EL_     double[] leftBranchPartials=pruneBranchEM(mm,left,node,leftChild,tree,mp); _EL_     double[] rightBranchPartials=pruneBranchEM(mm,right,node,rightChild,tree,mp); _EL_     double maxp=0.0; _EL_     for (int i=0; i < colourCount; i++) { _EL_       p[i]=leftBranchPartials[i] * rightBranchPartials[i]; _EL_       if (useNodeBias) { _EL_         p[i]*=mm.getEquilibrium(i) / mp.getDemographic(tree.getNodeHeight(node) - tinyTime,i); _EL_       } _EL_       if (p[i] > maxp) { _EL_         maxp=p[i]; _EL_       } _EL_     } _EL_     if (maxp < 1.0e-100) { _EL_       for (int i=0; i < colourCount; i++) { _EL_         p[i]*=1.0e+100; _EL_       } _EL_       logNodePartialsRescaling-=Math.log(1.0e+100); _EL_     } _EL_   } _EL_   nodePartials[node.getNumber()]=p; _EL_   if (debugNodePartials) { _EL_     prettyPrint("Node " + node.getNumber() + " pruneEM=",p); _EL_   } _EL_   return p; _EL_ } _EL_ ', 'public DCheckUpdate(JFrame parent){ _EL_   super(parent,Dialog.ModalityType.DOCUMENT_MODAL); _EL_   initComponents(); _EL_ } _EL_ ', 'public void addColumn(Column column){ _EL_   if (column != null) { _EL_     columns.add(column); _EL_   } _EL_ } _EL_ ', 'private boolean checkForNaNs(NumberVector vec){ _EL_   for (int i=0, d=vec.getDimensionality(); i < d; i++) { _EL_     double v=vec.doubleValue(i); _EL_     if (v != v) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', "public static void fill(StringBuilder strb,int offset){ _EL_   while (strb.length() < offset)   strb.append(' '); _EL_ } _EL_ ", 'public void openForWrite() throws EventException { _EL_   File f=new File(ConfigUtils.getInitialPropertyExpanded(m_address.getPathname())); _EL_   try { _EL_     if (!f.exists()) { _EL_       f.createNewFile(); _EL_     } _EL_  else { _EL_       LOGGER.info("appending to file=" + m_address.getPathname()); _EL_     } _EL_   } _EL_  catch (  IOException ioe) { _EL_     throw new EventException("failed to create file=" + m_address.getPathname() + ", e="+ ioe); _EL_   } _EL_   try { _EL_     m_fos=new FileOutputStream(f,true); _EL_   } _EL_  catch (  FileNotFoundException fnfe) { _EL_     throw new EventException("failed to open file=" + m_address.getPathname() + ", e="+ fnfe); _EL_   } _EL_ } _EL_ ', '@Override public double calculate_K(int[] x_index,double[] x_att,int[] y_index,double[] y_att){ _EL_   return (Math.exp(gamma * norm2(x_index,x_att,y_index,y_att))); _EL_ } _EL_ ', '@Override public void close() throws IOException { _EL_   Throwable thrown=null; _EL_   try { _EL_     flush(); _EL_   } _EL_  catch (  Throwable e) { _EL_     thrown=e; _EL_   } _EL_   try { _EL_     out.close(); _EL_   } _EL_  catch (  Throwable e) { _EL_     if (thrown == null) { _EL_       thrown=e; _EL_     } _EL_   } _EL_ } _EL_ ', 'public static void writeFofn(final File destination,final List<File> files) throws IOException { _EL_   final BufferedWriter bw=new BufferedWriter(new FileWriter(destination)); _EL_   try { _EL_     for (    final File file : files) { _EL_       bw.write(wrapArg(file.getAbsolutePath())); _EL_       bw.newLine(); _EL_     } _EL_     bw.flush(); _EL_   } _EL_   finally { _EL_     bw.close(); _EL_   } _EL_ } _EL_ ', "void markInternalClasses(){ _EL_   for (int i=mClassDefs.length - 1; i >= 0; i--) { _EL_     mTypeIds[mClassDefs[i].classIdx].internal=true; _EL_   } _EL_   for (int i=0; i < mTypeIds.length; i++) { _EL_     String className=mStrings[mTypeIds[i].descriptorIdx]; _EL_     if (className.length() == 1) { _EL_       mTypeIds[i].internal=true; _EL_     } _EL_  else     if (className.charAt(0) == '[') { _EL_       mTypeIds[i].internal=true; _EL_     } _EL_   } _EL_ } _EL_ ", 'public final double cos(){ _EL_   return Math.cos(this.radians); _EL_ } _EL_ ', 'public int size(){ _EL_   return prefixes.size(); _EL_ } _EL_ ', '@Override public Writer append(CharSequence value){ _EL_   builder.append(value); _EL_   return this; _EL_ } _EL_ ', 'public static String timestamp(DateTime ts){ _EL_   return Long.toString(ts.getMillis() / 1000); _EL_ } _EL_ ', 'public int copy(byte[] bytes,int at){ _EL_   System.arraycopy(this.bytes,0,bytes,at,this.length); _EL_   return at + this.length; _EL_ } _EL_ ', 'public void importKey(ECKey key){ _EL_   lock.lock(); _EL_   try { _EL_     checkKeyEncryptionStateMatches(key); _EL_     if (hasKey(key))     return; _EL_     importKeyLocked(key); _EL_     queueOnKeysAdded(ImmutableList.of(key)); _EL_   } _EL_   finally { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', 'public ConnectionGroupTree(UserContext userContext,ConnectionGroup root,List<ObjectPermission.Type> permissions) throws GuacamoleException { _EL_   this.rootAPIGroup=new APIConnectionGroup(root); _EL_   retrievedGroups.put(root.getIdentifier(),this.rootAPIGroup); _EL_   User self=userContext.self(); _EL_   this.connectionPermissions=self.getConnectionPermissions(); _EL_   this.sharingProfilePermissions=self.getSharingProfilePermissions(); _EL_   this.connectionDirectory=userContext.getConnectionDirectory(); _EL_   this.connectionGroupDirectory=userContext.getConnectionGroupDirectory(); _EL_   this.sharingProfileDirectory=userContext.getSharingProfileDirectory(); _EL_   addConnectionGroupDescendants(Collections.singleton(root),permissions); _EL_ } _EL_ ', 'private boolean containsSingleMetric(BufferedReader reader) throws FormatParseException { _EL_   try { _EL_     reader.mark(1); _EL_     char firstChar=(char)reader.read(); _EL_     reader.reset(); _EL_     return firstChar == \'{\'; _EL_   } _EL_  catch (  IOException e) { _EL_     throw new FormatParseException("IOException while determining if single or multiple metrics ",e); _EL_   } _EL_ } _EL_ ', 'private String separeMetaTagsContent(String content){ _EL_   String result=Utils.pregMatch(content,Constants.METATAG_CONTENT_PATTERN,1); _EL_   return htmlDecode(result); _EL_ } _EL_ ', 'public void refreshPreferences(Context context){ _EL_   if (mEnabledResId != 0) { _EL_     final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context); _EL_     if (!prefs.getBoolean(context.getString(mEnabledResId),mEnabledDefault)) { _EL_       setTriggerKeys(Collections.<Long>emptySet()); _EL_       return; _EL_     } _EL_   } _EL_   setTriggerKeys(KeyComboPreference.getKeyCodesForPreference(context,mAssignedKeysResId)); _EL_ } _EL_ ', 'void addInheritedTypes(TypeMirror typeMirror,Types typesUtils){ _EL_   if (!CompilerUtils.typeMirrorInCollection(inheritedTypes,typeMirror,typesUtils)) { _EL_     inheritedTypes.add(typeMirror); _EL_   } _EL_ } _EL_ ', 'public static Histogram multiply(Histogram x,double y){ _EL_   return x.modifyEventCounters(null); _EL_ } _EL_ ', 'public void addCacheParticipants(Map<UUID,IgniteUuid> allParticipants,Map<UUID,IgniteUuid> addedParticipants){ _EL_   verStore.addParticipants(allParticipants,addedParticipants); _EL_ } _EL_ ', 'public static String toJSONString(Map map){ _EL_   final StringWriter writer=new StringWriter(); _EL_   try { _EL_     writeJSONString(map,writer); _EL_     return writer.toString(); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ } _EL_ ', 'public void printContext(PrintStream out){ _EL_   out.println(getMessage()); _EL_   out.print(context); _EL_ } _EL_ ', 'public int size(){ _EL_   return methods.size(); _EL_ } _EL_ ', 'private void storeRequestId(String requestId,String key){ _EL_   requestIds.put(requestId,key); _EL_ } _EL_ ', 'private void savepostMni(String mnipostLocation,String mnipostRespLocation,List manageNameIdList,com.sun.identity.saml2.jaxb.metadata.ObjectFactory objFact) throws JAXBException { _EL_   if (mnipostLocation != null && mnipostLocation.length() > 0) { _EL_     ManageNameIDServiceElement slsElemPost=objFact.createManageNameIDServiceElement(); _EL_     slsElemPost.setBinding(httpPostBinding); _EL_     slsElemPost.setLocation(mnipostLocation); _EL_     slsElemPost.setResponseLocation(mnipostRespLocation); _EL_     manageNameIdList.add(slsElemPost); _EL_   } _EL_ } _EL_ ', 'public static boolean goToUpdatePage(Context context){ _EL_   final Uri playStoreUri=Uri.parse("market://details?id=" + context.getPackageName()); _EL_   FreshAirLog.i("Attempting to open Play Store update page at URI: " + playStoreUri.toString()); _EL_   final Intent playStoreIntent=new Intent(Intent.ACTION_VIEW,playStoreUri); _EL_   final PackageManager packageManager=context.getPackageManager(); _EL_   for (  ResolveInfo resolveInfo : packageManager.queryIntentActivities(playStoreIntent,0)) { _EL_     final ActivityInfo resolveActivity=resolveInfo.activityInfo; _EL_     final String resolvePackageName=resolveActivity.packageName; _EL_     if (resolvePackageName.equals("com.android.vending")) { _EL_       FreshAirLog.i("Opening Play Store update page..."); _EL_       playStoreIntent.setComponent(new ComponentName(resolvePackageName,resolveActivity.name)); _EL_       context.startActivity(playStoreIntent); _EL_       return true; _EL_     } _EL_   } _EL_   FreshAirLog.e("Failed to find the Play Store as a candidate for the resolution of update URI: " + playStoreUri.toString()); _EL_   return false; _EL_ } _EL_ ', 'public IJavaElement createElement(ClassScope scope,ICompilationUnit unit,HashSet existingElements,HashMap knownScopes){ _EL_   return createElement(scope,scope.referenceContext.sourceStart,unit,existingElements,knownScopes); _EL_ } _EL_ ', 'public static List<String> toRelativeFiles(@NotNull VirtualFile root,@NotNull final Collection<VirtualFile> files){ _EL_   ArrayList<String> rc=new ArrayList<String>(files.size()); _EL_   for (  VirtualFile file : files) { _EL_     rc.add(relativePath(root,file)); _EL_   } _EL_   return rc; _EL_ } _EL_ ', 'synchronized static void ensureSecurityManager(){ _EL_   if (System.getSecurityManager() == null) { _EL_     System.setSecurityManager(new RMISecurityManager()); _EL_   } _EL_ } _EL_ ', 'public static BigDecimal rate(int p_C_CurrencyFrom_ID,int p_C_CurrencyTo_ID,Timestamp p_ConversionDate,int p_C_ConversionType_ID,int p_AD_Client_ID,int p_AD_Org_ID) throws SQLException { _EL_   if (p_C_CurrencyFrom_ID == p_C_CurrencyTo_ID)   return Adempiere.ONE; _EL_   Timestamp ConversionDate=p_ConversionDate; _EL_   if (ConversionDate == null)   ConversionDate=new Timestamp(System.currentTimeMillis()); _EL_   ConversionDate=Adempiere.trunc(ConversionDate); _EL_   int C_ConversionType_ID=p_C_ConversionType_ID; _EL_   if (C_ConversionType_ID == 0) { _EL_     String sql="SELECT C_ConversionType_ID " + "FROM C_ConversionType " + "WHERE IsDefault=\'Y\'"+ " AND AD_Client_ID IN (0,?) "+ "ORDER BY AD_Client_ID DESC"; _EL_     C_ConversionType_ID=Adempiere.getSQLValue(sql,p_AD_Client_ID); _EL_   } _EL_   BigDecimal rate=null; _EL_   String sql="SELECT MultiplyRate " + "FROM C_Conversion_Rate " + "WHERE C_Currency_ID=? AND C_Currency_ID_To=?"+ " AND C_ConversionType_ID=?"+ " AND TRUNC(ValidFrom, \'DD\') <= ?"+ " AND TRUNC(ValidTo, \'DD\') >= ?"+ " AND AD_Client_ID IN (0,?) AND AD_Org_ID IN (0,?) "+ "ORDER BY AD_Client_ID DESC, AD_Org_ID DESC, ValidFrom DESC"; _EL_   PreparedStatement pstmt=Adempiere.prepareStatement(sql); _EL_   pstmt.setInt(1,p_C_CurrencyFrom_ID); _EL_   pstmt.setInt(2,p_C_CurrencyTo_ID); _EL_   pstmt.setInt(3,C_ConversionType_ID); _EL_   pstmt.setTimestamp(4,ConversionDate); _EL_   pstmt.setTimestamp(5,ConversionDate); _EL_   pstmt.setInt(6,p_AD_Client_ID); _EL_   pstmt.setInt(7,p_AD_Org_ID); _EL_   ResultSet rs=pstmt.executeQuery(); _EL_   if (rs.next()) { _EL_     rate=rs.getBigDecimal(1); _EL_   } _EL_   rs.close(); _EL_   pstmt.close(); _EL_   if (rate == null)   return null; _EL_   return rate; _EL_ } _EL_ ', 'public static Socket doInteraction(final HttpsURLConnection clientConnection,final ServerSocket serverSocket,final int responseCode,final boolean doAuthentication) throws Throwable { _EL_   clientConnection.setDoInput(true); _EL_   clientConnection.setConnectTimeout(TIMEOUT); _EL_   clientConnection.setReadTimeout(TIMEOUT); _EL_   ServerWork server=new ServerWork(serverSocket,responseCode,doAuthentication); _EL_   ClientConnectionWork client=new ClientConnectionWork(clientConnection); _EL_   ExecutorService executorService=Executors.newFixedThreadPool(2); _EL_   try { _EL_     Future<Void> serverFuture=executorService.submit(server); _EL_     Future<Void> clientFuture=executorService.submit(client); _EL_     Throwable t=null; _EL_     try { _EL_       serverFuture.get(30,TimeUnit.SECONDS); _EL_     } _EL_  catch (    ExecutionException e) { _EL_       t=e.getCause(); _EL_     } _EL_     try { _EL_       clientFuture.get(30,TimeUnit.SECONDS); _EL_     } _EL_  catch (    ExecutionException e) { _EL_       if (t != null) { _EL_         t.printStackTrace(); _EL_       } _EL_       t=e.getCause(); _EL_     } _EL_     if (t != null) { _EL_       throw t; _EL_     } _EL_   } _EL_  catch (  ExecutionException e) { _EL_     throw e.getCause(); _EL_   } _EL_  finally { _EL_     executorService.shutdown(); _EL_   } _EL_   return server.peerSocket; _EL_ } _EL_ ', 'public static SnmpEngineId createEngineId(int port) throws UnknownHostException { _EL_   int suniana=42; _EL_   InetAddress address=null; _EL_   address=InetAddress.getLocalHost(); _EL_   return createEngineId(address,port,suniana); _EL_ } _EL_ ', 'public static List<Rule> parseReferential(String path){ _EL_   Ruleset ruleset=DelphiRulesUtils.buildRuleSetFromXml(DelphiRulesUtils.getConfigurationFromFile(path)); _EL_   List<Rule> rulesRepository=new ArrayList<Rule>(); _EL_   for (  DelphiRule fRule : ruleset.getRules()) { _EL_     rulesRepository.add(createRepositoryRule(fRule)); _EL_   } _EL_   return rulesRepository; _EL_ } _EL_ ', 'public org.w3c.dom.Document encryptAndReplaceWSSElements(org.w3c.dom.Document doc,java.util.Map elmMap,java.lang.String encDataEncAlg,int encDataEncAlgStrength,String certAlias,int kekStrength,java.lang.String tokenType,java.lang.String providerID) throws EncryptionException { _EL_   return null; _EL_ } _EL_ ', 'public void addIssue(int reason,EObject obj,int featureId){ _EL_   issues.add(new TransformationIssue(reason,obj,featureId,null)); _EL_ } _EL_ ', 'public void insertChild(Node node,int index){ _EL_   node.detachFromParent(); _EL_   node.parentNode=this; _EL_   try { _EL_     initChildNodes(node); _EL_     childNodes.add(index,node); _EL_   } _EL_  catch (  IndexOutOfBoundsException ignore) { _EL_     throw new LagartoDOMException("Invalid node index: " + index); _EL_   } _EL_   reindexChildren(); _EL_ } _EL_ ', 'private static byte[] ntlmHash(final String password) throws AuthenticationException { _EL_   try { _EL_     final byte[] unicodePassword=password.getBytes("UnicodeLittleUnmarked"); _EL_     final MD4 md4=new MD4(); _EL_     md4.update(unicodePassword); _EL_     return md4.getOutput(); _EL_   } _EL_  catch (  UnsupportedEncodingException e) { _EL_     throw new AuthenticationException("Unicode not supported: " + e.getMessage(),e); _EL_   } _EL_ } _EL_ ', 'private boolean betweenZeroAndOne(final String paramName,final double val){ _EL_   if ((val < 0) || (val > 1)) { _EL_     JOptionPane.showMessageDialog(null,paramName + "should be between 0 and 1","Warning!",JOptionPane.WARNING_MESSAGE); _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public void powEquals(double exp){ _EL_   for (int i=0; i < A.length; i++)   for (int j=0; j < A[i].length; j++)   A[i][j]=Math.pow(A[i][j],exp); _EL_ } _EL_ ', 'public static NodeList selectNodeList(Node doc,String str,NamespaceContext nsctx) throws XPathException { _EL_   XPathFactory xpf=xpathFactoryCache.getInstanceForCurrentThread(); _EL_   XPath xpath=xpf.newXPath(); _EL_   xpath.setNamespaceContext(nsctx); _EL_   XPathExpression expr=xpath.compile(str); _EL_   return (NodeList)expr.evaluate(doc,XPathConstants.NODESET); _EL_ } _EL_ ', 'public ResultEntry(NondominatedPopulation population,TypedProperties properties){ _EL_   this(population,properties == null ? null : properties.getProperties()); _EL_ } _EL_ ', 'private void generateDiscovery() throws SAXException { _EL_   handler.startElement("",LOCATORS,LOCATORS,EMPTY); _EL_   generateLocators(); _EL_   handler.endElement("",LOCATORS,LOCATORS); _EL_ } _EL_ ', 'protected BasicType(Class<T> type,int sqlType){ _EL_   super(type,sqlType); _EL_   checkNull=!type.isPrimitive(); _EL_ } _EL_ ', 'public void applyProperties(){ _EL_   for (  ParameterType type : allParameterTypes) { _EL_     String value=allParameterValues.getProperty(type.getKey()); _EL_     ParameterService.setParameterValue(type,value); _EL_   } _EL_ } _EL_ ', 'public void add(ClusterNode newNode){ _EL_   if (node != null) { _EL_     nodes=new ArrayList<>(2); _EL_     nodes.add(node); _EL_     node=null; _EL_   } _EL_   nodes.add(newNode); _EL_ } _EL_ ', 'public static String[] toQuotedAndCommaSeparatedArray(String str) throws IOException { _EL_   LinkedList<String> values=new LinkedList<String>(); _EL_   StreamTokenizer tt=new StreamTokenizer(new StringReader(str)); _EL_   tt.wordChars(\'a\',\'z\'); _EL_   tt.wordChars(\'A\',\'Z\'); _EL_   tt.wordChars(128 + 32,255); _EL_   tt.whitespaceChars(0,\' \'); _EL_   tt.quoteChar(\'"\'); _EL_   tt.quoteChar(\'\\\'\'); _EL_   while (tt.nextToken() != StreamTokenizer.TT_EOF) { _EL_ switch (tt.ttype) { _EL_ case StreamTokenizer.TT_WORD: _EL_ case \'"\': _EL_ case \'\\\'\': _EL_       values.add(tt.sval); _EL_     break; _EL_ } _EL_ } _EL_ return values.toArray(new String[values.size()]); _EL_ } _EL_ ', 'public void writeStringNoCompression(String str) throws IOException { _EL_   if (str == null) { _EL_     writeInt(0); _EL_   } _EL_  else { _EL_     writeInt(str.length()); _EL_     for (int i=0; i < str.length(); i++)     io.write((byte)str.charAt(i)); _EL_   } _EL_ } _EL_ ', 'public SmartThresholds parse(final Resource thresholdFileResource) throws IOException { _EL_   final SmartThresholds holder=new SmartThresholds(); _EL_   BufferedReader reader=null; _EL_   try { _EL_     reader=new BufferedReader(new InputStreamReader(thresholdFileResource.getInputStream())); _EL_     String line; _EL_     while ((line=reader.readLine()) != null) { _EL_       if (line.startsWith("SM")) { _EL_         String[] lineInput=line.split("\\\\s+"); _EL_         holder.addThreshold(new SmartThreshold(lineInput)); _EL_       } _EL_     } _EL_   } _EL_   finally { _EL_     if (reader != null) { _EL_       reader.close(); _EL_     } _EL_   } _EL_   return holder; _EL_ } _EL_ ', 'public void shutdown(){ _EL_   ExecutorService executor=Executors.newScheduledThreadPool(0); _EL_   executor.submit(createShutdown(0)); _EL_ } _EL_ ', '@Override public Point drawingToView(Point2D.Double p){ _EL_   return new Point((int)(p.x * scaleFactor) - translation.x,(int)(p.y * scaleFactor) - translation.y); _EL_ } _EL_ ', 'public void addDescriptor(final SetupDescriptor desc){ _EL_   descriptors.add(desc); _EL_ } _EL_ ', 'public static String compileProgressSuccessAction(String progressSuccessAction) throws TemplateModelException { _EL_   Environment env=CommonFtlUtil.getCurrentEnvironment(); _EL_   return compileProgressSuccessAction(progressSuccessAction,ContextFtlUtil.getRequest(env),ContextFtlUtil.getResponse(env)); _EL_ } _EL_ ', 'public static String join(String separator,float... elements){ _EL_   if (elements == null || elements.length == 0) { _EL_     return ""; _EL_   } _EL_   List<Number> list=new ArrayList<Number>(elements.length); _EL_   for (  Float elem : elements) { _EL_     list.add(elem); _EL_   } _EL_   return join(separator,list); _EL_ } _EL_ ', 'public static void putUnsignedByte(ByteBuffer bb,short v){ _EL_   bb.put((byte)(v & 0xff)); _EL_ } _EL_ ', 'public static int numOfParameters(String desc){ _EL_   int n=0; _EL_   int i=1; _EL_   for (; ; ) { _EL_     char c=desc.charAt(i); _EL_     if (c == \')\')     break; _EL_     while (c == \'[\')     c=desc.charAt(++i); _EL_     if (c == \'L\') { _EL_       i=desc.indexOf(\';\',i) + 1; _EL_       if (i <= 0)       throw new IndexOutOfBoundsException("bad descriptor"); _EL_     } _EL_  else     ++i; _EL_     ++n; _EL_   } _EL_   return n; _EL_ } _EL_ ', '@Override public Trie optimize(Trie orig){ _EL_   List<CharSequence> cmds=orig.cmds; _EL_   List<Row> rows=new ArrayList<>(); _EL_   List<Row> orows=orig.rows; _EL_   int remap[]=new int[orows.size()]; _EL_   for (int j=orows.size() - 1; j >= 0; j--) { _EL_     Row now=new Remap(orows.get(j),remap); _EL_     boolean merged=false; _EL_     for (int i=0; i < rows.size(); i++) { _EL_       Row q=merge(now,rows.get(i)); _EL_       if (q != null) { _EL_         rows.set(i,q); _EL_         merged=true; _EL_         remap[j]=i; _EL_         break; _EL_       } _EL_     } _EL_     if (merged == false) { _EL_       remap[j]=rows.size(); _EL_       rows.add(now); _EL_     } _EL_   } _EL_   int root=remap[orig.root]; _EL_   Arrays.fill(remap,-1); _EL_   rows=removeGaps(root,rows,new ArrayList<Row>(),remap); _EL_   return new Trie(orig.forward,remap[root],cmds,rows); _EL_ } _EL_ ', 'public String toStringKey(){ _EL_   String result; _EL_   int i; _EL_   result="<table border=\\"1\\" cellpadding=\\"3\\" cellspacing=\\"0\\">\\n" + "   <tr><td colspan=\\"2\\"><b>Key</b></td></tr>\\n"; _EL_   for (i=0; i < getColCount(); i++) { _EL_     if (getColHidden(i))     continue; _EL_     result+="   <tr>" + "<td><b>(" + (i + 1) + ")</b></td>"+ "<td>"+ removeFilterName(m_ColNames[i])+ "</td>"+ "</tr>\\n"; _EL_   } _EL_   result+="</table>\\n"; _EL_   return result; _EL_ } _EL_ ', 'private DateTimeFormatter toFormatter(Locale locale,ResolverStyle resolverStyle,Chronology chrono){ _EL_   Objects.requireNonNull(locale,"locale"); _EL_   while (active.parent != null) { _EL_     optionalEnd(); _EL_   } _EL_   CompositePrinterParser pp=new CompositePrinterParser(printerParsers,false); _EL_   return new DateTimeFormatter(pp,locale,DecimalStyle.STANDARD,resolverStyle,null,chrono,null); _EL_ } _EL_ ', 'protected void waitForExternalStoreMount() throws Exception { _EL_   String extStorageState=Environment.getExternalStorageState(); _EL_   int currentWaitTime=0; _EL_   while (!extStorageState.equals(Environment.MEDIA_MOUNTED)) { _EL_     Log.i(LOG_TAG,"Waiting for SD card..."); _EL_     currentWaitTime=timeoutWait(currentWaitTime,DEFAULT_WAIT_POLL_TIME,DEFAULT_MAX_WAIT_TIME,"Timed out waiting for SD Card to be ready!"); _EL_     extStorageState=Environment.getExternalStorageState(); _EL_   } _EL_ } _EL_ ', 'public final void push(Node value){ _EL_   int ff=m_firstFree; _EL_   if ((ff + 1) >= m_mapSize) { _EL_     if (null == m_map) { _EL_       m_map=new Node[m_blocksize]; _EL_       m_mapSize=m_blocksize; _EL_     } _EL_  else { _EL_       m_mapSize+=m_blocksize; _EL_       Node newMap[]=new Node[m_mapSize]; _EL_       System.arraycopy(m_map,0,newMap,0,ff + 1); _EL_       m_map=newMap; _EL_     } _EL_   } _EL_   m_map[ff]=value; _EL_   ff++; _EL_   m_firstFree=ff; _EL_ } _EL_ ', 'public boolean uploadAndInstallApk(@NotNull IDevice device,@NotNull String packageName,@NotNull File localFile,@NotNull LaunchStatus launchStatus){ _EL_   if (!needsInstall(device,localFile,packageName)) { _EL_     return true; _EL_   } _EL_   String remotePath="/data/local/tmp/" + packageName; _EL_   myPrinter.stdout("$ adb push " + localFile + " "+ remotePath); _EL_   try { _EL_     device.pushFile(localFile.getPath(),remotePath); _EL_     boolean installed=installApp(device,remotePath,packageName,launchStatus); _EL_     if (installed) { _EL_       myInstalledApkCache.setInstalled(device,localFile,packageName); _EL_     } _EL_     return installed; _EL_   } _EL_  catch (  Exception e) { _EL_     myPrinter.stderr(e.toString()); _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public static ByteArrayList readAsBytes(InputStream is) throws IOException { _EL_   ByteArrayList buf=new ByteArrayList(); _EL_   byte[] b=new byte[8192]; _EL_   int nread=-1; _EL_   while ((nread=is.read(b)) >= 0) { _EL_     buf.add(b,0,nread); _EL_   } _EL_   return buf; _EL_ } _EL_ ', 'public static int uninstallSilent(Context context,String packageName){ _EL_   return uninstallSilent(context,packageName,true); _EL_ } _EL_ ', 'public void open(final long[] list,final int position){ _EL_   launchPlayerActivity=true; _EL_ synchronized (this) { _EL_     if (mShuffleMode == SHUFFLE_AUTO) { _EL_       mShuffleMode=SHUFFLE_NORMAL; _EL_     } _EL_     final long oldId=getAudioId(); _EL_     final int listlength=list.length; _EL_     boolean newlist=true; _EL_     if (mPlayListLen == listlength) { _EL_       newlist=false; _EL_       for (int i=0; i < listlength; i++) { _EL_         if (list[i] != mPlayList[i]) { _EL_           newlist=true; _EL_           break; _EL_         } _EL_       } _EL_     } _EL_     if (newlist) { _EL_       addToPlayList(list,-1); _EL_       notifyChange(QUEUE_CHANGED); _EL_     } _EL_     if (position >= 0) { _EL_       mPlayPos=position; _EL_     } _EL_  else { _EL_       mPlayPos=mShuffler.nextInt(mPlayListLen); _EL_     } _EL_     mHistory.clear(); _EL_     openCurrentAndNext(); _EL_     if (oldId != getAudioId()) { _EL_       notifyChange(META_CHANGED); _EL_     } _EL_   } _EL_ } _EL_ ', 'public Builder names(final String... names){ _EL_   return names(Arrays.asList(names)); _EL_ } _EL_ ', 'public static BigDecimal normalizeDecimalValue(BigDecimal bigDecimal,int allowedPrecision){ _EL_   if (bigDecimal.precision() > allowedPrecision) { _EL_     return null; _EL_   } _EL_   return bigDecimal; _EL_ } _EL_ ', 'protected static Node deserializeString(String doc){ _EL_   try { _EL_     StringReader reader=new StringReader(doc); _EL_     StreamSource source=new StreamSource(reader); _EL_     DOMResult result=new DOMResult(); _EL_     TransformerFactory tf=TransformerFactory.newInstance(); _EL_     Transformer transformer=tf.newTransformer(); _EL_     transformer.setOutputProperty(OutputKeys.ENCODING,DEFAULT_ENCODING); _EL_     transformer.setOutputProperty(OutputKeys.INDENT,DEFAULT_INDENT); _EL_     transformer.transform(source,result); _EL_     return result.getNode(); _EL_   } _EL_  catch (  Throwable e) { _EL_     log.log(Level.SEVERE,"Failed to serialize node",e); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static String append(final CharSequence url,final Object... params){ _EL_   final String baseUrl=url.toString(); _EL_   if (params == null || params.length == 0)   return baseUrl; _EL_   if (params.length % 2 != 0)   throw new IllegalArgumentException("Must specify an even number of parameter names/values"); _EL_   final StringBuilder result=new StringBuilder(baseUrl); _EL_   addPathSeparator(baseUrl,result); _EL_   addParamPrefix(baseUrl,result); _EL_   Object value; _EL_   result.append(params[0]); _EL_   result.append(\'=\'); _EL_   value=params[1]; _EL_   if (value != null)   result.append(value); _EL_   for (int i=2; i < params.length; i+=2) { _EL_     result.append(\'&\'); _EL_     result.append(params[i]); _EL_     result.append(\'=\'); _EL_     value=params[i + 1]; _EL_     if (value != null)     result.append(value); _EL_   } _EL_   return result.toString(); _EL_ } _EL_ ', '@Override public Revision next(){ _EL_   try { _EL_     int revCount, articleID; _EL_     revCount=result.getInt(3); _EL_     articleID=result.getInt(5); _EL_     if (articleID != this.currentArticleID) { _EL_       this.currentRevCounter=0; _EL_       this.currentArticleID=articleID; _EL_     } _EL_     if (revCount - 1 != this.currentRevCounter) { _EL_       logger.error("\\nInvalid RevCounter -" + " [ArticleId " + articleID + ", RevisionId "+ result.getInt(4)+ ", RevisionCounter "+ result.getInt(3)+ "] - Expected: "+ (this.currentRevCounter + 1)); _EL_       this.currentRevCounter=revCount; _EL_       this.previousRevision=null; _EL_       return null; _EL_     } _EL_     this.currentRevCounter=revCount; _EL_     this.primaryKey=result.getInt(1); _EL_     Revision revision=new Revision(revCount); _EL_     revision.setPrimaryKey(this.primaryKey); _EL_     if (!shouldLoadRevisionText) { _EL_       String currentRevision; _EL_       Diff diff; _EL_       RevisionDecoder decoder=new RevisionDecoder(config.getCharacterSet()); _EL_       if (binaryData) { _EL_         decoder.setInput(result.getBinaryStream(2),true); _EL_       } _EL_  else { _EL_         decoder.setInput(result.getString(2)); _EL_       } _EL_       diff=decoder.decode(); _EL_       try { _EL_         currentRevision=diff.buildRevision(previousRevision); _EL_       } _EL_  catch (      Exception e) { _EL_         this.previousRevision=null; _EL_         logger.error("Reconstruction failed -" + " [ArticleId " + result.getInt(5) + ", RevisionId "+ result.getInt(4)+ ", RevisionCounter "+ result.getInt(3)+ "]"); _EL_         return null; _EL_       } _EL_       previousRevision=currentRevision; _EL_       revision.setRevisionText(currentRevision); _EL_     } _EL_  else { _EL_       if (revApi == null) { _EL_         revApi=new RevisionApi(config); _EL_       } _EL_       revision.setRevisionApi(revApi); _EL_     } _EL_     revision.setRevisionID(result.getInt(4)); _EL_     revision.setArticleID(articleID); _EL_     revision.setTimeStamp(new Timestamp(result.getLong(6))); _EL_     revision.setFullRevisionID(result.getInt(7)); _EL_     revision.setContributorName(result.getString(8)); _EL_     revision.setContributorId(result.getInt(9)); _EL_     revision.setComment(result.getString(10)); _EL_     revision.setMinor(result.getBoolean(11)); _EL_     revision.setContributorIsRegistered(result.getBoolean(12)); _EL_     return revision; _EL_   } _EL_  catch (  DecodingException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ catch (  SQLException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ catch (  IOException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ catch (  WikiApiException e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_ } _EL_ ', 'public final static void closeEL(final OutputStream os){ _EL_   try { _EL_     if (os != null)     os.close(); _EL_   } _EL_  catch (  final Throwable e) { _EL_   } _EL_ } _EL_ ', 'public void addSearchListener(SearchListener l){ _EL_   m_SearchListeners.add(l); _EL_ } _EL_ ', 'public boolean isSingleAttributeContainer(){ _EL_   return false; _EL_ } _EL_ ', 'public CacheSpan touch(){ _EL_   long now=System.currentTimeMillis(); _EL_   File newCacheFile=getCacheFileName(file.getParentFile(),key,position,now); _EL_   file.renameTo(newCacheFile); _EL_   return CacheSpan.createCacheEntry(key,position,now,newCacheFile); _EL_ } _EL_ ', 'public void open(File file) throws IOException { _EL_   checkAWTPermission(); _EL_   checkExec(); _EL_   checkActionSupport(Action.OPEN); _EL_   checkFileValidation(file); _EL_   peer.open(file); _EL_ } _EL_ ', '@Override public void toggleSelection(T photo){ _EL_   if (selectedPhotos.contains(photo)) { _EL_     selectedPhotos.remove(photo); _EL_   } _EL_  else { _EL_     selectedPhotos.add(photo); _EL_   } _EL_ } _EL_ ', 'public byte map(byte src){ _EL_   char c=map((char)src); _EL_   if (c < Byte.MIN_VALUE || c > Byte.MAX_VALUE) { _EL_     return 0; _EL_   } _EL_   return (byte)c; _EL_ } _EL_ ', 'public Object produceEvent() throws InvocationTargetException { _EL_   if (!valid) { _EL_     throw new IllegalStateException(toString() + " has been invalidated and can no longer produce events."); _EL_   } _EL_   try { _EL_     return method.invoke(target); _EL_   } _EL_  catch (  IllegalAccessException e) { _EL_     throw new AssertionError(e); _EL_   } _EL_ catch (  InvocationTargetException e) { _EL_     if (e.getCause() instanceof Error) { _EL_       throw (Error)e.getCause(); _EL_     } _EL_     throw e; _EL_   } _EL_ } _EL_ ', 'public String wrapIfKeywordOrBuiltIn(String name){ _EL_   if (KEYWORD_BUILT_IN_SET.contains(name)) { _EL_     return name + "_"; _EL_   } _EL_   return name; _EL_ } _EL_ ', 'public IssueMatcher add(){ _EL_   IssueMatcher issueMatcher=new IssueMatcher(); _EL_   issueMatchers.add(issueMatcher); _EL_   return issueMatcher; _EL_ } _EL_ ', 'public void removePropertyChangeListener(IPropertyChangeListener listener){ _EL_   listeners.remove(listener); _EL_ } _EL_ ', 'public DeferredImageReplacedElement(ImageResource imageResource,RepaintListener repaintListener,int w,int h){ _EL_   this._imageResource=imageResource; _EL_   _loaded=false; _EL_   this.repaintListener=repaintListener; _EL_   if (w == -1 && h == -1) { _EL_     _doScaleImage=false; _EL_     _targetHeight=1; _EL_     _targetWidth=1; _EL_   } _EL_  else { _EL_     _doScaleImage=true; _EL_     _targetHeight=Math.max(1,h); _EL_     _targetWidth=Math.max(1,w); _EL_   } _EL_   _image=ImageUtil.createCompatibleBufferedImage(_targetWidth,_targetHeight); _EL_ } _EL_ ', 'public boolean startsWith(Name n){ _EL_   if (n instanceof CompoundName) { _EL_     return (impl.startsWith(n.size(),n.getAll())); _EL_   } _EL_  else { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public ParameterizedGenericMethodBinding(MethodBinding originalMethod,TypeBinding[] typeArguments,LookupEnvironment environment){ _EL_   this.environment=environment; _EL_   this.modifiers=originalMethod.modifiers; _EL_   this.selector=originalMethod.selector; _EL_   this.declaringClass=originalMethod.declaringClass; _EL_   this.typeVariables=Binding.NO_TYPE_VARIABLES; _EL_   this.typeArguments=typeArguments; _EL_   this.isRaw=false; _EL_   this.tagBits=originalMethod.tagBits; _EL_   this.originalMethod=originalMethod; _EL_   this.parameters=Scope.substitute(this,originalMethod.parameters); _EL_   this.returnType=Scope.substitute(this,originalMethod.returnType); _EL_   this.thrownExceptions=Scope.substitute(this,originalMethod.thrownExceptions); _EL_   if (this.thrownExceptions == null)   this.thrownExceptions=Binding.NO_EXCEPTIONS; _EL_   checkMissingType: { _EL_     if ((this.tagBits & TagBits.HasMissingType) != 0)     break checkMissingType; _EL_     if ((this.returnType.tagBits & TagBits.HasMissingType) != 0) { _EL_       this.tagBits|=TagBits.HasMissingType; _EL_       break checkMissingType; _EL_     } _EL_     for (int i=0, max=this.parameters.length; i < max; i++) { _EL_       if ((this.parameters[i].tagBits & TagBits.HasMissingType) != 0) { _EL_         this.tagBits|=TagBits.HasMissingType; _EL_         break checkMissingType; _EL_       } _EL_     } _EL_     for (int i=0, max=this.thrownExceptions.length; i < max; i++) { _EL_       if ((this.thrownExceptions[i].tagBits & TagBits.HasMissingType) != 0) { _EL_         this.tagBits|=TagBits.HasMissingType; _EL_         break checkMissingType; _EL_       } _EL_     } _EL_   } _EL_   this.wasInferred=true; _EL_ } _EL_ ', 'public InternalListener(final ConfigManager configFile){ _EL_   this.configFile=configFile; _EL_ } _EL_ ', 'public byte[] sign(byte[] hash){ _EL_   ECDSASigner signer=new ECDSASigner(new HMacDSAKCalculator(new SHA256Digest())); _EL_   signer.init(true,new ECPrivateKeyParameters(priv,domain)); _EL_   BigInteger[] signature=signer.generateSignature(hash); _EL_   ByteArrayOutputStream baos=new ByteArrayOutputStream(); _EL_   try { _EL_     DERSequenceGenerator seq=new DERSequenceGenerator(baos); _EL_     seq.addObject(new ASN1Integer(signature[0])); _EL_     seq.addObject(new ASN1Integer(toCanonicalS(signature[1]))); _EL_     seq.close(); _EL_     return baos.toByteArray(); _EL_   } _EL_  catch (  IOException e) { _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public TimePeriod(Date startTime,Date endTime){ _EL_   if (startTime != null && endTime != null && !endTime.after(startTime)) { _EL_     throw new IllegalArgumentException("EndTime: " + endTime + " is not after startTime: "+ startTime); _EL_   } _EL_   this.startTime=startTime; _EL_   this.endTime=endTime; _EL_ } _EL_ ', 'JMenu createEditMenu(){ _EL_   JMenu editMenu=new JMenu("Edit"); _EL_   editMenu.add(actionManager.getCutAction()); _EL_   editMenu.add(actionManager.getCopyAction()); _EL_   editMenu.add(actionManager.getPasteAction()); _EL_   editMenu.add(actionManager.getDeleteAction()); _EL_   editMenu.addSeparator(); _EL_   editMenu.add(actionManager.getClearSourceNeuronsAction()); _EL_   editMenu.add(actionManager.getSetSourceNeuronsAction()); _EL_   editMenu.add(actionManager.getConnectionMenu()); _EL_   editMenu.add(actionManager.getAddSynapseGroupAction()); _EL_   editMenu.addSeparator(); _EL_   editMenu.add(actionManager.getRandomizeObjectsAction()); _EL_   editMenu.add(actionManager.getShowAdjustSynapsesDialog()); _EL_   editMenu.addSeparator(); _EL_   editMenu.add(actionManager.getLayoutMenu()); _EL_   editMenu.add(actionManager.getGroupMenu()); _EL_   editMenu.addSeparator(); _EL_   editMenu.add(createAlignMenu()); _EL_   editMenu.add(createSpacingMenu()); _EL_   editMenu.addSeparator(); _EL_   editMenu.add(actionManager.getSetNeuronPropertiesAction()); _EL_   editMenu.add(actionManager.getSetSynapsePropertiesAction()); _EL_   editMenu.addSeparator(); _EL_   editMenu.add(createSelectionMenu()); _EL_   return editMenu; _EL_ } _EL_ ', 'public void removeHistoryChangedListener(HistoryChangedListener l){ _EL_   m_HistoryChangedListeners.remove(l); _EL_ } _EL_ ', 'public void currentState(long state,Model currentModel){ _EL_   currentState=state; _EL_   if (loggers != null) { _EL_     for (    Logger logger : loggers) { _EL_       logger.log(state); _EL_     } _EL_   } _EL_ } _EL_ ', 'public boolean isSigned(){ _EL_   return signed; _EL_ } _EL_ ', 'public Object parseText(String text){ _EL_   if (text == null || text.length() == 0) { _EL_     throw new IllegalArgumentException("The JSON input text should neither be null nor empty."); _EL_   } _EL_   return parse(new LineColumnReader(new StringReader(text))); _EL_ } _EL_ ', 'protected void addChooserFilters(JFileChooser chooser){ _EL_   javax.swing.filechooser.FileNameExtensionFilter filter; _EL_   chooser.addChoosableFileFilter(filter=new javax.swing.filechooser.FileNameExtensionFilter("Intel Hex Format Firmware (*.hex)","hex")); _EL_   chooser.setFileFilter(filter); _EL_ } _EL_ ', 'public String peek(){ _EL_   String result=null; _EL_   if (isEmpty()) { _EL_     return null; _EL_   } _EL_  else { _EL_     int cachedCurrentIndex=currentIndex; _EL_     if (isEatingBlocksOfDelimiters) { _EL_       trimStartingDelimiters(); _EL_     } _EL_     int nearestDelimeter=-1; _EL_     for (int i=0; i < delimiters.length(); i++) { _EL_       int delimiter=source.indexOf(delimiters.charAt(i),currentIndex); _EL_       if (nearestDelimeter == -1 || delimiter != -1 && delimiter < nearestDelimeter) { _EL_         nearestDelimeter=delimiter; _EL_       } _EL_     } _EL_     if (nearestDelimeter == -1) { _EL_       result=source.substring(currentIndex); _EL_     } _EL_  else { _EL_       result=source.substring(currentIndex,nearestDelimeter); _EL_     } _EL_     currentIndex=cachedCurrentIndex; _EL_   } _EL_   return result; _EL_ } _EL_ ', 'private void eliminarUsuariosOrgano(GestionOrganizacionBI organizacionBI,OrganizacionVO organizacionVO){ _EL_   organizacionBI.eliminarUsuariosOrgano(organizacionVO.getId()); _EL_ } _EL_ ', 'private static void addPreviousLayer(List<List<Neuron>> layers,List<Neuron> sourceLayer,List<Neuron> layerToCheck){ _EL_   final int MAXLAYERS=100; _EL_   Set<Neuron> newLayerTemp=new HashSet<Neuron>(); _EL_   boolean theNextLayerIsTheSourceLayer=false; _EL_   for (  Neuron neuron : layerToCheck) { _EL_     for (    Synapse synapse : neuron.getFanIn()) { _EL_       Neuron sourceNeuron=synapse.getSource(); _EL_       if (sourceLayer.contains(sourceNeuron)) { _EL_         theNextLayerIsTheSourceLayer=true; _EL_       } _EL_       if (sourceNeuron == neuron) { _EL_         continue; _EL_       } _EL_       newLayerTemp.add(synapse.getSource()); _EL_     } _EL_   } _EL_   if ((theNextLayerIsTheSourceLayer) || (newLayerTemp.size() == 0) || (layers.size() > MAXLAYERS)) { _EL_     layers.add(sourceLayer); _EL_   } _EL_  else { _EL_     List<Neuron> newLayer=new ArrayList<Neuron>(newLayerTemp); _EL_     Collections.sort(newLayer,OrientationComparator.X_ORDER); _EL_     layers.add(newLayer); _EL_     addPreviousLayer(layers,sourceLayer,newLayer); _EL_   } _EL_ } _EL_ ', 'public static int findNonwhitespaceCharacter(String s,int index){ _EL_   int sLength=s.length(); _EL_   while (index < sLength && Character.isWhitespace(s.charAt(index))) { _EL_     index++; _EL_   } _EL_   return index; _EL_ } _EL_ ', 'public void readContent() throws IOException { _EL_   if (offset + length > buffer.length) { _EL_     throw new ASN1Exception("Unexpected end of encoding"); _EL_   } _EL_   if (in == null) { _EL_     offset+=length; _EL_   } _EL_  else { _EL_     int bytesRead=in.read(buffer,offset,length); _EL_     if (bytesRead != length) { _EL_       int c=bytesRead; _EL_       do { _EL_         if (c < 1 || bytesRead > length) { _EL_           throw new ASN1Exception("Failed to read encoded content"); _EL_         } _EL_         c=in.read(buffer,offset + bytesRead,length - bytesRead); _EL_         bytesRead+=c; _EL_       } _EL_  while (bytesRead != length); _EL_     } _EL_     offset+=length; _EL_   } _EL_ } _EL_ ', 'public Primitive(Object value){ _EL_   this.value=value; _EL_   type=(value != null) ? Utilities.getPrimitiveType(value.getClass()) : null; _EL_   if (type == null) { _EL_     throw new IllegalArgumentException("value is not a primitive: " + value); _EL_   } _EL_ } _EL_ ', 'public void createCashBasedJournalEntriesAndReversalsForSavingsTax(final Office office,final String currencyCode,final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeDebited,final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeCredited,final Long savingsProductId,final Long paymentTypeId,final Long savingsId,final String transactionId,final Date transactionDate,final BigDecimal amount,final Boolean isReversal,final List<TaxPaymentDTO> taxDetails){ _EL_   for (  TaxPaymentDTO taxPaymentDTO : taxDetails) { _EL_     if (taxPaymentDTO.getAmount() != null) { _EL_       if (taxPaymentDTO.getCreditAccountId() == null) { _EL_         createCashBasedCreditJournalEntriesAndReversalsForSavings(office,currencyCode,accountTypeToBeCredited.getValue(),savingsProductId,paymentTypeId,savingsId,transactionId,transactionDate,taxPaymentDTO.getAmount(),isReversal); _EL_       } _EL_  else { _EL_         createCashBasedCreditJournalEntriesAndReversalsForSavings(office,currencyCode,taxPaymentDTO.getCreditAccountId(),savingsId,transactionId,transactionDate,taxPaymentDTO.getAmount(),isReversal); _EL_       } _EL_     } _EL_   } _EL_   createCashBasedDebitJournalEntriesAndReversalsForSavings(office,currencyCode,accountTypeToBeDebited.getValue(),savingsProductId,paymentTypeId,savingsId,transactionId,transactionDate,amount,isReversal); _EL_ } _EL_ ', 'public int read(ByteBuf dst,int dstStart,int dstLength) throws IOException { _EL_   final int remaining=(int)Math.min(this.length - this.position,Integer.MAX_VALUE); _EL_   final int read=Math.min(remaining,dstLength); _EL_   final int bufferPosition=checkOffset(position,read); _EL_   final long srcAddress=PlatformDependent.directBufferAddress(lastMapped) + bufferPosition; _EL_   if (dst.hasMemoryAddress()) { _EL_     final long dstAddress=dst.memoryAddress() + dstStart; _EL_     PlatformDependent.copyMemory(srcAddress,dstAddress,read); _EL_   } _EL_  else   if (dst.hasArray()) { _EL_     final byte[] dstArray=dst.array(); _EL_     PlatformDependent.copyMemory(srcAddress,dstArray,dstStart,read); _EL_   } _EL_  else { _EL_     throw new IllegalArgumentException("unsupported byte buffer"); _EL_   } _EL_   position+=read; _EL_   return read; _EL_ } _EL_ ', 'public static Calendar clearTime(final Calendar self){ _EL_   clearTimeCommon(self); _EL_   return self; _EL_ } _EL_ ', 'public double pdf(int k){ _EL_   return Math.exp(k * Math.log(this.mean) - Arithmetic.logFactorial(k) - this.mean); _EL_ } _EL_ ', 'public static void appendUnpaddedInteger(StringBuffer buf,long value){ _EL_   int intValue=(int)value; _EL_   if (intValue == value) { _EL_     appendUnpaddedInteger(buf,intValue); _EL_   } _EL_  else { _EL_     buf.append(Long.toString(value)); _EL_   } _EL_ } _EL_ ', '@Override public void handleKey(int virtualKeyCode,int transitionState,char keyChar){ _EL_   switchControlKeys(virtualKeyCode,transitionState); _EL_   inputBuffer.add(new GlobalKeyEvent(this,virtualKeyCode,transitionState,keyChar,menuPressed,shiftPressed,controlPressed,extendedKey)); _EL_ } _EL_ ', 'public int hashCode(){ _EL_   return alignment ^ leader ^ Math.round(position); _EL_ } _EL_ ', 'public static String stripLeadingPeriod(String s){ _EL_   if (null != s && s.startsWith("."))   return s.substring(Math.min(1,s.length()),s.length()); _EL_   return s; _EL_ } _EL_ ', 'public static boolean isRequiredConfigDirectory(final String directory){ _EL_   return requiredConfigDirectories.contains(directory); _EL_ } _EL_ ', 'private void updateBaseMatrix(Drawable d){ _EL_   ImageView imageView=getImageView(); _EL_   if (null == imageView || null == d) { _EL_     return; _EL_   } _EL_   final float viewWidth=getImageViewWidth(imageView); _EL_   final float viewHeight=getImageViewHeight(imageView); _EL_   final int drawableWidth=d.getIntrinsicWidth(); _EL_   final int drawableHeight=d.getIntrinsicHeight(); _EL_   mBaseMatrix.reset(); _EL_   final float widthScale=viewWidth / drawableWidth; _EL_   final float heightScale=viewHeight / drawableHeight; _EL_   if (mScaleType == ScaleType.CENTER) { _EL_     mBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F,(viewHeight - drawableHeight) / 2F); _EL_   } _EL_  else   if (mScaleType == ScaleType.CENTER_CROP) { _EL_     float scale=Math.max(widthScale,heightScale); _EL_     mBaseMatrix.postScale(scale,scale); _EL_     mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F); _EL_   } _EL_  else   if (mScaleType == ScaleType.CENTER_INSIDE) { _EL_     float scale=Math.min(1.0f,Math.min(widthScale,heightScale)); _EL_     mBaseMatrix.postScale(scale,scale); _EL_     mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F); _EL_   } _EL_  else { _EL_     RectF mTempSrc=new RectF(0,0,drawableWidth,drawableHeight); _EL_     RectF mTempDst=new RectF(0,0,viewWidth,viewHeight); _EL_ switch (mScaleType) { _EL_ case FIT_CENTER: _EL_       mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.CENTER); _EL_     break; _EL_ case FIT_START: _EL_   mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.START); _EL_ break; _EL_ case FIT_END: _EL_ mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.END); _EL_ break; _EL_ case FIT_XY: _EL_ mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.FILL); _EL_ break; _EL_ default : _EL_ break; _EL_ } _EL_ } _EL_ resetMatrix(); _EL_ } _EL_ ', 'private void cleanUpLabels(){ _EL_   int id=0; _EL_   for (Iterator<Label> i=labels.iterator(); i.hasNext(); ) { _EL_     Label label=i.next(); _EL_     if (label.isEmpty()) { _EL_       i.remove(); _EL_     } _EL_  else { _EL_       label.compact(); _EL_       label.id=id++; _EL_     } _EL_   } _EL_ } _EL_ ', '@Override default CompletableFuture<OptionalLong> maxLong(final ToLongFunction<? super T> fn){ _EL_   return CompletableFuture.supplyAsync(null,getExec()); _EL_ } _EL_ ', 'public static char[] createArraySignature(char[] typeSignature,int arrayCount){ _EL_   if (arrayCount == 0)   return typeSignature; _EL_   int sigLength=typeSignature.length; _EL_   char[] result=new char[arrayCount + sigLength]; _EL_   for (int i=0; i < arrayCount; i++) { _EL_     result[i]=C_ARRAY; _EL_   } _EL_   System.arraycopy(typeSignature,0,result,arrayCount,sigLength); _EL_   return result; _EL_ } _EL_ ', 'protected void increaseBufferSize(int minSize){ _EL_   int newLength=buf.length; _EL_   while (newLength < minSize)   newLength*=2; _EL_   double[] newBuf=new double[newLength]; _EL_   int avail=currentlyInBuffer(); _EL_   System.arraycopy(buf,readPos,newBuf,0,avail); _EL_   buf=newBuf; _EL_   readPos=0; _EL_   writePos=avail; _EL_ } _EL_ ', 'private void handleEnumeratedAttribute(Instances trainInstances) throws Exception { _EL_   Instance instance; _EL_   m_distribution=new Distribution(m_complexityIndex,trainInstances.numClasses()); _EL_   Enumeration<Instance> enu=trainInstances.enumerateInstances(); _EL_   while (enu.hasMoreElements()) { _EL_     instance=enu.nextElement(); _EL_     if (!instance.isMissing(m_attIndex)) { _EL_       m_distribution.add((int)instance.value(m_attIndex),instance); _EL_     } _EL_   } _EL_   if (m_distribution.check(m_minNoObj)) { _EL_     m_numSubsets=m_complexityIndex; _EL_     m_infoGain=infoGainCrit.splitCritValue(m_distribution,m_sumOfWeights); _EL_     m_gainRatio=gainRatioCrit.splitCritValue(m_distribution,m_sumOfWeights,m_infoGain); _EL_   } _EL_ } _EL_ ', 'private boolean isLoadMore(){ _EL_   return mNextLoadEnable && pageSize != -1 && mRequestLoadMoreListener != null && mData.size() >= pageSize; _EL_ } _EL_ ', 'private void addWorkerIfNecessary(){ _EL_   if (idleWorkers.get() == 0) { _EL_ synchronized (workers) { _EL_       if (workers.isEmpty() || (idleWorkers.get() == 0)) { _EL_         addWorker(); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', '@Override protected Node removeFromFrontier(){ _EL_   Node result=frontier.remove(); _EL_   frontierNodeLookup.remove(result.getState()); _EL_   explored.add(result.getState()); _EL_   updateMetrics(frontier.size()); _EL_   return result; _EL_ } _EL_ ', 'public static String encode(byte[] data){ _EL_   int start=0; _EL_   int len=data.length; _EL_   StringBuffer buf=new StringBuffer(data.length * 3 / 2); _EL_   int end=len - 3; _EL_   int i=start; _EL_   int n=0; _EL_   while (i <= end) { _EL_     int d=((((int)data[i]) & 0x0ff) << 16) | ((((int)data[i + 1]) & 0x0ff) << 8) | (((int)data[i + 2]) & 0x0ff); _EL_     buf.append(legalChars[(d >> 18) & 63]); _EL_     buf.append(legalChars[(d >> 12) & 63]); _EL_     buf.append(legalChars[(d >> 6) & 63]); _EL_     buf.append(legalChars[d & 63]); _EL_     i+=3; _EL_     if (n++ >= 14) { _EL_       n=0; _EL_     } _EL_   } _EL_   if (i == start + len - 2) { _EL_     int d=((((int)data[i]) & 0x0ff) << 16) | ((((int)data[i + 1]) & 255) << 8); _EL_     buf.append(legalChars[(d >> 18) & 63]); _EL_     buf.append(legalChars[(d >> 12) & 63]); _EL_     buf.append(legalChars[(d >> 6) & 63]); _EL_     buf.append("="); _EL_   } _EL_  else   if (i == start + len - 1) { _EL_     int d=(((int)data[i]) & 0x0ff) << 16; _EL_     buf.append(legalChars[(d >> 18) & 63]); _EL_     buf.append(legalChars[(d >> 12) & 63]); _EL_     buf.append("=="); _EL_   } _EL_   return buf.toString(); _EL_ } _EL_ ', 'public static Font createBitmapFont(String name,Image bitmap,int[] cutOffsets,int[] charWidth,String charsets){ _EL_   Font f=createBitmapFont(bitmap,cutOffsets,charWidth,charsets); _EL_   bitmapCache.put(name,f); _EL_   return f; _EL_ } _EL_ ', 'static boolean isTenured(MemoryPoolMXBean memoryPoolMXBean){ _EL_   if (memoryPoolMXBean.getType() != MemoryType.HEAP) { _EL_     return false; _EL_   } _EL_   String name=memoryPoolMXBean.getName(); _EL_   return name.equals("CMS Old Gen") || name.equals("PS Old Gen") || name.equals("G1 Old Gen")|| name.equals("Old Space")|| name.equals("Tenured Gen")|| name.equals("Java heap")|| name.equals("GenPauseless Old Gen")|| (HEAP_POOL != null && name.equals(HEAP_POOL)); _EL_ } _EL_ ', 'public String toSimpleString(){ _EL_   StringBuffer buffer=new StringBuffer(); _EL_   buffer.append("DataSet, label: " + (mLabel == null ? "" : mLabel) + ", entries: "+ mYVals.size()+ "\\n"); _EL_   return buffer.toString(); _EL_ } _EL_ ', 'public static <T>T interpreterOnly(Callable<T> callable) throws Exception { _EL_   return callable.call(); _EL_ } _EL_ ', 'public static List<String> tokenize(String arguments,boolean stringify){ _EL_   LinkedList<String> argList=new LinkedList<String>(); _EL_   StringBuilder currArg=new StringBuilder(); _EL_   boolean escaped=false; _EL_   int state=NO_TOKEN_STATE; _EL_   int len=arguments.length(); _EL_   for (int i=0; i < len; i++) { _EL_     char c=arguments.charAt(i); _EL_     if (escaped) { _EL_       escaped=false; _EL_       currArg.append(c); _EL_     } _EL_  else { _EL_ switch (state) { _EL_ case SINGLE_QUOTE_STATE: _EL_         if (c == \'\\\'\') { _EL_           state=NORMAL_TOKEN_STATE; _EL_         } _EL_  else { _EL_           currArg.append(c); _EL_         } _EL_       break; _EL_ case DOUBLE_QUOTE_STATE: _EL_     if (c == \'"\') { _EL_       state=NORMAL_TOKEN_STATE; _EL_     } _EL_  else     if (c == \'\\\\\') { _EL_       i++; _EL_       char next=arguments.charAt(i); _EL_       if (next == \'"\' || next == \'\\\\\') { _EL_         currArg.append(next); _EL_       } _EL_  else { _EL_         currArg.append(c); _EL_         currArg.append(next); _EL_       } _EL_     } _EL_  else { _EL_       currArg.append(c); _EL_     } _EL_   break; _EL_ case NO_TOKEN_STATE: _EL_ case NORMAL_TOKEN_STATE: _EL_ switch (c) { _EL_ case \'\\\\\': _EL_   escaped=true; _EL_ state=NORMAL_TOKEN_STATE; _EL_ break; _EL_ case \'\\\'\': _EL_ state=SINGLE_QUOTE_STATE; _EL_ break; _EL_ case \'"\': _EL_ state=DOUBLE_QUOTE_STATE; _EL_ break; _EL_ default : _EL_ if (!Character.isWhitespace(c)) { _EL_ currArg.append(c); _EL_ state=NORMAL_TOKEN_STATE; _EL_ } _EL_  else if (state == NORMAL_TOKEN_STATE) { _EL_ argList.add(currArg.toString()); _EL_ currArg=new StringBuilder(); _EL_ state=NO_TOKEN_STATE; _EL_ } _EL_ } _EL_ break; _EL_ default : _EL_ throw new IllegalStateException("ArgumentTokenizer state " + state + " is invalid!"); _EL_ } _EL_ } _EL_ } _EL_ if (escaped) { _EL_ currArg.append(\'\\\\\'); _EL_ argList.add(currArg.toString()); _EL_ } _EL_  else if (state != NO_TOKEN_STATE) { _EL_ argList.add(currArg.toString()); _EL_ } _EL_ if (stringify) { _EL_ for (int i=0; i < argList.size(); i++) { _EL_ argList.set(i,"\\"" + _escapeQuotesAndBackslashes(argList.get(i)) + "\\""); _EL_ } _EL_ } _EL_ return argList; _EL_ } _EL_ ', 'private void addSelectorForProtocol(Properties settings,String protocol,ProtocolDispatchSelector ps){ _EL_   String proxy=settings.getProperty(protocol); _EL_   if (proxy != null) { _EL_     FixedProxySelector protocolSelector=ProxyUtil.parseProxySettings(proxy); _EL_     ps.setSelector(protocol,protocolSelector); _EL_   } _EL_ } _EL_ ', 'public void addHeader(String name,String value){ _EL_   header.put(name,value); _EL_ } _EL_ ', 'private void createSceneVao(){ _EL_   int vao=glGenVertexArrays(); _EL_   int vbo=glGenBuffers(); _EL_   glBindVertexArray(vao); _EL_   glBindBuffer(GL_ARRAY_BUFFER,vbo); _EL_   ByteBuffer bb=BufferUtils.createByteBuffer(boxes.length * 4 * (3 + 3)* 6* 6); _EL_   FloatBuffer fv=bb.asFloatBuffer(); _EL_   for (int i=0; i < boxes.length; i+=2) { _EL_     DemoUtils.triangulateBox(boxes[i],boxes[i + 1],fv); _EL_   } _EL_   glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW); _EL_   glEnableVertexAttribArray(0); _EL_   glVertexAttribPointer(0,3,GL_FLOAT,false,4 * (3 + 3),0L); _EL_   glEnableVertexAttribArray(1); _EL_   glVertexAttribPointer(1,3,GL_FLOAT,false,4 * (3 + 3),4 * 3); _EL_   glBindBuffer(GL_ARRAY_BUFFER,0); _EL_   glBindVertexArray(0); _EL_   this.vaoScene=vao; _EL_ } _EL_ ', 'public boolean contains(File file,String fileContent){ _EL_   if (exists(file)) { _EL_     String content=readFileContent(file); _EL_     return content != null && content.equals(fileContent); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'protected void updateReceiptStatusWhenCancelled(final String receiptNumber){ _EL_   final List<EgdmCollectedReceipt> egdmCollectedReceipts=demandGenericDAO.getAllEgdmCollectedReceipts(receiptNumber); _EL_   if (egdmCollectedReceipts != null && !egdmCollectedReceipts.isEmpty())   for (  final EgdmCollectedReceipt egDmCollectedReceipt : egdmCollectedReceipts) { _EL_     egDmCollectedReceipt.setStatus(DemandConstants.CANCELLED_RECEIPT); _EL_     egDmCollectedReceipt.setUpdatedTime(new Date()); _EL_     egdmCollectedReceiptDAO.update(egDmCollectedReceipt); _EL_   } _EL_ } _EL_ ', 'public void addAnimation(int id,Animation... animations){ _EL_   if (mAnimations.get(id) == null) { _EL_     mAnimations.put(id,new ArrayList<Animation>(animations.length)); _EL_     if (id != Animation.FULL_PAGE) { _EL_       mAnimatedViews.add(id); _EL_     } _EL_   } _EL_   ArrayList<Animation> anims=mAnimations.get(id); _EL_   Collections.addAll(anims,animations); _EL_ } _EL_ ', '@Override protected void initialize(){ _EL_   List<String> words; _EL_   super.initialize(); _EL_   m_Words=new HashSet<String>(); _EL_   words=read(); _EL_   for (  String word : words) { _EL_     if (!word.startsWith("#"))     m_Words.add(word); _EL_   } _EL_ } _EL_ ', 'protected boolean existsInRange(String x,int minLength,int maxLength){ _EL_   x=StringUtils.trimToNull(x); _EL_   return x != null && x.length() >= minLength && x.length() <= maxLength; _EL_ } _EL_ ', 'public synchronized void unwatch(String pathName) throws IOException { _EL_   unregisterAll(Paths.get(pathName)); _EL_ } _EL_ ', 'public Criteria addProperty(String name,String value,Operator operator){ _EL_   properties.add(new PropertyCriteria(name,value,operator)); _EL_   return this; _EL_ } _EL_ ', 'public static void putString2bytes(byte[] destbytes,String srcString,int destOffset,int srcOffset,int count){ _EL_   for (int i=0; i < count; i++) { _EL_     destbytes[count + i]=srcString.getBytes()[i]; _EL_   } _EL_ } _EL_ ', 'public final V updateAndGet(UnaryOperator<V> updateFunction){ _EL_   V prev, next; _EL_   do { _EL_     prev=get(); _EL_     next=updateFunction.apply(prev); _EL_   } _EL_  while (!compareAndSet(prev,next)); _EL_   return next; _EL_ } _EL_ ', 'public void close(){ _EL_   stopTimers(); _EL_   closed=true; _EL_   window.dispose(); _EL_   if (listener != null) { _EL_     listener.notificationRemoved(this); _EL_   } _EL_   if (activityListener != null) { _EL_     ActivityTracker.removeActivityListener(activityListener); _EL_   } _EL_ } _EL_ ', 'protected boolean shouldMove(final ILoadBalancerService loadBalancerService){ _EL_   if (loadBalancerService == null)   throw new IllegalArgumentException(); _EL_   final boolean highlyUtilizedService; _EL_   try { _EL_     final UUID serviceUUID=resourceManager.getDataServiceUUID(); _EL_     highlyUtilizedService=loadBalancerService.isHighlyUtilizedDataService(serviceUUID); _EL_   } _EL_  catch (  Exception ex) { _EL_     log.warn("Could not determine if this data service is highly utilized"); _EL_     return false; _EL_   } _EL_   if (!highlyUtilizedService) { _EL_     if (log.isInfoEnabled())     log.info("Service is not highly utilized."); _EL_     return false; _EL_   } _EL_   final ResourceScores resourceScores=resourceManager.getResourceScores(); _EL_   final boolean shouldMove=(resourceScores.percentCPUTime >= resourceManager.movePercentCpuTimeThreshold) || (resourceScores.majorPageFaultsPerSec > 20) || (resourceScores.dataDirBytesFree < Bytes.gigabyte * 5)|| (resourceScores.dataDirBytesFree < Bytes.gigabyte * .5); _EL_   return shouldMove; _EL_ } _EL_ ', 'private static Object[] convertThrowableMessages(final Object[] args){ _EL_   if (args != null) { _EL_     for (int i=0; i < args.length; i++) { _EL_       if (args[i] instanceof Throwable) { _EL_         Throwable t=(Throwable)args[i]; _EL_         if (t.getMessage() != null) { _EL_           args[i]=t.getMessage(); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return args; _EL_ } _EL_ ', 'public RAFDirectory(Path path,LockFactory lockFactory) throws IOException { _EL_   super(path,lockFactory); _EL_   path.toFile(); _EL_ } _EL_ ', 'public static void addMinutesToList(Context context,ArrayList<Integer> values,ArrayList<String> labels,int minutes){ _EL_   int index=values.indexOf(minutes); _EL_   if (index != -1) { _EL_     return; _EL_   } _EL_   String label=constructReminderLabel(context,minutes,false); _EL_   int len=values.size(); _EL_   for (int i=0; i < len; i++) { _EL_     if (minutes < values.get(i)) { _EL_       values.add(i,minutes); _EL_       labels.add(i,label); _EL_       return; _EL_     } _EL_   } _EL_   values.add(minutes); _EL_   labels.add(len,label); _EL_ } _EL_ ', 'void recomposeVariables(ElemVariable elemVar){ _EL_   if (getVariableOrParamComposed(elemVar.getName()) == null) { _EL_     elemVar.setIsTopLevel(true); _EL_     elemVar.setIndex(m_variables.size()); _EL_     m_variables.addElement(elemVar); _EL_   } _EL_ } _EL_ ', 'public void propertyChange(PropertyChangeEvent e){ _EL_   String propertyName=e.getPropertyName(); _EL_   if (propertyName == "visible") { _EL_     if (e.getOldValue() == Boolean.FALSE && e.getNewValue() == Boolean.TRUE) { _EL_       handlePopupIsVisibleEvent(true); _EL_     } _EL_  else     if (e.getOldValue() == Boolean.TRUE && e.getNewValue() == Boolean.FALSE) { _EL_       handlePopupIsVisibleEvent(false); _EL_     } _EL_   } _EL_ } _EL_ ', 'private static int[] maybeSort(int[] values){ _EL_   if (!isSorted(values,0,false)) { _EL_     values=values.clone(); _EL_     Arrays.sort(values); _EL_   } _EL_   return values; _EL_ } _EL_ ', 'public int executeUpdate(String sql) throws GenericDataSourceException { _EL_   Statement stmt=null; _EL_   try { _EL_     stmt=_connection.createStatement(); _EL_     return stmt.executeUpdate(sql); _EL_   } _EL_  catch (  SQLException sqle) { _EL_     throw new GenericDataSourceException("SQL Exception while executing the following:" + _sql,sqle); _EL_   } _EL_  finally { _EL_     if (stmt != null) { _EL_       try { _EL_         stmt.close(); _EL_       } _EL_  catch (      SQLException sqle) { _EL_         Debug.logWarning("Unable to close \'statement\': " + sqle.getMessage(),module); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public void addIndices(Collection<IIndex> indices){ _EL_   for (Iterator<IIndex> it=indices.iterator(); it.hasNext(); ) { _EL_     addIndex((IIndex)it.next()); _EL_   } _EL_ } _EL_ ', 'public static List<ObjectModel> loadJsonStream(InputStream input){ _EL_   List<ObjectModel> models=new ArrayList<>(); _EL_   Reader reader=new InputStreamReader(input); _EL_   ObjectModel[] objectModels=GSON.fromJson(reader,ObjectModel[].class); _EL_   for (  ObjectModel objectModel : objectModels) { _EL_     models.add(objectModel); _EL_   } _EL_   return models; _EL_ } _EL_ ', 'protected MultistepExprHolder createMultistepExprList(Vector paths){ _EL_   MultistepExprHolder first=null; _EL_   int n=paths.size(); _EL_   for (int i=0; i < n; i++) { _EL_     ExpressionOwner eo=(ExpressionOwner)paths.elementAt(i); _EL_     if (null == eo)     continue; _EL_     LocPathIterator lpi=(LocPathIterator)eo.getExpression(); _EL_     int numPaths=countSteps(lpi); _EL_     if (numPaths > 1) { _EL_       if (null == first)       first=new MultistepExprHolder(eo,numPaths,null); _EL_  else       first=first.addInSortedOrder(eo,numPaths); _EL_     } _EL_   } _EL_   if ((null == first) || (first.getLength() <= 1))   return null; _EL_  else   return first; _EL_ } _EL_ ', 'private int addWordlenWeights(Channel chan,int weightIdx){ _EL_   int[] weigthsTab=atrac3p_wl_weights[chan.chNum * 3 + weightIdx - 1]; _EL_   for (int i=0; i < ctx.numQuantUnits; i++) { _EL_     chan.quWordlen[i]+=weigthsTab[i]; _EL_     if (chan.quWordlen[i] < 0 || chan.quWordlen[i] > 7) { _EL_       log.error(String.format("WL index out of range pos=%d, val=%d",i,chan.quWordlen[i])); _EL_       return AT3P_ERROR; _EL_     } _EL_   } _EL_   return 0; _EL_ } _EL_ ', 'final void pruneExceptionalOut(IR ir){ _EL_   int n=getNumberOfExceptionalOut(); _EL_   if (n > 0) { _EL_     ComputedBBEnum handlers=new ComputedBBEnum(n); _EL_     Enumeration<Instruction> e=forwardRealInstrEnumerator(); _EL_     while (e.hasMoreElements()) { _EL_       Instruction x=e.nextElement(); _EL_       Enumeration<BasicBlock> bbs=getApplicableExceptionalOut(x); _EL_       while (bbs.hasMoreElements()) { _EL_         BasicBlock bb=bbs.nextElement(); _EL_         handlers.addPossiblyDuplicateElement(bb); _EL_       } _EL_     } _EL_     deleteExceptionalOut(); _EL_     for (int i=0; handlers.hasMoreElements(); i++) { _EL_       ExceptionHandlerBasicBlock b=(ExceptionHandlerBasicBlock)handlers.nextElement(); _EL_       insertOut(b); _EL_     } _EL_   } _EL_   recomputeNormalOut(ir); _EL_ } _EL_ ', "public String toSpacedString(){ _EL_   final String original=toString(); _EL_   final StringBuilder builder=new StringBuilder(); _EL_   for (int i=0; i < original.length(); i++) { _EL_     if (i > 0 && (i % 4) == 0)     builder.append(' '); _EL_     builder.append(original.charAt(i)); _EL_   } _EL_   return builder.toString(); _EL_ } _EL_ ", 'private int parseContentType(final byte[] b,final int off) throws ParseException { _EL_   contentTypeVal_=PrimitivesParser.parseByte(b,off); _EL_   if (ContentType.deserialize(contentTypeVal_) == null) { _EL_     throw new BadCiphertextException("Invalid content type in ciphertext."); _EL_   } _EL_   return 1; _EL_ } _EL_ ', '@Benchmark public void nonCaching(){ _EL_   run(); _EL_ } _EL_ ', 'public int decode(String data,OutputStream out) throws IOException { _EL_   byte b1, b2, b3, b4; _EL_   int length=0; _EL_   int end=data.length(); _EL_   while (end > 0) { _EL_     if (!ignore(data.charAt(end - 1))) { _EL_       break; _EL_     } _EL_     end--; _EL_   } _EL_   int i=0; _EL_   int finish=end - 4; _EL_   i=nextI(data,i,finish); _EL_   while (i < finish) { _EL_     b1=decodingTable[data.charAt(i++)]; _EL_     i=nextI(data,i,finish); _EL_     b2=decodingTable[data.charAt(i++)]; _EL_     i=nextI(data,i,finish); _EL_     b3=decodingTable[data.charAt(i++)]; _EL_     i=nextI(data,i,finish); _EL_     b4=decodingTable[data.charAt(i++)]; _EL_     if ((b1 | b2 | b3| b4) < 0) { _EL_       throw new IOException("invalid characters encountered in base64 data"); _EL_     } _EL_     out.write((b1 << 2) | (b2 >> 4)); _EL_     out.write((b2 << 4) | (b3 >> 2)); _EL_     out.write((b3 << 6) | b4); _EL_     length+=3; _EL_     i=nextI(data,i,finish); _EL_   } _EL_   length+=decodeLastBlock(out,data.charAt(end - 4),data.charAt(end - 3),data.charAt(end - 2),data.charAt(end - 1)); _EL_   return length; _EL_ } _EL_ ', 'private void rLineTo(float dx,float dy){ _EL_   if (isEmpty()) { _EL_     mPath.moveTo(mLastX=0,mLastY=0); _EL_   } _EL_   dx+=mLastX; _EL_   dy+=mLastY; _EL_   mPath.lineTo(mLastX=dx,mLastY=dy); _EL_ } _EL_ ', '@Override public ConflictResults parseOutput(final String stdout,final String stderr){ _EL_   final List<String> contentConflicts=new ArrayList<String>(); _EL_   final List<String> renameConflicts=new ArrayList<String>(); _EL_   final List<String> bothConflicts=new ArrayList<String>(); _EL_   final String[] lines=getLines(stderr); _EL_   for (  final String line : lines) { _EL_     final int index=line.lastIndexOf(":"); _EL_     if (index != -1) { _EL_       if (StringUtils.endsWith(line,BOTH_CONFLICTS_SUFFIX)) { _EL_         bothConflicts.add(line.substring(0,index)); _EL_       } _EL_  else       if (StringUtils.endsWith(line,RENAME_CONFLICT_SUFFIX)) { _EL_         renameConflicts.add(line.substring(0,index)); _EL_       } _EL_  else { _EL_         contentConflicts.add(line.substring(0,index)); _EL_       } _EL_     } _EL_   } _EL_   return new ConflictResults(contentConflicts,renameConflicts,bothConflicts); _EL_ } _EL_ ', 'protected void sendStart(final OutputStream out) throws IOException { _EL_   LOG.trace("enter sendStart(OutputStream out)"); _EL_   out.write(EXTRA_BYTES); _EL_   out.write(getPartBoundary()); _EL_   out.write(CRLF_BYTES); _EL_ } _EL_ ', 'public void addActualQty(BigDecimal add){ _EL_   m_actualQty=m_actualQty.add(add); _EL_ } _EL_ ', 'public static void printStackTrace(SQLException e,PrintWriter pw){ _EL_   SQLException next=e; _EL_   while (next != null) { _EL_     next.printStackTrace(pw); _EL_     next=next.getNextException(); _EL_     if (next != null) { _EL_       pw.println("Next SQLException:"); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected void initializeWorld(){ _EL_   Body ground=new SimulationBody(); _EL_ { _EL_     Convex c=Geometry.createRectangle(100.0,1.0); _EL_     BodyFixture bf=new BodyFixture(c); _EL_     ground.addFixture(bf); _EL_   } _EL_   ground.translate(new Vector2(0.6875,-8.75)); _EL_   ground.setMass(MassType.INFINITE); _EL_   world.addBody(ground); _EL_   Body head=new SimulationBody(); _EL_ { _EL_     Convex c=Geometry.createCircle(0.25); _EL_     BodyFixture bf=new BodyFixture(c); _EL_     head.addFixture(bf); _EL_   } _EL_   head.setMass(MassType.NORMAL); _EL_   world.addBody(head); _EL_   Body torso=new SimulationBody(); _EL_ { _EL_     Convex c=Geometry.createRectangle(0.5,1.0); _EL_     BodyFixture bf=new BodyFixture(c); _EL_     torso.addFixture(bf); _EL_   } _EL_ { _EL_     Convex c=Geometry.createRectangle(1.0,0.25); _EL_     c.translate(new Vector2(0.00390625,0.375)); _EL_     BodyFixture bf=new BodyFixture(c); _EL_     torso.addFixture(bf); _EL_   } _EL_   torso.translate(new Vector2(0.0234375,-0.8125)); _EL_   torso.setMass(MassType.NORMAL); _EL_   world.addBody(torso); _EL_   Body rightHumerus=new SimulationBody(); _EL_ { _EL_     Convex c=Geometry.createRectangle(0.25,0.5); _EL_     BodyFixture bf=new BodyFixture(c); _EL_     rightHumerus.addFixture(bf); _EL_   } _EL_   rightHumerus.translate(new Vector2(0.4375,-0.609375)); _EL_   rightHumerus.setMass(MassType.NORMAL); _EL_   world.addBody(rightHumerus); _EL_   Body rightUlna=new SimulationBody(); _EL_ { _EL_     Convex c=Geometry.createRectangle(0.25,0.4); _EL_     BodyFixture bf=new BodyFixture(c); _EL_     rightUlna.addFixture(bf); _EL_   } _EL_   rightUlna.translate(new Vector2(0.44140625,-0.98828125)); _EL_   rightUlna.setMass(MassType.NORMAL); _EL_   world.addBody(rightUlna); _EL_   Body neck=new SimulationBody(); _EL_ { _EL_     Convex c=Geometry.createRectangle(0.15,0.2); _EL_     BodyFixture bf=new BodyFixture(c); _EL_     neck.addFixture(bf); _EL_   } _EL_   neck.translate(new Vector2(0.015625,-0.2734375)); _EL_   neck.setMass(MassType.NORMAL); _EL_   world.addBody(neck); _EL_   Body leftHumerus=new SimulationBody(); _EL_ { _EL_     Convex c=Geometry.createRectangle(0.25,0.5); _EL_     BodyFixture bf=new BodyFixture(c); _EL_     leftHumerus.addFixture(bf); _EL_   } _EL_   leftHumerus.translate(new Vector2(-0.3828125,-0.609375)); _EL_   leftHumerus.setMass(MassType.NORMAL); _EL_   world.addBody(leftHumerus); _EL_   Body leftUlna=new SimulationBody(); _EL_ { _EL_     Convex c=Geometry.createRectangle(0.25,0.4); _EL_     BodyFixture bf=new BodyFixture(c); _EL_     leftUlna.addFixture(bf); _EL_   } _EL_   leftUlna.translate(new Vector2(-0.3828125,-0.9765625)); _EL_   leftUlna.setMass(MassType.NORMAL); _EL_   world.addBody(leftUlna); _EL_   Body rightFemur=new SimulationBody(); _EL_ { _EL_     Convex c=Geometry.createRectangle(0.25,0.75); _EL_     BodyFixture bf=new BodyFixture(c); _EL_     rightFemur.addFixture(bf); _EL_   } _EL_   rightFemur.translate(new Vector2(0.1796875,-1.5703125)); _EL_   rightFemur.setMass(MassType.NORMAL); _EL_   world.addBody(rightFemur); _EL_   Body leftFemur=new SimulationBody(); _EL_ { _EL_     Convex c=Geometry.createRectangle(0.25,0.75); _EL_     BodyFixture bf=new BodyFixture(c); _EL_     leftFemur.addFixture(bf); _EL_   } _EL_   leftFemur.translate(new Vector2(-0.1328125,-1.5703125)); _EL_   leftFemur.setMass(MassType.NORMAL); _EL_   world.addBody(leftFemur); _EL_   Body rightTibia=new SimulationBody(); _EL_ { _EL_     Convex c=Geometry.createRectangle(0.25,0.5); _EL_     BodyFixture bf=new BodyFixture(c); _EL_     rightTibia.addFixture(bf); _EL_   } _EL_   rightTibia.translate(new Vector2(0.18359375,-2.11328125)); _EL_   rightTibia.setMass(MassType.NORMAL); _EL_   world.addBody(rightTibia); _EL_   Body leftTibia=new SimulationBody(); _EL_ { _EL_     Convex c=Geometry.createRectangle(0.25,0.5); _EL_     BodyFixture bf=new BodyFixture(c); _EL_     leftTibia.addFixture(bf); _EL_   } _EL_   leftTibia.translate(new Vector2(-0.1328125,-2.1171875)); _EL_   leftTibia.setMass(MassType.NORMAL); _EL_   world.addBody(leftTibia); _EL_   RevoluteJoint headToNeck=new RevoluteJoint(head,neck,new Vector2(0.01,-0.2)); _EL_   headToNeck.setLimitEnabled(false); _EL_   headToNeck.setLimits(Math.toRadians(0.0),Math.toRadians(0.0)); _EL_   headToNeck.setReferenceAngle(Math.toRadians(0.0)); _EL_   headToNeck.setMotorEnabled(false); _EL_   headToNeck.setMotorSpeed(Math.toRadians(0.0)); _EL_   headToNeck.setMaximumMotorTorque(0.0); _EL_   headToNeck.setCollisionAllowed(false); _EL_   world.addJoint(headToNeck); _EL_   RevoluteJoint neckToTorso=new RevoluteJoint(neck,torso,new Vector2(0.01,-0.35)); _EL_   neckToTorso.setLimitEnabled(false); _EL_   neckToTorso.setLimits(Math.toRadians(0.0),Math.toRadians(0.0)); _EL_   neckToTorso.setReferenceAngle(Math.toRadians(0.0)); _EL_   neckToTorso.setMotorEnabled(false); _EL_   neckToTorso.setMotorSpeed(Math.toRadians(0.0)); _EL_   neckToTorso.setMaximumMotorTorque(0.0); _EL_   neckToTorso.setCollisionAllowed(false); _EL_   world.addJoint(neckToTorso); _EL_   RevoluteJoint torsoToLeftHumerus=new RevoluteJoint(torso,leftHumerus,new Vector2(-0.4,-0.4)); _EL_   torsoToLeftHumerus.setLimitEnabled(false); _EL_   torsoToLeftHumerus.setLimits(Math.toRadians(0.0),Math.toRadians(0.0)); _EL_   torsoToLeftHumerus.setReferenceAngle(Math.toRadians(0.0)); _EL_   torsoToLeftHumerus.setMotorEnabled(false); _EL_   torsoToLeftHumerus.setMotorSpeed(Math.toRadians(0.0)); _EL_   torsoToLeftHumerus.setMaximumMotorTorque(0.0); _EL_   torsoToLeftHumerus.setCollisionAllowed(false); _EL_   world.addJoint(torsoToLeftHumerus); _EL_   RevoluteJoint torsoToRightHumerus=new RevoluteJoint(torso,rightHumerus,new Vector2(0.4,-0.4)); _EL_   torsoToRightHumerus.setLimitEnabled(false); _EL_   torsoToRightHumerus.setLimits(Math.toRadians(0.0),Math.toRadians(0.0)); _EL_   torsoToRightHumerus.setReferenceAngle(Math.toRadians(0.0)); _EL_   torsoToRightHumerus.setMotorEnabled(false); _EL_   torsoToRightHumerus.setMotorSpeed(Math.toRadians(0.0)); _EL_   torsoToRightHumerus.setMaximumMotorTorque(0.0); _EL_   torsoToRightHumerus.setCollisionAllowed(false); _EL_   world.addJoint(torsoToRightHumerus); _EL_   RevoluteJoint rightHumerusToRightUlna=new RevoluteJoint(rightHumerus,rightUlna,new Vector2(0.43,-0.82)); _EL_   rightHumerusToRightUlna.setLimitEnabled(false); _EL_   rightHumerusToRightUlna.setLimits(Math.toRadians(0.0),Math.toRadians(0.0)); _EL_   rightHumerusToRightUlna.setReferenceAngle(Math.toRadians(0.0)); _EL_   rightHumerusToRightUlna.setMotorEnabled(false); _EL_   rightHumerusToRightUlna.setMotorSpeed(Math.toRadians(0.0)); _EL_   rightHumerusToRightUlna.setMaximumMotorTorque(0.0); _EL_   rightHumerusToRightUlna.setCollisionAllowed(false); _EL_   world.addJoint(rightHumerusToRightUlna); _EL_   RevoluteJoint leftHumerusToLeftUlna=new RevoluteJoint(leftHumerus,leftUlna,new Vector2(-0.4,-0.81)); _EL_   leftHumerusToLeftUlna.setLimitEnabled(false); _EL_   leftHumerusToLeftUlna.setLimits(Math.toRadians(0.0),Math.toRadians(0.0)); _EL_   leftHumerusToLeftUlna.setReferenceAngle(Math.toRadians(0.0)); _EL_   leftHumerusToLeftUlna.setMotorEnabled(false); _EL_   leftHumerusToLeftUlna.setMotorSpeed(Math.toRadians(0.0)); _EL_   leftHumerusToLeftUlna.setMaximumMotorTorque(0.0); _EL_   leftHumerusToLeftUlna.setCollisionAllowed(false); _EL_   world.addJoint(leftHumerusToLeftUlna); _EL_   RevoluteJoint torsoToRightFemur=new RevoluteJoint(torso,rightFemur,new Vector2(0.16,-1.25)); _EL_   torsoToRightFemur.setLimitEnabled(false); _EL_   torsoToRightFemur.setLimits(Math.toRadians(0.0),Math.toRadians(0.0)); _EL_   torsoToRightFemur.setReferenceAngle(Math.toRadians(0.0)); _EL_   torsoToRightFemur.setMotorEnabled(false); _EL_   torsoToRightFemur.setMotorSpeed(Math.toRadians(0.0)); _EL_   torsoToRightFemur.setMaximumMotorTorque(0.0); _EL_   torsoToRightFemur.setCollisionAllowed(false); _EL_   world.addJoint(torsoToRightFemur); _EL_   RevoluteJoint torsoToLeftFemur=new RevoluteJoint(torso,leftFemur,new Vector2(-0.13,-1.25)); _EL_   torsoToLeftFemur.setLimitEnabled(false); _EL_   torsoToLeftFemur.setLimits(Math.toRadians(0.0),Math.toRadians(0.0)); _EL_   torsoToLeftFemur.setReferenceAngle(Math.toRadians(0.0)); _EL_   torsoToLeftFemur.setMotorEnabled(false); _EL_   torsoToLeftFemur.setMotorSpeed(Math.toRadians(0.0)); _EL_   torsoToLeftFemur.setMaximumMotorTorque(0.0); _EL_   torsoToLeftFemur.setCollisionAllowed(false); _EL_   world.addJoint(torsoToLeftFemur); _EL_   RevoluteJoint rightFemurToRightTibia=new RevoluteJoint(rightFemur,rightTibia,new Vector2(0.17,-1.9)); _EL_   rightFemurToRightTibia.setLimitEnabled(false); _EL_   rightFemurToRightTibia.setLimits(Math.toRadians(0.0),Math.toRadians(0.0)); _EL_   rightFemurToRightTibia.setReferenceAngle(Math.toRadians(0.0)); _EL_   rightFemurToRightTibia.setMotorEnabled(false); _EL_   rightFemurToRightTibia.setMotorSpeed(Math.toRadians(0.0)); _EL_   rightFemurToRightTibia.setMaximumMotorTorque(0.0); _EL_   rightFemurToRightTibia.setCollisionAllowed(false); _EL_   world.addJoint(rightFemurToRightTibia); _EL_   RevoluteJoint leftFemurToLeftTibia=new RevoluteJoint(leftFemur,leftTibia,new Vector2(-0.14,-1.9)); _EL_   leftFemurToLeftTibia.setLimitEnabled(false); _EL_   leftFemurToLeftTibia.setLimits(Math.toRadians(0.0),Math.toRadians(0.0)); _EL_   leftFemurToLeftTibia.setReferenceAngle(Math.toRadians(0.0)); _EL_   leftFemurToLeftTibia.setMotorEnabled(false); _EL_   leftFemurToLeftTibia.setMotorSpeed(Math.toRadians(0.0)); _EL_   leftFemurToLeftTibia.setMaximumMotorTorque(0.0); _EL_   leftFemurToLeftTibia.setCollisionAllowed(false); _EL_   world.addJoint(leftFemurToLeftTibia); _EL_ } _EL_ ', 'public void readData(DataInput din) throws IOException { _EL_   byteCount=din.readByte(); _EL_   status=din.readUnsignedShort(); _EL_   eventCount=din.readUnsignedShort(); _EL_   messageCount=din.readUnsignedShort(); _EL_   events=new byte[byteCount - 6]; _EL_   if (events.length > 0) { _EL_     din.readFully(events,0,events.length); _EL_   } _EL_ } _EL_ ', 'public E remove(int index){ _EL_   final ReentrantLock lock=this.lock; _EL_   lock.lock(); _EL_   try { _EL_     Object[] elements=getArray(); _EL_     int len=elements.length; _EL_     E oldValue=get(elements,index); _EL_     int numMoved=len - index - 1; _EL_     if (numMoved == 0)     setArray(Arrays.copyOf(elements,len - 1)); _EL_  else { _EL_       Object[] newElements=new Object[len - 1]; _EL_       System.arraycopy(elements,0,newElements,0,index); _EL_       System.arraycopy(elements,index + 1,newElements,index,numMoved); _EL_       setArray(newElements); _EL_     } _EL_     return oldValue; _EL_   } _EL_   finally { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', 'void createEdges(Number[] v){ _EL_   graph.addEdge(new Double(Math.random()),v[0],v[1],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[3],v[0],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[0],v[4],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[4],v[5],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[5],v[3],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[2],v[1],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[4],v[1],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[8],v[2],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[3],v[8],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[6],v[7],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[7],v[5],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[0],v[9],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[9],v[8],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[7],v[6],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[6],v[5],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[4],v[2],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[5],v[4],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[4],v[10],EdgeType.DIRECTED); _EL_   graph.addEdge(new Double(Math.random()),v[10],v[4],EdgeType.DIRECTED); _EL_ } _EL_ ', 'private static <T extends Component>T buildRow(final JPanel panel,final String labelText,final String hint,final T component,final boolean isLast){ _EL_   component.setPreferredSize(new Dimension(COLORPANEL_WIDTH,COLORPANEL_HEIGHT)); _EL_   final JPanel rowPanel=new JPanel(new BorderLayout()); _EL_   rowPanel.setBorder(new EmptyBorder(0,2,isLast ? 2 : 0,2)); _EL_   rowPanel.add(new JLabel(labelText),BorderLayout.CENTER); _EL_   rowPanel.add(CHintCreator.createHintPanel(component,hint),BorderLayout.EAST); _EL_   panel.add(rowPanel); _EL_   return component; _EL_ } _EL_ ', 'public Builder addTargetElements(Element... additionalTargets){ _EL_   for (int i=0; i < additionalTargets.length; i++) { _EL_     targetElements.add(additionalTargets[i]); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public void curveTo(double x1,double y1,double x2,double y2,double x3,double y3){ _EL_   if (size() == 0) { _EL_     throw new IllegalPathStateException("curveTo only allowed when not empty"); _EL_   } _EL_   Node lastPoint=get(size() - 1); _EL_   lastPoint.mask|=C2_MASK; _EL_   lastPoint.x[2]=x1; _EL_   lastPoint.y[2]=y1; _EL_   if ((lastPoint.mask & C1C2_MASK) == C1C2_MASK) { _EL_     lastPoint.keepColinear=Math.abs(Geom.angle(lastPoint.x[0],lastPoint.y[0],lastPoint.x[1],lastPoint.y[1]) - Geom.angle(lastPoint.x[2],lastPoint.y[2],lastPoint.x[0],lastPoint.y[0])) < 0.001; _EL_   } _EL_   add(new Node(C1_MASK,x3,y3,x2,y2,x3,y3)); _EL_ } _EL_ ', 'private void openCounterDataInputStream() throws DataFallbackException { _EL_   if (dInput == null) { _EL_     if (LOG.isDebugEnabled())     LOG.debug("openDataInputStream() ; Opening the reader for the " + counterFile.getName() + " file"); _EL_     try { _EL_       dInput=new BufferedReader(new FileReader(counterFile)); _EL_     } _EL_  catch (    IOException e) { _EL_       throw new DataFallbackException(e.getMessage()); _EL_     } _EL_   } _EL_ } _EL_ ', 'public CompositePredicate(Predicate p1,Predicate p2){ _EL_   m_clauses.add(p1); _EL_   m_clauses.add(p2); _EL_ } _EL_ ', 'public String readNextWord(){ _EL_   if (tokenizer.hasMoreTokens()) { _EL_     return tokenizer.nextToken(); _EL_   } _EL_  else { _EL_     return null; _EL_   } _EL_ } _EL_ ', '@Override public void buildAssociations(Instances data) throws Exception { _EL_   buildAssociations((Object)data); _EL_   return; _EL_ } _EL_ ', 'public static String replaceFirst(String s,String sub,String with){ _EL_   int i=s.indexOf(sub); _EL_   if (i == -1) { _EL_     return s; _EL_   } _EL_   return s.substring(0,i) + with + s.substring(i + sub.length()); _EL_ } _EL_ ', 'public void addObject(String s) throws Exception { _EL_   inspect(Class.forName(s)); _EL_ } _EL_ ', 'public static Element firstChildElement(Element element,Set<String> childElementNames){ _EL_   if (element == null)   return null; _EL_   Node node=element.getFirstChild(); _EL_   if (node != null) { _EL_     do { _EL_       if (node.getNodeType() == Node.ELEMENT_NODE && childElementNames.contains(node.getNodeName())) { _EL_         Element childElement=(Element)node; _EL_         return childElement; _EL_       } _EL_     } _EL_  while ((node=node.getNextSibling()) != null); _EL_   } _EL_   return null; _EL_ } _EL_ ', '@Override public int hashCode(){ _EL_   return rawString.hashCode(); _EL_ } _EL_ ', 'private void normalize(double[] in){ _EL_   double max=0d; _EL_   for (  double d : in) { _EL_     max=Math.max(max,d); _EL_   } _EL_   for (int i=0; i < in.length; i++) { _EL_     in[i]=in[i] / max; _EL_   } _EL_ } _EL_ ', 'public static boolean writeToFile(String filename,String message,boolean append){ _EL_   boolean result; _EL_   BufferedWriter writer; _EL_   try { _EL_     writer=new BufferedWriter(new FileWriter(filename,append)); _EL_     writer.write(message); _EL_     writer.newLine(); _EL_     writer.flush(); _EL_     writer.close(); _EL_     result=true; _EL_   } _EL_  catch (  Exception e) { _EL_     result=false; _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public int hashCode(){ _EL_   return (9 * colorModel.hashCode()) + (14 * sampleModel.hashCode()); _EL_ } _EL_ ', 'static public final float random(float start,float end){ _EL_   return start + random.nextFloat() * (end - start); _EL_ } _EL_ ', '@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) private void onConfigurationChanged(Configuration newConfig){ _EL_   final Locale newLocale=newConfig.locale; _EL_   if (newLocale.equals(mSystemLocale)) { _EL_     return; _EL_   } _EL_   mSystemLocale=newLocale; _EL_   ensureSupportedLocale(); _EL_ } _EL_ ', 'public static Keymap fromKey(final String key){ _EL_   if (key == null || key.isEmpty()) { _EL_     return null; _EL_   } _EL_   final Keymap searchResult=instances.get(key); _EL_   return searchResult; _EL_ } _EL_ ', 'private static String massageURI(String uri){ _EL_   uri=uri.trim(); _EL_   int protocolEnd=uri.indexOf(\':\'); _EL_   if (protocolEnd < 0 || isColonFollowedByPortNumber(uri,protocolEnd)) { _EL_     uri="http://" + uri; _EL_   } _EL_   return uri; _EL_ } _EL_ ', 'public void start(){ _EL_   stopAt=System.currentTimeMillis() + MAX_PROCESSING_TIME; _EL_ } _EL_ ', 'private Object[] singleRow(int row){ _EL_   Object[] res=new Object[this.nFields]; _EL_   for (int i=0; i < this.nFields; i+=1) { _EL_     if (this.isNull == null || !this.isNull[row * this.nFields + i]) { _EL_       res[i]=ArrayFuncs.newInstance(this.types[i],1); _EL_       System.arraycopy(this.data[i],row,res[i],0,1); _EL_     } _EL_   } _EL_   return res; _EL_ } _EL_ ', 'public static String removeChars(String src,String chars){ _EL_   int i=src.length(); _EL_   StringBuilder sb=new StringBuilder(i); _EL_   for (int j=0; j < i; j++) { _EL_     char c=src.charAt(j); _EL_     if (chars.indexOf(c) == -1) { _EL_       sb.append(c); _EL_     } _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ', 'private void addAllColumns() throws SQLException { _EL_   DatabaseMetaData metaData=getDatabaseMetaData(); _EL_   List<String> columns=new ArrayList<>(); _EL_   try (ResultSet rs=metaData.getColumns(null,null,normalizeObjectName(statementModel.getTableName()),null)){ _EL_     while (rs.next()) { _EL_       columns.add(quoteObjectName(rs.getString(IDX_COLUMN_NAME))); _EL_     } _EL_   } _EL_    columnNames=columns.toArray(new String[0]); _EL_   addReturningClause(); _EL_ } _EL_ ', 'public void loadHamNSpam(Connection conn) throws java.sql.SQLException { _EL_   PreparedStatement pstmt=null; _EL_   ResultSet rs=null; _EL_   try { _EL_     pstmt=conn.prepareStatement(sqlQueries.getSqlString("selectHamTokens",true)); _EL_     rs=pstmt.executeQuery(); _EL_     Map<String,Integer> ham=getHamTokenCounts(); _EL_     while (rs.next()) { _EL_       String token=rs.getString(1); _EL_       int count=rs.getInt(2); _EL_       if (count > 1) { _EL_         ham.put(token,count); _EL_       } _EL_     } _EL_     log("Ham tokens count: " + ham.size()); _EL_     rs.close(); _EL_     pstmt.close(); _EL_     pstmt=conn.prepareStatement(sqlQueries.getSqlString("selectSpamTokens",true)); _EL_     rs=pstmt.executeQuery(); _EL_     Map<String,Integer> spam=getSpamTokenCounts(); _EL_     while (rs.next()) { _EL_       String token=rs.getString(1); _EL_       int count=rs.getInt(2); _EL_       if (count > 1) { _EL_         spam.put(token,count); _EL_       } _EL_     } _EL_     log("Spam tokens count: " + spam.size()); _EL_     rs.close(); _EL_     pstmt.close(); _EL_     pstmt=conn.prepareStatement(sqlQueries.getSqlString("selectMessageCounts",true)); _EL_     rs=pstmt.executeQuery(); _EL_     if (rs.next()) { _EL_       setHamMessageCount(rs.getInt(1)); _EL_       setSpamMessageCount(rs.getInt(2)); _EL_     } _EL_     rs.close(); _EL_     pstmt.close(); _EL_   } _EL_   finally { _EL_     if (rs != null) { _EL_       try { _EL_         rs.close(); _EL_       } _EL_  catch (      java.sql.SQLException se) { _EL_         log("Failed to close statement after selecting spam tokens.",se); _EL_       } _EL_       rs=null; _EL_     } _EL_     if (pstmt != null) { _EL_       try { _EL_         pstmt.close(); _EL_       } _EL_  catch (      java.sql.SQLException se) { _EL_         log("Failed to close statement selecting message counts.",se); _EL_       } _EL_       pstmt=null; _EL_     } _EL_   } _EL_ } _EL_ ', 'static private void copyStream(final InputStream content,final OutputStream outstr) throws IOException { _EL_   final byte[] buf=new byte[GZIP_BUFFER]; _EL_   while (true) { _EL_     final int rdlen=content.read(buf); _EL_     if (rdlen <= 0) { _EL_       break; _EL_     } _EL_     outstr.write(buf,0,rdlen); _EL_   } _EL_ } _EL_ ', 'private com.codename1.ui.Component copyComponent(com.codename1.ui.Component cmp){ _EL_   com.codename1.ui.Container cnt=builder.createContainer(res,copiedResourceName); _EL_   com.codename1.ui.Component dest=builder.findByName(cmp.getName(),cnt); _EL_   if (dest != null && dest.getParent() != null) { _EL_     removeComponentSync(dest.getParent(),dest); _EL_   } _EL_   return dest; _EL_ } _EL_ ', 'static double zetastatic(long st,long n,double theta,double initialsum){ _EL_   double sum=initialsum; _EL_   for (long i=st; i < n; i++) { _EL_     sum+=1 / (Math.pow(i + 1,theta)); _EL_   } _EL_   return sum; _EL_ } _EL_ ', 'private void scrollBy(final int increment){ _EL_   index+=increment; _EL_   if (index < 0) { _EL_     index=0; _EL_   } _EL_   if (index >= items.size()) { _EL_     index=items.size() - 1; _EL_   } _EL_   redraw(); _EL_ } _EL_ ', "public static boolean symbolNeedsQuoting(CharSequence symbol,boolean quoteOperators){ _EL_   int length=symbol.length(); _EL_   if (length == 0) { _EL_     throw new EmptySymbolException(); _EL_   } _EL_   if (!isIdentifierKeyword(symbol)) { _EL_     char c=symbol.charAt(0); _EL_     if (!quoteOperators && isOperatorPart(c)) { _EL_       for (int ii=0; ii < length; ii++) { _EL_         c=symbol.charAt(ii); _EL_         if (!isOperatorPart(c)) { _EL_           return true; _EL_         } _EL_       } _EL_       return false; _EL_     } _EL_  else     if (isIdentifierStart(c)) { _EL_       for (int ii=0; ii < length; ii++) { _EL_         c=symbol.charAt(ii); _EL_         if ((c == '\\'' || c < 32 || c > 126) || !isIdentifierPart(c)) { _EL_           return true; _EL_         } _EL_       } _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ", 'public static long parseCommitCounterFile(final String name,final String ext) throws NumberFormatException { _EL_   if (name == null)   throw new IllegalArgumentException(); _EL_   if (ext == null)   throw new IllegalArgumentException(); _EL_   final int len=name.length() - ext.length(); _EL_   final String fileBaseName=name.substring(0,len); _EL_   final long commitCounter=Long.parseLong(fileBaseName); _EL_   return commitCounter; _EL_ } _EL_ ', 'public static Document loadDocument(File file) throws Exception { _EL_   DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance(); _EL_   DocumentBuilder builder=factory.newDocumentBuilder(); _EL_   return builder.parse(file); _EL_ } _EL_ ', 'public Munger singleLabelMode(String... languages){ _EL_   return singleLabelMode(Arrays.asList(languages)); _EL_ } _EL_ ', 'public StatValue[] matchSpec(StatSpec spec){ _EL_   if (spec.getCombineType() == StatSpec.GLOBAL) { _EL_     StatValue[] allValues=matchSpec(new RawStatSpec(spec)); _EL_     if (allValues.length == 0) { _EL_       return allValues; _EL_     } _EL_  else { _EL_       ComboValue cv=new ComboValue(allValues); _EL_       return new StatValue[]{cv}; _EL_     } _EL_   } _EL_  else { _EL_     List l=new ArrayList(); _EL_     StatArchiveReader.StatArchiveFile[] archives=getArchives(); _EL_     for (int i=0; i < archives.length; i++) { _EL_       StatArchiveFile f=archives[i]; _EL_       if (spec.archiveMatches(f.getFile())) { _EL_         f.matchSpec(spec,l); _EL_       } _EL_     } _EL_     StatValue[] result=new StatValue[l.size()]; _EL_     return (StatValue[])l.toArray(result); _EL_   } _EL_ } _EL_ ', 'private void assignClusterNums(int[] cl_num) throws Exception { _EL_   if (m_children != null && m_children.size() < 2) { _EL_     throw new Exception("assignClusterNums: tree not built correctly!"); _EL_   } _EL_   m_clusterNum=cl_num[0]; _EL_   cl_num[0]++; _EL_   if (m_children != null) { _EL_     for (int i=0; i < m_children.size(); i++) { _EL_       CNode child=m_children.get(i); _EL_       child.assignClusterNums(cl_num); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected void closeSubpath(){ _EL_   mPSStream.println(CLOSEPATH_STR); _EL_   mPenX=mStartPathX; _EL_   mPenY=mStartPathY; _EL_ } _EL_ ', 'public TvShowEpisodeScrapeTask(List<TvShowEpisode> episodes,MediaScraper mediaScraper){ _EL_   super(BUNDLE.getString("tvshow.scraping"),episodes.size(),TaskType.BACKGROUND_TASK); _EL_   this.episodes=episodes; _EL_   this.mediaScraper=mediaScraper; _EL_   this.scrapeThumb=true; _EL_ } _EL_ ', 'public ModelMBeanNotificationInfo(String[] notifTypes,String name,String description){ _EL_   this(notifTypes,name,description,null); _EL_ } _EL_ ', 'public void cleanBuildTask(long id) throws NotFoundException { _EL_   FutureBuildTask task=tasks.remove(id); _EL_   if (task == null) { _EL_     throw new NotFoundException(String.format("Invalid build task id: %d",id)); _EL_   } _EL_   task.cancel(true); _EL_   cleanup(task); _EL_ } _EL_ ', 'public void moveTo(final int lonCenter,final int latCenter){ _EL_   double mLatCenter=GeoMath.latE7ToMercator(latCenter); _EL_   double mTop=GeoMath.latE7ToMercator(top); _EL_   int newBottom=GeoMath.mercatorToLatE7(mLatCenter - (mTop - bottomMercator) / 2); _EL_   try { _EL_     translate((lonCenter - left - (int)(width / 2L)),newBottom - bottom); _EL_   } _EL_  catch (  OsmException e) { _EL_     e.printStackTrace(); _EL_   } _EL_ } _EL_ ', 'private static List<FixedRecord> createFixedRecords(int count){ _EL_   List<FixedRecord> records=new ArrayList<>(); _EL_   for (int i=0; i < count; i++) { _EL_     records.add(new FixedRecord(i)); _EL_   } _EL_   return records; _EL_ } _EL_ ', 'public TrackedEntityInstanceQueryParams addAttributesIfNotExist(List<QueryItem> attrs){ _EL_   for (  QueryItem attr : attrs) { _EL_     if (attributes != null && !attributes.contains(attr)) { _EL_       attributes.add(attr); _EL_     } _EL_   } _EL_   return this; _EL_ } _EL_ ', 'void recomposeAttributeSets(ElemAttributeSet attrSet){ _EL_   ArrayList attrSetList=(ArrayList)m_attrSets.get(attrSet.getName()); _EL_   if (null == attrSetList) { _EL_     attrSetList=new ArrayList(); _EL_     m_attrSets.put(attrSet.getName(),attrSetList); _EL_   } _EL_   attrSetList.add(attrSet); _EL_ } _EL_ ', 'protected final void deleteDBFFDCFiles(String directoryToDelete) throws AdeException { _EL_   try { _EL_     final File dirToDelete=new File(directoryToDelete); _EL_     String[] fileList=dirToDelete.list(); _EL_     if (fileList.length == 0) { _EL_       dirToDelete.delete(); _EL_     } _EL_  else { _EL_       for (int i=0; i < fileList.length; i++) { _EL_         final File f=new File(dirToDelete,fileList[i]); _EL_         if (f.isDirectory()) { _EL_           final String filePath=f.getPath(); _EL_           deleteDBFFDCFiles(filePath); _EL_           continue; _EL_         } _EL_         f.delete(); _EL_       } _EL_       fileList=dirToDelete.list(); _EL_       if (fileList.length == 0) { _EL_         dirToDelete.delete(); _EL_       } _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     throw new AdeInternalException("Failed to delete the backed-up Ade DB directory",e); _EL_   } _EL_ } _EL_ ', 'public void appendToNalUnit(byte[] data,int offset,int limit){ _EL_   if (!isFilling) { _EL_     return; _EL_   } _EL_   int readLength=limit - offset; _EL_   if (nalData.length < nalLength + readLength) { _EL_     nalData=Arrays.copyOf(nalData,(nalLength + readLength) * 2); _EL_   } _EL_   System.arraycopy(data,offset,nalData,nalLength,readLength); _EL_   nalLength+=readLength; _EL_ } _EL_ ', 'public static long sizeOfDirectory(File directory){ _EL_   checkDirectory(directory); _EL_   final File[] files=directory.listFiles(); _EL_   if (files == null) { _EL_     return 0L; _EL_   } _EL_   long size=0; _EL_   for (  final File file : files) { _EL_     try { _EL_       if (!isSymlink(file)) { _EL_         size+=sizeOf(file); _EL_         if (size < 0) { _EL_           break; _EL_         } _EL_       } _EL_     } _EL_  catch (    IOException ioe) { _EL_     } _EL_   } _EL_   return size; _EL_ } _EL_ ', 'public static void checkSerializedEquality(Object object){ _EL_   Object object2=serializeAndRecover(object); _EL_   Assert.assertEquals("Equals check",object,object2); _EL_   Assert.assertEquals("HashCode check",object.hashCode(),object2.hashCode()); _EL_ } _EL_ ', 'public static double mean(final List<Double> list){ _EL_   double sum=0; _EL_   for (  Double number : list) { _EL_     sum+=number; _EL_   } _EL_   return sum / list.size(); _EL_ } _EL_ ', 'public In(URL url){ _EL_   if (url == null)   throw new NullPointerException("argument is null"); _EL_   try { _EL_     URLConnection site=url.openConnection(); _EL_     InputStream is=site.getInputStream(); _EL_     scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME); _EL_     scanner.useLocale(LOCALE); _EL_   } _EL_  catch (  IOException ioe) { _EL_     throw new IllegalArgumentException("Could not open " + url); _EL_   } _EL_ } _EL_ ', 'private static String fromHtmlEntity(String str){ _EL_   Character ch=map.get(str); _EL_   return (ch != null) ? ch.toString() : str; _EL_ } _EL_ ', 'private Map<URI,StorageSystem> buildArrayMap(StorageSystem vplexSystem,List<VolumeDescriptor> descriptors,VolumeDescriptor.Type[] types){ _EL_   Map<URI,StorageSystem> arrayMap=new HashMap<URI,StorageSystem>(); _EL_   if (types != null) { _EL_     descriptors=VolumeDescriptor.filterByType(descriptors,types,new VolumeDescriptor.Type[]{}); _EL_   } _EL_   for (  VolumeDescriptor desc : descriptors) { _EL_     if (arrayMap.containsKey(desc.getDeviceURI()) == false) { _EL_       if (vplexSystem == null) { _EL_         StorageSystem array=getDataObject(StorageSystem.class,desc.getDeviceURI(),_dbClient); _EL_         arrayMap.put(desc.getDeviceURI(),array); _EL_       } _EL_  else { _EL_         Set<URI> connectedSystems=ConnectivityUtil.getStorageSystemAssociationsByNetwork(_dbClient,vplexSystem.getId(),StoragePort.PortType.backend); _EL_         if (connectedSystems.contains(desc.getDeviceURI())) { _EL_           StorageSystem array=getDataObject(StorageSystem.class,desc.getDeviceURI(),_dbClient); _EL_           arrayMap.put(desc.getDeviceURI(),array); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return arrayMap; _EL_ } _EL_ ', 'public byte[] encrypt(byte[] plainTextAsBytes,CharSequence password) throws KeyCrypterException { _EL_   try { _EL_     byte[] salt=new byte[SALT_LENGTH]; _EL_     secureRandom.nextBytes(salt); _EL_     ParametersWithIV key=(ParametersWithIV)getAESPasswordKey(password,salt); _EL_     BufferedBlockCipher cipher=new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESFastEngine())); _EL_     cipher.init(true,key); _EL_     byte[] encryptedBytes=new byte[cipher.getOutputSize(plainTextAsBytes.length)]; _EL_     final int processLength=cipher.processBytes(plainTextAsBytes,0,plainTextAsBytes.length,encryptedBytes,0); _EL_     final int doFinalLength=cipher.doFinal(encryptedBytes,processLength); _EL_     return concat(salt,Arrays.copyOf(encryptedBytes,processLength + doFinalLength)); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new KeyCrypterException("Could not encrypt bytes \'" + Utils.bytesToHexString(plainTextAsBytes) + "\'",e); _EL_   } _EL_ } _EL_ ', 'public static _Fields findByThriftId(int fieldId){ _EL_ switch (fieldId) { _EL_ case 1: _EL_     return AFTER_ID; _EL_ case 2: _EL_   return MAX_JOBS; _EL_ default : _EL_ return null; _EL_ } _EL_ } _EL_ ', '@Override public void deinstall(JEditorPane editor){ _EL_   super.deinstall(editor); _EL_   editor.removeKeyListener(this); _EL_ } _EL_ ', 'public boolean isSecure(){ _EL_   return mTlsCipher != null && !mTlsCipher.isEmpty(); _EL_ } _EL_ ', 'public void sample(Record rec){ _EL_   totalRecs++; _EL_   if (samples.size() < MAX_SAMPLES) { _EL_     samples.add(new Sample(rec,schema)); _EL_     updateNewValueInterval(rec); _EL_   } _EL_  else { _EL_     double flip=random.nextDouble(); _EL_     if (flip < (double)MAX_SAMPLES / totalRecs) { _EL_       samples.set(random.nextInt(MAX_SAMPLES),new Sample(rec,schema)); _EL_       updateNewValueInterval(rec); _EL_     } _EL_   } _EL_ } _EL_ ', 'public TenantCreateParam prepareTenantParam(KeystoneTenant tenant){ _EL_   TenantCreateParam param=new TenantCreateParam(CinderConstants.TENANT_NAME_PREFIX + " " + tenant.getName(),prepareUserMappings(tenant.getId())); _EL_   param.setDescription(getProperTenantDescription(tenant.getDescription())); _EL_   return param; _EL_ } _EL_ ', 'private void forceInternalError(){ _EL_   throw new InternalError("gotcha"); _EL_ } _EL_ ', '@Override public void drawHighlight(Graphics g,int w,int h){ _EL_   g.setColor(Color.black); _EL_   FontMetrics fm=g.getFontMetrics(); _EL_   int l=(int)(m_x * w) - fm.stringWidth(m_id) / 2; _EL_   int t=(int)(m_y * h) - fm.getHeight() / 2; _EL_   g.fillRect(l - 2,t - 2,fm.stringWidth(m_id) + 8,fm.getHeight() + fm.getDescent() + 8); _EL_   drawNode(g,w,h); _EL_ } _EL_ ', 'public static ImageEncoder newInstance(String format){ _EL_   ImageEncoder imageEncoder=null; _EL_   String className=(String)encoders.get(format); _EL_   if (className == null) { _EL_     throw new IllegalArgumentException("Unsupported image format - " + format); _EL_   } _EL_   try { _EL_     Class imageEncoderClass=Class.forName(className); _EL_     imageEncoder=(ImageEncoder)imageEncoderClass.newInstance(); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new IllegalArgumentException(e.toString()); _EL_   } _EL_   return imageEncoder; _EL_ } _EL_ ', 'public static void applyPinchZoomImage(ImageView mImageView){ _EL_   mImageView.setOnTouchListener(new PinchZoom()); _EL_ } _EL_ ', 'public double empiricalHSICincompleteCholesky(TetradMatrix Gy,TetradMatrix Gx,TetradMatrix Gz,int m){ _EL_   int ky=Gy.columns(); _EL_   int kx=Gx.columns(); _EL_   int kz=Gz.columns(); _EL_   TetradMatrix H=KernelUtils.constructH(m); _EL_   TetradMatrix Gcy=H.times(Gy); _EL_   TetradMatrix Gcx=H.times(Gx); _EL_   TetradMatrix Gcz=H.times(Gz); _EL_   TetradMatrix A=new TetradMatrix(ky,kx); _EL_   TetradMatrix Gcyt=Gcy.transpose(); _EL_   A=Gcyt.times(Gcx); _EL_   TetradMatrix B=Gcy.times(A); _EL_   TetradMatrix Kyx=new TetradMatrix(m,m); _EL_   TetradMatrix Gcxt=new TetradMatrix(kx,m); _EL_   Gcxt=Gcx.transpose(); _EL_   Kyx=B.times(Gcxt); _EL_   double empHSIC=0.0; _EL_   double xy=0.0; _EL_   for (int i=0; i < m; i++) { _EL_     empHSIC+=matrixProductEntry(B,Gcxt,i,i); _EL_   } _EL_   TetradMatrix Gytz=Gcyt.times(Gcz); _EL_   TetradMatrix Gczt=Gcz.transpose(); _EL_   TetradMatrix Gztx=Gczt.times(Gcx); _EL_   TetradMatrix Gztz=Gczt.times(Gcz); _EL_   TetradMatrix Gztzr=Gztz.copy(); _EL_   for (int i=0; i < kz; i++) { _EL_     Gztzr.set(i,i,Gztz.get(i,i) + this.regularizer); _EL_   } _EL_   TetradMatrix ZI=Gztzr.inverse(); _EL_   TetradMatrix ZIzt=ZI.times(Gczt); _EL_   TetradMatrix Gzr=Gcz.copy(); _EL_   for (int i=0; i < m; i++) { _EL_     for (int j=0; j < kz; j++) { _EL_       Gzr.set(i,j,Gcz.get(i,j) * (-1.0 / this.regularizer)); _EL_     } _EL_   } _EL_   TetradMatrix Zinv=Gzr.times(ZIzt); _EL_   for (int i=0; i < m; i++) { _EL_     Zinv.set(i,i,Zinv.get(i,i) + (1.0 / this.regularizer)); _EL_   } _EL_   TetradMatrix Gztzinv=Gczt.times(Zinv); _EL_   TetradMatrix Gzinvz=Zinv.times(Gcz); _EL_   TetradMatrix Gztinv2z=Gztzinv.times(Gzinvz); _EL_   TetradMatrix Gytzztzinv2z=Gytz.times(Gztinv2z); _EL_   TetradMatrix Gytzztzinv2zztx=Gytzztzinv2z.times(Gztx); _EL_   TetradMatrix Gyytzztzinv2zztx=Gcy.times(Gytzztzinv2zztx); _EL_   double second=0.0; _EL_   for (int i=0; i < m; i++) { _EL_     second+=matrixProductEntry(Gyytzztzinv2zztx,Gcxt,i,i); _EL_   } _EL_   empHSIC-=2 * second; _EL_   TetradMatrix Gxtz=Gcxt.times(Gcz); _EL_   TetradMatrix Gxtzztinv2z=Gxtz.times(Gztinv2z); _EL_   TetradMatrix Gyytzztzinv2zztxxtzztinv2z=Gyytzztzinv2zztx.times(Gxtzztinv2z); _EL_   for (int i=0; i < m; i++) { _EL_     empHSIC+=matrixProductEntry(Gyytzztzinv2zztxxtzztinv2z,Gczt,i,i); _EL_   } _EL_   double betaz=0.0; _EL_   for (int i=0; i < (m - 1); i++) { _EL_     for (int j=(i + 1); j < m; j++) { _EL_       betaz+=Math.pow(matrixProductEntry(Gcz,Gczt,i,j),2); _EL_       betaz+=Math.pow(matrixProductEntry(Gcz,Gczt,j,i),2); _EL_     } _EL_   } _EL_   empHSIC*=(m / (betaz * (m - 1))); _EL_   return empHSIC; _EL_ } _EL_ ', 'public static File parse(String[] options,String option,File defValue) throws Exception { _EL_   String value=Utils.getOption(option,options); _EL_   if (value.isEmpty())   return defValue; _EL_  else   return new File(value); _EL_ } _EL_ ', 'public void ensureCapacity(int minCapacity){ _EL_   int oldCapacity=capacity; _EL_   if (minCapacity > oldCapacity) { _EL_     int newCapacity=(oldCapacity * 3) / 2 + 1; _EL_     if (newCapacity < minCapacity)     newCapacity=minCapacity; _EL_     BitVector vector=toBitVector(); _EL_     vector.setSize(newCapacity * bitsPerElement); _EL_     this.bits=vector.elements(); _EL_     this.capacity=newCapacity; _EL_   } _EL_ } _EL_ ', 'private String detailBase(final Method method){ _EL_   final Class<?> clazz=method.getDeclaringClass(); _EL_   final String detailBase=MessageUtils.bundleNameForClass(clazz); _EL_   if (isBlank(detailBase)) { _EL_     throw new IllegalStateException("no bundle name defined for " + clazz); _EL_   } _EL_   return detailBase; _EL_ } _EL_ ', 'public final void lock(){ _EL_   SunToolkit.awtLock(); _EL_ } _EL_ ', '@Override public Object createStatement(Object proxy,Method method,Object[] args,Object statement,long time){ _EL_   try { _EL_     Object result=null; _EL_     String name=method.getName(); _EL_     String sql=null; _EL_     Constructor<?> constructor=null; _EL_     if (compare(CREATE_STATEMENT,name)) { _EL_       constructor=getConstructor(CREATE_STATEMENT_IDX,Statement.class); _EL_     } _EL_  else     if (compare(PREPARE_STATEMENT,name)) { _EL_       sql=(String)args[0]; _EL_       constructor=getConstructor(PREPARE_STATEMENT_IDX,PreparedStatement.class); _EL_       if (sql != null) { _EL_         prepareStatement(sql,time); _EL_       } _EL_     } _EL_  else     if (compare(PREPARE_CALL,name)) { _EL_       sql=(String)args[0]; _EL_       constructor=getConstructor(PREPARE_CALL_IDX,CallableStatement.class); _EL_       prepareCall(sql,time); _EL_     } _EL_  else { _EL_       return statement; _EL_     } _EL_     result=constructor.newInstance(new Object[]{new StatementProxy(statement,sql)}); _EL_     return result; _EL_   } _EL_  catch (  Exception x) { _EL_     log.warn("Unable to create statement proxy for slow query report.",x); _EL_   } _EL_   return statement; _EL_ } _EL_ ', 'public UpdateResponse remove(long id) throws IOException, SolrServerException { _EL_   UpdateResponse res=solrClient.deleteById(String.valueOf(id)); _EL_   solrClient.commit(false,true,true); _EL_   return res; _EL_ } _EL_ ', 'public void switchSetup(){ _EL_   int retVal; _EL_   retVal=m_SetupFileChooser.showOpenDialog(this); _EL_   if (retVal != JFileChooser.APPROVE_OPTION) { _EL_     return; _EL_   } _EL_   m_DbUtils.initialize(m_SetupFileChooser.getSelectedFile()); _EL_   m_URL=m_DbUtils.getDatabaseURL(); _EL_   m_User=m_DbUtils.getUsername(); _EL_   m_Password=m_DbUtils.getPassword(); _EL_   m_TextURL.setText(m_URL); _EL_ } _EL_ ', 'private ClientDetailsEntity loadClientObject(final OIDCAuthorizationRequestContext authorizationRequest){ _EL_   log.debug("Loading client by id {}",authorizationRequest.getClientId()); _EL_   return clientService.loadClientByClientId(authorizationRequest.getClientId()); _EL_ } _EL_ ', 'private void parseNoWildCards(){ _EL_   this.fSegments=new String[1]; _EL_   this.fSegments[0]=this.fPattern; _EL_   this.fBound=this.fLength; _EL_ } _EL_ ', 'public Map<String,String> environment(){ _EL_   String base64=toStringBase64(); _EL_   if (base64 == null || base64.length() == 0) { _EL_     return Collections.emptyMap(); _EL_   } _EL_   Map<String,String> environment=Maps.newHashMap(); _EL_   environment.put(BaggageUtils.BAGGAGE_ENVIRONMENT_VARIABLE,base64); _EL_   return environment; _EL_ } _EL_ ', '@Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,List<Double> values,XYSeriesRenderer seriesRenderer,SupportSeriesRender supportSeriesRender,float yAxisValue,int seriesIndex,int startIndex){ _EL_   int seriesNr=mDataset.getSeriesCount(); _EL_   int length=points.size(); _EL_   paint.setColor(seriesRenderer.getColor()); _EL_   paint.setStyle(Style.FILL); _EL_   float halfDiffX=getHalfDiffX(points,length,seriesNr); _EL_   for (int i=0; i < length; i+=2) { _EL_     float x=points.get(i); _EL_     float y=points.get(i + 1); _EL_     drawBar(canvas,x,yAxisValue,x,y,halfDiffX,seriesNr,seriesIndex,paint); _EL_   } _EL_   paint.setColor(seriesRenderer.getColor()); _EL_ } _EL_ ', 'public void listenModLog(String username,String token){ _EL_   if (!hasServer()) { _EL_     return; _EL_   } _EL_   if (modLogListen.containsKey(username)) { _EL_     return; _EL_   } _EL_   this.token=token; _EL_   long userId=getUserId(username); _EL_   modLogListen.put(username,userId); _EL_   LOGGER.info("[PubSub] LISTEN ModLog " + username + " "+ userId); _EL_   if (userId != -1) { _EL_     sendListenModLog(userId,true); _EL_   } _EL_ } _EL_ ', "public static boolean isValidClassName(String className){ _EL_   if (className.indexOf('(') >= 0) { _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ", 'private <T extends DiscoveredSystemObject>boolean isDataCollectionScanJobSchedulingNeeded(long lastScanTime,boolean inProgress){ _EL_   long systemTime=System.currentTimeMillis(); _EL_   long refreshInterval=getRefreshInterval(ControllerServiceImpl.SCANNER); _EL_   if (inProgress) { _EL_     return false; _EL_   } _EL_   if (lastScanTime > 0 && (systemTime - lastScanTime < refreshInterval * 1000)) { _EL_     _logger.info("Skipping scanner job; attempt to schedule faster than refresh interval allows"); _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private void removeBreakpoints(final Set<BreakpointAddress> breakpointAddressSet,final BreakpointStorage storage){ _EL_   if (breakpointAddressSet.size() != 0) { _EL_     final Set<Breakpoint> breakpoints=storage.getBreakPointsByAddress(breakpointAddressSet); _EL_     storage.removeBreakpoints(breakpointAddressSet); _EL_     for (    final BreakpointManagerListener listener : listeners) { _EL_       try { _EL_         listener.breakpointsRemoved(breakpoints); _EL_       } _EL_  catch (      final Exception e) { _EL_         CUtilityFunctions.logException(e); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { _EL_   stream.defaultReadObject(); _EL_   MarshalledInstance mi=(MarshalledInstance)stream.readObject(); _EL_   try { _EL_     listener=(RemoteEventListener)mi.get(false); _EL_   } _EL_  catch (  Throwable e) { _EL_     if (e instanceof Error && ThrowableConstants.retryable(e) == ThrowableConstants.BAD_OBJECT) { _EL_       throw (Error)e; _EL_     } _EL_     logger.log(Level.WARNING,"failed to recover event listener",e); _EL_   } _EL_ } _EL_ ', "private String byteArrayToHexString(byte[] bytes){ _EL_   StringBuilder sb=new StringBuilder(bytes.length * 2); _EL_   for (  byte element : bytes) { _EL_     int v=element & 0xff; _EL_     if (v < 16) { _EL_       sb.append('0'); _EL_     } _EL_     sb.append(Integer.toHexString(v)); _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ", 'public ScServer createClusterServer(String ssn,String clusterName,String osId) throws StorageCenterAPIException { _EL_   Parameters params=new Parameters(); _EL_   params.add("Name",clusterName); _EL_   params.add("StorageCenter",ssn); _EL_   params.add("Notes",NOTES_STRING); _EL_   params.add("OperatingSystem",osId); _EL_   RestResult rr=restClient.post("StorageCenter/ScServerCluster",params.toJson()); _EL_   if (!checkResults(rr)) { _EL_     String error=String.format("Error creating cluster server \'%s\': %s",clusterName,rr.getErrorMsg()); _EL_     throw new StorageCenterAPIException(error); _EL_   } _EL_   return gson.fromJson(rr.getResult(),ScServer.class); _EL_ } _EL_ ', 'private void writeDirectoryPostResource(Element postResourceEl,String path){ _EL_   postResourceEl.setAttribute("className",DIR_RESOURCE_SET); _EL_   postResourceEl.setAttribute("base",path.replace("&","&amp;")); _EL_ } _EL_ ', 'private static int[] trimArray(int[] array,int size){ _EL_   if (size < 0) { _EL_     throw new IllegalArgumentException(); _EL_   } _EL_   if (size == 0) { _EL_     return NO_ERRORS; _EL_   } _EL_   int[] a=new int[size]; _EL_   System.arraycopy(array,0,a,0,size); _EL_   return a; _EL_ } _EL_ ', 'public synchronized void removeCurlMesh(CurlMesh mesh){ _EL_   while (mCurlMeshes.remove(mesh))   ; _EL_ } _EL_ ', 'private List<Datum> sampleNbestList(int sourceId,Sequence<IString> source,SentenceLevelMetric<IString,String> scoreMetric,List<RichTranslation<IString,String>> translations,List<Sequence<IString>> references){ _EL_   int[] sourceIds=new int[1]; _EL_   sourceIds[0]=sourceId; _EL_   List<Sequence<IString>> sources=new ArrayList<>(1); _EL_   sources.add(source); _EL_   List<List<RichTranslation<IString,String>>> translationList=new ArrayList<List<RichTranslation<IString,String>>>(1); _EL_   translationList.add(translations); _EL_   List<List<Sequence<IString>>> referenceList=new ArrayList<List<Sequence<IString>>>(1); _EL_   referenceList.add(references); _EL_   return sampleNbestLists(sourceIds,sources,scoreMetric,translationList,referenceList); _EL_ } _EL_ ', 'protected void postRunnable(Runnable runnable){ _EL_   if (runnable != null) { _EL_     handler.post(runnable); _EL_   } _EL_ } _EL_ ', 'public boolean isClosed(){ _EL_   return map.isClosed(); _EL_ } _EL_ ', 'public void addNode(final Instruction instruction){ _EL_   instructions.add(instruction); _EL_   if (prevInstruction != null) { _EL_     addEdge(prevInstruction,instruction); _EL_   } _EL_   prevInstruction=instruction; _EL_ } _EL_ ', 'public void ensureCapacity(int minimumCapacity){ _EL_   if (minimumCapacity <= _capacity)   return; _EL_   if (minimumCapacity > 0x1000) { _EL_     _capacity=(minimumCapacity + 0xfff) & ~0xfff; _EL_   } _EL_  else { _EL_     while (_capacity < minimumCapacity) { _EL_       _capacity+=_capacity; _EL_     } _EL_   } _EL_   byte[] bytes=new byte[_capacity]; _EL_   System.arraycopy(_buffer,0,bytes,0,_length); _EL_   _buffer=bytes; _EL_ } _EL_ ', 'public Builder removeName(final String name){ _EL_   names.remove(name); _EL_   return this; _EL_ } _EL_ ', 'public <T>JSONAPIDocument<List<T>> readDocumentCollection(InputStream dataStream,Class<T> clazz){ _EL_   try { _EL_     resourceCache.init(); _EL_     JsonNode rootNode=objectMapper.readTree(dataStream); _EL_     ValidationUtils.ensureNotError(objectMapper,rootNode); _EL_     ValidationUtils.ensureCollection(rootNode); _EL_     resourceCache.cache(parseIncluded(rootNode)); _EL_     List<T> resourceList=new ArrayList<>(); _EL_     for (    JsonNode element : rootNode.get(DATA)) { _EL_       T pojo=readObject(element,clazz,true); _EL_       resourceList.add(pojo); _EL_     } _EL_     JSONAPIDocument<List<T>> result=new JSONAPIDocument<>(resourceList,objectMapper); _EL_     if (rootNode.has(META)) { _EL_       result.setMeta(mapMeta(rootNode.get(META))); _EL_     } _EL_     if (rootNode.has(LINKS)) { _EL_       result.setLinks(new Links(mapLinks(rootNode.get(LINKS)))); _EL_     } _EL_     return result; _EL_   } _EL_  catch (  RuntimeException e) { _EL_     throw e; _EL_   } _EL_ catch (  Exception e) { _EL_     throw new RuntimeException(e); _EL_   } _EL_  finally { _EL_     resourceCache.clear(); _EL_   } _EL_ } _EL_ ', 'public void addTargetedBySwarm(int entityId,int weaponId){ _EL_   hitBySwarmsEntity.addElement(new Integer(entityId)); _EL_   hitBySwarmsWeapon.addElement(new Integer(weaponId)); _EL_ } _EL_ ', 'public OMScalingRaster(double ullat,double ullon,double lrlat,double lrlon,ImageIcon ii){ _EL_   this(ullat,ullon,lrlat,lrlon,ii.getImage()); _EL_ } _EL_ ', 'private static ResultPoint[] findVertices(BitMatrix matrix,boolean tryHarder){ _EL_   int height=matrix.getHeight(); _EL_   int width=matrix.getWidth(); _EL_   ResultPoint[] result=new ResultPoint[8]; _EL_   boolean found=false; _EL_   int[] counters=new int[START_PATTERN.length]; _EL_   int rowStep=Math.max(1,height >> (tryHarder ? 9 : 7)); _EL_   for (int i=0; i < height; i+=rowStep) { _EL_     int[] loc=findGuardPattern(matrix,0,i,width,false,START_PATTERN,counters); _EL_     if (loc != null) { _EL_       result[0]=new ResultPoint(loc[0],i); _EL_       result[4]=new ResultPoint(loc[1],i); _EL_       found=true; _EL_       break; _EL_     } _EL_   } _EL_   if (found) { _EL_     found=false; _EL_     for (int i=height - 1; i > 0; i-=rowStep) { _EL_       int[] loc=findGuardPattern(matrix,0,i,width,false,START_PATTERN,counters); _EL_       if (loc != null) { _EL_         result[1]=new ResultPoint(loc[0],i); _EL_         result[5]=new ResultPoint(loc[1],i); _EL_         found=true; _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   counters=new int[STOP_PATTERN.length]; _EL_   if (found) { _EL_     found=false; _EL_     for (int i=0; i < height; i+=rowStep) { _EL_       int[] loc=findGuardPattern(matrix,0,i,width,false,STOP_PATTERN,counters); _EL_       if (loc != null) { _EL_         result[2]=new ResultPoint(loc[1],i); _EL_         result[6]=new ResultPoint(loc[0],i); _EL_         found=true; _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   if (found) { _EL_     found=false; _EL_     for (int i=height - 1; i > 0; i-=rowStep) { _EL_       int[] loc=findGuardPattern(matrix,0,i,width,false,STOP_PATTERN,counters); _EL_       if (loc != null) { _EL_         result[3]=new ResultPoint(loc[1],i); _EL_         result[7]=new ResultPoint(loc[0],i); _EL_         found=true; _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   return found ? result : null; _EL_ } _EL_ ', 'public static void copyStream(InputStream is,OutputStream os,byte[] buffer,int bufferSize,String confid,double fileSize,Context context) throws IOException { _EL_   double downloaded=0; _EL_   int[] update=new int[3]; _EL_   try { _EL_     for (; ; ) { _EL_       int count=is.read(buffer,0,bufferSize); _EL_       downloaded+=count; _EL_       if (count == -1) { _EL_         if (context != null) { _EL_         } _EL_         break; _EL_       } _EL_       os.write(buffer,0,count); _EL_       if (context != null) { _EL_         update[0]=(int)downloaded; _EL_         update[1]=(int)fileSize; _EL_         update[2]=(int)((downloaded / fileSize) * 100); _EL_       } _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     throw e; _EL_   } _EL_ } _EL_ ', "protected String parseString(int closingCharacter) throws IOException, RDFParseException { _EL_   StringBuilder sb=getBuilder(); _EL_   while (true) { _EL_     int c=readCodePoint(); _EL_     if (c == closingCharacter) { _EL_       break; _EL_     } _EL_  else     if (c == -1) { _EL_       throwEOFException(); _EL_     } _EL_     appendCodepoint(sb,c); _EL_     if (c == '\\\\') { _EL_       c=readCodePoint(); _EL_       if (c == -1) { _EL_         throwEOFException(); _EL_       } _EL_       appendCodepoint(sb,c); _EL_     } _EL_   } _EL_   return sb.toString(); _EL_ } _EL_ ", 'public boolean fixUtils(String[] utils) throws Exception { _EL_   for (  String util : utils) { _EL_     if (!checkUtil(util)) { _EL_       if (checkUtil("busybox")) { _EL_         if (hasUtil(util,"busybox")) { _EL_           fixUtil(util,RootTools.utilPath); _EL_         } _EL_       } _EL_  else { _EL_         if (checkUtil("toolbox")) { _EL_           if (hasUtil(util,"toolbox")) { _EL_             fixUtil(util,RootTools.utilPath); _EL_           } _EL_         } _EL_  else { _EL_           return false; _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', '@Override protected void initialize(){ _EL_   List<String> patterns; _EL_   super.initialize(); _EL_   m_Patterns=new ArrayList<Pattern>(); _EL_   patterns=read(); _EL_   for (  String pattern : patterns) { _EL_     m_Patterns.add(Pattern.compile(pattern)); _EL_   } _EL_ } _EL_ ', "private void toStringWithChildren(StringBuffer buffer,int indent){ _EL_   internalToString(buffer,indent); _EL_   if (fChildren != null) { _EL_     for (Iterator<TextEdit> iterator=fChildren.iterator(); iterator.hasNext(); ) { _EL_       TextEdit child=iterator.next(); _EL_       buffer.append('\\n'); _EL_       child.toStringWithChildren(buffer,indent + 1); _EL_     } _EL_   } _EL_ } _EL_ ", 'public static void encode(Appendable out,int value) throws IOException { _EL_   value=toVLQSigned(value); _EL_   do { _EL_     int digit=value & VLQ_BASE_MASK; _EL_     value>>>=VLQ_BASE_SHIFT; _EL_     if (value > 0) { _EL_       digit|=VLQ_CONTINUATION_BIT; _EL_     } _EL_     out.append(Base64.toBase64(digit)); _EL_   } _EL_  while (value > 0); _EL_ } _EL_ ', 'public mxICellOverlay removeCellOverlay(Object cell,mxICellOverlay overlay){ _EL_   if (overlay == null) { _EL_     removeCellOverlays(cell); _EL_   } _EL_  else { _EL_     mxICellOverlay[] arr=getCellOverlays(cell); _EL_     if (arr != null) { _EL_       List<mxICellOverlay> list=Arrays.asList(arr); _EL_       if (list.remove(overlay)) { _EL_         removeCellOverlayComponent(overlay,cell); _EL_       } _EL_       arr=(mxICellOverlay[])list.toArray(); _EL_       overlays.put(cell,arr); _EL_     } _EL_   } _EL_   return overlay; _EL_ } _EL_ ', 'public void removeForeignKey(int idx){ _EL_   foreignKeys.remove(idx); _EL_ } _EL_ ', 'public java.lang.StringBuffer insert(int offset,int i){ _EL_   internal.insert(offset,i); _EL_   return this; _EL_ } _EL_ ', 'public void addGefaehrdungsUmsetzung(GefaehrdungsUmsetzung gefaehrdung){ _EL_   if (!allGefaehrdungsUmsetzungen.contains(gefaehrdung)) { _EL_     allGefaehrdungsUmsetzungen.add(gefaehrdung); _EL_   } _EL_ } _EL_ ', 'String normalizeClassPath(String classPath,boolean generateRelative){ _EL_   char sep=CauchoUtil.getPathSeparatorChar(); _EL_   int head=0; _EL_   int tail=0; _EL_   CharBuffer cb=CharBuffer.allocate(); _EL_   while (head < classPath.length()) { _EL_     tail=classPath.indexOf(sep,head); _EL_     if (tail < 0)     tail=classPath.length(); _EL_     if (tail > head) { _EL_       String segment=classPath.substring(head,tail); _EL_       segment=normalizePath(segment,generateRelative); _EL_       if (segment != null) { _EL_         if (cb.length() != 0)         cb.append(sep); _EL_         cb.append(segment); _EL_       } _EL_     } _EL_     head=tail + 1; _EL_   } _EL_   return cb.close(); _EL_ } _EL_ ', 'protected ASN1Sequence(ASN1Encodable obj){ _EL_   seq.addElement(obj); _EL_ } _EL_ ', 'public final void push(int value){ _EL_   int ff=m_firstFree; _EL_   if ((ff + 1) >= m_mapSize) { _EL_     if (null == m_map) { _EL_       m_map=new int[m_blocksize]; _EL_       m_mapSize=m_blocksize; _EL_     } _EL_  else { _EL_       m_mapSize+=m_blocksize; _EL_       int newMap[]=new int[m_mapSize]; _EL_       System.arraycopy(m_map,0,newMap,0,ff + 1); _EL_       m_map=newMap; _EL_     } _EL_   } _EL_   m_map[ff]=value; _EL_   ff++; _EL_   m_firstFree=ff; _EL_ } _EL_ ', 'protected Node stringConversion(Node node){ _EL_   TypeElement stringElement=elements.getTypeElement("java.lang.String"); _EL_   if (!TypesUtils.isString(node.getType())) { _EL_     Node converted=new StringConversionNode(node.getTree(),node,stringElement.asType()); _EL_     addToConvertedLookupMap(converted); _EL_     insertNodeAfter(converted,node); _EL_     return converted; _EL_   } _EL_  else { _EL_     return node; _EL_   } _EL_ } _EL_ ', 'private void validate() throws URISyntaxException { _EL_   String s=getScheme(); _EL_   if ((s != null) && (s.compareTo("file") == 0)) { _EL_     return; _EL_   } _EL_   if (getLocalVmId() == -1) { _EL_     throw new URISyntaxException(uri.toString(),"Local vmid required"); _EL_   } _EL_ } _EL_ ', 'public synchronized void finishWriting(){ _EL_   doneWriting=true; _EL_   notifyAll(); _EL_ } _EL_ ', 'private long offset2PhysicalAddress(final long offset){ _EL_   return offset + headerSize; _EL_ } _EL_ ', '@Override public void internalEntityDecl(String name,XMLString text,XMLString nonNormalizedText,Augmentations augs) throws XNIException { _EL_   try { _EL_     if (fDeclHandler != null) { _EL_       fDeclHandler.internalEntityDecl(name,text.toString()); _EL_     } _EL_   } _EL_  catch (  SAXException e) { _EL_     throw new XNIException(e); _EL_   } _EL_ } _EL_ ', 'public Object next(){ _EL_   if (pos < size)   return Array.get(array,pos++); _EL_   throw new NoSuchElementException("No more elements: " + pos + " / "+ size); _EL_ } _EL_ ', 'public void addMessages(List<? extends Message> messages){ _EL_   if (SHOW_LOGS)   Logger.v(TAG,">> addMessages, lock " + messages); _EL_   mQueueLock.lock(TAG); _EL_   mPlayerMessagesQueue.addAll(messages); _EL_   mQueueLock.notify(TAG); _EL_   if (SHOW_LOGS)   Logger.v(TAG,"<< addMessages, unlock " + messages); _EL_   mQueueLock.unlock(TAG); _EL_ } _EL_ ', 'public PermissionRequestObject onRational(Func3 rationalFunc){ _EL_   mRationalFunc=rationalFunc; _EL_   return this; _EL_ } _EL_ ', 'public GenericPrincipal(String userName,String password,List<String> roles,Map<String,List<GenericPrincipal.Attribute>> writeEntries,Map<String,List<GenericPrincipal.Attribute>> readEntries,Map<String,List<GenericPrincipal.Attribute>> executeTasks){ _EL_   this.userName=userName; _EL_   this.password=password; _EL_   this.writeEntries=writeEntries; _EL_   this.readEntries=readEntries; _EL_   this.executeTasks=executeTasks; _EL_   if (roles != null) { _EL_     this.roles=new String[roles.size()]; _EL_     this.roles=roles.toArray(this.roles); _EL_     if (this.roles.length > 0)     Arrays.sort(this.roles); _EL_   } _EL_   writeMatchObjects=new HashMap<String,MatchObject>(); _EL_   readMatchObjects=new HashMap<String,MatchObject>(); _EL_   executeMatchObjects=new HashMap<String,MatchObject>(); _EL_   userDefinedRoles=new ArrayList<String>(); _EL_ } _EL_ ', 'public boolean equals(Object other){ _EL_   if (other == this) { _EL_     return true; _EL_   } _EL_   if (!(other instanceof X509CRLEntry)) { _EL_     return false; _EL_   } _EL_   X509CRLEntry obj=(X509CRLEntry)other; _EL_   try { _EL_     return Arrays.equals(getEncoded(),obj.getEncoded()); _EL_   } _EL_  catch (  CRLException e) { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public static int roll1D6(){ _EL_   return rand.nextInt(6) + 1; _EL_ } _EL_ ', 'static byte[] septetStream2octetStream(byte[] septets){ _EL_   int octetLength=(int)Math.ceil(((septets.length * 7)) / 8.0); _EL_   byte[] octets=new byte[octetLength]; _EL_   for (int i=0; i < septets.length; i++) { _EL_     for (int j=0; j < 7; j++) { _EL_       if ((septets[i] & (1 << j)) != 0) { _EL_         int bitIndex=(i * 7) + j; _EL_         octets[bitIndex >>> 3]|=1 << (bitIndex & 7); _EL_       } _EL_     } _EL_   } _EL_   return octets; _EL_ } _EL_ ', 'public CTaggingPanel(final JFrame parent,final ZyGraph graph,final ITagManager manager){ _EL_   super(new BorderLayout()); _EL_   m_tagsTree=new CTagsTree(parent,graph,manager); _EL_   final JScrollPane pane=new JScrollPane(m_tagsTree); _EL_   pane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED); _EL_   pane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED); _EL_   add(pane); _EL_   setBorder(new TitledBorder(new LineBorder(Color.LIGHT_GRAY,1,true),"Tagging")); _EL_   setDoubleBuffered(true); _EL_ } _EL_ ', '@Override public double height(final int markerIndex){ _EL_   MathUtils.checkRangeInclusive(markerIndex,1,markerArray.length - 1); _EL_   return markerArray[markerIndex].markerHeight; _EL_ } _EL_ ', 'public double distance(Instance first,Instance second,PerformanceStats stats){ _EL_   return Math.sqrt(distance(first,second,Double.POSITIVE_INFINITY,stats)); _EL_ } _EL_ ', 'public static void reindex(Connection conn) throws SQLException { _EL_   init(conn); _EL_   removeAllTriggers(conn,TRIGGER_PREFIX); _EL_   removeIndexFiles(conn); _EL_   Statement stat=conn.createStatement(); _EL_   ResultSet rs=stat.executeQuery("SELECT * FROM " + SCHEMA + ".INDEXES"); _EL_   while (rs.next()) { _EL_     String schema=rs.getString("SCHEMA"); _EL_     String table=rs.getString("TABLE"); _EL_     createTrigger(conn,schema,table); _EL_     indexExistingRows(conn,schema,table); _EL_   } _EL_ } _EL_ ', 'private void resizeTables(){ _EL_   if (mObjectDataUsed > mObjectData.length - MAX_DATA_SIZE) { _EL_     mObjectData=Arrays.copyOf(mObjectData,mObjectData.length * 2); _EL_   } _EL_   if (mObjectCount < mTypes.length) { _EL_     return; _EL_   } _EL_   mObjectOffset=Arrays.copyOf(mObjectOffset,mObjectOffset.length * 2); _EL_   mTypes=Arrays.copyOf(mTypes,mTypes.length * 2); _EL_   mObjects=Arrays.copyOf(mObjects,mObjects.length * 2); _EL_   mRect=Arrays.copyOf(mRect,mRect.length * 2); _EL_ } _EL_ ', 'private boolean hasNextInetSocketAddress(){ _EL_   return nextInetSocketAddressIndex < inetSocketAddresses.size(); _EL_ } _EL_ ', 'private float angle(TouchState s){ _EL_   return (float)Math.toDegrees(Math.atan2(s.yDown - s.yCurrent,s.xDown - s.xCurrent)); _EL_ } _EL_ ', 'private static String removeQuotesEncolosingOption(String fileName,String option) throws Exception { _EL_   String option1=removeQuoteCharactersIfNecessary(fileName,option,\'"\'); _EL_   if (!option1.equals(option)) { _EL_     return option1; _EL_   } _EL_   return removeQuoteCharactersIfNecessary(fileName,option,\'\\\'\'); _EL_ } _EL_ ', '@Override public String generateLabel(XYDataset dataset,int series){ _EL_   ParamChecks.nullNotPermitted(dataset,"dataset"); _EL_   String label=MessageFormat.format(this.formatPattern,createItemArray(dataset,series)); _EL_   return label; _EL_ } _EL_ ', 'private boolean matchStrings(String pattern,String str,Map<String,String> uriTemplateVariables){ _EL_   AntPathStringMatcher matcher=new AntPathStringMatcher(pattern,str,uriTemplateVariables); _EL_   return matcher.matchStrings(); _EL_ } _EL_ ', 'public RVMField findDeclaredField(Atom fieldName,Atom fieldDescriptor){ _EL_   for (  RVMField field : declaredFields) { _EL_     if (field.getName() == fieldName && field.getDescriptor() == fieldDescriptor) { _EL_       return field; _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public Quarter(Date time,TimeZone zone){ _EL_   this(time,zone,Locale.getDefault()); _EL_ } _EL_ ', 'public static boolean readBoolean(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException { _EL_   if (required) { _EL_     return jsonArray.getBoolean(index); _EL_   } _EL_   if (notNull && jsonArray.isNull(index)) { _EL_     throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index)); _EL_   } _EL_   boolean value=false; _EL_   if (!jsonArray.isNull(index)) { _EL_     value=jsonArray.getBoolean(index); _EL_   } _EL_   return value; _EL_ } _EL_ ', 'protected static void autoBoxing(MethodVisitor mv,Type fieldType){ _EL_ switch (fieldType.getSort()) { _EL_ case Type.BOOLEAN: _EL_     mv.visitMethodInsn(INVOKESTATIC,"java/lang/Boolean","valueOf","(Z)Ljava/lang/Boolean;"); _EL_   break; _EL_ case Type.BYTE: _EL_ mv.visitMethodInsn(INVOKESTATIC,"java/lang/Byte","valueOf","(B)Ljava/lang/Byte;"); _EL_ break; _EL_ case Type.CHAR: _EL_ mv.visitMethodInsn(INVOKESTATIC,"java/lang/Character","valueOf","(C)Ljava/lang/Character;"); _EL_ break; _EL_ case Type.SHORT: _EL_ mv.visitMethodInsn(INVOKESTATIC,"java/lang/Short","valueOf","(S)Ljava/lang/Short;"); _EL_ break; _EL_ case Type.INT: _EL_ mv.visitMethodInsn(INVOKESTATIC,"java/lang/Integer","valueOf","(I)Ljava/lang/Integer;"); _EL_ break; _EL_ case Type.FLOAT: _EL_ mv.visitMethodInsn(INVOKESTATIC,"java/lang/Float","valueOf","(F)Ljava/lang/Float;"); _EL_ break; _EL_ case Type.LONG: _EL_ mv.visitMethodInsn(INVOKESTATIC,"java/lang/Long","valueOf","(J)Ljava/lang/Long;"); _EL_ break; _EL_ case Type.DOUBLE: _EL_ mv.visitMethodInsn(INVOKESTATIC,"java/lang/Double","valueOf","(D)Ljava/lang/Double;"); _EL_ break; _EL_ } _EL_ } _EL_ ', 'public final void openPdfFile(final byte[] data) throws PdfException { _EL_   final RandomAccessBuffer pdf_datafile; _EL_   try { _EL_     if (PdfFileReader.alwaysCacheInMemory == -1 || data.length < PdfFileReader.alwaysCacheInMemory) { _EL_       pdf_datafile=new RandomAccessDataBuffer(data); _EL_     } _EL_  else { _EL_       try { _EL_         final File file=File.createTempFile("page",".bin",new File(ObjectStore.temp_dir)); _EL_         tempFileName=file.getAbsolutePath(); _EL_         final java.io.FileOutputStream a=new java.io.FileOutputStream(file); _EL_         a.write(data); _EL_         a.flush(); _EL_         a.close(); _EL_         pdf_datafile=new RandomAccessFileBuffer(tempFileName,"r"); _EL_       } _EL_  catch (      final Exception e) { _EL_         throw new RuntimeException("Unable to create temporary file in " + ObjectStore.temp_dir + \' \'+ e); _EL_       } _EL_     } _EL_     objectReader.init(pdf_datafile); _EL_   } _EL_  catch (  final Exception e) { _EL_     LogWriter.writeLog("Exception " + e + " accessing file"); _EL_     throw new PdfException("Exception " + e + " accessing file"); _EL_   } _EL_ } _EL_ ', 'public static void main(String[] args){ _EL_   if (args.length < 2) { _EL_     LOGGER.error("There must be at least two arguments"); _EL_     return; _EL_   } _EL_   int lastIndex=args.length - 1; _EL_   Path[] files=getFiles(args); _EL_   Main main=new Main(); _EL_   main.generate(files[lastIndex],Arrays.copyOf(files,lastIndex)); _EL_ } _EL_ ', '@Nullable E awaitMatch(int start){ _EL_   for (int step=0, totalSpins=0; (step < ARENA_LENGTH) && (totalSpins < SPINS); step++) { _EL_     int index=(start + step) & ARENA_MASK; _EL_     AtomicReference<Object> slot=arena[index]; _EL_     Object found=slot.get(); _EL_     if (found == FREE) { _EL_       if (slot.compareAndSet(FREE,WAITER)) { _EL_         int slotSpins=0; _EL_         for (; ; ) { _EL_           found=slot.get(); _EL_           if ((found != WAITER) && slot.compareAndSet(found,FREE)) { _EL_             @SuppressWarnings("unchecked") E e=(E)found; _EL_             return e; _EL_           } _EL_  else           if ((slotSpins >= SPINS_PER_STEP) && (found == WAITER) && (slot.compareAndSet(WAITER,FREE))) { _EL_             totalSpins+=slotSpins; _EL_             break; _EL_           } _EL_           slotSpins++; _EL_         } _EL_       } _EL_     } _EL_  else     if ((found != WAITER) && slot.compareAndSet(found,FREE)) { _EL_       @SuppressWarnings("unchecked") E e=(E)found; _EL_       return e; _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'private ArrayList<Signature> constructOneSignatures(SetDBIDs[][] partitions,final long[][] markers){ _EL_   final int dim=partitions.length; _EL_   ArrayList<Signature> signatures=new ArrayList<>(); _EL_   for (int d=0; d < dim; d++) { _EL_     final DBIDs[] parts=partitions[d]; _EL_     if (parts == null) { _EL_       continue; _EL_     } _EL_     final long[] marked=markers[d]; _EL_     for (int start=BitsUtil.nextSetBit(marked,0); start >= 0; ) { _EL_       int end=BitsUtil.nextClearBit(marked,start + 1); _EL_       end=(end == -1) ? dim : end; _EL_       int[] signature=new int[dim << 1]; _EL_       Arrays.fill(signature,-1); _EL_       signature[d << 1]=start; _EL_       signature[(d << 1) + 1]=end - 1; _EL_       HashSetModifiableDBIDs sids=unionDBIDs(parts,start,end); _EL_       if (LOG.isDebugging()) { _EL_         LOG.debug("1-signature: " + d + " "+ start+ "-"+ (end - 1)); _EL_       } _EL_       signatures.add(new Signature(signature,sids)); _EL_       start=(end < dim) ? BitsUtil.nextSetBit(marked,end + 1) : -1; _EL_     } _EL_   } _EL_   return signatures; _EL_ } _EL_ ', "public static int findEndTrimNewlineChars(CharSequence s){ _EL_   for (int i=s.length(); i > 0; ) { _EL_     if (s.charAt(i - 1) != '\\n') { _EL_       return i; _EL_     } _EL_     i--; _EL_     if (i > 0 && s.charAt(i - 1) == '\\r') { _EL_       i--; _EL_     } _EL_   } _EL_   return 0; _EL_ } _EL_ ", 'private void calcCoordinates(final float x,final float[][] Trm,float charSpacing){ _EL_   final float[][] trm=new float[3][3]; _EL_   for (int xx=0; xx < 3; xx++) { _EL_     System.arraycopy(Trm[xx],0,trm[xx],0,3); _EL_   } _EL_   x1=x; _EL_   x2=trm[2][0] - (charSpacing * trm[0][0]); _EL_   if (glyphData.isHorizontal()) { _EL_     if (trm[1][0] < 0) { _EL_       x1=x + trm[1][0] - (charSpacing * trm[0][0]); _EL_       x2=trm[2][0]; _EL_     } _EL_  else     if (trm[1][0] > 0) { _EL_       x1=x; _EL_       x2=trm[2][0]; _EL_     } _EL_   } _EL_  else   if (trm[1][0] > 0) { _EL_     x1=trm[2][0]; _EL_     x2=x + trm[1][0] - (charSpacing * trm[0][0]); _EL_   } _EL_  else   if (trm[1][0] < 0) { _EL_     x2=trm[2][0]; _EL_     x1=x + trm[1][0] - (charSpacing * trm[0][0]); _EL_   } _EL_ } _EL_ ', 'public void printEntry(Writer w){ _EL_   try { _EL_     String indent="                      "; _EL_     int indentWidth=indent.length(); _EL_     HardcopyWriter ww=(HardcopyWriter)w; _EL_     int textSpace=ww.getCharactersPerLine() - indentWidth - 1; _EL_     String newLine="\\n"; _EL_     w.write(newLine,0,1); _EL_     String s="   ID:                " + _id; _EL_     w.write(s,0,s.length()); _EL_     if (!(_consistNumber.equals(""))) { _EL_       w.write(newLine,0,1); _EL_       s="   Consist number:    " + _consistNumber; _EL_       w.write(s,0,s.length()); _EL_     } _EL_     if (!(_roadName.equals(""))) { _EL_       w.write(newLine,0,1); _EL_       s="   Road name:         " + _roadName; _EL_       w.write(s,0,s.length()); _EL_     } _EL_     if (!(_roadNumber.equals(""))) { _EL_       w.write(newLine,0,1); _EL_       s="   Road number:       " + _roadNumber; _EL_       w.write(s,0,s.length()); _EL_     } _EL_     if (!(_model.equals(""))) { _EL_       w.write(newLine,0,1); _EL_       s="   Model:             " + _model; _EL_       w.write(s,0,s.length()); _EL_     } _EL_     if (!(_loco1DccAddress.equals(""))) { _EL_       w.write(newLine,0,1); _EL_       s="   Lead Address:      " + _loco1DccAddress + "  "+ _loco1Direction; _EL_       w.write(s,0,s.length()); _EL_     } _EL_     if (!(_loco2DccAddress.equals(""))) { _EL_       w.write(newLine,0,1); _EL_       s="   Rear Address:      " + _loco2DccAddress + "  "+ _loco2Direction; _EL_       w.write(s,0,s.length()); _EL_     } _EL_     if (!(_loco3DccAddress.equals(""))) { _EL_       w.write(newLine,0,1); _EL_       s="   Mid1 Address:      " + _loco3DccAddress + "  "+ _loco3Direction; _EL_       w.write(s,0,s.length()); _EL_     } _EL_     if (!(_loco4DccAddress.equals(""))) { _EL_       w.write(newLine,0,1); _EL_       s="   Mid2 Address:      " + _loco4DccAddress + "  "+ _loco4Direction; _EL_       w.write(s,0,s.length()); _EL_     } _EL_     if (!(_loco5DccAddress.equals(""))) { _EL_       w.write(newLine,0,1); _EL_       s="   Mid3 Address:      " + _loco5DccAddress + "  "+ _loco5Direction; _EL_       w.write(s,0,s.length()); _EL_     } _EL_     if (!(_loco6DccAddress.equals(""))) { _EL_       w.write(newLine,0,1); _EL_       s="   Mid4 Address:      " + _loco6DccAddress + "  "+ _loco6Direction; _EL_       w.write(s,0,s.length()); _EL_     } _EL_     if (!(_comment.equals(""))) { _EL_       Vector<String> commentVector=wrapComment(_comment,textSpace); _EL_       int k=0; _EL_       w.write(newLine,0,1); _EL_       s="   Comment:           " + commentVector.elementAt(k); _EL_       w.write(s,0,s.length()); _EL_       k++; _EL_       while (k < commentVector.size()) { _EL_         String token=commentVector.elementAt(k); _EL_         if (!token.equals("\\n")) { _EL_           s=indent + token; _EL_         } _EL_  else { _EL_           s=token; _EL_         } _EL_         w.write(s,0,s.length()); _EL_         k++; _EL_       } _EL_     } _EL_     w.write(newLine,0,1); _EL_   } _EL_  catch (  IOException e) { _EL_     log.error("Error printing ConsistRosterEntry: " + e); _EL_   } _EL_ } _EL_ ', 'protected java.util.Date fromJulian(int julian){ _EL_   YMD ymd=new YMD(julian); _EL_   GregorianCalendar cal=new GregorianCalendar(ymd.year,ymd.month - 1,ymd.day); _EL_   return cal.getTime(); _EL_ } _EL_ ', 'public synchronized boolean removeLast(K obj){ _EL_   if (peekLast() != obj) { _EL_     return false; _EL_   } _EL_   array=Arrays.copyOf(array,array.length - 1); _EL_   return true; _EL_ } _EL_ ', 'private boolean serializeCompactRDFStructProp(XMPNode node,int indent,boolean hasRDFResourceQual) throws XMPException, IOException { _EL_   boolean hasAttrFields=false; _EL_   boolean hasElemFields=false; _EL_   boolean emitEndTag=true; _EL_   for (Iterator ic=node.iterateChildren(); ic.hasNext(); ) { _EL_     XMPNode field=(XMPNode)ic.next(); _EL_     if (canBeRDFAttrProp(field)) { _EL_       hasAttrFields=true; _EL_     } _EL_  else { _EL_       hasElemFields=true; _EL_     } _EL_     if (hasAttrFields && hasElemFields) { _EL_       break; _EL_     } _EL_   } _EL_   if (hasRDFResourceQual && hasElemFields) { _EL_     throw new XMPException("Can\'t mix rdf:resource qualifier and element fields",XMPError.BADRDF); _EL_   } _EL_   if (!node.hasChildren()) { _EL_     write(" rdf:parseType=\\"Resource\\"/>"); _EL_     writeNewline(); _EL_     emitEndTag=false; _EL_   } _EL_  else   if (!hasElemFields) { _EL_     serializeCompactRDFAttrProps(node,indent + 1); _EL_     write("/>"); _EL_     writeNewline(); _EL_     emitEndTag=false; _EL_   } _EL_  else   if (!hasAttrFields) { _EL_     write(" rdf:parseType=\\"Resource\\">"); _EL_     writeNewline(); _EL_     serializeCompactRDFElementProps(node,indent + 1); _EL_   } _EL_  else { _EL_     write(\'>\'); _EL_     writeNewline(); _EL_     writeIndent(indent + 1); _EL_     write(RDF_STRUCT_START); _EL_     serializeCompactRDFAttrProps(node,indent + 2); _EL_     write(">"); _EL_     writeNewline(); _EL_     serializeCompactRDFElementProps(node,indent + 1); _EL_     writeIndent(indent + 1); _EL_     write(RDF_STRUCT_END); _EL_     writeNewline(); _EL_   } _EL_   return emitEndTag; _EL_ } _EL_ ', 'public default UtilityTable queryUtil(BNetwork network,String queryVar,Assignment evidence){ _EL_   return queryUtil(new Query.UtilQuery(network,Arrays.asList(queryVar),evidence)); _EL_ } _EL_ ', 'public static float[] stringListToNumeric(List<String> scoreList) throws NumberFormatException { _EL_   float[] scores=new float[scoreList.size()]; _EL_   int scoreId=0; _EL_   for (  String score : scoreList) { _EL_     float floatScore=(float)Double.parseDouble(score); _EL_     if (Float.isNaN(floatScore)) { _EL_       throw new NumberFormatException("Unparseable number: " + score); _EL_     } _EL_     scores[scoreId++]=floatScore; _EL_   } _EL_   return scores; _EL_ } _EL_ ', '@Override public void next(){ _EL_   currentImage=Optional.of(addIndexAndGetImageByOffset(+1)); _EL_   eventBus.post(new SourceHasPendingUpdateEvent(this)); _EL_ } _EL_ ', 'public void writeShort(int value) throws IOException { _EL_   checkWritePrimitiveTypes(); _EL_   primitiveTypes.writeShort(value); _EL_ } _EL_ ', 'private boolean isInitialized(){ _EL_   return poolNames != null && !poolNames.isEmpty(); _EL_ } _EL_ ', 'public void onRegisterClick(View view){ _EL_   Intent register=new Intent(Intent.ACTION_VIEW,Uri.parse(getString(R.string.welcome_link_url))); _EL_   setResult(RESULT_CANCELED); _EL_   startActivity(register); _EL_ } _EL_ ', 'private void registerExtraValidSubject(String subject){ _EL_   extraValidSubjects.add(subject); _EL_   restoredStatements.addAll(unknownSubjects.removeAll(subject)); _EL_ } _EL_ ', 'public static String trimLine(String line){ _EL_   int idx=line.indexOf("//"); _EL_   if (idx != -1) { _EL_     line=line.substring(0,idx); _EL_   } _EL_   return line.trim(); _EL_ } _EL_ ', 'public double distance2(double p1,double p2){ _EL_   return (p1 - p2) * (p1 - p2); _EL_ } _EL_ ', 'public static void appendInstruction(OFFlowMod.Builder fmb,OFInstruction inst){ _EL_   List<OFInstruction> newIl=new ArrayList<OFInstruction>(); _EL_   List<OFInstruction> oldIl=fmb.getInstructions(); _EL_   if (oldIl != null) { _EL_     newIl.addAll(fmb.getInstructions()); _EL_   } _EL_   for (  OFInstruction i : newIl) { _EL_     if (i.getType() == inst.getType()) { _EL_       newIl.remove(i); _EL_     } _EL_   } _EL_   newIl.add(inst); _EL_   fmb.setInstructions(newIl); _EL_ } _EL_ ', 'public Iterator<T> iterator(){ _EL_   return orderList.iterator(); _EL_ } _EL_ ', 'private void verifyDomainsIsNotInUse(StringSet domains){ _EL_   checkForActiveTenantsUsingDomains(domains); _EL_   checkForVdcRolesUsingDomains(domains); _EL_   checkForTenantRolesUsingDomains(domains); _EL_   checkForUserGroupsUsingDomains(domains); _EL_ } _EL_ ', 'private Hashtable<IPoint,List<ICircle>> filter(Hashtable<IPoint,ICircle[]> circleIntersections){ _EL_   Hashtable<IPoint,List<ICircle>> real=new Hashtable<IPoint,List<ICircle>>(); _EL_   for (  IPoint pt : circleIntersections.keySet()) { _EL_     ICircle[] circs=circleIntersections.get(pt); _EL_     for (int i=0; i < circs.length - 1; i++) { _EL_       for (int j=i + 1; j < circs.length; j++) { _EL_         IPoint[] pts=intersects(circs[i],circs[j]); _EL_         if (pts != null) { _EL_           for (          IPoint p : pts) { _EL_             report(real,p,circs[i],circs[j]); _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return real; _EL_ } _EL_ ', 'public void initWithoutJUnitForFixture(Class fixture,Method method){ _EL_   this.testClass=fixture; _EL_   this.testMethodName=method.getName(); _EL_ } _EL_ ', 'protected JavaType findSerializationType(Annotated a,boolean useStaticTyping,JavaType declaredType){ _EL_   Class<?> serClass=_annotationIntrospector.findSerializationType(a); _EL_   if (serClass != null) { _EL_     Class<?> rawDeclared=declaredType.getRawClass(); _EL_     if (serClass.isAssignableFrom(rawDeclared)) { _EL_       declaredType=declaredType.widenBy(serClass); _EL_     } _EL_  else { _EL_       if (!rawDeclared.isAssignableFrom(serClass)) { _EL_         throw new IllegalArgumentException("Illegal concrete-type annotation for method \'" + a.getName() + "\': class "+ serClass.getName()+ " not a super-type of (declared) class "+ rawDeclared.getName()); _EL_       } _EL_       declaredType=_config.constructSpecializedType(declaredType,serClass); _EL_     } _EL_     useStaticTyping=true; _EL_   } _EL_   JavaType secondary=BeanSerializerFactory.modifySecondaryTypesByAnnotation(_config,a,declaredType); _EL_   if (secondary != declaredType) { _EL_     useStaticTyping=true; _EL_     declaredType=secondary; _EL_   } _EL_   if (!useStaticTyping) { _EL_     JsonSerialize.Typing typing=_annotationIntrospector.findSerializationTyping(a); _EL_     if (typing != null) { _EL_       useStaticTyping=(typing == JsonSerialize.Typing.STATIC); _EL_     } _EL_   } _EL_   return useStaticTyping ? declaredType : null; _EL_ } _EL_ ', 'public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2){ _EL_   Map map=of(); _EL_   map.put(k1,v1); _EL_   map.put(k2,v2); _EL_   return map; _EL_ } _EL_ ', '@Override public void write(char[] chr) throws IOException { _EL_   out.write(chr); _EL_ } _EL_ ', 'public static void load(marytts.modules.synthesis.Voice maryVoice) throws NoSuchPropertyException { _EL_   if (mary2freettsVoices == null)   mary2freettsVoices=new HashMap<marytts.modules.synthesis.Voice,com.sun.speech.freetts.Voice>(); _EL_   if (freetts2maryVoices == null)   freetts2maryVoices=new HashMap<com.sun.speech.freetts.Voice,marytts.modules.synthesis.Voice>(); _EL_   if (mary2freettsVoices.containsKey(maryVoice))   return; _EL_   load(maryVoice,createFreeTTSVoice(maryVoice)); _EL_ } _EL_ ', 'public void append(int key,double value){ _EL_   if (mSize != 0 && key <= mKeys[mSize - 1]) { _EL_     put(key,value); _EL_     return; _EL_   } _EL_   int pos=mSize; _EL_   if (pos >= mKeys.length) { _EL_     int n=ArrayUtils.idealIntArraySize(pos + 1); _EL_     int[] nkeys=new int[n]; _EL_     double[] nvalues=new double[n]; _EL_     System.arraycopy(mKeys,0,nkeys,0,mKeys.length); _EL_     System.arraycopy(mValues,0,nvalues,0,mValues.length); _EL_     mKeys=nkeys; _EL_     mValues=nvalues; _EL_   } _EL_   mKeys[pos]=key; _EL_   mValues[pos]=value; _EL_   mSize=pos + 1; _EL_ } _EL_ ', 'public synchronized void addIncrementalClassifierListener(IncrementalClassifierListener cl){ _EL_   m_incrementalClassifierListeners.add(cl); _EL_ } _EL_ ', 'public float readR4() throws java.io.IOException { _EL_   return Float.intBitsToFloat((int)readDWORD()); _EL_ } _EL_ ', 'public Collection engineGenerateCertificates(InputStream inStream) throws CertificateException { _EL_   java.security.cert.Certificate cert; _EL_   List certs=new ArrayList(); _EL_   while ((cert=engineGenerateCertificate(inStream)) != null) { _EL_     certs.add(cert); _EL_   } _EL_   return certs; _EL_ } _EL_ ', 'protected void convertOrder(SqlSelect select,Blackboard bb,RelCollation collation,List<SqlNode> orderExprList,SqlNode offset,SqlNode fetch){ _EL_   if (select.getOrderList() == null || select.getOrderList().getList().isEmpty()) { _EL_     assert collation.getFieldCollations().isEmpty(); _EL_     if ((offset == null || ((SqlLiteral)offset).bigDecimalValue().equals(BigDecimal.ZERO)) && fetch == null) { _EL_       return; _EL_     } _EL_   } _EL_   bb.setRoot(LogicalSort.create(bb.root,collation,offset == null ? null : convertExpression(offset),fetch == null ? null : convertExpression(fetch)),false); _EL_   if (orderExprList.size() > 0 && !bb.top) { _EL_     final List<RexNode> exprs=new ArrayList<>(); _EL_     final RelDataType rowType=bb.root.getRowType(); _EL_     final int fieldCount=rowType.getFieldCount() - orderExprList.size(); _EL_     for (int i=0; i < fieldCount; i++) { _EL_       exprs.add(rexBuilder.makeInputRef(bb.root,i)); _EL_     } _EL_     bb.setRoot(LogicalProject.create(bb.root,exprs,rowType.getFieldNames().subList(0,fieldCount)),false); _EL_   } _EL_ } _EL_ ', 'public void tickBlock(BlockPos pos){ _EL_   List<BlockPos> validCoords=new ArrayList<>(); _EL_   for (int xOffset=-TICK_RANGE; xOffset <= TICK_RANGE; xOffset++) { _EL_     for (int zOffset=-TICK_RANGE; zOffset <= TICK_RANGE; zOffset++) { _EL_       if (xOffset == 0 && zOffset == 0)       continue; _EL_       if (isValidSwapPosition(pos.add(xOffset,0,zOffset)))       validCoords.add(pos.add(xOffset,0,zOffset)); _EL_     } _EL_   } _EL_   if (!validCoords.isEmpty() && !world.isRemote) { _EL_     BlockPos toSwap=validCoords.get(rand.nextInt(validCoords.size())); _EL_     world.setBlockState(toSwap,stateToSet,1 | 2); _EL_   } _EL_ } _EL_ ', 'public synchronized int updatePurchase(String orderId,String productId,PurchaseState purchaseState,long purchaseTime,String developerPayload){ _EL_   insertOrder(orderId,productId,purchaseState,purchaseTime,developerPayload); _EL_   Cursor cursor=mDb.query(PURCHASE_HISTORY_TABLE_NAME,HISTORY_COLUMNS,HISTORY_PRODUCT_ID_COL + "=?",new String[]{productId},null,null,null,null); _EL_   if (cursor == null) { _EL_     return 0; _EL_   } _EL_   int quantity=0; _EL_   try { _EL_     while (cursor.moveToNext()) { _EL_       int stateIndex=cursor.getInt(2); _EL_       PurchaseState state=PurchaseState.valueOf(stateIndex); _EL_       if (state == PurchaseState.PURCHASED || state == PurchaseState.REFUNDED) { _EL_         quantity+=1; _EL_       } _EL_     } _EL_     updatePurchasedItem(productId,quantity); _EL_   } _EL_   finally { _EL_     if (cursor != null) { _EL_       cursor.close(); _EL_     } _EL_   } _EL_   return quantity; _EL_ } _EL_ ', 'public void removeAllLimitLines(){ _EL_   mLimitLines.clear(); _EL_ } _EL_ ', '@Override public void flush() throws IOException { _EL_   flushBuffer(); _EL_   _outputStream.flush(); _EL_ } _EL_ ', 'public Vector(double comp[]) throws NegativeArraySizeException { _EL_   int n=comp.length; _EL_   if (n <= 0)   throw new NegativeArraySizeException("Vector components cannot be empty"); _EL_   components=new double[n]; _EL_   System.arraycopy(comp,0,components,0,n); _EL_ } _EL_ ', 'public long lonToPixel(double lon){ _EL_   return (long)((lon + 180) / 360 * Math.pow(2,zoom) * 256); _EL_ } _EL_ ', 'public static boolean worldFileValuesAppearGeographic(AVList values){ _EL_   double xLocation; _EL_   double yLocation; _EL_   double xPixelSize; _EL_   double yPixelSize; _EL_   Object o=values.getValue(WORLD_FILE_X_LOCATION); _EL_   if (o != null && o instanceof Double)   xLocation=(Double)o; _EL_  else   return false; _EL_   o=values.getValue(WORLD_FILE_Y_LOCATION); _EL_   if (o != null && o instanceof Double)   yLocation=(Double)o; _EL_  else   return false; _EL_   o=values.getValue(WORLD_FILE_X_PIXEL_SIZE); _EL_   if (o != null && o instanceof Double)   xPixelSize=(Double)o; _EL_  else   return false; _EL_   o=values.getValue(WORLD_FILE_Y_PIXEL_SIZE); _EL_   if (o != null && o instanceof Double)   yPixelSize=(Double)o; _EL_  else   return false; _EL_   return (Angle.isValidLongitude(xPixelSize) && Angle.isValidLatitude(yPixelSize) && Angle.isValidLongitude(xLocation)&& Angle.isValidLatitude(yLocation)); _EL_ } _EL_ ', 'public void remove(SessionID sessionID){ _EL_   remoteSessionSet.remove(sessionID); _EL_ } _EL_ ', 'public Iterator<AbstractPage> childIterator(final boolean dirtyNodesOnly){ _EL_   if (dirtyNodesOnly) { _EL_     return new DirtyChildIterator(this); _EL_   } _EL_  else { _EL_     return new ChildIterator(); _EL_   } _EL_ } _EL_ ', 'public void enable() throws IOException { _EL_ synchronized (optOutLock) { _EL_     if (isOptOut()) { _EL_       configuration.set("opt-out",false); _EL_       configuration.save(configurationFile); _EL_     } _EL_     if (task == null) { _EL_       start(); _EL_     } _EL_   } _EL_ } _EL_ ', 'public HMACT64(byte[] key){ _EL_   super("HMACT64"); _EL_   int length=Math.min(key.length,BLOCK_LENGTH); _EL_   for (int i=0; i < length; i++) { _EL_     ipad[i]=(byte)(key[i] ^ IPAD); _EL_     opad[i]=(byte)(key[i] ^ OPAD); _EL_   } _EL_   for (int i=length; i < BLOCK_LENGTH; i++) { _EL_     ipad[i]=IPAD; _EL_     opad[i]=OPAD; _EL_   } _EL_   try { _EL_     md5=MessageDigest.getInstance("MD5"); _EL_   } _EL_  catch (  Exception ex) { _EL_     throw new IllegalStateException(ex.getMessage()); _EL_   } _EL_   engineReset(); _EL_ } _EL_ ', 'public boolean startsWith(String string){ _EL_   if (string == null)   return false; _EL_   int strlen=string.length(); _EL_   if (_length < strlen)   return false; _EL_   char[] buffer=_buffer; _EL_   int offset=_offset; _EL_   while (--strlen >= 0) { _EL_     if (buffer[offset + strlen] != string.charAt(strlen))     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private void writeRawBytesInternal(final ByteBuffer value) throws IOException { _EL_   int length=value.remaining(); _EL_   if (limit - position >= length) { _EL_     value.get(buffer,position,length); _EL_     position+=length; _EL_     totalBytesWritten+=length; _EL_   } _EL_  else { _EL_     final int bytesWritten=limit - position; _EL_     value.get(buffer,position,bytesWritten); _EL_     length-=bytesWritten; _EL_     position=limit; _EL_     totalBytesWritten+=bytesWritten; _EL_     refreshBuffer(); _EL_     while (length > limit) { _EL_       value.get(buffer,0,limit); _EL_       output.write(buffer,0,limit); _EL_       length-=limit; _EL_       totalBytesWritten+=limit; _EL_     } _EL_     value.get(buffer,0,length); _EL_     position=length; _EL_     totalBytesWritten+=length; _EL_   } _EL_ } _EL_ ', 'public boolean isSrcClass(SootClass clz){ _EL_   return srcClasses.contains(clz.getName()); _EL_ } _EL_ ', 'private void processLDIF(Connection conn,String path) throws UpgradeException { _EL_   ChangeRecordReader reader=null; _EL_   try { _EL_     if (DEBUG.messageEnabled()) { _EL_       DEBUG.message("Processing LDIF file under " + path); _EL_     } _EL_     Map<String,String> tags=new HashMap<String,String>(2); _EL_     tags.put("@SM_CONFIG_ROOT_SUFFIX@",baseDN); _EL_     tags.put("@DB_NAME@","userRoot"); _EL_     String content=AMSetupServlet.readFile(path); _EL_     String tagSwapped=StringUtils.tagSwap(content,tags); _EL_     reader=new LDIFChangeRecordReader(new ByteArrayInputStream(tagSwapped.getBytes(Charset.forName("UTF-8")))); _EL_     ChangeRecordWriter writer=new ConnectionChangeRecordWriter(conn); _EL_     while (reader.hasNext()) { _EL_       writer.writeChangeRecord(reader.readChangeRecord()); _EL_     } _EL_   } _EL_  catch (  IOException ioe) { _EL_     DEBUG.error("An error occurred while processing " + path,ioe); _EL_     throw new UpgradeException(ioe); _EL_   } _EL_  finally { _EL_     IOUtils.closeIfNotNull(reader); _EL_   } _EL_ } _EL_ ', 'private void printProgress(long row,long rowFrom,long rowTill){ _EL_   long rowsProcessed=row + chunkSize - rowFrom; _EL_   if (rowsProcessed > (rowTill - rowFrom))   rowsProcessed=(rowTill - rowFrom); _EL_   print(String.format("%d%%",(int)(((double)(rowsProcessed) / (double)(rowTill - rowFrom)) * 100.0f))); _EL_ } _EL_ ', 'void postRemoteReleaseLock(Object objectName) throws InterruptedException { _EL_   if (!acquireDestroyReadLock(0)) { _EL_     return; _EL_   } _EL_   try { _EL_     checkDestroyed(); _EL_     drainPermittedRequests(); _EL_     grantLock(objectName); _EL_   } _EL_  catch (  LockServiceDestroyedException e) { _EL_   } _EL_ catch (  LockGrantorDestroyedException e) { _EL_   } _EL_  finally { _EL_     releaseDestroyReadLock(); _EL_   } _EL_ } _EL_ ', 'public long addCompletedBatch(RequestBatch requestBatch){ _EL_   long completedBatchId=insertBatchAsCompleted(requestBatch); _EL_   for (  Request request : requestBatch.getRequests()) { _EL_     request.setBatchId(completedBatchId); _EL_     File file=new File(request.getDestinationPath()); _EL_     long length=file.exists() ? file.length() : 0; _EL_     insertRequestAsCompletedDownload(request.getDestinationPath(),length,request); _EL_   } _EL_   return completedBatchId; _EL_ } _EL_ ', 'public static _Fields findByThriftId(int fieldId){ _EL_ switch (fieldId) { _EL_ case 1: _EL_     return MESSAGE; _EL_ default : _EL_   return null; _EL_ } _EL_ } _EL_ ', 'public static File createMinimalSplit(String inputFolder,int numFolds,int numAvailableJCas,boolean isSequence) throws Exception { _EL_   File outputFolder=new File(inputFolder,"output"); _EL_   int splitNum=(int)Math.ceil(numFolds / (double)numAvailableJCas); _EL_   CollectionReaderDescription createReader=CollectionReaderFactory.createReaderDescription(BinaryCasReader.class,BinaryCasReader.PARAM_SOURCE_LOCATION,inputFolder,BinaryCasReader.PARAM_PATTERNS,"*.bin"); _EL_   AnalysisEngineDescription multiplier=AnalysisEngineFactory.createEngineDescription(FoldClassificationUnitCasMultiplier.class,FoldClassificationUnitCasMultiplier.PARAM_REQUESTED_SPLITS,splitNum,FoldClassificationUnitCasMultiplier.PARAM_USE_SEQUENCES,isSequence); _EL_   AnalysisEngineDescription xmiWriter=AnalysisEngineFactory.createEngineDescription(BinaryCasWriter.class,BinaryCasWriter.PARAM_TARGET_LOCATION,outputFolder.getAbsolutePath(),BinaryCasWriter.PARAM_FORMAT,"6+"); _EL_   AnalysisEngineDescription both=AnalysisEngineFactory.createEngineDescription(multiplier,xmiWriter); _EL_   SimplePipeline.runPipeline(createReader,both); _EL_   isNumberOfCasCreatedLargerEqualNumFolds(outputFolder,numFolds); _EL_   return outputFolder; _EL_ } _EL_ ', 'public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias) throws XMLSignatureException { _EL_   return signXML(doc,certAlias,null); _EL_ } _EL_ ', 'FiringPlan guessBestFiringPlanUnderHeat(Entity shooter,@Nullable EntityState shooterState,Targetable target,@Nullable EntityState targetState,int maxHeat,IGame game){ _EL_   if (maxHeat < 0) { _EL_     maxHeat=0; _EL_   } _EL_   FiringPlan alphaStrike=guessFullFiringPlan(shooter,shooterState,target,targetState,game); _EL_   if (alphaStrike.getHeat() <= maxHeat && !(shooter instanceof Infantry) && !(shooter instanceof BattleArmor)) { _EL_     return alphaStrike; _EL_   } _EL_   FiringPlan heatPlans[]=calcFiringPlansUnderHeat(shooter,alphaStrike); _EL_   Arrays.sort(heatPlans); _EL_   if (heatPlans.length > 0) { _EL_     return heatPlans[0]; _EL_   } _EL_  else { _EL_     return new FiringPlan(target); _EL_   } _EL_ } _EL_ ', 'public int postFiles(String[] args,int startIndexInArgs,OutputStream out,String type){ _EL_   reset(); _EL_   int filesPosted=0; _EL_   for (int j=startIndexInArgs; j < args.length; j++) { _EL_     File srcFile=new File(args[j]); _EL_     if (srcFile.isDirectory() && srcFile.canRead()) { _EL_       filesPosted+=postDirectory(srcFile,out,type); _EL_     } _EL_  else     if (srcFile.isFile() && srcFile.canRead()) { _EL_       filesPosted+=postFiles(new File[]{srcFile},out,type); _EL_     } _EL_  else { _EL_       File parent=srcFile.getParentFile(); _EL_       if (parent == null)       parent=new File("."); _EL_       String fileGlob=srcFile.getName(); _EL_       GlobFileFilter ff=new GlobFileFilter(fileGlob,false); _EL_       File[] files=parent.listFiles(ff); _EL_       if (files == null || files.length == 0) { _EL_         warn("No files or directories matching " + srcFile); _EL_         continue; _EL_       } _EL_       filesPosted+=postFiles(parent.listFiles(ff),out,type); _EL_     } _EL_   } _EL_   return filesPosted; _EL_ } _EL_ ', 'public void clearSearchable(){ _EL_   searchables.clear(); _EL_ } _EL_ ', '@Deprecated public ShapelessRecipe addIngredient(int count,Material ingredient,int rawdata){ _EL_   Validate.isTrue(ingredients.size() + count <= 9,"Shapeless recipes cannot have more than 9 ingredients"); _EL_   if (rawdata == -1) { _EL_     rawdata=Short.MAX_VALUE; _EL_   } _EL_   while (count-- > 0) { _EL_     ingredients.add(new ItemStack(ingredient,1,(short)rawdata)); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public String order(){ _EL_   return mOrderBy.length() > 0 ? mOrderBy.toString() : null; _EL_ } _EL_ ', 'static AxesWalker findClone(AxesWalker key,Vector cloneList){ _EL_   if (null != cloneList) { _EL_     int n=cloneList.size(); _EL_     for (int i=0; i < n; i+=2) { _EL_       if (key == cloneList.elementAt(i))       return (AxesWalker)cloneList.elementAt(i + 1); _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static byte[] encodingToBytes(final String str,final String encoding){ _EL_   if (str == null) { _EL_     return null; _EL_   } _EL_   try { _EL_     return str.getBytes(encoding); _EL_   } _EL_  catch (  final UnsupportedEncodingException e) { _EL_     throw new Error(encoding + " not supported! Original exception: " + e); _EL_   } _EL_ } _EL_ ', 'public void before() throws Throwable { _EL_   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) { _EL_     ProcessBuilder processBuilder=new ProcessBuilder(); _EL_     processBuilder.command("logcat","-c"); _EL_     processBuilder.redirectErrorStream(); _EL_     Process process=processBuilder.start(); _EL_     process.waitFor(); _EL_     if (process.exitValue() != 0) { _EL_       Log.e(LOG_TAG,"Error while clearing logcat, exitValue=" + process.exitValue()); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void addMeta(char meta,String replacement){ _EL_   metaCharacterSet.set(meta); _EL_   replacementMap.put(new String(new char[]{meta}),replacement); _EL_ } _EL_ ', 'public static List<History> findHistoryByJob(EntityManager em,JPAEntity job,BigInteger limit){ _EL_   requireArgument(em != null,"Entity manager cannot be null."); _EL_   requireArgument(job != null,"The job cannot be null."); _EL_   TypedQuery<History> query=em.createNamedQuery("History.findByJob",History.class); _EL_   if (limit != null) { _EL_     query.setMaxResults(limit.intValue()); _EL_   } _EL_   try { _EL_     query.setParameter("entity",job); _EL_     return query.getResultList(); _EL_   } _EL_  catch (  NoResultException ex) { _EL_     return new ArrayList<History>(0); _EL_   } _EL_ } _EL_ ', 'private void updatePendingNodes(final int newLandmarkIndex,final RouterPriorityQueue<Node> pendingNodes){ _EL_   final List<Double> newEstRemTravCosts=new ArrayList<>(); _EL_   final List<Node> nodesToBeUpdated=new ArrayList<>(); _EL_   final InternalLandmarkData landmarkData=new InternalLandmarkData(); _EL_   for (  Node node : pendingNodes) { _EL_     final AStarNodeData role=getData(node); _EL_     final PreProcessLandmarks.LandmarksData ppRole=preprocess.getNodeData(node); _EL_     landmarkData.setDelegate(ppRole); _EL_     final double newEstRemTravCost=estimateRemainingTravelCost(landmarkData,newLandmarkIndex); _EL_     if (newEstRemTravCost > role.getExpectedRemainingCost()) { _EL_       nodesToBeUpdated.add(node); _EL_       newEstRemTravCosts.add(newEstRemTravCost); _EL_     } _EL_   } _EL_   for (  Node node : nodesToBeUpdated) { _EL_     pendingNodes.remove(node); _EL_   } _EL_   for (int i=0; i < nodesToBeUpdated.size(); i++) { _EL_     final Node node=nodesToBeUpdated.get(i); _EL_     final AStarNodeData data=getData(node); _EL_     data.setExpectedRemainingCost(newEstRemTravCosts.get(i)); _EL_     pendingNodes.add(node,getPriority(data)); _EL_   } _EL_ } _EL_ ', 'private void drawOverflowIndicator(final Graphics g,int maxX){ _EL_   int width=25; _EL_   int height=10; _EL_   int xOffset=10; _EL_   int stepSize=width / 5; _EL_   int dotSize=3; _EL_   int x=maxX - width - xOffset; _EL_   int y=button.getSize().height - height; _EL_   g.setColor(LIGHTER_GRAY); _EL_   g.fillRect(x,y,width,width); _EL_   g.setColor(Color.GRAY); _EL_   g.drawRoundRect(x,y,width,width,5,5); _EL_   g.setColor(Color.BLACK); _EL_   g.fillOval(x + stepSize,y + 4,dotSize,dotSize); _EL_   g.fillOval(x + stepSize * 2,y + 4,dotSize,dotSize); _EL_   g.fillOval(x + stepSize * 3,y + 4,dotSize,dotSize); _EL_   g.dispose(); _EL_ } _EL_ ', 'public CloseListener(Object resource){ _EL_   _resource=resource; _EL_ } _EL_ ', '@Override public IndexRequest routing(String routing){ _EL_   if (routing != null && routing.length() == 0) { _EL_     this.routing=null; _EL_   } _EL_  else { _EL_     this.routing=routing; _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public byte[] receive() throws NetworkException { _EL_   try { _EL_     packet.setLength(DatagramConnection.DEFAULT_DATAGRAM_SIZE); _EL_     connection.receive(packet); _EL_     int packetLength=packet.getLength(); _EL_     byte[] data=new byte[packetLength]; _EL_     System.arraycopy(packet.getData(),0,data,0,packetLength); _EL_     return data; _EL_   } _EL_  catch (  IOException e) { _EL_     throw new NetworkException("Failed to receive datagram packet!",e); _EL_   } _EL_ } _EL_ ', '@Override protected void forceDeleteAttributeAt(int position){ _EL_   double[] newValues=new double[m_AttValues.length - 1]; _EL_   System.arraycopy(m_AttValues,0,newValues,0,position); _EL_   if (position < m_AttValues.length - 1) { _EL_     System.arraycopy(m_AttValues,position + 1,newValues,position,m_AttValues.length - (position + 1)); _EL_   } _EL_   m_AttValues=newValues; _EL_ } _EL_ ', 'public synchronized AlphabeticIndex addLabels(Locale locale){ _EL_   addLabels(peer,locale.toString()); _EL_   return this; _EL_ } _EL_ ', 'public void addSeparator(){ _EL_   if (log.isLoggable(PlatformLogger.Level.FINER)) { _EL_     log.finer("addSeparator is not implemented"); _EL_   } _EL_ } _EL_ ', 'private static Class<?> loadClass(URL[] urls,String name) throws ClassNotFoundException { _EL_   ClassLoader parent=getRMIContextClassLoader(); _EL_   if (loaderLog.isLoggable(Log.VERBOSE)) { _EL_     loaderLog.log(Log.VERBOSE,"(thread context class loader: " + parent + ")"); _EL_   } _EL_   SecurityManager sm=System.getSecurityManager(); _EL_   if (sm == null) { _EL_     try { _EL_       Class<?> c=Class.forName(name,false,parent); _EL_       if (loaderLog.isLoggable(Log.VERBOSE)) { _EL_         loaderLog.log(Log.VERBOSE,"class \\"" + name + "\\" found via "+ "thread context class loader "+ "(no security manager: codebase disabled), "+ "defined by "+ c.getClassLoader()); _EL_       } _EL_       return c; _EL_     } _EL_  catch (    ClassNotFoundException e) { _EL_       if (loaderLog.isLoggable(Log.BRIEF)) { _EL_         loaderLog.log(Log.BRIEF,"class \\"" + name + "\\" not found via "+ "thread context class loader "+ "(no security manager: codebase disabled)",e); _EL_       } _EL_       throw new ClassNotFoundException(e.getMessage() + " (no security manager: RMI class loader disabled)",e.getException()); _EL_     } _EL_   } _EL_   Loader loader=lookupLoader(urls,parent); _EL_   try { _EL_     if (loader != null) { _EL_       loader.checkPermissions(); _EL_     } _EL_   } _EL_  catch (  SecurityException e) { _EL_     try { _EL_       Class<?> c=loadClassForName(name,false,parent); _EL_       if (loaderLog.isLoggable(Log.VERBOSE)) { _EL_         loaderLog.log(Log.VERBOSE,"class \\"" + name + "\\" found via "+ "thread context class loader "+ "(access to codebase denied), "+ "defined by "+ c.getClassLoader()); _EL_       } _EL_       return c; _EL_     } _EL_  catch (    ClassNotFoundException unimportant) { _EL_       if (loaderLog.isLoggable(Log.BRIEF)) { _EL_         loaderLog.log(Log.BRIEF,"class \\"" + name + "\\" not found via "+ "thread context class loader "+ "(access to codebase denied)",e); _EL_       } _EL_       throw new ClassNotFoundException("access to class loader denied",e); _EL_     } _EL_   } _EL_   try { _EL_     Class<?> c=loadClassForName(name,false,loader); _EL_     if (loaderLog.isLoggable(Log.VERBOSE)) { _EL_       loaderLog.log(Log.VERBOSE,"class \\"" + name + "\\" "+ "found via codebase, "+ "defined by "+ c.getClassLoader()); _EL_     } _EL_     return c; _EL_   } _EL_  catch (  ClassNotFoundException e) { _EL_     if (loaderLog.isLoggable(Log.BRIEF)) { _EL_       loaderLog.log(Log.BRIEF,"class \\"" + name + "\\" not found via codebase",e); _EL_     } _EL_     throw e; _EL_   } _EL_ } _EL_ ', 'public static final List<INaviRawModule> loadRawModules(final AbstractSQLProvider provider) throws CouldntLoadDataException { _EL_   Preconditions.checkNotNull(provider,"IE00416: Provider argument can not be null"); _EL_   final CConnection connection=provider.getConnection(); _EL_   final List<INaviRawModule> modules=new ArrayList<INaviRawModule>(); _EL_   if (!PostgreSQLHelpers.hasTable(connection,CTableNames.RAW_MODULES_TABLE)) { _EL_     return modules; _EL_   } _EL_   final String query="SELECT id, name FROM " + CTableNames.RAW_MODULES_TABLE + " ORDER BY id"; _EL_   try (ResultSet resultSet=connection.executeQuery(query,true)){ _EL_     while (resultSet.next()) { _EL_       final int rawModuleId=resultSet.getInt("id"); _EL_       final String name=PostgreSQLHelpers.readString(resultSet,"name"); _EL_       final boolean isComplete=PostgreSQLDatabaseFunctions.checkRawModulesTables(provider.getConnection(),PostgreSQLHelpers.getDatabaseName(provider.getConnection()),rawModuleId); _EL_       final int functionCount=isComplete ? PostgreSQLDatabaseFunctions.getRawModuleFunctionCount(connection,rawModuleId) : 0; _EL_       final CRawModule module=new CRawModule(rawModuleId,name,functionCount,isComplete,provider); _EL_       modules.add(module); _EL_     } _EL_   } _EL_  catch (  final SQLException e) { _EL_     throw new CouldntLoadDataException(e); _EL_   } _EL_   return modules; _EL_ } _EL_ ', 'void write(ImageOutputStream ios) throws IOException { _EL_   length=2 + data.length; _EL_   writeTag(ios); _EL_   ios.write(data); _EL_ } _EL_ ', 'public static int probRound(double value,Random rand){ _EL_   if (value >= 0) { _EL_     double lower=Math.floor(value); _EL_     double prob=value - lower; _EL_     if (rand.nextDouble() < prob) { _EL_       return (int)lower + 1; _EL_     } _EL_  else { _EL_       return (int)lower; _EL_     } _EL_   } _EL_  else { _EL_     double lower=Math.floor(Math.abs(value)); _EL_     double prob=Math.abs(value) - lower; _EL_     if (rand.nextDouble() < prob) { _EL_       return -((int)lower + 1); _EL_     } _EL_  else { _EL_       return -(int)lower; _EL_     } _EL_   } _EL_ } _EL_ ', 'Map<String,TypeName> convertPropertiesToTypes(Map<String,ExecutableElement> properties){ _EL_   Map<String,TypeName> types=new LinkedHashMap<String,TypeName>(); _EL_   for (  Map.Entry<String,ExecutableElement> entry : properties.entrySet()) { _EL_     ExecutableElement el=entry.getValue(); _EL_     types.put(entry.getKey(),TypeName.get(el.getReturnType())); _EL_   } _EL_   return types; _EL_ } _EL_ ', 'private static List<RegisterDescription> parseRegisterInformation(final Node node) throws MessageParserException { _EL_   final List<RegisterDescription> registers=new ArrayList<>(); _EL_   final NodeList nodes=node.getChildNodes(); _EL_   for (int i=0; i < nodes.getLength(); ++i) { _EL_     final Node child=nodes.item(i); _EL_     final String registerName=getAttribute(child,"name"); _EL_     final String registerSize=getAttribute(child,"size"); _EL_     final String registerEditable=getAttribute(child,"editable"); _EL_     registers.add(new RegisterDescription(registerName,Integer.valueOf(registerSize),Boolean.valueOf(registerEditable))); _EL_   } _EL_   return registers; _EL_ } _EL_ ', 'public NamedThreadFactory(String namePrefix){ _EL_   this.namePrefix=Objects.requireNonNull(namePrefix); _EL_   group=getThreadGroup(); _EL_   daemon=true; _EL_ } _EL_ ', 'String formatNumberList(TransformerImpl transformer,long[] list,int contextNode) throws TransformerException { _EL_   String numStr; _EL_   FastStringBuffer formattedNumber=StringBufferPool.get(); _EL_   try { _EL_     int nNumbers=list.length, numberWidth=1; _EL_     char numberType=\'1\'; _EL_     String formatToken, lastSepString=null, formatTokenString=null; _EL_     String lastSep="."; _EL_     boolean isFirstToken=true; _EL_     String formatValue=(null != m_format_avt) ? m_format_avt.evaluate(transformer.getXPathContext(),contextNode,this) : null; _EL_     if (null == formatValue)     formatValue="1"; _EL_     NumberFormatStringTokenizer formatTokenizer=new NumberFormatStringTokenizer(formatValue); _EL_     for (int i=0; i < nNumbers; i++) { _EL_       if (formatTokenizer.hasMoreTokens()) { _EL_         formatToken=formatTokenizer.nextToken(); _EL_         if (Character.isLetterOrDigit(formatToken.charAt(formatToken.length() - 1))) { _EL_           numberWidth=formatToken.length(); _EL_           numberType=formatToken.charAt(numberWidth - 1); _EL_         } _EL_  else         if (formatTokenizer.isLetterOrDigitAhead()) { _EL_           formatTokenString=formatToken; _EL_           while (formatTokenizer.nextIsSep()) { _EL_             formatToken=formatTokenizer.nextToken(); _EL_             formatTokenString+=formatToken; _EL_           } _EL_           if (!isFirstToken)           lastSep=formatTokenString; _EL_           formatToken=formatTokenizer.nextToken(); _EL_           numberWidth=formatToken.length(); _EL_           numberType=formatToken.charAt(numberWidth - 1); _EL_         } _EL_  else { _EL_           lastSepString=formatToken; _EL_           while (formatTokenizer.hasMoreTokens()) { _EL_             formatToken=formatTokenizer.nextToken(); _EL_             lastSepString+=formatToken; _EL_           } _EL_         } _EL_       } _EL_       if (null != formatTokenString && isFirstToken) { _EL_         formattedNumber.append(formatTokenString); _EL_       } _EL_  else       if (null != lastSep && !isFirstToken)       formattedNumber.append(lastSep); _EL_       getFormattedNumber(transformer,contextNode,numberType,numberWidth,list[i],formattedNumber); _EL_       isFirstToken=false; _EL_     } _EL_     while (formatTokenizer.isLetterOrDigitAhead()) { _EL_       formatTokenizer.nextToken(); _EL_     } _EL_     if (lastSepString != null)     formattedNumber.append(lastSepString); _EL_     while (formatTokenizer.hasMoreTokens()) { _EL_       formatToken=formatTokenizer.nextToken(); _EL_       formattedNumber.append(formatToken); _EL_     } _EL_     numStr=formattedNumber.toString(); _EL_   } _EL_   finally { _EL_     StringBufferPool.free(formattedNumber); _EL_   } _EL_   return numStr; _EL_ } _EL_ ', 'public int addColumn(Object newCol,int length) throws FitsException { _EL_   if (this.nFields > 0 && Array.getLength(newCol) != this.nRows) { _EL_     throw new FitsException("New column has different number of rows"); _EL_   } _EL_   if (this.nFields == 0) { _EL_     this.nRows=Array.getLength(newCol); _EL_   } _EL_   Object[] newData=new Object[this.nFields + 1]; _EL_   int[] newOffsets=new int[this.nFields + 1]; _EL_   int[] newLengths=new int[this.nFields + 1]; _EL_   Class<?>[] newTypes=new Class[this.nFields + 1]; _EL_   String[] newNulls=new String[this.nFields + 1]; _EL_   System.arraycopy(this.data,0,newData,0,this.nFields); _EL_   System.arraycopy(this.offsets,0,newOffsets,0,this.nFields); _EL_   System.arraycopy(this.lengths,0,newLengths,0,this.nFields); _EL_   System.arraycopy(this.types,0,newTypes,0,this.nFields); _EL_   System.arraycopy(this.nulls,0,newNulls,0,this.nFields); _EL_   this.data=newData; _EL_   this.offsets=newOffsets; _EL_   this.lengths=newLengths; _EL_   this.types=newTypes; _EL_   this.nulls=newNulls; _EL_   newData[this.nFields]=newCol; _EL_   this.offsets[this.nFields]=this.rowLen + 1; _EL_   this.lengths[this.nFields]=length; _EL_   this.types[this.nFields]=ArrayFuncs.getBaseClass(newCol); _EL_   this.rowLen+=length + 1; _EL_   if (this.isNull != null) { _EL_     boolean[] newIsNull=new boolean[this.nRows * (this.nFields + 1)]; _EL_     int add=0; _EL_     for (int i=0; i < this.isNull.length; i+=1) { _EL_       if (i % this.nFields == 0) { _EL_         add+=1; _EL_       } _EL_       if (this.isNull[i]) { _EL_         newIsNull[i + add]=true; _EL_       } _EL_     } _EL_     this.isNull=newIsNull; _EL_   } _EL_   this.nFields+=1; _EL_   this.buffer=null; _EL_   return this.nFields; _EL_ } _EL_ ', 'public void addTransaction(SIPServerTransaction serverTransaction) throws IOException { _EL_   if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))   logger.logDebug("added transaction " + serverTransaction); _EL_   serverTransaction.map(); _EL_   addTransactionHash(serverTransaction); _EL_ } _EL_ ', "protected ByteArrayOutputStream parseBytes(ByteArrayOutputStream bos) throws IOException { _EL_   int ch; _EL_   for (ch=skipWhitespace(); ch >= 0 && ch != '<'; ch=skipWhitespace()) { _EL_     int b1=ch; _EL_     int b2=read(); _EL_     int b3=read(); _EL_     int b4=read(); _EL_     if (b4 != '=') { _EL_       int chunk=((base64Decode[b1] << 18) + (base64Decode[b2] << 12) + (base64Decode[b3] << 6)+ (base64Decode[b4])); _EL_       bos.write(chunk >> 16); _EL_       bos.write(chunk >> 8); _EL_       bos.write(chunk); _EL_     } _EL_  else     if (b3 != '=') { _EL_       int chunk=((base64Decode[b1] << 10) + (base64Decode[b2] << 4) + (base64Decode[b3] >> 2)); _EL_       bos.write(chunk >> 8); _EL_       bos.write(chunk); _EL_     } _EL_  else { _EL_       int chunk=((base64Decode[b1] << 2) + (base64Decode[b2] >> 4)); _EL_       bos.write(chunk); _EL_     } _EL_   } _EL_   if (ch == '<')   _peek=ch; _EL_   return bos; _EL_ } _EL_ ", 'public void reset(){ _EL_   if (mDownloadBandwidth != null) { _EL_     mDownloadBandwidth.reset(); _EL_   } _EL_   mCurrentBandwidthConnectionQuality.set(ConnectionQuality.UNKNOWN); _EL_ } _EL_ ', 'private DiffPart decodeFullRevision(final int blockSize_L) throws UnsupportedEncodingException, DecodingException { _EL_   if (blockSize_L < 1) { _EL_     throw new DecodingException("Invalid value for blockSize_L: " + blockSize_L); _EL_   } _EL_   int l=r.read(blockSize_L); _EL_   ByteArrayOutputStream output=new ByteArrayOutputStream(); _EL_   for (int i=0; i < l; i++) { _EL_     output.write(r.readByte()); _EL_   } _EL_   DiffPart part=new DiffPart(DiffAction.FULL_REVISION_UNCOMPRESSED); _EL_   part.setText(output.toString(WIKIPEDIA_ENCODING)); _EL_   return part; _EL_ } _EL_ ', 'void unlink(Node<E> p,Node<E> trail){ _EL_   p.item=null; _EL_   trail.next=p.next; _EL_   if (last == p)   last=trail; _EL_   if (count.getAndDecrement() == capacity)   notFull.signal(); _EL_ } _EL_ ', 'public static float mixFriction(float friction1,float friction2){ _EL_   return MathUtils.sqrt(friction1 * friction2); _EL_ } _EL_ ', 'public String serialize(Object obj,String contentType) throws ApiException { _EL_   if (contentType.startsWith("application/json")) { _EL_     return json.serialize(obj); _EL_   } _EL_  else { _EL_     throw new ApiException(400,"can not serialize object into Content-Type: " + contentType); _EL_   } _EL_ } _EL_ ', 'private boolean isNativeVolumeExpansionSupported(Volume vplexVolume,Long newSize){ _EL_   boolean useNativeVolumeExpansion=true; _EL_   StringSet assocVolumeIds=vplexVolume.getAssociatedVolumes(); _EL_   if (null == assocVolumeIds) { _EL_     s_logger.warn("VPLEX volume {} has no backend volumes. It was probably ingested \'Virtual Volume Only\'.",vplexVolume.forDisplay()); _EL_     useNativeVolumeExpansion=false; _EL_   } _EL_  else { _EL_     for (    String assocVolumeId : assocVolumeIds) { _EL_       Volume assocVolume=_permissionsHelper.getObjectById(URI.create(assocVolumeId),Volume.class); _EL_       try { _EL_         super.verifyVolumeExpansionRequest(assocVolume,newSize); _EL_       } _EL_  catch (      Exception e) { _EL_         useNativeVolumeExpansion=false; _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   return useNativeVolumeExpansion; _EL_ } _EL_ ', 'public void updateGUI(RosterEntry r){ _EL_   roadName.setText(r.getRoadName()); _EL_   roadNumber.setText(r.getRoadNumber()); _EL_   mfg.setText(r.getMfg()); _EL_   owner.setText(r.getOwner()); _EL_   model.setText(r.getModel()); _EL_   comment.setText(r.getComment()); _EL_   decoderModel.setText(r.getDecoderModel()); _EL_   decoderFamily.setText(r.getDecoderFamily()); _EL_   decoderComment.setText(r.getDecoderComment()); _EL_   dateUpdated.setText(r.getDateUpdated()); _EL_   maxSpeedSpinner.setValue(Integer.valueOf(r.getMaxSpeedPCT())); _EL_ } _EL_ ', 'public TerminalSize with(TerminalSize size){ _EL_   if (equals(size)) { _EL_     return this; _EL_   } _EL_   return size; _EL_ } _EL_ ', 'private boolean isGzipAllowed(final HttpServletRequest request){ _EL_   return !DispatcherStreamLocator.isIncludedRequest(request) && WroUtil.isGzipSupported(request); _EL_ } _EL_ ', 'public ReplayProcessor(int bufferSize,boolean unbounded){ _EL_   if (unbounded) { _EL_     this.buffer=new UnboundedBuffer<>(bufferSize); _EL_   } _EL_  else { _EL_     this.buffer=new BoundedBuffer<>(bufferSize); _EL_   } _EL_   SUBSCRIBERS.lazySet(this,EMPTY); _EL_ } _EL_ ', 'protected void onShowConversations(@NonNull List<C> conversations){ _EL_   if (DEBUG) { _EL_     Log.d(TAG,"Showing " + conversations.size() + " conversations"); _EL_   } _EL_   mView.showConversations(new ArrayList<>(conversations)); _EL_ } _EL_ ', 'protected int read() throws IOException { _EL_   if (offset == buffer.length) { _EL_     throw new ASN1Exception("Unexpected end of encoding"); _EL_   } _EL_   if (in == null) { _EL_     return buffer[offset++] & 0xFF; _EL_   } _EL_  else { _EL_     int octet=in.read(); _EL_     if (octet == -1) { _EL_       throw new ASN1Exception("Unexpected end of encoding"); _EL_     } _EL_     buffer[offset++]=(byte)octet; _EL_     return octet; _EL_   } _EL_ } _EL_ ', 'public void enqueueJob(final Runnable job){ _EL_ synchronized (mSleepSync) { _EL_     if (hasJob()) { _EL_       throw new IllegalStateException("Job already enqueued"); _EL_     } _EL_     setJob(job); _EL_     mSleepSync.notifyAll(); _EL_   } _EL_ } _EL_ ', 'public void startElement(String uri,String localName,String qName,Attributes attributes) throws org.xml.sax.SAXException { _EL_   if (qName.equals(PrintData.XML_TAG)) { _EL_     String name=attributes.getValue(PrintData.XML_ATTRIBUTE_NAME); _EL_     if (m_pd == null) { _EL_       m_pd=new PrintData(m_ctx,name); _EL_       push(m_pd); _EL_     } _EL_  else { _EL_       PrintData temp=new PrintData(m_ctx,name); _EL_       m_curPD.addNode(temp); _EL_       push(temp); _EL_     } _EL_   } _EL_  else   if (qName.equals(PrintData.XML_ROW_TAG)) { _EL_     m_curPD.addRow(false,0); _EL_   } _EL_  else   if (qName.equals(PrintDataElement.XML_TAG)) { _EL_     m_curPDEname=attributes.getValue(PrintDataElement.XML_ATTRIBUTE_NAME); _EL_     m_curPDEvalue=new StringBuffer(); _EL_   } _EL_ } _EL_ ', '@Override public int read(char[] array,int offset,int length){ _EL_   if (idx >= charSequence.length()) { _EL_     return -1; _EL_   } _EL_   if (array == null) { _EL_     throw new NullPointerException("Character array is missing"); _EL_   } _EL_   if (length < 0 || offset < 0 || offset + length > array.length) { _EL_     throw new IndexOutOfBoundsException("Array Size=" + array.length + ", offset="+ offset+ ", length="+ length); _EL_   } _EL_   int count=0; _EL_   for (int i=0; i < length; i++) { _EL_     int c=read(); _EL_     if (c == -1) { _EL_       return count; _EL_     } _EL_     array[offset + i]=(char)c; _EL_     count++; _EL_   } _EL_   return count; _EL_ } _EL_ ', 'public void updateNonceParameters(){ _EL_   if (mNextNonce.equals(mNonce)) { _EL_     mCnonceCounter++; _EL_   } _EL_  else { _EL_     mCnonceCounter=1; _EL_     mNonce=mNextNonce; _EL_   } _EL_ } _EL_ ', 'private void matchVPools(URI rpSystemId){ _EL_   List<URI> storagePoolIds=ConnectivityUtil.getRPSystemStoragePools(_dbClient,rpSystemId); _EL_   StringBuffer errorMessage=new StringBuffer(); _EL_   if (storagePoolIds != null && !storagePoolIds.isEmpty()) { _EL_     List<StoragePool> storagePools=_dbClient.queryObject(StoragePool.class,storagePoolIds); _EL_     ImplicitPoolMatcher.matchModifiedStoragePoolsWithAllVirtualPool(storagePools,_dbClient,_coordinator,errorMessage); _EL_   } _EL_ } _EL_ ', 'public static BigDecimal calculateFee(Player player,int price){ _EL_   BigDecimal fee=BigDecimal.valueOf(price); _EL_   fee=fee.multiply(BigDecimal.valueOf(TRADING_FEE_PERCENTAGE)); _EL_   if (player.isBadBoy()) { _EL_     fee=fee.multiply(BigDecimal.valueOf(1 + TRADING_FEE_PLAYER_KILLER_PENALTY)); _EL_   } _EL_   BigDecimal feeBonus=BigDecimal.ONE; _EL_   feeBonus=BigDecimal.valueOf(Math.exp(-player.getTradescore() / FEE_BONUS_CONSTANT)); _EL_   fee=fee.multiply(feeBonus); _EL_   return fee.max(BigDecimal.ONE); _EL_ } _EL_ ', 'private static ResultPoint[] findVertices180(BitMatrix matrix,boolean tryHarder){ _EL_   int height=matrix.getHeight(); _EL_   int width=matrix.getWidth(); _EL_   int halfWidth=width >> 1; _EL_   ResultPoint[] result=new ResultPoint[8]; _EL_   boolean found=false; _EL_   int[] counters=new int[START_PATTERN_REVERSE.length]; _EL_   int rowStep=Math.max(1,height >> (tryHarder ? 9 : 7)); _EL_   for (int i=height - 1; i > 0; i-=rowStep) { _EL_     int[] loc=findGuardPattern(matrix,halfWidth,i,halfWidth,true,START_PATTERN_REVERSE,counters); _EL_     if (loc != null) { _EL_       result[0]=new ResultPoint(loc[1],i); _EL_       result[4]=new ResultPoint(loc[0],i); _EL_       found=true; _EL_       break; _EL_     } _EL_   } _EL_   if (found) { _EL_     found=false; _EL_     for (int i=0; i < height; i+=rowStep) { _EL_       int[] loc=findGuardPattern(matrix,halfWidth,i,halfWidth,true,START_PATTERN_REVERSE,counters); _EL_       if (loc != null) { _EL_         result[1]=new ResultPoint(loc[1],i); _EL_         result[5]=new ResultPoint(loc[0],i); _EL_         found=true; _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   counters=new int[STOP_PATTERN_REVERSE.length]; _EL_   if (found) { _EL_     found=false; _EL_     for (int i=height - 1; i > 0; i-=rowStep) { _EL_       int[] loc=findGuardPattern(matrix,0,i,halfWidth,false,STOP_PATTERN_REVERSE,counters); _EL_       if (loc != null) { _EL_         result[2]=new ResultPoint(loc[0],i); _EL_         result[6]=new ResultPoint(loc[1],i); _EL_         found=true; _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   if (found) { _EL_     found=false; _EL_     for (int i=0; i < height; i+=rowStep) { _EL_       int[] loc=findGuardPattern(matrix,0,i,halfWidth,false,STOP_PATTERN_REVERSE,counters); _EL_       if (loc != null) { _EL_         result[3]=new ResultPoint(loc[0],i); _EL_         result[7]=new ResultPoint(loc[1],i); _EL_         found=true; _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   return found ? result : null; _EL_ } _EL_ ', 'public static String join(double[] self,String separator){ _EL_   StringBuilder buffer=new StringBuilder(); _EL_   boolean first=true; _EL_   if (separator == null)   separator=""; _EL_   for (  double next : self) { _EL_     if (first) { _EL_       first=false; _EL_     } _EL_  else { _EL_       buffer.append(separator); _EL_     } _EL_     buffer.append(next); _EL_   } _EL_   return buffer.toString(); _EL_ } _EL_ ', 'protected void writeShort(int value) throws IOException { _EL_   out.write(value & 0xff); _EL_   out.write((value >> 8) & 0xff); _EL_ } _EL_ ', 'public EntityQuery orderBy(String... fields){ _EL_   this.orderBy=Arrays.asList(fields); _EL_   return this; _EL_ } _EL_ ', 'public StemmedString(String orig,String stemmed){ _EL_   strOrig=orig; _EL_   strStemmed=stemmed; _EL_ } _EL_ ', 'public LogNetworkStreamMerger(LogRequest req,MediaType mediaType,LogSvcPropertiesLoader propertiesLoader){ _EL_   logger.trace("In LogNetworkStreamMerger\'s constructor"); _EL_   this.request=req; _EL_   this.mediaType=mediaType; _EL_   this.propertiesLoader=propertiesLoader; _EL_   List<LogNetworkReader> readers=getLogNetworkStreams(); _EL_   int size=readers.size(); _EL_   logHeads=new LogMessage[size]; _EL_   this.logStreamList=new LogNetworkReader[size]; _EL_   int index=0; _EL_   for (  LogNetworkReader reader : readers) { _EL_     logStreamList[index]=reader; _EL_     logHeads[index]=null; _EL_     index++; _EL_   } _EL_ } _EL_ ', "public static String packCipherSuites(String[] ciphers){ _EL_   String cipherSet=null; _EL_   if (ciphers != null) { _EL_     StringBuffer buf=new StringBuffer(); _EL_     for (int i=0; i < ciphers.length; i++) { _EL_       buf.append(ciphers[i]); _EL_       if (i < ciphers.length - 1) { _EL_         buf.append(','); _EL_       } _EL_     } _EL_     cipherSet=buf.toString(); _EL_   } _EL_   return cipherSet; _EL_ } _EL_ ", 'private void ensureTupleArray(int row){ _EL_   int nrows=Math.max(m_table.getRowCount(),row + 1); _EL_   if (m_tuples == null) { _EL_     m_tuples=new TableTuple[nrows]; _EL_   } _EL_  else   if (m_tuples.length < nrows) { _EL_     int capacity=Math.max((3 * m_tuples.length) / 2 + 1,nrows); _EL_     TableTuple[] tuples=new TableTuple[capacity]; _EL_     System.arraycopy(m_tuples,0,tuples,0,m_tuples.length); _EL_     m_tuples=tuples; _EL_   } _EL_ } _EL_ ', 'private static boolean isAnArgument(final String arg){ _EL_   return (arg.startsWith("-") && (arg.length() > 1) && !Character.isDigit(arg.charAt(1))); _EL_ } _EL_ ', 'private synchronized static void removeChildren(Node node,short type,boolean deep){ _EL_   NodeList list=node.getChildNodes(); _EL_   for (int i=list.getLength(); i >= 0; i--) { _EL_     Node n=list.item(i); _EL_     if (n == null)     continue; _EL_     if (n.getNodeType() == type || type == UNDEFINED_NODE)     node.removeChild(XMLCaster.toRawNode(n)); _EL_  else     if (deep)     removeChildren(n,type,deep); _EL_   } _EL_ } _EL_ ', 'public final void lazySet(V newValue){ _EL_   unsafe.putOrderedObject(this,valueOffset,newValue); _EL_ } _EL_ ', 'public boolean isValidSavepoint(Savepoint sp){ _EL_   if (isSource())   return false; _EL_   boolean result=false; _EL_   if (sp != null)   result=true; _EL_   return result; _EL_ } _EL_ ', 'public static void columnsFor(ResultSet resultSet,TableEditor editor) throws SQLException { _EL_   List<Column> columns=new ArrayList<>(); _EL_   columnsFor(resultSet,null); _EL_   editor.setColumns(columns); _EL_ } _EL_ ', 'public void clear(){ _EL_   if (mOriginalValues != null) { _EL_ synchronized (mLock) { _EL_       mOriginalValues.clear(); _EL_     } _EL_   } _EL_  else { _EL_     mObjects.clear(); _EL_   } _EL_   if (mNotifyOnChange)   notifyDataSetChanged(); _EL_ } _EL_ ', 'private long resetUidValidity() throws IOException { _EL_   long timestamp=System.currentTimeMillis(); _EL_   setUidValidity(timestamp); _EL_   return timestamp; _EL_ } _EL_ ', 'public final ArrayList<Move> pseudoLegalMoves(Position pos){ _EL_   ArrayList<Move> moveList=getMoveListObj(); _EL_   final boolean wtm=pos.whiteMove; _EL_   for (int x=0; x < 8; x++) { _EL_     for (int y=0; y < 8; y++) { _EL_       int sq=Position.getSquare(x,y); _EL_       int p=pos.getPiece(sq); _EL_       if ((p == Piece.EMPTY) || (Piece.isWhite(p) != wtm)) { _EL_         continue; _EL_       } _EL_       if ((p == Piece.WROOK) || (p == Piece.BROOK) || (p == Piece.WQUEEN)|| (p == Piece.BQUEEN)) { _EL_         if (addDirection(moveList,pos,sq,7 - x,1))         return moveList; _EL_         if (addDirection(moveList,pos,sq,7 - y,8))         return moveList; _EL_         if (addDirection(moveList,pos,sq,x,-1))         return moveList; _EL_         if (addDirection(moveList,pos,sq,y,-8))         return moveList; _EL_       } _EL_       if ((p == Piece.WBISHOP) || (p == Piece.BBISHOP) || (p == Piece.WQUEEN)|| (p == Piece.BQUEEN)) { _EL_         if (addDirection(moveList,pos,sq,Math.min(7 - x,7 - y),9))         return moveList; _EL_         if (addDirection(moveList,pos,sq,Math.min(x,7 - y),7))         return moveList; _EL_         if (addDirection(moveList,pos,sq,Math.min(x,y),-9))         return moveList; _EL_         if (addDirection(moveList,pos,sq,Math.min(7 - x,y),-7))         return moveList; _EL_       } _EL_       if ((p == Piece.WKNIGHT) || (p == Piece.BKNIGHT)) { _EL_         if (x < 6 && y < 7 && addDirection(moveList,pos,sq,1,10))         return moveList; _EL_         if (x < 7 && y < 6 && addDirection(moveList,pos,sq,1,17))         return moveList; _EL_         if (x > 0 && y < 6 && addDirection(moveList,pos,sq,1,15))         return moveList; _EL_         if (x > 1 && y < 7 && addDirection(moveList,pos,sq,1,6))         return moveList; _EL_         if (x > 1 && y > 0 && addDirection(moveList,pos,sq,1,-10))         return moveList; _EL_         if (x > 0 && y > 1 && addDirection(moveList,pos,sq,1,-17))         return moveList; _EL_         if (x < 7 && y > 1 && addDirection(moveList,pos,sq,1,-15))         return moveList; _EL_         if (x < 6 && y > 0 && addDirection(moveList,pos,sq,1,-6))         return moveList; _EL_       } _EL_       if ((p == Piece.WKING) || (p == Piece.BKING)) { _EL_         if (x < 7 && addDirection(moveList,pos,sq,1,1))         return moveList; _EL_         if (x < 7 && y < 7 && addDirection(moveList,pos,sq,1,9))         return moveList; _EL_         if (y < 7 && addDirection(moveList,pos,sq,1,8))         return moveList; _EL_         if (x > 0 && y < 7 && addDirection(moveList,pos,sq,1,7))         return moveList; _EL_         if (x > 0 && addDirection(moveList,pos,sq,1,-1))         return moveList; _EL_         if (x > 0 && y > 0 && addDirection(moveList,pos,sq,1,-9))         return moveList; _EL_         if (y > 0 && addDirection(moveList,pos,sq,1,-8))         return moveList; _EL_         if (x < 7 && y > 0 && addDirection(moveList,pos,sq,1,-7))         return moveList; _EL_         int k0=wtm ? Position.getSquare(4,0) : Position.getSquare(4,7); _EL_         if (Position.getSquare(x,y) == k0) { _EL_           int aCastle=wtm ? Position.A1_CASTLE : Position.A8_CASTLE; _EL_           int hCastle=wtm ? Position.H1_CASTLE : Position.H8_CASTLE; _EL_           int rook=wtm ? Piece.WROOK : Piece.BROOK; _EL_           if (((pos.getCastleMask() & (1 << hCastle)) != 0) && (pos.getPiece(k0 + 1) == Piece.EMPTY) && (pos.getPiece(k0 + 2) == Piece.EMPTY)&& (pos.getPiece(k0 + 3) == rook)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 + 1)) { _EL_             moveList.add(getMoveObj(k0,k0 + 2,Piece.EMPTY)); _EL_           } _EL_           if (((pos.getCastleMask() & (1 << aCastle)) != 0) && (pos.getPiece(k0 - 1) == Piece.EMPTY) && (pos.getPiece(k0 - 2) == Piece.EMPTY)&& (pos.getPiece(k0 - 3) == Piece.EMPTY)&& (pos.getPiece(k0 - 4) == rook)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 - 1)) { _EL_             moveList.add(getMoveObj(k0,k0 - 2,Piece.EMPTY)); _EL_           } _EL_         } _EL_       } _EL_       if ((p == Piece.WPAWN) || (p == Piece.BPAWN)) { _EL_         int yDir=wtm ? 8 : -8; _EL_         if (pos.getPiece(sq + yDir) == Piece.EMPTY) { _EL_           addPawnMoves(moveList,sq,sq + yDir); _EL_           if ((y == (wtm ? 1 : 6)) && (pos.getPiece(sq + 2 * yDir) == Piece.EMPTY)) { _EL_             addPawnMoves(moveList,sq,sq + yDir * 2); _EL_           } _EL_         } _EL_         if (x > 0) { _EL_           int toSq=sq + yDir - 1; _EL_           int cap=pos.getPiece(toSq); _EL_           if (cap != Piece.EMPTY) { _EL_             if (Piece.isWhite(cap) != wtm) { _EL_               if (cap == (wtm ? Piece.BKING : Piece.WKING)) { _EL_                 returnMoveList(moveList); _EL_                 moveList=getMoveListObj(); _EL_                 moveList.add(getMoveObj(sq,toSq,Piece.EMPTY)); _EL_                 return moveList; _EL_               } _EL_  else { _EL_                 addPawnMoves(moveList,sq,toSq); _EL_               } _EL_             } _EL_           } _EL_  else           if (toSq == pos.getEpSquare()) { _EL_             addPawnMoves(moveList,sq,toSq); _EL_           } _EL_         } _EL_         if (x < 7) { _EL_           int toSq=sq + yDir + 1; _EL_           int cap=pos.getPiece(toSq); _EL_           if (cap != Piece.EMPTY) { _EL_             if (Piece.isWhite(cap) != wtm) { _EL_               if (cap == (wtm ? Piece.BKING : Piece.WKING)) { _EL_                 returnMoveList(moveList); _EL_                 moveList=getMoveListObj(); _EL_                 moveList.add(getMoveObj(sq,toSq,Piece.EMPTY)); _EL_                 return moveList; _EL_               } _EL_  else { _EL_                 addPawnMoves(moveList,sq,toSq); _EL_               } _EL_             } _EL_           } _EL_  else           if (toSq == pos.getEpSquare()) { _EL_             addPawnMoves(moveList,sq,toSq); _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return moveList; _EL_ } _EL_ ', 'public static int writeOggPageHeader(byte[] buf,int offset,int headerType,long granulepos,int streamSerialNumber,int pageCount,int packetCount,byte[] packetSizes){ _EL_   writeString(buf,offset,"OggS"); _EL_   buf[offset + 4]=0; _EL_   buf[offset + 5]=(byte)headerType; _EL_   writeLong(buf,offset + 6,granulepos); _EL_   writeInt(buf,offset + 14,streamSerialNumber); _EL_   writeInt(buf,offset + 18,pageCount); _EL_   writeInt(buf,offset + 22,0); _EL_   buf[offset + 26]=(byte)packetCount; _EL_   System.arraycopy(packetSizes,0,buf,offset + 27,packetCount); _EL_   return packetCount + 27; _EL_ } _EL_ ', 'public synchronized void removeRoom(String room){ _EL_   if (!Helper.validateStream(room)) { _EL_     return; _EL_   } _EL_   room=room.toLowerCase(); _EL_   if (rooms.remove(room)) { _EL_     unsubRoom(room); _EL_     removeEmotes(room); _EL_     prevEmotesets.remove(room); _EL_   } _EL_ } _EL_ ', 'public static double discharge(ItemStack itemStack,double amount){ _EL_   if (itemStack != null) { _EL_     if (itemStack.getItem() instanceof IEnergizedItem) { _EL_       IEnergizedItem energizedItem=(IEnergizedItem)itemStack.getItem(); _EL_       if (energizedItem.canSend(itemStack)) { _EL_         double energyToUse=Math.min(energizedItem.getMaxTransfer(itemStack),Math.min(energizedItem.getEnergy(itemStack),amount)); _EL_         energizedItem.setEnergy(itemStack,energizedItem.getEnergy(itemStack) - energyToUse); _EL_         return energyToUse; _EL_       } _EL_     } _EL_   } _EL_   return 0; _EL_ } _EL_ ', 'public Object[] toArray(){ _EL_   final ReentrantLock lock=this.lock; _EL_   lock.lock(); _EL_   try { _EL_     Object[] a=new Object[count]; _EL_     int k=0; _EL_     for (Node<E> p=first; p != null; p=p.next)     a[k++]=p.item; _EL_     return a; _EL_   } _EL_   finally { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', 'public void addAll(final Collection elements){ _EL_   adjusting=true; _EL_   Set oldSelection=new HashSet(selection); _EL_   boolean rv=selection.addAll(elements); _EL_   adjusting=false; _EL_   if (rv) { _EL_     fireSelectionChanged(oldSelection,selection); _EL_   } _EL_   oldSelection=null; _EL_ } _EL_ ', 'public boolean hasFeature(int feature){ _EL_   return ((feature >= MODE_FIRST && feature <= MODE_LAST) || (feature >= FEATURE_FIRST && feature <= FEATURE_LAST)) && (feature == MODE_OFF || mCapabilities.get(feature)); _EL_ } _EL_ ', 'public Set<Integer> backupPartitions(UUID nodeId){ _EL_   Set<Integer> set=backup.get(nodeId); _EL_   return set == null ? Collections.<Integer>emptySet() : set; _EL_ } _EL_ ', 'public java.lang.StringBuffer insert(int offset,java.lang.String str){ _EL_   internal.insert(offset,str); _EL_   return this; _EL_ } _EL_ ', 'public Loader load(String imageUrl){ _EL_   ImageUrl=imageUrl; _EL_   return this; _EL_ } _EL_ ', 'private void buildPTR(){ _EL_   double[] temp_row; _EL_   double[][] PTRA; _EL_   int k; _EL_   PivotTransform pt; _EL_   PTR=Matrix.identity(n,n); _EL_   PTRA=PTR.getArray(); _EL_   k=pivotTransformQueue.size(); _EL_   while (k-- > 0) { _EL_     pt=pivotTransformQueue.removeLast(); _EL_     temp_row=PTRA[pt.pos1]; _EL_     PTRA[pt.pos1]=PTRA[pt.pos2]; _EL_     PTRA[pt.pos2]=temp_row; _EL_   } _EL_ } _EL_ ', "private static String byteToHex(byte[] digest){ _EL_   StringBuilder builder=new StringBuilder(); _EL_   for (  byte b : digest) { _EL_     String hex=Integer.toHexString(0xff & b); _EL_     if (hex.length() == 1) { _EL_       builder.append('0'); _EL_     } _EL_     builder.append(hex); _EL_   } _EL_   return builder.toString(); _EL_ } _EL_ ", 'public boolean isCallerValidForPackage(Context context,int authRequirements,String packageToMatch){ _EL_   assert !TextUtils.isEmpty(packageToMatch); _EL_   return isCallerValid(context,authRequirements,packageToMatch); _EL_ } _EL_ ', 'public void paintInternalFrameTitlePaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){ _EL_   paintBackground(context,g,x,y,w,h,null); _EL_ } _EL_ ', 'public static double[][] align(int[] real,double[] pred){ _EL_   int missing=numberOfMissingLabels(real); _EL_   double[] _real=new double[real.length - missing]; _EL_   double[] _pred=new double[real.length - missing]; _EL_   int offset=0; _EL_   for (int i=0; i < real.length; i++) { _EL_     if (real[i] == -1 || pred[i] == -1.0 || Double.isNaN(pred[i])) { _EL_       offset++; _EL_       continue; _EL_     } _EL_     _real[i - offset]=real[i]; _EL_     _pred[i - offset]=pred[i]; _EL_   } _EL_   double[][] res=new double[2][0]; _EL_   res[0]=_real; _EL_   res[1]=_pred; _EL_   return res; _EL_ } _EL_ ', 'public AllStatsTableMulti(DatasetGenerator datasetGenerator,Locker locker){ _EL_   ArgumentChecking.notNull(datasetGenerator,"datasetGenerator"); _EL_   initComponents(); _EL_   table.setDefaultRenderer(JLabel.class,new Renderer()); _EL_   table.setColumnSelectionAllowed(false); _EL_   table.setRowSelectionAllowed(false); _EL_   table.setGridColor(GRID_COLOR); _EL_   JTableHeader header=table.getTableHeader(); _EL_   header.setReorderingAllowed(false); _EL_   GUIUtilities.setTableHeader(header); _EL_   model=new Model(datasetGenerator); _EL_   table.setModel(model); _EL_   this.locker=locker; _EL_ } _EL_ ', 'public List<String> provideWhiteList(){ _EL_   LinkedList<String> whiteList=new LinkedList<>(); _EL_   whiteList.add("org.chromium"); _EL_   return whiteList; _EL_ } _EL_ ', "public static boolean isScopedName(String name){ _EL_   return name.indexOf('.') != -1; _EL_ } _EL_ ", 'public Input(IoBuffer buf){ _EL_   super(buf); _EL_   amf3_mode=0; _EL_   stringReferences=new ArrayList<String>(); _EL_   classReferences=new ArrayList<ClassReference>(); _EL_ } _EL_ ', 'protected void sprint(boolean booleanField){ _EL_   sprint(String.valueOf(booleanField)); _EL_ } _EL_ ', 'protected static void toEPLViews(StringWriter writer,List<View> views){ _EL_   if ((views != null) && (views.size() != 0)) { _EL_     writer.write(\'.\'); _EL_     String delimiter=""; _EL_     for (    View view : views) { _EL_       writer.write(delimiter); _EL_       view.toEPL(writer); _EL_       delimiter="."; _EL_     } _EL_   } _EL_ } _EL_ ', 'protected void removeDatabaseListeners(){ _EL_   databaseListeners.clear(); _EL_ } _EL_ ', 'private AudioMapType loadAudioMapXml(File audioMapFile) throws XmlParsingException, FileNotFoundException { _EL_   if (!audioMapFile.isFile()) { _EL_     throw new FileNotFoundException(String.format("Invalid audiomap.xml file: \'%s\' not found",audioMapFile.getAbsolutePath())); _EL_   } _EL_   return XmlParser.parse(audioMapFile,new String[]{AUDIOMAP_XML_SCHEME},AUDIOMAP_PACKAGE,AudioMapType.class); _EL_ } _EL_ ', 'public void addGenericAttr(GenericAttr g){ _EL_   generic.addElement(g); _EL_ } _EL_ ', 'private static Object newInstanceNoServiceLoader(Class<?> providerClass){ _EL_   if (System.getSecurityManager() == null) { _EL_     return null; _EL_   } _EL_   try { _EL_     Method creationMethod=providerClass.getDeclaredMethod("newTransformerFactoryNoServiceLoader"); _EL_     return creationMethod.invoke(null,(Object[])null); _EL_   } _EL_  catch (  NoSuchMethodException exc) { _EL_     return null; _EL_   } _EL_ catch (  Exception exc) { _EL_     return null; _EL_   } _EL_ } _EL_ ', 'private void checkUUID(String uuid,int code){ _EL_   checkHash(UUID.fromString(uuid),code); _EL_ } _EL_ ', '@Override protected void prepareWrite(WritableByteChannel channel) throws Exception { _EL_   os=Channels.newOutputStream(channel); _EL_ } _EL_ ', 'public void run(){ _EL_   try { _EL_     boolean cleanRemoteSessions=false; _EL_ synchronized (this) { _EL_       Collection<StateInfo> infos=new ArrayList<>(); _EL_       infos.addAll(servers.values()); _EL_       infos.addAll(sites.values()); _EL_       for (      StateInfo info : infos) { _EL_         info.isUp=checkServerUp(info); _EL_         if (!info.isUp) { _EL_           down.add(info.id); _EL_         } _EL_  else { _EL_           if (!down.isEmpty() && down.remove(info.id)) { _EL_             cleanRemoteSessions=true; _EL_           } _EL_         } _EL_       } _EL_     } _EL_     if (cleanRemoteSessions) { _EL_       foreignSessionHandler.cleanUpRemoteSessions(); _EL_     } _EL_   } _EL_  catch (  Exception ex) { _EL_     sessionDebug.error("cleanRemoteSessions Background thread has encountered an Exception: " + ex.getMessage(),ex); _EL_   } _EL_ } _EL_ ', 'private void writeObject(java.io.ObjectOutputStream p_stream) throws java.io.IOException { _EL_   p_stream.defaultWriteObject(); _EL_   p_stream.writeInt(trace_angle_restriction.get_no()); _EL_ } _EL_ ', 'public Builder addHeader(String name,String value){ _EL_   headers.add(new Header(name,value)); _EL_   return this; _EL_ } _EL_ ', 'public void add(LeafAtom atom){ _EL_   leafChildren.add(atom); _EL_ } _EL_ ', 'public static double normalCDF(double x){ _EL_   return (0.5 * (1.0 + (erf(x / (Math.sqrt(2.0)))))); _EL_ } _EL_ ', 'public void removeResult(String name){ _EL_   StringBuffer buff=m_Results.get(name); _EL_   if (buff != null) { _EL_     m_Results.remove(name); _EL_     m_Model.removeElement(name); _EL_     m_Objs.remove(name); _EL_     System.gc(); _EL_   } _EL_ } _EL_ ', 'private void addEntry(){ _EL_   filterModel.addNewEntry(); _EL_   extentModel.populate(null); _EL_   removeFTCButton.setEnabled(false); _EL_   addExtentButton.setEnabled(false); _EL_   removeExtentButton.setEnabled(false); _EL_ } _EL_ ', 'double[][] CalcTheoreticalSVValues(Variogram vario,double MaximumDisplyDistanst){ _EL_   double[][] res=new double[2 * NumberOfLags + 1][2]; _EL_   for (int i=0; i < res.length; i++) { _EL_     res[i][0]=i * MaximumDisplyDistanst / (2 * NumberOfLags); _EL_ switch (vario.Type) { _EL_ case EXPONENTIAL: _EL_       if (res[i][0] != 0) { _EL_         res[i][1]=vario.Nugget + vario.Sill * (1 - Math.exp(-res[i][0] / vario.Range)); _EL_       } _EL_  else { _EL_         res[i][1]=vario.Nugget; _EL_       } _EL_     break; _EL_ case GAUSSIAN: _EL_   if (res[i][0] != 0) { _EL_     res[i][1]=vario.Nugget + vario.Sill * (1 - Math.exp(-3 * (Math.pow(res[i][0],2)) / (Math.pow(vario.Range,2)))); _EL_   } _EL_  else { _EL_     res[i][1]=vario.Nugget; _EL_   } _EL_ break; _EL_ case SPHERICAL: _EL_ if (res[i][0] > vario.Range) { _EL_ res[i][1]=vario.Nugget + vario.Sill; _EL_ } _EL_  else if (res[i][0] > 0 && res[i][0] <= vario.Range) { _EL_ res[i][1]=vario.Nugget + vario.Sill * (1.5 * res[i][0] / vario.Range - 0.5 * Math.pow((res[i][0] / vario.Range),3)); _EL_ } _EL_  else { _EL_ res[i][1]=vario.Nugget; _EL_ } _EL_ break; _EL_ } _EL_ } _EL_ return res; _EL_ } _EL_ ', 'public DExportPrivateKeyOpenSsl(JFrame parent,String entryAlias,PasswordQualityConfig passwordQualityConfig){ _EL_   super(parent,Dialog.ModalityType.DOCUMENT_MODAL); _EL_   this.entryAlias=entryAlias; _EL_   this.passwordQualityConfig=passwordQualityConfig; _EL_   initComponents(); _EL_ } _EL_ ', '@Override public int calculateOffsetX(){ _EL_   return (int)(Math.cos(this.angle) * this.distance) - this.shadowSize; _EL_ } _EL_ ', 'public String addDays(Object odays,String format){ _EL_   int days=FunctionHandler.getInt(odays); _EL_   Calendar now=Calendar.getInstance(); _EL_   now.add(Calendar.DAY_OF_YEAR,days); _EL_   DateFormat formatter=getFormatter(format); _EL_   return formatter.format(now.getTime()); _EL_ } _EL_ ', 'private static File createTempFile(Context context,@Nullable String mimeType) throws IOException { _EL_   File externalCacheDir=context.getExternalCacheDir(); _EL_   File internalCacheDir=context.getCacheDir(); _EL_   File cacheDir; _EL_   if (externalCacheDir == null && internalCacheDir == null) { _EL_     throw new IOException("No cache directory available"); _EL_   } _EL_   if (externalCacheDir == null) { _EL_     cacheDir=internalCacheDir; _EL_   } _EL_  else   if (internalCacheDir == null) { _EL_     cacheDir=externalCacheDir; _EL_   } _EL_  else { _EL_     cacheDir=externalCacheDir.getFreeSpace() > internalCacheDir.getFreeSpace() ? externalCacheDir : internalCacheDir; _EL_   } _EL_   return File.createTempFile(TEMP_FILE_PREFIX,getFileExtensionForType(mimeType),cacheDir); _EL_ } _EL_ ', 'public boolean removeEntry(int xIndex,int dataSetIndex){ _EL_   if (dataSetIndex >= mDataSets.size())   return false; _EL_   T dataSet=mDataSets.get(dataSetIndex); _EL_   Entry e=dataSet.getEntryForXIndex(xIndex); _EL_   return removeEntry(e,dataSetIndex); _EL_ } _EL_ ', 'public static void close(@Nullable Context rsrc,@Nullable IgniteLogger log){ _EL_   if (rsrc != null)   try { _EL_     rsrc.close(); _EL_   } _EL_  catch (  NamingException e) { _EL_     warn(log,"Failed to close resource: " + e.getMessage()); _EL_   } _EL_ } _EL_ ', 'public WritableRaster createCompatibleWritableRaster(int w,int h){ _EL_   if (w <= 0 || h <= 0) { _EL_     throw new RasterFormatException("negative " + ((w <= 0) ? "width" : "height")); _EL_   } _EL_   SampleModel sm=sampleModel.createCompatibleSampleModel(w,h); _EL_   return new IntegerInterleavedRaster(sm,new Point(0,0)); _EL_ } _EL_ ', 'public static String[] schedulerCommandArgs(Config config,Config runtime,List<Integer> freePorts){ _EL_   if (freePorts.size() < PORTS_REQUIRED_FOR_SCHEDULER) { _EL_     throw new RuntimeException("Failed to find enough ports for executor"); _EL_   } _EL_   for (  int port : freePorts) { _EL_     if (port == -1) { _EL_       throw new RuntimeException("Failed to find available ports for executor"); _EL_     } _EL_   } _EL_   int httpPort=freePorts.get(0); _EL_   List<String> commands=new ArrayList<>(); _EL_   commands.add("--cluster"); _EL_   commands.add(Context.cluster(config)); _EL_   commands.add("--role"); _EL_   commands.add(Context.role(config)); _EL_   commands.add("--environment"); _EL_   commands.add(Context.environ(config)); _EL_   commands.add("--topology_name"); _EL_   commands.add(Context.topologyName(config)); _EL_   commands.add("--topology_bin"); _EL_   commands.add(Context.topologyBinaryFile(config)); _EL_   commands.add("--http_port"); _EL_   commands.add(Integer.toString(httpPort)); _EL_   return commands.toArray(new String[0]); _EL_ } _EL_ ', 'public DocumentAnalysisRequest addDocument(SolrInputDocument doc){ _EL_   documents.add(doc); _EL_   return this; _EL_ } _EL_ ', 'public final Key doPhase(Key key,boolean lastPhase) throws InvalidKeyException, IllegalStateException { _EL_   chooseFirstProvider(); _EL_   return spi.engineDoPhase(key,lastPhase); _EL_ } _EL_ ', '@Override public final void addBezierCurveY(final float x,final float y,final float x3,final float y3){ _EL_   elements.add(new QuadCurveTo(x,y,x3,y3)); _EL_   currentPos[0]=x3; _EL_   currentPos[1]=y3; _EL_ } _EL_ ', 'public void readBucketsFromPrefs(){ _EL_   SharedPreferences prefs=mContext.getSharedPreferences(SHARED_PREFS,0); _EL_   Set<String> buckets=prefs.getStringSet(PREF_BUCKETS_IDS,new TreeSet<String>()); _EL_   mBuckets.clear(); _EL_   for (  String bucketId : buckets) { _EL_     AutoMixBucket bucket=restoreBucketFromId(bucketId); _EL_     mBuckets.add(bucket); _EL_   } _EL_ } _EL_ ', "protected int nextChar() throws IOException { _EL_   fReadFromBuffer=(fBuffer.length() > 0); _EL_   if (fReadFromBuffer) { _EL_     char ch=fBuffer.charAt(fIndex++); _EL_     if (fIndex >= fBuffer.length()) { _EL_       fBuffer.setLength(0); _EL_       fIndex=0; _EL_     } _EL_     return ch; _EL_   } _EL_   int ch=fCharAfterWhiteSpace; _EL_   if (ch == -1) { _EL_     ch=fReader.read(); _EL_   } _EL_   if (fSkipWhiteSpace && Character.isWhitespace((char)ch)) { _EL_     do { _EL_       ch=fReader.read(); _EL_     } _EL_  while (Character.isWhitespace((char)ch)); _EL_     if (ch != -1) { _EL_       fCharAfterWhiteSpace=ch; _EL_       return ' '; _EL_     } _EL_   } _EL_  else { _EL_     fCharAfterWhiteSpace=-1; _EL_   } _EL_   return ch; _EL_ } _EL_ ", '@Override public void acceptAppOffer(Offer offer){ _EL_   int index=getIndex(offer,appOffers); _EL_   if (index != -1) { _EL_     appOffers.remove(index); _EL_     appOfferStream.onNext(offer); _EL_   } _EL_   index=getIndex(offer,acceptedOffers); _EL_   if (index == -1) { _EL_     acceptedOffers.add(offer); _EL_   } _EL_ } _EL_ ', 'public boolean verify(PublicKey key,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException { _EL_   return verify(key,CMSUtils.getProvider(sigProvider)); _EL_ } _EL_ ', 'private void injectDependencies(){ _EL_   EasyMVPApplication easyMVPApplication=(EasyMVPApplication)getApplication(); _EL_   List<Object> activityScopeModules=(getModules() != null) ? getModules() : new ArrayList<>(); _EL_   activityScopeModules.add(new ActivityModule(this)); _EL_   activityScopeGraph=easyMVPApplication.buildGraphWithAditionalModules(activityScopeModules); _EL_   inject(this); _EL_ } _EL_ ', 'public void writeRequest(){ _EL_   Object lock=new Object(); _EL_ synchronized (lock) { _EL_ synchronized (this) { _EL_       boolean goAheadWithWrite=writerLocks.size() == 0 && currentReaders == 0 && currentWriters == 0; _EL_       if (goAheadWithWrite) { _EL_         ++currentWriters; _EL_         return; _EL_       } _EL_       writerLocks.addLast(lock); _EL_     } _EL_     try { _EL_       lock.wait(); _EL_     } _EL_  catch (    InterruptedException e) { _EL_     } _EL_   } _EL_ } _EL_ ', 'public long readLocalDate() throws IOException { _EL_   expectStartTag("date"); _EL_   if (localCalendar == null)   localCalendar=Calendar.getInstance(); _EL_   long value=parseDate(localCalendar); _EL_   expectEndTag("date"); _EL_   return value; _EL_ } _EL_ ', 'public void removeSelectionListener(final SelectionListener listener){ _EL_   checkWidget(); _EL_   listeners.remove(listener); _EL_ } _EL_ ', 'private void writeHex(int i) throws IOException { _EL_   int cursor=8; _EL_   do { _EL_     hex[--cursor]=HEX_DIGITS[i & 0xf]; _EL_   } _EL_  while ((i>>>=4) != 0); _EL_   socketOut.write(hex,cursor,hex.length - cursor); _EL_ } _EL_ ', 'private List<Map<String,Object>> typeParameters(List<TypeParameter> tpl,Declaration from){ _EL_   if (tpl != null && !tpl.isEmpty()) { _EL_     List<Map<String,Object>> l=new ArrayList<>(tpl.size()); _EL_     for (    TypeParameter tp : tpl) { _EL_       l.add(typeParameterMap(tp,from)); _EL_     } _EL_     return l; _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static void readAndCloseStream(InputStream is){ _EL_   final byte[] bytes=new byte[DEFAULT_BUFFER_SIZE]; _EL_   try { _EL_     while (is.read(bytes,0,DEFAULT_BUFFER_SIZE) != -1)     ; _EL_   } _EL_  catch (  IOException ignored) { _EL_   } _EL_  finally { _EL_     closeSilently(is); _EL_   } _EL_ } _EL_ ', 'private static boolean withinTwo(INode n,INode goal){ _EL_   DoubleLinkedList<IMove> moves=n.validMoves(); _EL_   for (Iterator<IMove> it=moves.iterator(); it.hasNext(); ) { _EL_     IMove move=it.next(); _EL_     INode successor=n.copy(); _EL_     move.execute(successor); _EL_     if (withinOne(successor,goal)) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public PennTreebankReader(String treebankHome,String[] sections,String parseViewName) throws Exception { _EL_   super(CorpusReaderConfigurator.buildResourceManager(PENN_TREEBANK_WSJ,treebankHome)); _EL_   this.parseViewName=parseViewName; _EL_   combinedWSJHome=treebankHome; _EL_   if (sections == null)   this.sections=IOUtils.lsDirectories(combinedWSJHome); _EL_  else { _EL_     this.sections=new String[sections.length]; _EL_     System.arraycopy(sections,0,this.sections,0,sections.length); _EL_   } _EL_   updateCurrentFiles(); _EL_ } _EL_ ', '@Override public void unwrapSSLv2(byte[] bytes){ _EL_   unexpectedMessage(); _EL_ } _EL_ ', '@Override public void closeWrite() throws IOException { _EL_   if (_isCloseWrite) { _EL_     return; _EL_   } _EL_   _isCloseWrite=true; _EL_   OutputStream os=_os; _EL_   _os=null; _EL_   boolean isShutdownOutput=false; _EL_   if (_s instanceof SSLSocket) { _EL_     log.finer(L.l("sslSocket can not be half-closed")); _EL_     return; _EL_   } _EL_  else   if (_s != null) { _EL_     try { _EL_       _s.shutdownOutput(); _EL_       isShutdownOutput=true; _EL_     } _EL_  catch (    UnsupportedOperationException e) { _EL_       log.log(Level.FINEST,e.toString(),e); _EL_     } _EL_ catch (    Exception e) { _EL_       log.finer(e.toString()); _EL_       log.log(Level.FINEST,e.toString(),e); _EL_     } _EL_   } _EL_   if (!isShutdownOutput && os != null) { _EL_     os.close(); _EL_   } _EL_ } _EL_ ', 'protected void applyRowChangeData(RowChangeData data,List<ReplOption> options,String sourceDbmsType) throws ReplicatorException { _EL_   if (options != null) { _EL_     try { _EL_       if (applySessionVariables(null,options)) { _EL_         if (logger.isDebugEnabled()) { _EL_           logger.debug("Applying changed session variables"); _EL_         } _EL_         executePendingBatch(); _EL_         statement.executeBatch(); _EL_         statement.clearBatch(); _EL_       } _EL_     } _EL_  catch (    SQLException e) { _EL_       throw new ApplierException("Failed to apply session variables",e); _EL_     } _EL_   } _EL_   List<ReplOption> rowOptions=data.getOptions(); _EL_   if (rowOptions != null) { _EL_     try { _EL_       if (applySessionVariables(null,rowOptions)) { _EL_         if (logger.isDebugEnabled()) { _EL_           logger.debug("Applying changed row option variables"); _EL_         } _EL_         executePendingBatch(); _EL_         statement.executeBatch(); _EL_         statement.clearBatch(); _EL_       } _EL_     } _EL_  catch (    SQLException e) { _EL_       throw new ApplierException("Failed to apply session variables",e); _EL_     } _EL_   } _EL_   for (  OneRowChange row : data.getRowChanges()) { _EL_     applyOneRowChangePrepared(row,sourceDbmsType); _EL_   } _EL_ } _EL_ ', 'public NamedList normalize(NamedList input){ _EL_   input.remove("avgRequestsPerSecond"); _EL_   for (int i=0; i < input.size(); i++) { _EL_     Object v=input.getVal(i); _EL_     if (v instanceof NamedList) { _EL_       input.setVal(i,normalize((NamedList)v)); _EL_     } _EL_   } _EL_   return input; _EL_ } _EL_ ', 'public boolean isInfinite(){ _EL_   return isInfinite(value); _EL_ } _EL_ ', 'String inprogressZNodeName(long ledgerId,long firstTxId,long logSegmentSeqNo){ _EL_   if (DistributedLogConstants.LOGSEGMENT_NAME_VERSION == conf.getLogSegmentNameVersion()) { _EL_     return String.format("%s_%018d",DistributedLogConstants.INPROGRESS_LOGSEGMENT_PREFIX,logSegmentSeqNo); _EL_   } _EL_  else { _EL_     return DistributedLogConstants.INPROGRESS_LOGSEGMENT_PREFIX + "_" + Long.toString(firstTxId,16); _EL_   } _EL_ } _EL_ ', 'public synchronized void add(double value){ _EL_   add(mCategories.size() + "",value); _EL_ } _EL_ ', 'void outputDocTypeDecl(String name,boolean closeDecl) throws SAXException { _EL_   if (m_cdataTagOpen)   closeCDATA(); _EL_   try { _EL_     final java.io.Writer writer=m_writer; _EL_     writer.write("<!DOCTYPE "); _EL_     writer.write(name); _EL_     String doctypePublic=getDoctypePublic(); _EL_     if (null != doctypePublic) { _EL_       writer.write(" PUBLIC \\""); _EL_       writer.write(doctypePublic); _EL_       writer.write(\'\\"\'); _EL_     } _EL_     String doctypeSystem=getDoctypeSystem(); _EL_     if (null != doctypeSystem) { _EL_       if (null == doctypePublic)       writer.write(" SYSTEM \\""); _EL_  else       writer.write(" \\""); _EL_       writer.write(doctypeSystem); _EL_       if (closeDecl) { _EL_         writer.write("\\">"); _EL_         writer.write(m_lineSep,0,m_lineSepLen); _EL_         closeDecl=false; _EL_       } _EL_  else       writer.write(\'\\"\'); _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     throw new SAXException(e); _EL_   } _EL_ } _EL_ ', 'public static boolean isValidVector(Vector2f vector){ _EL_   if (vector == null)   return false; _EL_   if (Float.isNaN(vector.x) || Float.isNaN(vector.y))   return false; _EL_   if (Float.isInfinite(vector.x) || Float.isInfinite(vector.y))   return false; _EL_   return true; _EL_ } _EL_ ', 'public static URL resolveURL(URL base,String target) throws MalformedURLException { _EL_   target=target.trim(); _EL_   if (target.startsWith("?")) { _EL_     return fixPureQueryTargets(base,target); _EL_   } _EL_   return new URL(base,target); _EL_ } _EL_ ', 'protected int maxDepth(Layout.Node node){ _EL_   int depth=0; _EL_   for (int i=0; i < node.numChildren(); i++) { _EL_     Layout.Node child=node.getChild(i); _EL_     depth=Math.max(depth,maxDepth(child)); _EL_   } _EL_   return depth + 1; _EL_ } _EL_ ', 'private void addFinal(Object[] stacks){ _EL_   Object[] input=new Object[inputSize], output=new Object[outputSize]; _EL_   for (int i=0; i < stacks.length; i++) { _EL_     if (i < inputSize) { _EL_       input[i]=stacks[i]; _EL_     } _EL_  else     if (!(i - inputSize > outputSize)) { _EL_       output[i - inputSize]=stacks[i]; _EL_     } _EL_  else { _EL_       throw new RuntimeException("Recipe is too big!"); _EL_     } _EL_   } _EL_   addRecipe(input,output); _EL_ } _EL_ ', 'protected void fireConnectionClosed(){ _EL_   ConnectionEvent evt=new ConnectionEvent(this); _EL_   for (  ConnectionEventListener listener : connectionEventListeners) { _EL_     listener.connectionClosed(evt); _EL_   } _EL_ } _EL_ ', 'public static void putIntVolatile(Object obj,long off,int val){ _EL_   UNSAFE.putIntVolatile(obj,off,val); _EL_ } _EL_ ', 'NumberStrategy(final int field){ _EL_   this.field=field; _EL_ } _EL_ ', 'public static URI createUriFromServerSet(Set<InetSocketAddress> serverInetSet,String path,String protocol) throws URISyntaxException { _EL_   InetSocketAddress inetSocketAddress=ServiceUtils.selectRandomItem(serverInetSet); _EL_   String address=inetSocketAddress.getHostString(); _EL_   int port=inetSocketAddress.getPort(); _EL_   URI uri=new URI(protocol,null,address,port,path,null,null); _EL_   return uri; _EL_ } _EL_ ', 'public PlotNavigator(Plot plot,String... axesNames){ _EL_   this(plot,Arrays.asList(axesNames)); _EL_ } _EL_ ', 'PointComparator(int dimension){ _EL_   this.dimension=dimension; _EL_ } _EL_ ', 'public static void addElement(Document doc,Element rootElement,String elementName,String typeIn,String isArrayIn,String partitionerIn){ _EL_   Element element=doc.createElement("element"); _EL_   rootElement.appendChild(element); _EL_   Element name=doc.createElement("name"); _EL_   name.appendChild(doc.createTextNode(elementName)); _EL_   element.appendChild(name); _EL_   Element type=doc.createElement("type"); _EL_   type.appendChild(doc.createTextNode(typeIn)); _EL_   element.appendChild(type); _EL_   if (isArrayIn.equals("true")) { _EL_     element.appendChild(doc.createElement("isArray")); _EL_   } _EL_   if (partitionerIn != null) { _EL_     Element partitioner=doc.createElement("partitioner"); _EL_     partitioner.appendChild(doc.createTextNode(partitionerIn)); _EL_     element.appendChild(partitioner); _EL_   } _EL_ } _EL_ ', 'public void addFirst(Character c){ _EL_   addFirst(c.toString()); _EL_ } _EL_ ', 'public final void addInstanceOf(String className){ _EL_   Reject.ifNull(className); _EL_   String value=className.trim(); _EL_   if (!value.matches(CLASS_RE)) { _EL_     throw new IllegalArgumentException("\\"" + value + "\\" is not a valid Java class name"); _EL_   } _EL_   instanceOfInterfaces.add(value); _EL_ } _EL_ ', '@Override public int read(byte[] b,int off,int len) throws IOException { _EL_   if (b == null) { _EL_     throw new NullPointerException("Byte array must not be null"); _EL_   } _EL_   if (len < 0 || off < 0 || (off + len) > b.length) { _EL_     throw new IndexOutOfBoundsException("Array Size=" + b.length + ", offset="+ off+ ", length="+ len); _EL_   } _EL_   int read=0; _EL_   if (len == 0) { _EL_     return 0; _EL_   } _EL_   while (len > 0) { _EL_     if (encoderOut.hasRemaining()) { _EL_       int c=Math.min(encoderOut.remaining(),len); _EL_       encoderOut.get(b,off,c); _EL_       off+=c; _EL_       len-=c; _EL_       read+=c; _EL_     } _EL_  else { _EL_       fillBuffer(); _EL_       if (endOfInput && !encoderOut.hasRemaining()) { _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   return read == 0 && endOfInput ? -1 : read; _EL_ } _EL_ ', 'public StyledString insert(char ch,int offset) throws StringIndexOutOfBoundsException { _EL_   if (offset < 0 || offset > builder.length()) { _EL_     throw new StringIndexOutOfBoundsException("Invalid offset (" + offset + ")"); _EL_   } _EL_   builder.insert(offset,ch); _EL_   return this; _EL_ } _EL_ ', 'public void addRoot(ProtoElement root){ _EL_   roots.add(root); _EL_ } _EL_ ', 'public SVNChangeSetCollector(ISynchronizePageConfiguration configuration){ _EL_   super(configuration); _EL_ } _EL_ ', 'public void ensureMaxSize(int maxWidth,int maxHeight,boolean keepProportions){ _EL_   int width=canvas.getWidth(); _EL_   int height=canvas.getHeight(); _EL_   if (keepProportions) { _EL_     if (width > height) { _EL_       if (width > maxWidth) { _EL_         height=Math.round(height*=maxWidth / (double)width); _EL_         width=maxWidth; _EL_       } _EL_     } _EL_  else { _EL_       if (height > maxHeight) { _EL_         width=Math.round(width*=maxHeight / (double)height); _EL_         height=maxHeight; _EL_       } _EL_     } _EL_   } _EL_  else { _EL_     width=Math.min(width,maxWidth); _EL_     height=Math.min(height,maxHeight); _EL_   } _EL_   resize(width,height); _EL_ } _EL_ ', 'public static boolean isNormalized(CharSequence src,java.text.Normalizer.Form form,int option){ _EL_   return NormalizerBase.isNormalized(src.toString(),form,option); _EL_ } _EL_ ', "public static String unescapeSom(String s){ _EL_   int idx=s.indexOf('\\\\'); _EL_   if (idx < 0)   return s; _EL_   StringBuilder sb=new StringBuilder(); _EL_   int last=0; _EL_   while (idx >= 0) { _EL_     sb.append(s.substring(last,idx)); _EL_     last=idx + 1; _EL_     idx=s.indexOf('\\\\',idx + 1); _EL_   } _EL_   sb.append(s.substring(last)); _EL_   return sb.toString(); _EL_ } _EL_ ", 'private void beforeName() throws IOException { _EL_   JsonScope context=peek(); _EL_   if (context == JsonScope.NONEMPTY_OBJECT) { _EL_     out.write(\',\'); _EL_   } _EL_  else   if (context != JsonScope.EMPTY_OBJECT) { _EL_     throw new IllegalStateException("Nesting problem: " + stack); _EL_   } _EL_   newline(); _EL_   replaceTop(JsonScope.DANGLING_NAME); _EL_ } _EL_ ', '@Transactional public void redeem(final String tokenNumber,final String service){ _EL_   final Token token=tokenRepository.findByTokenNumberAndService(tokenNumber,service); _EL_   if (token == null)   throw new ApplicationRuntimeException("Token " + tokenNumber + " does not exist!"); _EL_   redeem(token); _EL_ } _EL_ ', 'public int lightenColor(int color,float factor){ _EL_   float r=Color.red(color) * factor; _EL_   float g=Color.green(color) * factor; _EL_   float b=Color.blue(color) * factor; _EL_   int ir=Math.min(255,(int)r); _EL_   int ig=Math.min(255,(int)g); _EL_   int ib=Math.min(255,(int)b); _EL_   int ia=Color.alpha(color); _EL_   return (Color.argb(ia,ir,ig,ib)); _EL_ } _EL_ ', 'private static String toDatabaseString(final OperandSize size){ _EL_ switch (size) { _EL_ case BYTE: _EL_     return "b1"; _EL_ case WORD: _EL_   return "b2"; _EL_ case DWORD: _EL_ return "b4"; _EL_ case QWORD: _EL_ return "b8"; _EL_ case OWORD: _EL_ return "b16"; _EL_ case ADDRESS: _EL_ return "b4"; _EL_ default : _EL_ throw new IllegalArgumentException(String.format("Error: Unknown operand size %s",size)); _EL_ } _EL_ } _EL_ ', 'static String fileNameOfClass(final String className,String typeSuffix){ _EL_   return className.replace(\'.\',\'/\') + "." + typeSuffix; _EL_ } _EL_ ', 'public void writePv(ProcessVar pv,int recursiveDepth){ _EL_   writePv(pv,recursiveDepth,false); _EL_ } _EL_ ', 'private static void assertQualNS(String qualNS) throws XMPException { _EL_   if (qualNS == null || qualNS.length() == 0) { _EL_     throw new XMPException("Empty qualifier namespace URI",XMPError.BADSCHEMA); _EL_   } _EL_ } _EL_ ', "public static void pack(int[] n,String s){ _EL_   for (int i=0; i < n.length; i++) { _EL_     n[i]=0; _EL_   } _EL_   int idx=n.length - 1; _EL_   for (int i=s.length() - 1; i >= 0; i--) { _EL_     n[idx--]=s.charAt(i) - '0'; _EL_   } _EL_ } _EL_ ", 'private void updateColor(){ _EL_   try { _EL_     BreakpointConditionParser.evaluate(inputField.getText()); _EL_     inputField.setBackground(Color.WHITE); _EL_   } _EL_  catch (  final InvalidFormulaException e) { _EL_     inputField.setBackground(Color.RED); _EL_   } _EL_ } _EL_ ', 'public void removeIgnoredView(View v){ _EL_   ignoredViews.remove(v); _EL_ } _EL_ ', 'public boolean writeHeader(OutputStream os){ _EL_   try { _EL_     writeInt(os,CACHE_MAGIC); _EL_     writeString(os,key); _EL_     writeString(os,etag == null ? "" : etag); _EL_     writeLong(os,serverDate); _EL_     writeLong(os,lastModified); _EL_     writeLong(os,ttl); _EL_     writeLong(os,softTtl); _EL_     writeStringStringMap(responseHeaders,os); _EL_     os.flush(); _EL_     return true; _EL_   } _EL_  catch (  IOException e) { _EL_     VinciLog.d("%s",e.toString()); _EL_     return false; _EL_   } _EL_ } _EL_ ', 'private static boolean ensureCurrent(LeasedResource resource){ _EL_   return resource.getExpiration() > SystemTime.timeMillis(); _EL_ } _EL_ ', 'public static int maxFill(final int n,final float f){ _EL_   return Math.min((int)Math.ceil(n * f),n - 1); _EL_ } _EL_ ', 'public void clear(){ _EL_   mCategories.clear(); _EL_   mTitles.clear(); _EL_   mValues.clear(); _EL_ } _EL_ ', 'public void toggleSectionSelected(int sectionIndex){ _EL_   setSectionSelected(sectionIndex,!isSectionSelected(sectionIndex)); _EL_ } _EL_ ', 'void stopScrollingInstance(){ _EL_   if (log.isLoggable(PlatformLogger.Level.FINER)) { _EL_     log.finer("Stop scrolling on " + this); _EL_   } _EL_   i_scroller.stop(); _EL_ } _EL_ ', 'public void execute2(KahanObject in1,double in2){ _EL_   if (Double.isInfinite(in1._sum) || Double.isInfinite(in2)) { _EL_     in1.set(Double.isInfinite(in2) ? in2 : in1._sum,0); _EL_     return; _EL_   } _EL_   double correction=in2 + in1._correction; _EL_   double sum=in1._sum + correction; _EL_   in1.set(sum,correction - (sum - in1._sum)); _EL_ } _EL_ ', 'public static Response newFixedLengthResponse(String msg){ _EL_   return newFixedLengthResponse(Status.OK,NanoHTTPD.MIME_HTML,msg); _EL_ } _EL_ ', 'public static String replaceEndPoint(String url,String endPoint){ _EL_   return endPoint + url.replaceFirst(DEFAULT_ENDPOINT,""); _EL_ } _EL_ ', 'public void addMemberValue(String name,MemberValue value){ _EL_   Pair p=new Pair(); _EL_   p.name=pool.addUtf8Info(name); _EL_   p.value=value; _EL_   if (members == null)   members=new LinkedHashMap(); _EL_   members.put(name,p); _EL_ } _EL_ ', 'public static String computeQualifiedWidgetTypeName(Node widgetNode){ _EL_   if (widgetNode.getNodeType() != Node.ELEMENT_NODE) { _EL_     return null; _EL_   } _EL_   String typeName=widgetNode.getLocalName(); _EL_   if (typeName.length() == 0 || Character.isLowerCase(typeName.charAt(0))) { _EL_     return null; _EL_   } _EL_   String packageName=UiBinderUtilities.getPackageName(widgetNode.getNamespaceURI()); _EL_   return packageName != null ? JavaUtilities.getQualifiedTypeName(typeName,packageName) : null; _EL_ } _EL_ ', 'private static boolean processFtypAtom(ParsableByteArray atomData){ _EL_   atomData.setPosition(Atom.HEADER_SIZE); _EL_   int majorBrand=atomData.readInt(); _EL_   if (majorBrand == BRAND_QUICKTIME) { _EL_     return true; _EL_   } _EL_   atomData.skipBytes(4); _EL_   while (atomData.bytesLeft() > 0) { _EL_     if (atomData.readInt() == BRAND_QUICKTIME) { _EL_       return true; _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public Map<String,String> parse(final String str,char separator){ _EL_   if (str == null) { _EL_     return new HashMap<String,String>(); _EL_   } _EL_   return parse(str.toCharArray(),separator); _EL_ } _EL_ ', 'public String delete(String url,final int expectedStatusCode){ _EL_   return delete(url,Collections.<String,String>emptyMap(),expectedStatusCode); _EL_ } _EL_ ', 'protected void runningSum(Set<Map.Entry<Double,Double>> c,double value,double[] sums){ _EL_   double offset=CONST - Math.log(m_Width); _EL_   double logFactor=Math.log(m_Threshold) - Math.log(1 - m_Threshold); _EL_   double logSumOfWeights=Math.log(m_SumOfWeights); _EL_   Iterator<Map.Entry<Double,Double>> itr=c.iterator(); _EL_   while (itr.hasNext()) { _EL_     Map.Entry<Double,Double> entry=itr.next(); _EL_     if (entry.getValue() > 0) { _EL_       double diff=(entry.getKey() - value) / m_Width; _EL_       double logDensity=offset - 0.5 * diff * diff; _EL_       double logWeight=Math.log(entry.getValue()); _EL_       sums[0]=logOfSum(sums[0],logWeight + logDensity); _EL_       sums[1]=logOfSum(sums[1],logWeight); _EL_       if (logDensity + logSumOfWeights < logOfSum(logFactor + sums[0],logDensity + sums[1])) { _EL_         break; _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public CategoricalTable copy(){ _EL_   Map<Value,Double> newTable=new HashMap<Value,Double>(); _EL_   for (  Value v : table.keySet()) { _EL_     newTable.put(v,table.get(v)); _EL_   } _EL_   return new CategoricalTable(variable,newTable); _EL_ } _EL_ ', 'public Configuration subConfig(String prefix,String keyPrefix){ _EL_   Configuration sub=new Configuration(); _EL_   addToSubConf(sub,prefix.length() > 0 ? prefix + "." + keyPrefix : keyPrefix); _EL_   return sub; _EL_ } _EL_ ', 'public Map<String,String> mapNameToDisplayName(Set<String> names) throws SMSException, SSOException { _EL_   final Map<String,String> map=new HashMap<>(names.size()); _EL_   for (  String name : names) { _EL_     if (smsConsoleServiceConfig.isServiceVisible(name)) { _EL_       final ServiceSchemaManager serviceSchemaManager=serviceSchemaManagerFactory.build(name); _EL_       String displayName=getLocalizedServiceName(serviceSchemaManager,name); _EL_       String resourceName=serviceSchemaManager.getResourceName(); _EL_       if (!name.equals(displayName) && !StringUtils.isBlank(resourceName)) { _EL_         map.put(resourceName,displayName); _EL_       } _EL_     } _EL_   } _EL_   return map; _EL_ } _EL_ ', 'public IntColumn(int nrows,int capacity,int defaultValue){ _EL_   super(int.class,new Integer(defaultValue)); _EL_   if (capacity < nrows) { _EL_     throw new IllegalArgumentException("Capacity value can not be less than the row count."); _EL_   } _EL_   m_values=new int[capacity]; _EL_   Arrays.fill(m_values,defaultValue); _EL_   m_size=nrows; _EL_ } _EL_ ', 'public static void queueBitmap(String key,Bitmap bmp){ _EL_   mBitmapQueue.put(key,bmp); _EL_ } _EL_ ', 'private static int analyze(Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException { _EL_   int stepType; _EL_   int stepCount=0; _EL_   int analysisResult=0x00000000; _EL_   while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) { _EL_     stepCount++; _EL_     boolean predAnalysis=analyzePredicate(compiler,stepOpCodePos,stepType); _EL_     if (predAnalysis)     analysisResult|=BIT_PREDICATE; _EL_ switch (stepType) { _EL_ case OpCodes.OP_VARIABLE: _EL_ case OpCodes.OP_EXTFUNCTION: _EL_ case OpCodes.OP_FUNCTION: _EL_ case OpCodes.OP_GROUP: _EL_       analysisResult|=BIT_FILTER; _EL_     break; _EL_ case OpCodes.FROM_ROOT: _EL_   analysisResult|=BIT_ROOT; _EL_ break; _EL_ case OpCodes.FROM_ANCESTORS: _EL_ analysisResult|=BIT_ANCESTOR; _EL_ break; _EL_ case OpCodes.FROM_ANCESTORS_OR_SELF: _EL_ analysisResult|=BIT_ANCESTOR_OR_SELF; _EL_ break; _EL_ case OpCodes.FROM_ATTRIBUTES: _EL_ analysisResult|=BIT_ATTRIBUTE; _EL_ break; _EL_ case OpCodes.FROM_NAMESPACE: _EL_ analysisResult|=BIT_NAMESPACE; _EL_ break; _EL_ case OpCodes.FROM_CHILDREN: _EL_ analysisResult|=BIT_CHILD; _EL_ break; _EL_ case OpCodes.FROM_DESCENDANTS: _EL_ analysisResult|=BIT_DESCENDANT; _EL_ break; _EL_ case OpCodes.FROM_DESCENDANTS_OR_SELF: _EL_ if (2 == stepCount && BIT_ROOT == analysisResult) { _EL_ analysisResult|=BIT_ANY_DESCENDANT_FROM_ROOT; _EL_ } _EL_ analysisResult|=BIT_DESCENDANT_OR_SELF; _EL_ break; _EL_ case OpCodes.FROM_FOLLOWING: _EL_ analysisResult|=BIT_FOLLOWING; _EL_ break; _EL_ case OpCodes.FROM_FOLLOWING_SIBLINGS: _EL_ analysisResult|=BIT_FOLLOWING_SIBLING; _EL_ break; _EL_ case OpCodes.FROM_PRECEDING: _EL_ analysisResult|=BIT_PRECEDING; _EL_ break; _EL_ case OpCodes.FROM_PRECEDING_SIBLINGS: _EL_ analysisResult|=BIT_PRECEDING_SIBLING; _EL_ break; _EL_ case OpCodes.FROM_PARENT: _EL_ analysisResult|=BIT_PARENT; _EL_ break; _EL_ case OpCodes.FROM_SELF: _EL_ analysisResult|=BIT_SELF; _EL_ break; _EL_ case OpCodes.MATCH_ATTRIBUTE: _EL_ analysisResult|=(BIT_MATCH_PATTERN | BIT_ATTRIBUTE); _EL_ break; _EL_ case OpCodes.MATCH_ANY_ANCESTOR: _EL_ analysisResult|=(BIT_MATCH_PATTERN | BIT_ANCESTOR); _EL_ break; _EL_ case OpCodes.MATCH_IMMEDIATE_ANCESTOR: _EL_ analysisResult|=(BIT_MATCH_PATTERN | BIT_PARENT); _EL_ break; _EL_ default : _EL_ throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)})); _EL_ } _EL_ if (OpCodes.NODETYPE_NODE == compiler.getOp(stepOpCodePos + 3)) { _EL_ analysisResult|=BIT_NODETEST_ANY; _EL_ } _EL_ stepOpCodePos=compiler.getNextStepPos(stepOpCodePos); _EL_ if (stepOpCodePos < 0) break; _EL_ } _EL_ analysisResult|=(stepCount & BITS_COUNT); _EL_ return analysisResult; _EL_ } _EL_ ', 'public void addListener(AfterServerStartListener listener){ _EL_   _afterStartListeners.add(listener); _EL_ } _EL_ ', 'private static List<SizePair> generateValidPreviewSizeList(Camera camera){ _EL_   Camera.Parameters parameters=camera.getParameters(); _EL_   List<android.hardware.Camera.Size> supportedPreviewSizes=parameters.getSupportedPreviewSizes(); _EL_   List<android.hardware.Camera.Size> supportedPictureSizes=parameters.getSupportedPictureSizes(); _EL_   List<SizePair> validPreviewSizes=new ArrayList<>(); _EL_   for (  android.hardware.Camera.Size previewSize : supportedPreviewSizes) { _EL_     float previewAspectRatio=(float)previewSize.width / (float)previewSize.height; _EL_     for (    android.hardware.Camera.Size pictureSize : supportedPictureSizes) { _EL_       float pictureAspectRatio=(float)pictureSize.width / (float)pictureSize.height; _EL_       if (Math.abs(previewAspectRatio - pictureAspectRatio) < ASPECT_RATIO_TOLERANCE) { _EL_         validPreviewSizes.add(new SizePair(previewSize,pictureSize)); _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   if (validPreviewSizes.size() == 0) { _EL_     Log.w(TAG,"No preview sizes have a corresponding same-aspect-ratio picture size"); _EL_     for (    android.hardware.Camera.Size previewSize : supportedPreviewSizes) { _EL_       validPreviewSizes.add(new SizePair(previewSize,null)); _EL_     } _EL_   } _EL_   return validPreviewSizes; _EL_ } _EL_ ', 'private int makeAvailable() throws IOException { _EL_   if (pos != -1) { _EL_     return 0; _EL_   } _EL_   total+=tail - head - pad; _EL_   System.arraycopy(buffer,tail - pad,buffer,0,pad); _EL_   head=0; _EL_   tail=pad; _EL_   for (; ; ) { _EL_     int bytesRead=input.read(buffer,tail,bufSize - tail); _EL_     if (bytesRead == -1) { _EL_       final String msg="Stream ended unexpectedly"; _EL_       throw new FileUploadException(MalformedStreamException,msg); _EL_     } _EL_     tail+=bytesRead; _EL_     findSeparator(); _EL_     int av=available(); _EL_     if (av > 0 || pos != -1) { _EL_       return av; _EL_     } _EL_   } _EL_ } _EL_ ', 'public RelationNotification(String notifType,Object sourceObj,long sequence,long timeStamp,String message,String id,String typeName,ObjectName objectName,List<ObjectName> unregMBeanList) throws IllegalArgumentException { _EL_   super(notifType,sourceObj,sequence,timeStamp,message); _EL_   if (!isValidBasicStrict(notifType,sourceObj,id,typeName) || !isValidCreate(notifType)) { _EL_     throw new IllegalArgumentException("Invalid parameter."); _EL_   } _EL_   relationId=id; _EL_   relationTypeName=typeName; _EL_   relationObjName=safeGetObjectName(objectName); _EL_   unregisterMBeanList=safeGetObjectNameList(unregMBeanList); _EL_ } _EL_ ', 'public void addDataToStore(Object[] row) throws CarbonDataWriterException { _EL_   dataRows.add(row); _EL_   this.entryCount++; _EL_   if (this.entryCount == this.blockletSize) { _EL_     try { _EL_       semaphore.acquire(); _EL_       producerExecutorServiceTaskList.add(producerExecutorService.submit(new Producer(blockletDataHolder,dataRows,++writerTaskSequenceCounter))); _EL_       blockletProcessingCount.incrementAndGet(); _EL_       processedDataCount+=entryCount; _EL_       LOGGER.info("Total Number Of records added to store: " + processedDataCount); _EL_       dataRows=new ArrayList<>(this.blockletSize); _EL_       this.entryCount=0; _EL_     } _EL_  catch (    InterruptedException e) { _EL_       LOGGER.error(e,e.getMessage()); _EL_       throw new CarbonDataWriterException(e.getMessage()); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected void writeDistribution(Parameter parameter,boolean isRef,XMLWriter writer){ _EL_ switch (parameter.priorType) { _EL_ case UNIFORM_PRIOR: _EL_     String id=parameter.taxaId + "-uniformDist"; _EL_   if (isRef) { _EL_     writer.writeIDref(UniformDistributionModelParser.UNIFORM_DISTRIBUTION_MODEL,id); _EL_   } _EL_  else { _EL_     writer.writeOpenTag(UniformDistributionModelParser.UNIFORM_DISTRIBUTION_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,id)}); _EL_     writer.writeOpenTag(UniformDistributionModelParser.LOWER); _EL_     writer.writeText(Double.toString(parameter.uniformLower)); _EL_     writer.writeCloseTag(UniformDistributionModelParser.LOWER); _EL_     writer.writeOpenTag(UniformDistributionModelParser.UPPER); _EL_     writer.writeText(Double.toString(parameter.uniformUpper)); _EL_     writer.writeCloseTag(UniformDistributionModelParser.UPPER); _EL_     writer.writeCloseTag(UniformDistributionModelParser.UNIFORM_DISTRIBUTION_MODEL); _EL_   } _EL_ break; _EL_ case EXPONENTIAL_PRIOR: _EL_ writer.writeOpenTag(ExponentialDistributionModel.EXPONENTIAL_DISTRIBUTION_MODEL); _EL_ writer.writeOpenTag(DistributionModelParser.MEAN); _EL_ writer.writeText(Double.toString(parameter.mean)); _EL_ writer.writeCloseTag(DistributionModelParser.MEAN); _EL_ writer.writeOpenTag(DistributionModelParser.OFFSET); _EL_ writer.writeText(Double.toString(parameter.offset)); _EL_ writer.writeCloseTag(DistributionModelParser.OFFSET); _EL_ writer.writeCloseTag(ExponentialDistributionModel.EXPONENTIAL_DISTRIBUTION_MODEL); _EL_ break; _EL_ case NORMAL_PRIOR: _EL_ writer.writeOpenTag(NormalDistributionModelParser.NORMAL_DISTRIBUTION_MODEL); _EL_ writer.writeOpenTag(NormalDistributionModelParser.MEAN); _EL_ writer.writeText(Double.toString(parameter.mean)); _EL_ writer.writeCloseTag(NormalDistributionModelParser.MEAN); _EL_ writer.writeOpenTag(NormalDistributionModelParser.STDEV); _EL_ writer.writeText(Double.toString(parameter.stdev)); _EL_ writer.writeCloseTag(NormalDistributionModelParser.STDEV); _EL_ writer.writeCloseTag(NormalDistributionModelParser.NORMAL_DISTRIBUTION_MODEL); _EL_ break; _EL_ case LOGNORMAL_PRIOR: _EL_ writer.writeOpenTag(LogNormalDistributionModelParser.LOGNORMAL_DISTRIBUTION_MODEL,new Attribute[]{new Attribute.Default<Boolean>(LogNormalDistributionModelParser.MEAN_IN_REAL_SPACE,parameter.isMeanInRealSpace()),new Attribute.Default<Boolean>(LogNormalDistributionModelParser.STDEV_IN_REAL_SPACE,parameter.isMeanInRealSpace())}); _EL_ writer.writeOpenTag(LogNormalDistributionModelParser.MEAN); _EL_ writer.writeText(Double.toString(parameter.mean)); _EL_ writer.writeCloseTag(LogNormalDistributionModelParser.MEAN); _EL_ writer.writeOpenTag(LogNormalDistributionModelParser.STDEV); _EL_ writer.writeText(Double.toString(parameter.stdev)); _EL_ writer.writeCloseTag(LogNormalDistributionModelParser.STDEV); _EL_ writer.writeOpenTag(LogNormalDistributionModelParser.OFFSET); _EL_ writer.writeText(Double.toString(parameter.offset)); _EL_ writer.writeCloseTag(LogNormalDistributionModelParser.OFFSET); _EL_ writer.writeCloseTag(LogNormalDistributionModelParser.LOGNORMAL_DISTRIBUTION_MODEL); _EL_ break; _EL_ case GAMMA_PRIOR: _EL_ writer.writeOpenTag(GammaDistributionModel.GAMMA_DISTRIBUTION_MODEL); _EL_ writer.writeOpenTag(DistributionModelParser.SHAPE); _EL_ writer.writeText(Double.toString(parameter.shape)); _EL_ writer.writeCloseTag(DistributionModelParser.SHAPE); _EL_ writer.writeOpenTag(DistributionModelParser.SCALE); _EL_ writer.writeText(Double.toString(parameter.scale)); _EL_ writer.writeCloseTag(DistributionModelParser.SCALE); _EL_ writer.writeOpenTag(DistributionModelParser.OFFSET); _EL_ writer.writeText(Double.toString(parameter.offset)); _EL_ writer.writeCloseTag(DistributionModelParser.OFFSET); _EL_ writer.writeCloseTag(GammaDistributionModel.GAMMA_DISTRIBUTION_MODEL); _EL_ break; _EL_ default : _EL_ throw new IllegalArgumentException("Unknown Distribution Model for " + parameter.getName()); _EL_ } _EL_ } _EL_ ', 'public void saveWorkingInstancesToFileQ(){ _EL_   if (m_IOThread == null) { _EL_     m_FileChooser.setCapabilitiesFilter(m_FilterEditor.getCapabilitiesFilter()); _EL_     m_FileChooser.setAcceptAllFileFilterUsed(false); _EL_     int returnVal=m_FileChooser.showSaveDialog(this); _EL_     if (returnVal == JFileChooser.APPROVE_OPTION) { _EL_       Instances inst=new Instances(m_Instances); _EL_       inst.setClassIndex(m_AttVisualizePanel.getColoringIndex()); _EL_       saveInstancesToFile(m_FileChooser.getSaver(),inst); _EL_     } _EL_     FileFilter temp=m_FileChooser.getFileFilter(); _EL_     m_FileChooser.setAcceptAllFileFilterUsed(true); _EL_     m_FileChooser.setFileFilter(temp); _EL_   } _EL_  else { _EL_     JOptionPane.showMessageDialog(this,"Can\'t save at this time,\\n" + "currently busy with other IO","Save Instances",JOptionPane.WARNING_MESSAGE); _EL_   } _EL_ } _EL_ ', 'private void calculateColor(int coord){ _EL_   coord=coord - mBarPointerHaloRadius; _EL_   if (coord < 0) { _EL_     coord=0; _EL_   } _EL_  else   if (coord > mBarLength) { _EL_     coord=mBarLength; _EL_   } _EL_   mColor=Color.HSVToColor(Math.round(mPosToOpacFactor * coord),mHSVColor); _EL_   if (Color.alpha(mColor) > 250) { _EL_     mColor=Color.HSVToColor(mHSVColor); _EL_   } _EL_  else   if (Color.alpha(mColor) < 5) { _EL_     mColor=Color.TRANSPARENT; _EL_   } _EL_ } _EL_ ', 'public int read(char cbuf[],int off,int len) throws IOException { _EL_   if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0))   throw new IndexOutOfBoundsException(); _EL_   if (len == 0)   return 0; _EL_   if (next >= length)   return -1; _EL_   int n=Math.min(length - next,len); _EL_   text.getChars(next,next + n,cbuf,off); _EL_   next+=n; _EL_   return n; _EL_ } _EL_ ', 'private boolean adjustIndent(){ _EL_   AlignmentImpl alignment=CoreFormatterUtil.getAlignment(myCurrentBlock); _EL_   WhiteSpace whiteSpace=myCurrentBlock.getWhiteSpace(); _EL_   if (alignment == null || myAlignmentsToSkip.contains(alignment)) { _EL_     if (whiteSpace.containsLineFeeds()) { _EL_       adjustSpacingByIndentOffset(); _EL_     } _EL_  else { _EL_       whiteSpace.arrangeSpaces(myCurrentBlock.getSpaceProperty()); _EL_     } _EL_     return true; _EL_   } _EL_   BlockAlignmentProcessor alignmentProcessor=ALIGNMENT_PROCESSORS.get(alignment.getAnchor()); _EL_   if (alignmentProcessor == null) { _EL_     LOG.error(String.format("Can\'t find alignment processor for alignment anchor %s",alignment.getAnchor())); _EL_     return true; _EL_   } _EL_   BlockAlignmentProcessor.Context context=new BlockAlignmentProcessor.Context(myDocument,alignment,myCurrentBlock,myAlignmentMappings,myBackwardShiftedAlignedBlocks,getIndentOptionsToUse(myCurrentBlock,myDefaultIndentOption),myRightMargin); _EL_   BlockAlignmentProcessor.Result result=alignmentProcessor.applyAlignment(context); _EL_   final LeafBlockWrapper offsetResponsibleBlock=alignment.getOffsetRespBlockBefore(myCurrentBlock); _EL_ switch (result) { _EL_ case TARGET_BLOCK_PROCESSED_NOT_ALIGNED: _EL_     return true; _EL_ case TARGET_BLOCK_ALIGNED: _EL_   storeAlignmentMapping(); _EL_ return true; _EL_ case BACKWARD_BLOCK_ALIGNED: _EL_ if (offsetResponsibleBlock == null) { _EL_ return true; _EL_ } _EL_ Set<LeafBlockWrapper> blocksCausedRealignment=new HashSet<LeafBlockWrapper>(); _EL_ myBackwardShiftedAlignedBlocks.clear(); _EL_ myBackwardShiftedAlignedBlocks.put(offsetResponsibleBlock,blocksCausedRealignment); _EL_ blocksCausedRealignment.add(myCurrentBlock); _EL_ storeAlignmentMapping(myCurrentBlock,offsetResponsibleBlock); _EL_ myCurrentBlock=offsetResponsibleBlock.getNextBlock(); _EL_ onCurrentLineChanged(); _EL_ return false; _EL_ case RECURSION_DETECTED: _EL_ myCurrentBlock=offsetResponsibleBlock; _EL_ case UNABLE_TO_ALIGN_BACKWARD_BLOCK: _EL_ myAlignmentsToSkip.add(alignment); _EL_ return false; _EL_ default : _EL_ return true; _EL_ } _EL_ } _EL_ ', 'public ForwardPlanner(DialogueSystem system){ _EL_   this.system=system; _EL_ } _EL_ ', 'private JButton addButton(String text,Container container,float alignment){ _EL_   JButton button=new JButton(text); _EL_   button.setAlignmentX(alignment); _EL_   container.add(button); _EL_   return button; _EL_ } _EL_ ', 'private boolean noMatchForTagInAttributes(AttributeSet attr,HTML.Tag t,Object tagValue){ _EL_   if (attr != null && attr.isDefined(t)) { _EL_     Object newValue=attr.getAttribute(t); _EL_     if ((tagValue == null) ? (newValue == null) : (newValue != null && tagValue.equals(newValue))) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public String businessObjectDataKeyToString(BusinessObjectDataKey businessObjectDataKey){ _EL_   if (businessObjectDataKey == null) { _EL_     return null; _EL_   } _EL_   return businessObjectDataKeyToString(businessObjectDataKey.getNamespace(),businessObjectDataKey.getBusinessObjectDefinitionName(),businessObjectDataKey.getBusinessObjectFormatUsage(),businessObjectDataKey.getBusinessObjectFormatFileType(),businessObjectDataKey.getBusinessObjectFormatVersion(),businessObjectDataKey.getPartitionValue(),businessObjectDataKey.getSubPartitionValues(),businessObjectDataKey.getBusinessObjectDataVersion()); _EL_ } _EL_ ', 'private Usage createTalkUsage(Context context){ _EL_   if (talkUsage != null) { _EL_     return talkUsage; _EL_   } _EL_   TypeToken<List<Usage>> token=new TypeToken<List<Usage>>(){ _EL_   } _EL_ ; _EL_   List<Usage> initTalkIO=JsonUtils.parseJsonFile(context,"talk_io.json",token); _EL_   talkUsage=initTalkIO.get(0); _EL_   return talkUsage; _EL_ } _EL_ ', 'public static void genOvfenvIsoImage(String ovfenvPropKVStr,String isoFilePath){ _EL_   byte[] bOvfenvPropKVStr=ovfenvPropKVStr.getBytes(); _EL_   String propFilePath="/tmp/ovf-env.properties"; _EL_   File propFile=new File(propFilePath); _EL_   try { _EL_     FileUtils.writePlainFile(propFilePath,bOvfenvPropKVStr); _EL_   } _EL_  catch (  Exception e1) { _EL_     propFile.delete(); _EL_     log.error("Write to prop file failed with exception: {}",e1.getMessage()); _EL_     throw new IllegalStateException("Failed to generate ovfenv prop file."); _EL_   } _EL_   try { _EL_     File isoFile=new File(isoFilePath); _EL_     String[] genISOImageCommand={GENISO_CMD,"--label","CDROM","-f",propFilePath,"-o",isoFilePath,"ovf-env.properties","4096"}; _EL_     Exec.Result result=Exec.sudo(CMD_TIMEOUT,genISOImageCommand); _EL_     if (!result.exitedNormally() || result.getExitValue() != 0) { _EL_       log.error("Generating ISO image failed with exit value: {}, error: {}",result.getExitValue(),result.getStdError()); _EL_       throw new IllegalStateException("Failed to generate ISO image."); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     throw e; _EL_   } _EL_  finally { _EL_     propFile.delete(); _EL_   } _EL_ } _EL_ ', 'public static void createActionableEvent(DbClient dbClient,EventUtils.EventCode eventCode,URI tenant,String name,String description,String warning,DataObject resource,List<URI> affectedResources,String approveMethod,Object[] approveParameters){ _EL_   createActionableEvent(dbClient,eventCode,tenant,name,description,warning,resource,affectedResources,approveMethod,approveParameters,null,null); _EL_ } _EL_ ', 'public Rational(ByteProvider byteProvider) throws IOException { _EL_   MXFPropertyPopulator.populateField(byteProvider,this,"numerator"); _EL_   MXFPropertyPopulator.populateField(byteProvider,this,"denominator"); _EL_ } _EL_ ', 'public synchronized void removeNotifications(String type) throws InstanceNotFoundException { _EL_   Vector<Integer> v=getNotificationIDs(type); _EL_   if (v.isEmpty())   throw new InstanceNotFoundException("Timer notifications to remove not in the list of notifications"); _EL_   for (  Integer i : v)   removeNotification(i); _EL_ } _EL_ ', 'static void addUuid(SsfNode node,UUID uuid){ _EL_   node.set("UUIDMost",uuid.getMostSignificantBits()); _EL_   node.set("UUIDLeast",uuid.getLeastSignificantBits()); _EL_ } _EL_ ', 'public long objectFieldOffset(Field field){ _EL_   if (Modifier.isStatic(field.getModifiers())) { _EL_     throw new IllegalArgumentException("valid for instance fields only"); _EL_   } _EL_   return objectFieldOffset0(field); _EL_ } _EL_ ', 'public FluxConcatArray<T> concatAdditionalSourceFirst(Publisher<? extends T> source){ _EL_   int n=array.length; _EL_   @SuppressWarnings("unchecked") Publisher<? extends T>[] newArray=new Publisher[n + 1]; _EL_   System.arraycopy(array,0,newArray,1,n); _EL_   newArray[0]=source; _EL_   return new FluxConcatArray<>(delayError,newArray); _EL_ } _EL_ ', 'public void shutdown(){ _EL_   shutdownServerThread(); _EL_   shutdownSessions(); _EL_ } _EL_ ', 'private boolean isLocalId(String localId){ _EL_   if (!localId.startsWith("local_")) { _EL_     return false; _EL_   } _EL_   for (int i=6; i < localId.length(); ++i) { _EL_     char c=localId.charAt(i); _EL_     if (!(c >= \'0\' && c <= \'9\') && !(c >= \'a\' && c <= \'f\')) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public ServerSocketBar bind(ServerSocketBar ss) throws ConfigException, IOException { _EL_ synchronized (_sslInitLock) { _EL_     if (_stdServerSocket != null)     throw new ConfigException(L.l("Can\'t create duplicte ssl factory.")); _EL_     try { _EL_       initConfig(); _EL_     } _EL_  catch (    RuntimeException e) { _EL_       e.printStackTrace(); _EL_       throw e; _EL_     } _EL_     _stdServerSocket=ss; _EL_     initSSL(); _EL_     return this; _EL_   } _EL_ } _EL_ ', 'private int checkInterruptWhileWaiting(Node node){ _EL_   return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0; _EL_ } _EL_ ', 'public String read(ByteBuffer buf,DictionaryCache dict){ _EL_   StringBuilder out=new StringBuilder(); _EL_   if (pre != null)   out.append(pre); _EL_   if (type == VOID)   return out.toString(); _EL_   if (type == NULL) { _EL_     out.append("null"); _EL_     return out.toString(); _EL_   } _EL_   if (type == BYTE) { _EL_     out.append(buf.get()); _EL_     return out.toString(); _EL_   } _EL_   if (type == SHORT) { _EL_     out.append(buf.getShort()); _EL_     return out.toString(); _EL_   } _EL_   if (type == INT) { _EL_     out.append(buf.getInt()); _EL_     return out.toString(); _EL_   } _EL_   if (type == LONG) { _EL_     out.append(buf.getLong()); _EL_     return out.toString(); _EL_   } _EL_   if (type == DOUBLE) { _EL_     out.append(buf.getDouble()); _EL_     return out.toString(); _EL_   } _EL_   if (type == BOOLEAN) { _EL_     out.append((buf.get() == 0 ? "false" : "true")); _EL_     return out.toString(); _EL_   } _EL_   if (type == STRING) { _EL_     short pos=buf.getShort(); _EL_     if (pos > -1) { _EL_       out.append("\\""); _EL_       out.append(dict.get(pos)); _EL_       out.append("\\""); _EL_     } _EL_  else { _EL_       int size=0; _EL_       int val=buf.get() & 0xFF; _EL_       while (val == 255) { _EL_         size+=val; _EL_         val=buf.get() & 0xFF; _EL_       } _EL_       size+=val; _EL_       byte[] data=new byte[size]; _EL_       buf.get(data); _EL_       out.append("\\""); _EL_       out.append(new String(data,StandardCharsets.UTF_8)); _EL_       out.append("\\""); _EL_     } _EL_     return out.toString(); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public void write(String filename){ _EL_   logger.info("write carrier plans"); _EL_   try { _EL_     openFile(filename); _EL_     writeXmlHead(); _EL_     startCarriers(this.writer); _EL_     for (    Carrier carrier : carriers) { _EL_       startCarrier(carrier,this.writer); _EL_       writeVehicles(carrier,this.writer); _EL_       writeShipments(carrier,this.writer); _EL_       writePlans(carrier,this.writer); _EL_       endCarrier(this.writer); _EL_     } _EL_     endCarriers(this.writer); _EL_     close(); _EL_     logger.info("done"); _EL_   } _EL_  catch (  IOException e) { _EL_     e.printStackTrace(); _EL_     logger.error(e); _EL_     System.exit(1); _EL_   } _EL_ } _EL_ ', 'public String buildJavaVendor(){ _EL_   return properties.getProperty("build.java.vendor"); _EL_ } _EL_ ', 'public VoiceResult(String match,float confidence){ _EL_   mMatch=match; _EL_   mConfidence=confidence; _EL_ } _EL_ ', 'final void treeify(Node<K,V>[] tab){ _EL_   TreeNode<K,V> root=null; _EL_   for (TreeNode<K,V> x=this, next; x != null; x=next) { _EL_     next=(TreeNode<K,V>)x.next; _EL_     x.left=x.right=null; _EL_     if (root == null) { _EL_       x.parent=null; _EL_       x.red=false; _EL_       root=x; _EL_     } _EL_  else { _EL_       K k=x.key; _EL_       int h=x.hash; _EL_       Class<?> kc=null; _EL_       for (TreeNode<K,V> p=root; ; ) { _EL_         int dir, ph; _EL_         K pk=p.key; _EL_         if ((ph=p.hash) > h)         dir=-1; _EL_  else         if (ph < h)         dir=1; _EL_  else         if ((kc == null && (kc=comparableClassFor(k)) == null) || (dir=compareComparables(kc,k,pk)) == 0)         dir=tieBreakOrder(k,pk); _EL_         TreeNode<K,V> xp=p; _EL_         if ((p=(dir <= 0) ? p.left : p.right) == null) { _EL_           x.parent=xp; _EL_           if (dir <= 0)           xp.left=x; _EL_  else           xp.right=x; _EL_           root=balanceInsertion(root,x); _EL_           break; _EL_         } _EL_       } _EL_     } _EL_   } _EL_   moveRootToFront(tab,root); _EL_ } _EL_ ', 'public void addDrawerListener(@NonNull DrawerListener listener){ _EL_   if (listener == null) { _EL_     return; _EL_   } _EL_   if (mListeners == null) { _EL_     mListeners=new ArrayList<DrawerListener>(); _EL_   } _EL_   mListeners.add(listener); _EL_ } _EL_ ', 'public final Entry addEntry(Position inputPosition,Position outputPosition){ _EL_   Entry entry=new Entry(inputPosition,outputPosition); _EL_   entries.add(entry); _EL_   return entry; _EL_ } _EL_ ', 'public void unHideActionBar(View view){ _EL_   if (toolbarAutoHider != null)   toolbarAutoHider.showComponent(); _EL_ } _EL_ ', 'public static String formatTimeDelta(long time,CharSequence sep){ _EL_   final StringBuilder sb=new StringBuilder(); _EL_   final Formatter fmt=new Formatter(sb); _EL_   for (int i=TIME_UNIT_SIZES.length - 1; i >= 0; --i) { _EL_     if (i == 0 && sb.length() > 4) { _EL_       continue; _EL_     } _EL_     if (sb.length() > 0) { _EL_       sb.append(sep); _EL_     } _EL_     final long acValue=time / TIME_UNIT_SIZES[i]; _EL_     time=time % TIME_UNIT_SIZES[i]; _EL_     if (!(acValue == 0 && sb.length() == 0)) { _EL_       fmt.format("%0" + TIME_UNIT_DIGITS[i] + "d%s",Long.valueOf(acValue),TIME_UNIT_NAMES[i]); _EL_     } _EL_   } _EL_   fmt.close(); _EL_   return sb.toString(); _EL_ } _EL_ ', 'public static double[] deconvolve(final double[] p,final double rate){ _EL_   final double[] r=Arrays.copyOf(p,p.length); _EL_   for (int k=0; k < p.length; k++) { _EL_     for (int j=0; j < p.length; j++) { _EL_       if (k + j < p.length) { _EL_         r[k + j]-=rate * p[k] * p[j]; _EL_       } _EL_     } _EL_   } _EL_   double sum=0; _EL_   for (  final double q : r) { _EL_     sum+=q; _EL_   } _EL_   sum=1 / sum; _EL_   for (int k=0; k < r.length; k++) { _EL_     r[k]*=sum; _EL_   } _EL_   return r; _EL_ } _EL_ ', "public static String collapseNewlines(String str){ _EL_   return collapseCharacter(str,'\\n'); _EL_ } _EL_ ", 'private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException { _EL_   s.defaultReadObject(); _EL_   init(getName()); _EL_ } _EL_ ', 'public static double calculateColumnTotal(Values2D data,int column,int[] validRows){ _EL_   ParamChecks.nullNotPermitted(data,"data"); _EL_   double total=0.0; _EL_   int rowCount=data.getRowCount(); _EL_   for (int v=0; v < validRows.length; v++) { _EL_     int row=validRows[v]; _EL_     if (row < rowCount) { _EL_       Number n=data.getValue(row,column); _EL_       if (n != null) { _EL_         total+=n.doubleValue(); _EL_       } _EL_     } _EL_   } _EL_   return total; _EL_ } _EL_ ', 'public boolean openAnalysis(File f,SaveType saveType){ _EL_   if (!f.exists() || !f.canRead()) { _EL_     throw new IllegalArgumentException("Can\'t read " + f.getPath()); _EL_   } _EL_   mainFrameLoadSaveHelper.prepareForFileLoad(f,saveType); _EL_   mainFrameLoadSaveHelper.loadAnalysis(f); _EL_   return true; _EL_ } _EL_ ', 'public void childrenRemoved(BeanContextMembershipEvent bcme){ _EL_   findAndUndo(bcme.iterator()); _EL_ } _EL_ ', 'public String process(Item item) throws ProcessException { _EL_   int count=0; _EL_   Item ss=item.getItemAs(Relation.SYLLABLE); _EL_   Item firstSyllable=LAST_LAST_SYLLABLE_PATH.findItem(item); _EL_   for (Item p=ss; p != null; p=p.getNext()) { _EL_     if (p.equalsShared(firstSyllable)) { _EL_       break; _EL_     } _EL_     count++; _EL_   } _EL_   return Integer.toString(rail(count)); _EL_ } _EL_ ', 'private void removeInstancesFromContainers(ArrayList<Container> containers,Map<Integer,List<InstanceId>> allocation,Map<String,Integer> componentsToScaleDown){ _EL_   ArrayList<RamRequirement> ramRequirements=getRAMInstances(componentsToScaleDown); _EL_   for (  RamRequirement ramRequirement : ramRequirements) { _EL_     String component=ramRequirement.getComponentName(); _EL_     int numInstancesToRemove=-componentsToScaleDown.get(component); _EL_     for (int j=0; j < numInstancesToRemove; j++) { _EL_       Pair<Integer,InstanceId> idPair=removeRRInstance(containers,component); _EL_       List<InstanceId> instances=allocation.get(idPair.first); _EL_       instances.remove(idPair.second); _EL_       allocation.put(idPair.first,instances); _EL_     } _EL_   } _EL_ } _EL_ ', 'public ListenKey startListening() throws IOException { _EL_   return startListening(null,0); _EL_ } _EL_ ', '@Nonnull public static Set<Flag> parse(@Nonnegative final int bitmask){ _EL_   Check.notNegative(bitmask,"bitmask"); _EL_   final Set<Flag> flags=new HashSet<Flag>(); _EL_   for (  final Flag flag : values()) { _EL_     if ((bitmask & flag.getNumber()) != 0) { _EL_       flags.add(flag); _EL_     } _EL_   } _EL_   return flags; _EL_ } _EL_ ', 'protected Package definePackage(String packageName,Manifest manifest,URL url) throws IllegalArgumentException { _EL_   Attributes mainAttributes=manifest.getMainAttributes(); _EL_   String dirName=packageName.replace(\'.\',\'/\') + "/"; _EL_   Attributes packageAttributes=manifest.getAttributes(dirName); _EL_   boolean noEntry=false; _EL_   if (packageAttributes == null) { _EL_     noEntry=true; _EL_     packageAttributes=mainAttributes; _EL_   } _EL_   String specificationTitle=packageAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE); _EL_   if (specificationTitle == null && !noEntry) { _EL_     specificationTitle=mainAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE); _EL_   } _EL_   String specificationVersion=packageAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION); _EL_   if (specificationVersion == null && !noEntry) { _EL_     specificationVersion=mainAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION); _EL_   } _EL_   String specificationVendor=packageAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR); _EL_   if (specificationVendor == null && !noEntry) { _EL_     specificationVendor=mainAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR); _EL_   } _EL_   String implementationTitle=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE); _EL_   if (implementationTitle == null && !noEntry) { _EL_     implementationTitle=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE); _EL_   } _EL_   String implementationVersion=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION); _EL_   if (implementationVersion == null && !noEntry) { _EL_     implementationVersion=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION); _EL_   } _EL_   String implementationVendor=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR); _EL_   if (implementationVendor == null && !noEntry) { _EL_     implementationVendor=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR); _EL_   } _EL_   return definePackage(packageName,specificationTitle,specificationVersion,specificationVendor,implementationTitle,implementationVersion,implementationVendor,isSealed(manifest,dirName) ? url : null); _EL_ } _EL_ ', '@SuppressWarnings("fallthrough") private void parse() throws SAXException, IOException { _EL_   init(); _EL_   try { _EL_     mHandCont.setDocumentLocator(this); _EL_     mHandCont.startDocument(); _EL_     if (mPh != PH_MISC_DTD) { _EL_       mPh=PH_MISC_DTD; _EL_     } _EL_     int evt=EV_NULL; _EL_     do { _EL_       wsskip(); _EL_ switch (evt=step()) { _EL_ case EV_ELM: _EL_ case EV_ELMS: _EL_         mPh=PH_DOCELM; _EL_       break; _EL_ case EV_COMM: _EL_ case EV_PI: _EL_     break; _EL_ case EV_DTD: _EL_   if (mPh >= PH_DTD_MISC) { _EL_     panic(FAULT); _EL_   } _EL_ mPh=PH_DTD_MISC; _EL_ break; _EL_ default : _EL_ panic(FAULT); _EL_ } _EL_ } _EL_  while (mPh < PH_DOCELM); _EL_ do { _EL_ switch (evt) { _EL_ case EV_ELM: _EL_ case EV_ELMS: _EL_ if (mIsNSAware == true) { _EL_ mHandCont.startElement(mElm.value,mElm.name,"",mAttrs); _EL_ } _EL_  else { _EL_ mHandCont.startElement("","",mElm.name,mAttrs); _EL_ } _EL_ if (evt == EV_ELMS) { _EL_ evt=step(); _EL_ break; _EL_ } _EL_ case EV_ELME: _EL_ if (mIsNSAware == true) { _EL_ mHandCont.endElement(mElm.value,mElm.name,""); _EL_ } _EL_  else { _EL_ mHandCont.endElement("","",mElm.name); _EL_ } _EL_ while (mPref.list == mElm) { _EL_ mHandCont.endPrefixMapping(mPref.name); _EL_ mPref=del(mPref); _EL_ } _EL_ mElm=del(mElm); _EL_ if (mElm == null) { _EL_ mPh=PH_DOCELM_MISC; _EL_ } _EL_  else { _EL_ evt=step(); _EL_ } _EL_ break; _EL_ case EV_TEXT: _EL_ case EV_WSPC: _EL_ case EV_CDAT: _EL_ case EV_COMM: _EL_ case EV_PI: _EL_ case EV_ENT: _EL_ evt=step(); _EL_ break; _EL_ default : _EL_ panic(FAULT); _EL_ } _EL_ } _EL_  while (mPh == PH_DOCELM); _EL_ do { _EL_ if (wsskip() == EOS) { _EL_ break; _EL_ } _EL_ switch (step()) { _EL_ case EV_COMM: _EL_ case EV_PI: _EL_ break; _EL_ default : _EL_ panic(FAULT); _EL_ } _EL_ } _EL_  while (mPh == PH_DOCELM_MISC); _EL_ mPh=PH_AFTER_DOC; _EL_ } _EL_  catch (SAXException saxe) { _EL_ throw saxe; _EL_ } _EL_ catch (IOException ioe) { _EL_ throw ioe; _EL_ } _EL_ catch (RuntimeException rte) { _EL_ throw rte; _EL_ } _EL_ catch (Exception e) { _EL_ panic(e.toString()); _EL_ } _EL_  finally { _EL_ mHandCont.endDocument(); _EL_ cleanup(); _EL_ } _EL_ } _EL_ ', 'protected boolean engineVerify(byte[] sigBytes) throws SignatureException { _EL_   if (sigBytes == null) { _EL_     throw new NullPointerException("sigBytes == null"); _EL_   } _EL_   return checkSignature(sigBytes,0,0); _EL_ } _EL_ ', 'public void addMatchString(String matchString){ _EL_   matchStrings.add(matchString); _EL_ } _EL_ ', 'public String timeAgo(final long millis){ _EL_   return time(System.currentTimeMillis() - millis); _EL_ } _EL_ ', 'public static byte[] hexStringToByteArray(String input){ _EL_   if ((input == null) || (input.length() % 2 != 0)) { _EL_     throw new IllegalArgumentException("The input must not be null and " + "shall have an even number of hexadecimal characters. Found: " + input); _EL_   } _EL_   byte[] output=new byte[input.length() / 2]; _EL_   for (int i=0; i < output.length; i++) { _EL_     output[i]=(byte)((Character.digit(input.charAt(i * 2),16) << 4) + Character.digit(input.charAt(i * 2 + 1),16)); _EL_   } _EL_   return output; _EL_ } _EL_ ', 'private boolean stopTrackingJob(JobStatus jobStatus){ _EL_   boolean removed; _EL_   boolean rocking; _EL_ synchronized (mJobs) { _EL_     removed=mJobs.remove(jobStatus); _EL_     rocking=mReadyToRock; _EL_   } _EL_   if (removed && rocking) { _EL_     for (int i=0; i < mControllers.size(); i++) { _EL_       StateController controller=mControllers.get(i); _EL_       controller.maybeStopTrackingJob(jobStatus); _EL_     } _EL_   } _EL_   return removed; _EL_ } _EL_ ', 'public double coefficientOfVariance(){ _EL_   return Math.sqrt(variance()) / mean(); _EL_ } _EL_ ', 'public SkeletonVersionChecker(int defaultVersion){ _EL_   myExplicitVersion=createTreeMap(); _EL_   myDefaultVersion=defaultVersion; _EL_   load(); _EL_ } _EL_ ', '@Override public AttributeSchemaImpl upgradeAttribute(AttributeSchemaImpl newAttr) throws UpgradeException { _EL_   return updateDefaultValues(newAttr,Collections.singleton(OLDEST_VERSION)); _EL_ } _EL_ ', 'public static String toDalvikName(String canonicalName){ _EL_   final boolean isArray=(canonicalName.charAt(0) == \'[\'); _EL_   if (isArray) { _EL_     return canonicalName.replace(\'.\',\'/\'); _EL_   } _EL_  else { _EL_     if (canonicalName.equals("char"))     return "C"; _EL_  else     if (canonicalName.equals("int"))     return "I"; _EL_  else     if (canonicalName.equals("byte"))     return "B"; _EL_  else     if (canonicalName.equals("boolean"))     return "Z"; _EL_  else     if (canonicalName.equals("float"))     return "F"; _EL_  else     if (canonicalName.equals("double"))     return "D"; _EL_  else     if (canonicalName.equals("short"))     return "S"; _EL_  else     if (canonicalName.equals("long"))     return "J"; _EL_  else     if (canonicalName.equals("void"))     return "V"; _EL_  else     return "L" + canonicalName.replace(\'.\',\'/\') + ";"; _EL_   } _EL_ } _EL_ ', 'private void emitEnsureCollection(Method method,String fieldName,StringBuilder builder){ _EL_   builder.append("    protected void "); _EL_   builder.append(getEnsureName(fieldName)); _EL_   builder.append("() {\\n"); _EL_   builder.append("      if ("); _EL_   builder.append(fieldName); _EL_   builder.append(" == null) {\\n        "); _EL_   builder.append(fieldName); _EL_   builder.append(" = new "); _EL_   builder.append(getImplName(method.getGenericReturnType(),true)); _EL_   builder.append("();\\n"); _EL_   builder.append("      }\\n"); _EL_   builder.append("    }\\n"); _EL_ } _EL_ ', 'public void unregisterClient(ClientProxyMembershipID proxyID,AcceptorImpl acceptor,boolean clientDisconnectedCleanly){ _EL_   unregisterClient(proxyID); _EL_   if (acceptor != null) { _EL_     CacheClientNotifier ccn=acceptor.getCacheClientNotifier(); _EL_     if (ccn != null) { _EL_       try { _EL_         ccn.unregisterClient(proxyID,clientDisconnectedCleanly); _EL_       } _EL_  catch (      CancelException ignore) { _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'private String doubleQuotesHandling(String resource){ _EL_   return resource.replaceAll("\\"",Matcher.quoteReplacement("\\\\\\"")); _EL_ } _EL_ ', 'public static int allocateNewContainer(ArrayList<Container> containers,Resource capacity,int paddingPercentage){ _EL_   containers.add(new Container(capacity,paddingPercentage)); _EL_   return containers.size(); _EL_ } _EL_ ', 'public static boolean isLocalResourceUri(Uri uri){ _EL_   final String scheme=getSchemeOrNull(uri); _EL_   return LOCAL_RESOURCE_SCHEME.equals(scheme); _EL_ } _EL_ ', 'protected String doWaitForPath(String filePath){ _EL_   String path=null; _EL_   long waitTimeMillis=0; _EL_   assertTrue("OBB " + filePath + " is not currently mounted!",mSm.isObbMounted(filePath)); _EL_   while (path == null) { _EL_     try { _EL_       Thread.sleep(WAIT_TIME_INCR); _EL_       waitTimeMillis+=WAIT_TIME_INCR; _EL_       if (waitTimeMillis > MAX_WAIT_TIME) { _EL_         fail("Timed out waiting to get path of OBB file " + filePath); _EL_       } _EL_     } _EL_  catch (    InterruptedException e) { _EL_     } _EL_     path=mSm.getMountedObbPath(filePath); _EL_   } _EL_   Log.i(LOG_TAG,"Got OBB path: " + path); _EL_   return path; _EL_ } _EL_ ', '@Override protected boolean isZoneLevelResource(){ _EL_   return false; _EL_ } _EL_ ', 'private void validateMessage(String expectedType,String type,long returnCode,String service,String payload) throws ReplicatorException { _EL_   if (!type.equals(expectedType)) { _EL_     throw new ReplicatorException("Server should have returned message of type \\"" + Protocol.TYPE_FILTERED + "\\", but returned \\""+ type+ "\\" instead"); _EL_   } _EL_  else   if (returnCode != 0) { _EL_     throw new ReplicatorException("Server returned a non-zero code (" + returnCode + "), payload: "+ payload); _EL_   } _EL_  else   if (!service.equals(messageGenerator.getService())) { _EL_     throw new ReplicatorException("Server returned unexpected service name in the message: received \\"" + service + "\\", but expected \\""+ messageGenerator.getService()+ "\\""); _EL_   } _EL_ } _EL_ ', 'public static byte[] MD5(final byte[] message,final int offset,final int length){ _EL_   MessageDigest digest; _EL_   try { _EL_     digest=MessageDigest.getInstance("MD5"); _EL_     digest.update(message,offset,length); _EL_     final byte[] md5=digest.digest(); _EL_     return md5; _EL_   } _EL_  catch (  final NoSuchAlgorithmException e) { _EL_     if (Cfg.EXCEPTION) { _EL_       Check.log(e); _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'private int runMetastoreCompareJob(Optional<Path> inputTableListPath,Path outputPath) throws InterruptedException, IOException, ClassNotFoundException, TemplateRenderException { _EL_   LOG.info("Starting job for step 1..."); _EL_   int result; _EL_   if (inputTableListPath.isPresent()) { _EL_     result=runMetastoreCompareJobWithTextInput(inputTableListPath.get(),outputPath); _EL_   } _EL_  else { _EL_     result=runMetastoreCompareJob(outputPath); _EL_   } _EL_   if (result == 0) { _EL_     LOG.info("Job for step 1 finished successfully! To view logging data, run the following " + "commands in Hive: \\n\\n" + VelocityUtils.renderTemplate(STEP1_HQL_TEMPLATE,velocityContext)); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public void deleteSubPeopleContainers(Set peopleContainers) throws AMException, SSOException { _EL_   Iterator iter=peopleContainers.iterator(); _EL_   while (iter.hasNext()) { _EL_     String peopleContainerDN=(String)iter.next(); _EL_     AMPeopleContainer peopleContainer=new AMPeopleContainerImpl(super.token,peopleContainerDN); _EL_     peopleContainer.delete(); _EL_   } _EL_ } _EL_ ', 'public void queueEvent(Runnable r){ _EL_   if (r == null) { _EL_     throw new IllegalArgumentException("r must not be null"); _EL_   } _EL_ synchronized (sGLThreadManager) { _EL_     mEventQueue.add(r); _EL_     sGLThreadManager.notifyAll(); _EL_   } _EL_ } _EL_ ', 'private void addErrorMessage(String message){ _EL_   if (message != null) { _EL_     m_errorMessages.append(message); _EL_   } _EL_   m_errorMessages.append("\\r\\n"); _EL_ } _EL_ ', 'private boolean bothLinksHaveSameLinkStats(Link linkA,Link linkB){ _EL_   boolean bothLinksHaveSameLinkStats=true; _EL_   if (linkA.getFreespeed() != linkB.getFreespeed()) { _EL_     bothLinksHaveSameLinkStats=false; _EL_   } _EL_   if (linkA.getCapacity() != linkB.getCapacity()) { _EL_     bothLinksHaveSameLinkStats=false; _EL_   } _EL_   return bothLinksHaveSameLinkStats; _EL_ } _EL_ ', "public String generateSanitizedId(){ _EL_   String result=generateId(); _EL_   result=result.replace(':','-'); _EL_   result=result.replace('_','-'); _EL_   result=result.replace('.','-'); _EL_   return result; _EL_ } _EL_ ", 'private Object parseElement(Node element) throws XmlParseException { _EL_   try { _EL_     return parseElementRaw(element); _EL_   } _EL_  catch (  Exception e) { _EL_     throw new XmlParseException("Failed to parse: " + element.getNodeName(),e); _EL_   } _EL_ } _EL_ ', 'private void deleteInstance(EntryClass eclass){ _EL_   int idx=entryClasses.indexOf(eclass); _EL_   eclass=(EntryClass)entryClasses.get(idx); _EL_   int num=eclass.getNumInstances() - 1; _EL_   if (num == 0)   entryClasses.remove(idx); _EL_   eclass.setNumInstances(num); _EL_ } _EL_ ', 'public void logWarning(String message){ _EL_   logger.warning(logPrefix + message); _EL_ } _EL_ ', 'public static String readAsString(InputStream is) throws IOException { _EL_   StringBuffer buf=new StringBuffer(); _EL_   byte[] b=new byte[8192]; _EL_   int nread=-1; _EL_   while ((nread=is.read(b)) >= 0) { _EL_     String s=new String(b,0,nread); _EL_     buf.append(s); _EL_   } _EL_   return buf.toString(); _EL_ } _EL_ ', 'public ArrayFieldVector(int size,T preset){ _EL_   this(preset.getField(),size); _EL_   Arrays.fill(data,preset); _EL_ } _EL_ ', 'public static synchronized void unregisterTransactionServicePlugin(TransactionServicePlugin l){ _EL_   if (service_ != null) { _EL_     service_.removeTSListener(l); _EL_   } _EL_   tsListenersList_.remove(l); _EL_ } _EL_ ', 'public void findAndInit(Object someObj){ _EL_   if (someObj instanceof com.bbn.openmap.MapBean) { _EL_     logger.fine("ProjectionStack found a MapBean."); _EL_     setMapBean((MapBean)someObj); _EL_   } _EL_ } _EL_ ', 'public void removeAllLayers(){ _EL_   _layers.removeAllElements(); _EL_   refreshLayers=true; _EL_   super.repaint(); _EL_ } _EL_ ', 'public int size(){ _EL_   return productions.size(); _EL_ } _EL_ ', 'public static Future<BoxedUnit> zkAsyncCreateFullPathOptimistic(final ZooKeeperClient zkc,final String pathToCreate,final byte[] data,final List<ACL> acl,final CreateMode createMode){ _EL_   Optional<String> parentPathShouldNotCreate=Optional.absent(); _EL_   return zkAsyncCreateFullPathOptimistic(zkc,pathToCreate,parentPathShouldNotCreate,data,acl,createMode); _EL_ } _EL_ ', 'public ReflectiveAttribute(Class<O> objectType,Class<A> fieldType,String fieldName){ _EL_   super(objectType,fieldType,fieldName); _EL_   Field field; _EL_   try { _EL_     field=getField(objectType,fieldName); _EL_     if (!field.isAccessible()) { _EL_       field.setAccessible(true); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     throw new IllegalStateException("Invalid attribute definition: No such field \'" + fieldName + "\' in object \'"+ objectType.getName()+ "\'"); _EL_   } _EL_   if (!fieldType.isAssignableFrom(field.getType())) { _EL_     throw new IllegalStateException("Invalid attribute definition: The type of field \'" + fieldName + "\', type \'"+ field.getType()+ "\', in object \'"+ objectType.getName()+ "\', is not assignable to the type indicated: "+ fieldType.getName()); _EL_   } _EL_   this.field=field; _EL_ } _EL_ ', 'private void processEvent(EventLogControl check,final String name,final DTNHost host1,final DTNHost host2,final Message message){ _EL_   String descString; _EL_   if (!check.showEvent()) { _EL_     return; _EL_   } _EL_   descString=name + " " + (host1 != null ? host1 : "")+ (host2 != null ? (HOST_DELIM + host2) : "")+ (message != null ? " " + message : ""); _EL_   if (regExp != null && !descString.matches(regExp)) { _EL_     return; _EL_   } _EL_   if (check.pauseOnEvent()) { _EL_     gui.setPaused(true); _EL_     if (host1 != null) { _EL_       gui.setFocus(host1); _EL_     } _EL_   } _EL_   addEvent(name,host1,host2,message,check.pauseOnEvent()); _EL_ } _EL_ ', 'public boolean removeMembershipListener(MembershipListener listener){ _EL_   return membershipListeners.remove(listener) != null; _EL_ } _EL_ ', 'private void present(){ _EL_   glUseProgram(quadProgram); _EL_   glBindBuffer(GL_ARRAY_BUFFER,vbo); _EL_   glActiveTexture(GL_TEXTURE0); _EL_   glBindTexture(GL_TEXTURE_2D,tex); _EL_   glDrawArrays(GL_TRIANGLES,0,6); _EL_   glActiveTexture(GL_TEXTURE0); _EL_   glBindTexture(GL_TEXTURE_2D,0); _EL_   glBindBuffer(GL_ARRAY_BUFFER,0); _EL_   glUseProgram(0); _EL_ } _EL_ ', 'public static Calendar next(Calendar self){ _EL_   Calendar result=(Calendar)self.clone(); _EL_   result.add(Calendar.DAY_OF_YEAR,1); _EL_   return result; _EL_ } _EL_ ', 'public static <T>void removeAll(List<T> list,List<Integer> indexes){ _EL_   if (list == null || indexes == null) { _EL_     return; _EL_   } _EL_   Collections.sort(indexes,Collections.reverseOrder()); _EL_   final int size=list.size(); _EL_   for (  Integer index : indexes) { _EL_     if (index >= 0 && index < size) { _EL_       list.remove((int)index); _EL_     } _EL_   } _EL_ } _EL_ ', 'public CProjectTree(final JFrame parent,final CDatabaseManager databaseManager){ _EL_   Preconditions.checkNotNull(databaseManager,"IE01840: Database manager object can\'t be null"); _EL_   m_treeModel=new CProjectTreeModel(this); _EL_   setModel(m_treeModel); _EL_   CProjectTreeDragHandlerInitializer.initialize(parent,this,databaseManager); _EL_   addMouseListener(new InternalMouseListener()); _EL_   setScrollsOnExpand(false); _EL_   setRootVisible(false); _EL_   m_rootNode=new CRootNode(this,databaseManager); _EL_   m_treeModel.setRoot(m_rootNode); _EL_   setCellRenderer(new IconNodeRenderer()); _EL_   m_popup.add(CActionProxy.proxy(new CAddDatabaseAction(this))); _EL_ } _EL_ ', 'public boolean isObject(){ _EL_   return typeString.startsWith(OBJECT); _EL_ } _EL_ ', 'private float interpolate(){ _EL_   long currTime=System.currentTimeMillis(); _EL_   float elapsed=(currTime - startTime) / ZOOM_TIME; _EL_   elapsed=Math.min(1f,elapsed); _EL_   return interpolator.getInterpolation(elapsed); _EL_ } _EL_ ', 'private void autoRequestMods(){ _EL_   if (!c.autoRequestModsEnabled()) { _EL_     return; _EL_   } _EL_   Set<String> joinedChannels=c.getJoinedChannels(); _EL_   for (  String channel : joinedChannels) { _EL_     if (!modsAlreadyRequested.contains(channel)) { _EL_       LOGGER.info("Auto-requesting mods for " + channel); _EL_       modsAlreadyRequested.add(channel); _EL_       requestModsSilent(channel); _EL_       return; _EL_     } _EL_   } _EL_ } _EL_ ', 'public synchronized void renameFile(JDBCSequentialFile file,String newFileName) throws SQLException { _EL_   try { _EL_     connection.setAutoCommit(false); _EL_     renameFile.setString(1,newFileName); _EL_     renameFile.setInt(2,file.getId()); _EL_     renameFile.executeUpdate(); _EL_     connection.commit(); _EL_   } _EL_  catch (  SQLException e) { _EL_     connection.rollback(); _EL_     throw e; _EL_   } _EL_ } _EL_ ', 'public static void handleErrorViolations(Formatter formatter,long numErrors){ _EL_   ExitCode exitCode=formatter.getExitStatus(numErrors); _EL_   if (exitCode != ExitCode.SUCCESS) { _EL_     System.exit(exitCode.ordinal()); _EL_   } _EL_ } _EL_ ', 'public void remove(final Sensor sensor){ _EL_   Set<Sensor> oldSelection=new HashSet<Sensor>(selection); _EL_   boolean rv=selection.remove(sensor); _EL_   if (rv) { _EL_     fireSelectionChanged(oldSelection,selection); _EL_   } _EL_ } _EL_ ', 'protected void printWay(MapWay way,DefaultEntityViewInfo pInfo,boolean asArea){ _EL_   List<MapNode> nodes=getWayNodes(way); _EL_   if (nodes != null) { _EL_     boolean asOneway=false; _EL_     NameInfo textInfo=null; _EL_     if (scale >= pInfo.minNameScale * displayFactor) { _EL_       asOneway=way.isOneway(); _EL_       if (way.getName() != null && pInfo.nameColor != null) { _EL_         textInfo=new NameInfo(way.getName(),pInfo.nameColor,pInfo.printOrder); _EL_       } _EL_     } _EL_     printLine(imageBdr,nodes,pInfo,asArea,asOneway,textInfo); _EL_   } _EL_ } _EL_ ', 'private boolean hasNextProxy(){ _EL_   return nextProxyIndex < proxies.size(); _EL_ } _EL_ ', 'private boolean noObjectWasClickedOn(){ _EL_   boolean pickedNodeNull=(pickedNode == null); _EL_   boolean cameraPicked=(pickedNode instanceof PCamera); _EL_   return (pickedNodeNull || cameraPicked); _EL_ } _EL_ ', '@Override public int hashCode(){ _EL_   throw new UnsupportedOperationException("hashCode() is not supported because sets are mutable"); _EL_ } _EL_ ', 'public static String validateCreditCardNumber(String creditCardNumber,String creditCardType){ _EL_   if (creditCardNumber == null || creditCardType == null)   return "CreditCardNumberError"; _EL_   String ccStartList=""; _EL_   String ccLengthList=""; _EL_   if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_MasterCard)) { _EL_     ccStartList="51,52,53,54,55"; _EL_     ccLengthList="16"; _EL_   } _EL_  else   if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Visa)) { _EL_     ccStartList="4"; _EL_     ccLengthList="13,16"; _EL_   } _EL_  else   if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Amex)) { _EL_     ccStartList="34,37"; _EL_     ccLengthList="15"; _EL_   } _EL_  else   if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Discover)) { _EL_     ccStartList="6011"; _EL_     ccLengthList="16"; _EL_   } _EL_  else   if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Diners)) { _EL_     ccStartList="300,301,302,303,304,305,36,38"; _EL_     ccLengthList="14"; _EL_   } _EL_  else { _EL_     ccStartList="2014,2149"; _EL_     ccLengthList="15"; _EL_     ccStartList+=",3088,3096,3112,3158,3337,3528"; _EL_     ccLengthList+=",16"; _EL_     ccStartList+=",2131,1800"; _EL_     ccLengthList+=",15"; _EL_   } _EL_   String ccNumber=checkNumeric(creditCardNumber); _EL_   int ccLength=ccNumber.length(); _EL_   boolean ccLengthOK=false; _EL_   StringTokenizer st=new StringTokenizer(ccLengthList,",",false); _EL_   while (st.hasMoreTokens() && !ccLengthOK) { _EL_     int l=Integer.parseInt(st.nextToken()); _EL_     if (ccLength == l)     ccLengthOK=true; _EL_   } _EL_   if (!ccLengthOK) { _EL_     s_log.fine("validateCreditCardNumber Length=" + ccLength + " <> "+ ccLengthList); _EL_     return "CreditCardNumberError"; _EL_   } _EL_   boolean ccIdentified=false; _EL_   st=new StringTokenizer(ccStartList,",",false); _EL_   while (st.hasMoreTokens() && !ccIdentified) { _EL_     if (ccNumber.startsWith(st.nextToken()))     ccIdentified=true; _EL_   } _EL_   if (!ccIdentified)   s_log.fine("validateCreditCardNumber Type=" + creditCardType + " <> "+ ccStartList); _EL_   String check=validateCreditCardNumber(ccNumber); _EL_   if (check.length() != 0)   return check; _EL_   if (!ccIdentified)   return "CreditCardNumberProblem?"; _EL_   return ""; _EL_ } _EL_ ', 'public static void extract(File zipFile,File destDir) throws IOException { _EL_   ZipFile zf=new ZipFile(zipFile); _EL_   try { _EL_     extract(zf,destDir); _EL_   } _EL_   finally { _EL_     zf.close(); _EL_   } _EL_ } _EL_ ', 'public Config(String file){ _EL_   this(new File(CONFIG_DIR,file.contains(".") ? file : file.concat(".conf"))); _EL_ } _EL_ ', 'public GotoLineDialog(JTextComponent text){ _EL_   super(ActionUtils.getFrameFor(text),false); _EL_   initComponents(); _EL_   this.text=text; _EL_   setLocationRelativeTo(text.getRootPane()); _EL_ } _EL_ ', 'private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError { _EL_   RetryPolicy retryPolicy=request.getRetryPolicy(); _EL_   int oldTimeout=request.getTimeoutMs(); _EL_   try { _EL_     retryPolicy.retry(exception); _EL_   } _EL_  catch (  VolleyError e) { _EL_     request.addMarker(String.format("%s-giveup [timeout=%s]",logPrefix,oldTimeout)); _EL_     throw e; _EL_   } _EL_   request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout)); _EL_ } _EL_ ', 'protected void computeAxisValues(float min,float max){ _EL_   float yMin=min; _EL_   float yMax=max; _EL_   int labelCount=mYAxis.getLabelCount(); _EL_   double range=Math.abs(yMax - yMin); _EL_   if (labelCount == 0 || range <= 0) { _EL_     mYAxis.mEntries=new float[]{}; _EL_     mYAxis.mEntryCount=0; _EL_     return; _EL_   } _EL_   double rawInterval=range / labelCount; _EL_   double interval=Utils.roundToNextSignificant(rawInterval); _EL_   double intervalMagnitude=Math.pow(10,(int)Math.log10(interval)); _EL_   int intervalSigDigit=(int)(interval / intervalMagnitude); _EL_   if (intervalSigDigit > 5) { _EL_     interval=Math.floor(10 * intervalMagnitude); _EL_   } _EL_   if (mYAxis.isShowOnlyMinMaxEnabled()) { _EL_     mYAxis.mEntryCount=2; _EL_     mYAxis.mEntries=new float[2]; _EL_     mYAxis.mEntries[0]=yMin; _EL_     mYAxis.mEntries[1]=yMax; _EL_   } _EL_  else { _EL_     double first=Math.ceil(yMin / interval) * interval; _EL_     double last=Utils.nextUp(Math.floor(yMax / interval) * interval); _EL_     double f; _EL_     int i; _EL_     int n=0; _EL_     for (f=first; f <= last; f+=interval) { _EL_       ++n; _EL_     } _EL_     mYAxis.mEntryCount=n; _EL_     if (mYAxis.mEntries.length < n) { _EL_       mYAxis.mEntries=new float[n]; _EL_     } _EL_     for (f=first, i=0; i < n; f+=interval, ++i) { _EL_       mYAxis.mEntries[i]=(float)f; _EL_     } _EL_   } _EL_   if (interval < 1) { _EL_     mYAxis.mDecimals=(int)Math.ceil(-Math.log10(interval)); _EL_   } _EL_  else { _EL_     mYAxis.mDecimals=0; _EL_   } _EL_ } _EL_ ', 'private void sendRequestTeardown() throws IOException { _EL_   String request="TEARDOWN rtsp://" + mParameters.host + ":"+ mParameters.port+ mParameters.path+ " RTSP/1.0\\r\\n"+ addHeaders(); _EL_   Log.i(TAG,request.substring(0,request.indexOf("\\r\\n"))); _EL_   mOutputStream.write(request.getBytes("UTF-8")); _EL_   mOutputStream.flush(); _EL_ } _EL_ ', 'public int length(){ _EL_   return this.filledLength; _EL_ } _EL_ ', '@Override public boolean equals(Object o){ _EL_   if (o instanceof Prefix) { _EL_     return value.equals(((Prefix)o).value); _EL_   } _EL_   return false; _EL_ } _EL_ ', 'private void notifyWifiState(){ _EL_ synchronized (mWifiMonitor) { _EL_     Log.v(LOG_TAG,"notify wifi state changed."); _EL_     mWifiMonitor.notify(); _EL_   } _EL_ } _EL_ ', 'public void removeDiagramChangeListener(mxDiagramChangeListener listener){ _EL_   if (diagramChangeListeners != null) { _EL_     diagramChangeListeners.remove(listener); _EL_   } _EL_ } _EL_ ', "public static String stripLeadingDollar(String str){ _EL_   return (str.charAt(0) == '$') ? str.substring(1) : str; _EL_ } _EL_ ", '@AfterClass public static void clearHostContext() throws Exception { _EL_   System.clearProperty("hostContext"); _EL_ } _EL_ ', 'public PNormNormalization(double p){ _EL_   if (p <= 0 || Double.isNaN(p))   throw new IllegalArgumentException("p must be greater than zero, not " + p); _EL_   this.p=p; _EL_ } _EL_ ', '@Override public void start(Stage stage) throws Exception { _EL_   CategoryDataset dataset=createDataset(); _EL_   JFreeChart chart=createChart(dataset); _EL_   ChartViewer viewer=new ChartViewer(chart); _EL_   viewer.addChartMouseListener(this); _EL_   stage.setScene(new Scene(viewer)); _EL_   stage.setTitle("JFreeChart: BarChartFXDemo1.java"); _EL_   stage.setWidth(700); _EL_   stage.setHeight(390); _EL_   stage.show(); _EL_ } _EL_ ', 'private static Node locateAttrParent(Element elem,Node attr){ _EL_   Node parent=null; _EL_   Attr check=elem.getAttributeNode(attr.getNodeName()); _EL_   if (check == attr)   parent=elem; _EL_   if (null == parent) { _EL_     for (Node node=elem.getFirstChild(); null != node; node=node.getNextSibling()) { _EL_       if (Node.ELEMENT_NODE == node.getNodeType()) { _EL_         parent=locateAttrParent((Element)node,attr); _EL_         if (null != parent)         break; _EL_       } _EL_     } _EL_   } _EL_   return parent; _EL_ } _EL_ ', 'public static Tailer create(File file,TailerListener listener,long delayMillis,boolean end,int bufSize){ _EL_   Tailer tailer=new Tailer(file,listener,delayMillis,end,bufSize); _EL_   Thread thread=new Thread(tailer); _EL_   thread.setDaemon(true); _EL_   thread.start(); _EL_   return tailer; _EL_ } _EL_ ', 'public int size(){ _EL_   return values.size(); _EL_ } _EL_ ', 'public DViewAsn1Dump(JDialog parent,X509CRL crl) throws Asn1Exception, IOException { _EL_   super(res.getString("DViewAsn1Dump.Crl.Title")); _EL_   this.crl=crl; _EL_   initComponents(); _EL_ } _EL_ ', 'public synchronized void putMessage(Object obj){ _EL_   fifo.addElement(obj); _EL_   numMessage++; _EL_   notifyAll(); _EL_ } _EL_ ', 'public void dispose(){ _EL_   if (isDisposed()) { _EL_     return; _EL_   } _EL_   setDisposed(true); _EL_   if (!menu) { _EL_     super.dispose(); _EL_   } _EL_ } _EL_ ', 'public double signed_distance(PlaPointFloat p_point){ _EL_   double dx=point_b.v_x - point_a.v_x; _EL_   double dy=point_b.v_y - point_a.v_y; _EL_   double det=dy * (p_point.v_x - point_a.v_x) - dx * (p_point.v_y - point_a.v_y); _EL_   double length=Math.sqrt(dx * dx + dy * dy); _EL_   return det / length; _EL_ } _EL_ ', 'public static void expandReal(String numberString,WordRelation wordRelation,Item tokenItem){ _EL_   int stringLength=numberString.length(); _EL_   int position; _EL_   if (numberString.charAt(0) == \'-\') { _EL_     wordRelation.addWord(tokenItem,"minus"); _EL_     expandReal(numberString.substring(1,stringLength),wordRelation,tokenItem); _EL_   } _EL_  else   if (numberString.charAt(0) == \'+\') { _EL_     wordRelation.addWord(tokenItem,"plus"); _EL_     expandReal(numberString.substring(1,stringLength),wordRelation,tokenItem); _EL_   } _EL_  else   if ((position=numberString.indexOf(\'e\')) != -1 || (position=numberString.indexOf(\'E\')) != -1) { _EL_     expandReal(numberString.substring(0,position),wordRelation,tokenItem); _EL_     wordRelation.addWord(tokenItem,"e"); _EL_     expandReal(numberString.substring(position + 1),wordRelation,tokenItem); _EL_   } _EL_  else   if ((position=numberString.indexOf(\'.\')) != -1) { _EL_     String beforeDot=numberString.substring(0,position); _EL_     if (beforeDot.length() > 0) { _EL_       expandReal(beforeDot,wordRelation,tokenItem); _EL_     } _EL_     wordRelation.addWord(tokenItem,"point"); _EL_     String afterDot=numberString.substring(position + 1); _EL_     if (afterDot.length() > 0) { _EL_       expandDigits(afterDot,wordRelation,tokenItem); _EL_     } _EL_   } _EL_  else { _EL_     expandNumber(numberString,wordRelation,tokenItem); _EL_   } _EL_ } _EL_ ', 'public static double[] ones(int L){ _EL_   double m[]=new double[L]; _EL_   Arrays.fill(m,1.); _EL_   return m; _EL_ } _EL_ ', 'private PermissionRequest submit(){ _EL_   int showRationale=0; _EL_   ArrayList<String> requests=new ArrayList<>(); _EL_   for (  final String permission : mPermissions) { _EL_     if (mActivity.checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) { _EL_       requests.add(permission); _EL_       if (ActivityCompat.shouldShowRequestPermissionRationale(mActivity,permission)) { _EL_         showRationale++; _EL_       } _EL_     } _EL_   } _EL_   mRequestCode=mRequestId.addAndGet(1); _EL_   if (requests.isEmpty()) { _EL_     if (mCallback != null) { _EL_       mCallback.onPermissionsGranted(); _EL_     } _EL_   } _EL_  else { _EL_     if (showRationale == 0) { _EL_       ActivityCompat.requestPermissions(mActivity,mPermissions,mRequestCode); _EL_     } _EL_  else { _EL_       showRationale(); _EL_     } _EL_   } _EL_   return this; _EL_ } _EL_ ', 'public static DeleteSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,SetRelationDefinition<?,?> r) throws ArgumentException { _EL_   return new DeleteSubCommandHandler(parser,p,r,p.child(r)); _EL_ } _EL_ ', 'protected void removeCycles(){ _EL_   int visited[]=new int[m_nodes.size()]; _EL_   for (int i=0; i < graphMatrix.length; i++) { _EL_     if (visited[i] == 0) { _EL_       removeCycles2(i,visited); _EL_       visited[i]=1; _EL_     } _EL_   } _EL_ } _EL_ ', 'int findAncestor(XPathContext xctxt,XPath fromMatchPattern,XPath countMatchPattern,int context,ElemNumber namespaceContext) throws javax.xml.transform.TransformerException { _EL_   DTM dtm=xctxt.getDTM(context); _EL_   while (DTM.NULL != context) { _EL_     if (null != fromMatchPattern) { _EL_       if (fromMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) { _EL_         break; _EL_       } _EL_     } _EL_     if (null != countMatchPattern) { _EL_       if (countMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) { _EL_         break; _EL_       } _EL_     } _EL_     context=dtm.getParent(context); _EL_   } _EL_   return context; _EL_ } _EL_ ', 'public final ByteBuffer encode(CharBuffer in) throws CharacterCodingException { _EL_   int length=(int)(in.remaining() * averageBytesPerChar); _EL_   ByteBuffer out=ByteBuffer.allocate(length); _EL_   reset(); _EL_   while (state != FLUSHED) { _EL_     CoderResult result=encode(in,out,true); _EL_     if (result == CoderResult.OVERFLOW) { _EL_       out=allocateMore(out); _EL_       continue; _EL_     } _EL_  else { _EL_       checkCoderResult(result); _EL_     } _EL_     result=flush(out); _EL_     if (result == CoderResult.OVERFLOW) { _EL_       out=allocateMore(out); _EL_     } _EL_  else { _EL_       checkCoderResult(result); _EL_     } _EL_   } _EL_   out.flip(); _EL_   return out; _EL_ } _EL_ ', 'public static Metrics create(Map<String,String> dimensionMap){ _EL_   Map<String,String> map=Maps.newTreeMap(); _EL_   map.putAll(dimensionMap); _EL_   return new Metrics(Collections.unmodifiableMap(map)); _EL_ } _EL_ ', "protected Class<?> resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException { _EL_   Object annotation=readLocation(); _EL_   String className=classDesc.getName(); _EL_   ClassLoader defaultLoader=skipDefaultResolveClass ? null : latestUserDefinedLoader(); _EL_   String codebase=null; _EL_   if (!useCodebaseOnly && annotation instanceof String) { _EL_     codebase=(String)annotation; _EL_   } _EL_   try { _EL_     return RMIClassLoader.loadClass(codebase,className,defaultLoader); _EL_   } _EL_  catch (  AccessControlException e) { _EL_     return checkSunClass(className,e); _EL_   } _EL_ catch (  ClassNotFoundException e) { _EL_     try { _EL_       if (Character.isLowerCase(className.charAt(0)) && className.indexOf('.') == -1) { _EL_         return super.resolveClass(classDesc); _EL_       } _EL_     } _EL_  catch (    ClassNotFoundException e2) { _EL_     } _EL_     throw e; _EL_   } _EL_ } _EL_ ", 'public boolean contains(final CreatureRespawnPoint point){ _EL_   if (point == null) { _EL_     return false; _EL_   } _EL_   final IRPZone entityZone=point.getZone(); _EL_   return zone.equals(entityZone) && shape.contains(point.getX(),point.getY()); _EL_ } _EL_ ', 'public boolean isUseAntiAlias(){ _EL_   return useAntiAlias; _EL_ } _EL_ ', 'private void loadLevelFile(String tableName,String columnName,String cubeName,String schemaName){ _EL_   String baseLocation=CarbonUtil.getCarbonStorePath(schemaName,cubeName); _EL_   baseLocation=baseLocation + File.separator + schemaName+ File.separator+ cubeName; _EL_   if (loadFolderList.size() == 0) { _EL_     checkAndUpdateFolderList(baseLocation); _EL_   } _EL_   try { _EL_     File[] filesArray=null; _EL_     for (    File loadFoler : loadFolderList) { _EL_       filesArray=getFilesArray(loadFoler,tableName + \'_\' + columnName); _EL_       if (null != filesArray) { _EL_         for (int i=0; i < filesArray.length; i++) { _EL_           readLevelFileAndUpdateCache(filesArray[i],tableName + \'_\' + columnName); _EL_         } _EL_       } _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     LOGGER.error("Problem while populating the cache"); _EL_   } _EL_ } _EL_ ', 'private void computeDuration(){ _EL_   duration=System.currentTimeMillis() - start; _EL_   total_duration+=duration; _EL_ } _EL_ ', '@SuppressWarnings({"unchecked"}) @Override public byte[] serialize(List list){ _EL_   if (list == null)   return null; _EL_   final int size=list.size(); _EL_   final int[] valueIDs=new int[size]; _EL_   final byte[][] valueBytes=new byte[size][]; _EL_   int totalSize=4 + size * 8; _EL_   int i=0; _EL_   Iterator iter=list.iterator(); _EL_   while (iter.hasNext()) { _EL_     final Object value=iter.next(); _EL_     Class<?> valueClass=value.getClass(); _EL_     int valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass); _EL_     if (valueTypeID == -1) { _EL_       if (value instanceof List) { _EL_         valueClass=List.class; _EL_         valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass); _EL_       } _EL_  else       if (value instanceof Map) { _EL_         valueClass=Map.class; _EL_         valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass); _EL_       } _EL_  else { _EL_         throw new IllegalArgumentException("Unsupported class: " + valueClass.getName()); _EL_       } _EL_     } _EL_     valueIDs[i]=valueTypeID; _EL_     final EntitySerDeser valueSerDer=EntityDefinitionManager.getSerDeser(valueClass); _EL_     if (valueSerDer == null) { _EL_       throw new IllegalArgumentException("Unsupported class: " + valueClass.getName()); _EL_     } _EL_     valueBytes[i]=valueSerDer.serialize(value); _EL_     totalSize+=valueBytes[i].length; _EL_     ++i; _EL_   } _EL_   final byte[] result=new byte[totalSize]; _EL_   int offset=0; _EL_   ByteUtil.intToBytes(size,result,offset); _EL_   offset+=4; _EL_   for (i=0; i < size; ++i) { _EL_     ByteUtil.intToBytes(valueIDs[i],result,offset); _EL_     offset+=4; _EL_     ByteUtil.intToBytes(valueBytes[i].length,result,offset); _EL_     offset+=4; _EL_     System.arraycopy(valueBytes[i],0,result,offset,valueBytes[i].length); _EL_     offset+=valueBytes[i].length; _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public int handleNITFHeader(BinaryFile binFile){ _EL_   try { _EL_     byte[] nitfArray=binFile.readBytes(4,false); _EL_     String nitf=new String(nitfArray); _EL_     binFile.seek(RPF_DATE_LOCATION); _EL_     nitfArray=binFile.readBytes(2,false); _EL_     nitf=new String(nitfArray); _EL_     if (nitf.equalsIgnoreCase("19") || nitf.equalsIgnoreCase("20"))     return 0; _EL_     binFile.seek(RPF_DATE_LOCATION + TOC_NITF_HEADER_LENGTH); _EL_     nitfArray=binFile.readBytes(2,false); _EL_     nitf=new String(nitfArray); _EL_     if (nitf.equalsIgnoreCase("19") || nitf.equalsIgnoreCase("20"))     return TOC_NITF_HEADER_LENGTH; _EL_     binFile.seek(RPF_DATE_LOCATION + FRAME_SHORT_NITF_HEADER_LENGTH); _EL_     nitfArray=binFile.readBytes(2,false); _EL_     nitf=new String(nitfArray); _EL_     if (nitf.equalsIgnoreCase("19") || nitf.equalsIgnoreCase("20"))     return FRAME_SHORT_NITF_HEADER_LENGTH; _EL_     binFile.seek(RPF_DATE_LOCATION + FRAME_LONG_NITF_HEADER_LENGTH); _EL_     nitfArray=binFile.readBytes(2,false); _EL_     nitf=new String(nitfArray); _EL_     if (nitf.equalsIgnoreCase("19") || nitf.equalsIgnoreCase("20"))     return FRAME_LONG_NITF_HEADER_LENGTH; _EL_   } _EL_  catch (  IOException e) { _EL_     Debug.error("RpfHeader: File IO Error while handling NITF header:\\n" + e); _EL_     return -1; _EL_   } _EL_ catch (  FormatException f) { _EL_     Debug.error("RpfHeader: File IO Format error while reading header information:\\n" + f); _EL_     return -1; _EL_   } _EL_   return -1; _EL_ } _EL_ ', 'public BufferedImage takeScreenshot(){ _EL_   Debug.setDebugLevel(3); _EL_   File scrFile=driver.getScreenshotAs(OutputType.FILE); _EL_   BufferedImage bufferedImage=null; _EL_   try { _EL_     bufferedImage=ImageIO.read(scrFile); _EL_   } _EL_  catch (  IOException e) { _EL_     e.printStackTrace(); _EL_   } _EL_   return bufferedImage; _EL_ } _EL_ ', 'private void pickCenterOverlap(ScoutWidget[] list){ _EL_   for (int i=0; i < list.length; i++) { _EL_     ScoutWidget scoutWidget=list[i]; _EL_     float centerX=scoutWidget.getX() + scoutWidget.getWidth() / 2; _EL_     float centerY=scoutWidget.getY() + scoutWidget.getHeight() / 2; _EL_     for (int j=0; j < list.length; j++) { _EL_       if (i == j)       continue; _EL_       ScoutWidget widget=list[j]; _EL_       if (scoutWidget.isGuideline()) { _EL_         continue; _EL_       } _EL_       if (!widget.isGuideline() && ScoutWidget.distance(scoutWidget,widget) > MAX_DIST_FOR_CENTER_OVERLAP) { _EL_         continue; _EL_       } _EL_       if (!widget.isGuideline() || widget.isVerticalGuideline()) { _EL_         if (Math.abs(widget.getX() - centerX) < CENTER_ERROR) { _EL_           scoutWidget.setEdgeCentered(1,widget,Direction.WEST); _EL_         } _EL_         if (Math.abs(widget.getX() + widget.getWidth() - centerX) < CENTER_ERROR) { _EL_           scoutWidget.setEdgeCentered(1,widget,Direction.EAST); _EL_         } _EL_       } _EL_       if (!widget.isGuideline() || widget.isHorizontalGuideline()) { _EL_         if (Math.abs(widget.getY() - centerY) < CENTER_ERROR) { _EL_           scoutWidget.setEdgeCentered(0,widget,Direction.NORTH); _EL_         } _EL_         if (Math.abs(widget.getY() + widget.getHeight() - centerY) < CENTER_ERROR) { _EL_           scoutWidget.setEdgeCentered(0,widget,Direction.SOUTH); _EL_         } _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'protected boolean[] datasetIntegrity(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing){ _EL_   print("kernel doesn\'t alter original datasets"); _EL_   printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType); _EL_   print("..."); _EL_   int numTrain=getNumInstances(), numClasses=2, missingLevel=20; _EL_   boolean[] result=new boolean[2]; _EL_   Instances train=null; _EL_   Kernel kernel=null; _EL_   try { _EL_     train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance); _EL_     if (missingLevel > 0) { _EL_       addMissing(train,missingLevel,predictorMissing,classMissing); _EL_     } _EL_     kernel=Kernel.makeCopies(getKernel(),1)[0]; _EL_   } _EL_  catch (  Exception ex) { _EL_     throw new Error("Error setting up for tests: " + ex.getMessage()); _EL_   } _EL_   try { _EL_     Instances trainCopy=new Instances(train); _EL_     kernel.buildKernel(trainCopy); _EL_     compareDatasets(train,trainCopy); _EL_     println("yes"); _EL_     result[0]=true; _EL_   } _EL_  catch (  Exception ex) { _EL_     println("no"); _EL_     result[0]=false; _EL_     if (m_Debug) { _EL_       println("\\n=== Full Report ==="); _EL_       print("Problem during building"); _EL_       println(": " + ex.getMessage() + "\\n"); _EL_       println("Here is the dataset:\\n"); _EL_       println("=== Train Dataset ===\\n" + train.toString() + "\\n"); _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public static boolean isStringType(Type t){ _EL_   return t.equals(RefType.v("java.lang.String")); _EL_ } _EL_ ', 'public void endElement(String namespaceURI,String localName,String name) throws org.xml.sax.SAXException { _EL_   if (m_inEntityRef)   return; _EL_   m_prefixMap.popNamespaces(m_elemContext.m_currentElemDepth,null); _EL_   try { _EL_     final java.io.Writer writer=m_writer; _EL_     if (m_elemContext.m_startTagOpen) { _EL_       if (m_tracer != null)       super.fireStartElem(m_elemContext.m_elementName); _EL_       int nAttrs=m_attributes.getLength(); _EL_       if (nAttrs > 0) { _EL_         processAttributes(m_writer,nAttrs); _EL_         m_attributes.clear(); _EL_       } _EL_       if (m_spaceBeforeClose)       writer.write(" />"); _EL_  else       writer.write("/>"); _EL_     } _EL_  else { _EL_       if (m_cdataTagOpen)       closeCDATA(); _EL_       if (shouldIndent())       indent(m_elemContext.m_currentElemDepth - 1); _EL_       writer.write(\'<\'); _EL_       writer.write(\'/\'); _EL_       writer.write(name); _EL_       writer.write(\'>\'); _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     throw new SAXException(e); _EL_   } _EL_   if (!m_elemContext.m_startTagOpen && m_doIndent) { _EL_     m_ispreserve=m_preserves.isEmpty() ? false : m_preserves.pop(); _EL_   } _EL_   m_isprevtext=false; _EL_   if (m_tracer != null)   super.fireEndElem(name); _EL_   m_elemContext=m_elemContext.m_prev; _EL_ } _EL_ ', 'public static void f(String msg,Object... args){ _EL_   if (!allowWtf)   return; _EL_   StackTraceElement caller=getCallerStackTraceElement(); _EL_   String tag=generateTag(caller); _EL_   if (sLevel > LEVEL_FATAL) { _EL_     return; _EL_   } _EL_   if (args.length > 0) { _EL_     msg=String.format(msg,args); _EL_   } _EL_   Log.wtf(tag,msg); _EL_ } _EL_ ', 'public void waitForVolumesToBeVisible(CGRequestParams request){ _EL_   scan(request.getCopies(),request.getRsets()); _EL_ } _EL_ ', 'public static boolean copyStream(InputStream is,OutputStream os,CopyListener listener,int bufferSize) throws IOException { _EL_   int current=0; _EL_   int total=is.available(); _EL_   if (total <= 0) { _EL_     total=DEFAULT_IMAGE_TOTAL_SIZE; _EL_   } _EL_   final byte[] bytes=new byte[bufferSize]; _EL_   int count; _EL_   if (shouldStopLoading(listener,current,total))   return false; _EL_   while ((count=is.read(bytes,0,bufferSize)) != -1) { _EL_     os.write(bytes,0,count); _EL_     current+=count; _EL_     if (shouldStopLoading(listener,current,total))     return false; _EL_   } _EL_   os.flush(); _EL_   return true; _EL_ } _EL_ ', '@Override public DocumentType createDocumentType(String qualifiedName,String publicID,String systemID){ _EL_   checkQName(qualifiedName); _EL_   return new DocumentTypeImpl(null,qualifiedName,publicID,systemID); _EL_ } _EL_ ', 'public String fadeAudio(String path,String type,double fadeInLength,double stopTime,double fadeOutLength) throws IOException { _EL_   final List<String> curves=Arrays.asList(new String[]{"q","h","t","l","p"}); _EL_   if (!curves.contains(type)) { _EL_     throw new RuntimeException("fadeAudio: passed invalid type: " + type); _EL_   } _EL_   File file=new File(path); _EL_   String outFile=file.getCanonicalPath() + "_faded.wav"; _EL_   ArrayList<String> cmd=new ArrayList<String>(); _EL_   cmd.add(soxBin); _EL_   cmd.add(path); _EL_   cmd.add(outFile); _EL_   cmd.add("fade"); _EL_   cmd.add(type); _EL_   cmd.add(fadeInLength + ""); _EL_   if (stopTime != -1)   cmd.add(stopTime + ""); _EL_   if (fadeOutLength != -1)   cmd.add(fadeOutLength + ""); _EL_   try { _EL_     int rc=execSox(cmd,callback); _EL_     if (rc != 0) { _EL_       outFile=null; _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     e.printStackTrace(); _EL_   } _EL_ catch (  InterruptedException e) { _EL_     e.printStackTrace(); _EL_   } _EL_   return outFile; _EL_ } _EL_ ', 'public static ClassProperties loadProperties(Class[] cls,Properties properties,boolean inherit){ _EL_   ClassProperties cp=new ClassProperties(properties); _EL_   for (  Class c : cls) { _EL_     cp.load(c,inherit); _EL_   } _EL_   return cp; _EL_ } _EL_ ', 'protected void create_y_axis(int i){ _EL_   Log.e("index vlaue",i + ""); _EL_   float ver_height=((graphheight / label_size) * i) + border; _EL_   if (i == largest_value_set.size() - 1)   canvas.drawLine(horstart,ver_height,width - (border),ver_height,paint); _EL_  else   canvas.drawLine(horstart,ver_height,border,ver_height,paint); _EL_   paint.setColor(Color.BLACK); _EL_   int Y_labels=(int)size - 1 - i; _EL_   String y_labels=String.format("%.1f",Y_labels * y_axis_ratio); _EL_   paint.setTextAlign(Paint.Align.RIGHT); _EL_   canvas.drawText(y_labels,horstart - 15,ver_height - 10,paint); _EL_   paint.setTextAlign(Paint.Align.LEFT); _EL_ } _EL_ ', 'public void extend(RuleGrounding other){ _EL_   if (other.isFailed()) { _EL_     groundings.clear(); _EL_     return; _EL_   } _EL_   extend(other.getAlternatives()); _EL_ } _EL_ ', 'private String local_number() throws ParseException { _EL_   StringBuilder s=new StringBuilder(); _EL_   if (debug)   dbg_enter("local_number"); _EL_   try { _EL_     int lc=0; _EL_     while (lexer.hasMoreChars()) { _EL_       char la=lexer.lookAhead(0); _EL_       if (la == \'*\' || la == \'#\' || la == \'-\' || la == \'.\' || la == \'(\' || la == \')\' || Lexer.isHexDigit(la)) { _EL_         lexer.consume(1); _EL_         s.append(la); _EL_         lc++; _EL_       } _EL_  else       if (lc > 0)       break; _EL_  else       throw createParseException("unexepcted " + la); _EL_     } _EL_     return s.toString(); _EL_   } _EL_   finally { _EL_     if (debug)     dbg_leave("local_number"); _EL_   } _EL_ } _EL_ ', 'public void pathValuesToPixel(List<Path> paths){ _EL_   for (int i=0; i < paths.size(); i++) { _EL_     pathValueToPixel(paths.get(i)); _EL_   } _EL_ } _EL_ ', 'public IndexSegmentIndex(IRawStore store,Checkpoint checkpoint,IndexMetadata metadata,boolean readOnly){ _EL_   super(store,checkpoint,metadata,readOnly); _EL_ } _EL_ ', 'public String parse(File file,JSON m){ _EL_   try { _EL_     Template template=getTemplate(file); _EL_     if (template != null) { _EL_       StringWriter w=new StringWriter(); _EL_       BufferedWriter writer=new BufferedWriter(w); _EL_       template.merge(new VelocityContext(m),writer); _EL_       writer.flush(); _EL_       writer.close(); _EL_       return w.toString(); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     log.error(e.getMessage(),e); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'protected void resetCommon() throws XNIException { _EL_   int count=fCommonComponents.size(); _EL_   for (int i=0; i < count; i++) { _EL_     XMLComponent c=(XMLComponent)fCommonComponents.get(i); _EL_     c.reset(this); _EL_   } _EL_ } _EL_ ', 'Rules(Workspace workspace){ _EL_   this.root=workspace.getRoot(); _EL_   this.teamHook=workspace.getTeamHook(); _EL_ } _EL_ ', 'protected int parseAndAddNode(XmlResourceParser parser,HashMap<String,TagParser> tagParserMap,ArrayList<Long> screenIds) throws XmlPullParserException, IOException { _EL_   if (TAG_INCLUDE.equals(parser.getName())) { _EL_     final int resId=getAttributeResourceValue(parser,ATTR_WORKSPACE,0); _EL_     if (resId != 0) { _EL_       return parseLayout(resId,screenIds); _EL_     } _EL_  else { _EL_       return 0; _EL_     } _EL_   } _EL_   mValues.clear(); _EL_   parseContainerAndScreen(parser,mTemp); _EL_   final long container=mTemp[0]; _EL_   final long screenId=mTemp[1]; _EL_   mValues.put(Favorites.CONTAINER,container); _EL_   mValues.put(Favorites.SCREEN,screenId); _EL_   mValues.put(Favorites.CELLX,convertToDistanceFromEnd(getAttributeValue(parser,ATTR_X),mColumnCount)); _EL_   mValues.put(Favorites.CELLY,convertToDistanceFromEnd(getAttributeValue(parser,ATTR_Y),mRowCount)); _EL_   TagParser tagParser=tagParserMap.get(parser.getName()); _EL_   if (tagParser == null) { _EL_     if (LOGD)     Log.d(TAG,"Ignoring unknown element tag: " + parser.getName()); _EL_     return 0; _EL_   } _EL_   long newElementId=tagParser.parseAndAdd(parser); _EL_   if (newElementId >= 0) { _EL_     if (!screenIds.contains(screenId) && container == Favorites.CONTAINER_DESKTOP) { _EL_       screenIds.add(screenId); _EL_     } _EL_     return 1; _EL_   } _EL_   return 0; _EL_ } _EL_ ', 'private long checkFileHeader(BufferedFileDataInput bfdi) throws ReplicatorException, InterruptedException { _EL_   int magic=0; _EL_   short major=0; _EL_   short minor=0; _EL_   try { _EL_     bfdi.waitAvailable(HEADER_LENGTH,HEADER_WAIT_MILLIS); _EL_     magic=bfdi.readInt(); _EL_     major=bfdi.readShort(); _EL_     minor=bfdi.readShort(); _EL_     baseSeqno=bfdi.readLong(); _EL_   } _EL_  catch (  IOException e) { _EL_     throw new THLException("Failed to read file header from  " + file.getAbsolutePath(),e); _EL_   } _EL_   if (magic != MAGIC_NUMBER)   throw new THLException("Could not open file " + file.getAbsolutePath() + " : invalid magic number"); _EL_   if (major != MAJOR_VERSION)   throw new THLException("Could not open file " + file.getAbsolutePath() + " : incompatible major version"); _EL_   if (minor != MINOR_VERSION)   logger.warn("Minor version mismatch : file " + file.getAbsolutePath() + " using format "+ major+ "."+ minor+ " - Tungsten running version "+ MAJOR_VERSION+ "."+ MINOR_VERSION); _EL_   return baseSeqno; _EL_ } _EL_ ', 'public List<String> classify(List<List<Feature>> features) throws CleartkProcessingException { _EL_   String[][] featureStringArray=toStrings(features); _EL_   Pipe pipe=transducer.getInputPipe(); _EL_   Instance instance=new Instance(featureStringArray,null,null,null); _EL_   instance=pipe.instanceFrom(instance); _EL_   Sequence<?> data=(Sequence<?>)instance.getData(); _EL_   Sequence<?> untypedSequence=transducer.transduce(data); _EL_   Sequence<String> sequence=ReflectionUtil.uncheckedCast(untypedSequence); _EL_   List<String> returnValues=new ArrayList<String>(); _EL_   for (int i=0; i < sequence.size(); i++) { _EL_     String encodedOutcome=sequence.get(i); _EL_     returnValues.add(outcomeEncoder.decode(encodedOutcome)); _EL_   } _EL_   return returnValues; _EL_ } _EL_ ', 'public static void checkArgument(boolean expression,@Nullable Object errorMessage){ _EL_   if (!expression) { _EL_     throw new IllegalArgumentException(String.valueOf(errorMessage)); _EL_   } _EL_ } _EL_ ', 'void onItemDismissed(final int position){ _EL_   final T removed=mData.get(position); _EL_   final boolean wasRemoved=remove(position); _EL_   if (wasRemoved && mDataChangeListener != null) { _EL_     mDataChangeListener.onItemRemoved(removed,position); _EL_   } _EL_ } _EL_ ', 'public final boolean remove(final URI serviceURI){ _EL_   boolean modified=false; _EL_ synchronized (this) { _EL_     if (aliases.remove(serviceURI) != null) { _EL_       modified=true; _EL_     } _EL_     final ServiceFactory factory=services.remove(serviceURI); _EL_     if (factory != null) { _EL_       modified=true; _EL_       if (factory instanceof CustomServiceFactory) { _EL_         customServices.remove(factory); _EL_       } _EL_     } _EL_   } _EL_   return modified; _EL_ } _EL_ ', 'public void checkBackupInfo(final File backupInfoFile,boolean backupInMultiVdc){ _EL_   try (InputStream fis=new FileInputStream(backupInfoFile)){ _EL_     Properties properties=new Properties(); _EL_     properties.load(fis); _EL_     checkVersion(properties); _EL_     checkHosts(properties,backupInMultiVdc); _EL_   } _EL_  catch (  IOException ex) { _EL_     log.warn("Unable to check backup Info",ex); _EL_   } _EL_ } _EL_ ', 'public final Iterator<KnowledgeEdge> requiredEdgesIterator(){ _EL_   Set<KnowledgeEdge> edges=new HashSet<>(); _EL_   for (  OrderedPair<Set<MyNode>> o : requiredRulesSpecs) { _EL_     final Set<MyNode> first=o.getFirst(); _EL_     for (    MyNode s1 : first) { _EL_       final Set<MyNode> second=o.getSecond(); _EL_       for (      MyNode s2 : second) { _EL_         if (!s1.equals(s2)) { _EL_           edges.add(new KnowledgeEdge(s1.getName(),s2.getName())); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return edges.iterator(); _EL_ } _EL_ ', '@Override public boolean open(String access){ _EL_   if (access.equals("r")) { _EL_     try { _EL_       iStream=new FileImageInputStream(new File(filePath)); _EL_       parser=new LabelParser(); _EL_       metadata=parser.parseHeader(iStream); _EL_       iStream.close(); _EL_       iStream=null; _EL_     } _EL_  catch (    IOException e) { _EL_       try { _EL_         iStream.close(); _EL_       } _EL_  catch (      Exception x) { _EL_       } _EL_       return (false); _EL_     } _EL_   } _EL_   return (super.open(access)); _EL_ } _EL_ ', 'private static int showUrlsPrompt(Component parent,List<String> urls){ _EL_   String text="<html><body style=\'width: 100px;\'>"; _EL_   for (  String url : urls) { _EL_     url=splitUrl(url); _EL_     text+=url + "<br />"; _EL_   } _EL_   String okOption="Open URL"; _EL_   if (urls.size() > 1) { _EL_     okOption="Open " + urls.size() + " URLs"; _EL_   } _EL_   String[] options={okOption,"Cancel"}; _EL_   if (urls.size() == 1) { _EL_     options=new String[]{okOption,"Copy URL","Cancel"}; _EL_   } _EL_   int chosenOption=JOptionPane.showOptionDialog(parent,text,"Open in default browser?",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,1); _EL_   return chosenOption; _EL_ } _EL_ ', 'protected int checkKnownCookie(){ _EL_   int retVal=0; _EL_   debug.message("{}.checkKnownCookie:",ADAPTIVE); _EL_   HttpServletRequest req=getHttpServletRequest(); _EL_   if (req != null) { _EL_     Cookie cookie=CookieUtils.getCookieFromReq(req,knownCookieName); _EL_     if (cookie != null) { _EL_       if (knownCookieValue.equalsIgnoreCase(CookieUtils.getCookieValue(cookie))) { _EL_         retVal=knownCookieScore; _EL_       } _EL_     } _EL_   } _EL_   if (knownCookieValue == null) { _EL_     knownCookieValue="1"; _EL_   } _EL_   if (knownCookieSave) { _EL_     postAuthNMap.put("COOKIENAME",knownCookieName); _EL_     postAuthNMap.put("COOKIEVALUE",knownCookieValue); _EL_   } _EL_   if (!knownCookieInvert) { _EL_     retVal=knownCookieScore - retVal; _EL_   } _EL_   return retVal; _EL_ } _EL_ ', 'public static void checkHTTPRequestLength(HttpServletRequest request) throws ServletException { _EL_   int maxContentLength=SAMLUtils.getMaxContentLength(); _EL_   if (maxContentLength != 0) { _EL_     int length=request.getContentLength(); _EL_     if (length == -1) { _EL_       throw new ServletException(bundle.getString("unknownLength")); _EL_     } _EL_     if (length > maxContentLength) { _EL_       if (debug.messageEnabled()) { _EL_         debug.message("FSUtils.checkHTTPRequestLength: " + "content length too large" + length); _EL_       } _EL_       throw new ServletException(bundle.getString("largeContentLength")); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static <T>CompletableFuture<T> exceptionallyCompletedFuture(Throwable throwable){ _EL_   final CompletableFuture<T> future=new CompletableFuture<T>(); _EL_   future.completeExceptionally(throwable); _EL_   return future; _EL_ } _EL_ ', '@Override public void refreshUsersOrGroupsListFromServer(){ _EL_   showLoadingDialog(getString(R.string.common_loading)); _EL_   GetShareWithUsersAsyncTask getTask=new GetShareWithUsersAsyncTask(this); _EL_   Object[] params={getFile(),getAccount(),getStorageManager()}; _EL_   getTask.execute(params); _EL_ } _EL_ ', 'private boolean processKeyUp(int keyCode){ _EL_   if (keyCode == KeyEvent.KEYCODE_ESCAPE || keyCode == KeyEvent.KEYCODE_BACK) { _EL_     dismiss(); _EL_     return true; _EL_   } _EL_  else   if (keyCode == KeyEvent.KEYCODE_TAB) { _EL_     if (mInKbMode) { _EL_       if (isTypedTimeFullyLegal()) { _EL_         finishKbMode(true); _EL_       } _EL_       return true; _EL_     } _EL_   } _EL_  else   if (keyCode == KeyEvent.KEYCODE_ENTER) { _EL_     if (mInKbMode) { _EL_       if (!isTypedTimeFullyLegal()) { _EL_         return true; _EL_       } _EL_       finishKbMode(false); _EL_     } _EL_     if (mCallback != null) { _EL_       mCallback.onTimeSet(mTimePicker,mTimePicker.getHours(),mTimePicker.getMinutes()); _EL_     } _EL_     dismiss(); _EL_     return true; _EL_   } _EL_  else   if (keyCode == KeyEvent.KEYCODE_DEL) { _EL_     if (mInKbMode) { _EL_       if (!mTypedTimes.isEmpty()) { _EL_         int deleted=deleteLastTypedKey(); _EL_         String deletedKeyStr; _EL_         if (deleted == getAmOrPmKeyCode(AM)) { _EL_           deletedKeyStr=mAmText; _EL_         } _EL_  else         if (deleted == getAmOrPmKeyCode(PM)) { _EL_           deletedKeyStr=mPmText; _EL_         } _EL_  else { _EL_           deletedKeyStr=String.format("%d",getValFromKeyCode(deleted)); _EL_         } _EL_         Utils.tryAccessibilityAnnounce(mTimePicker,String.format(mDeletedKeyFormat,deletedKeyStr)); _EL_         updateDisplay(true); _EL_       } _EL_     } _EL_   } _EL_  else   if (keyCode == KeyEvent.KEYCODE_0 || keyCode == KeyEvent.KEYCODE_1 || keyCode == KeyEvent.KEYCODE_2 || keyCode == KeyEvent.KEYCODE_3 || keyCode == KeyEvent.KEYCODE_4 || keyCode == KeyEvent.KEYCODE_5 || keyCode == KeyEvent.KEYCODE_6 || keyCode == KeyEvent.KEYCODE_7 || keyCode == KeyEvent.KEYCODE_8 || keyCode == KeyEvent.KEYCODE_9 || (!mIs24HourMode && (keyCode == getAmOrPmKeyCode(AM) || keyCode == getAmOrPmKeyCode(PM)))) { _EL_     if (!mInKbMode) { _EL_       if (mTimePicker == null) { _EL_         Log.e(TAG,"Unable to initiate keyboard mode, TimePicker was null."); _EL_         return true; _EL_       } _EL_       mTypedTimes.clear(); _EL_       tryStartingKbMode(keyCode); _EL_       return true; _EL_     } _EL_     if (addKeyIfLegal(keyCode)) { _EL_       updateDisplay(false); _EL_     } _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public RoundedIconGenerator(int iconWidthPx,int iconHeightPx,int cornerRadiusPx,int backgroundColor,float textSizePx){ _EL_   mIconWidthPx=iconWidthPx; _EL_   mIconHeightPx=iconHeightPx; _EL_   mCornerRadiusPx=cornerRadiusPx; _EL_   mBackgroundRect=new RectF(0,0,mIconWidthPx,mIconHeightPx); _EL_   mBackgroundPaint=new Paint(Paint.ANTI_ALIAS_FLAG); _EL_   mBackgroundPaint.setColor(backgroundColor); _EL_   mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG); _EL_   mTextPaint.setColor(Color.WHITE); _EL_   mTextPaint.setFakeBoldText(true); _EL_   mTextPaint.setTextSize(textSizePx); _EL_   FontMetrics textFontMetrics=mTextPaint.getFontMetrics(); _EL_   mTextHeight=(float)Math.ceil(textFontMetrics.bottom - textFontMetrics.top); _EL_   mTextYOffset=-textFontMetrics.top; _EL_ } _EL_ ', 'public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException { _EL_   int vocabSize=in.readInt(); _EL_   for (int i=0; i < vocabSize; i++) { _EL_     String line=in.readUTF(); _EL_     Vocabulary.id(line); _EL_   } _EL_   numTokens=in.readDouble(); _EL_   countFuncs=new long[in.readInt()][2]; _EL_   for (int i=0; i < countFuncs.length; i++) { _EL_     countFuncs[i][0]=in.readLong(); _EL_     countFuncs[i][1]=in.readLong(); _EL_   } _EL_   typesFuncs=new long[in.readInt()][2]; _EL_   for (int i=0; i < typesFuncs.length; i++) { _EL_     typesFuncs[i][0]=in.readLong(); _EL_     typesFuncs[i][1]=in.readLong(); _EL_   } _EL_   quantizationBase=in.readDouble(); _EL_   bf=new BloomFilter(); _EL_   bf.readExternal(in); _EL_ } _EL_ ', 'public final void readFully(byte[] b) throws java.io.IOException { _EL_   readFully(b,0,b.length); _EL_ } _EL_ ', 'public boolean validate(){ _EL_   outputFile=new File(outputPath); _EL_   if (outputFile.exists() || outputFile.isDirectory()) { _EL_     invalidMessage="Output file already exists."; _EL_     return valid=false; _EL_   } _EL_   if (!signMode) { _EL_     keyFile=new File(keyFilePath); _EL_     if (!keyFile.exists() || keyFile.isDirectory()) { _EL_       invalidMessage="Key file not found."; _EL_       return valid=false; _EL_     } _EL_   } _EL_   return valid=true; _EL_ } _EL_ ', 'public SignatureFakingOracle(final String documentString) throws SignatureFakingException { _EL_   Security.addProvider(new BouncyCastleProvider()); _EL_   signatureValueElements=new LinkedList<Node>(); _EL_   keyInfoElements=new LinkedList<Node>(); _EL_   certificates=new LinkedList<String>(); _EL_   certHandlers=new LinkedList<CertificateHandler>(); _EL_   try { _EL_     doc=DomUtilities.stringToDom(documentString); _EL_     crawlSignatureElements(); _EL_     log.debug("found " + signatureValueElements.size() + " SignatureValue elements"); _EL_     crawlKeyInfoElements(); _EL_     log.debug("found " + keyInfoElements.size() + " KeyInfo elements containing X509 certificates"); _EL_   } _EL_  catch (  SAXException e) { _EL_     throw new SignatureFakingException(e); _EL_   } _EL_ } _EL_ ', 'public static List<String> generateXVals(int from,int to){ _EL_   List<String> xvals=new ArrayList<String>(); _EL_   for (int i=from; i < to; i++) { _EL_     xvals.add("" + i); _EL_   } _EL_   return xvals; _EL_ } _EL_ ', '@Override public void addChild(WXComponent child,int index){ _EL_   if (child == null || index < -1) { _EL_     return; _EL_   } _EL_   if (child instanceof WXBaseRefresh) { _EL_     if (!checkRefreshOrLoading(child)) { _EL_       mRefreshs.add(child); _EL_     } _EL_     return; _EL_   } _EL_   if (mChildren == null) { _EL_     mChildren=new ArrayList<>(); _EL_   } _EL_   int count=mChildren.size(); _EL_   index=index >= count ? -1 : index; _EL_   if (index == -1) { _EL_     mChildren.add(child); _EL_   } _EL_  else { _EL_     mChildren.add(index,child); _EL_   } _EL_ } _EL_ ', '@Override public Instances defineDataFormat() throws Exception { _EL_   ArrayList<Attribute> atts; _EL_   ArrayList<String> attValues; _EL_   int i; _EL_   m_Random=new Random(getSeed()); _EL_   m_nextClassShouldBeZero=true; _EL_   m_lastLabel=Double.NaN; _EL_   setNumExamplesAct(getNumExamples()); _EL_   atts=new ArrayList<Attribute>(); _EL_   atts.add(new Attribute("salary")); _EL_   atts.add(new Attribute("commission")); _EL_   atts.add(new Attribute("age")); _EL_   attValues=new ArrayList<String>(); _EL_   for (i=0; i < 5; i++) { _EL_     attValues.add("" + i); _EL_   } _EL_   atts.add(new Attribute("elevel",attValues)); _EL_   attValues=new ArrayList<String>(); _EL_   for (i=1; i <= 20; i++) { _EL_     attValues.add("" + i); _EL_   } _EL_   atts.add(new Attribute("car",attValues)); _EL_   attValues=new ArrayList<String>(); _EL_   for (i=0; i < 9; i++) { _EL_     attValues.add("" + i); _EL_   } _EL_   atts.add(new Attribute("zipcode",attValues)); _EL_   atts.add(new Attribute("hvalue")); _EL_   atts.add(new Attribute("hyears")); _EL_   atts.add(new Attribute("loan")); _EL_   attValues=new ArrayList<String>(); _EL_   for (i=0; i < 2; i++) { _EL_     attValues.add("" + i); _EL_   } _EL_   atts.add(new Attribute("group",attValues)); _EL_   m_DatasetFormat=new Instances(getRelationNameToUse(),atts,0); _EL_   return m_DatasetFormat; _EL_ } _EL_ ', 'final private String attrDef2AttrDesc(Attributes attrs) throws NamingException { _EL_   StringBuffer attrDesc=new StringBuffer("( "); _EL_   Attribute attr=null; _EL_   int count=0; _EL_   attr=attrs.get(NUMERICOID_ID); _EL_   if (attr != null) { _EL_     attrDesc.append(writeNumericOID(attr)); _EL_     count++; _EL_   } _EL_  else { _EL_     throw new ConfigurationException("Attribute type doesn\'t" + "have a numeric OID"); _EL_   } _EL_   attr=attrs.get(NAME_ID); _EL_   if (attr != null) { _EL_     attrDesc.append(writeQDescrs(attr)); _EL_     count++; _EL_   } _EL_   attr=attrs.get(DESC_ID); _EL_   if (attr != null) { _EL_     attrDesc.append(writeQDString(attr)); _EL_     count++; _EL_   } _EL_   attr=attrs.get(OBSOLETE_ID); _EL_   if (attr != null) { _EL_     attrDesc.append(writeBoolean(attr)); _EL_     count++; _EL_   } _EL_   attr=attrs.get(SUP_ID); _EL_   if (attr != null) { _EL_     attrDesc.append(writeWOID(attr)); _EL_     count++; _EL_   } _EL_   attr=attrs.get(EQUALITY_ID); _EL_   if (attr != null) { _EL_     attrDesc.append(writeWOID(attr)); _EL_     count++; _EL_   } _EL_   attr=attrs.get(ORDERING_ID); _EL_   if (attr != null) { _EL_     attrDesc.append(writeWOID(attr)); _EL_     count++; _EL_   } _EL_   attr=attrs.get(SUBSTR_ID); _EL_   if (attr != null) { _EL_     attrDesc.append(writeWOID(attr)); _EL_     count++; _EL_   } _EL_   attr=attrs.get(SYNTAX_ID); _EL_   if (attr != null) { _EL_     attrDesc.append(writeWOID(attr)); _EL_     count++; _EL_   } _EL_   attr=attrs.get(SINGLE_VAL_ID); _EL_   if (attr != null) { _EL_     attrDesc.append(writeBoolean(attr)); _EL_     count++; _EL_   } _EL_   attr=attrs.get(COLLECTIVE_ID); _EL_   if (attr != null) { _EL_     attrDesc.append(writeBoolean(attr)); _EL_     count++; _EL_   } _EL_   attr=attrs.get(NO_USER_MOD_ID); _EL_   if (attr != null) { _EL_     attrDesc.append(writeBoolean(attr)); _EL_     count++; _EL_   } _EL_   attr=attrs.get(USAGE_ID); _EL_   if (attr != null) { _EL_     attrDesc.append(writeQDString(attr)); _EL_     count++; _EL_   } _EL_   if (count < attrs.size()) { _EL_     String attrId=null; _EL_     for (NamingEnumeration<? extends Attribute> ae=attrs.getAll(); ae.hasMoreElements(); ) { _EL_       attr=ae.next(); _EL_       attrId=attr.getID(); _EL_       if (attrId.equals(NUMERICOID_ID) || attrId.equals(NAME_ID) || attrId.equals(SYNTAX_ID)|| attrId.equals(DESC_ID)|| attrId.equals(SINGLE_VAL_ID)|| attrId.equals(EQUALITY_ID)|| attrId.equals(ORDERING_ID)|| attrId.equals(SUBSTR_ID)|| attrId.equals(NO_USER_MOD_ID)|| attrId.equals(USAGE_ID)|| attrId.equals(SUP_ID)|| attrId.equals(COLLECTIVE_ID)|| attrId.equals(OBSOLETE_ID)) { _EL_         continue; _EL_       } _EL_  else { _EL_         attrDesc.append(writeQDStrings(attr)); _EL_       } _EL_     } _EL_   } _EL_   attrDesc.append(")"); _EL_   return attrDesc.toString(); _EL_ } _EL_ ', '@Override public void agg(Object newVal){ _EL_   if (newVal instanceof byte[]) { _EL_     ByteBuffer buffer=ByteBuffer.wrap((byte[])newVal); _EL_     buffer.rewind(); _EL_     while (buffer.hasRemaining()) { _EL_       aggVal+=buffer.getLong(); _EL_       count+=buffer.getDouble(); _EL_       firstTime=false; _EL_     } _EL_     return; _EL_   } _EL_   aggVal+=(Long)newVal; _EL_   count++; _EL_   firstTime=false; _EL_ } _EL_ ', 'protected boolean checkExternalStorageAndNotify(String fileName){ _EL_   if (fileName != null && fileName.startsWith("null")) { _EL_     alertDownloadFailure(R.string.download_no_sdcard_dlg_title); _EL_     return false; _EL_   } _EL_   String status=Environment.getExternalStorageState(); _EL_   if (!status.equals(Environment.MEDIA_MOUNTED)) { _EL_     int title; _EL_     if (status.equals(Environment.MEDIA_SHARED)) { _EL_       title=R.string.download_sdcard_busy_dlg_title; _EL_     } _EL_  else { _EL_       title=R.string.download_no_sdcard_dlg_title; _EL_     } _EL_     alertDownloadFailure(title); _EL_     return false; _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private void parseParameters(String parameters){ _EL_   Log.v("HttpHeader","HttpAuthHeader.parseParameters():" + " parameters: " + parameters); _EL_   if (parameters != null) { _EL_     int i; _EL_     do { _EL_       i=parameters.indexOf(\',\'); _EL_       if (i < 0) { _EL_         parseParameter(parameters); _EL_       } _EL_  else { _EL_         parseParameter(parameters.substring(0,i)); _EL_         parameters=parameters.substring(i + 1); _EL_       } _EL_     } _EL_  while (i >= 0); _EL_   } _EL_ } _EL_ ', 'public boolean sendViaDataSocket(byte[] bytes,int start,int len){ _EL_   if (dataOutputStream == null) { _EL_     Log.i(TAG,"Can\'t send via null dataOutputStream"); _EL_     return false; _EL_   } _EL_   if (len == 0) { _EL_     return true; _EL_   } _EL_   try { _EL_     dataOutputStream.write(bytes,start,len); _EL_   } _EL_  catch (  IOException e) { _EL_     Log.i(TAG,"Couldn\'t write output stream for data socket"); _EL_     Log.i(TAG,e.toString()); _EL_     return false; _EL_   } _EL_   localDataSocket.reportTraffic(len); _EL_   return true; _EL_ } _EL_ ', 'public FST(String fileName,String encoding,boolean verbose) throws IOException { _EL_   FileInputStream fis=new FileInputStream(fileName); _EL_   try { _EL_     loadHeaderless(fis,encoding,verbose); _EL_   } _EL_   finally { _EL_     fis.close(); _EL_   } _EL_ } _EL_ ', 'public void build(String code,String customStatus){ _EL_   try { _EL_     if (customStatus != null) { _EL_       result.put(resources.getString(R.string.intent_extra_status),customStatus); _EL_     } _EL_  else { _EL_       result.put(resources.getString(R.string.intent_extra_status),resources.getString(R.string.shared_pref_default_status)); _EL_     } _EL_     result.put(resources.getString(R.string.intent_extra_code),code); _EL_     operationListResult.put(result); _EL_   } _EL_  catch (  JSONException e) { _EL_     Log.e(TAG,"Invalid JSON format." + e.toString()); _EL_   } _EL_ } _EL_ ', '@Override public boolean isArmed(){ _EL_   return other.isArmed(); _EL_ } _EL_ ', '@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="FE_FLOATING_POINT_EQUALITY",justification="equality is specifically \'Unchanged\' here") public void changeLocoSpeed(DccThrottle t,Block blk,float speed){ _EL_   if (blk == referenced && speed == desiredSpeedStep) { _EL_     return; _EL_   } _EL_   float blockLength=blk.getLengthMm(); _EL_   if (blk == referenced) { _EL_     distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000)); _EL_     blockLength=distanceRemaining; _EL_     log.debug("Block passed is the same as we are currently processing"); _EL_   } _EL_  else { _EL_     referenced=blk; _EL_   } _EL_   changeLocoSpeed(t,blockLength,speed); _EL_ } _EL_ ', 'public StringBuilder encodeBody(StringBuilder buffer){ _EL_   return buffer.append(contentEncoding); _EL_ } _EL_ ', 'private static synchronized String formatAndParse(SimpleDateFormat formatDate,SimpleDateFormat parseDate,String text){ _EL_   try { _EL_     Date date=parseDate.parse(text); _EL_     String result=formatDate.format(date); _EL_     return result; _EL_   } _EL_  catch (  ParseException e) { _EL_     logger.warning("Unable to parse:" + text); _EL_   } _EL_   return ""; _EL_ } _EL_ ', 'public void writeToFile(String filename){ _EL_   GridUtils.writeSpatialGridTable(this,filename); _EL_ } _EL_ ', 'public ForumPostConfig createReply(ForumPostConfig config){ _EL_   config.addCredentials(this); _EL_   String xml=POST(this.url + "/create-reply",config.toXML()); _EL_   Element root=parse(xml); _EL_   if (root == null) { _EL_     return null; _EL_   } _EL_   try { _EL_     ForumPostConfig reply=new ForumPostConfig(); _EL_     reply.parseXML(root); _EL_     return reply; _EL_   } _EL_  catch (  Exception exception) { _EL_     this.exception=SDKException.parseFailure(exception); _EL_     throw this.exception; _EL_   } _EL_ } _EL_ ', 'private static byte[] generateSeed(){ _EL_   try { _EL_     final ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream(); _EL_     final DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer); _EL_     seedBufferOut.writeLong(System.currentTimeMillis()); _EL_     seedBufferOut.writeLong(System.nanoTime()); _EL_     seedBufferOut.writeInt(Process.myPid()); _EL_     seedBufferOut.writeInt(Process.myUid()); _EL_     seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL); _EL_     seedBufferOut.close(); _EL_     return seedBuffer.toByteArray(); _EL_   } _EL_  catch (  final IOException e) { _EL_     throw new SecurityException("Failed to generate seed",e); _EL_   } _EL_ } _EL_ ', 'public static final void reverseWinding(List<Vector2> points){ _EL_   if (points == null)   throw new NullPointerException(Messages.getString("geometry.nullPointList")); _EL_   int size=points.size(); _EL_   if (size == 1 || size == 0)   return; _EL_   Collections.reverse(points); _EL_ } _EL_ ', 'private ODataFeed readFeedLogPerf(String query,Map<String,String> params) throws IOException, ODataException { _EL_   long delta_time=System.currentTimeMillis(); _EL_   ODataFeed feed=client.readFeed(query,params); _EL_   log(Level.DEBUG,"query(" + query + ") done in "+ delta_time+ "ms"); _EL_   return feed; _EL_ } _EL_ ', 'public static void assertLabel(int[] path,String text){ _EL_   if (verbose) { _EL_     log("assertLabel(" + toString(path) + ", "+ text+ ")"); _EL_   } _EL_   Label l=(Label)getComponentByPath(path); _EL_   assertBool(l != null,"Null label" + text); _EL_   assertBool(text == l.getText() || text.equals(l.getText()),("" + l.getText()) + " != " + text); _EL_ } _EL_ ', '@Override public boolean lock(){ _EL_   try { _EL_     if (!FileFactory.isFileExist(location,FileFactory.getFileType(tmpPath))) { _EL_       FileFactory.mkdirs(location,FileFactory.getFileType(tmpPath)); _EL_     } _EL_     String lockFilePath=location + CarbonCommonConstants.FILE_SEPARATOR + lockFile; _EL_     if (!FileFactory.isFileExist(lockFilePath,FileFactory.getFileType(location))) { _EL_       FileFactory.createNewLockFile(lockFilePath,FileFactory.getFileType(location)); _EL_     } _EL_     fileOutputStream=new FileOutputStream(lockFilePath); _EL_     channel=fileOutputStream.getChannel(); _EL_     try { _EL_       fileLock=channel.tryLock(); _EL_     } _EL_  catch (    OverlappingFileLockException e) { _EL_       return false; _EL_     } _EL_     if (null != fileLock) { _EL_       return true; _EL_     } _EL_  else { _EL_       return false; _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     return false; _EL_   } _EL_ } _EL_ ', 'public MLResults execute(Script script){ _EL_   ScriptExecutor scriptExecutor=new ScriptExecutor(sparkMonitoringUtil); _EL_   scriptExecutor.setExplain(explain); _EL_   scriptExecutor.setExplainLevel(explainLevel); _EL_   scriptExecutor.setStatistics(statistics); _EL_   scriptExecutor.setInit(scriptHistoryStrings.isEmpty()); _EL_   return execute(script,scriptExecutor); _EL_ } _EL_ ', 'private void paintPreview(int dx,int dy,float zoomfactor){ _EL_   if (image != null) { _EL_     Graphics2D g2=(Graphics2D)getGraphics(); _EL_     UColor bg=renderer.getBackgroundColor(); _EL_     g2.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha())); _EL_     int newWidth=Math.round(image.getWidth(null) * zoomfactor); _EL_     int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor); _EL_     g2.drawImage(image,dx,dy,newWidth,newHeight,null); _EL_     if (dx > 0)     g2.clearRect(0,0,dx,getHeight()); _EL_  else     g2.clearRect(getWidth() + dx,0,getWidth(),getHeight()); _EL_     if (dy > 0)     g2.clearRect(0,0,getWidth(),dy); _EL_  else     g2.clearRect(0,getHeight() + dy,getWidth(),getHeight()); _EL_   } _EL_ } _EL_ ', 'public static List<List<Double>> partitionVariable(List<Double> arr,int chunk){ _EL_   int count=0; _EL_   List<List<Double>> ret=new ArrayList<List<Double>>(); _EL_   while (count < arr.size()) { _EL_     List<Double> sublist=arr.subList(count,count + chunk); _EL_     count+=chunk; _EL_     ret.add(sublist); _EL_   } _EL_   for (  List<Double> lists : ret) { _EL_     if (lists.size() < chunk)     ret.remove(lists); _EL_   } _EL_   return ret; _EL_ } _EL_ ', 'public final void printSymbol(CharSequence text) throws IOException { _EL_   if (text == null) { _EL_     appendAscii("null.symbol"); _EL_   } _EL_  else   if (text.length() == 0) { _EL_     throw new EmptySymbolException(); _EL_   } _EL_  else   if (symbolNeedsQuoting(text,true)) { _EL_     appendAscii(\'\\\'\'); _EL_     printCodePoints(text,SYMBOL_ESCAPE_CODES); _EL_     appendAscii(\'\\\'\'); _EL_   } _EL_  else { _EL_     appendAscii(text); _EL_   } _EL_ } _EL_ ', 'public static Properties createProperties(final Map<String,String> map){ _EL_   Properties properties=new Properties(); _EL_   if (!(map == null || map.isEmpty())) { _EL_     for (    Entry<String,String> entry : map.entrySet()) { _EL_       properties.setProperty(entry.getKey(),entry.getValue()); _EL_     } _EL_   } _EL_   return properties; _EL_ } _EL_ ', 'void queryReadResult(PreparedStatement prep) throws SQLException { _EL_   ResultSet rs=prep.executeQuery(); _EL_   ResultSetMetaData meta=rs.getMetaData(); _EL_   int columnCount=meta.getColumnCount(); _EL_   while (rs.next()) { _EL_     for (int i=0; i < columnCount; i++) { _EL_       rs.getString(i + 1); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static void checkArgument(boolean expression,Object errorMessage){ _EL_   if (!expression) { _EL_     throw new IllegalArgumentException(String.valueOf(errorMessage)); _EL_   } _EL_ } _EL_ ', 'private static <T>void initializeKnownPlugins(final T pluginInterface,final IPluginRegistry<IPlugin<T>> registry,final List<PluginConfigItem> xmlPluginOrder,final List<Pair<IPlugin<T>,PluginStatus>> validatedPlugins,final List<Pair<IPlugin<T>,Exception>> initializedPlugins,final Set<Long> processedPlugins){ _EL_   for (  final PluginConfigItem pt : xmlPluginOrder) { _EL_     processedPlugins.add(pt.getGUID()); _EL_     final IPlugin<T> plugin=findPlugin(validatedPlugins,pt.getGUID()); _EL_     if (plugin != null) { _EL_       if (pt.isLoad()) { _EL_         initializePlugin(plugin,pluginInterface,registry,initializedPlugins); _EL_       } _EL_  else { _EL_         registry.addDisabledPlugin(plugin,DisabledPluginReason.NotLoaded); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'private MulticastSocket createSocket() throws IOException { _EL_   MulticastSocket sock=new MulticastSocket(mcastPort); _EL_   sock.setLoopbackMode(false); _EL_   if (sockItf != null)   sock.setInterface(sockItf); _EL_   if (sock.getLoopbackMode())   U.warn(log,"Loopback mode is disabled which prevents nodes on the same machine from discovering " + "each other."); _EL_   sock.joinGroup(mcastGrp); _EL_   if (ttl != -1)   sock.setTimeToLive(ttl); _EL_   return sock; _EL_ } _EL_ ', 'protected void encodeLineSuffix(OutputStream aStream) throws IOException { _EL_   pStream.println(); _EL_ } _EL_ ', 'private void ensureCapacity(int n){ _EL_   if (n <= 0) { _EL_     return; _EL_   } _EL_   int max; _EL_   if (data == null || data.length == 0) { _EL_     max=25; _EL_   } _EL_  else   if (data.length >= n * 5) { _EL_     return; _EL_   } _EL_  else { _EL_     max=data.length; _EL_   } _EL_   while (max < n * 5) { _EL_     max*=2; _EL_   } _EL_   String newData[]=new String[max]; _EL_   if (length > 0) { _EL_     System.arraycopy(data,0,newData,0,length * 5); _EL_   } _EL_   data=newData; _EL_ } _EL_ ', 'public int evalRPN(String[] tokens){ _EL_   if (tokens == null || tokens.length == 0)   return 0; _EL_   Stack<String> s=new Stack<String>(); _EL_   int len=tokens.length; _EL_   for (int i=0; i < len; i++) { _EL_     String cur=tokens[i]; _EL_     if (isOperator(cur)) { _EL_       int t2=Integer.parseInt(s.pop()); _EL_       int t1=Integer.parseInt(s.pop()); _EL_       int res=calculate(t1,t2,cur); _EL_       s.push(Integer.toString(res)); _EL_     } _EL_  else     s.push(cur); _EL_   } _EL_   return Integer.valueOf(s.peek()); _EL_ } _EL_ ', 'private void handleSubscribe(String[] args){ _EL_ switch (args[1]) { _EL_ case "rr": _EL_     TestSubscriber<Payload> rrsub=new TestSubscriber<>(0L); _EL_   payloadSubscribers.put(args[2],rrsub); _EL_ idToType.put(args[2],args[1]); _EL_ ReactiveSocket rrclient=createClient.get(); _EL_ Publisher<Payload> rrpub=rrclient.requestResponse(new PayloadImpl(args[3],args[4])); _EL_ rrpub.subscribe(rrsub); _EL_ break; _EL_ case "rs": _EL_ TestSubscriber<Payload> rssub=new TestSubscriber<>(0L); _EL_ payloadSubscribers.put(args[2],rssub); _EL_ idToType.put(args[2],args[1]); _EL_ ReactiveSocket rsclient=createClient.get(); _EL_ Publisher<Payload> rspub=rsclient.requestStream(new PayloadImpl(args[3],args[4])); _EL_ rspub.subscribe(rssub); _EL_ break; _EL_ case "sub": _EL_ TestSubscriber<Payload> rsubsub=new TestSubscriber<>(0L); _EL_ payloadSubscribers.put(args[2],rsubsub); _EL_ idToType.put(args[2],args[1]); _EL_ ReactiveSocket rsubclient=createClient.get(); _EL_ Publisher<Payload> rsubpub=rsubclient.requestSubscription(new PayloadImpl(args[3],args[4])); _EL_ rsubpub.subscribe(rsubsub); _EL_ break; _EL_ case "fnf": _EL_ TestSubscriber<Void> fnfsub=new TestSubscriber<>(0L); _EL_ fnfSubscribers.put(args[2],fnfsub); _EL_ idToType.put(args[2],args[1]); _EL_ ReactiveSocket fnfclient=createClient.get(); _EL_ Publisher<Void> fnfpub=fnfclient.fireAndForget(new PayloadImpl(args[3],args[4])); _EL_ fnfpub.subscribe(fnfsub); _EL_ break; _EL_ default : _EL_ break; _EL_ } _EL_ } _EL_ ', 'public boolean hasUserPartitions(){ _EL_   return !userOutput.isEmpty(); _EL_ } _EL_ ', 'public static void sort(long[] a){ _EL_   doSort(a,0,a.length - 1); _EL_ } _EL_ ', 'private JSONArray readArray() throws JSONException { _EL_   JSONArray result=new JSONArray(); _EL_   boolean hasTrailingSeparator=false; _EL_   while (true) { _EL_ switch (nextCleanInternal()) { _EL_ case -1: _EL_       throw syntaxError("Unterminated array"); _EL_ case \']\': _EL_     if (hasTrailingSeparator) { _EL_       result.put(null); _EL_     } _EL_   return result; _EL_ case \',\': _EL_ case \';\': _EL_ result.put(null); _EL_ hasTrailingSeparator=true; _EL_ continue; _EL_ default : _EL_ pos--; _EL_ } _EL_ result.put(nextValue()); _EL_ switch (nextCleanInternal()) { _EL_ case \']\': _EL_ return result; _EL_ case \',\': _EL_ case \';\': _EL_ hasTrailingSeparator=true; _EL_ continue; _EL_ default : _EL_ throw syntaxError("Unterminated array"); _EL_ } _EL_ } _EL_ } _EL_ ', 'public static byte[] compressForZlib(String stringToCompress){ _EL_   byte[] returnValues=null; _EL_   try { _EL_     returnValues=compressForZlib(stringToCompress.getBytes("UTF-8")); _EL_   } _EL_  catch (  UnsupportedEncodingException uee) { _EL_     uee.printStackTrace(); _EL_   } _EL_   return returnValues; _EL_ } _EL_ ', 'public static String encode(String value){ _EL_   value=value.replace("&","&amp;"); _EL_   value=value.replace("<","&lt;"); _EL_   value=value.replace(">","&gt;"); _EL_   value=value.replace("\\"","&quot;"); _EL_   value=value.replace("\'","&#x27;"); _EL_   value=value.replace("/","&#x2F;"); _EL_   return value; _EL_ } _EL_ ', 'public PacketOutputStream writeTimestampLength(final Calendar calendar,Timestamp ts,boolean fractionalSeconds){ _EL_   assureBufferCapacity(fractionalSeconds ? 12 : 8); _EL_   buffer.put((byte)(fractionalSeconds ? 11 : 7)); _EL_   buffer.putShort((short)calendar.get(Calendar.YEAR)); _EL_   buffer.put((byte)((calendar.get(Calendar.MONTH) + 1) & 0xff)); _EL_   buffer.put((byte)(calendar.get(Calendar.DAY_OF_MONTH) & 0xff)); _EL_   buffer.put((byte)calendar.get(Calendar.HOUR_OF_DAY)); _EL_   buffer.put((byte)calendar.get(Calendar.MINUTE)); _EL_   buffer.put((byte)calendar.get(Calendar.SECOND)); _EL_   if (fractionalSeconds) { _EL_     buffer.putInt(ts.getNanos() / 1000); _EL_   } _EL_   return this; _EL_ } _EL_ ', 'protected synchronized void received(int responseCode,String stream,String json){ _EL_   FollowerInfo result=parseFollowers(stream,json); _EL_   if (result != null) { _EL_     noError(stream); _EL_     cached.put(stream,result); _EL_     if (type == Follower.Type.FOLLOWER) { _EL_       listener.receivedFollowers(result); _EL_       if (hasNewFollowers(result.followers)) { _EL_         listener.newFollowers(result); _EL_       } _EL_     } _EL_  else     if (type == Follower.Type.SUBSCRIBER) { _EL_       listener.receivedSubscribers(result); _EL_     } _EL_     requested.add(stream); _EL_   } _EL_  else { _EL_     String errorMessage=""; _EL_     if (responseCode == 404) { _EL_       errorMessage="Channel not found."; _EL_       error(stream,10); _EL_     } _EL_  else     if (responseCode == 200) { _EL_       errorMessage="Parse error."; _EL_       error(stream,1); _EL_     } _EL_  else     if (responseCode == 401 || responseCode == 403) { _EL_       errorMessage="Access denied."; _EL_       error(stream,1); _EL_     } _EL_  else     if (responseCode == 422) { _EL_       errorMessage="No data for this channel."; _EL_       error(stream,10); _EL_     } _EL_  else { _EL_       errorMessage="Request error."; _EL_       error(stream,1); _EL_     } _EL_     FollowerInfo errorResult=new FollowerInfo(type,stream,errorMessage); _EL_     cached.put(stream,errorResult); _EL_     if (type == Follower.Type.FOLLOWER) { _EL_       listener.receivedFollowers(errorResult); _EL_     } _EL_  else     if (type == Follower.Type.SUBSCRIBER) { _EL_       listener.receivedSubscribers(errorResult); _EL_     } _EL_   } _EL_ } _EL_ ', '@Override public void paintIcon(Component c,Graphics g,int x,int y){ _EL_   Painter painter=(Painter)UIManager.get(prefix + "[Enabled]." + key); _EL_   if (painter != null) { _EL_     JComponent jc=(c instanceof JComponent) ? (JComponent)c : null; _EL_     Graphics2D gfx=(Graphics2D)g; _EL_     gfx.translate(x,y); _EL_     painter.paint(gfx,jc,width,height); _EL_     gfx.translate(-x,-y); _EL_   } _EL_ } _EL_ ', 'public List<Map<String,String>> list(Database conn) throws SQLException { _EL_   ResultSet rs=null; _EL_   Statement statement=conn.createStatement(); _EL_   List<Map<String,String>> shardToChannels=new ArrayList<Map<String,String>>(); _EL_   try { _EL_     rs=statement.executeQuery(select); _EL_     while (rs.next()) { _EL_       Map<String,String> shard=new HashMap<String,String>(); _EL_       shard.put(ShardChannelTable.SHARD_ID_COL,rs.getString(ShardChannelTable.SHARD_ID_COL)); _EL_       shard.put(ShardChannelTable.CHANNEL_COL,rs.getString(ShardChannelTable.CHANNEL_COL)); _EL_       shardToChannels.add(shard); _EL_     } _EL_   } _EL_   finally { _EL_     close(rs); _EL_     close(statement); _EL_   } _EL_   return shardToChannels; _EL_ } _EL_ ', '@Override public void messageItemDetails(String strClass,String item,String description,String[] msgOption,int[] msgNumber,int defaultOption){ _EL_   HashMap<Integer,String> options=new HashMap<>(msgOption.length); _EL_   for (int i=0; i < msgOption.length; i++) { _EL_     options.put(msgNumber[i],msgOption[i]); _EL_   } _EL_   messageItemDetails(strClass,description,item,options,defaultOption); _EL_ } _EL_ ', 'public TaskResourceRep unlinkTargetVolumesFromSnapshotSession(URI snapSessionURI,SnapshotSessionUnlinkTargetsParam param){ _EL_   return unlinkTargetVolumesFromSnapshotSession(snapSessionURI,param,OperationTypeEnum.UNLINK_SNAPSHOT_SESSION_TARGET); _EL_ } _EL_ ', 'private TreeNode(long nodeValue,SnmpMibAgent agent,TreeNode sup){ _EL_   this.nodeValue=nodeValue; _EL_   this.parent=sup; _EL_   agents.addElement(agent); _EL_ } _EL_ ', 'public CodeAttribute createCode(){ _EL_   CodeAttribute code=new CodeAttribute(); _EL_   for (int i=0; i < _attributes.size(); i++) { _EL_     Attribute attr=_attributes.get(i); _EL_     if (attr instanceof CodeAttribute)     return (CodeAttribute)attr; _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public byte[] generateSignature() throws CryptoException, DataLengthException { _EL_   contentDigest.doFinal(mDash,mDash.length - hLen - sLen); _EL_   if (sLen != 0) { _EL_     random.nextBytes(salt); _EL_     System.arraycopy(salt,0,mDash,mDash.length - sLen,sLen); _EL_   } _EL_   byte[] h=new byte[hLen]; _EL_   contentDigest.update(mDash,0,mDash.length); _EL_   contentDigest.doFinal(h,0); _EL_   block[block.length - sLen - 1- hLen- 1]=0x01; _EL_   System.arraycopy(salt,0,block,block.length - sLen - hLen- 1,sLen); _EL_   byte[] dbMask=maskGeneratorFunction1(h,0,h.length,block.length - hLen - 1); _EL_   for (int i=0; i != dbMask.length; i++) { _EL_     block[i]^=dbMask[i]; _EL_   } _EL_   block[0]&=(0xff >> ((block.length * 8) - emBits)); _EL_   System.arraycopy(h,0,block,block.length - hLen - 1,hLen); _EL_   block[block.length - 1]=trailer; _EL_   byte[] b=cipher.processBlock(block,0,block.length); _EL_   clearBlock(block); _EL_   return b; _EL_ } _EL_ ', '@Override public void write(byte[] b,int off,int len){ _EL_   if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) { _EL_     throw new IndexOutOfBoundsException(); _EL_   } _EL_  else   if (len == 0) { _EL_     return; _EL_   } _EL_ synchronized (this) { _EL_     int newcount=count + len; _EL_     int remaining=len; _EL_     int inBufferPos=count - filledBufferSum; _EL_     while (remaining > 0) { _EL_       int part=Math.min(remaining,currentBuffer.length - inBufferPos); _EL_       System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part); _EL_       remaining-=part; _EL_       if (remaining > 0) { _EL_         needNewBuffer(newcount); _EL_         inBufferPos=0; _EL_       } _EL_     } _EL_     count=newcount; _EL_   } _EL_ } _EL_ ', 'public static boolean isWritable(final File file,final boolean makeDirs){ _EL_   if (file == null) { _EL_     Log.e(FileUtils.class,"isWritable(): Null or Empty parameter given"); _EL_     return false; _EL_   } _EL_   final String fileParentDir=file.getParent(); _EL_   if (!TextUtils.isEmpty(fileParentDir)) { _EL_     final File fileDir=new File(fileParentDir); _EL_     if (!fileDir.exists()) { _EL_       if (makeDirs)       return makeDirsForFile(file); _EL_  else       return false; _EL_     } _EL_   } _EL_   boolean isWritable=true; _EL_   if (file.exists())   isWritable=file.canWrite(); _EL_  else { _EL_     try { _EL_       isWritable=file.createNewFile(); _EL_     } _EL_  catch (    IOException e) { _EL_     } _EL_     if (isWritable)     isWritable=file.delete(); _EL_   } _EL_   return isWritable; _EL_ } _EL_ ', 'public boolean isPronounceable(String word){ _EL_   String lowerCaseWord=word.toLowerCase(); _EL_   return (prefixFSM.accept(lowerCaseWord) && suffixFSM.accept(lowerCaseWord)); _EL_ } _EL_ ', 'public static String sayNumber(StringBuffer appendTo,double number) throws IllegalArgumentException { _EL_   if (number == Double.MIN_VALUE) { _EL_     throw new IllegalArgumentException("Out of range"); _EL_   } _EL_   if (number < 0) { _EL_     appendTo.append("Minus "); _EL_   } _EL_   double abs=Math.abs(number); _EL_   if (abs < POWER_THREE) { _EL_     saySimpleNumber(appendTo,(int)abs); _EL_   } _EL_  else   if (abs < 2000) { _EL_     int thousand=(int)(abs % POWER_THREE); _EL_     appendTo.append("Seribu "); _EL_     saySimpleNumber(appendTo,thousand); _EL_   } _EL_  else   if (abs < POWER_SIX) { _EL_     int thousand=(int)(abs % POWER_SIX / POWER_THREE); _EL_     saySimpleNumber(appendTo,thousand); _EL_     appendTo.append(" Ribu"); _EL_     double remainder=abs - thousand * POWER_THREE; _EL_     if (remainder > 0) { _EL_       appendTo.append(\' \'); _EL_       sayNumber(appendTo,remainder); _EL_     } _EL_   } _EL_  else   if (abs < POWER_NINE) { _EL_     int million=(int)(abs % POWER_NINE / POWER_SIX); _EL_     saySimpleNumber(appendTo,million); _EL_     appendTo.append(" Juta"); _EL_     double remainder=abs - million * POWER_SIX; _EL_     if (remainder > 0) { _EL_       appendTo.append(\' \'); _EL_       sayNumber(appendTo,remainder); _EL_     } _EL_   } _EL_  else   if (abs < POWER_TWELVE) { _EL_     int billion=(int)(abs % POWER_TWELVE / POWER_NINE); _EL_     saySimpleNumber(appendTo,billion); _EL_     appendTo.append(" Milyar"); _EL_     double remainder=abs - billion * POWER_NINE; _EL_     if (remainder > 0) { _EL_       appendTo.append(\' \'); _EL_       sayNumber(appendTo,remainder); _EL_     } _EL_   } _EL_  else   if (abs < POWER_FIFTEEN) { _EL_     int trillion=(int)(abs % POWER_FIFTEEN / POWER_TWELVE); _EL_     saySimpleNumber(appendTo,trillion); _EL_     appendTo.append(" Trilyun"); _EL_     double remainder=abs - trillion * POWER_TWELVE; _EL_     if (remainder > 0) { _EL_       appendTo.append(\' \'); _EL_       sayNumber(appendTo,remainder); _EL_     } _EL_   } _EL_  else { _EL_     appendTo.append("Lebih Dari Seribu Triliun"); _EL_   } _EL_   return appendTo.toString(); _EL_ } _EL_ ', 'public void load(List<PolicyQualifierInfo> policyQualifierInfo){ _EL_   PolicyQualifierInfo[] policyQualifierInfoArray=policyQualifierInfo.toArray(new PolicyQualifierInfo[policyQualifierInfo.size()]); _EL_   Arrays.sort(policyQualifierInfoArray,new PolicyQualifierInfoComparator()); _EL_   data=new Object[policyQualifierInfoArray.length][1]; _EL_   int i=0; _EL_   for (  PolicyQualifierInfo policyQualInfo : policyQualifierInfoArray) { _EL_     data[i][0]=policyQualInfo; _EL_     i++; _EL_   } _EL_   fireTableDataChanged(); _EL_ } _EL_ ', 'public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date,boolean deliveryReport,long threadId){ _EL_   final Uri CONTENT_URI=Uri.parse("content://sms/outbox"); _EL_   return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,deliveryReport,threadId); _EL_ } _EL_ ', 'public String toEPL(EPStatementFormatter formatter){ _EL_   StringWriter writer=new StringWriter(); _EL_   toEPL(formatter,writer); _EL_   return writer.toString(); _EL_ } _EL_ ', 'boolean thresholdExceeded(final Set<IBindingSet> distinctProjectionBuffer,final int distinctProjectionBufferThreshold,final List<IBindingSet> incomingBindingsBuffer,final int incomingBindingsBufferThreshold){ _EL_   return distinctProjectionBuffer.size() >= distinctProjectionBufferThreshold || incomingBindingsBuffer.size() >= incomingBindingsBufferThreshold; _EL_ } _EL_ ', 'public static void assertColumnTypes(ResultSet rs,int[] expectedTypes) throws SQLException { _EL_   ResultSetMetaData rsmd=rs.getMetaData(); _EL_   int actualCols=rsmd.getColumnCount(); _EL_   assertEquals("Unexpected column count:",expectedTypes.length,rsmd.getColumnCount()); _EL_   for (int i=0; i < actualCols; i++) { _EL_     assertEquals("Column types do not match for column " + (i + 1),expectedTypes[i],rsmd.getColumnType(i + 1)); _EL_   } _EL_ } _EL_ ', 'public Iterator enumerateLiteralResultAttributes(){ _EL_   return (null == m_avts) ? null : m_avts.iterator(); _EL_ } _EL_ ', 'public void forward(HttpServerRequest request){ _EL_   forward(request,null); _EL_ } _EL_ ', '@Override public StringBuffer format(double value,StringBuffer buffer,FieldPosition field){ _EL_   for (int i=choiceLimits.length - 1; i >= 0; i--) { _EL_     if (choiceLimits[i] <= value) { _EL_       return buffer.append(choiceFormats[i]); _EL_     } _EL_   } _EL_   return choiceFormats.length == 0 ? buffer : buffer.append(choiceFormats[0]); _EL_ } _EL_ ', '@Override public synchronized void parse(Reader reader,String baseURI) throws IOException, RDFParseException, RDFHandlerException { _EL_   if (reader == null) { _EL_     throw new IllegalArgumentException("Reader cannot be \'null\'"); _EL_   } _EL_   if (baseURI == null) { _EL_     throw new IllegalArgumentException("Base URI cannot be \'null\'"); _EL_   } _EL_   InputSource inputSource=new InputSource(reader); _EL_   inputSource.setSystemId(baseURI); _EL_   parse(inputSource); _EL_ } _EL_ ', 'public CreateIndexRequest source(XContentBuilder source){ _EL_   return source(source.bytes()); _EL_ } _EL_ ', 'private Map<URI,Map<URI,Map<String,List<URI>>>> createDeviceToCGMapFromDescriptors(List<VolumeDescriptor> addDescriptors,List<VolumeDescriptor> removeDescriptors){ _EL_   Map<URI,Map<URI,Map<String,List<URI>>>> deviceToCGMap=new HashMap<URI,Map<URI,Map<String,List<URI>>>>(); _EL_   for (  VolumeDescriptor descr : addDescriptors) { _EL_     URI deviceURI=descr.getDeviceURI(); _EL_     Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI); _EL_     if (volumesToUpdateByCG == null) { _EL_       volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>(); _EL_       deviceToCGMap.put(deviceURI,volumesToUpdateByCG); _EL_     } _EL_     URI consistencyGroupURI=descr.getConsistencyGroupURI(); _EL_     Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI); _EL_     if (volumesToUpdate == null) { _EL_       volumesToUpdate=new HashMap<String,List<URI>>(); _EL_       volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate); _EL_     } _EL_     List<URI> volumesToAdd=volumesToUpdate.get(ADD_VOLUMES_TO_CG_KEY); _EL_     if (volumesToAdd == null) { _EL_       volumesToAdd=new ArrayList<URI>(); _EL_       volumesToUpdate.put(ADD_VOLUMES_TO_CG_KEY,volumesToAdd); _EL_     } _EL_     volumesToAdd.add(descr.getVolumeURI()); _EL_   } _EL_   for (  VolumeDescriptor descr : removeDescriptors) { _EL_     URI deviceURI=descr.getDeviceURI(); _EL_     Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI); _EL_     if (volumesToUpdateByCG == null) { _EL_       volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>(); _EL_       deviceToCGMap.put(deviceURI,volumesToUpdateByCG); _EL_     } _EL_     URI consistencyGroupURI=descr.getConsistencyGroupURI(); _EL_     Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI); _EL_     if (volumesToUpdate == null) { _EL_       volumesToUpdate=new HashMap<String,List<URI>>(); _EL_       volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate); _EL_     } _EL_     List<URI> volumesToRemove=volumesToUpdate.get(REMOVE_VOLUMES_FROM_CG_KEY); _EL_     if (volumesToRemove == null) { _EL_       volumesToRemove=new ArrayList<URI>(); _EL_       volumesToUpdate.put(REMOVE_VOLUMES_FROM_CG_KEY,volumesToRemove); _EL_     } _EL_     volumesToRemove.add(descr.getVolumeURI()); _EL_   } _EL_   return deviceToCGMap; _EL_ } _EL_ ', 'private boolean findRoot(final ODEStateInterpolator interpolator,final double ta,final double ga,final double tb,final double gb){ _EL_   check(ga == 0.0 || gb == 0.0 || (ga > 0.0 && gb < 0.0) || (ga < 0.0 && gb > 0.0)); _EL_   final UnivariateFunction f=null; _EL_   double beforeRootT=Double.NaN, beforeRootG=Double.NaN; _EL_   double afterRootT=ta, afterRootG=0.0; _EL_   if (ta == tb) { _EL_     beforeRootT=ta; _EL_     beforeRootG=ga; _EL_     afterRootT=shiftedBy(beforeRootT,convergence); _EL_     afterRootG=f.value(afterRootT); _EL_   } _EL_  else   if (ga != 0.0 && gb == 0.0) { _EL_     beforeRootT=tb; _EL_     beforeRootG=gb; _EL_     afterRootT=shiftedBy(beforeRootT,convergence); _EL_     afterRootG=f.value(afterRootT); _EL_   } _EL_  else   if (ga != 0.0) { _EL_     final double newGa=f.value(ta); _EL_     if (ga > 0 != newGa > 0) { _EL_       beforeRootT=ta; _EL_       beforeRootG=newGa; _EL_       afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb); _EL_       afterRootG=f.value(afterRootT); _EL_     } _EL_   } _EL_   double loopT=ta, loopG=ga; _EL_   while ((afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) && strictlyAfter(afterRootT,tb)) { _EL_     if (loopG == 0.0) { _EL_       beforeRootT=loopT; _EL_       beforeRootG=loopG; _EL_       afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb); _EL_       afterRootG=f.value(afterRootT); _EL_     } _EL_  else { _EL_       if (forward) { _EL_         final Interval interval=solver.solveInterval(maxIterationCount,f,loopT,tb); _EL_         beforeRootT=interval.getLeftAbscissa(); _EL_         beforeRootG=interval.getLeftValue(); _EL_         afterRootT=interval.getRightAbscissa(); _EL_         afterRootG=interval.getRightValue(); _EL_       } _EL_  else { _EL_         final Interval interval=solver.solveInterval(maxIterationCount,f,tb,loopT); _EL_         beforeRootT=interval.getRightAbscissa(); _EL_         beforeRootG=interval.getRightValue(); _EL_         afterRootT=interval.getLeftAbscissa(); _EL_         afterRootG=interval.getLeftValue(); _EL_       } _EL_     } _EL_     if (beforeRootT == afterRootT) { _EL_       afterRootT=nextAfter(afterRootT); _EL_       afterRootG=f.value(afterRootT); _EL_     } _EL_     check((forward && afterRootT > beforeRootT) || (!forward && afterRootT < beforeRootT)); _EL_     loopT=afterRootT; _EL_     loopG=afterRootG; _EL_   } _EL_   if (afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) { _EL_     return false; _EL_   } _EL_  else { _EL_     check(!Double.isNaN(beforeRootT) && !Double.isNaN(beforeRootG)); _EL_     increasing=!g0Positive; _EL_     pendingEventTime=beforeRootT; _EL_     stopTime=beforeRootG == 0.0 ? beforeRootT : afterRootT; _EL_     pendingEvent=true; _EL_     afterEvent=afterRootT; _EL_     afterG=afterRootG; _EL_     check(afterG > 0 == increasing); _EL_     check(increasing == gb >= ga); _EL_     return true; _EL_   } _EL_ } _EL_ ', 'public Node(String permission,boolean value,boolean override,long expireAt,String server,String world,ContextSet contexts){ _EL_   if (permission == null || permission.equals("")) { _EL_     throw new IllegalArgumentException("Empty permission"); _EL_   } _EL_   if (server != null && (server.equalsIgnoreCase("global") || server.equals(""))) { _EL_     server=null; _EL_   } _EL_   if (world != null && world.equals("")) { _EL_     world=null; _EL_   } _EL_   if (world != null && server == null) { _EL_     server="global"; _EL_   } _EL_   this.permission=permission; _EL_   this.value=value; _EL_   this.override=override; _EL_   this.expireAt=expireAt; _EL_   this.server=server; _EL_   this.world=world; _EL_   this.contexts=contexts == null ? ContextSet.empty() : contexts.makeImmutable(); _EL_ } _EL_ ', 'public Cell(int rowspan,int colspan){ _EL_   this.rowspan=Math.max(rowspan,1); _EL_   this.colspan=Math.max(colspan,1); _EL_ } _EL_ ', 'public void insert(String key,char val){ _EL_   int len=key.length() + 1; _EL_   if (freenode + len > eq.length) { _EL_     redimNodeArrays(eq.length + BLOCK_SIZE); _EL_   } _EL_   char strkey[]=new char[len--]; _EL_   key.getChars(0,len,strkey,0); _EL_   strkey[len]=0; _EL_   root=insert(root,strkey,0,val); _EL_ } _EL_ ', 'void fullyUnlock(){ _EL_   takeLock.unlock(); _EL_   putLock.unlock(); _EL_ } _EL_ ', 'private void validateClassName(String className){ _EL_   String nvalue=className.trim(); _EL_   if (!nvalue.matches(CLASS_RE)) { _EL_     throw PropertyException.illegalPropertyValueException(this,className); _EL_   } _EL_ } _EL_ ', 'private byte[] calculateGeneralEncryptionKey(byte[] userPassword,byte[] firstDocIdValue,int keyBitLength,int revision,byte[] oValue,int pValue,boolean encryptMetadata) throws GeneralSecurityException { _EL_   final byte[] paddedPassword=padPassword(userPassword); _EL_   MessageDigest md5=createMD5Digest(); _EL_   md5.reset(); _EL_   md5.update(paddedPassword); _EL_   md5.update(oValue); _EL_   md5.update((byte)(pValue & 0xFF)); _EL_   md5.update((byte)((pValue >> 8) & 0xFF)); _EL_   md5.update((byte)((pValue >> 16) & 0xFF)); _EL_   md5.update((byte)(pValue >> 24)); _EL_   if (firstDocIdValue != null) { _EL_     md5.update(firstDocIdValue); _EL_   } _EL_   if (revision >= 4 && !encryptMetadata) { _EL_     for (int i=0; i < 4; ++i) { _EL_       md5.update((byte)0xFF); _EL_     } _EL_   } _EL_   byte[] hash=md5.digest(); _EL_   final int keyLen=revision == 2 ? 5 : (keyBitLength / 8); _EL_   final byte[] key=new byte[keyLen]; _EL_   if (revision >= 3) { _EL_     for (int i=0; i < 50; ++i) { _EL_       md5.update(hash,0,key.length); _EL_       digestTo(md5,hash); _EL_     } _EL_   } _EL_   System.arraycopy(hash,0,key,0,key.length); _EL_   return key; _EL_ } _EL_ ', 'public static String trimOrPad(String str,int length,char padChar){ _EL_   String result; _EL_   if (str == null) { _EL_     result=""; _EL_   } _EL_  else { _EL_     result=str; _EL_   } _EL_   if (result.length() > length) { _EL_     return result.substring(0,length); _EL_   } _EL_   while (result.length() < length) { _EL_     result+=padChar; _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public boolean fireMapMouseClicked(MouseEvent evt){ _EL_   if (DEBUG) { _EL_     logger.fine("MapMouseSupport: fireMapMouseClicked"); _EL_   } _EL_   clickHappened=true; _EL_   boolean consumed=false; _EL_   evt=new MapMouseEvent(getParentMode(),evt); _EL_   if (priorityListener != null && evt.getClickCount() > 1) { _EL_     priorityListener.mouseClicked(evt); _EL_     consumed=true; _EL_   } _EL_   priorityListener=null; _EL_   if (proxy == null || evt.isShiftDown() || (proxyDistributionMask & PROXY_DISTRIB_MOUSE_CLICKED) > 0) { _EL_     Iterator<MapMouseListener> it=iterator(); _EL_     while (it.hasNext() && !consumed) { _EL_       MapMouseListener target=it.next(); _EL_       consumed=target.mouseClicked(evt) && consumeEvents; _EL_       if (consumed) { _EL_         priorityListener=target; _EL_       } _EL_     } _EL_   } _EL_   boolean ignoreConsumed=!consumed || (consumed && ((proxyDistributionMask & PROXY_ACK_CONSUMED_MOUSE_CLICKED) == 0)); _EL_   if (proxy != null && ignoreConsumed && !evt.isShiftDown()) { _EL_     proxy.mouseClicked(evt); _EL_     consumed=true; _EL_   } _EL_   return consumed; _EL_ } _EL_ ', 'private void recordLogData(){ _EL_   try { _EL_     int size=mRecordingData.size(); _EL_     if (size == 0) { _EL_       return; _EL_     } _EL_     Vector<String> recordingData=new Vector<>(mRecordingData); _EL_     File logDir=Constants.getRecordDir(this); _EL_     logDir.mkdirs(); _EL_     File logFile=new File(logDir,mRecordingFilename); _EL_     FileWriter logFileWriter=new FileWriter(logFile,true); _EL_     for (int i=0; i < size; i++) { _EL_       logFileWriter.append(recordingData.elementAt(i) + "\\n"); _EL_       mRecordingData.removeElementAt(0); _EL_     } _EL_     recordingData.removeAllElements(); _EL_     logFileWriter.close(); _EL_   } _EL_  catch (  Exception e) { _EL_     Log.e(LOG_TAG,"recordLogData:Error writing the log to file. Exception: " + e.toString()); _EL_   } _EL_ } _EL_ ', 'public final int decrementAndGet(){ _EL_   return unsafe.getAndAddInt(this,valueOffset,-1) - 1; _EL_ } _EL_ ', 'void fullyLock(){ _EL_   putLock.lock(); _EL_   takeLock.lock(); _EL_ } _EL_ ', 'private void removeOurUIs(){ _EL_   for (  String uiName : UI_LIST) { _EL_     uiDefaults.remove(uiName + "UI"); _EL_   } _EL_ } _EL_ ', 'public boolean contains(List<Integer> hashes){ _EL_   Iterator<Integer> ni=hashes.iterator(); _EL_   for (int i=0; i < hashFunctions; ++i) { _EL_     if (!testBit((int)((ni.next() & 0xFFFFFFFFL) % (filter.length * 8)))) { _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private void sendRequestOption() throws IOException { _EL_   String request="OPTIONS rtsp://" + mParameters.host + ":"+ mParameters.port+ mParameters.path+ " RTSP/1.0\\r\\n"+ addHeaders(); _EL_   Log.i(TAG,request.substring(0,request.indexOf("\\r\\n"))); _EL_   mOutputStream.write(request.getBytes("UTF-8")); _EL_   Response.parseResponse(mBufferedReader); _EL_ } _EL_ ', 'public boolean validate(String value,String rule){ _EL_   return (value.equalsIgnoreCase(rule)); _EL_ } _EL_ ', '@SuppressLint("DefaultLocale") public void elementType(String name,int model,int memberOf,int flags){ _EL_   ElementType e=new ElementType(name,model,memberOf,flags,this); _EL_   theElementTypes.put(name.toLowerCase(),e); _EL_   if (memberOf == M_ROOT)   theRoot=e; _EL_ } _EL_ ', 'public void classLoaderInit(DynamicClassLoader loader){ _EL_   EnvLoaderListener listener=_listenerRef.get(); _EL_   if (listener != null)   listener.classLoaderInit(loader); _EL_ } _EL_ ', 'public boolean isValidTemplate(){ _EL_   return isValidTemplate(template); _EL_ } _EL_ ', 'public static <T>UnaryOperator<List<T>> from(Collection<String> commandLineUdids,Function<T,ICloud.MBSBackup> mbsBackup,Function<ICloud.MBSBackup,String> formatter,Printer out,InputStream in){ _EL_   return commandLineUdids.isEmpty() ? new User(mbsBackup,out,in,formatter) : new Udid(mbsBackup,out,in,new ArrayList<>(commandLineUdids)); _EL_ } _EL_ ', '@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processQueues(){ _EL_   Dimension dimension=dimensionSetting.get(); _EL_   updateLayerManager(dimension); _EL_   processRecycleQueue(); _EL_   Fragment fragment; _EL_   while ((fragment=loadingQueue.poll()) != null) { _EL_     loadFragment(dimension,fragment); _EL_     dimension=dimensionSetting.get(); _EL_     updateLayerManager(dimension); _EL_     processRecycleQueue(); _EL_   } _EL_   layerManager.clearInvalidatedLayers(); _EL_ } _EL_ ', 'Builder addLenient(String line){ _EL_   int index=line.indexOf(":",1); _EL_   if (index != -1) { _EL_     return addLenient(line.substring(0,index),line.substring(index + 1)); _EL_   } _EL_  else   if (line.startsWith(":")) { _EL_     return addLenient("",line.substring(1)); _EL_   } _EL_  else { _EL_     return addLenient("",line); _EL_   } _EL_ } _EL_ ', 'public static void trim(CharSequence aText,int[] aSpan){ _EL_   int begin=aSpan[0]; _EL_   int end=aSpan[1] - 1; _EL_   CharSequence data=aText; _EL_   while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) { _EL_     begin++; _EL_   } _EL_   while ((end > 0) && trimChar(data.charAt(end))) { _EL_     end--; _EL_   } _EL_   end++; _EL_   aSpan[0]=begin; _EL_   aSpan[1]=end; _EL_ } _EL_ ', 'public void addDefinition(ICOSDefinition cosDef) throws UMSException { _EL_   if (!(cosDef instanceof DirectCOSDefinition)) { _EL_     String msg=i18n.getString(IUMSConstants.INVALID_COSDEFINITION); _EL_     throw new UMSException(msg); _EL_   } _EL_   String[] cosAttributes=cosDef.getCOSAttributes(); _EL_   AbstractCollection aList=(AbstractCollection)Arrays.asList(ICOSDefinition.qualifiers); _EL_   for (int i=0; i < cosAttributes.length; i++) { _EL_     String cosAttribute=null; _EL_     String qualifier=null; _EL_     StringTokenizer st=new StringTokenizer(cosAttributes[i]); _EL_     if (st.hasMoreTokens()) { _EL_       cosAttribute=st.nextToken(); _EL_     } _EL_     if (cosAttribute == null) { _EL_       String msg=i18n.getString(IUMSConstants.INVALID_COS_ATTRIBUTE_QUALIFIER); _EL_       throw new UMSException(msg); _EL_     } _EL_     if (st.hasMoreTokens())     qualifier=st.nextToken(); _EL_     if (qualifier == null) { _EL_       qualifier=ICOSDefinition.qualifiers[ICOSDefinition.DEFAULT]; _EL_       cosDef.removeCOSAttribute(cosAttribute); _EL_       cosDef.addCOSAttribute(cosAttribute,ICOSDefinition.DEFAULT); _EL_     } _EL_     if (!aList.contains(qualifier)) { _EL_       String msg=i18n.getString(IUMSConstants.INVALID_COS_ATTRIBUTE_QUALIFIER); _EL_       throw new UMSException(msg); _EL_     } _EL_   } _EL_   PersistentObject po=(PersistentObject)cosDef; _EL_   _parentObject.addChild(po); _EL_ } _EL_ ', 'public static AnnotationMirror findEffectiveAnnotationInHierarchy(final QualifierHierarchy qualifierHierarchy,final AnnotatedTypeMirror toSearch,final AnnotationMirror top){ _EL_   return findEffectiveAnnotationInHierarchy(qualifierHierarchy,toSearch,top,false); _EL_ } _EL_ ', 'void parseFinish(){ _EL_   mChildren=mCurrentGroup.getChildren(); _EL_ } _EL_ ', '@Beta public void reset(){ _EL_   schedulersHook.set(null); _EL_ } _EL_ ', 'public void parse(String string){ _EL_   if (string == null) { _EL_     throw new NullPointerException("string is null"); _EL_   } _EL_   int bufferSize=Math.max(MIN_BUFFER_SIZE,Math.min(DEFAULT_BUFFER_SIZE,string.length())); _EL_   try { _EL_     parse(new StringReader(string),bufferSize); _EL_   } _EL_  catch (  IOException exception) { _EL_     throw new RuntimeException(exception); _EL_   } _EL_ } _EL_ ', 'public static int normalize(char[] src,int srcStart,int srcLimit,char[] dest,int destStart,int destLimit,Mode mode,int options){ _EL_   int length=mode.normalize(src,srcStart,srcLimit,dest,destStart,destLimit,options); _EL_   if (length <= (destLimit - destStart)) { _EL_     return length; _EL_   } _EL_  else { _EL_     throw new IndexOutOfBoundsException(Integer.toString(length)); _EL_   } _EL_ } _EL_ ', 'public void configure(){ _EL_   if (cmdPrefix != null) { _EL_     prefix=cmdPrefix.split(" "); _EL_   } _EL_ } _EL_ ', 'public long convertPolarStereographicToGeodetic(double Easting,double Northing){ _EL_   double dy=0, dx=0; _EL_   double rho=0; _EL_   double t; _EL_   double PHI, sin_PHI; _EL_   double tempPHI=0.0; _EL_   double essin; _EL_   double pow_es; _EL_   double delta_radius; _EL_   long Error_Code=POLAR_NO_ERROR; _EL_   double min_easting=Polar_False_Easting - Polar_Delta_Easting; _EL_   double max_easting=Polar_False_Easting + Polar_Delta_Easting; _EL_   double min_northing=Polar_False_Northing - Polar_Delta_Northing; _EL_   double max_northing=Polar_False_Northing + Polar_Delta_Northing; _EL_   if (Easting > max_easting || Easting < min_easting) { _EL_     Error_Code|=POLAR_EASTING_ERROR; _EL_   } _EL_   if (Northing > max_northing || Northing < min_northing) { _EL_     Error_Code|=POLAR_NORTHING_ERROR; _EL_   } _EL_   if (Error_Code == POLAR_NO_ERROR) { _EL_     dy=Northing - Polar_False_Northing; _EL_     dx=Easting - Polar_False_Easting; _EL_     rho=Math.sqrt(dx * dx + dy * dy); _EL_     delta_radius=Math.sqrt(Polar_Delta_Easting * Polar_Delta_Easting + Polar_Delta_Northing * Polar_Delta_Northing); _EL_     if (rho > delta_radius) { _EL_       Error_Code|=POLAR_RADIUS_ERROR; _EL_     } _EL_   } _EL_   if (Error_Code == POLAR_NO_ERROR) { _EL_     if ((dy == 0.0) && (dx == 0.0)) { _EL_       Latitude=PI_OVER_2; _EL_       Longitude=Polar_Origin_Long; _EL_     } _EL_  else { _EL_       if (Southern_Hemisphere != 0) { _EL_         dy*=-1.0; _EL_         dx*=-1.0; _EL_       } _EL_       if (Math.abs(Math.abs(Polar_Origin_Lat) - PI_OVER_2) > 1.0e-10)       t=rho * tc / (Polar_a_mc); _EL_  else       t=rho * e4 / (two_Polar_a); _EL_       PHI=PI_OVER_2 - 2.0 * Math.atan(t); _EL_       while (Math.abs(PHI - tempPHI) > 1.0e-10) { _EL_         tempPHI=PHI; _EL_         sin_PHI=Math.sin(PHI); _EL_         essin=es * sin_PHI; _EL_         pow_es=Math.pow((1.0 - essin) / (1.0 + essin),es_OVER_2); _EL_         PHI=PI_OVER_2 - 2.0 * Math.atan(t * pow_es); _EL_       } _EL_       Latitude=PHI; _EL_       Longitude=Polar_Origin_Long + Math.atan2(dx,-dy); _EL_       if (Longitude > PI)       Longitude-=TWO_PI; _EL_  else       if (Longitude < -PI)       Longitude+=TWO_PI; _EL_       if (Latitude > PI_OVER_2)       Latitude=PI_OVER_2; _EL_  else       if (Latitude < -PI_OVER_2)       Latitude=-PI_OVER_2; _EL_       if (Longitude > PI)       Longitude=PI; _EL_  else       if (Longitude < -PI)       Longitude=-PI; _EL_     } _EL_     if (Southern_Hemisphere != 0) { _EL_       Latitude*=-1.0; _EL_       Longitude*=-1.0; _EL_     } _EL_   } _EL_   return (Error_Code); _EL_ } _EL_ ', 'public boolean matchesWord(){ _EL_   return !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos)); _EL_ } _EL_ ', 'protected int unicodeEscapeLexer(int c) throws IOException { _EL_   int ret=0; _EL_   c=in.read(); _EL_   code.clear(); _EL_   try { _EL_     for (int i=0; i < 4; i++) { _EL_       c=in.read(); _EL_       if (isEndOfFile(c) || isEndOfLine(c)) { _EL_         throw new NumberFormatException("number too short"); _EL_       } _EL_       code.append((char)c); _EL_     } _EL_     ret=Integer.parseInt(code.toString(),16); _EL_   } _EL_  catch (  NumberFormatException e) { _EL_     throw new IOException("(line " + getLineNumber() + ") Wrong unicode escape sequence found \'"+ code.toString()+ "\'"+ e.toString()); _EL_   } _EL_   return ret; _EL_ } _EL_ ', 'public static Template create(String value){ _EL_   if (Settings.isFunction(value)) { _EL_     return new FunctionalTemplate(value); _EL_   } _EL_   if (Graph.isRelational(value)) { _EL_     try { _EL_       return new RelationalTemplate(value); _EL_     } _EL_  catch (    Exception e) { _EL_       log.warning("illegal relational structure: " + value + ")"); _EL_       return new StringTemplate(value); _EL_     } _EL_   } _EL_  else   if (RegexTemplate.isPossibleRegex(value)) { _EL_     try { _EL_       if (ArithmeticTemplate.isArithmeticExpression(value)) { _EL_         return new ArithmeticTemplate(value); _EL_       } _EL_       return new RegexTemplate(value); _EL_     } _EL_  catch (    PatternSyntaxException e) { _EL_       log.warning("illegal pattern: " + value + ")"); _EL_       return new StringTemplate(value); _EL_     } _EL_   } _EL_  else { _EL_     return new StringTemplate(value); _EL_   } _EL_ } _EL_ ', 'public boolean containsPoly(SootMethod method){ _EL_   return getMethod(method) != null; _EL_ } _EL_ ', 'private void selectAttributeSetInstance(){ _EL_   int m_warehouse_id=getM_Warehouse_ID(); _EL_   int m_product_id=getM_Product_ID(); _EL_   if (m_product_id <= 0)   return; _EL_   MProduct product=MProduct.get(getCtx(),m_product_id); _EL_   MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id); _EL_   String title=product.get_Translation(MProduct.COLUMNNAME_Name) + " - " + wh.get_Translation(MWarehouse.COLUMNNAME_Name); _EL_   PAttributeInstance pai=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0); _EL_   if (pai.getM_AttributeSetInstance_ID() != -1) { _EL_     fAttrSetInstance_ID.setText(pai.getM_AttributeSetInstanceName()); _EL_     fAttrSetInstance_ID.setValue(new Integer(pai.getM_AttributeSetInstance_ID())); _EL_   } _EL_  else { _EL_     fAttrSetInstance_ID.setValue(Integer.valueOf(0)); _EL_   } _EL_ } _EL_ ', 'public boolean isPersistent(){ _EL_   return m_persist; _EL_ } _EL_ ', 'public void addLive(boolean live){ _EL_   query.append(" +live:" + live); _EL_ } _EL_ ', 'public void reload(String why){ _EL_   mFullPhotoPaths=mRootDir.list(MediaScanner.JPG_FILENAME_FILTER); _EL_   if ((mFullPhotoPaths != null) && (mFullPhotoPaths.length == 0)) { _EL_     mFullPhotoPaths=null; _EL_     Log.i(Global.LOG_CONTEXT,mDebugPrefix + why + "AdapterArrayHelper.refreshLocal("+ mRootDir+ ") "+ 0); _EL_   } _EL_  else   if (mFullPhotoPaths != null) { _EL_     if (Global.debugEnabled) { _EL_       Log.i(Global.LOG_CONTEXT,mDebugPrefix + why + "AdapterArrayHelper.refreshLocal("+ mRootDir+ ") "+ mFullPhotoPaths.length); _EL_     } _EL_     String parentDirString=mRootDir.getAbsolutePath(); _EL_     for (int i=0; i < mFullPhotoPaths.length; i++) { _EL_       mFullPhotoPaths[i]=parentDirString + "/" + mFullPhotoPaths[i]; _EL_     } _EL_   } _EL_ } _EL_ ', 'private void addExprToTLA(TLAExpr expr){ _EL_   Vector sv=expr.toStringVector(); _EL_   Vector exprMapping=expr.toMappingVector(); _EL_   int indent=tlacodeNextLine.length(); _EL_   int nextLine=0; _EL_   if (indent != 0) { _EL_     MappingObject.shiftMappingVector(exprMapping,indent); _EL_     tlacodeNextLine=tlacodeNextLine + ((String)sv.elementAt(0)); _EL_     mappingVectorNextLine.addAll((Vector)exprMapping.elementAt(0)); _EL_     nextLine=1; _EL_     if (sv.size() > 1) { _EL_       endCurrentLineOfTLA(); _EL_     } _EL_   } _EL_   if (sv.size() > 1) { _EL_     String spaces=NSpaces(indent); _EL_     while (nextLine < sv.size() - 1) { _EL_       tlacode.addElement(spaces + ((String)sv.elementAt(nextLine))); _EL_       mappingVector.addElement((Vector)exprMapping.elementAt(nextLine)); _EL_       nextLine++; _EL_     } _EL_     tlacodeNextLine=spaces + ((String)sv.elementAt(nextLine)); _EL_     mappingVectorNextLine=(Vector)exprMapping.elementAt(nextLine); _EL_   } _EL_  else   if (indent == 0) { _EL_     tlacodeNextLine=tlacodeNextLine + ((String)sv.elementAt(0)); _EL_     mappingVectorNextLine.addAll((Vector)exprMapping.elementAt(0)); _EL_   } _EL_ } _EL_ ', '@Override public void incrementAccessCount(){ _EL_   accessCount.incrementAndGet(); _EL_ } _EL_ ', 'void copyInto(Converter[] converters){ _EL_   System.arraycopy(iConverters,0,converters,0,iConverters.length); _EL_ } _EL_ ', '@Override public IChatMessage sendMessage(final String text) throws RemoteException { _EL_   if (TextUtils.isEmpty(text)) { _EL_     throw new ServerApiIllegalArgumentException("GroupChat message must not be null or empty!"); _EL_   } _EL_   int messageLength=text.length(); _EL_   int maxMessageLength=mRcsSettings.getMaxGroupChatMessageLength(); _EL_   if (messageLength > maxMessageLength) { _EL_     throw new ServerApiIllegalArgumentException("chat message length: " + messageLength + " exceeds max group chat message length: "+ maxMessageLength+ "!"); _EL_   } _EL_   if (!isAllowedToSendMessage()) { _EL_     throw new ServerApiPermissionDeniedException("Not allowed to send GroupChat message on the connected IMS server!"); _EL_   } _EL_   try { _EL_     mImService.removeGroupChatComposingStatus(mChatId); _EL_     long timestamp=System.currentTimeMillis(); _EL_     final ChatMessage msg=ChatUtils.createTextMessage(null,text,timestamp,timestamp); _EL_     ChatMessagePersistedStorageAccessor persistedStorage=new ChatMessagePersistedStorageAccessor(mMessagingLog,msg.getMessageId(),msg.getRemoteContact(),text,msg.getMimeType(),mChatId,Direction.OUTGOING); _EL_     addOutgoingGroupChatMessage(msg,Content.Status.QUEUED,Content.ReasonCode.UNSPECIFIED); _EL_     if (!mChatService.isGroupChatActive(mChatId)) { _EL_       mChatService.setGroupChatStateAndReasonCode(mChatId,GroupChat.State.STARTED,GroupChat.ReasonCode.UNSPECIFIED); _EL_     } _EL_     mImService.tryToDequeueGroupChatMessagesAndGroupFileTransfers(mChatId); _EL_     return new ChatMessageImpl(persistedStorage); _EL_   } _EL_  catch (  ServerApiBaseException e) { _EL_     if (!e.shouldNotBeLogged()) { _EL_       sLogger.error(ExceptionUtil.getFullStackTrace(e)); _EL_     } _EL_     throw e; _EL_   } _EL_ catch (  Exception e) { _EL_     sLogger.error(ExceptionUtil.getFullStackTrace(e)); _EL_     throw new ServerApiGenericException(e); _EL_   } _EL_ } _EL_ ', 'protected Set<FunctionInterface> findUnusedFunctions(Set<UnitInterface> units){ _EL_   Set<FunctionInterface> allFunctions=new HashSet<FunctionInterface>(); _EL_   Set<FunctionInterface> usedFunctions=new HashSet<FunctionInterface>(); _EL_   for (  UnitInterface unit : units) { _EL_     List<FunctionInterface> unitFunctions=getUnitFunctions(unit); _EL_     allFunctions.addAll(unitFunctions); _EL_     for (    FunctionInterface unitFunction : unitFunctions) { _EL_       for (      FunctionInterface usedFunction : unitFunction.getCalledFunctions()) { _EL_         usedFunctions.add(usedFunction); _EL_       } _EL_     } _EL_   } _EL_   allFunctions.removeAll(usedFunctions); _EL_   return allFunctions; _EL_ } _EL_ ', 'public void addIncludes(String[] definitions){ _EL_   addStrings(INCLUDES,definitions); _EL_   addStrings(linker_more,INCLUDES,definitions); _EL_   newLinkerOptionsAfterCompile.add(INCLUDES); _EL_ } _EL_ ', 'public void addOutboundRule(final OutboundRule outboundRule){ _EL_   outboundRule.setId(outboundRuleIdCounter++); _EL_   outboundRules.add(outboundRule); _EL_ } _EL_ ', 'public static String matchCertificate(KeyStore keyStore,X509Certificate cert) throws CryptoException { _EL_   try { _EL_     for (Enumeration aliases=keyStore.aliases(); aliases.hasMoreElements(); ) { _EL_       String alias=(String)aliases.nextElement(); _EL_       if (keyStore.isCertificateEntry(alias)) { _EL_         X509Certificate compCert=X509CertUtil.convertCertificate(keyStore.getCertificate(alias)); _EL_         if (cert.equals(compCert)) { _EL_           return alias; _EL_         } _EL_       } _EL_     } _EL_     return null; _EL_   } _EL_  catch (  KeyStoreException ex) { _EL_     throw new CryptoException(res.getString("NoMatchCertificate.exception.message"),ex); _EL_   } _EL_ } _EL_ ', 'protected void deleteLeastUsedEntry(){ _EL_   try { _EL_     poolLock.lock(); _EL_     BasicPoolEntry entry=freeConnections.remove(); _EL_     if (entry != null) { _EL_       deleteEntry(entry); _EL_     } _EL_  else     if (log.isDebugEnabled()) { _EL_       log.debug("No free connection to delete."); _EL_     } _EL_   } _EL_   finally { _EL_     poolLock.unlock(); _EL_   } _EL_ } _EL_ ', 'private static void insertCommentsInNode(Node node,List<Comment> commentsToAttribute){ _EL_   if (commentsToAttribute.size() == 0)   return; _EL_   List<Node> children=node.getChildrenNodes(); _EL_   PositionUtils.sortByBeginPosition(children); _EL_   for (  Node child : children) { _EL_     List<Comment> commentsInsideChild=new LinkedList<Comment>(); _EL_     for (    Comment c : commentsToAttribute) { _EL_       if (PositionUtils.nodeContains(child,c,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) { _EL_         commentsInsideChild.add(c); _EL_       } _EL_     } _EL_     commentsToAttribute.removeAll(commentsInsideChild); _EL_     insertCommentsInNode(child,commentsInsideChild); _EL_   } _EL_   List<Comment> attributedComments=new LinkedList<Comment>(); _EL_   for (  Comment comment : commentsToAttribute) { _EL_     if (comment.isLineComment()) { _EL_       for (      Node child : children) { _EL_         if (child.getEndLine() == comment.getBeginLine()) { _EL_           if (attributeLineCommentToNodeOrChild(child,comment.asLineComment())) { _EL_             attributedComments.add(comment); _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_   Comment previousComment=null; _EL_   attributedComments=new LinkedList<Comment>(); _EL_   List<Node> childrenAndComments=new LinkedList<Node>(); _EL_   childrenAndComments.addAll(children); _EL_   childrenAndComments.addAll(commentsToAttribute); _EL_   PositionUtils.sortByBeginPosition(childrenAndComments,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution); _EL_   for (  Node thing : childrenAndComments) { _EL_     if (thing instanceof Comment) { _EL_       previousComment=(Comment)thing; _EL_       if (!previousComment.isOrphan()) { _EL_         previousComment=null; _EL_       } _EL_     } _EL_  else { _EL_       if (previousComment != null && !thing.hasComment()) { _EL_         if (!_doNotAssignCommentsPreceedingEmptyLines || !thereAreLinesBetween(previousComment,thing)) { _EL_           thing.setComment(previousComment); _EL_           attributedComments.add(previousComment); _EL_           previousComment=null; _EL_         } _EL_       } _EL_     } _EL_   } _EL_   commentsToAttribute.removeAll(attributedComments); _EL_   for (  Comment c : commentsToAttribute) { _EL_     if (c.isOrphan()) { _EL_       node.addOrphanComment(c); _EL_     } _EL_   } _EL_ } _EL_ ', 'protected Expression findExpression(String source){ _EL_   if (source != null && source.length() > 0) { _EL_     source=source.trim(); _EL_     if (source.length() == 0) { _EL_       return null; _EL_     } _EL_     String leftSide=source; _EL_     String rightSide=null; _EL_     Connector op=findOp(leftSide); _EL_     if (op != null) { _EL_       rightSide=op.getRightSide(leftSide); _EL_       leftSide=leftSide.substring(0,op.sourceLoc); _EL_       Expression leftExpression=findExpression(leftSide); _EL_       Expression rightExpression=findExpression(rightSide); _EL_       if (leftExpression != null) { _EL_         op.addExpr(leftExpression); _EL_       } _EL_       if (rightExpression != null) { _EL_         op.addExpr(rightExpression); _EL_       } _EL_       return op; _EL_     } _EL_     op=findMiniOp(leftSide); _EL_     if (op != null) { _EL_       rightSide=op.getRightSide(leftSide); _EL_       leftSide=leftSide.substring(0,op.sourceLoc); _EL_       Expression leftExpression=findExpression(leftSide); _EL_       Expression rightExpression=findExpression(rightSide); _EL_       if (leftExpression != null) { _EL_         op.addExpr(leftExpression); _EL_       } _EL_       if (rightExpression != null) { _EL_         op.addExpr(rightExpression); _EL_       } _EL_       return op; _EL_     } _EL_     if (logger.isLoggable(Level.FINER)) { _EL_       logger.finer("need to break up: " + source); _EL_     } _EL_     return findMathOp(source); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'private static void configureHeadLessSimulation(){ _EL_   System.setProperty("java.awt.headless","true"); _EL_   GAMA.setHeadLessMode(); _EL_ } _EL_ ', 'public byte[] remove(QueueEvent event) throws KeeperException, InterruptedException { _EL_   TimerContext time=stats.time(dir + "_remove_event"); _EL_   try { _EL_     String path=event.getId(); _EL_     String responsePath=dir + "/" + response_prefix+ path.substring(path.lastIndexOf("-") + 1); _EL_     if (zookeeper.exists(responsePath,true)) { _EL_       zookeeper.setData(responsePath,event.getBytes(),true); _EL_     } _EL_     byte[] data=zookeeper.getData(path,null,null,true); _EL_     zookeeper.delete(path,-1,true); _EL_     return data; _EL_   } _EL_   finally { _EL_     time.stop(); _EL_   } _EL_ } _EL_ ', 'static public void addAll(List<String> list,String[] array){ _EL_   for (  String item : array)   list.add(item); _EL_ } _EL_ ', 'private void validateReplicaAvailability(Slice slice,String shard,String collectionName,int count){ _EL_   if (slice != null) { _EL_     Collection<Replica> allReplicasForShard=slice.getReplicas(); _EL_     if (allReplicasForShard == null) { _EL_       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"No replicas found  in shard/collection: " + shard + "/"+ collectionName); _EL_     } _EL_     if (allReplicasForShard.size() == 1) { _EL_       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"There is only one replica available in shard/collection: " + shard + "/"+ collectionName+ ". Cannot delete that."); _EL_     } _EL_     if (allReplicasForShard.size() <= count) { _EL_       throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"There are lesser num replicas requested to be deleted than are available in shard/collection : " + shard + "/"+ collectionName+ " Requested: "+ count+ " Available: "+ allReplicasForShard.size()+ "."); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void checkAndCreateDirectory(final String directoryName){ _EL_   try { _EL_     final File dir=new File(directoryName); _EL_     if (!dir.exists() && dir.mkdirs()) { _EL_       _logger.debug("Debug dump directory created successfully."); _EL_     } _EL_   } _EL_  catch (  Exception ex) { _EL_     _logger.error("Debug dump directory creation failed due to {}",ex.getMessage()); _EL_   } _EL_ } _EL_ ', 'private void connect() throws IOException { _EL_   JMXServiceURL jmxUrl=new JMXServiceURL(String.format(fmtUrl,host,port)); _EL_   Map<String,Object> env=new HashMap<String,Object>(); _EL_   if (username != null) { _EL_     String[] creds={username,password}; _EL_     env.put(JMXConnector.CREDENTIALS,creds); _EL_   } _EL_   env.put("com.sun.jndi.rmi.factory.socket",getRMIClientSocketFactory()); _EL_   jmxc=JMXConnectorFactory.connect(jmxUrl,env); _EL_   mbeanServerConn=jmxc.getMBeanServerConnection(); _EL_   try { _EL_     ObjectName name=new ObjectName(ssObjName); _EL_     ssProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageServiceMBean.class); _EL_     name=new ObjectName(MessagingService.MBEAN_NAME); _EL_     msProxy=JMX.newMBeanProxy(mbeanServerConn,name,MessagingServiceMBean.class); _EL_     name=new ObjectName(StreamManagerMBean.OBJECT_NAME); _EL_     streamProxy=JMX.newMBeanProxy(mbeanServerConn,name,StreamManagerMBean.class); _EL_     name=new ObjectName(CompactionManager.MBEAN_OBJECT_NAME); _EL_     compactionProxy=JMX.newMBeanProxy(mbeanServerConn,name,CompactionManagerMBean.class); _EL_     name=new ObjectName(FailureDetector.MBEAN_NAME); _EL_     fdProxy=JMX.newMBeanProxy(mbeanServerConn,name,FailureDetectorMBean.class); _EL_     name=new ObjectName(CacheService.MBEAN_NAME); _EL_     cacheService=JMX.newMBeanProxy(mbeanServerConn,name,CacheServiceMBean.class); _EL_     name=new ObjectName(StorageProxy.MBEAN_NAME); _EL_     spProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageProxyMBean.class); _EL_     name=new ObjectName(HintedHandOffManager.MBEAN_NAME); _EL_     hhProxy=JMX.newMBeanProxy(mbeanServerConn,name,HintedHandOffManagerMBean.class); _EL_     name=new ObjectName(GCInspector.MBEAN_NAME); _EL_     gcProxy=JMX.newMBeanProxy(mbeanServerConn,name,GCInspectorMXBean.class); _EL_     name=new ObjectName(Gossiper.MBEAN_NAME); _EL_     gossProxy=JMX.newMBeanProxy(mbeanServerConn,name,GossiperMBean.class); _EL_   } _EL_  catch (  MalformedObjectNameException e) { _EL_     throw new RuntimeException("Invalid ObjectName? Please report this as a bug.",e); _EL_   } _EL_   memProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.MEMORY_MXBEAN_NAME,MemoryMXBean.class); _EL_   runtimeProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.RUNTIME_MXBEAN_NAME,RuntimeMXBean.class); _EL_ } _EL_ ', 'Task<Void> synchronizeAllAuthDataAsync(){ _EL_   Map<String,Map<String,String>> authData; _EL_ synchronized (mutex) { _EL_     if (!isCurrentUser()) { _EL_       return Task.forResult(null); _EL_     } _EL_     authData=getAuthData(); _EL_   } _EL_   List<Task<Void>> tasks=new ArrayList<>(authData.size()); _EL_   for (  String authType : authData.keySet()) { _EL_     tasks.add(synchronizeAuthDataAsync(authType)); _EL_   } _EL_   return Task.whenAll(tasks); _EL_ } _EL_ ', '@Nullable public static WebsiteAddress create(String originOrHostOrPattern){ _EL_   if (originOrHostOrPattern == null || originOrHostOrPattern.isEmpty()) { _EL_     return null; _EL_   } _EL_   if (originOrHostOrPattern.startsWith(ANY_SUBDOMAIN_PATTERN)) { _EL_     String origin=null; _EL_     String scheme=null; _EL_     String host=originOrHostOrPattern.substring(ANY_SUBDOMAIN_PATTERN.length()); _EL_     boolean omitProtocolAndPort=true; _EL_     return new WebsiteAddress(originOrHostOrPattern,origin,scheme,host,omitProtocolAndPort); _EL_   } _EL_   if (originOrHostOrPattern.indexOf(SCHEME_SUFFIX) != -1) { _EL_     Uri uri=Uri.parse(originOrHostOrPattern); _EL_     String origin=trimTrailingBackslash(originOrHostOrPattern); _EL_     boolean omitProtocolAndPort=HTTP_SCHEME.equals(uri.getScheme()) && (uri.getPort() == -1 || uri.getPort() == 80); _EL_     return new WebsiteAddress(originOrHostOrPattern,origin,uri.getScheme(),uri.getHost(),omitProtocolAndPort); _EL_   } _EL_   String origin=null; _EL_   String scheme=null; _EL_   boolean omitProtocolAndPort=true; _EL_   return new WebsiteAddress(originOrHostOrPattern,origin,scheme,originOrHostOrPattern,omitProtocolAndPort); _EL_ } _EL_ ', 'public void addLast(StatementSequence statements){ _EL_   if (statements != null) { _EL_     sequence.addAll(statements.sequence); _EL_   } _EL_ } _EL_ ', 'protected synchronized void start(long curPrimaryGen) throws IOException { _EL_   if (state.equals("init") == false) { _EL_     throw new IllegalStateException("already started"); _EL_   } _EL_   message("top: now start"); _EL_   try { _EL_     String segmentsFileName=SegmentInfos.getLastCommitSegmentsFileName(dir); _EL_     long maxPendingGen=-1; _EL_     for (    String fileName : dir.listAll()) { _EL_       if (fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)) { _EL_         long gen=Long.parseLong(fileName.substring(IndexFileNames.PENDING_SEGMENTS.length() + 1),Character.MAX_RADIX); _EL_         if (gen > maxPendingGen) { _EL_           maxPendingGen=gen; _EL_         } _EL_       } _EL_     } _EL_     SegmentInfos infos; _EL_     if (segmentsFileName == null) { _EL_       infos=new SegmentInfos(); _EL_       message("top: init: no segments in index"); _EL_     } _EL_  else { _EL_       message("top: init: read existing segments commit " + segmentsFileName); _EL_       infos=SegmentInfos.readCommit(dir,segmentsFileName); _EL_       message("top: init: segments: " + infos.toString() + " version="+ infos.getVersion()); _EL_       Collection<String> indexFiles=infos.files(false); _EL_       lastCommitFiles.add(segmentsFileName); _EL_       lastCommitFiles.addAll(indexFiles); _EL_       deleter.incRef(lastCommitFiles); _EL_       lastNRTFiles.addAll(indexFiles); _EL_       deleter.incRef(lastNRTFiles); _EL_       message("top: commitFiles=" + lastCommitFiles); _EL_       message("top: nrtFiles=" + lastNRTFiles); _EL_     } _EL_     message("top: delete unknown files on init: all files=" + Arrays.toString(dir.listAll())); _EL_     deleter.deleteUnknownFiles(segmentsFileName); _EL_     message("top: done delete unknown files on init: all files=" + Arrays.toString(dir.listAll())); _EL_     String s=infos.getUserData().get(PRIMARY_GEN_KEY); _EL_     long myPrimaryGen; _EL_     if (s == null) { _EL_       assert infos.size() == 0; _EL_       myPrimaryGen=-1; _EL_     } _EL_  else { _EL_       myPrimaryGen=Long.parseLong(s); _EL_     } _EL_     message("top: myPrimaryGen=" + myPrimaryGen); _EL_     boolean doCommit; _EL_     if (infos.size() > 0 && myPrimaryGen != -1 && myPrimaryGen != curPrimaryGen) { _EL_       assert myPrimaryGen < curPrimaryGen; _EL_       final long initSyncStartNS=System.nanoTime(); _EL_       message("top: init: primary changed while we were down myPrimaryGen=" + myPrimaryGen + " vs curPrimaryGen="+ curPrimaryGen+ "; sync now before mgr init"); _EL_       CopyJob job=null; _EL_       message("top: now delete starting commit point " + segmentsFileName); _EL_       assert deleter.getRefCount(segmentsFileName) == 1; _EL_       deleter.decRef(Collections.singleton(segmentsFileName)); _EL_       if (dir instanceof FSDirectory && ((FSDirectory)dir).checkPendingDeletions()) { _EL_         throw new RuntimeException("replica cannot start: existing segments file=" + segmentsFileName + " must be removed in order to start, but the file delete failed"); _EL_       } _EL_       boolean didRemove=lastCommitFiles.remove(segmentsFileName); _EL_       assert didRemove; _EL_       while (true) { _EL_         job=newCopyJob("sync on startup replica=" + name() + " myVersion="+ infos.getVersion(),null,null,true,null); _EL_         job.start(); _EL_         message("top: init: sync sis.version=" + job.getCopyState().version); _EL_         try { _EL_           job.runBlocking(); _EL_           job.finish(); _EL_           break; _EL_         } _EL_  catch (        IOException ioe) { _EL_           job.cancel("startup failed",ioe); _EL_           if (ioe.getMessage().contains("checksum mismatch after file copy")) { _EL_             message("top: failed to copy: " + ioe + "; retrying"); _EL_           } _EL_  else { _EL_             throw ioe; _EL_           } _EL_         } _EL_       } _EL_       lastPrimaryGen=job.getCopyState().primaryGen; _EL_       byte[] infosBytes=job.getCopyState().infosBytes; _EL_       SegmentInfos syncInfos=SegmentInfos.readCommit(dir,new BufferedChecksumIndexInput(new ByteArrayIndexInput("SegmentInfos",job.getCopyState().infosBytes)),job.getCopyState().gen); _EL_       syncInfos.updateGeneration(infos); _EL_       infos=syncInfos; _EL_       assert infos.getVersion() == job.getCopyState().version; _EL_       message("  version=" + infos.getVersion() + " segments="+ infos.toString()); _EL_       message("top: init: incRef nrtFiles=" + job.getFileNames()); _EL_       deleter.incRef(job.getFileNames()); _EL_       message("top: init: decRef lastNRTFiles=" + lastNRTFiles); _EL_       deleter.decRef(lastNRTFiles); _EL_       lastNRTFiles.clear(); _EL_       lastNRTFiles.addAll(job.getFileNames()); _EL_       message("top: init: set lastNRTFiles=" + lastNRTFiles); _EL_       lastFileMetaData=job.getCopyState().files; _EL_       message(String.format(Locale.ROOT,"top: %d: start: done sync: took %.3fs for %s, opened NRT reader version=%d",id,(System.nanoTime() - initSyncStartNS) / 1000000000.0,bytesToString(job.getTotalBytesCopied()),job.getCopyState().version)); _EL_       doCommit=true; _EL_     } _EL_  else { _EL_       doCommit=false; _EL_       lastPrimaryGen=curPrimaryGen; _EL_       message("top: same primary as before"); _EL_     } _EL_     if (infos.getGeneration() < maxPendingGen) { _EL_       message("top: move infos generation from " + infos.getGeneration() + " to "+ maxPendingGen); _EL_       infos.setNextWriteGeneration(maxPendingGen); _EL_     } _EL_     sendNewReplica(); _EL_     mgr=new SegmentInfosSearcherManager(dir,this,infos,searcherFactory); _EL_     IndexSearcher searcher=mgr.acquire(); _EL_     try { _EL_       int hitCount=searcher.count(new TermQuery(new Term("marker","marker"))); _EL_       message("top: marker count=" + hitCount + " version="+ ((DirectoryReader)searcher.getIndexReader()).getVersion()); _EL_     } _EL_   finally { _EL_       mgr.release(searcher); _EL_     } _EL_     if (doCommit) { _EL_       commit(); _EL_     } _EL_     message("top: done start"); _EL_     state="idle"; _EL_   } _EL_  catch (  Throwable t) { _EL_     if (t.getMessage().startsWith("replica cannot start") == false) { _EL_       message("exc on start:"); _EL_       t.printStackTrace(printStream); _EL_     } _EL_  else { _EL_       dir.close(); _EL_     } _EL_     IOUtils.reThrow(t); _EL_   } _EL_ } _EL_ ', '@Deprecated public void pointToData(Data o) throws FitsException { _EL_   o.fillHeader(this); _EL_ } _EL_ ', 'public PartialHull(IPoint first,IPoint second){ _EL_   points.add(first); _EL_   points.add(second); _EL_ } _EL_ ', 'public void reply(List<String> responseHeaders,boolean out) throws IOException { _EL_   assert (!Thread.holdsLock(SpdyStream.this)); _EL_   boolean outFinished=false; _EL_ synchronized (this) { _EL_     if (responseHeaders == null) { _EL_       throw new NullPointerException("responseHeaders == null"); _EL_     } _EL_     if (isLocallyInitiated()) { _EL_       throw new IllegalStateException("cannot reply to a locally initiated stream"); _EL_     } _EL_     if (this.responseHeaders != null) { _EL_       throw new IllegalStateException("reply already sent"); _EL_     } _EL_     this.responseHeaders=responseHeaders; _EL_     if (!out) { _EL_       this.out.finished=true; _EL_       outFinished=true; _EL_     } _EL_   } _EL_   connection.writeSynReply(id,outFinished,responseHeaders); _EL_ } _EL_ ', 'public EipModelWizardInitialObjectCreationPage(String pageId){ _EL_   super(pageId); _EL_ } _EL_ ', 'void deleteChild(PolicyNode childNode){ _EL_   if (isImmutable) { _EL_     throw new IllegalStateException("PolicyNode is immutable"); _EL_   } _EL_   mChildren.remove(childNode); _EL_ } _EL_ ', 'private static void generateFiles(){ _EL_   String[] classNames; _EL_   ResourceBundle rules, info; _EL_   info=ResourceBundle.getBundle("sun.text.resources.BreakIteratorInfo",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE); _EL_   classNames=info.getStringArray("BreakIteratorClasses"); _EL_   rules=ResourceBundle.getBundle("sun.text.resources.BreakIteratorRules",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE); _EL_   if (info.containsKey("CharacterData")) { _EL_     generateDataFile(info.getString("CharacterData"),rules.getString("CharacterBreakRules"),classNames[0]); _EL_   } _EL_   if (info.containsKey("WordData")) { _EL_     generateDataFile(info.getString("WordData"),rules.getString("WordBreakRules"),classNames[1]); _EL_   } _EL_   if (info.containsKey("LineData")) { _EL_     generateDataFile(info.getString("LineData"),rules.getString("LineBreakRules"),classNames[2]); _EL_   } _EL_   if (info.containsKey("SentenceData")) { _EL_     generateDataFile(info.getString("SentenceData"),rules.getString("SentenceBreakRules"),classNames[3]); _EL_   } _EL_ } _EL_ ', 'private float[] calculateImageIndents(){ _EL_   mTempMatrix.reset(); _EL_   mTempMatrix.setRotate(-getCurrentAngle()); _EL_   float[] unrotatedImageCorners=Arrays.copyOf(mCurrentImageCorners,mCurrentImageCorners.length); _EL_   float[] unrotatedCropBoundsCorners=RectUtils.getCornersFromRect(mCropRect); _EL_   mTempMatrix.mapPoints(unrotatedImageCorners); _EL_   mTempMatrix.mapPoints(unrotatedCropBoundsCorners); _EL_   RectF unrotatedImageRect=RectUtils.trapToRect(unrotatedImageCorners); _EL_   RectF unrotatedCropRect=RectUtils.trapToRect(unrotatedCropBoundsCorners); _EL_   float deltaLeft=unrotatedImageRect.left - unrotatedCropRect.left; _EL_   float deltaTop=unrotatedImageRect.top - unrotatedCropRect.top; _EL_   float deltaRight=unrotatedImageRect.right - unrotatedCropRect.right; _EL_   float deltaBottom=unrotatedImageRect.bottom - unrotatedCropRect.bottom; _EL_   float indents[]=new float[4]; _EL_   indents[0]=(deltaLeft > 0) ? deltaLeft : 0; _EL_   indents[1]=(deltaTop > 0) ? deltaTop : 0; _EL_   indents[2]=(deltaRight < 0) ? deltaRight : 0; _EL_   indents[3]=(deltaBottom < 0) ? deltaBottom : 0; _EL_   mTempMatrix.reset(); _EL_   mTempMatrix.setRotate(getCurrentAngle()); _EL_   mTempMatrix.mapPoints(indents); _EL_   return indents; _EL_ } _EL_ ', 'boolean closeOutbound() throws SSLException { _EL_   if (sslEngine == null || sslEngine.isOutboundDone()) { _EL_     return false; _EL_   } _EL_   sslEngine.closeOutbound(); _EL_   createOutNetBuffer(0); _EL_   SSLEngineResult result; _EL_   for (; ; ) { _EL_     result=sslEngine.wrap(emptyBuffer.buf(),outNetBuffer.buf()); _EL_     if (result.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW) { _EL_       outNetBuffer.capacity(outNetBuffer.capacity() << 1); _EL_       outNetBuffer.limit(outNetBuffer.capacity()); _EL_     } _EL_  else { _EL_       break; _EL_     } _EL_   } _EL_   if (result.getStatus() != SSLEngineResult.Status.CLOSED) { _EL_     throw new SSLException("Improper close state: " + result); _EL_   } _EL_   outNetBuffer.flip(); _EL_   return true; _EL_ } _EL_ ', 'private void writePkgInfo() throws BuildException { _EL_   File pkgInfo=new File(mContentsDir,"PkgInfo"); _EL_   PrintWriter writer=null; _EL_   try { _EL_     writer=new PrintWriter(new BufferedWriter(new FileWriter(pkgInfo))); _EL_     writer.print(bundleProperties.getCFBundlePackageType()); _EL_     writer.println(bundleProperties.getCFBundleSignature()); _EL_     writer.flush(); _EL_   } _EL_  catch (  IOException ex) { _EL_     throw new BuildException("Cannot create PkgInfo file: " + ex); _EL_   } _EL_  finally { _EL_     mFileUtils.close(writer); _EL_   } _EL_ } _EL_ ', 'public static void appendHexJavaScriptRepresentation(StringBuilder sb,char c){ _EL_   sb.append("\\\\u"); _EL_   String val=Integer.toHexString(c); _EL_   for (int j=val.length(); j < 4; j++) { _EL_     sb.append(\'0\'); _EL_   } _EL_   sb.append(val); _EL_ } _EL_ ', 'public static String convertToTitle(int n){ _EL_   if (n <= 0)   return ""; _EL_   StringBuilder title=new StringBuilder(); _EL_   while (n > 0) { _EL_     n--; _EL_     int r=n % 26; _EL_     title.insert(0,(char)(\'A\' + r)); _EL_     n=n / 26; _EL_   } _EL_   return title.toString(); _EL_ } _EL_ ', 'protected void appendLine(JComponent c){ _EL_   c.setAlignmentX(0.f); _EL_   contents.add(c); _EL_ } _EL_ ', 'private void persistNewTemp(File fileCfg){ _EL_   if (hsDeleteOnExit.size() == 0) { _EL_     logDebug(LogArea.CONFIG,"No temp file names to persist on exit."); _EL_     fileCfg.delete(); _EL_     return; _EL_   } _EL_   logDebug(LogArea.CONFIG,"Persisting %d temp file names into %s",hsDeleteOnExit.size(),fileCfg.getAbsolutePath()); _EL_   BufferedWriter writer=null; _EL_   try { _EL_     writer=new BufferedWriter(new FileWriter(fileCfg)); _EL_     for (    File file : hsDeleteOnExit) { _EL_       if (!file.delete()) { _EL_         String f=file.getCanonicalPath(); _EL_         writer.write(f); _EL_         writer.newLine(); _EL_         logWarn(LogArea.JAR,"JVM failed to release %s",f); _EL_       } _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_   } _EL_  finally { _EL_     if (writer != null) { _EL_       try { _EL_         writer.close(); _EL_       } _EL_  catch (      IOException e) { _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public void addAttribute(AttributedCharacterIterator.Attribute attribute,Object value){ _EL_   if (attribute == null) { _EL_     throw new NullPointerException("attribute == null"); _EL_   } _EL_   if (text.isEmpty()) { _EL_     throw new IllegalArgumentException("text is empty"); _EL_   } _EL_   List<Range> ranges=attributeMap.get(attribute); _EL_   if (ranges == null) { _EL_     ranges=new ArrayList<Range>(1); _EL_     attributeMap.put(attribute,ranges); _EL_   } _EL_  else { _EL_     ranges.clear(); _EL_   } _EL_   ranges.add(new Range(0,text.length(),value)); _EL_ } _EL_ ', 'long cleanup(long now){ _EL_   int inUseConnectionCount=0; _EL_   int idleConnectionCount=0; _EL_   RealConnection longestIdleConnection=null; _EL_   long longestIdleDurationNs=Long.MIN_VALUE; _EL_ synchronized (this) { _EL_     for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) { _EL_       RealConnection connection=i.next(); _EL_       if (pruneAndGetAllocationCount(connection,now) > 0) { _EL_         inUseConnectionCount++; _EL_         continue; _EL_       } _EL_       idleConnectionCount++; _EL_       long idleDurationNs=now - connection.idleAtNanos; _EL_       if (idleDurationNs > longestIdleDurationNs) { _EL_         longestIdleDurationNs=idleDurationNs; _EL_         longestIdleConnection=connection; _EL_       } _EL_     } _EL_     if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) { _EL_       connections.remove(longestIdleConnection); _EL_     } _EL_  else     if (idleConnectionCount > 0) { _EL_       return keepAliveDurationNs - longestIdleDurationNs; _EL_     } _EL_  else     if (inUseConnectionCount > 0) { _EL_       return keepAliveDurationNs; _EL_     } _EL_  else { _EL_       cleanupRunning=false; _EL_       return -1; _EL_     } _EL_   } _EL_   closeQuietly(longestIdleConnection.socket()); _EL_   return 0; _EL_ } _EL_ ', 'boolean needToCheckExclude(){ _EL_   return false; _EL_ } _EL_ ', 'public int size(){ _EL_   return _attrs.size(); _EL_ } _EL_ ', 'public void attributeUpdate(PrintServiceAttributeEvent psae){ _EL_   log.fine("attributeUpdate - " + psae); _EL_ } _EL_ ', 'protected String[][] toArray(){ _EL_   int i; _EL_   int n; _EL_   int ii; _EL_   int nn; _EL_   int x; _EL_   int y; _EL_   String[][] result; _EL_   String[][] tmpResult; _EL_   int cols; _EL_   int rows; _EL_   boolean valueExists; _EL_   rows=getVisibleRowCount(); _EL_   if (getShowAverage()) { _EL_     rows++; _EL_   } _EL_   cols=getVisibleColCount(); _EL_   if (getShowStdDev()) { _EL_     cols=cols * 3; _EL_   } _EL_  else { _EL_     cols=cols * 2; _EL_   } _EL_   result=new String[rows + 2][cols + 1]; _EL_   result[0][0]=trimString("Dataset",getRowNameWidth()); _EL_   x=1; _EL_   for (ii=0; ii < getColCount(); ii++) { _EL_     i=getDisplayCol(ii); _EL_     if (getColHidden(i)) { _EL_       continue; _EL_     } _EL_     result[0][x]=trimString(removeFilterName(getColName(i)),getColNameWidth()); _EL_     x++; _EL_     if (getShowStdDev()) { _EL_       result[0][x]=""; _EL_       x++; _EL_     } _EL_     result[0][x]=""; _EL_     x++; _EL_   } _EL_   y=1; _EL_   for (ii=0; ii < getRowCount(); ii++) { _EL_     i=getDisplayRow(ii); _EL_     if (!getRowHidden(i)) { _EL_       result[y][0]=trimString(removeFilterName(getRowName(i)),getRowNameWidth()); _EL_       y++; _EL_     } _EL_   } _EL_   y=1; _EL_   for (ii=0; ii < getRowCount(); ii++) { _EL_     i=getDisplayRow(ii); _EL_     if (getRowHidden(i)) { _EL_       continue; _EL_     } _EL_     x=1; _EL_     for (nn=0; nn < getColCount(); nn++) { _EL_       n=getDisplayCol(nn); _EL_       if (getColHidden(n)) { _EL_         continue; _EL_       } _EL_       valueExists=(!Double.isNaN(getMean(n,i))); _EL_       if (!valueExists) { _EL_         result[y][x]=""; _EL_       } _EL_  else { _EL_         result[y][x]=doubleToString(getMean(n,i),getMeanPrec()); _EL_       } _EL_       x++; _EL_       if (getShowStdDev()) { _EL_         if (!valueExists) { _EL_           result[y][x]=""; _EL_         } _EL_  else         if (Double.isInfinite(getStdDev(n,i))) { _EL_           result[y][x]="Inf"; _EL_         } _EL_  else { _EL_           result[y][x]=doubleToString(getStdDev(n,i),getStdDevPrec()); _EL_         } _EL_         x++; _EL_       } _EL_       if (!valueExists) { _EL_         result[y][x]=""; _EL_       } _EL_  else { _EL_ switch (getSignificance(n,i)) { _EL_ case SIGNIFICANCE_TIE: _EL_           result[y][x]=TIE_STRING; _EL_         break; _EL_ case SIGNIFICANCE_WIN: _EL_       result[y][x]=WIN_STRING; _EL_     break; _EL_ case SIGNIFICANCE_LOSS: _EL_   result[y][x]=LOSS_STRING; _EL_ break; _EL_ } _EL_ } _EL_ x++; _EL_ } _EL_ y++; _EL_ } _EL_ if (getShowAverage()) { _EL_ y=result.length - 2; _EL_ x=0; _EL_ result[y][0]="Average"; _EL_ x++; _EL_ for (ii=0; ii < getColCount(); ii++) { _EL_ i=getDisplayCol(ii); _EL_ if (getColHidden(i)) { _EL_ continue; _EL_ } _EL_ result[y][x]=doubleToString(getAverage(i),getMeanPrec()); _EL_ x++; _EL_ if (getShowStdDev()) { _EL_ result[y][x]=""; _EL_ x++; _EL_ } _EL_ result[y][x]=""; _EL_ x++; _EL_ } _EL_ } _EL_ y=result.length - 1; _EL_ x=0; _EL_ result[y][0]=LEFT_PARENTHESES + WIN_STRING + "/"+ TIE_STRING+ "/"+ LOSS_STRING+ RIGHT_PARENTHESES; _EL_ x++; _EL_ for (ii=0; ii < getColCount(); ii++) { _EL_ i=getDisplayCol(ii); _EL_ if (getColHidden(i)) { _EL_ continue; _EL_ } _EL_ result[y][x]=""; _EL_ x++; _EL_ if (getShowStdDev()) { _EL_ result[y][x]=""; _EL_ x++; _EL_ } _EL_ result[y][x]=LEFT_PARENTHESES + getSignificanceCount(i,SIGNIFICANCE_WIN) + "/"+ getSignificanceCount(i,SIGNIFICANCE_TIE)+ "/"+ getSignificanceCount(i,SIGNIFICANCE_LOSS)+ RIGHT_PARENTHESES; _EL_ x++; _EL_ } _EL_ tmpResult=new String[result.length][result[0].length - 1]; _EL_ x=0; _EL_ for (i=0; i < result[0].length; i++) { _EL_ if (((i == 3) && (getShowStdDev())) || ((i == 2) && (!getShowStdDev()))) { _EL_ continue; _EL_ } _EL_ for (n=0; n < result.length; n++) { _EL_ tmpResult[n][x]=result[n][i]; _EL_ } _EL_ x++; _EL_ } _EL_ result=tmpResult; _EL_ return result; _EL_ } _EL_ ', 'private boolean checkIfInitiatorForRPBeforeMigration(Initiator initiator){ _EL_   if (initiator == null) { _EL_     return false; _EL_   } _EL_   boolean isRP=true; _EL_   if (NullColumnValueGetter.isNullValue(initiator.getHostName()) || !NullColumnValueGetter.isNullURI(initiator.getHost())) { _EL_     isRP=false; _EL_   } _EL_   log.debug("RP initiator? " + (isRP ? "Yes!" : "No!")); _EL_   return isRP; _EL_ } _EL_ ', 'protected XSQLDA allocateXSqlDa(RowDescriptor rowDescriptor){ _EL_   if (rowDescriptor == null || rowDescriptor.getCount() == 0) { _EL_     final XSQLDA xSqlDa=new XSQLDA(1); _EL_     xSqlDa.sqld=xSqlDa.sqln=0; _EL_     return xSqlDa; _EL_   } _EL_   final XSQLDA xSqlDa=new XSQLDA(rowDescriptor.getCount()); _EL_   for (int idx=0; idx < rowDescriptor.getCount(); idx++) { _EL_     final FieldDescriptor fieldDescriptor=rowDescriptor.getFieldDescriptor(idx); _EL_     final XSQLVAR xSqlVar=xSqlDa.sqlvar[idx]; _EL_     xSqlVar.sqltype=(short)(fieldDescriptor.getType() | 1); _EL_     xSqlVar.sqlsubtype=(short)fieldDescriptor.getSubType(); _EL_     xSqlVar.sqlscale=(short)fieldDescriptor.getScale(); _EL_     xSqlVar.sqllen=(short)fieldDescriptor.getLength(); _EL_     xSqlVar.sqlind=new ShortByReference(); _EL_     final int requiredDataSize=fieldDescriptor.isVarying() ? fieldDescriptor.getLength() + 3 : fieldDescriptor.getLength() + 1; _EL_     xSqlVar.sqldata=new Memory(requiredDataSize); _EL_   } _EL_   return xSqlDa; _EL_ } _EL_ ', 'public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){ _EL_   Map map=of(); _EL_   map.put(k1,v1); _EL_   map.put(k2,v2); _EL_   map.put(k3,v3); _EL_   map.put(k4,v4); _EL_   map.put(k5,v5); _EL_   return map; _EL_ } _EL_ ', 'private static int convertSpanToSparseGrid(int curIx,int span,TreeSet<Integer> indexes){ _EL_   int lastIx=curIx + span; _EL_   int retSpan=1; _EL_   for (  Integer ix : indexes) { _EL_     if (ix <= curIx)     continue; _EL_     if (ix >= lastIx)     break; _EL_     retSpan++; _EL_   } _EL_   return retSpan; _EL_ } _EL_ ', 'public static BigInteger CRT(List<BigInteger> congs,List<BigInteger> moduli){ _EL_   BigInteger[] cs=ArrayConverter.convertListToArray(congs); _EL_   BigInteger[] ms=ArrayConverter.convertListToArray(moduli); _EL_   return CRT(cs,ms); _EL_ } _EL_ ', 'public void rewind(){ _EL_ synchronized (used) { _EL_     for (    ParameterPair pair : used) { _EL_       current.addParameter(pair.option,pair.value); _EL_     } _EL_     used.clear(); _EL_   } _EL_ } _EL_ ', 'public T allowedUsers(User... users){ _EL_   List<User> usersList=Arrays.asList(users); _EL_   this.userPredicate=null; _EL_   return instance(); _EL_ } _EL_ ', 'public Joiner join(Class<? extends DataObject> clazz,String alias,URI... ids){ _EL_   return join(clazz,alias,new ArrayList<URI>(Arrays.asList(ids))); _EL_ } _EL_ ', 'public PrintfFormat(final String fmtArg) throws IllegalArgumentException { _EL_   this(Locale.getDefault(),fmtArg); _EL_ } _EL_ ', '@SuppressWarnings({"unchecked","rawtypes"}) public static LineByLineFileInputOperator restoreCheckPoint(LineByLineFileInputOperator checkPointOper,ByteArrayOutputStream bos) throws Exception { _EL_   Kryo kryo=new Kryo(); _EL_   Input lInput=new Input(bos.toByteArray()); _EL_   LineByLineFileInputOperator oper=kryo.readObject(lInput,checkPointOper.getClass()); _EL_   lInput.close(); _EL_   return oper; _EL_ } _EL_ ', 'public static String cutFromIndexOf(String string,String substring){ _EL_   int i=string.indexOf(substring); _EL_   if (i != -1) { _EL_     string=string.substring(i); _EL_   } _EL_   return string; _EL_ } _EL_ ', 'public static void invokeFinalize(Object o) throws Throwable { _EL_   o.finalize(); _EL_ } _EL_ ', 'public void mouseWheelMoved(MouseWheelEvent e){ _EL_   boolean accepted=checkModifiers(e); _EL_   if (accepted == true) { _EL_     VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource(); _EL_     Point2D mouse=e.getPoint(); _EL_     Point2D center=vv.getCenter(); _EL_     int amount=e.getWheelRotation(); _EL_     if (zoomAtMouse) { _EL_       if (amount > 0) { _EL_         scaler.scale(vv,in,mouse); _EL_       } _EL_  else       if (amount < 0) { _EL_         scaler.scale(vv,out,mouse); _EL_       } _EL_     } _EL_  else { _EL_       if (amount > 0) { _EL_         scaler.scale(vv,in,center); _EL_       } _EL_  else       if (amount < 0) { _EL_         scaler.scale(vv,out,center); _EL_       } _EL_     } _EL_     e.consume(); _EL_     vv.repaint(); _EL_   } _EL_ } _EL_ ', 'public static String rightPad(String s,int minLength,char filling){ _EL_   int ln=s.length(); _EL_   if (minLength <= ln) { _EL_     return s; _EL_   } _EL_   StringBuilder res=new StringBuilder(minLength); _EL_   res.append(s); _EL_   int dif=minLength - ln; _EL_   for (int i=0; i < dif; i++) { _EL_     res.append(filling); _EL_   } _EL_   return res.toString(); _EL_ } _EL_ ', 'public static synchronized ResultSet executeQuery(String sqlStatement){ _EL_   logger.trace(String.format("executeQuery( %s ) -->entry",sqlStatement)); _EL_   ResultSet R=null; _EL_   final Statement S=getStatement(); _EL_   if (S == null) { _EL_     logger.error("executeQuery() <--exit (error: Statement unavailable)"); _EL_     return null; _EL_   } _EL_   try { _EL_     R=S.executeQuery(sqlStatement); _EL_     logger.trace("executeQuery() <--exit (normal): " + (null == R)); _EL_     return R; _EL_   } _EL_  catch (  Throwable t) { _EL_     surfaceThrowable(String.format("executeQuery( %s )",sqlStatement),t); _EL_     cleanup(S,R); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static String padLeft(String str,int totalChars){ _EL_   if (str == null)   str="null"; _EL_   StringBuilder sb=new StringBuilder(); _EL_   for (int i=0; i < totalChars - str.length(); i++) { _EL_     sb.append(" "); _EL_   } _EL_   sb.append(str); _EL_   return sb.toString(); _EL_ } _EL_ ', 'public boolean isMetadataModifiedSinceLastPublication(){ _EL_   return metadataModifiedSinceLastPublication; _EL_ } _EL_ ', 'public static Variation attemptToGetAsVariant(String part){ _EL_   try { _EL_     StoneTypes var=StoneTypes.valueOf(part.toUpperCase()); _EL_     if (var != null) { _EL_       Variation bv=new Variation(); _EL_       bv.setValue(var.value()); _EL_       return bv; _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_   } _EL_   try { _EL_     WoodTypes var=WoodTypes.valueOf(part.toUpperCase()); _EL_     if (var != null) { _EL_       Variation bv=new Variation(); _EL_       bv.setValue(var.value()); _EL_       return bv; _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_   } _EL_   try { _EL_     FlowerTypes var=FlowerTypes.fromValue(part); _EL_     if (var != null) { _EL_       Variation bv=new Variation(); _EL_       bv.setValue(var.value()); _EL_       return bv; _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_   } _EL_   try { _EL_     EntityTypes var=EntityTypes.fromValue(part); _EL_     if (var != null) { _EL_       Variation bv=new Variation(); _EL_       bv.setValue(var.value()); _EL_       return bv; _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_   } _EL_   try { _EL_     MonsterEggTypes var=MonsterEggTypes.fromValue(part); _EL_     if (var != null) { _EL_       Variation bv=new Variation(); _EL_       bv.setValue(var.value()); _EL_       return bv; _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_   } _EL_   try { _EL_     ShapeTypes var=ShapeTypes.fromValue(part); _EL_     if (var != null) { _EL_       Variation bv=new Variation(); _EL_       bv.setValue(var.value()); _EL_       return bv; _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_   } _EL_   try { _EL_     HalfTypes var=HalfTypes.fromValue(part); _EL_     if (var != null) { _EL_       Variation bv=new Variation(); _EL_       bv.setValue(var.value()); _EL_       return bv; _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public void deleteQuota(String id) throws IsilonException { _EL_   delete(_baseUrl.resolve(URI_QUOTAS),id,"quota"); _EL_ } _EL_ ', '@Override public String dumpWindowHierarchy(boolean compressed){ _EL_   device.setCompressedLayoutHeirarchy(compressed); _EL_   try { _EL_     ByteArrayOutputStream os=new ByteArrayOutputStream(); _EL_     device.dumpWindowHierarchy(os); _EL_     os.close(); _EL_     return os.toString("UTF-8"); _EL_   } _EL_  catch (  FileNotFoundException e) { _EL_     e.printStackTrace(); _EL_   } _EL_ catch (  IOException e) { _EL_     e.printStackTrace(); _EL_   } _EL_  finally { _EL_     device.setCompressedLayoutHeirarchy(false); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static Number asNumber(String value,Supplier<Number> defaultValueProvider){ _EL_   if (value != null) { _EL_     try { _EL_       return Short.valueOf(value); _EL_     } _EL_  catch (    NumberFormatException e1) { _EL_       try { _EL_         return Integer.valueOf(value); _EL_       } _EL_  catch (      NumberFormatException e2) { _EL_         try { _EL_           return Long.valueOf(value); _EL_         } _EL_  catch (        NumberFormatException e3) { _EL_           try { _EL_             return Float.valueOf(value); _EL_           } _EL_  catch (          NumberFormatException e4) { _EL_             try { _EL_               return Double.valueOf(value); _EL_             } _EL_  catch (            NumberFormatException e5) { _EL_               try { _EL_                 return new BigInteger(value); _EL_               } _EL_  catch (              NumberFormatException e6) { _EL_                 try { _EL_                   return new BigDecimal(value); _EL_                 } _EL_  catch (                NumberFormatException e7) { _EL_                 } _EL_               } _EL_             } _EL_           } _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return defaultValueProvider != null ? defaultValueProvider.get() : null; _EL_ } _EL_ ', "public void recordVariable(String typeDesc,String varName,int varNo,SymbolTable tbl) throws CompileError { _EL_   char c; _EL_   int dim=0; _EL_   while ((c=typeDesc.charAt(dim)) == '[')   ++dim; _EL_   int type=MemberResolver.descToType(c); _EL_   String cname=null; _EL_   if (type == CLASS) { _EL_     if (dim == 0)     cname=typeDesc.substring(1,typeDesc.length() - 1); _EL_  else     cname=typeDesc.substring(dim + 1,typeDesc.length() - 1); _EL_   } _EL_   Declarator decl=new Declarator(type,cname,dim,varNo,new Symbol(varName)); _EL_   tbl.append(varName,decl); _EL_ } _EL_ ", '@Override public Path call() throws Exception { _EL_   final Set<FileVisitOption> options; _EL_   if (followLinks) { _EL_     options=EnumSet.of(FileVisitOption.FOLLOW_LINKS); _EL_   } _EL_  else { _EL_     options=EnumSet.noneOf(FileVisitOption.class); _EL_   } _EL_   logger.info(String.format("Starting scan of: \\"%s\\".",path)); _EL_   try { _EL_     Files.walkFileTree(path,options,maxDepth,this); _EL_   } _EL_  catch (  IOException e) { _EL_     logger.log(Level.SEVERE,String.format("Error while scanning path: \\"%s\\".",path),e); _EL_     throw e; _EL_   } _EL_   logger.info(String.format("Completed scan of: \\"%s\\".",path)); _EL_   return path; _EL_ } _EL_ ', 'static WindowsFileAttributes readAttributes(long handle) throws WindowsException { _EL_   NativeBuffer buffer=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION); _EL_   try { _EL_     long address=buffer.address(); _EL_     GetFileInformationByHandle(handle,address); _EL_     int reparseTag=0; _EL_     int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES); _EL_     if (isReparsePoint(fileAttrs)) { _EL_       int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE; _EL_       NativeBuffer reparseBuffer=NativeBuffers.getNativeBuffer(size); _EL_       try { _EL_         DeviceIoControlGetReparsePoint(handle,reparseBuffer.address(),size); _EL_         reparseTag=(int)unsafe.getLong(reparseBuffer.address()); _EL_       } _EL_   finally { _EL_         reparseBuffer.release(); _EL_       } _EL_     } _EL_     return fromFileInformation(address,reparseTag); _EL_   } _EL_   finally { _EL_     buffer.release(); _EL_   } _EL_ } _EL_ ', 'public void addPortToAlreadyAllocatedContext(StoragePort port,StorageHADomain haDomain,StorageSystem.Type arrayType,String switchName){ _EL_   String engine=getEngine(port,haDomain,arrayType); _EL_   if (engine != null) { _EL_     _alreadyAllocatedEngines.add(engine); _EL_   } _EL_   String directorType=getDirectorType(arrayType,haDomain); _EL_   if (directorType != null) { _EL_     _alreadyAllocatedDirectorTypes.add(directorType); _EL_   } _EL_   String director=getDirector(port,haDomain); _EL_   if (director != null) { _EL_     _alreadyAllocatedDirectors.add(director); _EL_   } _EL_   String cpu=getCpu(port,haDomain,arrayType); _EL_   if (cpu != null) { _EL_     _alreadyAllocatedCpus.add(cpu); _EL_   } _EL_   if (switchName != null) { _EL_     _alreadyAllocatedSwitches.add(switchName); _EL_   } _EL_ } _EL_ ', '@Override public boolean onTouchEvent(MotionEvent event){ _EL_   if (!isEnabled())   return false; _EL_   int pointerIndex; _EL_   final int action=event.getAction(); _EL_ switch (action & MotionEvent.ACTION_MASK) { _EL_ case MotionEvent.ACTION_DOWN: _EL_     mActivePointerId=event.getPointerId(event.getPointerCount() - 1); _EL_   pointerIndex=event.findPointerIndex(mActivePointerId); _EL_ mDownMotionX=event.getX(pointerIndex); _EL_ pressedThumb=evalPressedThumb(mDownMotionX); _EL_ if (pressedThumb == null) return super.onTouchEvent(event); _EL_ setPressed(true); _EL_ invalidate(); _EL_ onStartTrackingTouch(); _EL_ trackTouchEvent(event); _EL_ attemptClaimDrag(); _EL_ break; _EL_ case MotionEvent.ACTION_MOVE: _EL_ if (pressedThumb != null) { _EL_ if (mIsDragging) { _EL_ trackTouchEvent(event); _EL_ } _EL_  else { _EL_ pointerIndex=event.findPointerIndex(mActivePointerId); _EL_ final float x=event.getX(pointerIndex); _EL_ if (Math.abs(x - mDownMotionX) > mScaledTouchSlop) { _EL_ setPressed(true); _EL_ invalidate(); _EL_ onStartTrackingTouch(); _EL_ trackTouchEvent(event); _EL_ attemptClaimDrag(); _EL_ } _EL_ } _EL_ if (notifyWhileDragging && listener != null) { _EL_ listener.onRangeSeekBarValuesChanged(this,getSelectedMinValue(),getSelectedMaxValue()); _EL_ } _EL_ } _EL_ break; _EL_ case MotionEvent.ACTION_UP: _EL_ if (mIsDragging) { _EL_ trackTouchEvent(event); _EL_ onStopTrackingTouch(); _EL_ setPressed(false); _EL_ } _EL_  else { _EL_ onStartTrackingTouch(); _EL_ trackTouchEvent(event); _EL_ onStopTrackingTouch(); _EL_ } _EL_ pressedThumb=null; _EL_ invalidate(); _EL_ if (listener != null) { _EL_ listener.onRangeSeekBarValuesChanged(this,getSelectedMinValue(),getSelectedMaxValue()); _EL_ } _EL_ break; _EL_ case MotionEvent.ACTION_POINTER_DOWN: _EL_ { _EL_ final int index=event.getPointerCount() - 1; _EL_ mDownMotionX=event.getX(index); _EL_ mActivePointerId=event.getPointerId(index); _EL_ invalidate(); _EL_ break; _EL_ } _EL_ case MotionEvent.ACTION_POINTER_UP: _EL_ onSecondaryPointerUp(event); _EL_ invalidate(); _EL_ break; _EL_ case MotionEvent.ACTION_CANCEL: _EL_ if (mIsDragging) { _EL_ onStopTrackingTouch(); _EL_ setPressed(false); _EL_ } _EL_ invalidate(); _EL_ break; _EL_ } _EL_ return true; _EL_ } _EL_ ', 'private static IAbstractNode convertOr(final CommonTree ast) throws RecognitionException { _EL_   final List<IAbstractNode> children=new ArrayList<IAbstractNode>(); _EL_   for (  final Object childObject : ast.getChildren()) { _EL_     children.add(convert((CommonTree)childObject)); _EL_   } _EL_   return new CAbstractOrExpression(children); _EL_ } _EL_ ', 'protected void parseCommand(final String... args){ _EL_   for (  String arg : args) { _EL_     final Command command=Command.valueOfName(arg); _EL_     if (command != null) { _EL_       setCommand(command); _EL_       break; _EL_     } _EL_   } _EL_ } _EL_ ', 'private void loadOrgAccessRole(ArrayList<OrgAccess> list){ _EL_   PreparedStatement pstmt=null; _EL_   ResultSet rs=null; _EL_   String sql="SELECT * FROM AD_Role_OrgAccess " + "WHERE AD_Role_ID=? AND IsActive=\'Y\'"; _EL_   try { _EL_     pstmt=DB.prepareStatement(sql,get_TrxName()); _EL_     pstmt.setInt(1,getAD_Role_ID()); _EL_     rs=pstmt.executeQuery(); _EL_     while (rs.next()) { _EL_       MRoleOrgAccess oa=new MRoleOrgAccess(getCtx(),rs,get_TrxName()); _EL_       loadOrgAccessAdd(list,new OrgAccess(oa.getAD_Client_ID(),oa.getAD_Org_ID(),oa.isReadOnly())); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     log.log(Level.SEVERE,sql,e); _EL_   } _EL_  finally { _EL_     DB.close(rs,pstmt); _EL_   } _EL_ } _EL_ ', '@SuppressWarnings("unchecked") private void expungeStaleEntries(){ _EL_ synchronized (sync) { _EL_     ListWeakReference r; _EL_     while ((r=(ListWeakReference)queue.poll()) != null) { _EL_       ListEntry le=r.getListEntry(); _EL_       int i=list.indexOf(le); _EL_       if (i != -1) { _EL_         list.remove(i); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'void deriveConfidenceValue(double baseCount){ _EL_   if (Utils.isMissingValue(m_confidence) && !Utils.isMissingValue(baseCount) && baseCount > 0) { _EL_     m_confidence=m_recordCount / baseCount; _EL_   } _EL_ } _EL_ ', 'public ModifiableSolrParams add(String name,String... val){ _EL_   String[] old=vals.put(name,val); _EL_   if (old != null) { _EL_     if (val == null || val.length < 1) { _EL_       String[] both=new String[old.length + 1]; _EL_       System.arraycopy(old,0,both,0,old.length); _EL_       both[old.length]=null; _EL_       vals.put(name,both); _EL_     } _EL_  else { _EL_       String[] both=new String[old.length + val.length]; _EL_       System.arraycopy(old,0,both,0,old.length); _EL_       System.arraycopy(val,0,both,old.length,val.length); _EL_       vals.put(name,both); _EL_     } _EL_   } _EL_   return this; _EL_ } _EL_ ', 'private AStarNode jump(int nextX,int nextY,int nextZ,int px,int pz){ _EL_   int y=nextY; _EL_   int dist=currentNode.getG() + (Math.abs(nextX - currentNode.x) + Math.abs(y - currentNode.y) + Math.abs(nextZ - currentNode.z)); _EL_   int dx=nextX - px; _EL_   int dz=nextZ - pz; _EL_   int py=y; _EL_   y=getGroundNodeHeight(nextX,py,nextZ); _EL_   if (y == 0) { _EL_     return null; _EL_   } _EL_  else   if (targetNode.x == nextX && targetNode.z == nextZ && targetNode.y == y || dist >= MAX_SKIP_DISTANCE) { _EL_     return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode); _EL_   } _EL_   int nxY=(dx != 0) ? getGroundNodeHeight(nextX + dx,y,nextZ) : 0; _EL_   int nzY=(dz != 0) ? getGroundNodeHeight(nextX,y,nextZ + dz) : 0; _EL_   if (dx != 0 && dz != 0) { _EL_     if ((getGroundNodeHeight(nextX - dx,y,nextZ + dz) != 0 && getGroundNodeHeight(nextX - dx,py,nextZ) == 0) || (getGroundNodeHeight(nextX + dx,y,nextZ - dz) != 0 && getGroundNodeHeight(nextX,py,nextZ - dz) == 0)) { _EL_       return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode); _EL_     } _EL_   } _EL_  else { _EL_     if (dx != 0) { _EL_       if (nxY != y || (getGroundNodeHeight(nextX,y,nextZ + 1) == 0 && getGroundNodeHeight(nextX + dx,nxY,nextZ + 1) != 0) || (getGroundNodeHeight(nextX,y,nextZ - 1) == 0 && getGroundNodeHeight(nextX + dx,nxY,nextZ - 1) != 0)) { _EL_         return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode); _EL_       } _EL_     } _EL_  else { _EL_       if (nzY != y || (getGroundNodeHeight(nextX + 1,y,nextZ) == 0 && getGroundNodeHeight(nextX + 1,nzY,nextZ + dz) != 0) || (getGroundNodeHeight(nextX - 1,y,nextZ) == 0 && getGroundNodeHeight(nextX - 1,nzY,nextZ + dz) != 0)) { _EL_         return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode); _EL_       } _EL_     } _EL_   } _EL_   if (dx != 0 && dz != 0) { _EL_     AStarNode jx=jump(nextX + dx,y,nextZ,nextX,nextZ); _EL_     AStarNode jy=jump(nextX,y,nextZ + dz,nextX,nextZ); _EL_     if (jx != null || jy != null) { _EL_       return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode); _EL_     } _EL_   } _EL_   if (nxY != 0 || nzY != 0) { _EL_     return jump(nextX + dx,y,nextZ + dz,nextX,nextZ); _EL_   } _EL_  else { _EL_     return null; _EL_   } _EL_ } _EL_ ', 'private void fetchMetadata(TableMapLogEvent tableEvent) throws SQLException, ReplicatorException { _EL_   if (metadataCache == null)   metadataCache=new TableMetadataCache(5000); _EL_   Table table=metadataCache.retrieve(tableEvent.getDatabaseName(),tableEvent.getTableName()); _EL_   if (table == null || table.getTableId() != tableEvent.getTableId()) { _EL_     prepareMetadataConnection(); _EL_     table=metadataConnection.findTable(tableEvent.getDatabaseName(),tableEvent.getTableName(),false); _EL_     if (table != null) { _EL_       table.setTableId(tableEvent.getTableId()); _EL_       metadataCache.store(table); _EL_     } _EL_   } _EL_  else   if (logger.isDebugEnabled())   logger.debug("Table " + tableEvent.getDatabaseName() + "."+ tableEvent.getTableName()+ " found in cache."); _EL_   if (table == null) { _EL_     logger.warn("No metadata found for table " + tableEvent.getDatabaseName() + "."+ tableEvent.getTableName()); _EL_   } _EL_  else { _EL_     tableEvent.setTable(table); _EL_   } _EL_ } _EL_ ', 'static void checkTypeRefAndPath(int typeRef,TypePath typePath){ _EL_   int mask=0; _EL_ switch (typeRef >>> 24) { _EL_ case TypeReference.CLASS_TYPE_PARAMETER: _EL_ case TypeReference.METHOD_TYPE_PARAMETER: _EL_ case TypeReference.METHOD_FORMAL_PARAMETER: _EL_     mask=0xFFFF0000; _EL_   break; _EL_ case TypeReference.FIELD: _EL_ case TypeReference.METHOD_RETURN: _EL_ case TypeReference.METHOD_RECEIVER: _EL_ case TypeReference.LOCAL_VARIABLE: _EL_ case TypeReference.RESOURCE_VARIABLE: _EL_ case TypeReference.INSTANCEOF: _EL_ case TypeReference.NEW: _EL_ case TypeReference.CONSTRUCTOR_REFERENCE: _EL_ case TypeReference.METHOD_REFERENCE: _EL_ mask=0xFF000000; _EL_ break; _EL_ case TypeReference.CLASS_EXTENDS: _EL_ case TypeReference.CLASS_TYPE_PARAMETER_BOUND: _EL_ case TypeReference.METHOD_TYPE_PARAMETER_BOUND: _EL_ case TypeReference.THROWS: _EL_ case TypeReference.EXCEPTION_PARAMETER: _EL_ mask=0xFFFFFF00; _EL_ break; _EL_ case TypeReference.CAST: _EL_ case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT: _EL_ case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT: _EL_ case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT: _EL_ case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT: _EL_ mask=0xFF0000FF; _EL_ break; _EL_ default : _EL_ throw new IllegalArgumentException("Invalid type reference sort 0x" + Integer.toHexString(typeRef >>> 24)); _EL_ } _EL_ if ((typeRef & ~mask) != 0) { _EL_ throw new IllegalArgumentException("Invalid type reference 0x" + Integer.toHexString(typeRef)); _EL_ } _EL_ if (typePath != null) { _EL_ for (int i=0; i < typePath.getLength(); ++i) { _EL_ int step=typePath.getStep(i); _EL_ if (step != TypePath.ARRAY_ELEMENT && step != TypePath.INNER_TYPE && step != TypePath.TYPE_ARGUMENT && step != TypePath.WILDCARD_BOUND) { _EL_ throw new IllegalArgumentException("Invalid type path step " + i + " in "+ typePath); _EL_ } _EL_ if (step != TypePath.TYPE_ARGUMENT && typePath.getStepArgument(i) != 0) { _EL_ throw new IllegalArgumentException("Invalid type path step argument for step " + i + " in "+ typePath); _EL_ } _EL_ } _EL_ } _EL_ } _EL_ ', 'private void subFormat(int patternCharIndex,int count,FieldDelegate delegate,StringBuffer buffer,boolean useDateFormatSymbols){ _EL_   int maxIntCount=Integer.MAX_VALUE; _EL_   String current=null; _EL_   int beginOffset=buffer.length(); _EL_   int field=PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex]; _EL_   int value; _EL_   if (field == CalendarBuilder.WEEK_YEAR) { _EL_     if (calendar.isWeekDateSupported()) { _EL_       value=calendar.getWeekYear(); _EL_     } _EL_  else { _EL_       patternCharIndex=PATTERN_YEAR; _EL_       field=PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex]; _EL_       value=calendar.get(field); _EL_     } _EL_   } _EL_  else   if (field == CalendarBuilder.ISO_DAY_OF_WEEK) { _EL_     value=CalendarBuilder.toISODayOfWeek(calendar.get(Calendar.DAY_OF_WEEK)); _EL_   } _EL_  else { _EL_     value=calendar.get(field); _EL_   } _EL_   int style=(count >= 4) ? Calendar.LONG : Calendar.SHORT; _EL_   if (!useDateFormatSymbols && field < Calendar.ZONE_OFFSET && patternCharIndex != PATTERN_MONTH_STANDALONE) { _EL_     current=calendar.getDisplayName(field,style,locale); _EL_   } _EL_ switch (patternCharIndex) { _EL_ case PATTERN_ERA: _EL_     if (useDateFormatSymbols) { _EL_       String[] eras=formatData.getEras(); _EL_       if (value < eras.length) { _EL_         current=eras[value]; _EL_       } _EL_     } _EL_   if (current == null) { _EL_     current=""; _EL_   } _EL_ break; _EL_ case PATTERN_WEEK_YEAR: _EL_ case PATTERN_YEAR: _EL_ if (calendar instanceof GregorianCalendar) { _EL_ if (count != 2) { _EL_   zeroPaddingNumber(value,count,maxIntCount,buffer); _EL_ } _EL_  else { _EL_   zeroPaddingNumber(value,2,2,buffer); _EL_ } _EL_ } _EL_  else { _EL_ if (current == null) { _EL_   zeroPaddingNumber(value,style == Calendar.LONG ? 1 : count,maxIntCount,buffer); _EL_ } _EL_ } _EL_ break; _EL_ case PATTERN_MONTH: _EL_ if (useDateFormatSymbols) { _EL_ String[] months; _EL_ if (count >= 4) { _EL_ months=formatData.getMonths(); _EL_ current=months[value]; _EL_ } _EL_  else if (count == 3) { _EL_ months=formatData.getShortMonths(); _EL_ current=months[value]; _EL_ } _EL_ } _EL_  else { _EL_ if (count < 3) { _EL_ current=null; _EL_ } _EL_  else if (forceStandaloneForm) { _EL_ current=calendar.getDisplayName(field,style | 0x8000,locale); _EL_ if (current == null) { _EL_ current=calendar.getDisplayName(field,style,locale); _EL_ } _EL_ } _EL_ } _EL_ if (current == null) { _EL_ zeroPaddingNumber(value + 1,count,maxIntCount,buffer); _EL_ } _EL_ break; _EL_ case PATTERN_MONTH_STANDALONE: _EL_ assert current == null; _EL_ if (locale == null) { _EL_ String[] months; _EL_ if (count >= 4) { _EL_ months=formatData.getMonths(); _EL_ current=months[value]; _EL_ } _EL_  else if (count == 3) { _EL_ months=formatData.getShortMonths(); _EL_ current=months[value]; _EL_ } _EL_ } _EL_  else { _EL_ if (count >= 3) { _EL_ current=calendar.getDisplayName(field,style | 0x8000,locale); _EL_ } _EL_ } _EL_ if (current == null) { _EL_ zeroPaddingNumber(value + 1,count,maxIntCount,buffer); _EL_ } _EL_ break; _EL_ case PATTERN_HOUR_OF_DAY1: _EL_ if (current == null) { _EL_ if (value == 0) { _EL_ zeroPaddingNumber(calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1,count,maxIntCount,buffer); _EL_ } _EL_  else { _EL_ zeroPaddingNumber(value,count,maxIntCount,buffer); _EL_ } _EL_ } _EL_ break; _EL_ case PATTERN_DAY_OF_WEEK: _EL_ if (useDateFormatSymbols) { _EL_ String[] weekdays; _EL_ if (count >= 4) { _EL_ weekdays=formatData.getWeekdays(); _EL_ current=weekdays[value]; _EL_ } _EL_  else { _EL_ weekdays=formatData.getShortWeekdays(); _EL_ current=weekdays[value]; _EL_ } _EL_ } _EL_ break; _EL_ case PATTERN_AM_PM: _EL_ if (useDateFormatSymbols) { _EL_ String[] ampm=formatData.getAmPmStrings(); _EL_ current=ampm[value]; _EL_ } _EL_ break; _EL_ case PATTERN_HOUR1: _EL_ if (current == null) { _EL_ if (value == 0) { _EL_ zeroPaddingNumber(calendar.getLeastMaximum(Calendar.HOUR) + 1,count,maxIntCount,buffer); _EL_ } _EL_  else { _EL_ zeroPaddingNumber(value,count,maxIntCount,buffer); _EL_ } _EL_ } _EL_ break; _EL_ case PATTERN_ZONE_NAME: _EL_ if (current == null) { _EL_ if (formatData.locale == null || formatData.isZoneStringsSet) { _EL_ int zoneIndex=formatData.getZoneIndex(calendar.getTimeZone().getID()); _EL_ if (zoneIndex == -1) { _EL_ value=calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET); _EL_ buffer.append(ZoneInfoFile.toCustomID(value)); _EL_ } _EL_  else { _EL_ int index=(calendar.get(Calendar.DST_OFFSET) == 0) ? 1 : 3; _EL_ if (count < 4) { _EL_ index++; _EL_ } _EL_ String[][] zoneStrings=formatData.getZoneStringsWrapper(); _EL_ buffer.append(zoneStrings[zoneIndex][index]); _EL_ } _EL_ } _EL_  else { _EL_ TimeZone tz=calendar.getTimeZone(); _EL_ boolean daylight=(calendar.get(Calendar.DST_OFFSET) != 0); _EL_ int tzstyle=(count < 4 ? TimeZone.SHORT : TimeZone.LONG); _EL_ buffer.append(tz.getDisplayName(daylight,tzstyle,formatData.locale)); _EL_ } _EL_ } _EL_ break; _EL_ case PATTERN_ZONE_VALUE: _EL_ value=(calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET)) / 60000; _EL_ int width=4; _EL_ if (value >= 0) { _EL_ buffer.append(\'+\'); _EL_ } _EL_  else { _EL_ width++; _EL_ } _EL_ int num=(value / 60) * 100 + (value % 60); _EL_ CalendarUtils.sprintf0d(buffer,num,width); _EL_ break; _EL_ case PATTERN_ISO_ZONE: _EL_ value=calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET); _EL_ if (value == 0) { _EL_ buffer.append(\'Z\'); _EL_ break; _EL_ } _EL_ value/=60000; _EL_ if (value >= 0) { _EL_ buffer.append(\'+\'); _EL_ } _EL_  else { _EL_ buffer.append(\'-\'); _EL_ value=-value; _EL_ } _EL_ CalendarUtils.sprintf0d(buffer,value / 60,2); _EL_ if (count == 1) { _EL_ break; _EL_ } _EL_ if (count == 3) { _EL_ buffer.append(\':\'); _EL_ } _EL_ CalendarUtils.sprintf0d(buffer,value % 60,2); _EL_ break; _EL_ default : _EL_ if (current == null) { _EL_ zeroPaddingNumber(value,count,maxIntCount,buffer); _EL_ } _EL_ break; _EL_ } _EL_ if (current != null) { _EL_ buffer.append(current); _EL_ } _EL_ int fieldID=PATTERN_INDEX_TO_DATE_FORMAT_FIELD[patternCharIndex]; _EL_ Field f=PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID[patternCharIndex]; _EL_ delegate.formatted(fieldID,f,f,beginOffset,buffer.length(),buffer); _EL_ } _EL_ ', 'private void removeAllObjects(){ _EL_   logger.debug("CLEANING screen object list"); _EL_   texts.clear(); _EL_ } _EL_ ', 'private boolean validateCooldownSetting(String appId,AutoScalerPolicyTrigger policyTrigger,String triggerId){ _EL_   AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore(); _EL_   AppAutoScaleState appState=null; _EL_   appState=stateStore.getScalingState(appId); _EL_   if (appState == null) { _EL_     return true; _EL_   } _EL_  else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) { _EL_     long lastStartTime=appState.getLastActionStartTime(); _EL_     long currentTime=System.currentTimeMillis(); _EL_     boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout; _EL_     if (timeExpired) { _EL_       logger.debug("True: Last scaling action is not completed but it\'s time expired for application " + appId + "."); _EL_       return true; _EL_     } _EL_     logger.debug("False: Last scaling action is not completed for application " + appId + "."); _EL_     return false; _EL_   } _EL_  else { _EL_     long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(policyTrigger,triggerId); _EL_     if (System.currentTimeMillis() < cooldownEndtime) { _EL_       logger.debug("False: It\'s cooldown time for application " + appId + ". No scaling in action."); _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', 'protected void createFromHValues(int[] hValues,int partitions){ _EL_   Arrays.sort(hValues); _EL_   this.splits=new int[partitions]; _EL_   int maxH=0x7fffffff; _EL_   for (int i=0; i < splits.length; i++) { _EL_     int quantile=(int)((long)(i + 1) * hValues.length / partitions); _EL_     this.splits[i]=quantile == hValues.length ? maxH : hValues[quantile]; _EL_   } _EL_ } _EL_ ', '@HLEFunction(nid=0xD1E0A01E,version=150,checkInsideInterrupt=true) public int __sceSasSetGrain(int sasCore,int grain){ _EL_   checkSasHandleGood(sasCore); _EL_   grainSamples=grain; _EL_   return 0; _EL_ } _EL_ ', 'public PutIndexTemplateRequest aliases(XContentBuilder source){ _EL_   return aliases(source.bytes()); _EL_ } _EL_ ', 'public final byte[] update(byte[] input){ _EL_   if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) { _EL_     throw new IllegalStateException(); _EL_   } _EL_   if (input == null) { _EL_     throw new IllegalArgumentException("input == null"); _EL_   } _EL_   if (input.length == 0) { _EL_     return null; _EL_   } _EL_   return spiImpl.engineUpdate(input,0,input.length); _EL_ } _EL_ ', 'protected Value parseValue() throws IOException, RDFParseException, RDFHandlerException { _EL_   int c=peekCodePoint(); _EL_   if (c == \'<\') { _EL_     return parseURI(); _EL_   } _EL_  else   if (c == \':\' || TurtleUtil.isPrefixStartChar(c)) { _EL_     return parseQNameOrBoolean(); _EL_   } _EL_  else   if (c == \'_\') { _EL_     return parseNodeID(); _EL_   } _EL_  else   if (c == \'"\' || c == \'\\\'\') { _EL_     return parseQuotedLiteral(); _EL_   } _EL_  else   if (ASCIIUtil.isNumber(c) || c == \'.\' || c == \'+\' || c == \'-\') { _EL_     return parseNumber(); _EL_   } _EL_  else   if (c == -1) { _EL_     throwEOFException(); _EL_     return null; _EL_   } _EL_  else { _EL_     reportFatalError("Expected an RDF value here, found \'" + new String(Character.toChars(c)) + "\'"); _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public Identity(final int dim){ _EL_   this(dim,EnumSet.noneOf(Address.Flags.class)); _EL_ } _EL_ ', 'public DiskStoreFactory createDiskStoreFactory(){ _EL_   return new DiskStoreFactoryImpl(this); _EL_ } _EL_ ', 'public SecureELFFormatter(){ _EL_   String timestampGeneratorClass=lmanager.getProperty(LogConstants.SECURE_TIMESTAMP_GENERATOR); _EL_   try { _EL_     Class clz=Class.forName(timestampGeneratorClass); _EL_     secureTimestampGenerator=(ITimestampGenerator)clz.newInstance(); _EL_   } _EL_  catch (  ClassNotFoundException cnfe) { _EL_     Debug.error("SecureELFFormatter: TimeStamp Generator Class " + "not found",cnfe); _EL_   } _EL_ catch (  InstantiationException ie) { _EL_     Debug.error("SecureELFFormatter: Timestamp Generator Could " + "not be Instantiated",ie); _EL_   } _EL_ catch (  IllegalAccessException iae) { _EL_     Debug.error("SecureELFFormatter: Timestamp Generator Could " + "not be Instantiated",iae); _EL_   } _EL_ } _EL_ ', 'private MarshalledWrapper lookupDo(Template tmpl){ _EL_   if (isEmpty(tmpl.serviceTypes) || tmpl.serviceID != null) { _EL_     ItemIter iter=matchingItems(tmpl); _EL_     if (iter.hasNext())     return iter.next().service; _EL_     return null; _EL_   } _EL_   List services=matchingServices(tmpl.serviceTypes); _EL_   long now=System.currentTimeMillis(); _EL_   int slen=services.size(); _EL_   if (slen == 0)   return null; _EL_   int srand=Math.abs(random.nextInt() % slen); _EL_   for (int i=0; i < slen; i++) { _EL_     SvcReg reg=(SvcReg)services.get((i + srand) % slen); _EL_     if (reg.leaseExpiration > now && matchAttributes(tmpl,reg.item))     return reg.item.service; _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static void delete(Path path){ _EL_   if (path != null) { _EL_     path=path.toAbsolutePath(); _EL_     if (inTargetDir(path)) { _EL_       try { _EL_         IoUtil.delete(path); _EL_       } _EL_  catch (      IOException e) { _EL_         printError("Unable to remove \'" + path.toAbsolutePath() + "\'",e); _EL_       } _EL_     } _EL_  else { _EL_       printError("Will not remove directory that is outside test target area: " + path); _EL_     } _EL_   } _EL_ } _EL_ ', 'private Vector<SnmpVarBind> splitFrom(Vector<SnmpVarBind> original,int limit){ _EL_   int max=original.size(); _EL_   Vector<SnmpVarBind> result=new Vector<>(max - limit); _EL_   int i=limit; _EL_   for (Enumeration<SnmpVarBind> e=original.elements(); e.hasMoreElements(); --i) { _EL_     SnmpVarBind var=e.nextElement(); _EL_     if (i > 0)     continue; _EL_     result.addElement(new SnmpVarBind(var.oid,var.value)); _EL_   } _EL_   return result; _EL_ } _EL_ ', 'public static void initUrbanSimZoneWriter(Config config){ _EL_   UrbanSimParameterConfigModuleV3 module=(UrbanSimParameterConfigModuleV3)config.getModule(UrbanSimParameterConfigModuleV3.GROUP_NAME); _EL_   try { _EL_     log.info("Initializing UrbanSimParcelCSVWriter ..."); _EL_     parcelWriter=IOUtils.getBufferedWriter(module.getMATSim4OpusTemp() + FILE_NAME); _EL_     log.info("Writing data into " + module.getMATSim4OpusTemp() + FILE_NAME+ " ..."); _EL_     parcelWriter.write(InternalConstants.PARCEL_ID + "," + ACCESSIBILITY_BY_FREESPEED+ ","+ ACCESSIBILITY_BY_CAR+ ","+ ACCESSIBILITY_BY_BIKE+ ","+ ACCESSIBILITY_BY_WALK+ ","+ ACCESSIBILITY_BY_PT); _EL_     parcelWriter.newLine(); _EL_     log.info("... done!"); _EL_   } _EL_  catch (  Exception e) { _EL_     e.printStackTrace(); _EL_   } _EL_ } _EL_ ', "private void consumeCRLF() throws DecodingException { _EL_   char next=nextChar(); _EL_   if (next != '\\n') { _EL_     consumeChar('\\r'); _EL_   } _EL_   consumeChar('\\n'); _EL_ } _EL_ ", 'public boolean isLandingPage(URL url){ _EL_   if (url.getQuery() != null) { _EL_     return false; _EL_   } _EL_  else { _EL_     return landingPageSuffix(url) != ""; _EL_   } _EL_ } _EL_ ', 'public void init(){ _EL_   _tokenMgmtExecutor.scheduleWithFixedDelay(new ExpiredTokenCleaner(),1,_maxLifeValuesHolder.getMaxTokenIdleTimeInMins(),TimeUnit.MINUTES); _EL_   _tokenMgmtExecutor.scheduleWithFixedDelay(new TokenKeysUpdater(),1,FOREIGN_TOKEN_KEYS_BUNDLE_REFRESH_RATE_IN_MINS,TimeUnit.MINUTES); _EL_ } _EL_ ', 'public final int hashCode(){ _EL_   return System.identityHashCode(this); _EL_ } _EL_ ', 'public ScriptBuilder data(byte[] data){ _EL_   if (data.length == 0)   return smallNum(0); _EL_  else   return data(chunks.size(),data); _EL_ } _EL_ ', 'public void findPackageAndClass() throws IOException { _EL_   packageName=null; _EL_   className=null; _EL_   LineNumberReader reader=new LineNumberReader(new FileReader(inputFile)); _EL_   try { _EL_     while (className == null || packageName == null) { _EL_       String line=reader.readLine(); _EL_       if (line == null)       break; _EL_       if (packageName == null) { _EL_         Matcher matcher=PACKAGE_PATTERN.matcher(line); _EL_         if (matcher.find()) { _EL_           packageName=matcher.group(1); _EL_         } _EL_       } _EL_       if (className == null) { _EL_         Matcher matcher=CLASS_PATTERN.matcher(line); _EL_         if (matcher.find()) { _EL_           className=matcher.group(1); _EL_         } _EL_       } _EL_     } _EL_     if (className == null) { _EL_       className="Yylex"; _EL_     } _EL_   } _EL_   finally { _EL_     reader.close(); _EL_   } _EL_ } _EL_ ', 'public static Set<URI> fetchRPTargetVirtualPools(DbClient dbClient){ _EL_   Set<URI> rpProtectedTargetVPools=new HashSet<URI>(); _EL_   try { _EL_     List<URI> vpoolProtectionSettingsURIs=dbClient.queryByType(VpoolProtectionVarraySettings.class,true); _EL_     Iterator<VpoolProtectionVarraySettings> vPoolProtectionSettingsItr=dbClient.queryIterativeObjects(VpoolProtectionVarraySettings.class,vpoolProtectionSettingsURIs,true); _EL_     while (vPoolProtectionSettingsItr.hasNext()) { _EL_       VpoolProtectionVarraySettings rSetting=vPoolProtectionSettingsItr.next(); _EL_       if (null != rSetting && !NullColumnValueGetter.isNullURI(rSetting.getVirtualPool())) { _EL_         rpProtectedTargetVPools.add(rSetting.getVirtualPool()); _EL_       } _EL_     } _EL_   } _EL_  catch (  Exception ex) { _EL_     _log.error("Exception occurred while fetching RP enabled virtualpools",ex); _EL_   } _EL_   return rpProtectedTargetVPools; _EL_ } _EL_ ', 'public void run(){ _EL_   start(); _EL_   try { _EL_     while (true) { _EL_       Thread.sleep(interval); _EL_       processConfigMessages(); _EL_     } _EL_   } _EL_  catch (  InterruptedException e) { _EL_     e.printStackTrace(); _EL_     log.warn("Got interrupt in config manager thread, so shutting down"); _EL_   } _EL_  finally { _EL_     log.info("Stopping the config manager"); _EL_     stop(); _EL_   } _EL_ } _EL_ ', 'public CompletableFuture<NewFile> run(){ _EL_   LOG.log(Level.FINE,"starting optimized file creation for {0} files",files.size()); _EL_   CompletableFuture<NewFile> fileCreation=new CompletableFuture<>(); _EL_   final List<TSData> fjpFiles=this.files; _EL_   TASK_POOL.execute(null); _EL_ synchronized (OUTSTANDING) { _EL_     OUTSTANDING.add(fileCreation); _EL_   } _EL_   this.files=new LinkedList<>(); _EL_   return fileCreation; _EL_ } _EL_ ', 'public void omitLessFreq(){ _EL_   if (name == null)   return; _EL_   int threshold=n_words[0] / LESS_FREQ_RATIO; _EL_   if (threshold < MINIMUM_FREQ)   threshold=MINIMUM_FREQ; _EL_   Set<String> keys=freq.keySet(); _EL_   int roman=0; _EL_   for (Iterator<String> i=keys.iterator(); i.hasNext(); ) { _EL_     String key=i.next(); _EL_     int count=freq.get(key); _EL_     if (count <= threshold) { _EL_       n_words[key.length() - 1]-=count; _EL_       i.remove(); _EL_     } _EL_  else { _EL_       if (key.matches("^[A-Za-z]$")) { _EL_         roman+=count; _EL_       } _EL_     } _EL_   } _EL_   if (roman < n_words[0] / 3) { _EL_     Set<String> keys2=freq.keySet(); _EL_     for (Iterator<String> i=keys2.iterator(); i.hasNext(); ) { _EL_       String key=i.next(); _EL_       if (key.matches(".*[A-Za-z].*")) { _EL_         n_words[key.length() - 1]-=freq.get(key); _EL_         i.remove(); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'boolean isStateChange(XDecoratedPeer window,XPropertyEvent e){ _EL_   if (!window.isShowing()) { _EL_     stateLog.finer("Window is not showing"); _EL_     return false; _EL_   } _EL_   int wm_state=window.getWMState(); _EL_   if (wm_state == XUtilConstants.WithdrawnState) { _EL_     stateLog.finer("WithdrawnState"); _EL_     return false; _EL_   } _EL_  else { _EL_     if (stateLog.isLoggable(PlatformLogger.Level.FINER)) { _EL_       stateLog.finer("Window WM_STATE is " + wm_state); _EL_     } _EL_   } _EL_   boolean is_state_change=false; _EL_   if (e.get_atom() == XA_WM_STATE.getAtom()) { _EL_     is_state_change=true; _EL_   } _EL_   for (  XStateProtocol proto : getProtocols(XStateProtocol.class)) { _EL_     is_state_change|=proto.isStateChange(e); _EL_     if (stateLog.isLoggable(PlatformLogger.Level.FINEST)) { _EL_       stateLog.finest(proto + ": is state changed = " + is_state_change); _EL_     } _EL_   } _EL_   return is_state_change; _EL_ } _EL_ ', 'private void validateDnsName(String dnsName) throws PolicyException { _EL_   int starIndex=dnsName.indexOf("*"); _EL_   if ((starIndex >= 0) && !dnsName.equals("*")) { _EL_     if ((starIndex > 0) || ((starIndex == 0) && ((dnsName.indexOf("*",1) != -1) || (dnsName.charAt(1) != \'.\')))) { _EL_       String args[]={DNS_NAME,dnsName}; _EL_       throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void startPlayback(){ _EL_   Log.d(TAG,">> startPlayback"); _EL_   if (null == mRecordFile) { _EL_     Log.e(TAG,"no file to playback!"); _EL_     return; _EL_   } _EL_   mPlayer=new MediaPlayer(); _EL_   try { _EL_     mPlayer.setDataSource(mRecordFile.getAbsolutePath()); _EL_     Log.d(TAG,"MediaPlayer.setDataSource(" + mRecordFile.getAbsolutePath() + ")"); _EL_     mPlayer.setOnCompletionListener(this); _EL_     mPlayer.setOnErrorListener(this); _EL_     mPlayer.prepare(); _EL_     Log.d(TAG,"MediaPlayer.prepare()"); _EL_     mPlayer.start(); _EL_   } _EL_  catch (  IOException e) { _EL_     Log.e(TAG,"Exception while trying to playback recording file: " + e); _EL_     setError(ERROR_PLAYER_INTERNAL); _EL_     return; _EL_   } _EL_ catch (  IllegalArgumentException e) { _EL_     Log.e(TAG,"Exception while trying to playback recording file: " + e); _EL_     setError(ERROR_PLAYER_INTERNAL); _EL_     return; _EL_   } _EL_ catch (  SecurityException e) { _EL_     Log.e(TAG,"Exception while trying to playback recording file: " + e); _EL_     setError(ERROR_PLAYER_INTERNAL); _EL_     return; _EL_   } _EL_ catch (  IllegalStateException e) { _EL_     Log.e(TAG,"Exception while trying to playback recording file: " + e); _EL_     setError(ERROR_PLAYER_INTERNAL); _EL_     return; _EL_   } _EL_   setState(STATE_PLAYBACK); _EL_   Log.d(TAG,"<< startPlayback"); _EL_ } _EL_ ', 'public boolean addTagId(final Long tagId){ _EL_   if (tagId != null && tagId > 0) { _EL_     return tagIds.add(tagId); _EL_   } _EL_   return false; _EL_ } _EL_ ', "@Override public final void startElement(final String ns,final String lName,final String qName,final Attributes list) throws SAXException { _EL_   String name=lName == null || lName.length() == 0 ? qName : lName; _EL_   StringBuffer sb=new StringBuffer(match); _EL_   if (match.length() > 0) { _EL_     sb.append('/'); _EL_   } _EL_   sb.append(name); _EL_   match=sb.toString(); _EL_   Rule r=(Rule)RULES.match(match); _EL_   if (r != null) { _EL_     r.begin(name,list); _EL_   } _EL_ } _EL_ ", 'private void createPRWithTotalNumPropSetList(List vmList,int startIndexForRegion,int endIndexForRegion,int localMaxMemory,int redundancy){ _EL_   Iterator nodeIterator=vmList.iterator(); _EL_   while (nodeIterator.hasNext()) { _EL_     VM vm=(VM)nodeIterator.next(); _EL_     vm.invoke(createMultiplePRWithTotalNumBucketPropSet(prPrefix,startIndexForRegion,endIndexForRegion,redundancy,localMaxMemory,11)); _EL_   } _EL_ } _EL_ ', 'public boolean isMultiLineTabbed(){ _EL_   return multiLineTab; _EL_ } _EL_ ', 'protected synchronized T load() throws IOException { _EL_   long genLoaded=-1; _EL_   IOException ioe=null; _EL_   List<String> genFiles=new ArrayList<String>(); _EL_   String[] files; _EL_   try { _EL_     files=dir.listAll(); _EL_   } _EL_  catch (  IOException ioe2) { _EL_     return null; _EL_   } _EL_   T loaded=null; _EL_   for (  String file : files) { _EL_     if (file.startsWith(prefix)) { _EL_       long gen=Long.parseLong(file.substring(prefix.length())); _EL_       if (genLoaded == -1 || gen > genLoaded) { _EL_         genFiles.add(file); _EL_         IndexInput in=dir.openInput(file,IOContext.DEFAULT); _EL_         try { _EL_           loaded=loadOne(in); _EL_         } _EL_  catch (        IOException ioe2) { _EL_           if (ioe == null) { _EL_             ioe=ioe2; _EL_           } _EL_         } _EL_  finally { _EL_           in.close(); _EL_         } _EL_         genLoaded=gen; _EL_       } _EL_     } _EL_   } _EL_   if (genLoaded == -1) { _EL_     if (ioe != null) { _EL_       throw ioe; _EL_     } _EL_   } _EL_  else { _EL_     if (genFiles.size() > 1) { _EL_       String curFileName=prefix + genLoaded; _EL_       for (      String file : genFiles) { _EL_         long gen=Long.parseLong(file.substring(prefix.length())); _EL_         if (canDelete(gen) && !curFileName.equals(file)) { _EL_           dir.deleteFile(file); _EL_         } _EL_       } _EL_     } _EL_     nextWriteGen=1 + genLoaded; _EL_   } _EL_   return loaded; _EL_ } _EL_ ', '@Override public void put(double val){ _EL_   final double nn=this.n + 1.0; _EL_   final double delta=val - m1; _EL_   final double delta_nn=delta / nn; _EL_   final double delta_nn2=delta_nn * delta_nn; _EL_   final double inc=delta * delta_nn * this.n; _EL_   m4+=inc * delta_nn2 * (nn * nn - 3. * nn + 3.) + 6. * delta_nn2 * m2 - 4. * delta_nn * m3; _EL_   m3+=inc * delta_nn * (nn - 2) - 3. * delta_nn * m2; _EL_   m2+=inc; _EL_   m1+=delta_nn; _EL_   n=nn; _EL_   min=Math.min(min,val); _EL_   max=Math.max(max,val); _EL_ } _EL_ ', 'public float dotProduct(DenseVector df){ _EL_   float res=0.0f; _EL_   for (int i=0; i < Math.min(size,df.getLength()); i++) { _EL_     res+=u[i] * df.u[i]; _EL_   } _EL_   return res; _EL_ } _EL_ ', 'public String consumeTo(String seq){ _EL_   int offset=queue.indexOf(seq,pos); _EL_   if (offset != -1) { _EL_     String consumed=queue.substring(pos,offset); _EL_     pos+=consumed.length(); _EL_     return consumed; _EL_   } _EL_  else { _EL_     return remainder(); _EL_   } _EL_ } _EL_ ', 'private List findPhonemes(){ _EL_   Set set=new HashSet(); _EL_   for (int i=0; i < stateMachine.length; i++) { _EL_     if (stateMachine[i] instanceof FinalState) { _EL_       FinalState fstate=(FinalState)stateMachine[i]; _EL_       if (fstate.phoneList != null) { _EL_         for (int j=0; j < fstate.phoneList.length; j++) { _EL_           set.add(fstate.phoneList[j]); _EL_         } _EL_       } _EL_     } _EL_   } _EL_   return new ArrayList(set); _EL_ } _EL_ ', 'TemplateSubPatternAssociation(ElemTemplate template,StepPattern pattern,String pat){ _EL_   m_pattern=pat; _EL_   m_template=template; _EL_   m_stepPattern=pattern; _EL_   m_targetString=m_stepPattern.getTargetString(); _EL_   m_wild=m_targetString.equals("*"); _EL_ } _EL_ ', 'public static void tryFormatSatisfiability(String format) throws IllegalFormatException { _EL_   @SuppressWarnings("unused") String unused=String.format(format,(Object[])null); _EL_ } _EL_ ', 'protected static boolean isIntendedException(Exception e,Class<?> clazz){ _EL_   final String message=e.getMessage(); _EL_   return (!TextUtils.isEmpty(message) && message.startsWith(clazz.getName())); _EL_ } _EL_ ', 'public DatagramPacket responseReceive() throws IOException { _EL_   byte[] buf=new byte[1024]; _EL_   DatagramPacket dp=new DatagramPacket(buf,buf.length); _EL_   datagramSocket.receive(dp); _EL_   return dp; _EL_ } _EL_ ', 'public synchronized void message(LocoNetMessage m){ _EL_   int opCode=m.getOpCode(); _EL_ switch (opCode) { _EL_ case LnConstants.OPC_PEER_XFER: _EL_     int src=m.getElement(2); _EL_   int dst=m.getElement(3) + m.getElement(4) * 256; _EL_ int[] packet=m.getPeerXfrData(); _EL_ if (src == lowPart(LocoBufferAddress)) { _EL_ String lbv=((packet[2] != 0) ? dotme(packet[2]) : "1.0"); _EL_ setLBVersion(lbv); _EL_ } _EL_ if (dst == LocoBufferAddress && src == lowPart(unitAddress) && (packet[4] == unitSubAddress)) { _EL_ stopTimer(); _EL_ replyReceived(); _EL_ String fw=((packet[2] != 0) ? dotme(packet[2]) : "1.3.2"); _EL_ setLIOVersion(fw); _EL_ if (packet[0] == LocoIO.LOCOIO_SV_READ || reading) { _EL_ if (lastOpCv >= 0 && lastOpCv <= 50) { _EL_   int data=(packet[2] != 0) ? packet[5] : packet[7]; _EL_   int channel=(lastOpCv / 3) - 1; _EL_   if (channel < 0) { _EL_     log.warn("... channel is less than zero!!!"); _EL_     channel=0; _EL_   } _EL_   int type=lastOpCv - (channel * 3 + 3); _EL_   log.debug("... updating port " + channel + " SV"+ type+ "("+ (type == 1 ? "value1" : type == 2 ? "value2" : type == 0 ? "mode" : "unknown")+ ") = 0x"+ Integer.toHexString(data)); _EL_   if (type == 2) { _EL_     setV2(channel,data); _EL_     setMode(channel,"<none>"); _EL_   } _EL_  else   if (type == 1) { _EL_     setV1(channel,data); _EL_     setMode(channel,"<none>"); _EL_   } _EL_  else   if (type == 0) { _EL_     setSV(channel,data); _EL_     LocoIOMode lim=validmodes.getLocoIOModeFor(getSV(channel),getV1(channel),getV2(channel)); _EL_     if (lim == null) { _EL_       setMode(channel,"<none>"); _EL_       setAddr(channel,0); _EL_       log.debug("Could not find mode!"); _EL_     } _EL_  else { _EL_       setMode(channel,lim.getFullMode()); _EL_       setAddr(channel,validmodes.valuesToAddress(lim.getOpcode(),getSV(channel),getV1(channel),getV2(channel))); _EL_     } _EL_     log.debug("... decoded address (" + "cv=" + Integer.toHexString(getSV(channel)) + " "+ "v1="+ Integer.toHexString(getV1(channel))+ " "+ "v2="+ Integer.toHexString(getV2(channel))+ ") "+ "is "+ getAddr(channel)+ "(0x"+ Integer.toHexString(getAddr(channel))+ ")"); _EL_   } _EL_  else { _EL_     log.warn("OPC_PEER_XFR: Type (" + type + ") is not {0,1,2} for channel "+ channel); _EL_   } _EL_ } _EL_  else { _EL_ } _EL_ } _EL_ issueNextOperation(); _EL_ return; _EL_ } _EL_  else { _EL_ return; _EL_ } _EL_ case LnConstants.OPC_INPUT_REP: _EL_ if (log.isDebugEnabled()) { _EL_ log.debug(LnConstants.OPC_NAME(opCode) + " received"); _EL_ } _EL_ for (int i=0; i < _numRows; i++) { _EL_ if (capture[i]) { _EL_ if (log.isDebugEnabled()) { _EL_ log.debug("row set for capture: " + i); _EL_ } _EL_ int val1=m.getElement(1); _EL_ int val2=m.getElement(2); _EL_ setAddr(i,((val2 & 0x0F) << 5) * 256 + ((val1 & 0x7f) << 1) | (((val2 & LnConstants.OPC_SW_REQ_DIR) == LnConstants.OPC_SW_REQ_DIR) ? 0x01 : 0x00)); _EL_ capture[i]=false; _EL_ } _EL_ } _EL_ return; _EL_ case LnConstants.OPC_SW_REQ: _EL_ if (log.isDebugEnabled()) { _EL_ log.debug(LnConstants.OPC_NAME(opCode) + " received"); _EL_ } _EL_ for (int i=0; i < _numRows; i++) { _EL_ if (capture[i]) { _EL_ if (log.isDebugEnabled()) { _EL_ log.debug("row set for capture: " + i); _EL_ } _EL_ int val1=m.getElement(1); _EL_ int val2=m.getElement(2); _EL_ int addr=LocoIO.SENSOR_ADR(val1,val2); _EL_ setAddr(i,addr); _EL_ capture[i]=false; _EL_ } _EL_ } _EL_ return; _EL_ default : _EL_ } _EL_ } _EL_ ', 'public Polygon(PolygonPoint p1,PolygonPoint p2,PolygonPoint p3){ _EL_   p1._next=p2; _EL_   p2._next=p3; _EL_   p3._next=p1; _EL_   p1._previous=p3; _EL_   p2._previous=p1; _EL_   p3._previous=p2; _EL_   _points.add(p1); _EL_   _points.add(p2); _EL_   _points.add(p3); _EL_ } _EL_ ', 'public OrQueryBuilder add(QueryBuilder filterBuilder){ _EL_   filters.add(filterBuilder); _EL_   return this; _EL_ } _EL_ ', 'public static void d(String tag,String msg,Object... args){ _EL_   if (sLevel > LEVEL_DEBUG) { _EL_     return; _EL_   } _EL_   if (args.length > 0) { _EL_     msg=String.format(msg,args); _EL_   } _EL_   Log.d(tag,msg); _EL_ } _EL_ ', 'private HashMap<String,byte[]> readChars(byte[] d){ _EL_   HashMap<String,byte[]> hm=new HashMap<String,byte[]>(); _EL_   int i=findSlashName(d,"CharStrings"); _EL_   if (i < 0) { _EL_     return hm; _EL_   } _EL_   PSParser psp=new PSParser(d,i); _EL_   while (true) { _EL_     String s=psp.readThing(); _EL_     char c=s.charAt(0); _EL_     if (c == \'/\') { _EL_       int len=Integer.parseInt(psp.readThing()); _EL_       String go=psp.readThing(); _EL_       if (go.equals("-|") || go.equals("RD")) { _EL_         psp.setLoc(psp.getLoc() + 1); _EL_         byte[] line=psp.getNEncodedBytes(len,password,lenIV); _EL_         hm.put(s.substring(1),line); _EL_       } _EL_     } _EL_  else     if (s.equals("end")) { _EL_       break; _EL_     } _EL_   } _EL_   return hm; _EL_ } _EL_ ', 'private static final void transferStreams(InputStream source,OutputStream destination,String path,IProgressMonitor monitor) throws CoreException { _EL_   monitor=Policy.monitorFor(monitor); _EL_   try { _EL_ synchronized (buffer) { _EL_       while (true) { _EL_         int bytesRead=-1; _EL_         try { _EL_           bytesRead=source.read(buffer); _EL_         } _EL_  catch (        IOException e) { _EL_           String msg=NLS.bind(Messages.failedReadDuringWrite,path); _EL_           Policy.error(EFS.ERROR_READ,msg,e); _EL_         } _EL_         try { _EL_           if (bytesRead == -1) { _EL_             destination.close(); _EL_             break; _EL_           } _EL_           destination.write(buffer,0,bytesRead); _EL_         } _EL_  catch (        IOException e) { _EL_           String msg=NLS.bind(Messages.couldNotWrite,path); _EL_           Policy.error(EFS.ERROR_WRITE,msg,e); _EL_         } _EL_         monitor.worked(1); _EL_       } _EL_     } _EL_   } _EL_   finally { _EL_     Policy.safeClose(source); _EL_     Policy.safeClose(destination); _EL_   } _EL_ } _EL_ ', 'public static RotateStream create(Path path){ _EL_ synchronized (_streams) { _EL_     WeakReference<RotateStream> ref=_streams.get(path); _EL_     RotateStream stream=ref != null ? ref.get() : null; _EL_     if (stream == null) { _EL_       stream=new RotateStream(path); _EL_       _streams.put(path,new WeakReference<>(stream)); _EL_     } _EL_     return stream; _EL_   } _EL_ } _EL_ ', 'private boolean isFieldVisited(Object object,Field objectField,Field field){ _EL_   Map<String,Set<String>> bag=visitedFields.get(object); _EL_   if (bag == null) { _EL_     return false; _EL_   } _EL_   String objectFiledKey=objectField == null ? "" : objectField.toGenericString(); _EL_   Set<String> fields=bag.get(objectFiledKey); _EL_   return fields != null && fields.contains(field); _EL_ } _EL_ ', 'public void skip(int n) throws IOException { _EL_   dis.skip(n); _EL_ } _EL_ ', 'private static void swilk(boolean[] init,double[] x,int n,int n1,int n2,double[] a,double[] w,double[] pw,int[] ifault){ _EL_   pw[0]=1.0; _EL_   if (w[0] >= 0.0) { _EL_     w[0]=1.0; _EL_   } _EL_   double an=n; _EL_   ifault[0]=3; _EL_   int nn2=n / 2; _EL_   if (n2 < nn2) { _EL_     return; _EL_   } _EL_   ifault[0]=1; _EL_   if (n < 3) { _EL_     return; _EL_   } _EL_   if (!init[0]) { _EL_     if (n == 3) { _EL_       a[1]=SQRTH; _EL_     } _EL_  else { _EL_       double an25=an + 0.25; _EL_       double summ2=0.0; _EL_       for (int i=1; i <= n2; ++i) { _EL_         a[i]=ppnd((i - TH) / an25); _EL_         summ2+=a[i] * a[i]; _EL_       } _EL_       summ2*=2.0; _EL_       double ssumm2=Math.sqrt(summ2); _EL_       double rsn=1.0 / Math.sqrt(an); _EL_       double a1=poly(C1,6,rsn) - a[1] / ssumm2; _EL_       int i1; _EL_       double fac; _EL_       if (n > 5) { _EL_         i1=3; _EL_         double a2=-a[2] / ssumm2 + poly(C2,6,rsn); _EL_         fac=Math.sqrt((summ2 - 2.0 * a[1] * a[1] - 2.0 * a[2] * a[2]) / (1.0 - 2.0 * a1 * a1 - 2.0 * a2 * a2)); _EL_         a[1]=a1; _EL_         a[2]=a2; _EL_       } _EL_  else { _EL_         i1=2; _EL_         fac=Math.sqrt((summ2 - 2.0 * a[1] * a[1]) / (1.0 - 2.0 * a1 * a1)); _EL_         a[1]=a1; _EL_       } _EL_       for (int i=i1; i <= nn2; ++i) { _EL_         a[i]=-a[i] / fac; _EL_       } _EL_     } _EL_     init[0]=true; _EL_   } _EL_   if (n1 < 3) { _EL_     return; _EL_   } _EL_   int ncens=n - n1; _EL_   ifault[0]=4; _EL_   if (ncens < 0 || (ncens > 0 && n < 20)) { _EL_     return; _EL_   } _EL_   ifault[0]=5; _EL_   double delta=ncens / an; _EL_   if (delta > 0.8) { _EL_     return; _EL_   } _EL_   double w1, xx; _EL_   if (w[0] < 0.0) { _EL_     w1=1.0 + w[0]; _EL_     ifault[0]=0; _EL_   } _EL_  else { _EL_     ifault[0]=6; _EL_     double range=x[n1] - x[1]; _EL_     if (range < SMALL) { _EL_       return; _EL_     } _EL_     ifault[0]=7; _EL_     xx=x[1] / range; _EL_     double sx=xx; _EL_     double sa=-a[1]; _EL_     int j=n - 1; _EL_     for (int i=2; i <= n1; ++i) { _EL_       double xi=x[i] / range; _EL_       sx+=xi; _EL_       if (i != j) { _EL_         sa+=sign(1,i - j) * a[Math.min(i,j)]; _EL_       } _EL_       xx=xi; _EL_       --j; _EL_     } _EL_     ifault[0]=0; _EL_     if (n > 5000) { _EL_       ifault[0]=2; _EL_     } _EL_     sa/=n1; _EL_     sx/=n1; _EL_     double ssa=0.0; _EL_     double ssx=0.0; _EL_     double sax=0.0; _EL_     j=n; _EL_     double asa; _EL_     for (int i=1; i <= n1; ++i) { _EL_       if (i != j) { _EL_         asa=sign(1,i - j) * a[Math.min(i,j)] - sa; _EL_       } _EL_  else { _EL_         asa=-sa; _EL_       } _EL_       double xsx=x[i] / range - sx; _EL_       ssa+=asa * asa; _EL_       ssx+=xsx * xsx; _EL_       sax+=asa * xsx; _EL_       --j; _EL_     } _EL_     double ssassx=Math.sqrt(ssa * ssx); _EL_     w1=(ssassx - sax) * (ssassx + sax) / (ssa * ssx); _EL_   } _EL_   w[0]=1.0 - w1; _EL_   if (n == 3) { _EL_     pw[0]=PI6 * (Math.asin(Math.sqrt(w[0])) - STQR); _EL_     return; _EL_   } _EL_   double y=Math.log(w1); _EL_   xx=Math.log(an); _EL_   double m=0.0; _EL_   double s=1.0; _EL_   if (n <= 11) { _EL_     double gamma=poly(G,2,an); _EL_     if (y >= gamma) { _EL_       pw[0]=SMALL; _EL_       return; _EL_     } _EL_     y=-Math.log(gamma - y); _EL_     m=poly(C3,4,an); _EL_     s=Math.exp(poly(C4,4,an)); _EL_   } _EL_  else { _EL_     m=poly(C5,4,xx); _EL_     s=Math.exp(poly(C6,3,xx)); _EL_   } _EL_   if (ncens > 0) { _EL_     double ld=-Math.log(delta); _EL_     double bf=1.0 + xx * BF1; _EL_     double z90f=Z90 + bf * Math.pow(poly(C7,2,Math.pow(XX90,xx)),ld); _EL_     double z95f=Z95 + bf * Math.pow(poly(C8,2,Math.pow(XX95,xx)),ld); _EL_     double z99f=Z99 + bf * Math.pow(poly(C9,2,xx),ld); _EL_     double zfm=(z90f + z95f + z99f) / 3.0; _EL_     double zsd=(Z90 * (z90f - zfm) + Z95 * (z95f - zfm) + Z99 * (z99f - zfm)) / ZSS; _EL_     double zbar=zfm - zsd * ZM; _EL_     m+=zbar * s; _EL_     s*=zsd; _EL_   } _EL_   pw[0]=alnorm((y - m) / s,UPPER); _EL_ } _EL_ ', 'public boolean recreateWorkspaceTable(SQLiteDatabase db){ _EL_   db.beginTransaction(); _EL_   try { _EL_     Cursor c=db.query(TABLE_WORKSPACE_SCREENS,new String[]{LauncherSettings.WorkspaceScreens._ID},null,null,null,null,LauncherSettings.WorkspaceScreens.SCREEN_RANK); _EL_     ArrayList<Long> sortedIDs=new ArrayList<Long>(); _EL_     long maxId=0; _EL_     try { _EL_       while (c.moveToNext()) { _EL_         Long id=c.getLong(0); _EL_         if (!sortedIDs.contains(id)) { _EL_           sortedIDs.add(id); _EL_           maxId=Math.max(maxId,id); _EL_         } _EL_       } _EL_     } _EL_   finally { _EL_       c.close(); _EL_     } _EL_     db.execSQL("DROP TABLE IF EXISTS " + TABLE_WORKSPACE_SCREENS); _EL_     addWorkspacesTable(db,false); _EL_     int total=sortedIDs.size(); _EL_     for (int i=0; i < total; i++) { _EL_       ContentValues values=new ContentValues(); _EL_       values.put(LauncherSettings.WorkspaceScreens._ID,sortedIDs.get(i)); _EL_       values.put(LauncherSettings.WorkspaceScreens.SCREEN_RANK,i); _EL_       addModifiedTime(values); _EL_       db.insertOrThrow(TABLE_WORKSPACE_SCREENS,null,values); _EL_     } _EL_     db.setTransactionSuccessful(); _EL_     mMaxScreenId=maxId; _EL_   } _EL_  catch (  SQLException ex) { _EL_     Log.e(TAG,ex.getMessage(),ex); _EL_     return false; _EL_   } _EL_  finally { _EL_     db.endTransaction(); _EL_   } _EL_   return true; _EL_ } _EL_ ', 'public void addAttribute(String alias,String typeUri,boolean required,int count) throws MessageException { _EL_   if (alias.indexOf(\',\') > -1 || alias.indexOf(\'.\') > -1 || alias.indexOf(\':\') > -1 || alias.indexOf(\'\\n\') > -1)   throw new MessageException("Characters [.,:\\\\n] are not allowed in attribute aliases: " + alias); _EL_   _parameters.set(new Parameter("type." + alias,typeUri)); _EL_   String level=required ? "required" : "if_available"; _EL_   Parameter levelParam=_parameters.getParameter(level); _EL_   Parameter newParam; _EL_   if (levelParam == null) { _EL_     newParam=new Parameter(level,alias); _EL_   } _EL_  else { _EL_     newParam=new Parameter(level,levelParam.getValue() + "," + alias); _EL_     _parameters.removeParameters(level); _EL_   } _EL_   _parameters.set(newParam); _EL_   setCount(alias,count); _EL_   if (DEBUG)   _log.debug("Added new attribute to fetch request; type: " + typeUri + " alias: "+ alias+ " count: "+ count+ " required: "+ required); _EL_ } _EL_ ', 'public static boolean beenDone(@Scope int scope,String tag,CountChecker numberOfTimes){ _EL_   List<Long> tagSeenDates=tagLastSeenMap.get(tag); _EL_   if (tagSeenDates.isEmpty()) { _EL_     return false; _EL_   } _EL_   if (scope == THIS_APP_INSTALL) { _EL_     return numberOfTimes.check(tagSeenDates.size()); _EL_   } _EL_  else   if (scope == THIS_APP_SESSION) { _EL_     int counter=0; _EL_     for (    String tagFromList : sessionList) { _EL_       if (tagFromList.equals(tag)) { _EL_         counter++; _EL_       } _EL_     } _EL_     return numberOfTimes.check(counter); _EL_   } _EL_  else { _EL_     int counter=0; _EL_     for (    Long seenDate : tagSeenDates) { _EL_       if (seenDate > lastAppUpdatedTime) { _EL_         counter++; _EL_       } _EL_     } _EL_     return numberOfTimes.check(counter); _EL_   } _EL_ } _EL_ ', 'void constructNode(String nodeName,String prefix,String nodeNamespace,TransformerImpl transformer) throws TransformerException { _EL_   boolean shouldAddAttrs; _EL_   try { _EL_     SerializationHandler rhandler=transformer.getResultTreeHandler(); _EL_     if (null == nodeName) { _EL_       shouldAddAttrs=false; _EL_     } _EL_  else { _EL_       if (null != prefix) { _EL_         rhandler.startPrefixMapping(prefix,nodeNamespace,true); _EL_       } _EL_       rhandler.startElement(nodeNamespace,QName.getLocalPart(nodeName),nodeName); _EL_       super.execute(transformer); _EL_       shouldAddAttrs=true; _EL_     } _EL_     transformer.executeChildTemplates(this,shouldAddAttrs); _EL_     if (null != nodeName) { _EL_       rhandler.endElement(nodeNamespace,QName.getLocalPart(nodeName),nodeName); _EL_       if (null != prefix) { _EL_         rhandler.endPrefixMapping(prefix); _EL_       } _EL_     } _EL_   } _EL_  catch (  SAXException se) { _EL_     throw new TransformerException(se); _EL_   } _EL_ } _EL_ ', 'public static MCostQueue add(MProduct product,int M_AttributeSetInstance_ID,MAcctSchema as,int AD_Org_ID,int M_CostElement_ID,BigDecimal amt,BigDecimal qty,int precision,MCostDetail cd,String trxName){ _EL_   if (CLogMgt.isLevelFine())   s_log.fine("Entering: org=" + AD_Org_ID + ", product="+ product.get_ID()+ ", asi="+ M_AttributeSetInstance_ID+ ", amt="+ amt+ ", qty="+ qty+ ", precision="+ precision); _EL_   MCostQueue cq=new MCostQueue(product,M_AttributeSetInstance_ID,as,AD_Org_ID,M_CostElement_ID,trxName); _EL_   cq.setCosts(amt,qty,precision); _EL_   cq.setDateAcct(cd.getDateAcct()); _EL_   cq.saveEx(); _EL_   if (CLogMgt.isLevelFine())   s_log.fine("Leaving: " + cq); _EL_   return cq; _EL_ } _EL_ ', 'public static void touch(File file) throws IOException { _EL_   if (!file.exists()) { _EL_     OutputStream out=openOutputStream(file); _EL_     IOUtils.closeQuietly(out); _EL_   } _EL_   boolean success=file.setLastModified(System.currentTimeMillis()); _EL_   if (!success) { _EL_     throw new IOException("Unable to set the last modification time for " + file); _EL_   } _EL_ } _EL_ ', "public static void prepareUnicode(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){ _EL_   Reject.ifNull(buffer,sequence); _EL_   final int length=sequence.length(); _EL_   for (int i=0; i < length; i++) { _EL_     final byte b=sequence.byteAt(i); _EL_     if ((b & 0x7F) != b) { _EL_       MappingTable.map(buffer,sequence.subSequence(i,length),trim,foldCase); _EL_       String normalizedForm=Normalizer.normalize(buffer,Form.NFKD); _EL_       buffer.setLength(0); _EL_       buffer.append(normalizedForm); _EL_       break; _EL_     } _EL_ switch (b) { _EL_ case ' ': _EL_       if (canMapToSpace(buffer,trim)) { _EL_         buffer.append(' '); _EL_       } _EL_     break; _EL_ default : _EL_   if (b >= '\\u0009' && b < '\\u000E') { _EL_     if (canMapToSpace(buffer,trim)) { _EL_       buffer.append(SPACE_CHAR); _EL_     } _EL_   } _EL_  else   if ((b >= '\\u0000' && b <= '\\u0008') || (b >= '\\u000E' && b <= '\\u001F') || b == '\\u007F') { _EL_     break; _EL_   } _EL_  else   if (foldCase && b >= 'A' && b <= 'Z') { _EL_     buffer.append((char)(b + 32)); _EL_   } _EL_  else { _EL_     buffer.append((char)b); _EL_   } _EL_ break; _EL_ } _EL_ } _EL_ if (trim) { _EL_ for (int i=buffer.length() - 1; i > 0; i--) { _EL_ if (buffer.charAt(i) == SPACE_CHAR) { _EL_ buffer.delete(i,i + 1); _EL_ } _EL_  else { _EL_ break; _EL_ } _EL_ } _EL_ } _EL_ } _EL_ ", 'public static void tryFormatSatisfiability(String format) throws IllegalFormatException { _EL_   MessageFormat.format(format,(Object[])null); _EL_ } _EL_ ', 'public String importXML(String fileName,Properties ctx,String trxName) throws Exception { _EL_   log.info("importXML:" + fileName); _EL_   File in=new File(fileName); _EL_   if (!in.exists()) { _EL_     String msg="File does not exist: " + fileName; _EL_     log.info("importXML:" + msg); _EL_     return msg; _EL_   } _EL_   try { _EL_     log.info("starting"); _EL_     System.setProperty("javax.xml.parsers.SAXParserFactory","org.apache.xerces.jaxp.SAXParserFactoryImpl"); _EL_     PackInHandler handler=new PackInHandler(); _EL_     handler.set_TrxName(trxName); _EL_     handler.setCtx(ctx); _EL_     handler.setProcess(this); _EL_     SAXParserFactory factory=SAXParserFactory.newInstance(); _EL_     SAXParser parser=factory.newSAXParser(); _EL_     String msg="Start Parser"; _EL_     log.info(msg); _EL_     parser.parse(in,handler); _EL_     msg="End Parser"; _EL_     log.info(msg); _EL_     return "OK."; _EL_   } _EL_  catch (  Exception e) { _EL_     log.log(Level.SEVERE,"importXML:",e); _EL_     throw e; _EL_   } _EL_ } _EL_ ', 'public synchronized void logAddOrRemoveRow(Session session,int tableId,Row row,boolean add){ _EL_   if (logMode != LOG_MODE_OFF) { _EL_     if (!recoveryRunning) { _EL_       log.logAddOrRemoveRow(session,tableId,row,add); _EL_     } _EL_   } _EL_ } _EL_ ', 'public org.smpte_ra.schemas.st2067_2_2016.DigestMethodType buildDefaultDigestMethodType(){ _EL_   org.smpte_ra.schemas.st2067_2_2016.DigestMethodType digestMethodType=new org.smpte_ra.schemas.st2067_2_2016.DigestMethodType(); _EL_   digestMethodType.setAlgorithm(CompositionPlaylistBuilder_2016.defaultHashAlgorithm); _EL_   return digestMethodType; _EL_ } _EL_ ', 'public static void assertNullability(ResultSet rs,boolean[] nullability) throws SQLException { _EL_   ResultSetMetaData rsmd=rs.getMetaData(); _EL_   int actualCols=rsmd.getColumnCount(); _EL_   assertEquals("Unexpected column count:",nullability.length,rsmd.getColumnCount()); _EL_   for (int i=0; i < actualCols; i++) { _EL_     int expected=nullability[i] ? ResultSetMetaData.columnNullable : ResultSetMetaData.columnNoNulls; _EL_     assertEquals("Column nullability do not match for column " + (i + 1),expected,rsmd.isNullable(i + 1)); _EL_   } _EL_ } _EL_ ', 'public Builder deleteAddresses(){ _EL_   deleteFields.add("addresses"); _EL_   return this; _EL_ } _EL_ ', 'public void trim(String aText,int[] aSpan){ _EL_   int begin=aSpan[0]; _EL_   int end=aSpan[1] - 1; _EL_   String data=aText; _EL_   while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) { _EL_     begin++; _EL_   } _EL_   while ((end > 0) && trimChar(data.charAt(end))) { _EL_     end--; _EL_   } _EL_   end++; _EL_   aSpan[0]=begin; _EL_   aSpan[1]=end; _EL_ } _EL_ ', 'public boolean addClass(OwlClass targetClass){ _EL_   targetClass.addQCRestriction(this); _EL_   return qcClasses.add(targetClass); _EL_ } _EL_ ', 'public static void streamContentToBrowser(HttpServletResponse response,byte[] bytes,String contentType,String fileName) throws IOException { _EL_   setResponseBrowserProxyNoCache(response); _EL_   response.setContentLength(bytes.length); _EL_   if (contentType != null) { _EL_     response.setContentType(contentType); _EL_   } _EL_   if (fileName != null) { _EL_     response.setHeader("Content-Disposition","attachment;filename=\\"" + fileName + "\\""); _EL_   } _EL_   OutputStream out=response.getOutputStream(); _EL_   InputStream in=new ByteArrayInputStream(bytes); _EL_   try { _EL_     streamContent(out,in,bytes.length); _EL_   } _EL_  catch (  IOException e) { _EL_     in.close(); _EL_     out.close(); _EL_     throw e; _EL_   } _EL_   in.close(); _EL_   out.flush(); _EL_   out.close(); _EL_ } _EL_ ', 'public void destroy(){ _EL_   this.isInitialized=false; _EL_   this.isFinished=false; _EL_   this.firstNode=null; _EL_   this.tailLength=0; _EL_   this.firstNodeHeight=-1; _EL_ } _EL_ ', 'public byte[] toBinary(int q){ _EL_   return ArrayEncoder.encodeModQ(coeffs,q); _EL_ } _EL_ ', 'public String encodeBuffer(byte aBuffer[]){ _EL_   ByteArrayOutputStream outStream=new ByteArrayOutputStream(); _EL_   ByteArrayInputStream inStream=new ByteArrayInputStream(aBuffer); _EL_   try { _EL_     encodeBuffer(inStream,outStream); _EL_   } _EL_  catch (  Exception IOException) { _EL_     throw new Error("CharacterEncoder.encodeBuffer internal error"); _EL_   } _EL_   return (outStream.toString()); _EL_ } _EL_ ', 'private boolean removeLegionMember(String charName,boolean kick,String playerName){ _EL_   LegionMemberEx legionMember=getLegionMemberEx(charName); _EL_   if (legionMember == null) { _EL_     log.error("Char name does not exist in legion member table: " + charName); _EL_     return false; _EL_   } _EL_   deleteLegionMemberFromDB(legionMember); _EL_   Player player=world.findPlayer(charName); _EL_   if (player != null) { _EL_     PacketSendUtility.broadcastPacket(player,new SM_LEGION_UPDATE_TITLE(player.getObjectId(),0,"",2),true); _EL_   } _EL_   if (kick) { _EL_     PacketSendUtility.broadcastPacketToLegion(legionMember.getLegion(),new SM_LEGION_LEAVE_MEMBER(1300247,legionMember.getObjectId(),playerName,legionMember.getName())); _EL_   } _EL_  else { _EL_     PacketSendUtility.broadcastPacketToLegion(legionMember.getLegion(),new SM_LEGION_LEAVE_MEMBER(900699,legionMember.getObjectId(),charName)); _EL_   } _EL_   return true; _EL_ } _EL_ ', 'private boolean add(int part){ _EL_   if (!parts.contains(part)) { _EL_     parts.add(part); _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public synchronized void reset(){ _EL_   labels.clear(); _EL_   labels.put(SensisionConstants.SENSISION_LABEL_TOPIC,this.topic); _EL_   labels.put(SensisionConstants.SENSISION_LABEL_GROUPID,this.groupid); _EL_   for (int i=0; i < this.counters.length; i++) { _EL_     if (null == this.counters[i]) { _EL_       continue; _EL_     } _EL_     labels.put(SensisionConstants.SENSISION_LABEL_PARTITION,Integer.toString(i)); _EL_     Sensision.clear(SensisionConstants.SENSISION_CLASS_WARP_KAFKA_CONSUMER_OFFSET,labels); _EL_     this.counters[i]=null; _EL_   } _EL_ } _EL_ ', 'public int outstandingRequests(){ _EL_   return outstanding.get(); _EL_ } _EL_ ', 'public Class<?>[] scanForClasses(String location,Class<?> implementedInterface) throws Exception { _EL_   LOG.debug("Scanning for classes at \'" + location + "\' (Implementing: \'"+ implementedInterface.getName()+ "\')"); _EL_   List<Class<?>> classes=new ArrayList<Class<?>>(); _EL_   Set<String> resourceNames=findResourceNames(location,"",".class"); _EL_   for (  String resourceName : resourceNames) { _EL_     String className=toClassName(resourceName); _EL_     Class<?> clazz=classLoader.loadClass(className); _EL_     if (Modifier.isAbstract(clazz.getModifiers()) || clazz.isEnum() || clazz.isAnonymousClass()) { _EL_       LOG.debug("Skipping non-instantiable class: " + className); _EL_       continue; _EL_     } _EL_     if (!implementedInterface.isAssignableFrom(clazz)) { _EL_       continue; _EL_     } _EL_     try { _EL_       ClassUtils.instantiate(className,classLoader); _EL_     } _EL_  catch (    Exception e) { _EL_       throw new CassandraMigrationException("Unable to instantiate class: " + className,e); _EL_     } _EL_     classes.add(clazz); _EL_     LOG.debug("Found class: " + className); _EL_   } _EL_   return classes.toArray(new Class<?>[classes.size()]); _EL_ } _EL_ ', 'public double slideSubtree(MutableTree tree){ _EL_   double logHastingsRatio; _EL_   NodeRef i, newParent, newChild; _EL_   do { _EL_     i=tree.getNode(MathUtils.nextInt(tree.getNodeCount())); _EL_   } _EL_  while (tree.getRoot() == i); _EL_   NodeRef iP=tree.getParent(i); _EL_   NodeRef CiP=getOtherChild(tree,iP,i); _EL_   NodeRef PiP=tree.getParent(iP); _EL_   double delta=getDelta(); _EL_   double oldHeight=tree.getNodeHeight(iP); _EL_   double newHeight=oldHeight + delta; _EL_   if (delta > 0) { _EL_     if (PiP != null && tree.getNodeHeight(PiP) < newHeight) { _EL_       newParent=PiP; _EL_       newChild=iP; _EL_       while (tree.getNodeHeight(newParent) < newHeight) { _EL_         newChild=newParent; _EL_         newParent=tree.getParent(newParent); _EL_         if (newParent == null)         break; _EL_       } _EL_       tree.beginTreeEdit(); _EL_       if (tree.isRoot(newChild)) { _EL_         tree.removeChild(iP,CiP); _EL_         tree.removeChild(PiP,iP); _EL_         tree.addChild(iP,newChild); _EL_         tree.addChild(PiP,CiP); _EL_         tree.setRoot(iP); _EL_       } _EL_  else { _EL_         tree.removeChild(iP,CiP); _EL_         tree.removeChild(PiP,iP); _EL_         tree.removeChild(newParent,newChild); _EL_         tree.addChild(iP,newChild); _EL_         tree.addChild(PiP,CiP); _EL_         tree.addChild(newParent,iP); _EL_       } _EL_       tree.setNodeHeight(iP,newHeight); _EL_       tree.endTreeEdit(); _EL_       int possibleSources=intersectingEdges(tree,newChild,oldHeight,null); _EL_       logHastingsRatio=Math.log(1.0 / (double)possibleSources); _EL_     } _EL_  else { _EL_       tree.setNodeHeight(iP,newHeight); _EL_       logHastingsRatio=0.0; _EL_     } _EL_   } _EL_  else { _EL_     if (tree.getNodeHeight(i) > newHeight) { _EL_       return Double.NEGATIVE_INFINITY; _EL_     } _EL_     if (tree.getNodeHeight(CiP) > newHeight) { _EL_       ArrayList newChildren=new ArrayList(); _EL_       int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren); _EL_       if (newChildren.size() == 0) { _EL_         return Double.NEGATIVE_INFINITY; _EL_       } _EL_       int childIndex=MathUtils.nextInt(newChildren.size()); _EL_       newChild=(NodeRef)newChildren.get(childIndex); _EL_       newParent=tree.getParent(newChild); _EL_       tree.beginTreeEdit(); _EL_       if (tree.isRoot(iP)) { _EL_         tree.removeChild(iP,CiP); _EL_         tree.removeChild(newParent,newChild); _EL_         tree.addChild(iP,newChild); _EL_         tree.addChild(newParent,iP); _EL_         tree.setRoot(CiP); _EL_       } _EL_  else { _EL_         tree.removeChild(iP,CiP); _EL_         tree.removeChild(PiP,iP); _EL_         tree.removeChild(newParent,newChild); _EL_         tree.addChild(iP,newChild); _EL_         tree.addChild(PiP,CiP); _EL_         tree.addChild(newParent,iP); _EL_       } _EL_       tree.setNodeHeight(iP,newHeight); _EL_       tree.endTreeEdit(); _EL_       logHastingsRatio=Math.log((double)possibleDestinations); _EL_     } _EL_  else { _EL_       tree.setNodeHeight(iP,newHeight); _EL_       logHastingsRatio=0.0; _EL_     } _EL_   } _EL_   return logHastingsRatio; _EL_ } _EL_ ', 'public String typeAsString(){ _EL_   String typeStr="?"; _EL_   String subtypeStr="?"; _EL_ switch (this.type) { _EL_ case ETYPE_CONTROL: _EL_     typeStr=" control/"; _EL_ switch (this.subtype) { _EL_ case ESTYPE_HEADER: _EL_     subtypeStr="header"; _EL_   break; _EL_ case ESTYPE_FOOTER: _EL_ subtypeStr="footer"; _EL_ break; _EL_ } _EL_ break; _EL_ case ETYPE_TRANSACTIONS: _EL_ typeStr=" transaction/"; _EL_ switch (this.subtype) { _EL_ case ESTYPE_TRAN_START: _EL_ subtypeStr="start"; _EL_ break; _EL_ case ESTYPE_TRAN_COMMIT: _EL_ subtypeStr="commit"; _EL_ break; _EL_ case ESTYPE_TRAN_ROLLBACK: _EL_ subtypeStr="rollback"; _EL_ break; _EL_ case ESTYPE_TRAN_ROLLBACK_TO_SAVEPOINT: _EL_ subtypeStr="rollback_to_savepoint"; _EL_ break; _EL_ case ESTYPE_TRAN_AUDIT: _EL_ subtypeStr="audit"; _EL_ break; _EL_ } _EL_ break; _EL_ case ETYPE_LCR_DATA: _EL_ typeStr=" LCR data/"; _EL_ switch (this.subtype) { _EL_ case ESTYPE_LCR_INSERT: _EL_ subtypeStr="insert"; _EL_ break; _EL_ case ESTYPE_LCR_DELETE: _EL_ subtypeStr="delete"; _EL_ break; _EL_ case ESTYPE_LCR_UPDATE: _EL_ subtypeStr="update"; _EL_ break; _EL_ case ESTYPE_LCR_LOB_WRITE: _EL_ subtypeStr="LOB write"; _EL_ break; _EL_ case ESTYPE_LCR_LOB_TRIM: _EL_ subtypeStr="LOB trim"; _EL_ break; _EL_ case ESTYPE_LCR_LOB_ERASE: _EL_ subtypeStr="LOB erase"; _EL_ break; _EL_ case ESTYPE_LCR_DDL: _EL_ subtypeStr="DDL"; _EL_ break; _EL_ } _EL_ break; _EL_ case ETYPE_LCR_PLOG: _EL_ typeStr=" LCR plog/"; _EL_ switch (this.subtype) { _EL_ case ESTYPE_LCR_PLOG_IFILE: _EL_ subtypeStr="include plog file"; _EL_ break; _EL_ case ESTYPE_LCR_PLOG_IFILE_STATS: _EL_ subtypeStr="include plog file - rowcount"; _EL_ break; _EL_ } _EL_ break; _EL_ default : _EL_ typeStr=" ?" + this.type + "/"; _EL_ subtypeStr="?" + this.subtype; _EL_ } _EL_ return typeStr + subtypeStr; _EL_ } _EL_ ', 'public boolean generate(ReportDescription description,Date date){ _EL_   try { _EL_     Integer targetDateInt=Integer.parseInt(format.format(date)); _EL_     AnalysisResultSet logAggregation=makeLogAnal(description,targetDateInt); _EL_     Report report=new Report(); _EL_     report.setSendTime(new Date()); _EL_     report.setTargetDate(date); _EL_     report.setLogReport(logAggregation); _EL_     report.setTargets(description.getTargets()); _EL_     logger.debug("generated > " + report); _EL_     reportRepository.save(report); _EL_     return true; _EL_   } _EL_  catch (  Exception e) { _EL_     logger.error(e.getMessage(),e); _EL_     return false; _EL_   } _EL_ } _EL_ ', '@Override public void updateTextViews(Recharge recharge){ _EL_   unitTypeTextView.setText(recharge.getUnits()); _EL_   unitValueTextView.setText(String.valueOf(recharge.getCurrentAmount())); _EL_   costTextView.setText(Currency.localize(recharge.getCurrentCost(),true)); _EL_   rechargeName.setText(recharge.getTitle()); _EL_   confirmationTextView.setText("Add " + recharge.getCurrentAmount() + " extra "+ recharge.getUnits()+ " for the month?"); _EL_   if (recharge.getCurrentAmount() == recharge.getInitialAmount()) { _EL_     downArrow.setVisibility(View.INVISIBLE); _EL_   } _EL_  else { _EL_     downArrow.setVisibility(View.VISIBLE); _EL_   } _EL_ } _EL_ ', 'public void addLandingPad(int x,int z){ _EL_   BlockPosition pos=new BlockPosition(x,0,z); _EL_   if (!spawnLocations.contains(pos)) { _EL_     spawnLocations.add(pos); _EL_     occupiedLandingPads.put(pos,false); _EL_   } _EL_ } _EL_ ', 'public void list(PrintStream out){ _EL_   out.println("-- listing properties --"); _EL_   Hashtable<String,Object> h=new Hashtable<>(); _EL_   enumerate(h); _EL_   for (Enumeration<String> e=h.keys(); e.hasMoreElements(); ) { _EL_     String key=e.nextElement(); _EL_     String val=(String)h.get(key); _EL_     if (val.length() > 40) { _EL_       val=val.substring(0,37) + "..."; _EL_     } _EL_     out.println(key + "=" + val); _EL_   } _EL_ } _EL_ ', 'public final double infoGain(){ _EL_   return m_infoGain; _EL_ } _EL_ ', 'boolean cancel(int propertyConstant){ _EL_   if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) { _EL_     int count=mNameValuesHolder.size(); _EL_     for (int i=0; i < count; ++i) { _EL_       NameValuesHolder nameValuesHolder=mNameValuesHolder.get(i); _EL_       if (nameValuesHolder.mNameConstant == propertyConstant) { _EL_         mNameValuesHolder.remove(i); _EL_         mPropertyMask&=~propertyConstant; _EL_         return true; _EL_       } _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void encrypt(byte[] in,int length){ _EL_   int pos=0; _EL_   while (pos < in.length && pos < length) { _EL_     encryptBlock(in,pos,length); _EL_     pos+=blockSize; _EL_   } _EL_ } _EL_ ', 'public static String removeSpecialChar(String tempStr){ _EL_   if (tempStr != null) { _EL_     tempStr=replace(tempStr,",","",true,true); _EL_     tempStr=replace(tempStr,".","",true,true); _EL_     tempStr=replace(tempStr,"!","",true,true); _EL_     tempStr=replace(tempStr,"?","",true,true); _EL_     tempStr=replace(tempStr,"\'","",true,true); _EL_     tempStr=replace(tempStr,":","",true,true); _EL_     tempStr=replace(tempStr,"(","",true,true); _EL_     tempStr=replace(tempStr,")","",true,true); _EL_     tempStr=replace(tempStr,"+","",true,true); _EL_     tempStr=replace(tempStr,"-","",true,true); _EL_     tempStr=replace(tempStr,">","",true,true); _EL_     tempStr=replace(tempStr,"<","",true,true); _EL_     tempStr=replace(tempStr,"/","",true,true); _EL_     while (tempStr.indexOf("  ") > 0) { _EL_       tempStr=replace(tempStr,"  "," ",true,true); _EL_     } _EL_     tempStr=replace(tempStr,"\t"," ",true,true); _EL_   } _EL_   return tempStr; _EL_ } _EL_ ', 'LinkedList<TrieNode<T>> makeSuffixChain(TrieNode<T> root,String suffix,T value){ _EL_   LinkedList<TrieNode<T>> result=new LinkedList<>(); _EL_   String rootPrefix=root.getPrefix(); _EL_   for (int i=1, suffixSize=suffix.length(); i <= suffixSize; i++) { _EL_     String newPrefix=rootPrefix + suffix.substring(0,i); _EL_     TrieNode<T> newNode=TrieNode.makeNode(newPrefix); _EL_     result.add(newNode); _EL_     root.addChild(newNode); _EL_     root=newNode; _EL_   } _EL_   root.setValue(value); _EL_   return result; _EL_ } _EL_ ', 'public void update(){ _EL_   if (amplitude > 0) { _EL_     long elapsed=System.currentTimeMillis() - timestamp; _EL_     double delta=amplitude * Math.exp(-elapsed / timeConstant); _EL_     if (Math.abs(delta) > 0.5) { _EL_       viewpointNode.drag(lastDx * delta,lastDy * delta); _EL_     } _EL_  else { _EL_       amplitude=0; _EL_       updateLookAt(); _EL_     } _EL_   } _EL_ } _EL_ ', 'private void handleReadLastConfirmedError(int rc){ _EL_   if (BKException.Code.NoSuchLedgerExistsException == rc) { _EL_     if (bkcNoLedgerExceptionsOnReadLAC.incrementAndGet() > noLedgerExceptionOnReadLACThreshold) { _EL_       LOG.info("{} No entries published to ledger {} yet for {} millis.",new Object[]{fullyQualifiedName,currentLH,conf.getReadAheadNoSuchLedgerExceptionOnReadLACErrorThresholdMillis()}); _EL_       bkcNoLedgerExceptionsOnReadLAC.set(0); _EL_       if (closeCurrentLedgerHandle()) { _EL_         next.process(BKException.Code.OK); _EL_       } _EL_       return; _EL_     } _EL_  else { _EL_       if (LOG.isTraceEnabled()) { _EL_         LOG.info("{} No entries published to ledger {} yet. Backoff reading ahead for {} ms.",new Object[]{fullyQualifiedName,currentLH,conf.getReadAheadWaitTime()}); _EL_       } _EL_       schedule(ReadAheadWorker.this,conf.getReadAheadWaitTime()); _EL_       return; _EL_     } _EL_   } _EL_  else   if (BKException.Code.OK != rc) { _EL_     handleException(ReadAheadPhase.READ_LAST_CONFIRMED,rc); _EL_     return; _EL_   } _EL_ } _EL_ ', 'private static DownscaleQuality addConstant(String type){ _EL_   init(); _EL_   if (constList.containsKey(type)) { _EL_     throw new RuntimeException("Type strings for DownscaleQuality should be unique; " + type + " is declared twice"); _EL_   } _EL_   DownscaleQuality q=new DownscaleQuality(type); _EL_   constList.put(type,q); _EL_   return q; _EL_ } _EL_ ', 'public void cast(final Type from,final Type to){ _EL_   if (from != to) { _EL_     if (from == Type.DOUBLE_TYPE) { _EL_       if (to == Type.FLOAT_TYPE) { _EL_         mv.visitInsn(Opcodes.D2F); _EL_       } _EL_  else       if (to == Type.LONG_TYPE) { _EL_         mv.visitInsn(Opcodes.D2L); _EL_       } _EL_  else { _EL_         mv.visitInsn(Opcodes.D2I); _EL_         cast(Type.INT_TYPE,to); _EL_       } _EL_     } _EL_  else     if (from == Type.FLOAT_TYPE) { _EL_       if (to == Type.DOUBLE_TYPE) { _EL_         mv.visitInsn(Opcodes.F2D); _EL_       } _EL_  else       if (to == Type.LONG_TYPE) { _EL_         mv.visitInsn(Opcodes.F2L); _EL_       } _EL_  else { _EL_         mv.visitInsn(Opcodes.F2I); _EL_         cast(Type.INT_TYPE,to); _EL_       } _EL_     } _EL_  else     if (from == Type.LONG_TYPE) { _EL_       if (to == Type.DOUBLE_TYPE) { _EL_         mv.visitInsn(Opcodes.L2D); _EL_       } _EL_  else       if (to == Type.FLOAT_TYPE) { _EL_         mv.visitInsn(Opcodes.L2F); _EL_       } _EL_  else { _EL_         mv.visitInsn(Opcodes.L2I); _EL_         cast(Type.INT_TYPE,to); _EL_       } _EL_     } _EL_  else { _EL_       if (to == Type.BYTE_TYPE) { _EL_         mv.visitInsn(Opcodes.I2B); _EL_       } _EL_  else       if (to == Type.CHAR_TYPE) { _EL_         mv.visitInsn(Opcodes.I2C); _EL_       } _EL_  else       if (to == Type.DOUBLE_TYPE) { _EL_         mv.visitInsn(Opcodes.I2D); _EL_       } _EL_  else       if (to == Type.FLOAT_TYPE) { _EL_         mv.visitInsn(Opcodes.I2F); _EL_       } _EL_  else       if (to == Type.LONG_TYPE) { _EL_         mv.visitInsn(Opcodes.I2L); _EL_       } _EL_  else       if (to == Type.SHORT_TYPE) { _EL_         mv.visitInsn(Opcodes.I2S); _EL_       } _EL_     } _EL_   } _EL_ } _EL_ ', 'public static String transformToolTipText(final String description,final boolean addHTMLTags,final int lineLength,final boolean escapeSlashes,final boolean escapeHTML){ _EL_   String completeText=description.trim(); _EL_   if (escapeHTML) { _EL_     completeText=Tools.escapeHTML(completeText); _EL_   } _EL_   if (escapeSlashes) { _EL_     completeText=completeText.replaceAll("/","&#47;"); _EL_   } _EL_   StringBuffer result=new StringBuffer(); _EL_   if (addHTMLTags) { _EL_     result.append("<html>"); _EL_   } _EL_   completeText=Tools.transformAllLineSeparators(completeText); _EL_   String[] lines=completeText.split("\\n"); _EL_   for (  String text : lines) { _EL_     boolean first=true; _EL_     while (text.length() > lineLength) { _EL_       int spaceIndex=text.indexOf(" ",lineLength); _EL_       if (!first) { _EL_         result.append("<br>"); _EL_       } _EL_       first=false; _EL_       if (spaceIndex >= 0) { _EL_         result.append(text.substring(0,spaceIndex)); _EL_         text=text.substring(spaceIndex + 1); _EL_       } _EL_  else { _EL_         result.append(text); _EL_         text=""; _EL_       } _EL_     } _EL_     if (!first && text.length() > 0) { _EL_       result.append("<br>"); _EL_     } _EL_     result.append(text); _EL_     result.append("<br>"); _EL_   } _EL_   if (addHTMLTags) { _EL_     result.append("</html>"); _EL_   } _EL_   return result.toString(); _EL_ } _EL_ ', 'public ClientHttpRequest(URLConnection connection) throws IOException { _EL_   this.connection=connection; _EL_   connection.setDoOutput(true); _EL_   connection.setDoInput(true); _EL_   connection.setRequestProperty("Content-Type","multipart/form-data; boundary=" + boundary); _EL_ } _EL_ ', 'public static EventTypeMetadata createBeanType(String name,Class clazz,boolean isPreConfiguredStatic,boolean isPreConfigured,boolean isConfigured,TypeClass typeClass){ _EL_   Set<String> secondaryNames=null; _EL_   if (name == null) { _EL_     name=clazz.getName(); _EL_   } _EL_  else { _EL_     if (!name.equals(clazz.getName())) { _EL_       secondaryNames=new LinkedHashSet<String>(); _EL_       secondaryNames.add(clazz.getName()); _EL_     } _EL_   } _EL_   return new EventTypeMetadata(name,secondaryNames,typeClass,isPreConfiguredStatic,isPreConfigured,isConfigured,ApplicationType.CLASS,false); _EL_ } _EL_ ', 'private int createFolder(){ _EL_   if (mNewDirectoryName != null && mSelectedDir != null && mSelectedDir.canWrite()) { _EL_     File newDir=new File(mSelectedDir,mNewDirectoryName); _EL_     if (!newDir.exists()) { _EL_       boolean result=newDir.mkdir(); _EL_       if (result) { _EL_         changeDirectory(newDir); _EL_         return R.string.create_folder_success; _EL_       } _EL_  else { _EL_         return R.string.create_folder_error; _EL_       } _EL_     } _EL_  else { _EL_       return R.string.create_folder_error_already_exists; _EL_     } _EL_   } _EL_  else   if (mSelectedDir != null && !mSelectedDir.canWrite()) { _EL_     return R.string.create_folder_error_no_write_access; _EL_   } _EL_  else { _EL_     return R.string.create_folder_error; _EL_   } _EL_ } _EL_ ', 'private boolean isSlavoGermanic(String value){ _EL_   return value.indexOf(\'W\') > -1 || value.indexOf(\'K\') > -1 || value.indexOf("CZ") > -1 || value.indexOf("WITZ") > -1; _EL_ } _EL_ ', 'protected ChromeAnimation<?> createUpdateDiscardAnimatorSet(StackTab[] tabs,int spacing,float warpSize,float discardRange){ _EL_   ChromeAnimation<Animatable<?>> set=new ChromeAnimation<Animatable<?>>(); _EL_   int dyingTabsCount=0; _EL_   float firstDyingTabOffset=0; _EL_   for (int i=0; i < tabs.length; ++i) { _EL_     StackTab tab=tabs[i]; _EL_     addTiltScrollAnimation(set,tab.getLayoutTab(),0.0f,UNDISCARD_ANIMATION_DURATION,0); _EL_     if (tab.isDying()) { _EL_       dyingTabsCount++; _EL_       if (dyingTabsCount == 1) { _EL_         firstDyingTabOffset=getScreenPositionInScrollDirection(tab); _EL_       } _EL_     } _EL_   } _EL_   Interpolator interpolator=BakedBezierInterpolator.FADE_OUT_CURVE; _EL_   int newIndex=0; _EL_   for (int i=0; i < tabs.length; ++i) { _EL_     StackTab tab=tabs[i]; _EL_     long startTime=(long)Math.max(0,TAB_REORDER_START_SPAN / getScreenSizeInScrollDirection() * (getScreenPositionInScrollDirection(tab) - firstDyingTabOffset)); _EL_     if (tab.isDying()) { _EL_       float discard=tab.getDiscardAmount(); _EL_       if (discard == 0.0f)       discard=isDefaultDiscardDirectionPositive() ? 0.0f : -0.0f; _EL_       float s=Math.copySign(1.0f,discard); _EL_       long duration=(long)(DISCARD_ANIMATION_DURATION * (1.0f - Math.abs(discard / discardRange))); _EL_       addAnimation(set,tab,DISCARD_AMOUNT,discard,discardRange * s,duration,startTime,false,interpolator); _EL_     } _EL_  else { _EL_       if (tab.getDiscardAmount() != 0.f) { _EL_         addAnimation(set,tab,DISCARD_AMOUNT,tab.getDiscardAmount(),0.0f,UNDISCARD_ANIMATION_DURATION,0); _EL_       } _EL_       float newScrollOffset=StackTab.screenToScroll(spacing * newIndex,warpSize); _EL_       if (tab.getDiscardAmount() >= discardRange) { _EL_         tab.setScrollOffset(newScrollOffset); _EL_         tab.setScale(SCALE_AMOUNT); _EL_       } _EL_  else { _EL_         float start=tab.getScrollOffset(); _EL_         if (start != newScrollOffset) { _EL_           addAnimation(set,tab,SCROLL_OFFSET,start,newScrollOffset,TAB_REORDER_DURATION,startTime); _EL_         } _EL_       } _EL_       newIndex++; _EL_     } _EL_   } _EL_   return set; _EL_ } _EL_ ', 'public void message(LocoNetMessage m){ _EL_   if (m.getNumDataElements() != 6) { _EL_     return; _EL_   } _EL_   int b1=m.getElement(0) & 0xFF; _EL_   int b2=m.getElement(1) & 0xFF; _EL_   int b3=m.getElement(2) & 0xFF; _EL_   int b4=m.getElement(3) & 0x07; _EL_   if ((b1 == 0xD7) && ((b2 == 0x12) || (b2 == 0x17) || (b2 == 0x1F)) && (b3 == 0x00)) { _EL_     idBox.setSelectedIndex(b4 + 1); _EL_   } _EL_ } _EL_ ', 'void fixWhiteSpace(){ _EL_   final int index=mOutputBuilder.length() - 1; _EL_   if (index >= 0) { _EL_     final char lastCharacter=mOutputBuilder.charAt(index); _EL_     if (!Character.isWhitespace(lastCharacter)) { _EL_       mOutputBuilder.append(" "); _EL_     } _EL_   } _EL_ } _EL_ ', 'public void handleTblRequestHandlerListHrefDupActionRequest(RequestInvocationEvent event) throws ModelControlException { _EL_   try { _EL_     Map values=getValues(); _EL_     onBeforeSaveProfile(values); _EL_     setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values); _EL_     SCSOAPBindingRequestHandlerListDupViewBean vb=(SCSOAPBindingRequestHandlerListDupViewBean)getViewBean(SCSOAPBindingRequestHandlerListDupViewBean.class); _EL_     unlockPageTrail(); _EL_     passPgSessionMap(vb); _EL_     int idx=Integer.parseInt((String)getDisplayFieldValue(TBL_REQUEST_HANDLER_LIST_HREF_DUP_ACTION)); _EL_     vb.setDupIndex(idx); _EL_     vb.forwardTo(getRequestContext()); _EL_   } _EL_  catch (  AMConsoleException e) { _EL_     setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage()); _EL_   } _EL_ } _EL_ ', 'protected String doIt() throws Exception { _EL_   log.info("Selection=" + p_Selection + ", DateInvoiced="+ p_DateInvoiced+ ", AD_Org_ID="+ p_AD_Org_ID+ ", C_BPartner_ID="+ p_C_BPartner_ID+ ", M_InOut_ID="+ p_M_InOut_ID+ ", DocAction="+ p_docAction+ ", Consolidate="+ p_ConsolidateDocument); _EL_   String sql=null; _EL_   if (p_Selection) { _EL_     sql="SELECT M_InOut.* FROM M_InOut, T_Selection " + "WHERE M_InOut.DocStatus=\'CO\' AND M_InOut.IsSOTrx=\'Y\' " + " AND M_InOut.M_InOut_ID = T_Selection.T_Selection_ID "+ " AND T_Selection.AD_PInstance_ID=? "+ "ORDER BY M_InOut.M_InOut_ID"; _EL_   } _EL_  else { _EL_     sql="SELECT * FROM M_InOut o " + "WHERE DocStatus IN(\'CO\',\'CL\') AND IsSOTrx=\'Y\'"; _EL_     if (p_AD_Org_ID != 0)     sql+=" AND AD_Org_ID=?"; _EL_     if (p_C_BPartner_ID != 0)     sql+=" AND C_BPartner_ID=?"; _EL_     if (p_M_InOut_ID != 0)     sql+=" AND M_InOut_ID=?"; _EL_     sql+=" AND EXISTS (SELECT * FROM M_InOutLine ol " + "WHERE o.M_InOut_ID=ol.M_InOut_ID AND ol.IsInvoiced=\'N\') " + "ORDER BY M_InOut_ID"; _EL_   } _EL_   PreparedStatement pstmt=null; _EL_   try { _EL_     pstmt=DB.prepareStatement(sql,get_TrxName()); _EL_     int index=1; _EL_     if (p_Selection) { _EL_       pstmt.setInt(index,getAD_PInstance_ID()); _EL_     } _EL_  else { _EL_       if (p_AD_Org_ID != 0)       pstmt.setInt(index++,p_AD_Org_ID); _EL_       if (p_C_BPartner_ID != 0)       pstmt.setInt(index++,p_C_BPartner_ID); _EL_       if (p_M_InOut_ID != 0)       pstmt.setInt(index++,p_M_InOut_ID); _EL_     } _EL_   } _EL_  catch (  Exception e) { _EL_     log.log(Level.SEVERE,sql,e); _EL_   } _EL_   return generate(pstmt); _EL_ } _EL_ ', 'public void format(long inDate,StringBuilder buffer){ _EL_   buffer.append(format(inDate)); _EL_ } _EL_ ', 'private void attachHeader(SIPHeader h){ _EL_   if (h == null)   throw new IllegalArgumentException("null header!"); _EL_   try { _EL_     if (h instanceof SIPHeaderList) { _EL_       SIPHeaderList<?> hl=(SIPHeaderList<?>)h; _EL_       if (hl.isEmpty()) { _EL_         return; _EL_       } _EL_     } _EL_     attachHeader(h,false,false); _EL_   } _EL_  catch (  SIPDuplicateHeaderException ex) { _EL_   } _EL_ } _EL_ ', 'public static void expand(){ _EL_   String[] st=new String[L]; _EL_   int i; _EL_   for (i=0; i < R; i++)   st[i]="" + (char)i; _EL_   st[i++]=""; _EL_   int codeword=BinaryStdIn.readInt(W); _EL_   if (codeword == R)   return; _EL_   String val=st[codeword]; _EL_   while (true) { _EL_     BinaryStdOut.write(val); _EL_     codeword=BinaryStdIn.readInt(W); _EL_     if (codeword == R)     break; _EL_     String s=st[codeword]; _EL_     if (i == codeword)     s=val + val.charAt(0); _EL_     if (i < L)     st[i++]=val + s.charAt(0); _EL_     val=s; _EL_   } _EL_   BinaryStdOut.close(); _EL_ } _EL_ ', 'public int process(Callback[] callbacks,int state) throws AuthLoginException { _EL_   initAuthConfig(); _EL_   X509Certificate[] allCerts=null; _EL_   try { _EL_     HttpServletRequest servletRequest=getHttpServletRequest(); _EL_     if (servletRequest != null) { _EL_       allCerts=(X509Certificate[])servletRequest.getAttribute("javax.servlet.request.X509Certificate"); _EL_       if (allCerts == null || allCerts.length == 0) { _EL_         debug.message("Certificate: checking for cert passed in the URL."); _EL_         if (!portal_gw_cert_auth_enabled) { _EL_           debug.error("Certificate: cert passed " + "in URL not enabled for this client"); _EL_           throw new AuthLoginException(amAuthCert,"noURLCertAuth",null); _EL_         } _EL_         thecert=getPortalStyleCert(servletRequest); _EL_         allCerts=new X509Certificate[]{thecert}; _EL_       } _EL_  else { _EL_         if (portal_gw_cert_auth_enabled && portal_gw_cert_preferred) { _EL_           thecert=getPortalStyleCert(servletRequest); _EL_           allCerts=new X509Certificate[]{thecert}; _EL_         } _EL_  else { _EL_           if (debug.messageEnabled()) { _EL_             debug.message("Certificate: got all certs from " + "HttpServletRequest = {}",allCerts.length); _EL_           } _EL_           thecert=allCerts[0]; _EL_         } _EL_       } _EL_     } _EL_  else { _EL_       thecert=sendCallback(); _EL_     } _EL_     if (thecert == null) { _EL_       debug.message("Certificate: no cert passed in."); _EL_       throw new AuthLoginException(amAuthCert,"noCert",null); _EL_     } _EL_     getTokenFromCert(thecert); _EL_     storeUsernamePasswd(userTokenId,null); _EL_     if (debug.messageEnabled()) { _EL_       debug.message("in Certificate. userTokenId=" + userTokenId + " from getTokenFromCert"); _EL_     } _EL_   } _EL_  catch (  AuthLoginException e) { _EL_     setFailureID(userTokenId); _EL_     debug.error("Certificate:  exiting validate with exception",e); _EL_     throw new AuthLoginException(amAuthCert,"noCert",null); _EL_   } _EL_   if (debug.messageEnabled()) { _EL_     debug.message("Got client cert =\\n" + thecert.toString()); _EL_   } _EL_   if (amAuthCert_chkCertInLDAP.equalsIgnoreCase("false") && amAuthCert_chkCRL.equalsIgnoreCase("false") && !ocspEnabled) { _EL_     return ISAuthConstants.LOGIN_SUCCEED; _EL_   } _EL_   if (ldapParam == null) { _EL_     setLdapStoreParam(); _EL_   } _EL_   if (amAuthCert_chkCertInLDAP.equalsIgnoreCase("true")) { _EL_     X509Certificate ldapcert=AMCertStore.getRegisteredCertificate(ldapParam,thecert,amAuthCert_chkAttrCertInLDAP); _EL_     if (ldapcert == null) { _EL_       debug.error("X509Certificate: getRegCertificate is null"); _EL_       setFailureID(userTokenId); _EL_       throw new AuthLoginException(amAuthCert,"CertNoReg",null); _EL_     } _EL_   } _EL_   int ret=doJCERevocationValidation(allCerts); _EL_   if (ret != ISAuthConstants.LOGIN_SUCCEED) { _EL_     debug.error("X509Certificate:CRL / OCSP verify failed."); _EL_     setFailureID(userTokenId); _EL_     throw new AuthLoginException(amAuthCert,"CertVerifyFailed",null); _EL_   } _EL_   return ISAuthConstants.LOGIN_SUCCEED; _EL_ } _EL_ ', 'public static GenomeRelationships load(BufferedReader reader) throws IOException { _EL_   final GenomeRelationships ped=new GenomeRelationships(); _EL_   String line; _EL_   while ((line=reader.readLine()) != null) { _EL_     line=line.trim(); _EL_     if (line.startsWith("#") || line.matches("^\\\\s*$")) { _EL_       continue; _EL_     } _EL_     if (line.matches("^genome\\\\s+[-a-zA-Z0-9_]+(\\\\s+[-a-zA-Z0-9_]+?=[^\\\\s]*)*$")) { _EL_       parseGenomeLine(ped,line); _EL_       continue; _EL_     } _EL_     if (line.matches("^[a-z]+-[a-z]+\\\\s+[-a-zA-Z0-9_]+\\\\s+[-a-zA-Z0-9_]+(\\\\s+[-a-zA-Z0-9_]+?=[^\\\\s]*)*$")) { _EL_       parseRelationshipLine(ped,line); _EL_       continue; _EL_     } _EL_     throw new NoTalkbackSlimException("unrecognized line in relationships: \'" + line + "\'"); _EL_   } _EL_   return ped; _EL_ } _EL_ ', 'protected void redefine(int nodetype,String namespace,String localName){ _EL_   this.nodetype=nodetype; _EL_   this.namespace=namespace; _EL_   this.localName=localName; _EL_   this.hash=nodetype + namespace.hashCode() + localName.hashCode(); _EL_ } _EL_ ', 'public TagKeyValueMapConverter(boolean nullIfEmpty,String idKey){ _EL_   Objects.requireNonNull(idKey); _EL_   this.nullIfEmpty=nullIfEmpty; _EL_   this.addId=true; _EL_   this.idKey=idKey; _EL_ } _EL_ ', 'private String generateScreenOnOrOffUtternace(int feedbackIndex){ _EL_   int resourceId=(feedbackIndex == INDEX_SCREEN_ON) ? R.string.template_screen_on : R.string.template_screen_off; _EL_   String template=mContext.getString(resourceId); _EL_   int currentRingerVolume=mAudioManager.getStreamVolume(AudioManager.STREAM_RING); _EL_   int maxRingerVolume=mAudioManager.getStreamMaxVolume(AudioManager.STREAM_RING); _EL_   int volumePercent=(100 / maxRingerVolume) * currentRingerVolume; _EL_   int adjustment=volumePercent % 10; _EL_   if (adjustment < 5) { _EL_     volumePercent-=adjustment; _EL_   } _EL_  else   if (adjustment > 5) { _EL_     volumePercent+=(10 - adjustment); _EL_   } _EL_   return String.format(template,volumePercent); _EL_ } _EL_ ', 'private void log(String message,String level,String levelColor,PrintStream ps){ _EL_   StringBuilder builder=new StringBuilder(); _EL_   if (!level.equals("raw"))   builder.append(getPrefix(level,levelColor)); _EL_   builder.append(message); _EL_   String ts=builder.toString(); _EL_   ps.println(ts); _EL_   for (  LogHandler hand : handlers)   hand.onLog(level,message,ts,this); _EL_ } _EL_ ', 'public void error(Level level,String messageId,String data[],Object session) throws LogException { _EL_   error(level,messageId,data,session,null); _EL_ } _EL_ ', 'private static void checkForXStream(){ _EL_   try { _EL_     Class.forName("com.thoughtworks.xstream.XStream"); _EL_     m_Present=true; _EL_   } _EL_  catch (  Exception e) { _EL_     m_Present=false; _EL_   } _EL_ } _EL_ ', 'private void readServiceConfig() throws SSOException, SMSException { _EL_   if (debug.messageEnabled()) { _EL_     debug.message("G11Settings::ReadServiceConfig"); _EL_   } _EL_   SSOToken internalToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance()); _EL_   serviceSchemaManager=new ServiceSchemaManager(G11N_SETTINGS_SERVICE_NAME,internalToken); _EL_   ServiceSchema gsc=serviceSchemaManager.getGlobalSchema(); _EL_   rawServiceData=gsc.getAttributeDefaults(); _EL_ } _EL_ ', 'private void rotateLeft(Node<K,V> root){ _EL_   Node<K,V> left=root.left; _EL_   Node<K,V> pivot=root.right; _EL_   Node<K,V> pivotLeft=pivot.left; _EL_   Node<K,V> pivotRight=pivot.right; _EL_   root.right=pivotLeft; _EL_   if (pivotLeft != null) { _EL_     pivotLeft.parent=root; _EL_   } _EL_   replaceInParent(root,pivot); _EL_   pivot.left=root; _EL_   root.parent=pivot; _EL_   root.height=Math.max(left != null ? left.height : 0,pivotLeft != null ? pivotLeft.height : 0) + 1; _EL_   pivot.height=Math.max(root.height,pivotRight != null ? pivotRight.height : 0) + 1; _EL_ } _EL_ ', 'public void index(Iterator tuples,String field){ _EL_   while (tuples.hasNext()) { _EL_     Tuple t=(Tuple)tuples.next(); _EL_     index(t,field); _EL_   } _EL_ } _EL_ ', 'public static String convertISO8601DurationToNormalTime(String isoTime){ _EL_   String formattedTime=new String(); _EL_   if (isoTime.contains("H") && isoTime.contains("M") && isoTime.contains("S")) { _EL_     String hours=isoTime.substring(isoTime.indexOf(\'T\') + 1,isoTime.indexOf(\'H\')); _EL_     String minutes=isoTime.substring(isoTime.indexOf(\'H\') + 1,isoTime.indexOf(\'M\')); _EL_     String seconds=isoTime.substring(isoTime.indexOf(\'M\') + 1,isoTime.indexOf(\'S\')); _EL_     formattedTime=hours + ":" + formatTo2Digits(minutes)+ ":"+ formatTo2Digits(seconds); _EL_   } _EL_  else   if (!isoTime.contains("H") && isoTime.contains("M") && isoTime.contains("S")) { _EL_     String minutes=isoTime.substring(isoTime.indexOf(\'T\') + 1,isoTime.indexOf(\'M\')); _EL_     String seconds=isoTime.substring(isoTime.indexOf(\'M\') + 1,isoTime.indexOf(\'S\')); _EL_     formattedTime=minutes + ":" + formatTo2Digits(seconds); _EL_   } _EL_  else   if (isoTime.contains("H") && !isoTime.contains("M") && isoTime.contains("S")) { _EL_     String hours=isoTime.substring(isoTime.indexOf(\'T\') + 1,isoTime.indexOf(\'H\')); _EL_     String seconds=isoTime.substring(isoTime.indexOf(\'H\') + 1,isoTime.indexOf(\'S\')); _EL_     formattedTime=hours + ":00:" + formatTo2Digits(seconds); _EL_   } _EL_  else   if (isoTime.contains("H") && isoTime.contains("M") && !isoTime.contains("S")) { _EL_     String hours=isoTime.substring(isoTime.indexOf(\'T\') + 1,isoTime.indexOf(\'H\')); _EL_     String minutes=isoTime.substring(isoTime.indexOf(\'H\') + 1,isoTime.indexOf(\'M\')); _EL_     formattedTime=hours + ":" + formatTo2Digits(minutes)+ ":00"; _EL_   } _EL_  else   if (!isoTime.contains("H") && !isoTime.contains("M") && isoTime.contains("S")) { _EL_     String seconds=isoTime.substring(isoTime.indexOf(\'T\') + 1,isoTime.indexOf(\'S\')); _EL_     formattedTime="0:" + formatTo2Digits(seconds); _EL_   } _EL_  else   if (!isoTime.contains("H") && isoTime.contains("M") && !isoTime.contains("S")) { _EL_     String minutes=isoTime.substring(isoTime.indexOf(\'T\') + 1,isoTime.indexOf(\'M\')); _EL_     formattedTime=minutes + ":00"; _EL_   } _EL_  else   if (isoTime.contains("H") && !isoTime.contains("M") && !isoTime.contains("S")) { _EL_     String hours=isoTime.substring(isoTime.indexOf(\'T\') + 1,isoTime.indexOf(\'H\')); _EL_     formattedTime=hours + ":00:00"; _EL_   } _EL_   return formattedTime; _EL_ } _EL_ ', 'private <T>InjectScope<T> findScope(AnnotatedElement annElement){ _EL_   for (  Annotation ann : annElement.getAnnotations()) { _EL_     Class<? extends Annotation> annType=ann.annotationType(); _EL_     if (annType.isAnnotationPresent(Scope.class)) { _EL_       Supplier<InjectScope<T>> scopeGen=(Supplier)_scopeMap.get(annType); _EL_       if (scopeGen != null) { _EL_         return scopeGen.get(); _EL_       } _EL_  else { _EL_         log.fine(L.l("@{0} is an unknown scope",annType.getSimpleName())); _EL_       } _EL_     } _EL_   } _EL_   return new InjectScopeFactory<>(); _EL_ } _EL_ ', 'public int size(){ _EL_   return parts.size(); _EL_ } _EL_ ', 'protected <T>Database makeSimpleDatabase(String filename,int expectedSize,ListParameterization params,Class<?>[] filters){ _EL_   try (InputStream is=open(filename)){ _EL_     List<ObjectFilter> filterlist=new ArrayList<>(); _EL_     filterlist.add(new FixedDBIDsFilter(1)); _EL_     if (filters != null) { _EL_       for (      Class<?> filtercls : filters) { _EL_         ObjectFilter filter=ClassGenericsUtil.parameterizeOrAbort(filtercls,params); _EL_         filterlist.add(filter); _EL_       } _EL_     } _EL_     NumberVectorLabelParser<DoubleVector> parser=new NumberVectorLabelParser<>(DoubleVector.FACTORY); _EL_     InputStreamDatabaseConnection dbc=new InputStreamDatabaseConnection(is,filterlist,parser); _EL_     params.addParameter(AbstractDatabase.Parameterizer.DATABASE_CONNECTION_ID,dbc); _EL_     Database db=ClassGenericsUtil.parameterizeOrAbort(StaticArrayDatabase.class,params); _EL_     testParameterizationOk(params); _EL_     db.initialize(); _EL_     Relation<?> rel=db.getRelation(TypeUtil.ANY); _EL_     assertEquals("Database size does not match.",expectedSize,rel.size()); _EL_     return db; _EL_   } _EL_  catch (  IOException e) { _EL_     fail("Test data " + filename + " not found."); _EL_     return null; _EL_   } _EL_ } _EL_ ', 'public static void readSkel(BufferedReader reader) throws IOException { _EL_   List<String> lines=new ArrayList<String>(); _EL_   StringBuilder section=new StringBuilder(); _EL_   String ln; _EL_   while ((ln=reader.readLine()) != null) { _EL_     if (ln.startsWith("---")) { _EL_       lines.add(section.toString()); _EL_       section.setLength(0); _EL_     } _EL_  else { _EL_       section.append(ln); _EL_       section.append(NL); _EL_     } _EL_   } _EL_   if (section.length() > 0)   lines.add(section.toString()); _EL_   if (lines.size() != size) { _EL_     Out.error(ErrorMessages.WRONG_SKELETON); _EL_     throw new GeneratorException(); _EL_   } _EL_   line=new String[size]; _EL_   for (int i=0; i < size; i++)   line[i]=lines.get(i); _EL_ } _EL_ ', 'public static boolean[][] loadImage(File file,char offChar) throws FileNotFoundException, RuntimeException { _EL_   ArrayList<String> rows=loadImagePad(file,offChar); _EL_   String s=rows.get(0); _EL_   boolean[][] img=new boolean[rows.size()][s.length()]; _EL_   for (int i=0; i < rows.size(); i++) { _EL_     s=rows.get(i); _EL_     for (int j=0; j < s.length(); j++) { _EL_       char c=s.charAt(j); _EL_       if (c == offChar) { _EL_         img[i][j]=false; _EL_       } _EL_  else { _EL_         img[i][j]=true; _EL_       } _EL_     } _EL_   } _EL_   return img; _EL_ } _EL_ ', 'protected void wrapContent(){ _EL_   if (!DO_WRAP) { _EL_     return; _EL_   } _EL_   if (mText == null) { _EL_     return; _EL_   } _EL_   Canvas c=new Canvas(); _EL_   c.setFont(mFont); _EL_   FontMetrics fm=c.getFontMetrics(mFont); _EL_   String string=getText(); _EL_   if (mToUpperCase) { _EL_     string=string.toUpperCase(); _EL_   } _EL_   int tw=fm.stringWidth(string) + 2 * (mHorizontalPadding + mHorizontalMargin); _EL_   int th=fm.getMaxAscent() + 2 * fm.getMaxDescent() + 2 * (mVerticalPadding + mVerticalMargin); _EL_   mWidget.setWrapWidth(tw); _EL_   mWidget.setWrapHeight(th); _EL_   if (tw > mWidget.getMinWidth()) { _EL_     mWidget.setMinWidth(tw); _EL_   } _EL_   if (th > mWidget.getMinHeight()) { _EL_     mWidget.setMinHeight(th); _EL_   } _EL_   if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) { _EL_     mWidget.setWidth(tw); _EL_   } _EL_   if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) { _EL_     mWidget.setHeight(th); _EL_   } _EL_   if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) { _EL_     if (mWidget.getWidth() <= mWidget.getMinWidth()) { _EL_       mWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT); _EL_     } _EL_   } _EL_   if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) { _EL_     if (mWidget.getHeight() <= mWidget.getMinHeight()) { _EL_       mWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT); _EL_     } _EL_   } _EL_   int baseline=fm.getAscent() + fm.getMaxDescent() + mVerticalPadding+ mVerticalMargin; _EL_   mWidget.setBaselineDistance(baseline); _EL_ } _EL_ ', 'public static boolean isCookieSecure(){ _EL_   return secureCookie; _EL_ } _EL_ ', 'public static void main(String[] args) throws Exception { _EL_   final JFrame frame=new HTMLTest(args); _EL_   frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); _EL_   frame.pack(); _EL_   frame.setVisible(true); _EL_ } _EL_ ', 'public void writeFile(String name,String mimeType,String fileName,byte[] data) throws IOException { _EL_   if (data == null) { _EL_     throw new IllegalArgumentException("Data cannot be null."); _EL_   } _EL_   if (fileName == null || fileName.isEmpty()) { _EL_     throw new IllegalArgumentException("File name cannot be null or empty."); _EL_   } _EL_   out.writeBytes(PREFIX); _EL_   out.writeBytes(boundary); _EL_   out.writeBytes(NEWLINE); _EL_   out.writeBytes("Content-Disposition: form-data; name=\\"" + name + "\\"; filename=\\""+ fileName+ "\\""); _EL_   out.writeBytes(NEWLINE); _EL_   if (mimeType != null) { _EL_     out.writeBytes("Content-Type: " + mimeType); _EL_     out.writeBytes(NEWLINE); _EL_   } _EL_   out.writeBytes(NEWLINE); _EL_   out.write(data,0,data.length); _EL_   out.writeBytes(NEWLINE); _EL_   out.flush(); _EL_ } _EL_ ', 'public Boolean isHod(final Long assignId){ _EL_   final List<HeadOfDepartments> hodList=employeeDepartmentRepository.getAllHodDepartments(assignId); _EL_   return !hodList.isEmpty(); _EL_ } _EL_ ', 'public void handleHeaderColumnPressed(Point p){ _EL_   JTableHeader th=TABLE.getTableHeader(); _EL_   int col=th.columnAtPoint(p); _EL_   int c=TABLE.convertColumnIndexToModel(col); _EL_   if (c != -1) { _EL_     TABLE.setPressedColumnIndex(c); _EL_     th.repaint(th.getHeaderRect(col)); _EL_   } _EL_ } _EL_ ', 'public String documentationReferenceGuideUrl(){ _EL_   return properties.getProperty("doc.guide.ref.url"); _EL_ } _EL_ ', 'public void insertThinkTime(){ _EL_   ScriptStep thinkTimeScriptStep=ScriptStepFactory.createThinkTime(getMinThinkTime(),getMaxThinkTime()); _EL_   steps.add(getInsertIndex(),thinkTimeScriptStep); _EL_   minThinkTime=""; _EL_   maxThinkTime=""; _EL_   reindexScriptSteps(); _EL_ } _EL_ ', 'private void codeUnwrapReturnValue(Class<?> type,DataOutputStream out) throws IOException { _EL_   if (type.isPrimitive()) { _EL_     PrimitiveTypeInfo prim=PrimitiveTypeInfo.get(type); _EL_     out.writeByte(opc_checkcast); _EL_     out.writeShort(cp.getClass(prim.wrapperClassName)); _EL_     out.writeByte(opc_invokevirtual); _EL_     out.writeShort(cp.getMethodRef(prim.wrapperClassName,prim.unwrapMethodName,prim.unwrapMethodDesc)); _EL_     if (type == int.class || type == boolean.class || type == byte.class || type == char.class || type == short.class) { _EL_       out.writeByte(opc_ireturn); _EL_     } _EL_  else     if (type == long.class) { _EL_       out.writeByte(opc_lreturn); _EL_     } _EL_  else     if (type == float.class) { _EL_       out.writeByte(opc_freturn); _EL_     } _EL_  else     if (type == double.class) { _EL_       out.writeByte(opc_dreturn); _EL_     } _EL_  else { _EL_       throw new AssertionError(); _EL_     } _EL_   } _EL_  else { _EL_     out.writeByte(opc_checkcast); _EL_     out.writeShort(cp.getClass(dotToSlash(type.getName()))); _EL_     out.writeByte(opc_areturn); _EL_   } _EL_ } _EL_ ', 'public static String[] lsDirectories(String directory) throws Exception { _EL_   String[] tmp=ls(directory); _EL_   ArrayList<String> files=new ArrayList<>(); _EL_   for (  String s : tmp) { _EL_     if (isDirectory(directory + File.separator + s))     files.add(s); _EL_   } _EL_   return files.toArray(new String[files.size()]); _EL_ } _EL_ ', '@Nullable public Dimension adjust(@NotNull Dimension newPreferredSize,@Nullable Dimension oldPreferredSize,@NotNull EditorImpl editor){ _EL_   if (oldPreferredSize == null || mySkip) { _EL_     return newPreferredSize; _EL_   } _EL_   if (newPreferredSize.height != oldPreferredSize.height) { _EL_     return newPreferredSize; _EL_   } _EL_   stripTimings(); _EL_   myTimings.add(System.currentTimeMillis()); _EL_   if (myTimings.size() < FREQUENT_SIZE_CHANGES_NUMBER) { _EL_     return newPreferredSize; _EL_   } _EL_   boolean increaseWidth=newPreferredSize.width > oldPreferredSize.width; _EL_   Dimension result; _EL_   if (increaseWidth) { _EL_     final int spaceWidth=EditorUtil.getSpaceWidth(Font.PLAIN,editor); _EL_     newPreferredSize.width+=myReserveColumns * spaceWidth; _EL_     myReserveColumns+=3; _EL_     result=newPreferredSize; _EL_   } _EL_  else { _EL_     result=oldPreferredSize; _EL_   } _EL_   scheduleSizeUpdate(editor); _EL_   return result; _EL_ } _EL_ ', 'private void configureMessageLabel(JLabel label){ _EL_   Color color=(Color)DefaultLookup.get(optionPane,this,"OptionPane.messageForeground"); _EL_   if (color != null) { _EL_     label.setForeground(color); _EL_   } _EL_   Font messageFont=(Font)DefaultLookup.get(optionPane,this,"OptionPane.messageFont"); _EL_   if (messageFont != null) { _EL_     label.setFont(messageFont); _EL_   } _EL_ } _EL_ ', 'public final ArrayList<PositionRecord> loadPositions(final int session,final Double minLat,final Double maxLat,final Double minLon,final Double maxLon){ _EL_   final ArrayList<PositionRecord> positions=new ArrayList<>(); _EL_   String selection=Schema.COL_SESSION_ID + " = ?"; _EL_   Cursor cursor=null; _EL_   List<String> selectionArgs=null; _EL_   if (minLat != null & maxLat != null && minLon != null && maxLon != null) { _EL_     selectionArgs=new ArrayList<>(); _EL_     selectionArgs.add(String.valueOf(session)); _EL_     selectionArgs.add(String.valueOf(minLat)); _EL_     selectionArgs.add(String.valueOf(maxLat)); _EL_     selectionArgs.add(String.valueOf(minLon)); _EL_     selectionArgs.add(String.valueOf(maxLon)); _EL_     selection+="AND (" + Schema.COL_LATITUDE + " > ? AND "+ Schema.COL_LATITUDE+ " < ?) AND ("+ Schema.COL_LONGITUDE+ " > ? AND "+ Schema.COL_LONGITUDE+ " < ?)"; _EL_     cursor=contentResolver.query(ContentProvider.CONTENT_URI_POSITION,null,selection,selectionArgs.toArray(new String[0]),Schema.COL_TIMESTAMP); _EL_   } _EL_  else { _EL_     Log.v(TAG,"No boundaries provided, loading all positions"); _EL_     cursor=contentResolver.query(ContentProvider.CONTENT_URI_POSITION,null,null,null,Schema.COL_TIMESTAMP); _EL_   } _EL_   while (cursor.moveToNext()) { _EL_     positions.add(positionFromCursor(cursor)); _EL_   } _EL_   cursor.close(); _EL_   return positions; _EL_ } _EL_ ', 'public static CheckBox createToggle(String text,Image icon){ _EL_   CheckBox cb=new CheckBox(text,icon); _EL_   cb.setToggle(true); _EL_   return cb; _EL_ } _EL_ ', 'private synchronized static void removeChildCharacterData(Node node,boolean deep){ _EL_   NodeList list=node.getChildNodes(); _EL_   for (int i=list.getLength(); i >= 0; i--) { _EL_     Node n=list.item(i); _EL_     if (n == null)     continue; _EL_     if (n instanceof CharacterData)     node.removeChild(XMLCaster.toRawNode(n)); _EL_  else     if (deep)     removeChildCharacterData(n,deep); _EL_   } _EL_ } _EL_ ', 'private void addSearchHistory(){ _EL_   addSearchHistory(tfSearchEditor.getText()); _EL_ } _EL_ ', 'public ExtensionFileFilter(String description,String extension){ _EL_   this.description=description; _EL_   this.extensions=new HashSet<String>(); _EL_   extensions.add(extension.toLowerCase()); _EL_   defaultExtension=extension; _EL_ } _EL_ ', 'public void restartAndInstallIfNecessary(){ _EL_   File patchesDir=new File(mySdkHandler.getLocation(),PatchInstallerUtil.PATCHES_DIR_NAME); _EL_   StudioLoggerProgressIndicator progress=new StudioLoggerProgressIndicator(PatchInstallerFactory.class); _EL_   if (patchesDir.exists()) { _EL_     File[] subDirs=patchesDir.listFiles(null); _EL_     for (    File patchDir : subDirs) { _EL_       processPatch(mySdkHandler.getLocation(),progress,patchDir); _EL_     } _EL_   } _EL_ } _EL_ ', 'public BigDecimal sum(String sqlExpression){ _EL_   return aggregate(sqlExpression,AGGREGATE_SUM); _EL_ } _EL_ ', 'void removeEQ(Object o){ _EL_   final ReentrantLock lock=this.lock; _EL_   lock.lock(); _EL_   try { _EL_     Object[] array=queue; _EL_     for (int i=0, n=size; i < n; i++) { _EL_       if (o == array[i]) { _EL_         removeAt(i); _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   finally { _EL_     lock.unlock(); _EL_   } _EL_ } _EL_ ', 'private synchronized String readInputStream(InputStreamReader inputStreamReader) throws IOException, BadLocationException { _EL_   BufferedReader bufferedReader=null; _EL_   try { _EL_     bufferedReader=new BufferedReader(inputStreamReader); _EL_     String newLine="\\n"; _EL_     StringBuffer sb=new StringBuffer(); _EL_     String line; _EL_     while ((line=bufferedReader.readLine()) != null) { _EL_       sb.append(line + newLine); _EL_     } _EL_     return sb.toString(); _EL_   } _EL_   finally { _EL_     if (null != bufferedReader)     bufferedReader.close(); _EL_     if (null != inputStreamReader)     inputStreamReader.close(); _EL_   } _EL_ } _EL_ ', 'public void addColumn(Class classType,boolean readOnly,String header){ _EL_   m_modelHeaderClass.add(classType); _EL_   setColumnReadOnly(m_modelHeaderClass.size() - 1,readOnly); _EL_   addColumn(header); _EL_   WListItemRenderer renderer=(WListItemRenderer)getItemRenderer(); _EL_   renderer.setColumnClass((renderer.getNoColumns() - 1),classType); _EL_   return; _EL_ } _EL_ ', 'private void processRunStartedTag(String identifier){ _EL_   Pattern numTestsPattern=Pattern.compile("Running (\\\\d+) test[s]? from .*"); _EL_   Matcher numTests=numTestsPattern.matcher(identifier); _EL_   if (numTests.find()) { _EL_     try { _EL_       mNumTestsExpected=Integer.parseInt(numTests.group(1)); _EL_     } _EL_  catch (    NumberFormatException e) { _EL_       Log.e(LOG_TAG,"Unable to determine number of tests expected, received: " + numTests.group(1)); _EL_     } _EL_   } _EL_   if (mNumTestsExpected > 0) { _EL_     reportTestRunStarted(); _EL_     mNumTestsRun=0; _EL_     mTestRunInProgress=true; _EL_   } _EL_ } _EL_ ', 'private void makeOkPath(){ _EL_   path1.reset(); _EL_   int w2=getMeasuredWidth() / 2; _EL_   int h2=getMeasuredHeight() / 2; _EL_   double a=Math.cos(Math.toRadians(25)) * getRadius(); _EL_   double c=Math.sin(Math.toRadians(25)) * getRadius(); _EL_   double l=Math.cos(Math.toRadians(53)) * 2 * a; _EL_   double b=Math.sin(Math.toRadians(53)) * l; _EL_   double m=Math.cos(Math.toRadians(53)) * l; _EL_   path1.moveTo((float)(w2 - a),(float)(h2 - c)); _EL_   path1.lineTo((float)(w2 - a + m),(float)(h2 - c + Math.sin(Math.toRadians(53)) * l)); _EL_   path1.lineTo((float)(w2 + a),(float)(h2 - c)); _EL_   pathMeasure1.setPath(path1,false); _EL_   mMarkOklength=pathMeasure1.getLength(); _EL_ } _EL_ ', 'protected List<String> addWhitespace(List<String> list){ _EL_   List<String> whitespaceList=new ArrayList<>(); _EL_   for (  String value : list) { _EL_     whitespaceList.add(addWhitespace(value)); _EL_   } _EL_   return whitespaceList; _EL_ } _EL_ ', 'private void killConsist(){ _EL_   if (validLocoAdr(locoTextField1.getText()) < 0) { _EL_     return; _EL_   } _EL_   int locoAddr=getLocoAddr(locoTextField1,adrButton1); _EL_   sendNceBinaryCommand(locoAddr,NceBinaryCommand.LOCO_CMD_KILL_CONSIST,(byte)0); _EL_ } _EL_ ', '@SuppressWarnings("unchecked") protected final void ensureCapacity(long targetSize){ _EL_   long capacity=capacity(); _EL_   if (targetSize > capacity) { _EL_     inflateSpine(); _EL_     for (int i=spineIndex + 1; targetSize > capacity; i++) { _EL_       if (i >= spine.length) { _EL_         int newSpineSize=spine.length * 2; _EL_         spine=Arrays.copyOf(spine,newSpineSize); _EL_         priorElementCount=Arrays.copyOf(priorElementCount,newSpineSize); _EL_       } _EL_       int nextChunkSize=chunkSize(i); _EL_       spine[i]=(E[])new Object[nextChunkSize]; _EL_       priorElementCount[i]=priorElementCount[i - 1] + spine[i - 1].length; _EL_       capacity+=nextChunkSize; _EL_     } _EL_   } _EL_ } _EL_ ', 'public void write(String key,byte[] newValue) throws Exception { _EL_   Map<String,byte[]> entry=new HashMap<>(); _EL_   entry.put(key,newValue); _EL_   write(entry); _EL_ } _EL_ ', 'public Properties readSettings(){ _EL_   try { _EL_     String pacScriptUrl=detectScriptUrlPerDHCP(); _EL_     if (pacScriptUrl == null) { _EL_       pacScriptUrl=detectScriptUrlPerDNS(); _EL_     } _EL_     if (pacScriptUrl == null) { _EL_       return null; _EL_     } _EL_     Properties result=new Properties(); _EL_     result.setProperty("url",pacScriptUrl); _EL_     return result; _EL_   } _EL_  catch (  IOException e) { _EL_     return new Properties(); _EL_   } _EL_ } _EL_ ', "public Element fullPath(ManagedObjectReference obj) throws InvalidPropertyFaultMsg, RuntimeFaultFaultMsg, FinderException { _EL_   List<ObjectContent> set=ancestrySet(obj); _EL_   Map<MoRef,Element> childToParent=new HashMap<>(); _EL_   for (  ObjectContent cont : set) { _EL_     MoRef key=new MoRef(cont.getObj()); _EL_     ManagedObjectReference parentRef=getParent(cont); _EL_     Element parent; _EL_     if (parentRef != null) { _EL_       parent=Element.make(parentRef,getName(cont)); _EL_     } _EL_  else { _EL_       parent=Element.make(cont.getObj(),getName(cont)); _EL_     } _EL_     childToParent.put(key,parent); _EL_   } _EL_   MoRef next=new MoRef(obj); _EL_   List<String> path=new ArrayList<>(); _EL_   while (true) { _EL_     Element parent=childToParent.get(next); _EL_     path.add(parent.path); _EL_     if (next.equals(new MoRef(parent.object))) { _EL_       break; _EL_     } _EL_     next=new MoRef(parent.object); _EL_   } _EL_   Collections.reverse(path); _EL_   StringBuilder sb=new StringBuilder(); _EL_   for (  String s : path) { _EL_     sb.append('/'); _EL_     sb.append(s); _EL_   } _EL_   return Element.make(obj,sb.toString()); _EL_ } _EL_ ", 'private boolean arrayKeyValueExists(String key,String value){ _EL_   if (visitedPost.containsKey(key)) { _EL_     for (    String s : visitedPost.get(key)) { _EL_       if (s.equals(value)) { _EL_         return true; _EL_       } _EL_     } _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public static String rightTrim(final String value){ _EL_   validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER); _EL_   return value.replaceAll("\\\\s+$",""); _EL_ } _EL_ ', 'public static Object[] ordinalArray(TupleSet tuples,String field){ _EL_   return ordinalArray(tuples,field,DefaultLiteralComparator.getInstance()); _EL_ } _EL_ ', 'protected <T extends AbstractOptionValue<?,?>>AbstractOptions(Function<T,T> valueFilter,AbstractOptions baseOptions,Iterable<T> values){ _EL_   requireNonNull(baseOptions,"baseOptions"); _EL_   requireNonNull(valueFilter,"valueFilter"); _EL_   requireNonNull(values,"values"); _EL_   valueMap=new IdentityHashMap<>(baseOptions.valueMap); _EL_   putAll(valueFilter,StreamSupport.stream(values.spliterator(),false)); _EL_ } _EL_ ', 'protected void prepareDataSet(){ _EL_   dataSet1=Arrays.asList(new String[]{"a","b","c"}); _EL_   dataSet2=Arrays.asList(new String[]{"d","e","f"}); _EL_   dataSet3=Arrays.asList(new String[]{"b","c","a","d"}); _EL_ } _EL_ ', 'public static Set updateAndGetRemovableOCs(Set origSet,Set removeOCs){ _EL_   Set returnOCs=removeOCs; _EL_   if (removeOCs != null && !removeOCs.isEmpty()) { _EL_     returnOCs=new HashSet(); _EL_     Iterator itr1=origSet.iterator(); _EL_     while (itr1.hasNext()) { _EL_       String origOC=(String)itr1.next(); _EL_       Iterator itr2=removeOCs.iterator(); _EL_       while (itr2.hasNext()) { _EL_         String removeOC=(String)itr2.next(); _EL_         if (origOC.equalsIgnoreCase(removeOC)) { _EL_           returnOCs.add(origOC); _EL_           break; _EL_         } _EL_       } _EL_     } _EL_     origSet.removeAll(returnOCs); _EL_   } _EL_   return returnOCs; _EL_ } _EL_ ', 'private int checkZoneLink(SpannableStringBuilder out,String in,int start){ _EL_   int pos=start + 3; _EL_   StringBuilder temp=new StringBuilder(); _EL_   String targetString=in.substring(pos,Math.min(in.length(),pos + 20)); _EL_   boolean prevIsDash=false; _EL_   for (int i=0; i < targetString.length(); i++) { _EL_     char c=targetString.charAt(i); _EL_     if ((c >= \'a\' && c <= \'z\') || (c >= \'0\' && c <= \'9\')) { _EL_       temp.append(c); _EL_       prevIsDash=false; _EL_     } _EL_  else     if (c == \'-\') { _EL_       if (i == 0) { _EL_         return -1; _EL_       } _EL_       if (prevIsDash) { _EL_         temp.deleteCharAt(temp.length() - 1); _EL_         break; _EL_       } _EL_       temp.append(c); _EL_       prevIsDash=true; _EL_     } _EL_  else { _EL_       if (prevIsDash) { _EL_         temp.deleteCharAt(temp.length() - 1); _EL_       } _EL_       break; _EL_     } _EL_   } _EL_   String zone=temp.toString(); _EL_   if (zone.length() < 3 || zone.equalsIgnoreCase("null")) { _EL_     return -1; _EL_   } _EL_   out.append(zone); _EL_   return pos + zone.length() - 1; _EL_ } _EL_ ', 'private void updateExistingRow(final SQLiteDatabase database,final long id,boolean bumpCount){ _EL_   String stringId=String.valueOf(id); _EL_   database.beginTransaction(); _EL_   final Cursor cursor=database.query(SongPlayCountColumns.NAME,null,WHERE_ID_EQUALS,new String[]{stringId},null,null,null); _EL_   if (cursor != null && cursor.moveToFirst()) { _EL_     int lastUpdatedIndex=cursor.getColumnIndex(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX); _EL_     int lastUpdatedWeek=cursor.getInt(lastUpdatedIndex); _EL_     int weekDiff=mNumberOfWeeksSinceEpoch - lastUpdatedWeek; _EL_     if (Math.abs(weekDiff) >= NUM_WEEKS) { _EL_       deleteEntry(database,stringId); _EL_       if (bumpCount) { _EL_         createNewPlayedEntry(database,id); _EL_       } _EL_     } _EL_  else     if (weekDiff != 0) { _EL_       int[] playCounts=new int[NUM_WEEKS]; _EL_       if (weekDiff > 0) { _EL_         for (int i=0; i < NUM_WEEKS - weekDiff; i++) { _EL_           playCounts[i + weekDiff]=cursor.getInt(getColumnIndexForWeek(i)); _EL_         } _EL_       } _EL_  else       if (weekDiff < 0) { _EL_         for (int i=0; i < NUM_WEEKS + weekDiff; i++) { _EL_           playCounts[i]=cursor.getInt(getColumnIndexForWeek(i - weekDiff)); _EL_         } _EL_       } _EL_       if (bumpCount) { _EL_         playCounts[0]++; _EL_       } _EL_       float score=calculateScore(playCounts); _EL_       if (score < .01f) { _EL_         deleteEntry(database,stringId); _EL_       } _EL_  else { _EL_         ContentValues values=new ContentValues(NUM_WEEKS + 2); _EL_         values.put(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX,mNumberOfWeeksSinceEpoch); _EL_         values.put(SongPlayCountColumns.PLAYCOUNTSCORE,score); _EL_         for (int i=0; i < NUM_WEEKS; i++) { _EL_           values.put(getColumnNameForWeek(i),playCounts[i]); _EL_         } _EL_         database.update(SongPlayCountColumns.NAME,values,WHERE_ID_EQUALS,new String[]{stringId}); _EL_       } _EL_     } _EL_  else     if (bumpCount) { _EL_       ContentValues values=new ContentValues(2); _EL_       int scoreIndex=cursor.getColumnIndex(SongPlayCountColumns.PLAYCOUNTSCORE); _EL_       float score=cursor.getFloat(scoreIndex) + getScoreMultiplierForWeek(0); _EL_       values.put(SongPlayCountColumns.PLAYCOUNTSCORE,score); _EL_       values.put(getColumnNameForWeek(0),cursor.getInt(getColumnIndexForWeek(0)) + 1); _EL_       database.update(SongPlayCountColumns.NAME,values,WHERE_ID_EQUALS,new String[]{stringId}); _EL_     } _EL_     cursor.close(); _EL_   } _EL_  else   if (bumpCount) { _EL_     createNewPlayedEntry(database,id); _EL_   } _EL_   database.setTransactionSuccessful(); _EL_   database.endTransaction(); _EL_ } _EL_ ', 'public void putString(String s) throws ArrayIndexOutOfBoundsException, UnsupportedEncodingException { _EL_   byte[] bytes=s.getBytes("UTF-8"); _EL_   int length=bytes.length; _EL_   int endAt=m_index + length + 1; _EL_   if (endAt > m_content.length)   throw new ArrayIndexOutOfBoundsException(endAt + " > " + m_content.length); _EL_   System.arraycopy(bytes,0,m_content,m_index,length); _EL_   m_index+=length; _EL_   m_content[m_index++]=\'\\0\'; _EL_   debugAppendString(s); _EL_ } _EL_ ', '@Override public SSLEngineResult wrap(ByteBuffer[] srcs,int offset,int len,ByteBuffer dst) throws SSLException { _EL_   if (engine_was_shutteddown) { _EL_     return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,0); _EL_   } _EL_   if ((srcs == null) || (dst == null)) { _EL_     throw new IllegalStateException("Some of the input parameters are null"); _EL_   } _EL_   if (dst.isReadOnly()) { _EL_     throw new ReadOnlyBufferException(); _EL_   } _EL_   if (!handshake_started) { _EL_     beginHandshake(); _EL_   } _EL_   SSLEngineResult.HandshakeStatus handshakeStatus=getHandshakeStatus(); _EL_   if ((session == null || engine_was_closed) && (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_UNWRAP) || handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_TASK))) { _EL_     return new SSLEngineResult(getEngineStatus(),handshakeStatus,0,0); _EL_   } _EL_   int capacity=dst.remaining(); _EL_   int produced=0; _EL_   if (alertProtocol.hasAlert()) { _EL_     if (capacity < recordProtocol.getRecordSize(2)) { _EL_       return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0); _EL_     } _EL_     byte[] alert_data=alertProtocol.wrap(); _EL_     dst.put(alert_data); _EL_     if (alertProtocol.isFatalAlert()) { _EL_       alertProtocol.setProcessed(); _EL_       if (session != null) { _EL_         session.invalidate(); _EL_       } _EL_       shutdown(); _EL_       return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,alert_data.length); _EL_     } _EL_  else { _EL_       alertProtocol.setProcessed(); _EL_       if (close_notify_was_sent && close_notify_was_received) { _EL_         shutdown(); _EL_         return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,alert_data.length); _EL_       } _EL_       return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),0,alert_data.length); _EL_     } _EL_   } _EL_   if (capacity < recordProtocol.getMinRecordSize()) { _EL_     if (logger != null) { _EL_       logger.println("Capacity of the destination(" + capacity + ") < MIN_PACKET_SIZE("+ recordProtocol.getMinRecordSize()+ ")"); _EL_     } _EL_     return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0); _EL_   } _EL_   try { _EL_     if (!handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_WRAP)) { _EL_       dataStream.setSourceBuffers(srcs,offset,len); _EL_       if ((capacity < SSLRecordProtocol.MAX_SSL_PACKET_SIZE) && (capacity < recordProtocol.getRecordSize(dataStream.available()))) { _EL_         if (logger != null) { _EL_           logger.println("The destination buffer(" + capacity + ") can not take the resulting packet("+ recordProtocol.getRecordSize(dataStream.available())+ ")"); _EL_         } _EL_         return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0); _EL_       } _EL_       if (remaining_wrapped_data == null) { _EL_         remaining_wrapped_data=recordProtocol.wrap(ContentType.APPLICATION_DATA,dataStream); _EL_       } _EL_       if (capacity < remaining_wrapped_data.length) { _EL_         return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,dataStream.consumed(),0); _EL_       } _EL_  else { _EL_         dst.put(remaining_wrapped_data); _EL_         produced=remaining_wrapped_data.length; _EL_         remaining_wrapped_data=null; _EL_         return new SSLEngineResult(getEngineStatus(),handshakeStatus,dataStream.consumed(),produced); _EL_       } _EL_     } _EL_  else { _EL_       if (remaining_hsh_data == null) { _EL_         remaining_hsh_data=handshakeProtocol.wrap(); _EL_       } _EL_       if (capacity < remaining_hsh_data.length) { _EL_         return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0); _EL_       } _EL_  else { _EL_         dst.put(remaining_hsh_data); _EL_         produced=remaining_hsh_data.length; _EL_         remaining_hsh_data=null; _EL_         handshakeStatus=handshakeProtocol.getStatus(); _EL_         if (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.FINISHED)) { _EL_           session=recordProtocol.getSession(); _EL_         } _EL_       } _EL_       return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),0,produced); _EL_     } _EL_   } _EL_  catch (  AlertException e) { _EL_     alertProtocol.alert(AlertProtocol.FATAL,e.getDescriptionCode()); _EL_     engine_was_closed=true; _EL_     if (session != null) { _EL_       session.invalidate(); _EL_     } _EL_     throw e.getReason(); _EL_   } _EL_ } _EL_ ', 'public static void checkFinite(final double[] val) throws MathIllegalArgumentException { _EL_   for (int i=0; i < val.length; i++) { _EL_     final double x=val[i]; _EL_     if (Double.isInfinite(x) || Double.isNaN(x)) { _EL_       throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,x); _EL_     } _EL_   } _EL_ } _EL_ ', 'private static String doNormalize(String filename,char separator,boolean keepSeparator){ _EL_   if (filename == null) { _EL_     return null; _EL_   } _EL_   int size=filename.length(); _EL_   if (size == 0) { _EL_     return filename; _EL_   } _EL_   int prefix=getPrefixLength(filename); _EL_   if (prefix < 0) { _EL_     return null; _EL_   } _EL_   char[] array=new char[size + 2]; _EL_   filename.getChars(0,filename.length(),array,0); _EL_   char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR; _EL_   for (int i=0; i < array.length; i++) { _EL_     if (array[i] == otherSeparator) { _EL_       array[i]=separator; _EL_     } _EL_   } _EL_   boolean lastIsDirectory=true; _EL_   if (array[size - 1] != separator) { _EL_     array[size++]=separator; _EL_     lastIsDirectory=false; _EL_   } _EL_   for (int i=prefix + 1; i < size; i++) { _EL_     if (array[i] == separator && array[i - 1] == separator) { _EL_       System.arraycopy(array,i,array,i - 1,size - i); _EL_       size--; _EL_       i--; _EL_     } _EL_   } _EL_   for (int i=prefix + 1; i < size; i++) { _EL_     if (array[i] == separator && array[i - 1] == \'.\' && (i == prefix + 1 || array[i - 2] == separator)) { _EL_       if (i == size - 1) { _EL_         lastIsDirectory=true; _EL_       } _EL_       System.arraycopy(array,i + 1,array,i - 1,size - i); _EL_       size-=2; _EL_       i--; _EL_     } _EL_   } _EL_   outer:   for (int i=prefix + 2; i < size; i++) { _EL_     if (array[i] == separator && array[i - 1] == \'.\' && array[i - 2] == \'.\' && (i == prefix + 2 || array[i - 3] == separator)) { _EL_       if (i == prefix + 2) { _EL_         return null; _EL_       } _EL_       if (i == size - 1) { _EL_         lastIsDirectory=true; _EL_       } _EL_       int j; _EL_       for (j=i - 4; j >= prefix; j--) { _EL_         if (array[j] == separator) { _EL_           System.arraycopy(array,i + 1,array,j + 1,size - i); _EL_           size-=i - j; _EL_           i=j + 1; _EL_           continue outer; _EL_         } _EL_       } _EL_       System.arraycopy(array,i + 1,array,prefix,size - i); _EL_       size-=i + 1 - prefix; _EL_       i=prefix + 1; _EL_     } _EL_   } _EL_   if (size <= 0) { _EL_     return ""; _EL_   } _EL_   if (size <= prefix) { _EL_     return new String(array,0,size); _EL_   } _EL_   if (lastIsDirectory && keepSeparator) { _EL_     return new String(array,0,size); _EL_   } _EL_   return new String(array,0,size - 1); _EL_ } _EL_ ', 'public StringList plus(String... args){ _EL_   StringList newList=new StringList(); _EL_   newList.addAll(this); _EL_   newList.addAll(Arrays.asList(args)); _EL_   return newList; _EL_ } _EL_ ', '@Override public void paintComponent(Graphics g){ _EL_   super.paintComponent(g); _EL_   Graphics2D graphics=(Graphics2D)g; _EL_   graphics.setBackground(mColorSpectrumBackground); _EL_   RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON); _EL_   renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY); _EL_   graphics.setRenderingHints(renderHints); _EL_   drawFrequencies(graphics); _EL_   drawCursor(graphics); _EL_ } _EL_ ', 'protected void smartInsertAfterBracket(IDocument document,DocumentCommand command){ _EL_   if (command.offset == -1 || document.getLength() == 0) { _EL_     return; _EL_   } _EL_   try { _EL_     int p=(command.offset == document.getLength() ? command.offset - 1 : command.offset); _EL_     int line=document.getLineOfOffset(p); _EL_     int start=document.getLineOffset(line); _EL_     int whiteend=findEndOfWhiteSpace(document,start,command.offset); _EL_     if (whiteend == command.offset) { _EL_       int indLine=findMatchingOpenBracket(document,line,command.offset,1); _EL_       if (indLine != -1 && indLine != line) { _EL_         StringBuffer replaceText=new StringBuffer(getIndentOfLine(document,indLine)); _EL_         replaceText.append(document.get(whiteend,command.offset - whiteend)); _EL_         replaceText.append(command.text); _EL_         command.length=command.offset - start; _EL_         command.offset=start; _EL_         command.text=replaceText.toString(); _EL_       } _EL_     } _EL_   } _EL_  catch (  BadLocationException e) { _EL_     GWTPluginLog.logError(e); _EL_   } _EL_ } _EL_ ', 'public double metersToPixels(){ _EL_   double screenCenterLat=screenTopLeft.latitude - screenSize.latitude / 2; _EL_   double metersToLon=1 / (Util.LON_TO_METERS_AT_EQUATOR * Math.cos(screenCenterLat / 180 * Math.PI)); _EL_   return screenSize.longitude / windowWidth * metersToLon; _EL_ } _EL_ ', 'public static String cleanFolderStackingMarkers(String filename){ _EL_   if (!StringUtils.isEmpty(filename)) { _EL_     Matcher m=folderStackingPattern.matcher(filename); _EL_     if (m.matches()) { _EL_       return m.group(1) + m.group(3); _EL_     } _EL_   } _EL_   return filename; _EL_ } _EL_ ', 'public void createDatabaseEntitiesForStoragePolicyTesting(){ _EL_   createDatabaseEntitiesForStoragePolicyTesting(AbstractServiceTest.STORAGE_POLICY_NAMESPACE_CD,Arrays.asList(AbstractServiceTest.STORAGE_POLICY_RULE_TYPE),AbstractServiceTest.BDEF_NAMESPACE,AbstractServiceTest.BDEF_NAME,Arrays.asList(AbstractServiceTest.FORMAT_FILE_TYPE_CODE),Arrays.asList(AbstractServiceTest.STORAGE_NAME),Arrays.asList(AbstractServiceTest.STORAGE_NAME_2)); _EL_ } _EL_ ', 'public void invalidateTitleSortable(){ _EL_   for (  Movie movie : new ArrayList<>(movieList)) { _EL_     movie.clearTitleSortable(); _EL_   } _EL_ } _EL_ ', 'void scramble(){ _EL_   initialSize=getSize(); _EL_   int a[]=new int[initialSize.height / 2]; _EL_   double f=initialSize.width / (double)a.length; _EL_   for (int i=a.length; --i >= 0; ) { _EL_     a[i]=(int)(i * f); _EL_   } _EL_   for (int i=a.length; --i >= 0; ) { _EL_     int j=(int)(i * Math.random()); _EL_     int t=a[i]; _EL_     a[i]=a[j]; _EL_     a[j]=t; _EL_   } _EL_   arr=a; _EL_ } _EL_ ', 'public void deepFill(MaryNode specTree){ _EL_   tree=specTree; _EL_   numberOfLeaves=0; _EL_   sortNode(0,tree); _EL_ } _EL_ ', 'public static List<SpaceTime> divideConquerBrownianBridge(MultivariateNormalDistribution normal,SpaceTime start,SpaceTime end,int depth,int maxTries,SpaceTimeRejector rejector){ _EL_   List<SpaceTime> points=new LinkedList<SpaceTime>(); _EL_   points.add(start); _EL_   points.add(end); _EL_   stop=false; _EL_   if (divideConquerBrownianBridge(normal,0,points,depth,maxTries,rejector) == (2 << (depth - 1))) { _EL_     return points; _EL_   } _EL_   stop=false; _EL_   return null; _EL_ } _EL_ ', "public static long lowerHexToUnsignedLong(String lowerHex){ _EL_   int length=lowerHex.length(); _EL_   if (length < 1 || length > 32)   throw isntLowerHexLong(lowerHex); _EL_   int i=length > 16 ? length - 16 : 0; _EL_   long result=0; _EL_   for (; i < length; i++) { _EL_     char c=lowerHex.charAt(i); _EL_     result<<=4; _EL_     if (c >= '0' && c <= '9') { _EL_       result|=c - '0'; _EL_     } _EL_  else     if (c >= 'a' && c <= 'f') { _EL_       result|=c - 'a' + 10; _EL_     } _EL_  else { _EL_       throw isntLowerHexLong(lowerHex); _EL_     } _EL_   } _EL_   return result; _EL_ } _EL_ ", 'public void sort(){ _EL_   throwIfImmutable(); _EL_   if (!sorted) { _EL_     Arrays.sort(values,0,size); _EL_     sorted=true; _EL_   } _EL_ } _EL_ ', '@Override public final void endElement(final String ns,final String lName,final String qName) throws SAXException { _EL_   String name=lName == null || lName.length() == 0 ? qName : lName; _EL_   Rule r=(Rule)RULES.match(match); _EL_   if (r != null) { _EL_     r.end(name); _EL_   } _EL_   int slash=match.lastIndexOf(\'/\'); _EL_   if (slash >= 0) { _EL_     match=match.substring(0,slash); _EL_   } _EL_  else { _EL_     match=""; _EL_   } _EL_ } _EL_ ', 'public static XMPMeta extractXMPMeta(InputStream is){ _EL_   List<Section> sections=parse(is,true); _EL_   if (sections == null) { _EL_     return null; _EL_   } _EL_   for (  Section section : sections) { _EL_     if (hasXMPHeader(section.data)) { _EL_       int end=getXMPContentEnd(section.data); _EL_       byte[] buffer=new byte[end - XMP_HEADER_SIZE]; _EL_       System.arraycopy(section.data,XMP_HEADER_SIZE,buffer,0,buffer.length); _EL_       try { _EL_         XMPMeta result=XMPMetaFactory.parseFromBuffer(buffer); _EL_         return result; _EL_       } _EL_  catch (      XMPException e) { _EL_         Log.d(TAG,"XMP parse error",e); _EL_         return null; _EL_       } _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public void analyzeAllItAndWriteResults(){ _EL_   RunResultsLoader runDir=new RunResultsLoader(runDirectory,null); _EL_   PrintStream stream; _EL_   try { _EL_     stream=new PrintStream(new File(outputDir + "routesAndTTs.txt")); _EL_   } _EL_  catch (  FileNotFoundException e) { _EL_     e.printStackTrace(); _EL_     return; _EL_   } _EL_   String header="it\\ttotal tt[s]\\t#users up\\t#users mid\\t#users low\\tavg tt[s] up\\tavg tt[s] mid\\tavg tt[s] low"; _EL_   stream.println(header); _EL_   double totalTTIt; _EL_   double[] avgRouteTTsIt; _EL_   int[] routeUsersIt; _EL_   for (int i=0; i <= lastIteration; i++) { _EL_     log.info("Starting to analyze iteration " + i + " of "+ lastIteration+ " iterations."); _EL_     String eventsFilename=runDir.getEventsFilename(i); _EL_     EventsManager eventsManager=new EventsManagerImpl(); _EL_     TtAnalyzeBraess handler=new TtAnalyzeBraess(); _EL_     eventsManager.addHandler(handler); _EL_     MatsimEventsReader reader=new MatsimEventsReader(eventsManager); _EL_     reader.readFile(eventsFilename); _EL_     totalTTIt=handler.getTotalTT(); _EL_     avgRouteTTsIt=handler.calculateAvgRouteTTs(); _EL_     routeUsersIt=handler.getRouteUsers(); _EL_     StringBuffer line=new StringBuffer(); _EL_     line.append(i + "\\t" + totalTTIt); _EL_     for (int j=0; j < 3; j++) { _EL_       line.append("\\t" + routeUsersIt[j]); _EL_     } _EL_     for (int j=0; j < 3; j++) { _EL_       line.append("\\t" + avgRouteTTsIt[j]); _EL_     } _EL_     stream.println(line.toString()); _EL_   } _EL_   stream.close(); _EL_   log.info(lastIteration + " Iterations analyzed."); _EL_ } _EL_ ', 'private Map<String,String> produceStream(String topic){ _EL_   List<ProducerRecord<String,String>> messages=new ArrayList<>(EVENT_CNT); _EL_   Map<String,String> keyValMap=new HashMap<>(); _EL_   for (int evt=0; evt < EVENT_CNT; evt++) { _EL_     long runtime=System.currentTimeMillis(); _EL_     String key=topic + "_" + String.valueOf(evt); _EL_     String msg=runtime + String.valueOf(evt); _EL_     messages.add(new ProducerRecord<>(topic,key,msg)); _EL_     keyValMap.put(key,msg); _EL_   } _EL_   kafkaBroker.sendMessages(messages); _EL_   return keyValMap; _EL_ } _EL_ ', 'public Pair<String,String> next(){ _EL_   try { _EL_     currentHeaderPosition=nextHeaderPosition; _EL_     String readHeader=nextLine; _EL_     nextHeaderPosition+=readHeader.length() + endOfLineBytes; _EL_     readHeader=">" + readHeader.substring(1); _EL_     String readSequence=r.readLine(); _EL_     nextHeaderPosition+=readSequence.length() + endOfLineBytes; _EL_     String comments=r.readLine(); _EL_     nextHeaderPosition+=comments.length() + endOfLineBytes; _EL_     if (comments.startsWith("+")) { _EL_       String qualityValues=r.readLine(); _EL_       nextHeaderPosition+=qualityValues.length() + endOfLineBytes; _EL_     } _EL_     nextLine=r.readLine(); _EL_     return new Pair<>(readHeader,readSequence); _EL_   } _EL_  catch (  IOException e) { _EL_     Basic.caught(e); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public void init(PrivateKey key){ _EL_   try { _EL_     if (signature != null) { _EL_       signature.initSign(key); _EL_     } _EL_  else     if (cipher != null) { _EL_       cipher.init(Cipher.ENCRYPT_MODE,key); _EL_     } _EL_   } _EL_  catch (  InvalidKeyException e) { _EL_     throw new AlertException(AlertProtocol.BAD_CERTIFICATE,new SSLException("init - invalid private key",e)); _EL_   } _EL_ } _EL_ ', 'public boolean textboxKeyTyped(char p_146201_1_,int p_146201_2_){ _EL_   if (!isFocused)   return false; _EL_  else   if (GuiScreen.func_175278_g(p_146201_2_)) { _EL_     setCursorPositionEnd(); _EL_     setSelectionPos(0); _EL_     return true; _EL_   } _EL_  else   if (GuiScreen.func_175280_f(p_146201_2_)) { _EL_     GuiScreen.setClipboardString(getSelectedText()); _EL_     return true; _EL_   } _EL_  else   if (GuiScreen.func_175279_e(p_146201_2_)) { _EL_     if (isEnabled)     writeText(GuiScreen.getClipboardString()); _EL_     return true; _EL_   } _EL_  else   if (GuiScreen.func_175277_d(p_146201_2_)) { _EL_     GuiScreen.setClipboardString(getSelectedText()); _EL_     if (isEnabled)     writeText(""); _EL_     return true; _EL_   } _EL_  else switch (p_146201_2_) { _EL_ case 14: _EL_     if (GuiScreen.isCtrlKeyDown()) { _EL_       if (isEnabled)       deleteWords(-1); _EL_     } _EL_  else     if (isEnabled)     deleteFromCursor(-1); _EL_   return true; _EL_ case 199: _EL_ if (GuiScreen.isShiftKeyDown()) setSelectionPos(0); _EL_  else setCursorPositionZero(); _EL_ return true; _EL_ case 203: _EL_ if (GuiScreen.isShiftKeyDown()) { _EL_ if (GuiScreen.isCtrlKeyDown()) setSelectionPos(getNthWordFromPos(-1,getSelectionEnd())); _EL_  else setSelectionPos(getSelectionEnd() - 1); _EL_ } _EL_  else if (GuiScreen.isCtrlKeyDown()) setCursorPosition(getNthWordFromCursor(-1)); _EL_  else moveCursorBy(-1); _EL_ return true; _EL_ case 205: _EL_ if (GuiScreen.isShiftKeyDown()) { _EL_ if (GuiScreen.isCtrlKeyDown()) setSelectionPos(getNthWordFromPos(1,getSelectionEnd())); _EL_  else setSelectionPos(getSelectionEnd() + 1); _EL_ } _EL_  else if (GuiScreen.isCtrlKeyDown()) setCursorPosition(getNthWordFromCursor(1)); _EL_  else moveCursorBy(1); _EL_ return true; _EL_ case 207: _EL_ if (GuiScreen.isShiftKeyDown()) setSelectionPos(text.length()); _EL_  else setCursorPositionEnd(); _EL_ return true; _EL_ case 211: _EL_ if (GuiScreen.isCtrlKeyDown()) { _EL_ if (isEnabled) deleteWords(1); _EL_ } _EL_  else if (isEnabled) deleteFromCursor(1); _EL_ return true; _EL_ default : _EL_ if (EmailAllowedCharacters.isAllowedCharacter(p_146201_1_)) { _EL_ if (isEnabled) writeText(Character.toString(p_146201_1_)); _EL_ return true; _EL_ } _EL_  else return false; _EL_ } _EL_ } _EL_ ', 'public void updatePresonInfo(){ _EL_   this.leftPerson=person2LeavingPersonInfo.get(this.personId); _EL_   this.enteredPerson=person2EnteringPersonInfo.get(this.personId); _EL_ } _EL_ ', 'public boolean makeBackupFile(String directory,File file){ _EL_   if (file == null) { _EL_     log.info("No file to backup"); _EL_   } _EL_  else   if (file.canWrite()) { _EL_     String backupFullName=directory + File.separator + createFileNameWithDate(file.getName()); _EL_     if (log.isDebugEnabled()) { _EL_       log.debug("new backup file: " + backupFullName); _EL_     } _EL_     File backupFile=findFile(backupFullName); _EL_     if (backupFile != null) { _EL_       if (backupFile.delete()) { _EL_         if (log.isDebugEnabled()) { _EL_           log.debug("deleted backup file " + backupFullName); _EL_         } _EL_       } _EL_     } _EL_  else { _EL_       backupFile=new File(backupFullName); _EL_     } _EL_     File parentDir=backupFile.getParentFile(); _EL_     if (!parentDir.exists()) { _EL_       if (log.isDebugEnabled()) { _EL_         log.debug("creating backup directory: " + parentDir.getName()); _EL_       } _EL_       if (!parentDir.mkdirs()) { _EL_         log.error("backup directory not created"); _EL_         return false; _EL_       } _EL_     } _EL_     if (file.renameTo(new File(backupFullName))) { _EL_       if (log.isDebugEnabled()) { _EL_         log.debug("created new backup file " + backupFullName); _EL_       } _EL_     } _EL_  else { _EL_       if (log.isDebugEnabled()) { _EL_         log.debug("could not create backup file " + backupFullName); _EL_       } _EL_       return false; _EL_     } _EL_   } _EL_   return true; _EL_ } _EL_ ', '@Override public LogMessage readNextLogMessage(){ _EL_   try { _EL_     if (reader == null) { _EL_       return null; _EL_     } _EL_     while (true) { _EL_       String line=reader.readLine(); _EL_       if (line == null) { _EL_         close(); _EL_         if (currentLog != null && matchRegex(currentLog)) { _EL_           incrementLogCount(currentLog); _EL_           return currentLog; _EL_         } _EL_         return null; _EL_       } _EL_       fileLineNumber++; _EL_       LogMessage nextLog=null; _EL_       if (parser != null) { _EL_         nextLog=parser.parseLine(line,request); _EL_       } _EL_  else { _EL_         for (        LogParser parser : parserTable) { _EL_           nextLog=parser.parseLine(line,request); _EL_           if (!nextLog.isContinuation()) { _EL_             this.parser=parser; _EL_             break; _EL_           } _EL_         } _EL_         if (nextLog == null || nextLog.isContinuation()) { _EL_           status.appendInfo(this.filePath,fileLineNumber); _EL_           continue; _EL_         } _EL_       } _EL_       if (nextLog.isContinuation()) { _EL_         if (currentLog != null) { _EL_           currentLog.appendMessage(LogUtil.stringToBytes(line)); _EL_         } _EL_       } _EL_  else       if (nextLog.isRejected()) { _EL_         if (currentLog != null) { _EL_           LogMessage returnedLog=currentLog; _EL_           currentLog=null; _EL_           if (matchRegex(returnedLog)) { _EL_             incrementLogCount(returnedLog); _EL_             return returnedLog; _EL_           } _EL_         } _EL_       } _EL_  else       if (nextLog.isRejectedLast()) { _EL_         if (currentLog != null) { _EL_           LogMessage returnedLog=currentLog; _EL_           currentLog=null; _EL_           if (matchRegex(returnedLog)) { _EL_             incrementLogCount(returnedLog); _EL_             return returnedLog; _EL_           } _EL_         } _EL_         break; _EL_       } _EL_  else { _EL_         if (currentLog != null) { _EL_           LogMessage returnedLog=currentLog; _EL_           currentLog=nextLog; _EL_           if (returnedLog.isHeader() && currentLog.isHeader()) { _EL_             continue; _EL_           } _EL_           if (matchRegex(returnedLog)) { _EL_             incrementLogCount(returnedLog); _EL_             return returnedLog; _EL_           } _EL_         } _EL_  else { _EL_           currentLog=nextLog; _EL_         } _EL_       } _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     status.appendErrFileName(filePath); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public SelectionInputDialog(Window owner,String key,boolean editable,T[] selectionValues,T initialSelectionValue,InputValidator<T> inputValidator,Object... keyArguments){ _EL_   this(owner,key,selectionValues,initialSelectionValue,inputValidator,keyArguments); _EL_   comboBox.setEditable(editable); _EL_ } _EL_ ', 'private void createSnapshot(BlockSnapshot snapshot,Snap unitySnap,StorageSystem storage,DbClient dbClient){ _EL_   snapshot.setNativeId(unitySnap.getId()); _EL_   snapshot.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(storage,snapshot)); _EL_   snapshot.setDeviceLabel(unitySnap.getName()); _EL_   snapshot.setIsSyncActive(true); _EL_   snapshot.setInactive(false); _EL_   snapshot.setCreationTime(Calendar.getInstance()); _EL_   snapshot.setWWN(unitySnap.getAttachedWWN()); _EL_   snapshot.setAllocatedCapacity(unitySnap.getSize()); _EL_   snapshot.setProvisionedCapacity(unitySnap.getSize()); _EL_   dbClient.createObject(snapshot); _EL_ } _EL_ ', 'public InputStream put(final URLConnection connection,final boolean flushCacheOnClose){ _EL_   final String key=getKey(connection); _EL_   if (key == null)   return null; _EL_   if (!isCacheable((HttpURLConnection)connection))   try { _EL_     cache.remove(key); _EL_     return null; _EL_   } _EL_  catch (  IOException e) { _EL_     return null; _EL_   } _EL_   String etag=connection.getHeaderField(HEADER_ETAG); _EL_   if (etag == null || etag.length() == 0)   return null; _EL_   Editor editor; _EL_   try { _EL_     editor=cache.edit(key); _EL_   } _EL_  catch (  IOException e) { _EL_     return null; _EL_   } _EL_   if (editor == null)   return null; _EL_   try { _EL_     editor.set(ETAG,etag); _EL_   } _EL_  catch (  IOException e) { _EL_     try { _EL_       editor.abort(); _EL_     } _EL_  catch (    IOException ignored) { _EL_     } _EL_     return null; _EL_   } _EL_   InputStream input; _EL_   try { _EL_     input=connection.getInputStream(); _EL_     if (!(input instanceof InflaterInputStream) && ENCODING_GZIP.equals(connection.getHeaderField(HEADER_CONTENT_ENCODING)))     input=new GZIPInputStream(input); _EL_   } _EL_  catch (  IOException e) { _EL_     return null; _EL_   } _EL_   OutputStream output; _EL_   try { _EL_     output=editor.newOutputStream(BODY); _EL_   } _EL_  catch (  IOException e) { _EL_     return null; _EL_   } _EL_   if (output != null)   return new CacheStream(input,output,editor,this,flushCacheOnClose); _EL_  else   return null; _EL_ } _EL_ ', 'public ExtensionQuery(String pluginId,String extensionPointName,String attributeName){ _EL_   this.pluginId=extensionPointName.contains(".") ? null : pluginId; _EL_   this.extensionPointName=extensionPointName; _EL_   this.attributeName=attributeName; _EL_ } _EL_ ', 'public void handleTblDSAttributeMapListHrefActionRequest(RequestInvocationEvent event) throws ModelControlException { _EL_   try { _EL_     Map values=getValues(); _EL_     onBeforeSaveProfile(values); _EL_     setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values); _EL_     WSPPServiceDSAttributeMapListEditViewBean vb=(WSPPServiceDSAttributeMapListEditViewBean)getViewBean(WSPPServiceDSAttributeMapListEditViewBean.class); _EL_     unlockPageTrail(); _EL_     passPgSessionMap(vb); _EL_     vb.populateValues((String)getDisplayFieldValue("tblDSAttributeMapListHrefAction")); _EL_     vb.forwardTo(getRequestContext()); _EL_   } _EL_  catch (  AMConsoleException e) { _EL_     setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage()); _EL_     forwardTo(); _EL_   } _EL_ } _EL_ ', 'public boolean doTransaction(DB db,Object threadstate) throws WorkloadException { _EL_   boolean ret=true; _EL_   long st=System.nanoTime(); _EL_   String op=operationchooser.nextString(); _EL_   if (op.compareTo("READ") == 0) { _EL_     ret=doTransactionRead(db); _EL_   } _EL_  else   if (op.compareTo("UPDATE") == 0) { _EL_     ret=doTransactionUpdate(db); _EL_   } _EL_  else   if (op.compareTo("INSERT") == 0) { _EL_     ret=doTransactionInsert(db); _EL_   } _EL_  else   if (op.compareTo("SCAN") == 0) { _EL_     ret=doTransactionScan(db); _EL_   } _EL_  else { _EL_     ret=doTransactionReadModifyWrite(db); _EL_   } _EL_   long en=System.nanoTime(); _EL_   _measurements.measure(_operations.get(op),(int)((en - st) / 1000)); _EL_   if (ret)   _measurements.reportReturnCode(_operations.get(op),-1); _EL_  else { _EL_     _measurements.reportReturnCode(_operations.get(op),0); _EL_   } _EL_   actualopcount.addAndGet(1); _EL_   return ret; _EL_ } _EL_ ', 'public void startElement(String namespaceURI,String localName,String name,Attributes atts) throws org.xml.sax.SAXException { _EL_   ElemContext elemContext=m_elemContext; _EL_   if (elemContext.m_startTagOpen) { _EL_     closeStartTag(); _EL_     elemContext.m_startTagOpen=false; _EL_   } _EL_  else   if (m_cdataTagOpen) { _EL_     closeCDATA(); _EL_     m_cdataTagOpen=false; _EL_   } _EL_  else   if (m_needToCallStartDocument) { _EL_     startDocumentInternal(); _EL_     m_needToCallStartDocument=false; _EL_   } _EL_   if (m_needToOutputDocTypeDecl) { _EL_     String n=name; _EL_     if (n == null || n.length() == 0) { _EL_       n=localName; _EL_     } _EL_     outputDocTypeDecl(n); _EL_   } _EL_   if (null != namespaceURI && namespaceURI.length() > 0) { _EL_     super.startElement(namespaceURI,localName,name,atts); _EL_     return; _EL_   } _EL_   try { _EL_     ElemDesc elemDesc=getElemDesc2(name); _EL_     int elemFlags=elemDesc.getFlags(); _EL_     if (m_doIndent) { _EL_       boolean isBlockElement=(elemFlags & ElemDesc.BLOCK) != 0; _EL_       if (m_ispreserve)       m_ispreserve=false; _EL_  else       if ((null != elemContext.m_elementName) && (!m_inBlockElem || isBlockElement)) { _EL_         m_startNewLine=true; _EL_         indent(); _EL_       } _EL_       m_inBlockElem=!isBlockElement; _EL_     } _EL_     if (atts != null)     addAttributes(atts); _EL_     m_isprevtext=false; _EL_     final java.io.Writer writer=m_writer; _EL_     writer.write(\'<\'); _EL_     writer.write(name); _EL_     if (m_tracer != null)     firePseudoAttributes(); _EL_     if ((elemFlags & ElemDesc.EMPTY) != 0) { _EL_       m_elemContext=elemContext.push(); _EL_       m_elemContext.m_elementName=name; _EL_       m_elemContext.m_elementDesc=elemDesc; _EL_       return; _EL_     } _EL_  else { _EL_       elemContext=elemContext.push(namespaceURI,localName,name); _EL_       m_elemContext=elemContext; _EL_       elemContext.m_elementDesc=elemDesc; _EL_       elemContext.m_isRaw=(elemFlags & ElemDesc.RAW) != 0; _EL_     } _EL_     if ((elemFlags & ElemDesc.HEADELEM) != 0) { _EL_       closeStartTag(); _EL_       elemContext.m_startTagOpen=false; _EL_       if (!m_omitMetaTag) { _EL_         if (m_doIndent)         indent(); _EL_         writer.write("<META http-equiv=\\"Content-Type\\" content=\\"text/html; charset="); _EL_         String encoding=getEncoding(); _EL_         String encode=Encodings.getMimeEncoding(encoding); _EL_         writer.write(encode); _EL_         writer.write("\\">"); _EL_       } _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     throw new SAXException(e); _EL_   } _EL_ } _EL_ ', 'public static List<File> findFilesInDir(File directory,FilenameFilter filter){ _EL_   Vector<File> files=new Vector<File>(); _EL_   File[] entries=directory.listFiles(); _EL_   for (  File entry : entries) { _EL_     if (filter == null || filter.accept(directory,entry.getName())) { _EL_       files.add(entry); _EL_     } _EL_     if (entry.isDirectory()) { _EL_       files.addAll(findFilesInDir(entry,filter)); _EL_     } _EL_   } _EL_   return files; _EL_ } _EL_ ', 'private void refreshIndexForDimensionFields(String rowId,DimensionRow dimensionRow,DimensionRow dimensionRowOld){ _EL_   try { _EL_     for (    DimensionField field : dimension.getDimensionFields()) { _EL_       if (field == dimension.getKey()) { _EL_         continue; _EL_       } _EL_       if (dimensionRowOld != null) { _EL_         String oldRowValue=dimensionRowOld.get(field); _EL_         String oldRowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),oldRowValue); _EL_         String oldRowValuesKeysJson=keyValueStore.get(oldRowValueKey); _EL_         String[] oldRowValueSKeys=objectMapper.readValue(oldRowValuesKeysJson,String[].class); _EL_         Set<String> oldRowValuesKeySet=new LinkedHashSet<>(Arrays.asList(oldRowValueSKeys)); _EL_         oldRowValuesKeySet.remove(rowId); _EL_         if (oldRowValuesKeySet.isEmpty()) { _EL_           keyValueStore.remove(oldRowValueKey); _EL_         } _EL_  else { _EL_           String updatedOldRowValueSKeys=objectMapper.writeValueAsString(oldRowValuesKeySet); _EL_           keyValueStore.put(oldRowValueKey,updatedOldRowValueSKeys); _EL_         } _EL_       } _EL_       String rowValue=dimensionRow.get(field); _EL_       String rowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),rowValue); _EL_       String rowValueSKeys=keyValueStore.get(rowValueKey); _EL_       Set<String> rowValueSKeySet=new LinkedHashSet<>(); _EL_       if (rowValueSKeys != null) { _EL_         rowValueSKeySet.addAll(Arrays.asList(objectMapper.readValue(rowValueSKeys,String[].class))); _EL_       } _EL_       rowValueSKeySet.add(rowId); _EL_       String updatedRowValueSKeys=objectMapper.writeValueAsString(rowValueSKeySet); _EL_       keyValueStore.put(rowValueKey,updatedRowValueSKeys); _EL_     } _EL_   } _EL_  catch (  IOException e) { _EL_     LOG.error("Exception while adding dimension description entry in key value store : {}",e); _EL_     throw new RuntimeException(e); _EL_   } _EL_ } _EL_ ', 'private void sequenceQuery(QueryEntry entry,ServerSessionContext session,CompletableFuture<QueryResponse> future){ _EL_   if (entry.getSequence() > session.getCommandSequence()) { _EL_     session.registerSequenceQuery(entry.getSequence(),null); _EL_   } _EL_  else { _EL_     indexQuery(entry,future); _EL_   } _EL_ } _EL_ ', 'private void computeDoublesForAllZoomLevels(){ _EL_   int numFrames=mSoundFile.getNumFrames(); _EL_   int[] frameGains=mSoundFile.getFrameGains(); _EL_   double[] smoothedGains=new double[numFrames]; _EL_   if (numFrames == 1) { _EL_     smoothedGains[0]=frameGains[0]; _EL_   } _EL_  else   if (numFrames == 2) { _EL_     smoothedGains[0]=frameGains[0]; _EL_     smoothedGains[1]=frameGains[1]; _EL_   } _EL_  else   if (numFrames > 2) { _EL_     smoothedGains[0]=(double)((frameGains[0] / 2.0) + (frameGains[1] / 2.0)); _EL_     for (int i=1; i < numFrames - 1; i++) { _EL_       smoothedGains[i]=(double)((frameGains[i - 1] / 3.0) + (frameGains[i] / 3.0) + (frameGains[i + 1] / 3.0)); _EL_     } _EL_     smoothedGains[numFrames - 1]=(double)((frameGains[numFrames - 2] / 2.0) + (frameGains[numFrames - 1] / 2.0)); _EL_   } _EL_   double maxGain=1.0; _EL_   for (int i=0; i < numFrames; i++) { _EL_     if (smoothedGains[i] > maxGain) { _EL_       maxGain=smoothedGains[i]; _EL_     } _EL_   } _EL_   double scaleFactor=1.0; _EL_   if (maxGain > 255.0) { _EL_     scaleFactor=255 / maxGain; _EL_   } _EL_   maxGain=0; _EL_   int gainHist[]=new int[256]; _EL_   for (int i=0; i < numFrames; i++) { _EL_     int smoothedGain=(int)(smoothedGains[i] * scaleFactor); _EL_     if (smoothedGain < 0)     smoothedGain=0; _EL_     if (smoothedGain > 255)     smoothedGain=255; _EL_     if (smoothedGain > maxGain)     maxGain=smoothedGain; _EL_     gainHist[smoothedGain]++; _EL_   } _EL_   double minGain=0; _EL_   int sum=0; _EL_   while (minGain < 255 && sum < numFrames / 20) { _EL_     sum+=gainHist[(int)minGain]; _EL_     minGain++; _EL_   } _EL_   sum=0; _EL_   while (maxGain > 2 && sum < numFrames / 100) { _EL_     sum+=gainHist[(int)maxGain]; _EL_     maxGain--; _EL_   } _EL_   double[] heights=new double[numFrames]; _EL_   double range=maxGain - minGain; _EL_   for (int i=0; i < numFrames; i++) { _EL_     double value=(smoothedGains[i] * scaleFactor - minGain) / range; _EL_     if (value < 0.0)     value=0.0; _EL_     if (value > 1.0)     value=1.0; _EL_     heights[i]=value * value; _EL_   } _EL_   algo(mSoundFile.getNumFrames()); _EL_   totalZooms=algoValues.size() + 2; _EL_   mNumZoomLevels=totalZooms; _EL_   mLenByZoomLevel=new int[totalZooms]; _EL_   mZoomFactorByZoomLevel=new double[totalZooms]; _EL_   mValuesByZoomLevel=new double[totalZooms][]; _EL_   mLenByZoomLevel[0]=numFrames * 2; _EL_   mZoomFactorByZoomLevel[0]=2.0; _EL_   mValuesByZoomLevel[0]=new double[mLenByZoomLevel[0]]; _EL_   if (numFrames > 0) { _EL_     mValuesByZoomLevel[0][0]=0.5 * heights[0]; _EL_     mValuesByZoomLevel[0][1]=heights[0]; _EL_   } _EL_   for (int i=1; i < numFrames; i++) { _EL_     mValuesByZoomLevel[0][2 * i]=0.5 * (heights[i - 1] + heights[i]); _EL_     mValuesByZoomLevel[0][2 * i + 1]=heights[i]; _EL_   } _EL_   mLenByZoomLevel[1]=numFrames; _EL_   mValuesByZoomLevel[1]=new double[mLenByZoomLevel[1]]; _EL_   mZoomFactorByZoomLevel[1]=1.0; _EL_   for (int i=0; i < mLenByZoomLevel[1]; i++) { _EL_     mValuesByZoomLevel[1][i]=heights[i]; _EL_   } _EL_   int location=0; _EL_   for (int j=2; j < totalZooms; j++) { _EL_     mLenByZoomLevel[j]=algoValues.get(location); _EL_     mValuesByZoomLevel[j]=new double[mLenByZoomLevel[j]]; _EL_     mZoomFactorByZoomLevel[j]=mZoomFactorByZoomLevel[j - 1] / 1.5; _EL_     for (int i=0; i < mLenByZoomLevel[j]; i++) { _EL_       mValuesByZoomLevel[j][i]=0.5 * (mValuesByZoomLevel[j - 1][(int)(divisorValues.get(location) * i)] + mValuesByZoomLevel[j - 1][(int)(divisorValues.get(location) * i) + 1]); _EL_     } _EL_     location++; _EL_   } _EL_   Log.i("Scope","Squeezed..!!"); _EL_   mInitialized=true; _EL_ } _EL_ ', '@Override public final void sample(){ _EL_   _value=_acquireCount.get() - _releaseCount.get(); _EL_ } _EL_ ', "private String translateBytesToString(byte[] bytes,long format,Transferable localeTransferable) throws IOException { _EL_   Long lFormat=Long.valueOf(format); _EL_   String charset=getBestCharsetForTextFormat(lFormat,localeTransferable); _EL_   String eoln=(String)nativeEOLNs.get(lFormat); _EL_   Integer terminators=(Integer)nativeTerminators.get(lFormat); _EL_   int count; _EL_   if (terminators != null) { _EL_     int numTerminators=terminators.intValue(); _EL_     search:     for (count=0; count < (bytes.length - numTerminators + 1); count+=numTerminators) { _EL_       for (int i=count; i < count + numTerminators; i++) { _EL_         if (bytes[i] != 0x0) { _EL_           continue search; _EL_         } _EL_       } _EL_       break search; _EL_     } _EL_   } _EL_  else { _EL_     count=bytes.length; _EL_   } _EL_   String converted=new String(bytes,0,count,charset); _EL_   if (eoln != null) { _EL_     char[] buf=converted.toCharArray(); _EL_     char[] eoln_arr=eoln.toCharArray(); _EL_     converted=null; _EL_     int j=0; _EL_     boolean match; _EL_     for (int i=0; i < buf.length; ) { _EL_       if (i + eoln_arr.length > buf.length) { _EL_         buf[j++]=buf[i++]; _EL_         continue; _EL_       } _EL_       match=true; _EL_       for (int k=0, l=i; k < eoln_arr.length; k++, l++) { _EL_         if (eoln_arr[k] != buf[l]) { _EL_           match=false; _EL_           break; _EL_         } _EL_       } _EL_       if (match) { _EL_         buf[j++]='\\n'; _EL_         i+=eoln_arr.length; _EL_       } _EL_  else { _EL_         buf[j++]=buf[i++]; _EL_       } _EL_     } _EL_     converted=new String(buf,0,j); _EL_   } _EL_   return converted; _EL_ } _EL_ ", 'public static DataSourcePropertiesInterface decodeXML(Document document,String elementName){ _EL_   if ((document == null) || (elementName == null)) { _EL_     return null; _EL_   } _EL_   Map<String,String> map=new LinkedHashMap<String,String>(); _EL_   NodeList nodeList=document.getElementsByTagName(elementName); _EL_   if (nodeList.getLength() > 0) { _EL_     Node node=nodeList.item(0); _EL_     Node child=node.getFirstChild(); _EL_     while (child != null) { _EL_       if (child.getNodeType() == Node.ELEMENT_NODE) { _EL_         map.put(child.getNodeName(),child.getTextContent()); _EL_       } _EL_       child=child.getNextSibling(); _EL_     } _EL_     return DataSourceConnectorFactory.getDataSourceProperties(map); _EL_   } _EL_  else { _EL_     return DataSourceConnectorFactory.getNoDataSource(); _EL_   } _EL_ } _EL_ ', 'public static Map<String,Object> entityMaintPermCheck(DispatchContext dctx,Map<String,? extends Object> context){ _EL_   GenericValue userLogin=(GenericValue)context.get("userLogin"); _EL_   Locale locale=(Locale)context.get("locale"); _EL_   Security security=dctx.getSecurity(); _EL_   Map<String,Object> resultMap=null; _EL_   if (security.hasPermission("ENTITY_MAINT",userLogin)) { _EL_     resultMap=ServiceUtil.returnSuccess(); _EL_     resultMap.put("hasPermission",true); _EL_   } _EL_  else { _EL_     resultMap=ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"WebtoolsPermissionError",locale)); _EL_     resultMap.put("hasPermission",false); _EL_   } _EL_   return resultMap; _EL_ } _EL_ ', 'protected int checkIPRange(){ _EL_   int retVal=0; _EL_   String ipVersion; _EL_   String ipType; _EL_   Map<String,String> holdDetails; _EL_   for (  String nextIP : IPRangeRange) { _EL_     try { _EL_       holdDetails=checkIPVersion(nextIP); _EL_     } _EL_  catch (    IllegalArgumentException e) { _EL_       if (debug.warningEnabled()) { _EL_         debug.warning("{}.checkIPRange: IP type could not be validated. IP={}",ADAPTIVE,nextIP,e); _EL_       } _EL_       continue; _EL_     } _EL_     ipVersion=holdDetails.get(IP_Version); _EL_     ipType=holdDetails.get(IP_TYPE); _EL_     if (ipVersion.equalsIgnoreCase(IP_V6) && ValidateIPaddress.isIPv6(clientIP)) { _EL_       if (debug.messageEnabled()) { _EL_         debug.message("{}.checkIPRange: {} --> {}",ADAPTIVE,clientIP,nextIP); _EL_         debug.message("IP version is: {}",IP_V6); _EL_         debug.message("Client IP is: {}",IPv6Address.fromString(clientIP)); _EL_       } _EL_       if (ipType.equalsIgnoreCase("Range")) { _EL_         String first=holdDetails.get(IP_START); _EL_         String last=holdDetails.get(IP_END); _EL_         IPv6AddressRange iPv6AddressRange=IPv6AddressRange.fromFirstAndLast(IPv6Address.fromString(first),IPv6Address.fromString(last)); _EL_         if (iPv6AddressRange.contains(IPv6Address.fromString(clientIP))) { _EL_           retVal=IPRangeScore; _EL_           break; _EL_         } _EL_       } _EL_  else       if (ipType.equalsIgnoreCase("CIDR")) { _EL_         IPv6Network iPv6Network=IPv6Network.fromString(nextIP); _EL_         if (iPv6Network.contains(IPv6Address.fromString(clientIP))) { _EL_           retVal=IPRangeScore; _EL_           break; _EL_         } _EL_       } _EL_  else { _EL_         IPv6Address iPv6AddressNextIP=IPv6Address.fromString(nextIP); _EL_         if (iPv6AddressNextIP.compareTo(IPv6Address.fromString(clientIP)) == 0) { _EL_           retVal=IPRangeScore; _EL_           break; _EL_         } _EL_       } _EL_     } _EL_  else     if (ipVersion.equalsIgnoreCase(IP_V4) && ValidateIPaddress.isIPv4(clientIP)) { _EL_       if (debug.messageEnabled()) { _EL_         debug.message("{}.checkIPRange: {} --> {}",ADAPTIVE,clientIP,nextIP); _EL_         debug.message("IP version is: {}",IP_V4); _EL_         debug.message("Client IP is: {}",clientIP); _EL_       } _EL_       IPRange theRange=new IPRange(nextIP); _EL_       if (theRange.inRange(clientIP)) { _EL_         retVal=IPRangeScore; _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   if (!IPRangeInvert) { _EL_     retVal=IPRangeScore - retVal; _EL_   } _EL_   return retVal; _EL_ } _EL_ ', 'String generateKey() throws OracleException { _EL_   byte[] data=null; _EL_   try { _EL_     data=HashFuncs.getRandom(); _EL_   } _EL_  catch (  Exception e) { _EL_     if (OracleLog.isLoggingEnabled())     log.warning(e.toString()); _EL_   } _EL_   if (data == null) { _EL_     data=fetchGuid(); _EL_   } _EL_   if (data == null) { _EL_     throw SODAUtils.makeException(SODAMessage.EX_UNABLE_TO_CREATE_UUID); _EL_   } _EL_   return (ByteArray.rawToHex(data)); _EL_ } _EL_ ', 'private void cmd_import(){ _EL_   JFileChooser jc=new JFileChooser(); _EL_   jc.setDialogTitle(Msg.getMsg(Env.getCtx(),"Import")); _EL_   jc.setDialogType(JFileChooser.OPEN_DIALOG); _EL_   jc.setFileSelectionMode(JFileChooser.FILES_ONLY); _EL_   if (jc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)   return; _EL_   StringBuffer sb=new StringBuffer(); _EL_   try { _EL_     InputStreamReader in=new InputStreamReader(new FileInputStream(jc.getSelectedFile())); _EL_     char[] cbuf=new char[1024]; _EL_     int count; _EL_     while ((count=in.read(cbuf)) > 0)     sb.append(cbuf,0,count); _EL_     in.close(); _EL_   } _EL_  catch (  Exception e) { _EL_     log.log(Level.SEVERE,"HTMLEditor.import" + e.getMessage()); _EL_     return; _EL_   } _EL_   setHtmlText(sb.toString()); _EL_ } _EL_ ', 'protected int drawLegend(Canvas canvas,DefaultRenderer renderer,String[] titles,int left,int right,int y,int width,int height,int legendSize,Paint paint,boolean calculate){ _EL_   float size=32; _EL_   if (renderer.isShowLegend()) { _EL_     float currentX=left; _EL_     float currentY=y + height - legendSize + size; _EL_     paint.setTextAlign(Component.LEFT); _EL_     paint.setTextSize(renderer.getLegendTextSize()); _EL_     int sLength=Math.min(titles.length,renderer.getSeriesRendererCount()); _EL_     for (int i=0; i < sLength; i++) { _EL_       SimpleSeriesRenderer r=renderer.getSeriesRendererAt(i); _EL_       final float lineSize=getLegendShapeWidth(i); _EL_       if (r.isShowLegendItem()) { _EL_         String text=titles[i]; _EL_         if (titles.length == renderer.getSeriesRendererCount()) { _EL_           paint.setColor(r.getColor()); _EL_         } _EL_  else { _EL_           paint.setColor(ColorUtil.LTGRAY); _EL_         } _EL_         float[] widths=new float[text.length()]; _EL_         paint.getTextWidths(text,widths); _EL_         float sum=0; _EL_         for (        float value : widths) { _EL_           sum+=value; _EL_         } _EL_         float extraSize=lineSize + 10 + sum; _EL_         float currentWidth=currentX + extraSize; _EL_         if (i > 0 && getExceed(currentWidth,renderer,right,width)) { _EL_           currentX=left; _EL_           currentY+=renderer.getLegendTextSize(); _EL_           size+=renderer.getLegendTextSize(); _EL_           currentWidth=currentX + extraSize; _EL_         } _EL_         if (getExceed(currentWidth,renderer,right,width)) { _EL_           float maxWidth=right - currentX - lineSize- 10; _EL_           if (isVertical(renderer)) { _EL_             maxWidth=width - currentX - lineSize- 10; _EL_           } _EL_           int nr=paint.breakText(text,true,maxWidth,widths); _EL_           text=text.substring(0,nr) + "..."; _EL_         } _EL_         if (!calculate) { _EL_           drawLegendShape(canvas,r,currentX,currentY,i,paint); _EL_           drawString(canvas,text,currentX + lineSize + 5,currentY + 5,paint); _EL_         } _EL_         currentX+=extraSize; _EL_       } _EL_     } _EL_   } _EL_   return Math.round(size + renderer.getLegendTextSize()); _EL_ } _EL_ ', 'public void addRule(String ruleExpression,T resultIfMatched){ _EL_   mRuleMap.add(new MimeMatcherRule(ruleExpression,resultIfMatched)); _EL_ } _EL_ ', 'private synchronized void clearScanFiles(){ _EL_   if ((allFiles != null) && (allFiles.size() > 0)) { _EL_     Iterator it=allFiles.iterator(); _EL_     File file=null; _EL_     while (it.hasNext()) { _EL_       file=(File)it.next(); _EL_       file.delete(); _EL_     } _EL_     allFiles.clear(); _EL_   } _EL_ } _EL_ ', 'private void insertExpectedPoolSettingsPerTier(CIMObjectPath capabilitiesPath,Map<String,Object> keyMap){ _EL_   List<String> expectedPoolSettingsTier=(List<String>)keyMap.get(Constants.VNXPOOLCAPABILITIES_TIER); _EL_   expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.NO_DATA_MOVEMENT); _EL_   expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.AUTO_TIER); _EL_   expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.HIGH_AVAILABLE_TIER); _EL_   expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.LOW_AVAILABLE_TIER); _EL_   expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.START_HIGH_THEN_AUTO_TIER); _EL_ } _EL_ ', 'private static Document loadDocument(Resource xmlFile) throws SAXException, IOException { _EL_   DOMParser parser=new DOMParser(); _EL_   InputStream is=null; _EL_   try { _EL_     is=IOUtil.toBufferedInputStream(xmlFile.getInputStream()); _EL_     InputSource source=new InputSource(is); _EL_     parser.parse(source); _EL_   } _EL_   finally { _EL_     IOUtil.closeEL(is); _EL_   } _EL_   return parser.getDocument(); _EL_ } _EL_ ', 'public static void notifyTicket(Context c,@NonNull Ticket t,boolean keepNotification){ _EL_   String text; _EL_   String ticker; _EL_   int smallIcon; _EL_   int largeIcon; _EL_   int status; _EL_ switch (TicketsAdapter.getValidityStatus(t.getStatus(),t.getValidTo())) { _EL_ case TicketProvider.Tickets.STATUS_VALID: _EL_ case TicketProvider.Tickets.STATUS_VALID_EXPIRING: _EL_     text=c.getString(R.string.notif_valid_text,FormatUtil.formatDateTimeDifference(t.getValidTo())); _EL_   ticker=c.getString(R.string.notif_valid_ticker); _EL_ smallIcon=R.drawable.notification_small_ready; _EL_ largeIcon=R.drawable.notification_big_ready; _EL_ status=TicketProvider.Tickets.STATUS_VALID_EXPIRING; _EL_ break; _EL_ case TicketProvider.Tickets.STATUS_EXPIRING: _EL_ case TicketProvider.Tickets.STATUS_EXPIRING_EXPIRED: _EL_ text=c.getString(R.string.notif_expiring_text,FormatUtil.formatTime(t.getValidTo())); _EL_ ticker=c.getString(R.string.notif_expiring_ticker); _EL_ smallIcon=R.drawable.notification_small_warning; _EL_ largeIcon=R.drawable.notification_big_warning; _EL_ status=TicketProvider.Tickets.STATUS_EXPIRING_EXPIRED; _EL_ break; _EL_ case TicketProvider.Tickets.STATUS_EXPIRED: _EL_ text=c.getString(R.string.notif_expired_text,FormatUtil.formatTime(t.getValidTo())); _EL_ ticker=c.getString(R.string.notif_expired_ticker); _EL_ smallIcon=R.drawable.notification_small_expired; _EL_ largeIcon=R.drawable.notification_big_expired; _EL_ status=TicketProvider.Tickets.STATUS_EXPIRED; _EL_ break; _EL_ default : _EL_ return; _EL_ } _EL_ Intent intent=new Intent(c,WearableService.class); _EL_ intent.setAction("sent_notification_to_wear"); _EL_ intent.putExtra("ticket",t); _EL_ intent.putExtra("status",status); _EL_ c.startService(intent); _EL_ Intent i=new Intent(c,MainActivity.class); _EL_ i.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP); _EL_ i.putExtra(MainActivity.EXTRA_TICKET_ID,t.getId()); _EL_ PendingIntent openIntent=PendingIntent.getActivity(c,t.getNotificationId(),i,PendingIntent.FLAG_CANCEL_CURRENT); _EL_ Intent i2=new Intent(c,MainActivity.class); _EL_ i2.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP); _EL_ i2.putExtra(MainActivity.EXTRA_TICKET_ID,t.getId()); _EL_ i2.putExtra(MainActivity.EXTRA_SHOW_SMS,true); _EL_ PendingIntent showSmsIntent=PendingIntent.getActivity(c,t.getNotificationId() + 1000,i2,PendingIntent.FLAG_CANCEL_CURRENT); _EL_ List<Action> actions=new ArrayList<Action>(); _EL_ actions.add(new Action(R.drawable.notification_show_sms,R.string.notif_show_sms,showSmsIntent)); _EL_ List<String> rows=new ArrayList<String>(); _EL_ rows.add(text); _EL_ rows.add(c.getString(R.string.tickets_valid_from) + ": " + FormatUtil.formatDateTime(t.getValidFrom())); _EL_ rows.add(c.getString(R.string.tickets_code) + ": " + t.getHash()); _EL_ fireNotification(c,t.getNotificationId(),openIntent,c.getString(R.string.application_name),text,rows,t.getCity(),ticker,smallIcon,largeIcon,actions,keepNotification); _EL_ } _EL_ ', 'public String headerOut(String name){ _EL_   ArrayList<String> keys=_headerKeysOut; _EL_   int headerSize=keys.size(); _EL_   for (int i=0; i < headerSize; i++) { _EL_     String oldKey=keys.get(i); _EL_     if (oldKey.equalsIgnoreCase(name)) { _EL_       return (String)_headerValuesOut.get(i); _EL_     } _EL_   } _EL_   if (name.equalsIgnoreCase("content-length")) { _EL_     return _contentLengthOut >= 0 ? String.valueOf(_contentLengthOut) : null; _EL_   } _EL_   if (name.equalsIgnoreCase("content-type")) { _EL_     return _contentTypeOut; _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public static int keyBindingDescriptionToKeyCode(String keyBindingDescription){ _EL_   if (StringUtils.isBlank(keyBindingDescription)) { _EL_     return 0; _EL_   } _EL_  else   if (keyBindingDescription.equals("ESC")) { _EL_     return SWT.ESC; _EL_   } _EL_  else   if (keyBindingDescription.equals("F1")) { _EL_     return SWT.F1; _EL_   } _EL_  else   if (keyBindingDescription.equals("F2")) { _EL_     return SWT.F2; _EL_   } _EL_  else   if (keyBindingDescription.equals("F3")) { _EL_     return SWT.F3; _EL_   } _EL_  else   if (keyBindingDescription.equals("F4")) { _EL_     return SWT.F4; _EL_   } _EL_  else   if (keyBindingDescription.equals("F5")) { _EL_     return SWT.F5; _EL_   } _EL_  else   if (keyBindingDescription.equals("F6")) { _EL_     return SWT.F6; _EL_   } _EL_  else   if (keyBindingDescription.equals("F7")) { _EL_     return SWT.F7; _EL_   } _EL_  else   if (keyBindingDescription.equals("F8")) { _EL_     return SWT.F8; _EL_   } _EL_  else   if (keyBindingDescription.equals("F9")) { _EL_     return SWT.F9; _EL_   } _EL_  else   if (keyBindingDescription.equals("F10")) { _EL_     return SWT.F10; _EL_   } _EL_  else   if (keyBindingDescription.equals("F11")) { _EL_     return SWT.F11; _EL_   } _EL_  else   if (keyBindingDescription.equals("F12")) { _EL_     return SWT.F12; _EL_   } _EL_  else   if (keyBindingDescription.equals("SCRLOCK")) { _EL_     return SWT.SCROLL_LOCK; _EL_   } _EL_  else   if (VALID_ACTION_KEY_CODES.indexOf(keyBindingDescription.charAt(keyBindingDescription.length() - 1)) != -1) { _EL_     return keyBindingDescription.charAt(keyBindingDescription.length() - 1); _EL_   } _EL_  else { _EL_     return 0; _EL_   } _EL_ } _EL_ ', 'public void removeModelChange(String tableName,ModelValidator listener){ _EL_   if (tableName == null || listener == null)   return; _EL_   String propertyName=m_globalValidators.contains(listener) ? tableName + "*" : tableName + listener.getAD_Client_ID(); _EL_   ArrayList<ModelValidator> list=m_modelChangeListeners.get(propertyName); _EL_   if (list == null)   return; _EL_   list.remove(listener); _EL_   if (list.size() == 0)   m_modelChangeListeners.remove(propertyName); _EL_ } _EL_ ', 'public void bind(IntegerProperty property,int value){ _EL_   if (isAchieved())   return; _EL_   bind(property.greaterThanOrEqualTo(value)); _EL_   BooleanBinding bb=property.greaterThanOrEqualTo(value / 2); _EL_   progressListener=null; _EL_   bb.addListener(progressListener); _EL_ } _EL_ ', 'public String process(Item seg) throws ProcessException { _EL_   return segCodaCtype(seg,"f"); _EL_ } _EL_ ', '@Override public void run(){ _EL_   amIActive=true; _EL_   String demHeader=null; _EL_   String streamHeadsHeader=null; _EL_   String elevationModifiedHeader=null; _EL_   String correctedDemHeader=null; _EL_   List<StreamHead> streamHeadList=new ArrayList<>(); _EL_   int counter=0; _EL_   float progress=0; _EL_   if (args.length <= 0) { _EL_     showFeedback("Plugin parameters have not been set."); _EL_     return; _EL_   } _EL_   for (int i=0; i < args.length; i++) { _EL_     if (i == 0) { _EL_       demHeader=args[i]; _EL_     } _EL_  else     if (i == 1) { _EL_       streamHeadsHeader=args[i]; _EL_     } _EL_  else     if (i == 2) { _EL_       elevationModifiedHeader=args[i]; _EL_     } _EL_  else     if (i == 3) { _EL_       correctedDemHeader=args[i]; _EL_     } _EL_  else     if (i == 4) { _EL_       maxRadius=Double.parseDouble(args[i]); _EL_     } _EL_   } _EL_   if ((demHeader == null) || (streamHeadsHeader == null) || (elevationModifiedHeader == null)|| (correctedDemHeader == null)) { _EL_     showFeedback("One or more of the input parameters have not been set properly."); _EL_     return; _EL_   } _EL_   try { _EL_     dem=new WhiteboxRaster(demHeader,"r"); _EL_     streamHeads=new WhiteboxRaster(streamHeadsHeader,"r"); _EL_     numRows=dem.getNumberRows(); _EL_     numCols=dem.getNumberColumns(); _EL_     noData=dem.getNoDataValue(); _EL_     gridRes=dem.getCellSizeX(); _EL_     elevationModified=new WhiteboxRaster(elevationModifiedHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0); _EL_     elevationModified.setPreferredPalette("blueyellow.pal"); _EL_     elevationModified.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS); _EL_     elevationModified.setZUnits("dimensionless"); _EL_     correctedDEM=new WhiteboxRaster(correctedDemHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0); _EL_     correctedDEM.setPreferredPalette("blueyellow.pal"); _EL_     correctedDEM.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS); _EL_     correctedDEM.setZUnits("dimensionless"); _EL_     if (streamHeads.getNumberColumns() != numCols || streamHeads.getNumberRows() != numRows) { _EL_       showFeedback("Input images must have the same dimensions."); _EL_       return; _EL_     } _EL_     updateProgress("Loop 1 of 4:",0); _EL_     for (int row=0; row < numRows; row++) { _EL_       for (int col=0; col < numCols; col++) { _EL_         if (dem.getValue(row,col) != noData) { _EL_           elevationModified.setValue(row,col,0); _EL_         } _EL_  else { _EL_           elevationModified.setValue(row,col,noData); _EL_         } _EL_       } _EL_       if (cancelOp) { _EL_         cancelOperation(); _EL_         return; _EL_       } _EL_       progress=(float)(100f * row / (numRows - 1)); _EL_       updateProgress("Loop 1 of 4:",(int)progress); _EL_     } _EL_     updateProgress("Loop 2 of 4:",0); _EL_     for (int row=0; row < numRows; row++) { _EL_       for (int col=0; col < numCols; col++) { _EL_         if (streamHeads.getValue(row,col) == 1) { _EL_           streamHeadList.add(new StreamHead(col,row,dem.getValue(row,col))); _EL_         } _EL_       } _EL_       if (cancelOp) { _EL_         cancelOperation(); _EL_         return; _EL_       } _EL_       progress=(float)(100f * row / (numRows - 1)); _EL_       updateProgress("Loop 2 of 4:",(int)progress); _EL_     } _EL_     streamHeadList=OrderStreamHeads(streamHeadList); _EL_     updateProgress("Loop 3 of 4:",0); _EL_     for (    StreamHead streamHead : streamHeadList) { _EL_       CheckFlowPath(streamHead.GetXCoord(),streamHead.GetYCoord()); _EL_       counter=counter + 1; _EL_       if (cancelOp) { _EL_         cancelOperation(); _EL_         return; _EL_       } _EL_       progress=(float)(100f * counter / streamHeadList.size()); _EL_       updateProgress("Loop 3 of 4:",(int)progress); _EL_     } _EL_     updateProgress("Loop 4 of 4:",0); _EL_     for (int row=0; row < numRows; row++) { _EL_       for (int col=0; col < numCols; col++) { _EL_         if (elevationModified.getValue(row,col) != noData) { _EL_           correctedDEM.setValue(row,col,dem.getValue(row,col) - elevationModified.getValue(row,col)); _EL_         } _EL_  else { _EL_           correctedDEM.setValue(row,col,noData); _EL_         } _EL_       } _EL_       if (cancelOp) { _EL_         cancelOperation(); _EL_         return; _EL_       } _EL_       progress=(float)(100f * row / (numRows - 1)); _EL_       updateProgress("Loop 4 of 4:",(int)progress); _EL_     } _EL_     elevationModified.addMetadataEntry("Created by the " + getDescriptiveName() + " tool."); _EL_     elevationModified.addMetadataEntry("Created on " + new Date()); _EL_     correctedDEM.addMetadataEntry("Created by the " + getDescriptiveName() + " tool."); _EL_     correctedDEM.addMetadataEntry("Created on " + new Date()); _EL_     dem.close(); _EL_     streamHeads.close(); _EL_     elevationModified.close(); _EL_     correctedDEM.close(); _EL_     returnData(correctedDemHeader); _EL_   } _EL_  catch (  Exception e) { _EL_     showFeedback(e.getMessage()); _EL_   } _EL_  finally { _EL_     updateProgress("Progress: ",0); _EL_     amIActive=false; _EL_     myHost.pluginComplete(); _EL_   } _EL_ } _EL_ ', 'private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException { _EL_   s.defaultReadObject(); _EL_   if (name == null) { _EL_     if (types != null) { _EL_       throw new InvalidObjectException("cannot have types with null name"); _EL_     } _EL_   } _EL_  else { _EL_     try { _EL_       check(); _EL_     } _EL_  catch (    RuntimeException e) { _EL_       rethrow(e); _EL_     } _EL_   } _EL_   if (constraints != null && constraints.isEmpty()) { _EL_     throw new InvalidObjectException("constraints cannot be empty"); _EL_   } _EL_ } _EL_ ', 'public void ddSolve(Set<Node> qryNodes){ _EL_   long solve_time=0, prepare_time=0; _EL_   if (hasExecuted == false)   solve(); _EL_   if (ddPrepared == false || offlineProcessor == null) { _EL_     offlineProcessor=new OfflineProcessor(this); _EL_     IFigureManager.cleanCache(); _EL_     ddPrepared=true; _EL_     ps.println(); _EL_     ps.println("==> Entering demand-driven mode (experimental)."); _EL_   } _EL_   int init_size=qryNodes.size(); _EL_   if (init_size == 0) { _EL_     ps.println("Please provide at least one pointer."); _EL_     return; _EL_   } _EL_   Date prepare_begin=new Date(); _EL_   offlineProcessor.init(); _EL_   offlineProcessor.addUserDefPts(qryNodes); _EL_   offlineProcessor.runOptimizations(); _EL_   Date prepare_end=new Date(); _EL_   prepare_time+=prepare_end.getTime() - prepare_begin.getTime(); _EL_   Date begin=new Date(); _EL_   prepareNextRun(); _EL_   nodeGenerator.initFlowGraph(this); _EL_   solveConstraints(); _EL_   Date end=new Date(); _EL_   solve_time+=end.getTime() - begin.getTime(); _EL_   ps.println(); _EL_   ps.printf("[ddGeom] Preprocessing time: %.2f seconds\\n",(double)prepare_time / 1000); _EL_   ps.printf("[ddGeom] Main propagation time: %.2f seconds\\n",(double)solve_time / 1000); _EL_ } _EL_ ', '@Reference(authors="D. Pelleg, A. Moore",booktitle="X-means: Extending K-means with Efficient Estimation on the Number of Clusters",title="Proceedings of the 17th International Conference on Machine Learning (ICML 2000)",url="http://www.pelleg.org/shared/hp/download/xmeans.ps") public static <V extends NumberVector>double logLikelihood(Relation<V> relation,Clustering<? extends MeanModel> clustering,NumberVectorDistanceFunction<? super V> distanceFunction){ _EL_   List<? extends Cluster<? extends MeanModel>> clusters=clustering.getAllClusters(); _EL_   final int dim=RelationUtil.dimensionality(relation); _EL_   final int m=clusters.size(); _EL_   int n=0; _EL_   int[] n_i=new int[m]; _EL_   double d=0.; _EL_   double[] d_i=new double[m]; _EL_   Iterator<? extends Cluster<? extends MeanModel>> it=clusters.iterator(); _EL_   for (int i=0; it.hasNext(); ++i) { _EL_     Cluster<? extends MeanModel> cluster=it.next(); _EL_     n+=n_i[i]=cluster.size(); _EL_     d+=d_i[i]=varianceOfCluster(cluster,distanceFunction,relation); _EL_   } _EL_   if (n <= m) { _EL_     return Double.NEGATIVE_INFINITY; _EL_   } _EL_   final double v=d / (n - m), logv=Math.log(v); _EL_   double logLikelihood=0.; _EL_   for (int i=0; i < m; i++) { _EL_     logLikelihood+=n_i[i] * Math.log(n_i[i]) - n_i[i] * .5 * MathUtil.LOGTWOPI - n_i[i] * dim * .5* logv - (d_i[i] - m) * .5; _EL_   } _EL_   logLikelihood-=n * Math.log(n); _EL_   return logLikelihood; _EL_ } _EL_ ', 'private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { _EL_   in.defaultReadObject(); _EL_   try { _EL_     initFromName(getName()); _EL_   } _EL_  catch (  RuntimeException e) { _EL_     if (e instanceof NullPointerException || e instanceof IllegalArgumentException) { _EL_       InvalidObjectException ee=new InvalidObjectException(e.getMessage()); _EL_       ee.initCause(e); _EL_       throw ee; _EL_     } _EL_     throw e; _EL_   } _EL_ } _EL_ ', 'public void addPriorityPackage(String pkg){ _EL_   if (_priorityPackages == null)   _priorityPackages=new String[0]; _EL_   int oldLength=_priorityPackages.length; _EL_   String[] newPkgs=new String[oldLength + 1]; _EL_   System.arraycopy(_priorityPackages,0,newPkgs,0,oldLength); _EL_   if (!pkg.endsWith("."))   pkg=pkg + \'.\'; _EL_   newPkgs[oldLength]=pkg; _EL_   _priorityPackages=newPkgs; _EL_ } _EL_ ', 'protected boolean isAttributesModified(){ _EL_   if (attributes != null) { _EL_     return (attributes.isEmpty()) ? false : true; _EL_   } _EL_   return false; _EL_ } _EL_ ', '@SuppressWarnings("unchecked") private static <T>void assertThrows(final Consumer<Void> consumer,final Class<T> exceptionClass,final Consumer<T> assertExceptionProperties,final String message){ _EL_   final String normalizedMessage=null == message ? "" : String.format("[%s]: ",message); _EL_   try { _EL_     consumer.accept(null); _EL_   } _EL_  catch (  final Exception ex) { _EL_     if (exceptionClass.isAssignableFrom(ex.getClass())) { _EL_       assertExceptionProperties.accept((T)ex); _EL_       return; _EL_     } _EL_     Assert.fail(String.format("%sunexpected exception of type %s was thrown: \'%s\'",normalizedMessage,ex.getClass(),ex.getMessage())); _EL_   } _EL_   Assert.fail(String.format("%sexpected exception of type %s was not thrown",normalizedMessage,exceptionClass)); _EL_ } _EL_ ', 'public Time(Date time){ _EL_   SimpleTimeZone tz=new SimpleTimeZone(0,"Z"); _EL_   SimpleDateFormat dateF=new SimpleDateFormat("yyyyMMddHHmmss"); _EL_   dateF.setTimeZone(tz); _EL_   String d=dateF.format(time) + "Z"; _EL_   int year=Integer.parseInt(d.substring(0,4)); _EL_   if (year < 1950 || year > 2049) { _EL_     this.time=new DERGeneralizedTime(d); _EL_   } _EL_  else { _EL_     this.time=new DERUTCTime(d.substring(2)); _EL_   } _EL_ } _EL_ ', '@Override public BigDecimal calculateTotalPendingAdvance(final BigDecimal totalAdvancePaid,final Date billDate,final WorkOrderEstimate workOrderEstimate,final Long billId){ _EL_   final CChartOfAccounts advanceCOA=contractorAdvanceService.getContractorAdvanceAccountcodeForWOE(workOrderEstimate.getId()); _EL_   BigDecimal totalPendingBalance=BigDecimal.ZERO; _EL_   BigDecimal totalAdvanceAdjusted=BigDecimal.ZERO; _EL_   if (advanceCOA != null && totalAdvancePaid != null && totalAdvancePaid.compareTo(BigDecimal.ZERO) > 0) { _EL_     totalAdvanceAdjusted=getTotalAdvanceAdjustedForWOE(billDate,workOrderEstimate.getId(),advanceCOA.getId(),billId); _EL_     if (totalAdvanceAdjusted != null && totalAdvanceAdjusted.compareTo(BigDecimal.ZERO) > 0 && totalAdvanceAdjusted.compareTo(BigDecimal.ZERO) > 0)     totalPendingBalance=totalAdvanceAdjusted.subtract(totalAdvanceAdjusted); _EL_  else     totalPendingBalance=totalAdvancePaid; _EL_   } _EL_   return totalPendingBalance; _EL_ } _EL_ ', 'public void sendEvent(final String name,final Map<String,String> properties){ _EL_   final String eventName=String.format(TfsTelemetryConstants.PLUGIN_ACTION_EVENT_NAME_FORMAT,name); _EL_   final PropertyMapBuilder builder=new PropertyMapBuilder(properties); _EL_   logger.debug(String.format("sendEvent(%s, %s)",name,builder.toString())); _EL_   if (telemetryClient != null) { _EL_     telemetryClient.trackEvent(eventName,builder.build(),null); _EL_   } _EL_ } _EL_ ', 'public static Properties loadConfigFile(String path){ _EL_   Properties property=null; _EL_   File file=new File(path); _EL_   if (file.exists() && file.canRead()) { _EL_     try { _EL_       property=new Properties(); _EL_       property.load(new FileReader(file.getAbsolutePath())); _EL_     } _EL_  catch (    FileNotFoundException e) { _EL_       e.printStackTrace(); _EL_     } _EL_ catch (    IOException e) { _EL_       e.printStackTrace(); _EL_     } _EL_   } _EL_   return property; _EL_ } _EL_ ', 'private List<FahrzeitEvent> addFahrtInfoToFahrzeitEvents(List<FahrtEvent> fahrtEvents,List<FahrzeitEvent> fahrzeitEvents,boolean keepFahrzeitEventsWithoutFahrtEvent){ _EL_   List<FahrzeitEvent> fahrzeitEventsOut=new LinkedList<FahrzeitEvent>(); _EL_   Map<String,FahrtEvent> rblDateKursDateTimeIst2FahrtEventMap=new HashMap<String,FahrtEvent>(); _EL_   Set<String> searchStrings=new TreeSet<String>(); _EL_   for (  FahrtEvent fahrtEvent : fahrtEvents) { _EL_     String searchId=String.valueOf(fahrtEvent.getRblDate()) + String.valueOf(fahrtEvent.getKurs()) + fahrtEvent.getDepartureDateIst()+ fahrtEvent.getDepartureTimeIst(); _EL_     if (searchStrings.contains(searchId)) { _EL_       log.warn("Search string already exists. This should not happen. " + searchId); _EL_     } _EL_  else { _EL_       searchStrings.add(searchId); _EL_       rblDateKursDateTimeIst2FahrtEventMap.put(searchId,fahrtEvent); _EL_     } _EL_   } _EL_   int numberOfMissingFahrtEvents=0; _EL_   for (  FahrzeitEvent fahrzeitEvent : fahrzeitEvents) { _EL_     String searchId=String.valueOf(fahrzeitEvent.getRblDate()) + String.valueOf(fahrzeitEvent.getKurs()) + fahrzeitEvent.getDepartureDateIst()+ fahrzeitEvent.getDepartureTimeIst(); _EL_     FahrtEvent fahrtEvent=rblDateKursDateTimeIst2FahrtEventMap.get(searchId); _EL_     if (fahrtEvent == null) { _EL_       numberOfMissingFahrtEvents++; _EL_       if (keepFahrzeitEventsWithoutFahrtEvent) { _EL_         fahrzeitEventsOut.add(fahrzeitEvent); _EL_       } _EL_     } _EL_  else { _EL_       fahrzeitEvent.add(fahrtEvent); _EL_       fahrzeitEventsOut.add(fahrzeitEvent); _EL_     } _EL_   } _EL_   log.info(numberOfMissingFahrtEvents + " fahrzeit events could not be linked to a fahrt event"); _EL_   log.info("Returning " + fahrzeitEventsOut.size() + " fahrzeitEvents"); _EL_   return fahrzeitEventsOut; _EL_ } _EL_ ', 'MVStore(HashMap<String,Object> config){ _EL_   Object o=config.get("compress"); _EL_   this.compressionLevel=o == null ? 0 : (Integer)o; _EL_   String fileName=(String)config.get("fileName"); _EL_   o=config.get("pageSplitSize"); _EL_   if (o == null) { _EL_     pageSplitSize=fileName == null ? 4 * 1024 : 16 * 1024; _EL_   } _EL_  else { _EL_     pageSplitSize=(Integer)o; _EL_   } _EL_   o=config.get("backgroundExceptionHandler"); _EL_   this.backgroundExceptionHandler=(UncaughtExceptionHandler)o; _EL_   meta=new MVMap<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE); _EL_   HashMap<String,Object> c=New.hashMap(); _EL_   c.put("id",0); _EL_   c.put("createVersion",currentVersion); _EL_   meta.init(this,c); _EL_   fileStore=(FileStore)config.get("fileStore"); _EL_   if (fileName == null && fileStore == null) { _EL_     cache=null; _EL_     cacheChunkRef=null; _EL_     return; _EL_   } _EL_   if (fileStore == null) { _EL_     fileStoreIsProvided=false; _EL_     fileStore=new FileStore(); _EL_   } _EL_  else { _EL_     fileStoreIsProvided=true; _EL_   } _EL_   retentionTime=fileStore.getDefaultRetentionTime(); _EL_   boolean readOnly=config.containsKey("readOnly"); _EL_   o=config.get("cacheSize"); _EL_   int mb=o == null ? 16 : (Integer)o; _EL_   if (mb > 0) { _EL_     CacheLongKeyLIRS.Config cc=new CacheLongKeyLIRS.Config(); _EL_     cc.maxMemory=mb * 1024L * 1024L; _EL_     o=config.get("cacheConcurrency"); _EL_     if (o != null) { _EL_       cc.segmentCount=(Integer)o; _EL_     } _EL_     cache=new CacheLongKeyLIRS<Page>(cc); _EL_     cc.maxMemory/=4; _EL_     cacheChunkRef=new CacheLongKeyLIRS<PageChildren>(cc); _EL_   } _EL_   o=config.get("autoCommitBufferSize"); _EL_   int kb=o == null ? 1024 : (Integer)o; _EL_   autoCommitMemory=kb * 1024 * 19; _EL_   o=config.get("autoCompactFillRate"); _EL_   autoCompactFillRate=o == null ? 50 : (Integer)o; _EL_   char[] encryptionKey=(char[])config.get("encryptionKey"); _EL_   try { _EL_     if (!fileStoreIsProvided) { _EL_       fileStore.open(fileName,readOnly,encryptionKey); _EL_     } _EL_     if (fileStore.size() == 0) { _EL_       creationTime=getTimeAbsolute(); _EL_       lastCommitTime=creationTime; _EL_       storeHeader.put("H",2); _EL_       storeHeader.put("blockSize",BLOCK_SIZE); _EL_       storeHeader.put("format",FORMAT_WRITE); _EL_       storeHeader.put("created",creationTime); _EL_       writeStoreHeader(); _EL_     } _EL_  else { _EL_       readStoreHeader(); _EL_     } _EL_   } _EL_  catch (  IllegalStateException e) { _EL_     panic(e); _EL_   } _EL_  finally { _EL_     if (encryptionKey != null) { _EL_       Arrays.fill(encryptionKey,(char)0); _EL_     } _EL_   } _EL_   lastCommitTime=getTimeSinceCreation(); _EL_   o=config.get("autoCommitDelay"); _EL_   int delay=o == null ? 1000 : (Integer)o; _EL_   setAutoCommitDelay(delay); _EL_ } _EL_ ', 'public void appendCell(float value){ _EL_   appendCell(String.valueOf(value)); _EL_ } _EL_ ', 'private static CopyState readCopyState(DataInput in) throws IOException { _EL_   byte[] infosBytes=new byte[in.readVInt()]; _EL_   in.readBytes(infosBytes,0,infosBytes.length); _EL_   long gen=in.readVLong(); _EL_   long version=in.readVLong(); _EL_   Map<String,FileMetaData> files=CopyFilesHandler.readFilesMetaData(in); _EL_   int count=in.readVInt(); _EL_   Set<String> completedMergeFiles=new HashSet<>(); _EL_   for (int i=0; i < count; i++) { _EL_     completedMergeFiles.add(in.readString()); _EL_   } _EL_   long primaryGen=in.readVLong(); _EL_   return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null); _EL_ } _EL_ ', 'private void unifyViaAtom(Atomic parentAtom){ _EL_   Atomic childAtom=getRuleConclusionAtom(); _EL_   Query parent=parentAtom.getParentQuery(); _EL_   Map<String,String> unifiers=childAtom.getUnifiers(parentAtom); _EL_   head.unify(unifiers); _EL_   body.unify(unifiers); _EL_   Set<String> childFVs=body.getVarSet(); _EL_   Set<String> parentBVs=parentAtom.getVarNames(); _EL_   Set<String> parentVars=parent.getVarSet(); _EL_   parentBVs.forEach(null); _EL_   childFVs.forEach(null); _EL_ } _EL_ ', 'private void updateVolumeLabels(Volume trustedSrc,Volume invalidTgt){ _EL_   VirtualArray invalidTgtVA=dbClient.queryObject(VirtualArray.class,invalidTgt.getVirtualArray()); _EL_   StringBuilder newLabel=new StringBuilder(); _EL_   newLabel.append(trustedSrc.getLabel()); _EL_   newLabel.append("-target-"); _EL_   newLabel.append(invalidTgtVA.getLabel()); _EL_   log.info("Revised name for target: " + newLabel.toString()); _EL_   invalidTgt.setLabel(newLabel.toString()); _EL_   NamedURI projectURI=invalidTgt.getProject(); _EL_   projectURI.setName(newLabel.toString()); _EL_   invalidTgt.setProject(projectURI); _EL_   NamedURI tenantURI=invalidTgt.getTenant(); _EL_   tenantURI.setName(newLabel.toString()); _EL_   invalidTgt.setTenant(tenantURI); _EL_   Volume tgtVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,invalidTgt); _EL_   if (tgtVplexVolume != null) { _EL_     Volume srcVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,trustedSrc); _EL_     if (srcVplexVolume != null) { _EL_       newLabel.setLength(0); _EL_       newLabel.append(srcVplexVolume.getLabel()); _EL_       newLabel.append("-target-"); _EL_       newLabel.append(invalidTgtVA.getLabel()); _EL_       log.info("Revised name for VPlex target: " + newLabel.toString()); _EL_       tgtVplexVolume.setLabel(newLabel.toString()); _EL_       projectURI=tgtVplexVolume.getProject(); _EL_       projectURI.setName(newLabel.toString()); _EL_       tgtVplexVolume.setProject(projectURI); _EL_       tenantURI=tgtVplexVolume.getTenant(); _EL_       tenantURI.setName(newLabel.toString()); _EL_       tgtVplexVolume.setTenant(tenantURI); _EL_       dbClient.updateAndReindexObject(tgtVplexVolume); _EL_     } _EL_   } _EL_ } _EL_ ', 'public static Map<String,Object> findContentParents(DispatchContext dctx,Map<String,? extends Object> context){ _EL_   Map<String,Object> results=FastMap.newInstance(); _EL_   List<Object> parentList=FastList.newInstance(); _EL_   results.put("parentList",parentList); _EL_   LocalDispatcher dispatcher=dctx.getDispatcher(); _EL_   String contentId=(String)context.get("contentId"); _EL_   String contentAssocTypeId=(String)context.get("contentAssocTypeId"); _EL_   String direction=(String)context.get("direction"); _EL_   if (UtilValidate.isEmpty(direction)) { _EL_     direction="To"; _EL_   } _EL_   Map<String,Object> traversMap=FastMap.newInstance(); _EL_   traversMap.put("contentId",contentId); _EL_   traversMap.put("direction",direction); _EL_   traversMap.put("contentAssocTypeId",contentAssocTypeId); _EL_   try { _EL_     Map<String,Object> thisResults=dispatcher.runSync("traverseContent",traversMap); _EL_     String errorMsg=ServiceUtil.getErrorMessage(thisResults); _EL_     if (UtilValidate.isNotEmpty(errorMsg)) { _EL_       Debug.logError("Problem in traverseContent. " + errorMsg,module); _EL_       return ServiceUtil.returnError(errorMsg); _EL_     } _EL_     Map<String,Object> nodeMap=UtilGenerics.checkMap(thisResults.get("nodeMap")); _EL_     walkParentTree(nodeMap,parentList); _EL_   } _EL_  catch (  GenericServiceException e) { _EL_     return ServiceUtil.returnFailure(e.getMessage()); _EL_   } _EL_   return results; _EL_ } _EL_ ', 'public void limitTransAndScale(Matrix matrix,RectF content){ _EL_   float[] vals=new float[9]; _EL_   matrix.getValues(vals); _EL_   float curTransX=vals[Matrix.MTRANS_X]; _EL_   float curScaleX=vals[Matrix.MSCALE_X]; _EL_   float curTransY=vals[Matrix.MTRANS_Y]; _EL_   float curScaleY=vals[Matrix.MSCALE_Y]; _EL_   mScaleX=Math.max(mMinScaleX,curScaleX); _EL_   mScaleY=Math.max(mMinScaleY,curScaleY); _EL_   float width=0f; _EL_   float height=0f; _EL_   if (content != null) { _EL_     width=content.width(); _EL_     height=content.height(); _EL_   } _EL_   float maxTransX=-width * (mScaleX - 1f); _EL_   float newTransX=Math.min(Math.max(curTransX,maxTransX - mTransOffsetX),mTransOffsetX); _EL_   float maxTransY=height * (mScaleY - 1f); _EL_   float newTransY=Math.max(Math.min(curTransY,maxTransY + mTransOffsetY),-mTransOffsetY); _EL_   vals[Matrix.MTRANS_X]=newTransX; _EL_   vals[Matrix.MSCALE_X]=mScaleX; _EL_   vals[Matrix.MTRANS_Y]=newTransY; _EL_   vals[Matrix.MSCALE_Y]=mScaleY; _EL_   matrix.setValues(vals); _EL_ } _EL_ ', 'private static void removeDependencySubsets(String swcLocation,Map<String,Set<String>> dependencyMap,SwcDependencyInfoImpl depInfo){ _EL_   Set<String> removeSet=new HashSet<String>(); _EL_   SwcExternalScriptInfo externalInfo=depInfo.getSwcExternalScriptInfo(swcLocation); _EL_   Map<String,Set<String>> externalsBySwc=new HashMap<String,Set<String>>(); _EL_   for (  String swcDependLocation : dependencyMap.get(swcLocation)) { _EL_     for (    String swcDependLocation2 : dependencyMap.get(swcLocation)) { _EL_       if (swcDependLocation.equals(swcDependLocation2))       continue; _EL_       Set<String> externalScripts=externalsBySwc.get(swcDependLocation); _EL_       Set<String> externalScripts2=externalsBySwc.get(swcDependLocation2); _EL_       if (externalScripts == null) { _EL_         externalScripts=externalInfo.getExternalScripts(swcDependLocation); _EL_         externalsBySwc.put(swcDependLocation,externalScripts); _EL_       } _EL_       if (externalScripts2 == null) { _EL_         externalScripts2=externalInfo.getExternalScripts(swcDependLocation2); _EL_         externalsBySwc.put(swcDependLocation2,externalScripts2); _EL_       } _EL_       if (externalScripts2.size() > externalScripts.size() && externalScripts2.containsAll(externalScripts)) { _EL_         removeSet.add(swcDependLocation); _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   Set<String> dependencySet=dependencyMap.get(swcLocation); _EL_   dependencySet.removeAll(removeSet); _EL_ } _EL_ ', 'public String checkStartBlock(int mode){ _EL_   if (log.isDebugEnabled())   log.debug("checkStartBlock for warrant \\"" + getDisplayName() + "\\"."); _EL_   BlockOrder bo=_orders.get(0); _EL_   OBlock block=bo.getBlock(); _EL_   String msg=block.allocate(this); _EL_   if (msg != null) { _EL_     return msg; _EL_   } _EL_   msg=bo.setPath(this); _EL_   if (msg != null) { _EL_     return msg; _EL_   } _EL_   int state=block.getState(); _EL_   if ((state & OBlock.DARK) != 0 || _tempRunBlind) { _EL_     msg=Bundle.getMessage("BlockDark",block.getDisplayName()); _EL_   } _EL_  else   if ((state & OBlock.OCCUPIED) == 0) { _EL_     if (mode == MODE_LEARN) { _EL_       msg="learnStart"; _EL_     } _EL_  else { _EL_       msg="warnStart"; _EL_     } _EL_     msg=Bundle.getMessage(msg,getTrainName(),block.getDisplayName()); _EL_   } _EL_  else { _EL_     TrackerTableAction.stopTrackerIn(block); _EL_   } _EL_   return msg; _EL_ } _EL_ ', 'public static ReilGraph copyReilCode(final Window parent,final INaviCodeNode node){ _EL_   final ReilTranslator<INaviInstruction> translator=new ReilTranslator<INaviInstruction>(); _EL_   try { _EL_     return translator.translate(new StandardEnvironment(),node); _EL_   } _EL_  catch (  final InternalTranslationException e) { _EL_     CUtilityFunctions.logException(e); _EL_     final String message="E000XXX: " + "Could not show REIL code for node"; _EL_     final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not show the REIL code for basic block at \'%X\'.",node.getAddress()),new String[]{"The instructions could not be converted to REIL code."},new String[]{"You can not fix this problem yourself. Please contact " + "the BinNavi support."}); _EL_     NaviErrorDialog.show(parent,message,description,e); _EL_   } _EL_   return null; _EL_ } _EL_ ', 'public boolean isFingerprint(ClassTemplate classTemplate){ _EL_   return fingerprintClass.equals(classTemplate.getImplementingClass()); _EL_ } _EL_ ', 'public void initialize(Context context,HapticFeedbackController hapticFeedbackController,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){ _EL_   if (mTimeInitialized) { _EL_     Log.e(TAG,"Time has already been initialized."); _EL_     return; _EL_   } _EL_   mHapticFeedbackController=hapticFeedbackController; _EL_   mIs24HourMode=is24HourMode; _EL_   mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() ? true : mIs24HourMode; _EL_   mCircleView.initialize(context,mHideAmPm); _EL_   mCircleView.invalidate(); _EL_   if (!mHideAmPm) { _EL_     mAmPmCirclesView.initialize(context,initialHoursOfDay < 12 ? AM : PM); _EL_     mAmPmCirclesView.invalidate(); _EL_   } _EL_   Resources res=context.getResources(); _EL_   int[] hours={12,1,2,3,4,5,6,7,8,9,10,11}; _EL_   int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23}; _EL_   int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55}; _EL_   String[] hoursTexts=new String[12]; _EL_   String[] innerHoursTexts=new String[12]; _EL_   String[] minutesTexts=new String[12]; _EL_   for (int i=0; i < 12; i++) { _EL_     hoursTexts[i]=is24HourMode ? String.format("%02d",hours_24[i]) : String.format("%d",hours[i]); _EL_     innerHoursTexts[i]=String.format("%d",hours[i]); _EL_     minutesTexts[i]=String.format("%02d",minutes[i]); _EL_   } _EL_   mHourRadialTextsView.initialize(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true); _EL_   mHourRadialTextsView.invalidate(); _EL_   mMinuteRadialTextsView.initialize(res,minutesTexts,null,mHideAmPm,false); _EL_   mMinuteRadialTextsView.invalidate(); _EL_   setValueForItem(HOUR_INDEX,initialHoursOfDay); _EL_   setValueForItem(MINUTE_INDEX,initialMinutes); _EL_   int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE; _EL_   mHourRadialSelectorView.initialize(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay)); _EL_   int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE; _EL_   mMinuteRadialSelectorView.initialize(context,mHideAmPm,false,false,minuteDegrees,false); _EL_   mTimeInitialized=true; _EL_ } _EL_ ', 'private String convertLessThanOneThousand(int number){ _EL_   String soFar; _EL_   if (number % 100 < 20) { _EL_     soFar=numNames[number % 100]; _EL_     number/=100; _EL_   } _EL_  else { _EL_     soFar=numNames[number % 10]; _EL_     number/=10; _EL_     String s=Integer.toString(number); _EL_     if (s.endsWith("2") && !soFar.equals(""))     soFar=" VINT-I-" + soFar.trim(); _EL_  else     if (soFar.equals(""))     soFar=tensNames[number % 10] + soFar; _EL_  else     soFar=tensNames[number % 10] + "-" + soFar; _EL_     number/=10; _EL_   } _EL_   if (number == 0)   return tensNames[number % 10] + soFar; _EL_   if (number > 1)   soFar="S" + soFar; _EL_   if (number == 1 && !soFar.equals(""))   number=0; _EL_   return numNames[number] + " CENT" + soFar; _EL_ } _EL_ ', '@Modifying @Transactional public void deleteCheque(@PathVariable Long chequeID){ _EL_   chequeRepository.delete(chequeID); _EL_   photoRepository.deleteByChequeId(chequeID.toString()); _EL_ } _EL_ ', 'static public void assertStatementIndicesConsistent(final AbstractTripleStore db,final int maxerrors){ _EL_   if (log.isInfoEnabled())   log.info("Verifying statement indices"); _EL_   final AtomicInteger nerrs=new AtomicInteger(0); _EL_   final int from, to; _EL_   if (db.getSPOKeyArity() == 3) { _EL_     from=SPOKeyOrder.FIRST_TRIPLE_INDEX; _EL_     to=SPOKeyOrder.LAST_TRIPLE_INDEX; _EL_   } _EL_  else { _EL_     from=SPOKeyOrder.FIRST_QUAD_INDEX; _EL_     to=SPOKeyOrder.LAST_QUAD_INDEX; _EL_   } _EL_   for (int i=from; i <= to; i++) { _EL_     for (int j=from; j <= to; j++) { _EL_       if (i <= j) { _EL_         continue; _EL_       } _EL_       assertSameStatements(db,SPOKeyOrder.valueOf(i),SPOKeyOrder.valueOf(j),nerrs,maxerrors); _EL_     } _EL_   } _EL_   assertEquals(0,nerrs.get()); _EL_ } _EL_ ', 'public boolean checkForRp(){ _EL_   return NullColumnValueGetter.isNotNullValue(getRpCopyName()); _EL_ } _EL_ ', 'protected OkHttpClient configureHttpClient(){ _EL_   final OkHttpClient.Builder builder=new OkHttpClient.Builder(); _EL_   final CookieManager cookieManager=new CookieManager(); _EL_   cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL); _EL_   builder.cookieJar(new JavaNetCookieJar(cookieManager)); _EL_   builder.connectTimeout(60,TimeUnit.SECONDS); _EL_   builder.writeTimeout(60,TimeUnit.SECONDS); _EL_   builder.readTimeout(90,TimeUnit.SECONDS); _EL_   return builder.build(); _EL_ } _EL_ ', 'public static int len(String list,String delimiter,boolean ignoreEmpty){ _EL_   if (delimiter.length() == 1)   return len(list,delimiter.charAt(0),ignoreEmpty); _EL_   char[] del=delimiter.toCharArray(); _EL_   int len=StringUtil.length(list); _EL_   if (len == 0)   return 0; _EL_   int count=0; _EL_   int last=0; _EL_   char c; _EL_   for (int i=0; i < len; i++) { _EL_     c=list.charAt(i); _EL_     for (int y=0; y < del.length; y++) { _EL_       if (c == del[y]) { _EL_         if (!ignoreEmpty || last < i)         count++; _EL_         last=i + 1; _EL_         break; _EL_       } _EL_     } _EL_   } _EL_   if (!ignoreEmpty || last < len)   count++; _EL_   return count; _EL_ } _EL_ ', 'static CopyState readCopyState(DataInput in) throws IOException { _EL_   byte[] infosBytes=new byte[in.readVInt()]; _EL_   in.readBytes(infosBytes,0,infosBytes.length); _EL_   long gen=in.readVLong(); _EL_   long version=in.readVLong(); _EL_   Map<String,FileMetaData> files=readFilesMetaData(in); _EL_   int count=in.readVInt(); _EL_   Set<String> completedMergeFiles=new HashSet<>(); _EL_   for (int i=0; i < count; i++) { _EL_     completedMergeFiles.add(in.readString()); _EL_   } _EL_   long primaryGen=in.readVLong(); _EL_   return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null); _EL_ } _EL_ ', 'public final void removeAll(){ _EL_   actionList.clear(); _EL_   constraintsList.clear(); _EL_   needSorting=true; _EL_ } _EL_ ', 'public void println() throws IOException { _EL_   out.write(strategy.getPrinterNewline()); _EL_   newLine=true; _EL_ } _EL_ ', 'private void requestFragmenting(IgfsEntryInfo fileInfo){ _EL_   IgfsFileMap map=fileInfo.fileMap(); _EL_   assert map != null && !map.ranges().isEmpty(); _EL_   Map<UUID,Collection<IgfsFileAffinityRange>> grpMap=U.newHashMap(map.ranges().size()); _EL_   for (  IgfsFileAffinityRange range : map.ranges()) { _EL_     UUID nodeId=igfsCtx.data().affinityNode(range.affinityKey()).id(); _EL_     Collection<IgfsFileAffinityRange> nodeRanges=grpMap.get(nodeId); _EL_     if (nodeRanges == null) { _EL_       nodeRanges=new LinkedList<>(); _EL_       grpMap.put(nodeId,nodeRanges); _EL_     } _EL_     nodeRanges.addAll(range.split(igfsCtx.data().groupBlockSize())); _EL_   } _EL_   Collection<UUID> nodeIds=new IdentityHashSet(grpMap.keySet()); _EL_   if (log.isDebugEnabled())   log.debug("Calculating fragmentizer groups for file [fileInfo=" + fileInfo + ", nodeIds="+ nodeIds+ \']\'); _EL_   Object old=fragmentingFiles.putIfAbsent(fileInfo.id(),nodeIds); _EL_   assert old == null; _EL_   for (  Map.Entry<UUID,Collection<IgfsFileAffinityRange>> entry : grpMap.entrySet()) { _EL_     UUID nodeId=entry.getKey(); _EL_     IgfsFragmentizerRequest msg=new IgfsFragmentizerRequest(fileInfo.id(),entry.getValue()); _EL_     try { _EL_       if (log.isDebugEnabled())       log.debug("Sending fragmentizer request to remote node [nodeId=" + nodeId + ", fileId="+ fileInfo.id()+ ", msg="+ msg+ \']\'); _EL_       sendWithRetries(nodeId,msg); _EL_     } _EL_  catch (    IgniteCheckedException e) { _EL_       if (e.hasCause(ClusterTopologyCheckedException.class)) { _EL_         if (log.isDebugEnabled())         log.debug("Failed to send fragmentizer request to remote node (node left grid): " + nodeId); _EL_       } _EL_  else       U.error(log,"Failed to send fragmentizer request to remote node [nodeId=" + nodeId + ", msg="+ msg+ \']\',e); _EL_       nodeIds.remove(nodeId); _EL_     } _EL_   } _EL_   if (nodeIds.isEmpty()) { _EL_     if (log.isDebugEnabled())     log.debug("Got empty wait set for fragmentized file: " + fileInfo); _EL_     fragmentingFiles.remove(fileInfo.id(),nodeIds); _EL_   } _EL_ } _EL_ ', 'public static EnergyNetwork initNetwork(){ _EL_   Random random=new Random(System.currentTimeMillis()); _EL_   int id=random.nextInt(); _EL_   while (usedIds.contains(id)) { _EL_     id=random.nextInt(); _EL_   } _EL_   ; _EL_   EnergyNetwork net=new EnergyNetwork(); _EL_   usedIds.add(id); _EL_   net.networkID=id; _EL_   return net; _EL_ } _EL_ ', 'public Builder deleteEntitlements(){ _EL_   deleteFields.add("entitlements"); _EL_   return this; _EL_ } _EL_ ', 'public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,final HttpServletRequest req,final Method reqMethod,final HttpServletResponse resp){ _EL_   if (Method.POST == reqMethod || Method.OTHER == reqMethod) { _EL_     return false; _EL_   } _EL_   final long lastMod=HttpCacheHeaderUtil.calcLastModified(solrReq); _EL_   final String etag=HttpCacheHeaderUtil.calcEtag(solrReq); _EL_   resp.setDateHeader("Last-Modified",lastMod); _EL_   resp.setHeader("ETag",etag); _EL_   if (checkETagValidators(req,resp,reqMethod,etag)) { _EL_     return true; _EL_   } _EL_   if (checkLastModValidators(req,resp,lastMod)) { _EL_     return true; _EL_   } _EL_   return false; _EL_ } _EL_ ', 'public void initialize(Context context,TimePickerDialog timePickerDialog,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){ _EL_   if (mTimeInitialized) { _EL_     Log.e(TAG,"Time has already been initialized."); _EL_     return; _EL_   } _EL_   mTimePickerDialog=timePickerDialog; _EL_   mIs24HourMode=is24HourMode; _EL_   mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() || mIs24HourMode; _EL_   mCircleView.initialize(context,mHideAmPm); _EL_   mCircleView.invalidate(); _EL_   if (!mHideAmPm) { _EL_     mAmPmCirclesView.initialize(context,initialHoursOfDay < 12 ? AM : PM); _EL_     mAmPmCirclesView.invalidate(); _EL_   } _EL_   Resources res=context.getResources(); _EL_   int[] hours={12,1,2,3,4,5,6,7,8,9,10,11}; _EL_   int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23}; _EL_   int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55}; _EL_   String[] hoursTexts=new String[12]; _EL_   String[] innerHoursTexts=new String[12]; _EL_   String[] minutesTexts=new String[12]; _EL_   for (int i=0; i < 12; i++) { _EL_     hoursTexts[i]=is24HourMode ? String.format("%02d",hours_24[i]) : String.format("%d",hours[i]); _EL_     innerHoursTexts[i]=String.format("%d",hours[i]); _EL_     minutesTexts[i]=String.format("%02d",minutes[i]); _EL_   } _EL_   mHourRadialTextsView.initialize(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true); _EL_   mHourRadialTextsView.setSelection(is24HourMode ? initialHoursOfDay : hours[initialHoursOfDay % 12]); _EL_   mHourRadialTextsView.invalidate(); _EL_   mMinuteRadialTextsView.initialize(res,minutesTexts,null,mHideAmPm,false); _EL_   mMinuteRadialTextsView.setSelection(initialMinutes); _EL_   mMinuteRadialTextsView.invalidate(); _EL_   setValueForItem(HOUR_INDEX,initialHoursOfDay); _EL_   setValueForItem(MINUTE_INDEX,initialMinutes); _EL_   int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE; _EL_   mHourRadialSelectorView.initialize(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay)); _EL_   int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE; _EL_   mMinuteRadialSelectorView.initialize(context,mHideAmPm,false,false,minuteDegrees,false); _EL_   mTimeInitialized=true; _EL_ } _EL_ ', 'private boolean saveMacro(){ _EL_   if (firstTime) { _EL_     try { _EL_       Thread.sleep(firstTimeSleep); _EL_     } _EL_  catch (    InterruptedException e) { _EL_       e.printStackTrace(); _EL_     } _EL_   } _EL_   firstTime=false; _EL_   byte[] macroAccy=new byte[macroSize]; _EL_   int index=0; _EL_   int accyNum=0; _EL_   accyNum=getAccyRow(macroAccy,index,textAccy1,accyTextField1,cmdButton1); _EL_   if (accyNum < 0) { _EL_     return false; _EL_   } _EL_   if (accyNum > 0) { _EL_     index+=2; _EL_   } _EL_   accyNum=getAccyRow(macroAccy,index,textAccy2,accyTextField2,cmdButton2); _EL_   if (accyNum < 0) { _EL_     return false; _EL_   } _EL_   if (accyNum > 0) { _EL_     index+=2; _EL_   } _EL_   accyNum=getAccyRow(macroAccy,index,textAccy3,accyTextField3,cmdButton3); _EL_   if (accyNum < 0) { _EL_     return false; _EL_   } _EL_   if (accyNum > 0) { _EL_     index+=2; _EL_   } _EL_   accyNum=getAccyRow(macroAccy,index,textAccy4,accyTextField4,cmdButton4); _EL_   if (accyNum < 0) { _EL_     return false; _EL_   } _EL_   if (accyNum > 0) { _EL_     index+=2; _EL_   } _EL_   accyNum=getAccyRow(macroAccy,index,textAccy5,accyTextField5,cmdButton5); _EL_   if (accyNum < 0) { _EL_     return false; _EL_   } _EL_   if (accyNum > 0) { _EL_     index+=2; _EL_   } _EL_   accyNum=getAccyRow(macroAccy,index,textAccy6,accyTextField6,cmdButton6); _EL_   if (accyNum < 0) { _EL_     return false; _EL_   } _EL_   if (accyNum > 0) { _EL_     index+=2; _EL_   } _EL_   accyNum=getAccyRow(macroAccy,index,textAccy7,accyTextField7,cmdButton7); _EL_   if (accyNum < 0) { _EL_     return false; _EL_   } _EL_   if (accyNum > 0) { _EL_     index+=2; _EL_   } _EL_   if (!isUsb) { _EL_     accyNum=getAccyRow(macroAccy,index,textAccy8,accyTextField8,cmdButton8); _EL_     if (accyNum < 0) { _EL_       return false; _EL_     } _EL_     if (accyNum > 0) { _EL_       index+=2; _EL_     } _EL_     accyNum=getAccyRow(macroAccy,index,textAccy9,accyTextField9,cmdButton9); _EL_     if (accyNum < 0) { _EL_       return false; _EL_     } _EL_     if (accyNum > 0) { _EL_       index+=2; _EL_     } _EL_   } _EL_   accyNum=getAccyRow(macroAccy,index,textAccy10,accyTextField10,cmdButton10); _EL_   if (accyNum < 0) { _EL_     JOptionPane.showMessageDialog(this,rb.getString("EnterMacroNumberLine10"),rb.getString("NceMacro"),JOptionPane.ERROR_MESSAGE); _EL_     return false; _EL_   } _EL_   processMemory(false,true,macroNum,macroAccy); _EL_   return true; _EL_ } _EL_ ', 'private static void addHeader(Message message,String name,String value){ _EL_   Map<String,List<String>> protocolHeaders=CastUtils.cast((Map<?,?>)message.get(Message.PROTOCOL_HEADERS)); _EL_   if (protocolHeaders == null) { _EL_     protocolHeaders=new TreeMap<String,List<String>>(String.CASE_INSENSITIVE_ORDER); _EL_     message.put(Message.PROTOCOL_HEADERS,protocolHeaders); _EL_   } _EL_   List<String> header=CastUtils.cast((List<?>)protocolHeaders.get(name)); _EL_   if (header == null) { _EL_     header=new ArrayList<String>(); _EL_     protocolHeaders.put(name,header); _EL_   } _EL_   if (header.size() == 0) { _EL_     header.add(value); _EL_   } _EL_  else { _EL_     header.set(0,header.get(0) + "," + value); _EL_   } _EL_ } _EL_ ', 'private synchronized void clearTempFiles(){ _EL_   if ((tempFiles != null) && (tempFiles.size() > 0)) { _EL_     Iterator it=tempFiles.iterator(); _EL_     File file=null; _EL_     while (it.hasNext()) { _EL_       file=(File)it.next(); _EL_       file.delete(); _EL_     } _EL_     tempFiles.clear(); _EL_   } _EL_ } _EL_ ', 'private void parsePackages(SensorContext sensorContext){ _EL_   for (  Directory directory : packageList) { _EL_     sensorContext.saveMeasure(directory,CoreMetrics.DIRECTORIES,1.0); _EL_     sensorContext.saveMeasure(directory,CoreMetrics.FILES,(double)filesCount.get(directory)); _EL_   } _EL_ } _EL_ ', 'public Void call() throws Exception { _EL_   byte[][] keys=new byte[nops][]; _EL_   byte[][] vals=new byte[nops][]; _EL_   if (r.nextDouble() <= insertRate) { _EL_     for (int i=0; i < nops; i++) { _EL_       keys[i]=nextKey(); _EL_       vals[i]=new byte[5]; _EL_       r.nextBytes(vals[i]); _EL_     } _EL_     lock.lock(); _EL_     try { _EL_       ndx.submit(0,nops,keys,vals,BatchInsertConstructor.RETURN_NO_VALUES,null); _EL_       if (groundTruth != null) { _EL_         groundTruth.submit(0,nops,keys,vals,BatchInsertConstructor.RETURN_NO_VALUES,null); _EL_       } _EL_     } _EL_   finally { _EL_       lock.unlock(); _EL_     } _EL_   } _EL_  else { _EL_     for (int i=0; i < nops; i++) { _EL_       keys[i]=nextKey(); _EL_     } _EL_     lock.lock(); _EL_     try { _EL_       ndx.submit(0,nops,keys,null,BatchRemoveConstructor.RETURN_MUTATION_COUNT,null); _EL_       if (groundTruth != null) { _EL_         groundTruth.submit(0,nops,keys,null,BatchRemoveConstructor.RETURN_MUTATION_COUNT,null); _EL_       } _EL_     } _EL_   finally { _EL_       lock.unlock(); _EL_     } _EL_   } _EL_   return null; _EL_ } _EL_ ', '@Override public List<Period> generateRollingPeriods(DateTimeUnit dateTimeUnit){ _EL_   Calendar calendar=getCalendar(); _EL_   List<Period> periods=Lists.newArrayList(); _EL_   dateTimeUnit=calendar.minusDays(dateTimeUnit,calendar.weekday(dateTimeUnit) - 1); _EL_   dateTimeUnit=calendar.minusDays(dateTimeUnit,357); _EL_   for (int i=0; i < 52; i++) { _EL_     periods.add(createPeriod(dateTimeUnit,calendar)); _EL_     dateTimeUnit=calendar.plusWeeks(dateTimeUnit,1); _EL_   } _EL_   return periods; _EL_ } _EL_ ', 'public synchronized static void initialize(Connection conn) throws SQLException { _EL_   if (logHadoopIdPatterns != null && logLineagePatterns != null) { _EL_     return; _EL_   } _EL_   loadLineagePatterns(conn); _EL_   loadHadoopIdPatterns(conn); _EL_ } _EL_ ', 'public void saveSelection(IMiniTable miniTable){ _EL_   log.info(""); _EL_   ArrayList<Integer> results=new ArrayList<Integer>(); _EL_   setSelection(null); _EL_   int rows=miniTable.getRowCount(); _EL_   for (int i=0; i < rows; i++) { _EL_     IDColumn id=(IDColumn)miniTable.getValueAt(i,0); _EL_     if (id != null && id.isSelected())     results.add(id.getRecord_ID()); _EL_   } _EL_   if (results.size() == 0)   return; _EL_   log.config("Selected #" + results.size()); _EL_   setSelection(results); _EL_ } _EL_ ', 'private void loadCorpus(String source,String target,String align) throws IOException { _EL_   logger.info("Counting the number of corpus positions"); _EL_   TimeKeeper timer=TimingUtils.start(); _EL_   int numSourcePositions=0; _EL_   int numTargetPositions=0; _EL_   numSentences=0; _EL_   ParallelCorpus corpus=new ParallelCorpus(1); _EL_   try (LineNumberReader fReader=IOTools.getReaderFromFile(source)){ _EL_     LineNumberReader eReader=IOTools.getReaderFromFile(target); _EL_     LineNumberReader aReader=IOTools.getReaderFromFile(align); _EL_     for (String fLine; (fLine=fReader.readLine()) != null; ) { _EL_       String eLine=eReader.readLine(); _EL_       String aLine=aReader.readLine(); _EL_       AlignedSentence example=corpus.getSentence(fLine,eLine,aLine); _EL_       if (example != null) { _EL_         numSourcePositions+=example.sourceLength(); _EL_         numTargetPositions+=example.targetLength(); _EL_         ++numSentences; _EL_       } _EL_     } _EL_   } _EL_    final int initialVocabularySize=corpus.getVocabulary().size(); _EL_   timer.mark("Counting corpus positions"); _EL_   logger.info("Source positions: {}  Target positions: {}  Sentences: {}",numSourcePositions,numTargetPositions,numSentences); _EL_   final int srcLength=numSourcePositions + numSentences; _EL_   if (srcLength < 0)   throw new RuntimeException("Maximum source bitext size exceeded"); _EL_   srcBitext=new int[srcLength]; _EL_   f2e=new int[srcLength]; _EL_   final int tgtLength=numTargetPositions + numSentences; _EL_   if (tgtLength < 0)   throw new RuntimeException("Maximum target bitext size exceeded"); _EL_   tgtBitext=new int[tgtLength]; _EL_   e2f=new int[tgtLength]; _EL_   try (LineNumberReader fReader=IOTools.getReaderFromFile(source)){ _EL_     LineNumberReader eReader=IOTools.getReaderFromFile(target); _EL_     LineNumberReader aReader=IOTools.getReaderFromFile(align); _EL_     int srcOffset=0; _EL_     int tgtOffset=0; _EL_     for (String fLine; (fLine=fReader.readLine()) != null; ) { _EL_       String eLine=eReader.readLine(); _EL_       String aLine=aReader.readLine(); _EL_       AlignedSentence sentence=corpus.getSentence(fLine,eLine,aLine); _EL_       if (sentence == null) { _EL_         logger.info("Discarding parallel example {}",fReader.getLineNumber()); _EL_       } _EL_  else { _EL_         System.arraycopy(sentence.source,0,srcBitext,srcOffset,sentence.sourceLength()); _EL_         System.arraycopy(sentence.f2e,0,f2e,srcOffset,sentence.f2e.length); _EL_         System.arraycopy(sentence.target,0,tgtBitext,tgtOffset,sentence.targetLength()); _EL_         System.arraycopy(sentence.e2f,0,e2f,tgtOffset,sentence.e2f.length); _EL_         srcOffset+=sentence.sourceLength(); _EL_         tgtOffset+=sentence.targetLength(); _EL_         srcBitext[srcOffset]=toSentenceOffset(tgtOffset); _EL_         tgtBitext[tgtOffset]=toSentenceOffset(srcOffset); _EL_         ++srcOffset; _EL_         ++tgtOffset; _EL_       } _EL_     } _EL_   } _EL_    this.vocabulary=corpus.getVocabulary(); _EL_   assert initialVocabularySize == vocabulary.size(); _EL_   timer.mark("Loading corpus"); _EL_   logger.info("Done loading corpus: {}",timer); _EL_ } _EL_ ', 'void pushInt(int i){ _EL_ switch (i) { _EL_ case -1: _EL_     mv.visitInsn(ICONST_M1); _EL_   return; _EL_ case 0: _EL_ mv.visitInsn(ICONST_0); _EL_ return; _EL_ case 1: _EL_ mv.visitInsn(ICONST_1); _EL_ return; _EL_ case 2: _EL_ mv.visitInsn(ICONST_2); _EL_ return; _EL_ case 3: _EL_ mv.visitInsn(ICONST_3); _EL_ return; _EL_ case 4: _EL_ mv.visitInsn(ICONST_4); _EL_ return; _EL_ case 5: _EL_ mv.visitInsn(ICONST_5); _EL_ return; _EL_ } _EL_ if (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE) { _EL_ mv.visitIntInsn(BIPUSH,i); _EL_ return; _EL_ } _EL_ if (i >= Short.MIN_VALUE && i <= Short.MAX_VALUE) { _EL_ mv.visitIntInsn(SIPUSH,i); _EL_ return; _EL_ } _EL_ mv.visitLdcInsn(Integer.valueOf(i)); _EL_ } _EL_ ', 'public JSONObject toJson() throws JSONException { _EL_   JSONObject json=new JSONObject(); _EL_   JSONArray jpods=new JSONArray(); _EL_   for (  DiasporaPod pod : pods) { _EL_     jpods.put(pod.toJson()); _EL_   } _EL_   json.put("pods",jpods); _EL_   json.put("timestamp",System.currentTimeMillis()); _EL_   return json; _EL_ } _EL_ ', 'void replacePolicyInResourceTree(ServiceTypeManager svtm,SSOToken token,Policy oldPolicy,Policy newPolicy) throws PolicyException, SSOException { _EL_   removePolicyFromResourceTree(svtm,token,oldPolicy); _EL_   addPolicyToResourceTree(svtm,token,newPolicy); _EL_ } _EL_ ', '@AfterMethod public void tearDown() throws Exception { _EL_   Throwable t=threadFailure.getAndSet(null); _EL_   if (t != null) { _EL_     if (t instanceof Error)     throw (Error)t; _EL_  else     if (t instanceof RuntimeException)     throw (RuntimeException)t; _EL_  else     if (t instanceof Exception)     throw (Exception)t; _EL_  else { _EL_       AssertionFailedError afe=new AssertionFailedError(t.toString()); _EL_       afe.initCause(t); _EL_       throw afe; _EL_     } _EL_   } _EL_   if (Thread.interrupted())   tearDownFail("interrupt status set in main thread"); _EL_   checkForkJoinPoolThreadLeaks(); _EL_ } _EL_ ', '@Override public void assertEquals(String message,Object expectedObj,Object actualObj){ _EL_   LinearRegressionModel expected=(LinearRegressionModel)expectedObj; _EL_   LinearRegressionModel actual=(LinearRegressionModel)actualObj; _EL_   message=message + " - Linear Regression Model \\"" + actual.getSource()+ "\\" does not match the expected Model"; _EL_   Assert.assertArrayEquals(message + " : coefficients are not equal",expected.getCoefficients(),actual.getCoefficients(),1E-15); _EL_   Assert.assertArrayEquals(message + " : probabilities are not equal",expected.getProbabilities(),actual.getProbabilities(),1E-15); _EL_   Assert.assertArrayEquals(message + " : selected attributes are not equal",expected.getSelectedAttributeNames(),actual.getSelectedAttributeNames()); _EL_   Assert.assertArrayEquals(message + " : selected attributes are not equal",expected.getSelectedAttributes(),actual.getSelectedAttributes()); _EL_   Assert.assertArrayEquals(message + " : standard errors are not equal",expected.getStandardErrors(),actual.getStandardErrors(),1E-15); _EL_   Assert.assertArrayEquals(message + " : standardized coefficients are not equal",expected.getStandardizedCoefficients(),actual.getStandardizedCoefficients(),1E-15); _EL_   Assert.assertArrayEquals(message + " : tolerances are not equal",expected.getTolerances(),actual.getTolerances(),1E-15); _EL_   Assert.assertArrayEquals(message + " : t statistics are not equal",expected.getTStats(),actual.getTStats(),1E-15); _EL_ } _EL_ ', 'public void load(X509Extension extensions){ _EL_   Set<String> critExts=extensions.getCriticalExtensionOIDs(); _EL_   Set<String> nonCritExts=extensions.getNonCriticalExtensionOIDs(); _EL_   List<X509Ext> sortedExts=new ArrayList<X509Ext>(); _EL_   for (Iterator<String> itr=critExts.iterator(); itr.hasNext(); ) { _EL_     String extOid=itr.next(); _EL_     byte[] value=extensions.getExtensionValue(extOid); _EL_     X509Ext ext=new X509Ext(new ASN1ObjectIdentifier(extOid),value,true); _EL_     sortedExts.add(ext); _EL_   } _EL_   for (Iterator<String> itr=nonCritExts.iterator(); itr.hasNext(); ) { _EL_     String extOid=itr.next(); _EL_     byte[] value=extensions.getExtensionValue(extOid); _EL_     X509Ext ext=new X509Ext(new ASN1ObjectIdentifier(extOid),value,false); _EL_     sortedExts.add(ext); _EL_   } _EL_   Collections.sort(sortedExts,new ExtensionNameComparator()); _EL_   data=new Object[sortedExts.size()][3]; _EL_   int i=0; _EL_   for (Iterator<X509Ext> itrSortedExts=sortedExts.iterator(); itrSortedExts.hasNext(); ) { _EL_     X509Ext ext=itrSortedExts.next(); _EL_     loadRow(ext,i); _EL_     i++; _EL_   } _EL_   fireTableDataChanged(); _EL_ } _EL_ ', 'public boolean textboxKeyTyped(char p_146201_1_,int p_146201_2_){ _EL_   if (!field_146213_o)   return false; _EL_  else switch (p_146201_1_) { _EL_ case 1: _EL_     func_146202_e(); _EL_   func_146199_i(0); _EL_ return true; _EL_ case 3: _EL_ GuiScreen.setClipboardString(func_146207_c()); _EL_ return true; _EL_ case 22: _EL_ if (field_146226_p) func_146191_b(GuiScreen.getClipboardString()); _EL_ return true; _EL_ case 24: _EL_ GuiScreen.setClipboardString(func_146207_c()); _EL_ if (field_146226_p) func_146191_b(""); _EL_ return true; _EL_ default : _EL_ switch (p_146201_2_) { _EL_ case 14: _EL_ if (GuiScreen.isCtrlKeyDown()) { _EL_ if (field_146226_p) func_146177_a(-1); _EL_ } _EL_  else if (field_146226_p) func_146175_b(-1); _EL_ return true; _EL_ case 199: _EL_ if (GuiScreen.isShiftKeyDown()) func_146199_i(0); _EL_  else func_146196_d(); _EL_ return true; _EL_ case 203: _EL_ if (GuiScreen.isShiftKeyDown()) { _EL_ if (GuiScreen.isCtrlKeyDown()) func_146199_i(func_146183_a(-1,func_146186_n())); _EL_  else func_146199_i(func_146186_n() - 1); _EL_ } _EL_  else if (GuiScreen.isCtrlKeyDown()) func_146190_e(func_146187_c(-1)); _EL_  else func_146182_d(-1); _EL_ return true; _EL_ case 205: _EL_ if (GuiScreen.isShiftKeyDown()) { _EL_ if (GuiScreen.isCtrlKeyDown()) func_146199_i(func_146183_a(1,func_146186_n())); _EL_  else func_146199_i(func_146186_n() + 1); _EL_ } _EL_  else if (GuiScreen.isCtrlKeyDown()) func_146190_e(func_146187_c(1)); _EL_  else func_146182_d(1); _EL_ return true; _EL_ case 207: _EL_ if (GuiScreen.isShiftKeyDown()) func_146199_i(field_146216_j.length()); _EL_  else func_146202_e(); _EL_ return true; _EL_ case 211: _EL_ if (GuiScreen.isCtrlKeyDown()) { _EL_ if (field_146226_p) func_146177_a(1); _EL_ } _EL_  else if (field_146226_p) func_146175_b(1); _EL_ return true; _EL_ default : _EL_ if (ChatAllowedCharacters.isAllowedCharacter(p_146201_1_)) { _EL_ if (field_146226_p) func_146191_b(Character.toString(p_146201_1_)); _EL_ return true; _EL_ } _EL_  else return false; _EL_ } _EL_ } _EL_ } _EL_ ', 'protected static boolean checkRawModulesTables(final CConnection connection,final String databaseName,final int rawModuleId){ _EL_   Preconditions.checkNotNull(connection,"IE02261: Connection argument can not be null"); _EL_   Preconditions.checkNotNull(databaseName,"IE02262: Database name argument can not be null"); _EL_   Preconditions.checkArgument(rawModuleId > 0,"Raw module id %s must be a positive integer",rawModuleId); _EL_   final ImmutableSet<String> rawTableNames=ImmutableSet.of(String.format(CTableNames.RAW_ADDRESS_COMMENTS_TABLE,rawModuleId),String.format(CTableNames.RAW_ADDRESS_REFERENCES_TABLE,rawModuleId),String.format(CTableNames.RAW_BASE_TYPES,rawModuleId),String.format(CTableNames.RAW_BASIC_BLOCK_INSTRUCTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_BASIC_BLOCKS_TABLE,rawModuleId),String.format(CTableNames.RAW_CALLGRAPH_TABLE,rawModuleId),String.format(CTableNames.RAW_CONTROL_FLOW_GRAPHS_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_NODES_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_SUBSTITUTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TREE_NODES_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TREES_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TYPES_TABLE,rawModuleId),String.format(CTableNames.RAW_FUNCTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_INSTRUCTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_OPERANDS_TABLE,rawModuleId),String.format(CTableNames.RAW_SECTIONS,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TYPE_INSTANCES,rawModuleId),String.format(CTableNames.RAW_TYPE_INSTACES,rawModuleId),String.format(CTableNames.RAW_TYPES,rawModuleId)); _EL_   final Pair<CConnection,String> cacheKey=new Pair<>(connection,databaseName); _EL_   if (PostgreSQLDatabaseFunctions.queryCache(cacheKey,rawTableNames)) { _EL_     return true; _EL_   } _EL_  else { _EL_     if (!PostgreSQLDatabaseFunctions.fillCache(cacheKey)) { _EL_       return false; _EL_     } _EL_     return PostgreSQLDatabaseFunctions.queryCache(cacheKey,rawTableNames); _EL_   } _EL_ } _EL_ ', 'public void processDispatch(UniformPair<EventBean[]> events){ _EL_   if (!forClauseDelivery) { _EL_     dispatchInternal(events); _EL_     return; _EL_   } _EL_   if ((groupDeliveryExpressions == null) || (groupDeliveryExpressions.length == 0)) { _EL_     UniformPair<EventBean[]> todeliver=new UniformPair<EventBean[]>(null,null); _EL_     if (events != null) { _EL_       if (events.getFirst() != null) { _EL_         for (        EventBean theEvent : events.getFirst()) { _EL_           todeliver.setFirst(new EventBean[]{theEvent}); _EL_           dispatchInternal(todeliver); _EL_         } _EL_         todeliver.setFirst(null); _EL_       } _EL_       if (events.getSecond() != null) { _EL_         for (        EventBean theEvent : events.getSecond()) { _EL_           todeliver.setSecond(new EventBean[]{theEvent}); _EL_           dispatchInternal(todeliver); _EL_         } _EL_         todeliver.setSecond(null); _EL_       } _EL_     } _EL_     return; _EL_   } _EL_   Map<Object,UniformPair<EventBean[]>> groups; _EL_   try { _EL_     groups=getGroupedResults(events); _EL_   } _EL_  catch (  RuntimeException ex) { _EL_     log.error("Unexpected exception evaluating grouped-delivery expressions: " + ex.getMessage() + ", delivering ungrouped",ex); _EL_     dispatchInternal(events); _EL_     return; _EL_   } _EL_   for (  Map.Entry<Object,UniformPair<EventBean[]>> group : groups.entrySet()) { _EL_     dispatchInternal(group.getValue()); _EL_   } _EL_ } _EL_ ', 'public static VolumeGroupRestRep map(VolumeGroup from){ _EL_   if (from == null) { _EL_     return null; _EL_   } _EL_   VolumeGroupRestRep rep=new VolumeGroupRestRep(); _EL_   mapDataObjectFields(from,rep); _EL_   rep.setDescription(from.getDescription()); _EL_   rep.setRoles(from.getRoles()); _EL_   rep.setParent(toRelatedResource(ResourceTypeEnum.VOLUME_GROUP,from.getParent())); _EL_   rep.setMigrationGroupBy(from.getMigrationGroupBy()); _EL_   rep.setMigrationType(from.getMigrationType()); _EL_   return rep; _EL_ } _EL_ '], 'distance': [7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -4, -4, -4, -4, -4, -5, -5, -6, -6, -6]}